<span class="line">    1 </span>define new_list <span class="sym">(</span>n<span class="sym">)
</span><span class="line">    2 </span><span class="sym">{
</span><span class="line">    3 </span><span class="sym"></span>   variable l <span class="sym">=</span> <span class="kwb">struct
</span><span class="line">    4 </span><span class="kwb"></span>     <span class="sym">{
</span><span class="line">    5 </span><span class="sym"></span>        root<span class="sym">,</span> tail<span class="sym">,</span> data<span class="sym">,</span> len
<span class="line">    6 </span>     <span class="sym">};
</span><span class="line">    7 </span><span class="sym"></span>   l<span class="sym">.</span>data <span class="sym">= [</span><span class="num">1</span><span class="sym">:</span>n<span class="sym">];
</span><span class="line">    8 </span><span class="sym"></span>   l<span class="sym">.</span>root <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">    9 </span><span class="sym"></span>   l<span class="sym">.</span>tail <span class="sym">=</span> n<span class="sym">;
</span><span class="line">   10 </span><span class="sym"></span>   l<span class="sym">.</span>len <span class="sym">=</span> n<span class="sym">;
</span><span class="line">   11 </span><span class="sym"></span>   <span class="kwa">return</span> l<span class="sym">;
</span><span class="line">   12 </span><span class="sym">}
</span><span class="line">   13 </span><span class="sym">
</span><span class="line">   14 </span><span class="sym"></span>define expand_list <span class="sym">(</span>l<span class="sym">,</span> len<span class="sym">)
</span><span class="line">   15 </span><span class="sym">{
</span><span class="line">   16 </span><span class="sym"></span>   len <span class="sym">+=</span> <span class="num">4096</span><span class="sym">;
</span><span class="line">   17 </span><span class="sym"></span>   variable data <span class="sym">=</span> Int_Type<span class="sym">[</span>len<span class="sym">];
</span><span class="line">   18 </span><span class="sym"></span>   variable root <span class="sym">=</span> l<span class="sym">.</span>root<span class="sym">;
</span><span class="line">   19 </span><span class="sym"></span>   variable tail <span class="sym">=</span> l<span class="sym">.</span>tail<span class="sym">;
</span><span class="line">   20 </span><span class="sym"></span>   variable n <span class="sym">= (</span>tail <span class="sym">-</span> root<span class="sym">);
</span><span class="line">   21 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>n<span class="sym">)
</span><span class="line">   22 </span><span class="sym"></span>     data<span class="sym">[[</span><span class="num">0</span><span class="sym">:</span>n<span class="num">-1</span><span class="sym">]] =</span> l<span class="sym">.</span>data<span class="sym">[[</span>root<span class="sym">:</span>tail<span class="num">-1</span><span class="sym">]];
</span><span class="line">   23 </span><span class="sym"></span>   l<span class="sym">.</span>data <span class="sym">=</span> data<span class="sym">;
</span><span class="line">   24 </span><span class="sym"></span>   l<span class="sym">.</span>root <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   25 </span><span class="sym"></span>   l<span class="sym">.</span>tail <span class="sym">=</span> n<span class="sym">;
</span><span class="line">   26 </span><span class="sym"></span>   l<span class="sym">.</span>len <span class="sym">=</span> len<span class="sym">;
</span><span class="line">   27 </span><span class="sym">}
</span><span class="line">   28 </span><span class="sym">
</span><span class="line">   29 </span><span class="sym"></span>define list_append <span class="sym">(</span>l<span class="sym">,</span> value<span class="sym">)
</span><span class="line">   30 </span><span class="sym">{
</span><span class="line">   31 </span><span class="sym"></span>   variable tail <span class="sym">=</span> l<span class="sym">.</span>tail<span class="sym">;
</span><span class="line">   32 </span><span class="sym">
</span><span class="line">   33 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>l<span class="sym">.</span>tail <span class="sym">==</span> l<span class="sym">.</span>len<span class="sym">)
</span><span class="line">   34 </span><span class="sym">     {
</span><span class="line">   35 </span><span class="sym"></span>        expand_list <span class="sym">(</span>l<span class="sym">,</span> l<span class="sym">.</span>len <span class="sym">+</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   36 </span><span class="sym"></span>        tail <span class="sym">=</span> l<span class="sym">.</span>tail<span class="sym">;
</span><span class="line">   37 </span><span class="sym">     }
</span><span class="line">   38 </span><span class="sym">
</span><span class="line">   39 </span><span class="sym"></span>   l<span class="sym">.</span>data<span class="sym">[</span>tail<span class="sym">] =</span> value<span class="sym">;
</span><span class="line">   40 </span><span class="sym"></span>   tail<span class="sym">++;
</span><span class="line">   41 </span><span class="sym"></span>   l<span class="sym">.</span>tail <span class="sym">=</span> tail<span class="sym">;
</span><span class="line">   42 </span><span class="sym">}
</span><span class="line">   43 </span><span class="sym">
</span><span class="line">   44 </span><span class="sym"></span>define list_pop_right <span class="sym">(</span>l<span class="sym">)
</span><span class="line">   45 </span><span class="sym">{
</span><span class="line">   46 </span><span class="sym"></span>   variable tail <span class="sym">=</span> l<span class="sym">.</span>tail<span class="sym">;
</span><span class="line">   47 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>tail <span class="sym">==</span> l<span class="sym">.</span>root<span class="sym">)
</span><span class="line">   48 </span><span class="sym"></span>     <span class="kwa">return</span> NULL<span class="sym">;
</span><span class="line">   49 </span><span class="sym"></span>   tail<span class="sym">--;
</span><span class="line">   50 </span><span class="sym"></span>   l<span class="sym">.</span>tail <span class="sym">=</span> tail<span class="sym">;
</span><span class="line">   51 </span><span class="sym"></span>   <span class="kwa">return</span> l<span class="sym">.</span>data<span class="sym">[</span>tail<span class="sym">];
</span><span class="line">   52 </span><span class="sym">}
</span><span class="line">   53 </span><span class="sym">
</span><span class="line">   54 </span><span class="sym"></span>define list_pop_left <span class="sym">(</span>l<span class="sym">)
</span><span class="line">   55 </span><span class="sym">{
</span><span class="line">   56 </span><span class="sym"></span>   variable root <span class="sym">=</span> l<span class="sym">.</span>root<span class="sym">;
</span><span class="line">   57 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>l<span class="sym">.</span>tail <span class="sym">==</span> root<span class="sym">)
</span><span class="line">   58 </span><span class="sym"></span>     <span class="kwa">return</span> NULL<span class="sym">;
</span><span class="line">   59 </span><span class="sym"></span>   l<span class="sym">.</span>root <span class="sym">=</span> root<span class="sym">+</span><span class="num">1</span><span class="sym">;
</span><span class="line">   60 </span><span class="sym"></span>   <span class="kwa">return</span> l<span class="sym">.</span>data<span class="sym">[</span>root<span class="sym">];
</span><span class="line">   61 </span><span class="sym">}
</span><span class="line">   62 </span><span class="sym">
</span><span class="line">   63 </span><span class="sym"></span>define list_length <span class="sym">(</span>l<span class="sym">)
</span><span class="line">   64 </span><span class="sym">{
</span><span class="line">   65 </span><span class="sym"></span>   <span class="kwa">return</span> l<span class="sym">.</span>tail <span class="sym">-</span> l<span class="sym">.</span>root<span class="sym">;
</span><span class="line">   66 </span><span class="sym">}
</span><span class="line">   67 </span><span class="sym">
</span><span class="line">   68 </span><span class="sym"></span>define reverse_list <span class="sym">(</span>l<span class="sym">)
</span><span class="line">   69 </span><span class="sym">{
</span><span class="line">   70 </span><span class="sym"></span>   variable tail <span class="sym">=</span> l<span class="sym">.</span>tail<span class="sym">;
</span><span class="line">   71 </span><span class="sym"></span>   variable root <span class="sym">=</span> l<span class="sym">.</span>root<span class="sym">;
</span><span class="line">   72 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>tail <span class="sym">==</span> root<span class="sym">)
</span><span class="line">   73 </span><span class="sym"></span>     <span class="kwa">return</span><span class="sym">;
</span><span class="line">   74 </span><span class="sym">
</span><span class="line">   75 </span><span class="sym"></span>   tail<span class="sym">--;
</span><span class="line">   76 </span><span class="sym"></span>   l<span class="sym">.</span>data<span class="sym">[[</span>root<span class="sym">:</span>tail<span class="sym">]] =</span> l<span class="sym">.</span>data<span class="sym">[[</span>tail<span class="sym">:</span>root<span class="sym">:-</span><span class="num">1</span><span class="sym">]];
</span><span class="line">   77 </span><span class="sym">}
</span><span class="line">   78 </span><span class="sym">
</span><span class="line">   79 </span><span class="sym"></span>define dup_list <span class="sym">(</span>l<span class="sym">)
</span><span class="line">   80 </span><span class="sym">{
</span><span class="line">   81 </span><span class="sym"></span>   variable new_l <span class="sym">=</span> &#64;l<span class="sym">;
</span><span class="line">   82 </span><span class="sym"></span>   new_l<span class="sym">.</span>data <span class="sym">=</span> &#64;l<span class="sym">.</span>data<span class="sym">;
</span><span class="line">   83 </span><span class="sym"></span>   <span class="kwa">return</span> new_l<span class="sym">;
</span><span class="line">   84 </span><span class="sym">}
</span><span class="line">   85 </span><span class="sym">
</span><span class="line">   86 </span><span class="sym"></span>define list_to_array <span class="sym">(</span>a<span class="sym">)
</span><span class="line">   87 </span><span class="sym">{
</span><span class="line">   88 </span><span class="sym"></span>   variable tail<span class="sym">,</span> root<span class="sym">;
</span><span class="line">   89 </span><span class="sym"></span>   tail <span class="sym">=</span> a<span class="sym">.</span>tail<span class="sym">;
</span><span class="line">   90 </span><span class="sym"></span>   root <span class="sym">=</span> a<span class="sym">.</span>root<span class="sym">;
</span><span class="line">   91 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>root <span class="sym">==</span> tail<span class="sym">)
</span><span class="line">   92 </span><span class="sym"></span>     <span class="kwa">return</span> NULL<span class="sym">;
</span><span class="line">   93 </span><span class="sym"></span>   tail<span class="sym">--;
</span><span class="line">   94 </span><span class="sym"></span>   <span class="kwa">return</span> a<span class="sym">.</span>data<span class="sym">[[</span>root<span class="sym">:</span>tail<span class="sym">]];
</span><span class="line">   95 </span><span class="sym">}
</span><span class="line">   96 </span><span class="sym">
</span><span class="line">   97 </span><span class="sym"></span>define check_eqs <span class="sym">(</span>a<span class="sym">,</span> b<span class="sym">)
</span><span class="line">   98 </span><span class="sym">{
</span><span class="line">   99 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>list_length <span class="sym">(</span>a<span class="sym">) !=</span> list_length <span class="sym">(</span>b<span class="sym">))
</span><span class="line">  100 </span><span class="sym"></span>     <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  101 </span><span class="sym"></span>   variable data_a <span class="sym">=</span> list_to_array <span class="sym">(</span>a<span class="sym">);
</span><span class="line">  102 </span><span class="sym"></span>   variable data_b <span class="sym">=</span> list_to_array <span class="sym">(</span>b<span class="sym">);
</span><span class="line">  103 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>data_a <span class="sym">==</span> NULL<span class="sym">)
</span><span class="line">  104 </span><span class="sym"></span>     <span class="kwa">return</span> <span class="num">1</span><span class="sym">;                               %</span>  same length<span class="sym">,</span> but empty
<span class="line">  105 </span>
<span class="line">  106 </span>   <span class="kwa">return not</span> length <span class="sym">(</span>where <span class="sym">(</span>data_a <span class="sym">!=</span> data_b<span class="sym">));
</span><span class="line">  107 </span><span class="sym">}
</span><span class="line">  108 </span><span class="sym">
</span><span class="line">  109 </span><span class="sym"></span>variable SIZE <span class="sym">=</span> <span class="num">10000</span><span class="sym">;
</span><span class="line">  110 </span><span class="sym"></span>define test_lists <span class="sym">()
</span><span class="line">  111 </span><span class="sym">{
</span><span class="line">  112 </span><span class="sym"></span>   variable L1 <span class="sym">=</span> new_list <span class="sym">(</span>SIZE<span class="sym">);
</span><span class="line">  113 </span><span class="sym"></span>   variable L2 <span class="sym">=</span> dup_list <span class="sym">(</span>L1<span class="sym">);
</span><span class="line">  114 </span><span class="sym"></span>   variable L3 <span class="sym">=</span> new_list <span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">  115 </span><span class="sym">
</span><span class="line">  116 </span><span class="sym"></span>   forever
<span class="line">  117 </span>     <span class="sym">{
</span><span class="line">  118 </span><span class="sym"></span>        variable node <span class="sym">=</span> list_pop_left <span class="sym">(</span>L2<span class="sym">);
</span><span class="line">  119 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>node <span class="sym">==</span> NULL<span class="sym">)
</span><span class="line">  120 </span><span class="sym"></span>          <span class="kwa">break</span><span class="sym">;
</span><span class="line">  121 </span><span class="sym">
</span><span class="line">  122 </span><span class="sym"></span>        list_append <span class="sym">(</span>L3<span class="sym">,</span> node<span class="sym">);
</span><span class="line">  123 </span><span class="sym">     }
</span><span class="line">  124 </span><span class="sym">
</span><span class="line">  125 </span><span class="sym"></span>   forever
<span class="line">  126 </span>     <span class="sym">{
</span><span class="line">  127 </span><span class="sym"></span>        node <span class="sym">=</span> list_pop_right <span class="sym">(</span>L3<span class="sym">);
</span><span class="line">  128 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>node <span class="sym">==</span> NULL<span class="sym">)
</span><span class="line">  129 </span><span class="sym"></span>          <span class="kwa">break</span><span class="sym">;
</span><span class="line">  130 </span><span class="sym">
</span><span class="line">  131 </span><span class="sym"></span>        list_append <span class="sym">(</span>L2<span class="sym">,</span> node<span class="sym">);
</span><span class="line">  132 </span><span class="sym">     }
</span><span class="line">  133 </span><span class="sym"></span>   reverse_list <span class="sym">(</span>L1<span class="sym">);
</span><span class="line">  134 </span><span class="sym">
</span><span class="line">  135 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>L1<span class="sym">.</span>data<span class="sym">[</span>L1<span class="sym">.</span>root<span class="sym">] !=</span> SIZE<span class="sym">)
</span><span class="line">  136 </span><span class="sym"></span>     <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span><span class="line">  137 </span><span class="sym">
</span><span class="line">  138 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span><span class="num">0</span> <span class="sym">==</span> check_eqs <span class="sym">(</span>L1<span class="sym">,</span> L2<span class="sym">))
</span><span class="line">  139 </span><span class="sym"></span>     <span class="kwa">return</span> <span class="num">-2</span><span class="sym">;
</span><span class="line">  140 </span><span class="sym">
</span><span class="line">  141 </span><span class="sym"></span>   <span class="kwa">return</span> list_length <span class="sym">(</span>L1<span class="sym">);
</span><span class="line">  142 </span><span class="sym">}
</span><span class="line">  143 </span><span class="sym">
</span><span class="line">  144 </span><span class="sym">
</span><span class="line">  145 </span><span class="sym"></span>define main <span class="sym">()
</span><span class="line">  146 </span><span class="sym">{
</span><span class="line">  147 </span><span class="sym"></span>   variable num <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">  148 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> num <span class="sym">=</span> integer <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);
</span><span class="line">  149 </span><span class="sym"></span>   loop <span class="sym">(</span>num<span class="sym">)
</span><span class="line">  150 </span><span class="sym"></span>     num <span class="sym">=</span> test_lists <span class="sym">();
</span><span class="line">  151 </span><span class="sym">
</span><span class="line">  152 </span><span class="sym"></span>   fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> num<span class="sym">);
</span><span class="line">  153 </span><span class="sym">}
</span><span class="line">  154 </span><span class="sym">
</span><span class="line">  155 </span><span class="sym"></span>main <span class="sym">();
</span><span class="line">  156 </span><span class="sym"></span>
