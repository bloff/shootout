<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
define <B><FONT COLOR="#0000FF">new_list</FONT></B> (n)
{
   variable l = <B><FONT COLOR="#228B22">struct</FONT></B>
     {
	root, tail, data, len
     };
   l.data = [1:n];
   l.root = 0;
   l.tail = n;
   l.len = n;
   <B><FONT COLOR="#A020F0">return</FONT></B> l;
}

define <B><FONT COLOR="#0000FF">expand_list</FONT></B> (l, len)
{
   len += 4096;
   variable data = Int_Type[len];
   variable root = l.root;
   variable tail = l.tail;
   variable n = (tail - root);
   <B><FONT COLOR="#A020F0">if</FONT></B> (n)
     data[[0:n-1]] = l.data[[root:tail-1]];
   l.data = data;
   l.root = 0;
   l.tail = n;
   l.len = len;
}

define <B><FONT COLOR="#0000FF">list_append</FONT></B> (l, value)
{
   variable tail = l.tail;

   <B><FONT COLOR="#A020F0">if</FONT></B> (l.tail == l.len)
     {
	expand_list (l, l.len + 1);
	tail = l.tail;
     }

   l.data[tail] = value;
   tail++;
   l.tail = tail;
}

define <B><FONT COLOR="#0000FF">list_pop_right</FONT></B> (l)
{
   variable tail = l.tail;
   <B><FONT COLOR="#A020F0">if</FONT></B> (tail == l.root)
     <B><FONT COLOR="#A020F0">return</FONT></B> NULL;
   tail--;
   l.tail = tail;
   <B><FONT COLOR="#A020F0">return</FONT></B> l.data[tail];
}

define <B><FONT COLOR="#0000FF">list_pop_left</FONT></B> (l)
{
   variable root = l.root;
   <B><FONT COLOR="#A020F0">if</FONT></B> (l.tail == root)
     <B><FONT COLOR="#A020F0">return</FONT></B> NULL;
   l.root = root+1;
   <B><FONT COLOR="#A020F0">return</FONT></B> l.data[root];
}

define <B><FONT COLOR="#0000FF">list_length</FONT></B> (l)
{
   <B><FONT COLOR="#A020F0">return</FONT></B> l.tail - l.root;
}

define <B><FONT COLOR="#0000FF">reverse_list</FONT></B> (l)
{
   variable tail = l.tail;
   variable root = l.root;
   <B><FONT COLOR="#A020F0">if</FONT></B> (tail == root)
     <B><FONT COLOR="#A020F0">return</FONT></B>;

   tail--;
   l.data[[root:tail]] = l.data[[tail:root:-1]];
}

define <B><FONT COLOR="#0000FF">dup_list</FONT></B> (l)
{
   variable new_l = @l;
   new_l.data = @l.data;
   <B><FONT COLOR="#A020F0">return</FONT></B> new_l;
}

define <B><FONT COLOR="#0000FF">list_to_array</FONT></B> (a)
{
   variable tail, root;
   tail = a.tail;
   root = a.root;
   <B><FONT COLOR="#A020F0">if</FONT></B> (root == tail)
     <B><FONT COLOR="#A020F0">return</FONT></B> NULL;
   tail--;
   <B><FONT COLOR="#A020F0">return</FONT></B> a.data[[root:tail]];
}

define <B><FONT COLOR="#0000FF">check_eqs</FONT></B> (a, b)
{
   <B><FONT COLOR="#A020F0">if</FONT></B> (list_length (a) != list_length (b))
     <B><FONT COLOR="#A020F0">return</FONT></B> 0;
   variable data_a = list_to_array (a);
   variable data_b = list_to_array (b);
   <B><FONT COLOR="#A020F0">if</FONT></B> (data_a == NULL)
     <B><FONT COLOR="#A020F0">return</FONT></B> 1;			       %  same length, but empty
   
   <B><FONT COLOR="#A020F0">return</FONT></B> not length (where (data_a != data_b));
}

variable SIZE = 10000;	
define <B><FONT COLOR="#0000FF">test_lists</FONT></B> ()
{
   variable L1 = new_list (SIZE);
   variable L2 = dup_list (L1);
   variable L3 = new_list (0);
   
   forever 
     {
	variable node = list_pop_left (L2);
	<B><FONT COLOR="#A020F0">if</FONT></B> (node == NULL)
	  <B><FONT COLOR="#A020F0">break</FONT></B>;

	list_append (L3, node);
     }

   forever 
     {
	node = list_pop_right (L3);
	<B><FONT COLOR="#A020F0">if</FONT></B> (node == NULL)
	  <B><FONT COLOR="#A020F0">break</FONT></B>;
	
	list_append (L2, node);
     }
   reverse_list (L1);

   <B><FONT COLOR="#A020F0">if</FONT></B> (L1.data[L1.root] != SIZE)
     <B><FONT COLOR="#A020F0">return</FONT></B> -1;

   <B><FONT COLOR="#A020F0">if</FONT></B> (0 == check_eqs (L1, L2))
     <B><FONT COLOR="#A020F0">return</FONT></B> -2;
   
   <B><FONT COLOR="#A020F0">return</FONT></B> list_length (L1);
}

    
define <B><FONT COLOR="#0000FF">main</FONT></B> ()
{
   variable num = 1;
   <B><FONT COLOR="#A020F0">if</FONT></B> (__argc &gt; 1) num = integer (__argv[1]);
   loop (num)
     num = test_lists ();
   
   fprintf (stdout, <B><FONT COLOR="#BC8F8F">&quot;%d\n&quot;</FONT></B>, num);
}

<B><FONT COLOR="#0000FF">main</FONT></B> ();
   </pre></td></tr></table>
