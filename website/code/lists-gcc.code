<span class="line">    1 </span><span class="com">/* -*- mode: c -*-
</span><span class="line">    2 </span><span class="com"> * $Id: lists-gcc.code,v 1.4 2004-11-13 07:41:44 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> */</span>
<span class="line">    5 </span>
<span class="line">    6 </span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="line">    7 </span><span class="dir"></span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="line">    8 </span><span class="dir"></span><span class="dir">#include &lt;string.h&gt;
</span><span class="line">    9 </span><span class="dir"></span><span class="dir">#include &lt;unistd.h&gt;
</span><span class="line">   10 </span><span class="dir"></span>
<span class="line">   11 </span><span class="dir">#define SIZE 10000
</span><span class="line">   12 </span><span class="dir"></span>
<span class="line">   13 </span><span class="slc">// a simple Double Linked List
</span><span class="line">   14 </span><span class="slc"></span><span class="slc">// the head node is special, it's val is length of list
</span><span class="line">   15 </span><span class="slc"></span><span class="kwc">typedef</span> <span class="kwb">struct</span> DLL <span class="sym">{
</span><span class="line">   16 </span><span class="sym"></span>    <span class="kwb">int</span> val<span class="sym">;
</span><span class="line">   17 </span><span class="sym"></span>    <span class="kwb">struct</span> DLL <span class="sym">*</span>next<span class="sym">;</span>        <span class="com">/* points to next or head (if at tail) */</span>
<span class="line">   18 </span>    <span class="kwb">struct</span> DLL <span class="sym">*</span>prev<span class="sym">;</span>        <span class="com">/* points to prev or tail (if at head) */</span>
<span class="line">   19 </span><span class="sym">}</span> DLL<span class="sym">;
</span><span class="line">   20 </span><span class="sym">
</span><span class="line">   21 </span><span class="sym"></span><span class="kwc">inline</span> <span class="kwb">int</span> list_length<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span>head<span class="sym">-&gt;</span>val<span class="sym">); }
</span><span class="line">   22 </span><span class="sym"></span><span class="kwc">inline</span> <span class="kwb">int</span> list_empty<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span>list_length<span class="sym">(</span>head<span class="sym">) ==</span> <span class="num">0</span><span class="sym">); }
</span><span class="line">   23 </span><span class="sym"></span><span class="kwc">inline</span> DLL <span class="sym">*</span>list_first<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span>head<span class="sym">-&gt;</span>next<span class="sym">); }
</span><span class="line">   24 </span><span class="sym"></span><span class="kwc">inline</span> DLL <span class="sym">*</span>list_last<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span>head<span class="sym">-&gt;</span>prev<span class="sym">); }
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym"></span><span class="kwb">void</span> list_push_tail<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">,</span> DLL <span class="sym">*</span>item<span class="sym">) {
</span><span class="line">   27 </span><span class="sym"></span>    DLL <span class="sym">*</span>tail <span class="sym">=</span> head<span class="sym">-&gt;</span>prev<span class="sym">;
</span><span class="line">   28 </span><span class="sym"></span>    tail<span class="sym">-&gt;</span>next <span class="sym">=</span> item<span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>    item<span class="sym">-&gt;</span>next <span class="sym">=</span> head<span class="sym">;
</span><span class="line">   30 </span><span class="sym"></span>    head<span class="sym">-&gt;</span>prev <span class="sym">=</span> item<span class="sym">;
</span><span class="line">   31 </span><span class="sym"></span>    item<span class="sym">-&gt;</span>prev <span class="sym">=</span> tail<span class="sym">;
</span><span class="line">   32 </span><span class="sym"></span>    head<span class="sym">-&gt;</span>val<span class="sym">++;
</span><span class="line">   33 </span><span class="sym">}
</span><span class="line">   34 </span><span class="sym">
</span><span class="line">   35 </span><span class="sym"></span>DLL <span class="sym">*</span>list_pop_tail<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">) {
</span><span class="line">   36 </span><span class="sym"></span>    DLL <span class="sym">*</span>prev<span class="sym">, *</span>tail<span class="sym">;
</span><span class="line">   37 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>list_empty<span class="sym">(</span>head<span class="sym">))</span> <span class="kwa">return</span><span class="sym">(</span>NULL<span class="sym">);
</span><span class="line">   38 </span><span class="sym"></span>    tail <span class="sym">=</span> head<span class="sym">-&gt;</span>prev<span class="sym">;
</span><span class="line">   39 </span><span class="sym"></span>    prev <span class="sym">=</span> tail<span class="sym">-&gt;</span>prev<span class="sym">;
</span><span class="line">   40 </span><span class="sym"></span>    prev<span class="sym">-&gt;</span>next <span class="sym">=</span> head<span class="sym">;
</span><span class="line">   41 </span><span class="sym"></span>    head<span class="sym">-&gt;</span>prev <span class="sym">=</span> prev<span class="sym">;
</span><span class="line">   42 </span><span class="sym"></span>    head<span class="sym">-&gt;</span>val<span class="sym">--;
</span><span class="line">   43 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span>tail<span class="sym">);
</span><span class="line">   44 </span><span class="sym">}
</span><span class="line">   45 </span><span class="sym">
</span><span class="line">   46 </span><span class="sym"></span><span class="kwb">void</span> list_push_head<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">,</span> DLL <span class="sym">*</span>item<span class="sym">) {
</span><span class="line">   47 </span><span class="sym"></span>    DLL <span class="sym">*</span>next <span class="sym">=</span> head<span class="sym">-&gt;</span>next<span class="sym">;
</span><span class="line">   48 </span><span class="sym"></span>    head<span class="sym">-&gt;</span>next <span class="sym">=</span> item<span class="sym">;
</span><span class="line">   49 </span><span class="sym"></span>    next<span class="sym">-&gt;</span>prev <span class="sym">=</span> item<span class="sym">;
</span><span class="line">   50 </span><span class="sym"></span>    item<span class="sym">-&gt;</span>next <span class="sym">=</span> next<span class="sym">;
</span><span class="line">   51 </span><span class="sym"></span>    item<span class="sym">-&gt;</span>prev <span class="sym">=</span> head<span class="sym">;
</span><span class="line">   52 </span><span class="sym"></span>    head<span class="sym">-&gt;</span>val<span class="sym">++;
</span><span class="line">   53 </span><span class="sym">}
</span><span class="line">   54 </span><span class="sym">
</span><span class="line">   55 </span><span class="sym"></span>DLL <span class="sym">*</span>list_pop_head<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">) {
</span><span class="line">   56 </span><span class="sym"></span>    DLL <span class="sym">*</span>next<span class="sym">;
</span><span class="line">   57 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>list_empty<span class="sym">(</span>head<span class="sym">))</span> <span class="kwa">return</span><span class="sym">(</span>NULL<span class="sym">);
</span><span class="line">   58 </span><span class="sym"></span>    next <span class="sym">=</span> head<span class="sym">-&gt;</span>next<span class="sym">;
</span><span class="line">   59 </span><span class="sym"></span>    head<span class="sym">-&gt;</span>next <span class="sym">=</span> next<span class="sym">-&gt;</span>next<span class="sym">;
</span><span class="line">   60 </span><span class="sym"></span>    next<span class="sym">-&gt;</span>next<span class="sym">-&gt;</span>prev <span class="sym">=</span> head<span class="sym">;
</span><span class="line">   61 </span><span class="sym"></span>    head<span class="sym">-&gt;</span>val<span class="sym">--;
</span><span class="line">   62 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span>next<span class="sym">);
</span><span class="line">   63 </span><span class="sym">}
</span><span class="line">   64 </span><span class="sym">
</span><span class="line">   65 </span><span class="sym"></span><span class="kwb">int</span> list_equal<span class="sym">(</span>DLL <span class="sym">*</span>x<span class="sym">,</span> DLL <span class="sym">*</span>y<span class="sym">) {
</span><span class="line">   66 </span><span class="sym"></span>    DLL <span class="sym">*</span>xp<span class="sym">, *</span>yp<span class="sym">;
</span><span class="line">   67 </span><span class="sym"></span>    <span class="slc">// first val's checked will be list lengths
</span><span class="line">   68 </span><span class="slc"></span>    <span class="kwa">for</span> <span class="sym">(</span>xp<span class="sym">=</span>x<span class="sym">,</span> yp<span class="sym">=</span>y<span class="sym">;</span> xp<span class="sym">-&gt;</span>next <span class="sym">!=</span> x<span class="sym">;</span> xp<span class="sym">=</span>xp<span class="sym">-&gt;</span>next<span class="sym">,</span> yp<span class="sym">=</span>yp<span class="sym">-&gt;</span>next<span class="sym">) {
</span><span class="line">   69 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>xp<span class="sym">-&gt;</span>val <span class="sym">!=</span> yp<span class="sym">-&gt;</span>val<span class="sym">)</span> <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">   70 </span><span class="sym">    }
</span><span class="line">   71 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>xp<span class="sym">-&gt;</span>val <span class="sym">!=</span> yp<span class="sym">-&gt;</span>val<span class="sym">)</span> <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">   72 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span>yp<span class="sym">-&gt;</span>next <span class="sym">==</span> y<span class="sym">);
</span><span class="line">   73 </span><span class="sym">}
</span><span class="line">   74 </span><span class="sym">
</span><span class="line">   75 </span><span class="sym"></span><span class="kwb">void</span> list_print<span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>msg<span class="sym">,</span> DLL <span class="sym">*</span>x<span class="sym">) {
</span><span class="line">   76 </span><span class="sym"></span>    DLL <span class="sym">*</span>xp<span class="sym">, *</span>first <span class="sym">=</span> x<span class="sym">-&gt;</span>next<span class="sym">;
</span><span class="line">   77 </span><span class="sym"></span>    <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   78 </span><span class="sym"></span>    fputs<span class="sym">(</span>msg<span class="sym">,</span> stdout<span class="sym">);
</span><span class="line">   79 </span><span class="sym"></span>    printf<span class="sym">(</span><span class="str">&quot;length: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> list_length<span class="sym">(</span>x<span class="sym">));
</span><span class="line">   80 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>xp<span class="sym">=</span>x<span class="sym">-&gt;</span>next<span class="sym">;</span> xp<span class="sym">-&gt;</span>next <span class="sym">!=</span> first<span class="sym">;</span> xp<span class="sym">=</span>xp<span class="sym">-&gt;</span>next<span class="sym">) {
</span><span class="line">   81 </span><span class="sym"></span>        printf<span class="sym">(</span><span class="str">&quot;i:%3d  v:%3d  n:%3d  p:%3d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, ++</span>i<span class="sym">,
</span><span class="line">   82 </span><span class="sym"></span>               xp<span class="sym">-&gt;</span>val<span class="sym">,</span> xp<span class="sym">-&gt;</span>next<span class="sym">-&gt;</span>val<span class="sym">,</span> xp<span class="sym">-&gt;</span>prev<span class="sym">-&gt;</span>val<span class="sym">);
</span><span class="line">   83 </span><span class="sym">    }
</span><span class="line">   84 </span><span class="sym"></span>    printf<span class="sym">(</span><span class="str">&quot;[last entry points to list head]</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">   85 </span><span class="sym"></span>    printf<span class="sym">(</span><span class="str">&quot;[val of next of tail is:  %d]</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> xp<span class="sym">-&gt;</span>next<span class="sym">-&gt;</span>val<span class="sym">);
</span><span class="line">   86 </span><span class="sym">}
</span><span class="line">   87 </span><span class="sym">
</span><span class="line">   88 </span><span class="sym"></span>DLL <span class="sym">*</span>list_new<span class="sym">() {
</span><span class="line">   89 </span><span class="sym"></span>    DLL <span class="sym">*</span>l <span class="sym">= (</span>DLL <span class="sym">*)</span>malloc<span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span>DLL<span class="sym">));
</span><span class="line">   90 </span><span class="sym"></span>    l<span class="sym">-&gt;</span>next <span class="sym">=</span> l<span class="sym">;
</span><span class="line">   91 </span><span class="sym"></span>    l<span class="sym">-&gt;</span>prev <span class="sym">=</span> l<span class="sym">;
</span><span class="line">   92 </span><span class="sym"></span>    l<span class="sym">-&gt;</span>val <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   93 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span>l<span class="sym">);
</span><span class="line">   94 </span><span class="sym">}
</span><span class="line">   95 </span><span class="sym">
</span><span class="line">   96 </span><span class="sym"></span><span class="com">/* inclusive sequence 'from' &lt;-&gt; 'to' */</span>
<span class="line">   97 </span>DLL <span class="sym">*</span>list_sequence<span class="sym">(</span><span class="kwb">int</span> from<span class="sym">,</span> <span class="kwb">int</span> to<span class="sym">) {
</span><span class="line">   98 </span><span class="sym"></span>    <span class="kwb">int</span> size<span class="sym">,</span> tmp<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">;
</span><span class="line">   99 </span><span class="sym"></span>    DLL <span class="sym">*</span>l<span class="sym">;
</span><span class="line">  100 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>from <span class="sym">&gt;</span> to<span class="sym">) {
</span><span class="line">  101 </span><span class="sym"></span>        tmp <span class="sym">=</span> from<span class="sym">;</span> from <span class="sym">=</span> to<span class="sym">;</span> to <span class="sym">=</span> tmp<span class="sym">;
</span><span class="line">  102 </span><span class="sym">    }
</span><span class="line">  103 </span><span class="sym"></span>    size <span class="sym">=</span> to <span class="sym">-</span> from <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">  104 </span><span class="sym"></span>    l <span class="sym">= (</span>DLL <span class="sym">*)</span>malloc<span class="sym">((</span>size<span class="sym">+</span><span class="num">1</span><span class="sym">) *</span> <span class="kwa">sizeof</span><span class="sym">(</span>DLL<span class="sym">));
</span><span class="line">  105 </span><span class="sym"></span>    from<span class="sym">--;
</span><span class="line">  106 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> j<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;</span>size<span class="sym">; ++</span>i<span class="sym">, ++</span>j<span class="sym">) {
</span><span class="line">  107 </span><span class="sym"></span>        l<span class="sym">[</span>i<span class="sym">].</span>next <span class="sym">= &amp;</span>l<span class="sym">[</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">];
</span><span class="line">  108 </span><span class="sym"></span>        l<span class="sym">[</span>j<span class="sym">].</span>prev <span class="sym">= &amp;</span>l<span class="sym">[</span>j<span class="num">-1</span><span class="sym">];
</span><span class="line">  109 </span><span class="sym"></span>        l<span class="sym">[</span>i<span class="sym">].</span>val <span class="sym">=</span> from<span class="sym">++;
</span><span class="line">  110 </span><span class="sym">    }
</span><span class="line">  111 </span><span class="sym"></span>    l<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>prev <span class="sym">= &amp;</span>l<span class="sym">[</span>size<span class="sym">];
</span><span class="line">  112 </span><span class="sym"></span>    l<span class="sym">[</span>size<span class="sym">].</span>next <span class="sym">= &amp;</span>l<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="line">  113 </span><span class="sym"></span>    l<span class="sym">[</span>size<span class="sym">].</span>prev <span class="sym">= &amp;</span>l<span class="sym">[</span>size<span class="num">-1</span><span class="sym">];
</span><span class="line">  114 </span><span class="sym"></span>    l<span class="sym">[</span>size<span class="sym">].</span>val <span class="sym">=</span> from<span class="sym">;
</span><span class="line">  115 </span><span class="sym"></span>    l<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>val <span class="sym">=</span> size<span class="sym">;
</span><span class="line">  116 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span>l<span class="sym">);
</span><span class="line">  117 </span><span class="sym">}
</span><span class="line">  118 </span><span class="sym">
</span><span class="line">  119 </span><span class="sym"></span>DLL <span class="sym">*</span>list_copy<span class="sym">(</span>DLL <span class="sym">*</span>x<span class="sym">) {
</span><span class="line">  120 </span><span class="sym"></span>    <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">,</span> size <span class="sym">=</span> list_length<span class="sym">(</span>x<span class="sym">);
</span><span class="line">  121 </span><span class="sym"></span>    DLL <span class="sym">*</span>xp<span class="sym">, *</span>l <span class="sym">= (</span>DLL <span class="sym">*)</span>malloc<span class="sym">((</span>size<span class="sym">+</span><span class="num">1</span><span class="sym">) *</span> <span class="kwa">sizeof</span><span class="sym">(</span>DLL<span class="sym">));
</span><span class="line">  122 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> j<span class="sym">=</span><span class="num">1</span><span class="sym">,</span> xp<span class="sym">=</span>x<span class="sym">;</span> i<span class="sym">&lt;</span>size<span class="sym">;</span> i<span class="sym">++,</span> j<span class="sym">++,</span> xp<span class="sym">=</span>xp<span class="sym">-&gt;</span>next<span class="sym">) {
</span><span class="line">  123 </span><span class="sym"></span>        l<span class="sym">[</span>i<span class="sym">].</span>next <span class="sym">= &amp;</span>l<span class="sym">[</span>j<span class="sym">];
</span><span class="line">  124 </span><span class="sym"></span>        l<span class="sym">[</span>j<span class="sym">].</span>prev <span class="sym">= &amp;</span>l<span class="sym">[</span>i<span class="sym">];
</span><span class="line">  125 </span><span class="sym"></span>        l<span class="sym">[</span>i<span class="sym">].</span>val <span class="sym">=</span> xp<span class="sym">-&gt;</span>val<span class="sym">;
</span><span class="line">  126 </span><span class="sym">    }
</span><span class="line">  127 </span><span class="sym"></span>    l<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>prev <span class="sym">= &amp;</span>l<span class="sym">[</span>size<span class="sym">];
</span><span class="line">  128 </span><span class="sym"></span>    l<span class="sym">[</span>size<span class="sym">].</span>next <span class="sym">= &amp;</span>l<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="line">  129 </span><span class="sym"></span>    l<span class="sym">[</span>size<span class="sym">].</span>val <span class="sym">=</span> list_last<span class="sym">(</span>x<span class="sym">)-&gt;</span>val<span class="sym">;
</span><span class="line">  130 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span>l<span class="sym">);
</span><span class="line">  131 </span><span class="sym">}
</span><span class="line">  132 </span><span class="sym">
</span><span class="line">  133 </span><span class="sym"></span><span class="kwb">void</span> list_reverse <span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">) {
</span><span class="line">  134 </span><span class="sym"></span>    DLL <span class="sym">*</span>tmp<span class="sym">, *</span>p <span class="sym">=</span> head<span class="sym">;
</span><span class="line">  135 </span><span class="sym"></span>    <span class="kwa">do</span> <span class="sym">{
</span><span class="line">  136 </span><span class="sym"></span>        tmp <span class="sym">=</span> p<span class="sym">-&gt;</span>next<span class="sym">;
</span><span class="line">  137 </span><span class="sym"></span>        p<span class="sym">-&gt;</span>next <span class="sym">=</span> p<span class="sym">-&gt;</span>prev<span class="sym">;
</span><span class="line">  138 </span><span class="sym"></span>        p<span class="sym">-&gt;</span>prev <span class="sym">=</span> tmp<span class="sym">;
</span><span class="line">  139 </span><span class="sym"></span>        p <span class="sym">=</span> tmp<span class="sym">;
</span><span class="line">  140 </span><span class="sym">    }</span> <span class="kwa">while</span> <span class="sym">(</span>p <span class="sym">!=</span> head<span class="sym">);
</span><span class="line">  141 </span><span class="sym">}
</span><span class="line">  142 </span><span class="sym">
</span><span class="line">  143 </span><span class="sym"></span><span class="kwb">int</span> test_lists<span class="sym">() {
</span><span class="line">  144 </span><span class="sym"></span>    <span class="kwb">int</span> len <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  145 </span><span class="sym"></span>    <span class="slc">// create a list of integers (li1) from 1 to SIZE
</span><span class="line">  146 </span><span class="slc"></span>    DLL <span class="sym">*</span>li1 <span class="sym">=</span> list_sequence<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> SIZE<span class="sym">);
</span><span class="line">  147 </span><span class="sym"></span>    <span class="slc">// copy the list to li2
</span><span class="line">  148 </span><span class="slc"></span>    DLL <span class="sym">*</span>li2 <span class="sym">=</span> list_copy<span class="sym">(</span>li1<span class="sym">);
</span><span class="line">  149 </span><span class="sym"></span>    <span class="slc">// remove each individual item from left side of li2 and
</span><span class="line">  150 </span><span class="slc"></span>    <span class="slc">// append to right side of li3 (preserving order)
</span><span class="line">  151 </span><span class="slc"></span>    DLL <span class="sym">*</span>li3 <span class="sym">=</span> list_new<span class="sym">();
</span><span class="line">  152 </span><span class="sym"></span>    <span class="slc">// compare li2 and li1 for equality
</span><span class="line">  153 </span><span class="slc"></span>    <span class="kwa">if</span> <span class="sym">(!</span>list_equal<span class="sym">(</span>li2<span class="sym">,</span> li1<span class="sym">)) {
</span><span class="line">  154 </span><span class="sym"></span>        fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;li2 and li1 are not equal</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">  155 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  156 </span><span class="sym">    }
</span><span class="line">  157 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">(!</span>list_empty<span class="sym">(</span>li2<span class="sym">)) {
</span><span class="line">  158 </span><span class="sym"></span>        list_push_tail<span class="sym">(</span>li3<span class="sym">,</span> list_pop_head<span class="sym">(</span>li2<span class="sym">));
</span><span class="line">  159 </span><span class="sym">    }
</span><span class="line">  160 </span><span class="sym"></span>    <span class="slc">// li2 must now be empty
</span><span class="line">  161 </span><span class="slc"></span>    <span class="kwa">if</span> <span class="sym">(!</span>list_empty<span class="sym">(</span>li2<span class="sym">)) {
</span><span class="line">  162 </span><span class="sym"></span>        fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;li2 should be empty now</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">  163 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  164 </span><span class="sym">    }
</span><span class="line">  165 </span><span class="sym"></span>    <span class="slc">// remove each individual item from right side of li3 and
</span><span class="line">  166 </span><span class="slc"></span>    <span class="slc">// append to right side of li2 (reversing list)
</span><span class="line">  167 </span><span class="slc"></span>    <span class="kwa">while</span> <span class="sym">(!</span>list_empty<span class="sym">(</span>li3<span class="sym">)) {
</span><span class="line">  168 </span><span class="sym"></span>        list_push_tail<span class="sym">(</span>li2<span class="sym">,</span> list_pop_tail<span class="sym">(</span>li3<span class="sym">));
</span><span class="line">  169 </span><span class="sym">    }
</span><span class="line">  170 </span><span class="sym"></span>    <span class="slc">// li3 must now be empty
</span><span class="line">  171 </span><span class="slc"></span>    <span class="kwa">if</span> <span class="sym">(!</span>list_empty<span class="sym">(</span>li3<span class="sym">)) {
</span><span class="line">  172 </span><span class="sym"></span>        fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;li3 should be empty now</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">  173 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  174 </span><span class="sym">    }
</span><span class="line">  175 </span><span class="sym"></span>    <span class="slc">// reverse li1 in place
</span><span class="line">  176 </span><span class="slc"></span>    list_reverse<span class="sym">(</span>li1<span class="sym">);
</span><span class="line">  177 </span><span class="sym"></span>    <span class="slc">// check that li1's first item is now SIZE
</span><span class="line">  178 </span><span class="slc"></span>    <span class="kwa">if</span> <span class="sym">(</span>list_first<span class="sym">(</span>li1<span class="sym">)-&gt;</span>val <span class="sym">!=</span> SIZE<span class="sym">) {
</span><span class="line">  179 </span><span class="sym"></span>        fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;li1 first value wrong, wanted %d, got %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,
</span><span class="line">  180 </span><span class="sym"></span>                SIZE<span class="sym">,</span> list_first<span class="sym">(</span>li1<span class="sym">)-&gt;</span>val<span class="sym">);
</span><span class="line">  181 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  182 </span><span class="sym">    }
</span><span class="line">  183 </span><span class="sym"></span>    <span class="slc">// check that li1's last item is now 1
</span><span class="line">  184 </span><span class="slc"></span>    <span class="kwa">if</span> <span class="sym">(</span>list_last<span class="sym">(</span>li1<span class="sym">)-&gt;</span>val <span class="sym">!=</span> <span class="num">1</span><span class="sym">) {
</span><span class="line">  185 </span><span class="sym"></span>        fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;last value wrong, wanted %d, got %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,
</span><span class="line">  186 </span><span class="sym"></span>                SIZE<span class="sym">,</span> list_last<span class="sym">(</span>li1<span class="sym">)-&gt;</span>val<span class="sym">);
</span><span class="line">  187 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  188 </span><span class="sym">    }
</span><span class="line">  189 </span><span class="sym"></span>    <span class="slc">// check that li2's first item is now SIZE
</span><span class="line">  190 </span><span class="slc"></span>    <span class="kwa">if</span> <span class="sym">(</span>list_first<span class="sym">(</span>li2<span class="sym">)-&gt;</span>val <span class="sym">!=</span> SIZE<span class="sym">) {
</span><span class="line">  191 </span><span class="sym"></span>        fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;li2 first value wrong, wanted %d, got %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,
</span><span class="line">  192 </span><span class="sym"></span>                SIZE<span class="sym">,</span> list_first<span class="sym">(</span>li2<span class="sym">)-&gt;</span>val<span class="sym">);
</span><span class="line">  193 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  194 </span><span class="sym">    }
</span><span class="line">  195 </span><span class="sym"></span>    <span class="slc">// check that li2's last item is now 1
</span><span class="line">  196 </span><span class="slc"></span>    <span class="kwa">if</span> <span class="sym">(</span>list_last<span class="sym">(</span>li2<span class="sym">)-&gt;</span>val <span class="sym">!=</span> <span class="num">1</span><span class="sym">) {
</span><span class="line">  197 </span><span class="sym"></span>        fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;last value wrong, wanted %d, got %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,
</span><span class="line">  198 </span><span class="sym"></span>                SIZE<span class="sym">,</span> list_last<span class="sym">(</span>li2<span class="sym">)-&gt;</span>val<span class="sym">);
</span><span class="line">  199 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  200 </span><span class="sym">    }
</span><span class="line">  201 </span><span class="sym"></span>    <span class="slc">// check that li1's length is still SIZE
</span><span class="line">  202 </span><span class="slc"></span>    <span class="kwa">if</span> <span class="sym">(</span>list_length<span class="sym">(</span>li1<span class="sym">) !=</span> SIZE<span class="sym">) {
</span><span class="line">  203 </span><span class="sym"></span>        fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;li1 size wrong, wanted %d, got %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,
</span><span class="line">  204 </span><span class="sym"></span>                SIZE<span class="sym">,</span> list_length<span class="sym">(</span>li1<span class="sym">));
</span><span class="line">  205 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  206 </span><span class="sym">    }
</span><span class="line">  207 </span><span class="sym"></span>    <span class="slc">// compare li1 and li2 for equality
</span><span class="line">  208 </span><span class="slc"></span>    <span class="kwa">if</span> <span class="sym">(!</span>list_equal<span class="sym">(</span>li1<span class="sym">,</span> li2<span class="sym">)) {
</span><span class="line">  209 </span><span class="sym"></span>        fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;li1 and li2 are not equal</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">  210 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">  211 </span><span class="sym">    }
</span><span class="line">  212 </span><span class="sym"></span>    len <span class="sym">=</span> list_length<span class="sym">(</span>li1<span class="sym">);
</span><span class="line">  213 </span><span class="sym"></span>    free<span class="sym">(</span>li1<span class="sym">);
</span><span class="line">  214 </span><span class="sym"></span>    free<span class="sym">(</span>li2<span class="sym">);
</span><span class="line">  215 </span><span class="sym"></span>    free<span class="sym">(</span>li3<span class="sym">);
</span><span class="line">  216 </span><span class="sym"></span>    <span class="slc">// return the length of the list
</span><span class="line">  217 </span><span class="slc"></span>    <span class="kwa">return</span><span class="sym">(</span>len<span class="sym">);
</span><span class="line">  218 </span><span class="sym">}
</span><span class="line">  219 </span><span class="sym">
</span><span class="line">  220 </span><span class="sym"></span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span><span class="line">  221 </span><span class="sym"></span>    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span><span class="line">  222 </span><span class="sym"></span>    <span class="kwb">int</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  223 </span><span class="sym"></span>    <span class="kwa">while</span><span class="sym">(</span>n<span class="sym">--)</span> result <span class="sym">=</span> test_lists<span class="sym">();
</span><span class="line">  224 </span><span class="sym"></span>    printf<span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> result<span class="sym">);
</span><span class="line">  225 </span><span class="sym"></span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  226 </span><span class="sym">}</span>
