<span class="com">/* The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * Contributed by David Hedbor</span>
<span class="com"> */</span>

enum Color <span class="sym">{</span> blue<span class="sym">,</span> red<span class="sym">,</span> yellow<span class="sym">,</span> faded <span class="sym">};</span>
enum bool <span class="sym">{</span> false<span class="sym">,</span> true <span class="sym">};</span>
class <span class="kwd">MeetingPlace</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">)</span>
<span class="sym">{</span>
  private Color first<span class="sym">,</span> second<span class="sym">;</span>
  private bool firstCall <span class="sym">=</span> true<span class="sym">;</span>
  private bool mustWait <span class="sym">=</span> false<span class="sym">;</span>
  private Thread.Condition monitor <span class="sym">=</span> Thread.<span class="kwd">Condition</span><span class="sym">();</span>
  private Thread.Mutex mlock <span class="sym">=</span> Thread.<span class="kwd">Mutex</span><span class="sym">();</span>

  Color <span class="kwd">OtherCreaturesColor</span><span class="sym">(</span>Color me<span class="sym">)</span>
  <span class="sym">{</span>
    Thread.MutexKey key <span class="sym">=</span> mlock<span class="sym">-&gt;</span><span class="kwd">lock</span><span class="sym">();</span>
    Color other<span class="sym">;</span>

    <span class="kwd">while</span> <span class="sym">(</span>mustWait<span class="sym">) {</span>
      monitor<span class="sym">-&gt;</span><span class="kwd">wait</span><span class="sym">(</span>key<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="slc">//    write(&quot;Me = %d, n = %d\n&quot;, me, n);</span>

    <span class="kwd">if</span> <span class="sym">(</span>firstCall<span class="sym">)</span>
    <span class="sym">{</span>
      <span class="kwd">if</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">)</span>
      <span class="sym">{</span>
        first <span class="sym">=</span> me<span class="sym">;</span>
        firstCall <span class="sym">=</span> false<span class="sym">;</span>

        <span class="kwd">while</span> <span class="sym">(!</span>firstCall<span class="sym">) {</span>
          monitor<span class="sym">-&gt;</span><span class="kwd">wait</span><span class="sym">(</span>key<span class="sym">);</span>
        <span class="sym">}</span>
        mustWait <span class="sym">=</span> false<span class="sym">;</span>
        other <span class="sym">=</span> second<span class="sym">;</span>
      <span class="sym">}</span> else <span class="sym">{</span>
        other <span class="sym">=</span> faded<span class="sym">;</span>
      <span class="sym">}</span>
    <span class="sym">}</span> else <span class="sym">{</span>
      second <span class="sym">=</span> me<span class="sym">;</span>
      other <span class="sym">=</span> first<span class="sym">;</span>
      firstCall <span class="sym">=</span> true<span class="sym">;</span>
      mustWait <span class="sym">=</span> true<span class="sym">;</span>
    <span class="sym">}</span>
    monitor<span class="sym">-&gt;</span><span class="kwd">broadcast</span><span class="sym">();</span>
    return other<span class="sym">;</span>
  <span class="sym">}</span>
<span class="sym">};</span>

class <span class="kwd">Creature</span><span class="sym">(</span>MeetingPlace m<span class="sym">,</span> Color me<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">int</span> creaturesMet<span class="sym">;</span>

  <span class="kwb">void</span> <span class="kwd">Be</span><span class="sym">() {</span>
    <span class="kwd">while</span><span class="sym">(</span>me <span class="sym">!=</span> faded<span class="sym">) {</span> <span class="kwd">MeetOtherCreature</span><span class="sym">(); }</span>
  <span class="sym">}</span>

  <span class="kwb">void</span> <span class="kwd">MeetOtherCreature</span><span class="sym">()</span>
  <span class="sym">{</span>
    Color other <span class="sym">=</span> m<span class="sym">-&gt;</span><span class="kwd">OtherCreaturesColor</span><span class="sym">(</span>me<span class="sym">);</span>
    <span class="kwd">if</span> <span class="sym">(</span>other <span class="sym">==</span> faded<span class="sym">) {</span>
      me <span class="sym">=</span> other<span class="sym">;</span>
    <span class="sym">}</span> else <span class="sym">{</span>
      creaturesMet<span class="sym">++;</span>
      me <span class="sym">=</span> <span class="kwd">Complement</span><span class="sym">(</span>other<span class="sym">);</span>
    <span class="sym">}</span>
  <span class="sym">}</span>

  Color <span class="kwd">Complement</span><span class="sym">(</span>Color other<span class="sym">)</span>
  <span class="sym">{</span>
    <span class="kwd">if</span> <span class="sym">(</span>me <span class="sym">==</span> other<span class="sym">)</span> return me<span class="sym">;</span>
    <span class="kwd">switch</span><span class="sym">(</span>me<span class="sym">)</span>
    <span class="sym">{</span>
    case blue<span class="sym">:</span>
      return other <span class="sym">==</span> red ? yellow <span class="sym">:</span> red<span class="sym">;</span>
    case red<span class="sym">:</span>
      return other <span class="sym">==</span> blue ? yellow <span class="sym">:</span> blue<span class="sym">;</span>
    case yellow<span class="sym">:</span>
      return other <span class="sym">==</span> blue ? red <span class="sym">:</span> blue<span class="sym">;</span>
    default<span class="sym">:</span> return me<span class="sym">;</span>
    <span class="sym">}</span>
  <span class="sym">}</span>
<span class="sym">};</span>

<span class="kwb">array</span><span class="sym">(</span>Color<span class="sym">)</span> colors <span class="sym">= ({</span> blue<span class="sym">,</span> red<span class="sym">,</span> yellow<span class="sym">,</span> blue <span class="sym">});</span>
<span class="kwb">array</span><span class="sym">(</span>Creature<span class="sym">)</span> creatures <span class="sym">=</span> <span class="kwa">allocate</span><span class="sym">(</span><span class="num">4</span><span class="sym">);</span>
<span class="kwb">array</span><span class="sym">(</span>Thread.Thread<span class="sym">)</span> threads <span class="sym">=</span> <span class="kwa">allocate</span><span class="sym">(</span><span class="num">4</span><span class="sym">);</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> argv<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwd">if</span><span class="sym">(</span>argc <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> return <span class="num">0</span><span class="sym">;</span>
  <span class="kwb">int</span> n <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>

  MeetingPlace m <span class="sym">=</span> <span class="kwd">MeetingPlace</span><span class="sym">(</span>n<span class="sym">);</span>

  <span class="kwd">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="kwa">sizeof</span><span class="sym">(</span>colors<span class="sym">);</span> i<span class="sym">++) {</span>
    creatures<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwd">Creature</span><span class="sym">(</span>m<span class="sym">,</span> colors<span class="sym">[</span>i<span class="sym">]);</span>
    threads<span class="sym">[</span>i<span class="sym">] =</span> Thread.<span class="kwd">Thread</span><span class="sym">(</span>creatures<span class="sym">[</span>i<span class="sym">]-&gt;</span>Be<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
  <span class="sym">}</span>

  threads<span class="sym">-&gt;</span><span class="kwd">wait</span><span class="sym">();</span>

  <span class="kwb">int</span> meetings <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwd">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="kwa">sizeof</span><span class="sym">(</span>creatures<span class="sym">);</span> i<span class="sym">++) {</span>
    meetings <span class="sym">+=</span> creatures<span class="sym">[</span>i<span class="sym">]-&gt;</span>creaturesMet<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> meetings<span class="sym">);</span>
  return <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
