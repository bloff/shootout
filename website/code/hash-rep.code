#<span class="sym">!/</span>bin<span class="sym">/</span>bash
# <span class="sym">-*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-
</span>PROG<span class="sym">=</span>$<span class="sym">{</span><span class="num">0</span>%.jl<span class="sym">}
[</span> \<span class="sym">! -</span>f $PROG.jlc <span class="sym">-</span>o $<span class="num">0</span> <span class="sym">-</span>nt $PROG.jlc <span class="sym">] &amp;&amp;
</span>    rep <span class="sym">--</span>batch <span class="sym">--</span>no<span class="sym">-</span>rc <span class="sym">-</span>l compiler <span class="sym">-</span>f compile<span class="sym">-</span>batch $<span class="num">0
</span>exec rep <span class="str">&quot;$PROG.jlc&quot;</span> <span class="str">&quot;$&#64;&quot;</span>
<span class="sym">!</span>#

<span class="slc">;;; $Id: hash-rep.code,v 1.4 2005-09-20 08:15:04 bfulgham Exp $
</span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span>
<span class="sym">(</span>define<span class="sym">-</span>structure main <span class="sym">()
  (</span><span class="kwa">open</span> rep
	rep.system
	rep.data.tables<span class="sym">)

  (</span>let<span class="sym">* ((</span>arg <span class="sym">(</span>get<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>option <span class="str">&quot;--num&quot;</span> t<span class="sym">))
	 (</span>n <span class="sym">(</span><span class="kwa">if</span> arg <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>from<span class="sym">-</span>string arg<span class="sym">)</span> <span class="num">1</span><span class="sym">))
	 (</span><span class="kwa">last</span> <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))
	 (</span>c <span class="num">0</span><span class="sym">)
	 (</span>x <span class="sym">(</span>make<span class="sym">-</span>table string<span class="sym">-</span>hash <span class="kwa">eq</span><span class="sym">-</span>hash<span class="sym">)))
    (</span>do <span class="sym">((</span>i <span class="num">1</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
	((&gt;</span> i n<span class="sym">))
      (</span>table<span class="sym">-</span><span class="kwa">set</span> x <span class="sym">(</span>number<span class="sym">-&gt;</span>string i <span class="num">16</span><span class="sym">)</span> i<span class="sym">))
    (</span>do <span class="sym">((</span>i <span class="kwa">last</span> <span class="sym">(-</span> i <span class="num">1</span><span class="sym">)))
	((&lt;</span> i <span class="num">0</span><span class="sym">))
      (</span><span class="kwa">if</span> <span class="sym">(</span>table<span class="sym">-</span>ref x <span class="sym">(</span>number<span class="sym">-&gt;</span>string i <span class="num">10</span><span class="sym">))
	  (</span><span class="kwa">setq</span> c <span class="sym">(+</span> c <span class="num">1</span><span class="sym">))))
    (</span>format standard<span class="sym">-</span>output <span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span> c<span class="sym">)))

</span>
