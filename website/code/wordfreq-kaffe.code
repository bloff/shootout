<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// $Id: wordfreq-kaffe.code,v 1.1 2004-11-02 08:53:34 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">// Collection class code is from my friend Phil Chu, Thanks Phil!
</FONT></I>
<B><FONT COLOR="#A020F0">import</FONT></B> java.io.*;
<B><FONT COLOR="#A020F0">import</FONT></B> java.util.*;
<B><FONT COLOR="#A020F0">import</FONT></B> java.text.*;

<B><FONT COLOR="#A020F0">class</FONT></B> Counter {
    <B><FONT COLOR="#A020F0">int</FONT></B> count = 1; 
}

<B><FONT COLOR="#A020F0">public</FONT></B> <B><FONT COLOR="#A020F0">class</FONT></B> wordfreq {

    <B><FONT COLOR="#A020F0">public</FONT></B> <B><FONT COLOR="#A020F0">static</FONT></B> <B><FONT COLOR="#A020F0">void</FONT></B> main(String[] args) {
	wf();
    }

    <B><FONT COLOR="#A020F0">public</FONT></B> <B><FONT COLOR="#A020F0">static</FONT></B> String padleft(String s,<B><FONT COLOR="#A020F0">int</FONT></B> n,<B><FONT COLOR="#A020F0">char</FONT></B> c) {
        <B><FONT COLOR="#A020F0">int</FONT></B> len = s.length();
        <B><FONT COLOR="#A020F0">if</FONT></B>( len&gt;=n ) <B><FONT COLOR="#A020F0">return</FONT></B> s;
        <B><FONT COLOR="#A020F0">char</FONT></B>[] buf = <B><FONT COLOR="#A020F0">new</FONT></B> <B><FONT COLOR="#A020F0">char</FONT></B>[n];
        <B><FONT COLOR="#A020F0">for</FONT></B>( <B><FONT COLOR="#A020F0">int</FONT></B> i=0;i&lt;n-len;i++ ) buf[i]=c;
        s.getChars(0,len,buf,n-len);
        <B><FONT COLOR="#A020F0">return</FONT></B> <B><FONT COLOR="#A020F0">new</FONT></B> String(buf);
    }
  
    <B><FONT COLOR="#A020F0">public</FONT></B> <B><FONT COLOR="#A020F0">static</FONT></B> <B><FONT COLOR="#A020F0">void</FONT></B> wf() {
        HashMap map = <B><FONT COLOR="#A020F0">new</FONT></B> HashMap();
        <B><FONT COLOR="#A020F0">try</FONT></B> {
            Reader r = <B><FONT COLOR="#A020F0">new</FONT></B> BufferedReader(<B><FONT COLOR="#A020F0">new</FONT></B> InputStreamReader(System.in));
            StreamTokenizer st = <B><FONT COLOR="#A020F0">new</FONT></B> StreamTokenizer(r);
            st.lowerCaseMode(<B><FONT COLOR="#A020F0">true</FONT></B>);
            st.whitespaceChars( 0, 64 );
            st.wordChars(65, 90);
            st.whitespaceChars( 91, 96 );
            st.wordChars(97, 122);
            st.whitespaceChars( 123, 255 );
            <B><FONT COLOR="#A020F0">int</FONT></B> tt = st.nextToken();
            <B><FONT COLOR="#A020F0">while</FONT></B> (tt != StreamTokenizer.TT_EOF) {
                <B><FONT COLOR="#A020F0">if</FONT></B> (tt == StreamTokenizer.TT_WORD) {
                    <B><FONT COLOR="#A020F0">if</FONT></B> (map.containsKey(st.sval)) {
                        ((Counter)map.get(st.sval)).count++;
                    } <B><FONT COLOR="#A020F0">else</FONT></B> {
                        map.put(st.sval, <B><FONT COLOR="#A020F0">new</FONT></B> Counter());
                    }
                }
                tt = st.nextToken();
            }
        } <B><FONT COLOR="#A020F0">catch</FONT></B> (IOException e) {
            System.err.println(e);
            <B><FONT COLOR="#A020F0">return</FONT></B>;
        }

        Collection entries = map.entrySet();
	<I><FONT COLOR="#B22222">// flatten the entries set into a vector for sorting
</FONT></I>	Vector rev_wf = <B><FONT COLOR="#A020F0">new</FONT></B> Vector(entries); 

        <I><FONT COLOR="#B22222">// Sort the vector according to its value
</FONT></I>        Collections.sort(rev_wf, <B><FONT COLOR="#A020F0">new</FONT></B> Comparator() {
		<B><FONT COLOR="#A020F0">public</FONT></B> <B><FONT COLOR="#A020F0">int</FONT></B> compare(Object o1, Object o2) {
		    <I><FONT COLOR="#B22222">// First sort by frequency
</FONT></I>		    <B><FONT COLOR="#A020F0">int</FONT></B> c = ((Counter)((Map.Entry)o2).getValue()).count - ((Counter)((Map.Entry)o1).getValue()).count;
		    <B><FONT COLOR="#A020F0">if</FONT></B> (c == 0) { <I><FONT COLOR="#B22222">// Second sort by lexicographical order
</FONT></I>			c = ((String)((Map.Entry)o2).getKey()).compareTo((String)((Map.Entry)o1).getKey());
		    }
		    <B><FONT COLOR="#A020F0">return</FONT></B> c;
		}
	    }
			 );

        Iterator it = rev_wf.iterator();
	Map.Entry ent;
	String word;
	<B><FONT COLOR="#A020F0">int</FONT></B> count;
        <B><FONT COLOR="#A020F0">while</FONT></B>(it.hasNext()) {
            ent = (Map.Entry)it.next();
	    word = ((String)ent.getKey());
	    count = ((Counter)ent.getValue()).count;
	    System.out.println(padleft(Integer.toString(count),7,<B><FONT COLOR="#BC8F8F">' '</FONT></B>) + <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> + word);
        }
    }
}</pre></td></tr></table>
