<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by James McIlree</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.</span>regex<span class="sym">.*;</span>

<span class="kwa">public class</span> wordfreq <span class="sym">{</span>
  <span class="kwa">static class</span> Counter <span class="sym">{</span>
    <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
  <span class="sym">}</span>

  <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)</span>
    <span class="kwa">throws</span> <span class="kwc">IOException</span>
  <span class="sym">{</span>
    <span class="kwc">HashMap</span> map <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">();</span>
    <span class="kwc">Pattern</span> charsOnly <span class="sym">=</span> <span class="kwc">Pattern</span><span class="sym">.</span><span class="kwd">compile</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\\</span><span class="str">p{Lower}+&quot;</span><span class="sym">);</span>

    <span class="kwc">BufferedReader</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));</span>
    <span class="kwc">String</span> line<span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> r<span class="sym">.</span><span class="kwd">readLine</span><span class="sym">()) !=</span> null<span class="sym">) {</span>
      <span class="kwc">Matcher</span> matcher <span class="sym">=</span> charsOnly<span class="sym">.</span><span class="kwd">matcher</span><span class="sym">(</span>line<span class="sym">.</span><span class="kwd">toLowerCase</span><span class="sym">());</span>
      <span class="kwa">while</span> <span class="sym">(</span>matcher<span class="sym">.</span><span class="kwd">find</span><span class="sym">()) {</span>
        <span class="kwc">String</span> token <span class="sym">=</span> matcher<span class="sym">.</span><span class="kwd">group</span><span class="sym">();</span>
        Counter c <span class="sym">= (</span>Counter<span class="sym">)</span>map<span class="sym">.</span><span class="kwd">get</span><span class="sym">(</span>token<span class="sym">);</span>
        <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">!=</span> null<span class="sym">)</span>
          c<span class="sym">.</span>count<span class="sym">++;</span>
        <span class="kwa">else</span>
          map<span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span>token<span class="sym">,</span> <span class="kwa">new</span> <span class="kwd">Counter</span><span class="sym">());</span>
      <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwc">ArrayList</span> list <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ArrayList</span><span class="sym">(</span>map<span class="sym">.</span><span class="kwd">entrySet</span><span class="sym">());</span>
    <span class="kwc">Collections</span><span class="sym">.</span><span class="kwd">sort</span><span class="sym">(</span>list<span class="sym">,</span> <span class="kwa">new</span> <span class="kwc">Comparator</span><span class="sym">() {</span>
        <span class="kwa">public</span> <span class="kwb">int</span> <span class="kwd">compare</span><span class="sym">(</span><span class="kwc">Object</span> o1<span class="sym">,</span> <span class="kwc">Object</span> o2<span class="sym">) {</span>
          <span class="kwb">int</span> c <span class="sym">= ((</span>Counter<span class="sym">)((</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>o2<span class="sym">).</span><span class="kwd">getValue</span><span class="sym">()).</span>count <span class="sym">- ((</span>Counter<span class="sym">)((</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>o1<span class="sym">).</span><span class="kwd">getValue</span><span class="sym">()).</span>count<span class="sym">;</span>
          <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span>
            c <span class="sym">= ((</span><span class="kwc">String</span><span class="sym">)((</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>o2<span class="sym">).</span><span class="kwd">getKey</span><span class="sym">()).</span><span class="kwd">compareTo</span><span class="sym">((</span><span class="kwc">String</span><span class="sym">)((</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>o1<span class="sym">).</span><span class="kwd">getKey</span><span class="sym">());</span>
          <span class="sym">}</span>
          <span class="kwa">return</span> c<span class="sym">;</span>
        <span class="sym">}</span>
      <span class="sym">});</span>

    <span class="kwc">String</span><span class="sym">[]</span> padding <span class="sym">= {</span> <span class="str">&quot;error!&quot;</span><span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> <span class="str">&quot;  &quot;</span><span class="sym">,</span> <span class="str">&quot;   &quot;</span><span class="sym">,</span> <span class="str">&quot;    &quot;</span><span class="sym">,</span> <span class="str">&quot;     &quot;</span><span class="sym">,</span> <span class="str">&quot;      &quot;</span><span class="sym">,</span> <span class="str">&quot;error!&quot;</span> <span class="sym">};</span>
    <span class="kwc">StringBuffer</span> output <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">();</span>
    <span class="kwc">Iterator</span> it <span class="sym">=</span> list<span class="sym">.</span><span class="kwd">iterator</span><span class="sym">();</span>
    <span class="kwa">while</span><span class="sym">(</span>it<span class="sym">.</span><span class="kwd">hasNext</span><span class="sym">()) {</span>
      <span class="kwc">Map</span><span class="sym">.</span>Entry entry <span class="sym">= (</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>it<span class="sym">.</span><span class="kwd">next</span><span class="sym">();</span>
      <span class="kwc">String</span> word <span class="sym">= (</span><span class="kwc">String</span><span class="sym">)</span>entry<span class="sym">.</span><span class="kwd">getKey</span><span class="sym">();</span>
      <span class="kwc">String</span> count <span class="sym">=</span> <span class="kwc">String</span><span class="sym">.</span><span class="kwd">valueOf</span><span class="sym">(((</span>Counter<span class="sym">)</span>entry<span class="sym">.</span><span class="kwd">getValue</span><span class="sym">()).</span>count<span class="sym">);</span>
      <span class="kwa">if</span> <span class="sym">(</span>count<span class="sym">.</span><span class="kwd">length</span><span class="sym">() &lt;</span> <span class="num">7</span><span class="sym">)</span>
        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>padding<span class="sym">[</span><span class="num">7</span> <span class="sym">-</span> count<span class="sym">.</span><span class="kwd">length</span><span class="sym">()] +</span> count <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span>word<span class="sym">);</span>
      <span class="kwa">else</span>
        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>count <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span>word<span class="sym">);</span>
    <span class="sym">}</span>
  <span class="sym">}</span>
<span class="sym">}</span>

