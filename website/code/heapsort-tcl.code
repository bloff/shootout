<span class="slc">#!/usr/bin/tclsh
</span><span class="slc"># $Id: heapsort-tcl.code,v 1.5 2004-11-22 07:08:56 bfulgham Exp $
</span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span><span class="slc"># sped up by Miguel Sofer's function generator
</span>
<span class="kwa">set</span> IM <span class="num">139968
</span><span class="kwa">set</span> IA   <span class="num">3877
</span><span class="kwa">set</span> IC  <span class="num">29573

</span><span class="kwa">set</span> last <span class="num">42

</span><span class="kwa">proc</span> make_gen_random <span class="sym">{} {
</span>    <span class="kwa">global</span> IM IA IC
    <span class="kwa">set</span> params <span class="sym">[</span><span class="kwa">list</span> IM <span class="kwb">$IM</span> IA <span class="kwb">$IA</span> IC <span class="kwb">$IC</span><span class="sym">]
</span>    <span class="kwa">set</span> body <span class="sym">[</span><span class="kwa">string</span> map <span class="kwb">$params</span> <span class="sym">{
</span>        <span class="kwa">global</span> last
        <span class="kwa">expr</span> <span class="sym">{(</span><span class="kwb">$max</span> <span class="sym">* [</span><span class="kwa">set</span> last <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{(</span><span class="kwb">$last</span> <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">}]]) /</span> IM<span class="sym">}
    }]
</span>    <span class="kwa">proc</span> gen_random <span class="sym">{</span>max<span class="sym">}</span> <span class="kwb">$body
</span><span class="sym">}

</span><span class="kwa">proc</span> heapsort <span class="sym">{</span>n ra_name<span class="sym">} {
</span>    <span class="kwa">upvar</span> <span class="kwb">$ra_name</span> ra

    <span class="kwa">set</span> j <span class="num">0
</span>    <span class="kwa">set</span> i <span class="num">0
</span>    <span class="kwa">set</span> rra <span class="num">0.0
</span>    <span class="kwa">set</span> l <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{(</span><span class="kwb">$n</span> <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">}]
</span>    <span class="kwa">set</span> ir <span class="kwb">$n
</span>    <span class="kwa">while</span> <span class="num">1</span> <span class="sym">{
</span>        <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$l</span> <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">} {
</span>	    <span class="kwa">incr</span> l <span class="num">-1
</span>            <span class="kwa">set</span> rra <span class="kwb">$ra</span><span class="sym">(</span><span class="kwb">$l</span><span class="sym">)
        }</span> else <span class="sym">{
</span>	    <span class="kwa">set</span> rra <span class="kwb">$ra</span><span class="sym">(</span><span class="kwb">$ir</span><span class="sym">)
</span>	    <span class="kwa">set</span> ra<span class="sym">(</span><span class="kwb">$ir</span><span class="sym">)</span> <span class="kwb">$ra</span><span class="sym">(</span><span class="num">1</span><span class="sym">)
</span>	    <span class="kwa">incr</span> ir <span class="num">-1
</span>	    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$ir</span> <span class="sym">==</span> <span class="num">1</span><span class="sym">} {
</span>                <span class="kwa">set</span> ra<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwb">$rra
</span>                <span class="kwa">return
</span>            <span class="sym">}
        }
</span>	<span class="kwa">set</span> i <span class="kwb">$l
</span>	<span class="kwa">set</span> j <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$l</span> <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">}]
</span>        <span class="kwa">while</span> <span class="sym">{</span><span class="kwb">$j</span> <span class="sym">&lt;=</span> <span class="kwb">$ir</span><span class="sym">} {
</span>	    <span class="kwa">if</span> <span class="sym">{(</span><span class="kwb">$j</span> <span class="sym">&lt;</span> <span class="kwb">$ir</span><span class="sym">) &amp;&amp; (</span><span class="kwb">$ra</span><span class="sym">(</span><span class="kwb">$j</span><span class="sym">) &lt;</span> <span class="kwb">$ra</span><span class="sym">([</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$j</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">}]))} {
</span>		<span class="kwa">incr</span> j
	    <span class="sym">}
</span>            <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$rra</span> <span class="sym">&lt;</span> <span class="kwb">$ra</span><span class="sym">(</span><span class="kwb">$j</span><span class="sym">)} {
</span>		<span class="kwa">set</span> ra<span class="sym">(</span><span class="kwb">$i</span><span class="sym">)</span> <span class="kwb">$ra</span><span class="sym">(</span><span class="kwb">$j</span><span class="sym">)
</span>		<span class="kwa">set</span> i <span class="kwb">$j
</span>                <span class="kwa">set</span> j <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$j</span> <span class="sym">+</span> <span class="kwb">$i</span><span class="sym">}]
            }</span> else <span class="sym">{
</span>		<span class="kwa">set</span> j <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$ir</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">}]
            }
        }
</span>        <span class="kwa">set</span> ra<span class="sym">(</span><span class="kwb">$i</span><span class="sym">)</span> <span class="kwb">$rra
</span>    <span class="sym">}
}

</span><span class="kwa">proc</span> main <span class="sym">{} {
</span>    <span class="kwa">global</span> argv
    <span class="kwa">set</span> n <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$argv</span> <span class="num">0</span><span class="sym">]
</span>    make_gen_random

    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">1</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;=</span> <span class="kwb">$n</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {
</span>	<span class="kwa">set</span> ary<span class="sym">(</span><span class="kwb">$i</span><span class="sym">) [</span>gen_random <span class="num">1.0</span><span class="sym">]
    }
</span>    heapsort <span class="kwb">$n</span> ary
    <span class="kwa">puts</span> <span class="sym">[</span><span class="kwa">format</span> <span class="str">&quot;%.10f&quot;</span> <span class="kwb">$ary</span><span class="sym">(</span><span class="kwb">$n</span><span class="sym">)]
}

</span>main
