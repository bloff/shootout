<span class="slc">// $Id: hash-gij.code,v 1.5 2004-11-22 07:08:55 bfulgham Exp $
</span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span>
<span class="slc">// this program is modified from:
</span><span class="slc">//   http://cm.bell-labs.com/cm/cs/who/bwk/interps/pap.html
</span><span class="slc">// Timing Trials, or, the Trials of Timing: Experiments with Scripting
</span><span class="slc">// and User-Interface Languages&lt;/a&gt; by Brian W. Kernighan and
</span><span class="slc">// Christopher J. Van Wyk.
</span>
<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;

</span><span class="kwa">public class</span> hash <span class="sym">{

</span>    <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[])</span> <span class="kwa">throws</span> <span class="kwc">IOException</span> <span class="sym">{
</span>	<span class="kwb">int</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>	<span class="kwb">int</span> i<span class="sym">,</span> c<span class="sym">;
</span>	<span class="kwc">String</span> s <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;
</span>	<span class="kwc">Integer</span> ii<span class="sym">;
</span>	<span class="slc">// the original program used:
</span>	<span class="slc">// Hashtable ht = new Hashtable();
</span>	<span class="slc">// John Olsson points out that Hashtable is for synchronized access
</span>	<span class="slc">// and we should use instead:
</span>	<span class="kwc">HashMap</span> ht <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">();

</span>	c <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>	<span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;=</span> n<span class="sym">;</span> i<span class="sym">++)
</span>	    ht<span class="sym">.</span>put<span class="sym">(</span><span class="kwc">Integer</span><span class="sym">.</span>toString<span class="sym">(</span>i<span class="sym">,</span> <span class="num">16</span><span class="sym">),</span> <span class="kwa">new</span> <span class="kwc">Integer</span><span class="sym">(</span>i<span class="sym">));
</span>	<span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;=</span> n<span class="sym">;</span> i<span class="sym">++)
</span>	    <span class="slc">// The original code converted to decimal string this way:
</span>	    <span class="slc">// if (ht.containsKey(i+&quot;&quot;))
</span>	    <span class="kwa">if</span> <span class="sym">(</span>ht<span class="sym">.</span>containsKey<span class="sym">(</span><span class="kwc">Integer</span><span class="sym">.</span>toString<span class="sym">(</span>i<span class="sym">,</span> <span class="num">10</span><span class="sym">)))
</span>		c<span class="sym">++;

</span>	<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>c<span class="sym">);
    }
}
</span>
