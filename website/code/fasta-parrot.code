#<span class="sym">!</span>.<span class="sym">/</span>parrot <span class="sym">-</span>j
#
# fasta.pir N         <span class="sym">(</span>N <span class="sym">=</span> <span class="num">2500000</span> for shootout<span class="sym">)</span>
# by Joshua Isom


.<span class="kwa">sub</span> makeCumulative
	.param pmc genelist
	.param <span class="kwa">int</span> count
	.<span class="kwa">local</span> float cp
	.<span class="kwa">local int</span> i
	cp <span class="sym">=</span> <span class="num">0.0</span>
	i <span class="sym">=</span> <span class="num">0</span>
beginfor<span class="sym">:</span>
	unless i <span class="sym">&lt;</span> count goto endfor
	$N0 <span class="sym">=</span> genelist<span class="sym">[</span>i<span class="slc">;1]</span>
	cp <span class="sym">+=</span> $N0
	genelist<span class="sym">[</span>i<span class="slc">;1] = cp</span>
	<span class="kwa">inc</span> i
	goto beginfor
endfor<span class="sym">:</span>
.<span class="kwa">end</span>

.<span class="kwa">sub</span> selectRandom
	.param pmc genelist
	.param <span class="kwa">int</span> count
	.<span class="kwa">local</span> float r
	r <span class="sym">=</span> gen_random<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>
	.<span class="kwa">local int</span> i<span class="sym">,</span> lo<span class="sym">,</span> hi

	$N0 <span class="sym">=</span> genelist<span class="sym">[</span><span class="num">0</span><span class="slc">;1]</span>
	unless r <span class="sym">&lt;</span> $N0 goto endif
	$S0 <span class="sym">=</span> genelist<span class="sym">[</span><span class="num">0</span><span class="slc">;0]</span>
	.return<span class="sym">(</span>$S0<span class="sym">)</span>
endif<span class="sym">:</span>
	lo <span class="sym">=</span> <span class="num">0</span>
	hi <span class="sym">=</span> count <span class="sym">-</span> <span class="num">1</span>
beginwhile<span class="sym">:</span>
	$I0 <span class="sym">=</span> lo <span class="sym">+</span> <span class="num">1</span>
	unless hi <span class="sym">&gt;</span> $I0 goto endwhile
	i <span class="sym">=</span> hi <span class="sym">+</span> lo
	i <span class="sym">/=</span> <span class="num">2</span>
	$N0 <span class="sym">=</span> genelist<span class="sym">[</span>i<span class="slc">;1]</span>
	unless r <span class="sym">&lt;</span> $N0 goto else_1
	hi <span class="sym">=</span> i
	goto endif_1
else_1<span class="sym">:</span>
	lo <span class="sym">=</span> i
endif_1<span class="sym">:</span>
	goto beginwhile
endwhile<span class="sym">:</span>
	$S0 <span class="sym">=</span> genelist<span class="sym">[</span>hi<span class="slc">;0]</span>
	.return<span class="sym">(</span>$S0<span class="sym">)</span>
.<span class="kwa">end</span>

.const <span class="kwa">int</span> LINE_LENGTH <span class="sym">=</span> <span class="num">60</span>

.<span class="kwa">sub</span> makeRandomFasta
	.param string id
	.param string desc
	.param pmc genelist
	.param <span class="kwa">int</span> count
	.param <span class="kwa">int</span> n
	.<span class="kwa">local int</span> todo<span class="sym">,</span> i<span class="sym">,</span> m
	todo <span class="sym">=</span> n

	print <span class="str">&quot;&gt;&quot;</span>
	print id
	print <span class="str">&quot; &quot;</span>
	print desc
	print <span class="str">&quot;\n&quot;</span>

	.<span class="kwa">local</span> string pick
beginfor<span class="sym">:</span>
	unless todo <span class="sym">&gt;</span> <span class="num">0</span> goto endfor

	unless todo <span class="sym">&lt;</span> LINE_LENGTH goto else
		m <span class="sym">=</span> todo
	goto endif
	else<span class="sym">:</span>
		m <span class="sym">=</span> LINE_LENGTH
	endif<span class="sym">:</span>

	i <span class="sym">=</span> <span class="num">0</span>
beginfor_1<span class="sym">:</span>
	unless i <span class="sym">&lt;</span> m goto endfor_1
	$S0 <span class="sym">=</span> selectRandom<span class="sym">(</span>genelist<span class="sym">,</span> count<span class="sym">)</span>
	pick .<span class="sym">=</span> $S0
	<span class="kwa">inc</span> i
	goto beginfor_1
endfor_1<span class="sym">:</span>
	print pick
	print <span class="str">&quot;\n&quot;</span>
	pick <span class="sym">=</span> <span class="str">''</span>

	todo <span class="sym">-=</span> LINE_LENGTH
	goto beginfor
endfor<span class="sym">:</span>
.<span class="kwa">end</span>

.<span class="kwa">sub</span> makeRepeatFasta
	.param string id
	.param string desc
	.param string s
	.param <span class="kwa">int</span> n
	.<span class="kwa">local int</span> todo<span class="sym">,</span> k<span class="sym">,</span> kn<span class="sym">,</span> m
	todo <span class="sym">=</span> n
	k <span class="sym">=</span> <span class="num">0</span>
	kn <span class="sym">=</span> <span class="kwa">length</span> s

	print <span class="str">&quot;&gt;&quot;</span>
	print id
	print <span class="str">&quot; &quot;</span>
	print desc
	print <span class="str">&quot;\n&quot;</span>

beginfor<span class="sym">:</span>
	unless todo <span class="sym">&gt;</span> <span class="num">0</span> goto endfor

	unless todo <span class="sym">&lt;</span> LINE_LENGTH goto else
		m <span class="sym">=</span> todo
	goto endif
	else<span class="sym">:</span>
		m <span class="sym">=</span> LINE_LENGTH
	endif<span class="sym">:</span>

beginwhile<span class="sym">:</span>
	$I0 <span class="sym">=</span> kn <span class="sym">-</span> k
	unless m <span class="sym">&gt;=</span> $I0 goto endwhile
	$S0 <span class="sym">=</span> substr s<span class="sym">,</span> k
	print $S0
	$I0 <span class="sym">=</span> kn <span class="sym">-</span> k
	m <span class="sym">-=</span> $I0
	k <span class="sym">=</span> <span class="num">0</span>
	goto beginwhile
endwhile<span class="sym">:</span>

	$S0 <span class="sym">=</span> substr s<span class="sym">,</span> k<span class="sym">,</span> m
	print $S0
	print <span class="str">&quot;\n&quot;</span>
	k <span class="sym">+=</span> m

	todo <span class="sym">-=</span> LINE_LENGTH
	goto beginfor
endfor<span class="sym">:</span>
.<span class="kwa">end</span>

.<span class="kwa">macro</span> InitStruct <span class="sym">(</span>iub<span class="sym">,</span> i<span class="sym">,</span> char<span class="sym">,</span> num<span class="sym">)</span>
	$P0 <span class="sym">=</span> new .Array
	.iub<span class="sym">[</span>.i<span class="sym">] =</span> $P0
	.iub<span class="sym">[</span>.i<span class="sym">] =</span> <span class="num">2</span>
	.iub<span class="sym">[</span>.i<span class="slc">;0] = .char</span>
	.iub<span class="sym">[</span>.i<span class="slc">;1] = .num</span>
.<span class="kwa">endm</span>

.<span class="kwa">sub</span> main <span class="sym">:</span>main
	.param pmc argv
	.<span class="kwa">local int</span> n
	$I0 <span class="sym">=</span> argv
	unless $I0 <span class="sym">&gt;</span> <span class="num">2</span> goto argsok
	n <span class="sym">=</span> <span class="num">1000</span>
	goto argsdone
argsok<span class="sym">:</span>
	$S0 <span class="sym">=</span> argv<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
	n <span class="sym">=</span> $S0
argsdone<span class="sym">:</span>
	load_bytecode <span class="str">&quot;random_lib.pir&quot;</span>

	.<span class="kwa">local</span> pmc iub
	iub <span class="sym">=</span> new .Array
	iub <span class="sym">=</span> <span class="num">15</span>
	.InitStruct<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="str">&quot;a&quot;</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="str">&quot;c&quot;</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">2</span><span class="sym">,</span> <span class="str">&quot;g&quot;</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">3</span><span class="sym">,</span> <span class="str">&quot;t&quot;</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">)</span>

	.InitStruct<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">4</span><span class="sym">,</span> <span class="str">&quot;B&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">5</span><span class="sym">,</span> <span class="str">&quot;D&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">6</span><span class="sym">,</span> <span class="str">&quot;H&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">7</span><span class="sym">,</span> <span class="str">&quot;K&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">8</span><span class="sym">,</span> <span class="str">&quot;M&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">9</span><span class="sym">,</span> <span class="str">&quot;N&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">10</span><span class="sym">,</span> <span class="str">&quot;R&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">11</span><span class="sym">,</span> <span class="str">&quot;S&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">12</span><span class="sym">,</span> <span class="str">&quot;V&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">13</span><span class="sym">,</span> <span class="str">&quot;W&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">14</span><span class="sym">,</span> <span class="str">&quot;Y&quot;</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)</span>

	.<span class="kwa">local</span> pmc homosapiens
	homosapiens <span class="sym">=</span> new .Array
	homosapiens <span class="sym">=</span> <span class="num">4</span>
	.InitStruct<span class="sym">(</span>homosapiens<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="str">&quot;a&quot;</span><span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>homosapiens<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="str">&quot;c&quot;</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>homosapiens<span class="sym">,</span> <span class="num">2</span><span class="sym">,</span> <span class="str">&quot;g&quot;</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">)</span>
	.InitStruct<span class="sym">(</span>homosapiens<span class="sym">,</span> <span class="num">3</span><span class="sym">,</span> <span class="str">&quot;t&quot;</span><span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">)</span>

	.<span class="kwa">local</span> string alu
	alu <span class="sym">=</span> <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

	makeCumulative<span class="sym">(</span>iub<span class="sym">,</span> <span class="num">15</span><span class="sym">)</span>
	makeCumulative<span class="sym">(</span>homosapiens<span class="sym">,</span> <span class="num">4</span><span class="sym">)</span>

	$I0 <span class="sym">=</span> n <span class="sym">*</span> <span class="num">2</span>
	makeRepeatFasta<span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> alu<span class="sym">,</span> $I0<span class="sym">)</span>
	$I0 <span class="sym">=</span> n <span class="sym">*</span> <span class="num">3</span>
	makeRandomFasta <span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> iub<span class="sym">,</span> <span class="num">15</span><span class="sym">,</span> $I0<span class="sym">)</span>
	$I0 <span class="sym">=</span> n <span class="sym">*</span> <span class="num">5</span>
	makeRandomFasta <span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> homosapiens<span class="sym">,</span> <span class="num">4</span><span class="sym">,</span> $I0<span class="sym">)</span>
.<span class="kwa">end</span>

