<span class="slc">! -*- mode: f90 -*-
</span>
<span class="slc">! The Great Computer Language Shootout
</span><span class="slc">!   http://shootout.alioth.debian.org/
</span>
<span class="slc">!   contributed by Simon Geard (converted from the C# version)
</span>
<span class="slc">! $Id: spectralnorm-ifc.code,v 1.1 2005-05-02 00:33:08 bfulgham Exp $ ; $name: $
</span>
program spnorm

  real<span class="sym">*</span><span class="num">8</span>  <span class="sym">::</span> sn
  integer <span class="sym">::</span> n
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">6</span><span class="sym">)</span> argv

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)
</span>  read<span class="sym">(</span>argv<span class="sym">,*)</span> n

  sn <span class="sym">=</span> approximate<span class="sym">(</span>n<span class="sym">)

</span>  write<span class="sym">(*,</span><span class="str">'(f0.9)'</span><span class="sym">)</span> sn

  stop

contains

  real<span class="sym">*</span><span class="num">8</span> function approximate<span class="sym">(</span>n<span class="sym">)
</span>    integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> n

    integer <span class="sym">::</span> i
    real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> allocatable<span class="sym">,</span> dimension<span class="sym">(:) ::</span> u<span class="sym">,</span> v
    intrinsic dot_product

    allocate<span class="sym">(</span>u<span class="sym">(</span>n<span class="sym">))
</span>    u <span class="sym">= (/ (</span><span class="num">1.0d0</span><span class="sym">,</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">) /)

</span>    allocate<span class="sym">(</span>v<span class="sym">(</span>n<span class="sym">))
</span>    v <span class="sym">= (/ (</span><span class="num">0.0d0</span><span class="sym">,</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">) /)

</span>    do i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span><span class="num">10
</span>       call MultiplyAtAv<span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">,</span>v<span class="sym">)
</span>       call MultiplyAtAv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">)
</span>    end do

    approximate <span class="sym">=</span> sqrt<span class="sym">(</span>dot_product<span class="sym">(</span>u<span class="sym">,</span>v<span class="sym">)/</span>dot_product<span class="sym">(</span>v<span class="sym">,</span>v<span class="sym">))
</span>    deallocate<span class="sym">(</span>u<span class="sym">)
</span>    deallocate<span class="sym">(</span>v<span class="sym">)

</span>  end function approximate

   <span class="slc">! return element i,j of infinite matrix A
</span>   real<span class="sym">*</span><span class="num">8</span> function A<span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">)
</span>     integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> i<span class="sym">,</span>j
      A <span class="sym">=</span> <span class="num">1.0d0</span><span class="sym">/((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span> <span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)
</span>    end function A

   <span class="slc">! multiply vector v by matrix A
</span>   subroutine MultiplyAv<span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> Av<span class="sym">)
</span>     integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> n
     real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(</span><span class="num">0</span><span class="sym">:),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> v
     real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(</span><span class="num">0</span><span class="sym">:),</span> intent<span class="sym">(</span>out<span class="sym">) ::</span> Av
     integer <span class="sym">::</span> i<span class="sym">,</span> j
     do i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>n<span class="num">-1
</span>         Av<span class="sym">(</span>i<span class="sym">) =</span> <span class="num">0
</span>         do j<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>n<span class="num">-1
</span>            Av<span class="sym">(</span>i<span class="sym">) =</span> Av<span class="sym">(</span>i<span class="sym">) +</span> A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">)*</span>v<span class="sym">(</span>j<span class="sym">)
</span>         end do
      end do
    end subroutine MultiplyAv

    <span class="slc">! multiply vector v by matrix A transposed
</span>    subroutine MultiplyAtv<span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> Atv<span class="sym">)
</span>      integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> n
      real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(</span><span class="num">0</span><span class="sym">:),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> v
      real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(</span><span class="num">0</span><span class="sym">:),</span> intent<span class="sym">(</span>out<span class="sym">) ::</span> Atv

     integer <span class="sym">::</span> i<span class="sym">,</span> j

     do i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>n<span class="num">-1
</span>         Atv<span class="sym">(</span>i<span class="sym">) =</span> <span class="num">0
</span>         do j<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>n<span class="num">-1
</span>            Atv<span class="sym">(</span>i<span class="sym">) =</span> Atv<span class="sym">(</span>i<span class="sym">) +</span> A<span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">)*</span>v<span class="sym">(</span>j<span class="sym">)
</span>         end do
      end do
    end subroutine MultiplyAtv

    <span class="slc">! multiply vector v by matrix A and then by matrix A transposed
</span>    subroutine MultiplyAtAv<span class="sym">(</span>n<span class="sym">,</span> v<span class="sym">,</span> AtAv<span class="sym">)
</span>      integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> n
      real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> v
      real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>out<span class="sym">) ::</span> AtAv

      real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> u

      allocate<span class="sym">(</span>u<span class="sym">(</span>n<span class="sym">))
</span>      call MultiplyAv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">)
</span>      call MultiplyAtv<span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">,</span>AtAv<span class="sym">)
</span>      deallocate<span class="sym">(</span>u<span class="sym">)
</span>    end subroutine MultiplyAtAv

end program spnorm
