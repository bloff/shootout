<span class="slc">// $Id: wordfreq-gij.code,v 1.5 2004-11-22 07:09:06 bfulgham Exp $
</span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="slc">// Collection class code is from my friend Phil Chu, Thanks Phil!
</span>
<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;
</span><span class="kwa">import</span> java<span class="sym">.</span>text<span class="sym">.*;

</span><span class="kwa">class</span> Counter <span class="sym">{
</span>    <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;
}

</span><span class="kwa">public class</span> wordfreq <span class="sym">{

</span>    <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">) {
</span>	wf<span class="sym">();
    }

</span>    <span class="kwa">public static</span> <span class="kwc">String</span> padleft<span class="sym">(</span><span class="kwc">String</span> s<span class="sym">,</span><span class="kwb">int</span> n<span class="sym">,</span><span class="kwb">char</span> c<span class="sym">) {
</span>        <span class="kwb">int</span> len <span class="sym">=</span> s<span class="sym">.</span>length<span class="sym">();
</span>        <span class="kwa">if</span><span class="sym">(</span> len<span class="sym">&gt;=</span>n <span class="sym">)</span> <span class="kwa">return</span> s<span class="sym">;
</span>        <span class="kwb">char</span><span class="sym">[]</span> buf <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span>n<span class="sym">];
</span>        <span class="kwa">for</span><span class="sym">(</span> <span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>n<span class="sym">-</span>len<span class="sym">;</span>i<span class="sym">++ )</span> buf<span class="sym">[</span>i<span class="sym">]=</span>c<span class="sym">;
</span>        s<span class="sym">.</span>getChars<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>len<span class="sym">,</span>buf<span class="sym">,</span>n<span class="sym">-</span>len<span class="sym">);
</span>        <span class="kwa">return new</span> <span class="kwc">String</span><span class="sym">(</span>buf<span class="sym">);
    }

</span>    <span class="kwa">public static</span> <span class="kwb">void</span> wf<span class="sym">() {
</span>        <span class="kwc">HashMap</span> map <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">();
</span>        <span class="kwa">try</span> <span class="sym">{
</span>            <span class="kwc">Reader</span> r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));
</span>            <span class="kwc">StreamTokenizer</span> st <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StreamTokenizer</span><span class="sym">(</span>r<span class="sym">);
</span>            st<span class="sym">.</span>lowerCaseMode<span class="sym">(</span>true<span class="sym">);
</span>            st<span class="sym">.</span>whitespaceChars<span class="sym">(</span> <span class="num">0</span><span class="sym">,</span> <span class="num">64</span> <span class="sym">);
</span>            st<span class="sym">.</span>wordChars<span class="sym">(</span><span class="num">65</span><span class="sym">,</span> <span class="num">90</span><span class="sym">);
</span>            st<span class="sym">.</span>whitespaceChars<span class="sym">(</span> <span class="num">91</span><span class="sym">,</span> <span class="num">96</span> <span class="sym">);
</span>            st<span class="sym">.</span>wordChars<span class="sym">(</span><span class="num">97</span><span class="sym">,</span> <span class="num">122</span><span class="sym">);
</span>            st<span class="sym">.</span>whitespaceChars<span class="sym">(</span> <span class="num">123</span><span class="sym">,</span> <span class="num">255</span> <span class="sym">);
</span>            <span class="kwb">int</span> tt <span class="sym">=</span> st<span class="sym">.</span>nextToken<span class="sym">();
</span>            <span class="kwa">while</span> <span class="sym">(</span>tt <span class="sym">!=</span> <span class="kwc">StreamTokenizer</span><span class="sym">.</span>TT_EOF<span class="sym">) {
</span>                <span class="kwa">if</span> <span class="sym">(</span>tt <span class="sym">==</span> <span class="kwc">StreamTokenizer</span><span class="sym">.</span>TT_WORD<span class="sym">) {
</span>                    <span class="kwa">if</span> <span class="sym">(</span>map<span class="sym">.</span>containsKey<span class="sym">(</span>st<span class="sym">.</span>sval<span class="sym">)) {
                        ((</span>Counter<span class="sym">)</span>map<span class="sym">.</span>get<span class="sym">(</span>st<span class="sym">.</span>sval<span class="sym">)).</span>count<span class="sym">++;
                    }</span> <span class="kwa">else</span> <span class="sym">{
</span>                        map<span class="sym">.</span>put<span class="sym">(</span>st<span class="sym">.</span>sval<span class="sym">,</span> <span class="kwa">new</span> Counter<span class="sym">());
                    }
                }
</span>                tt <span class="sym">=</span> st<span class="sym">.</span>nextToken<span class="sym">();
            }
        }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">IOException</span> e<span class="sym">) {
</span>            <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span>e<span class="sym">);
</span>            <span class="kwa">return</span><span class="sym">;
        }

</span>        <span class="kwc">Collection</span> entries <span class="sym">=</span> map<span class="sym">.</span>entrySet<span class="sym">();
</span>	<span class="slc">// flatten the entries set into a vector for sorting
</span>	<span class="kwc">Vector</span> rev_wf <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Vector</span><span class="sym">(</span>entries<span class="sym">);

</span>        <span class="slc">// Sort the vector according to its value
</span>        <span class="kwc">Collections</span><span class="sym">.</span>sort<span class="sym">(</span>rev_wf<span class="sym">,</span> <span class="kwa">new</span> <span class="kwc">Comparator</span><span class="sym">() {
</span>		<span class="kwa">public</span> <span class="kwb">int</span> compare<span class="sym">(</span><span class="kwc">Object</span> o1<span class="sym">,</span> <span class="kwc">Object</span> o2<span class="sym">) {
</span>		    <span class="slc">// First sort by frequency
</span>		    <span class="kwb">int</span> c <span class="sym">= ((</span>Counter<span class="sym">)((</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>o2<span class="sym">).</span>getValue<span class="sym">()).</span>count <span class="sym">- ((</span>Counter<span class="sym">)((</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>o1<span class="sym">).</span>getValue<span class="sym">()).</span>count<span class="sym">;
</span>		    <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span> <span class="slc">// Second sort by lexicographical order
</span>			c <span class="sym">= ((</span><span class="kwc">String</span><span class="sym">)((</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>o2<span class="sym">).</span>getKey<span class="sym">()).</span>compareTo<span class="sym">((</span><span class="kwc">String</span><span class="sym">)((</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>o1<span class="sym">).</span>getKey<span class="sym">());
		    }
</span>		    <span class="kwa">return</span> c<span class="sym">;
		}
	    }
			 );

</span>        <span class="kwc">Iterator</span> it <span class="sym">=</span> rev_wf<span class="sym">.</span>iterator<span class="sym">();
</span>	<span class="kwc">Map</span><span class="sym">.</span>Entry ent<span class="sym">;
</span>	<span class="kwc">String</span> word<span class="sym">;
</span>	<span class="kwb">int</span> count<span class="sym">;
</span>        <span class="kwa">while</span><span class="sym">(</span>it<span class="sym">.</span>hasNext<span class="sym">()) {
</span>            ent <span class="sym">= (</span><span class="kwc">Map</span><span class="sym">.</span>Entry<span class="sym">)</span>it<span class="sym">.</span>next<span class="sym">();
</span>	    word <span class="sym">= ((</span><span class="kwc">String</span><span class="sym">)</span>ent<span class="sym">.</span>getKey<span class="sym">());
</span>	    count <span class="sym">= ((</span>Counter<span class="sym">)</span>ent<span class="sym">.</span>getValue<span class="sym">()).</span>count<span class="sym">;
</span>	    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>padleft<span class="sym">(</span><span class="kwc">Integer</span><span class="sym">.</span>toString<span class="sym">(</span>count<span class="sym">),</span><span class="num">7</span><span class="sym">,</span><span class="str">' '</span><span class="sym">) +</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> word<span class="sym">);
        }
    }
}</span>
