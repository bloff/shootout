<span class="slc">// $Id: except-kaffe.code,v 1.10 2006-03-31 16:08:49 bfulgham Exp $</span>
<span class="slc">// http://www.bagley.org/~doug/shootout/</span>
<span class="slc">// Collection class code is from my friend Phil Chu, Thanks Phil!</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>text<span class="sym">.*;</span>

<span class="kwa">class</span> Lo_Exception <span class="kwa">extends</span> <span class="kwc">Exception</span> <span class="sym">{</span>
    <span class="kwb">int</span> num <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">public</span> <span class="kwd">Lo_Exception</span><span class="sym">(</span><span class="kwb">int</span> num<span class="sym">) {</span>
	<span class="kwa">this</span><span class="sym">.</span>num <span class="sym">=</span> num<span class="sym">;</span>
    <span class="sym">}</span>
    <span class="kwa">public</span> <span class="kwc">String</span> <span class="kwd">toString</span><span class="sym">() {</span>
	<span class="kwa">return</span> <span class="str">&quot;Lo_Exception, num = &quot;</span> <span class="sym">+</span> <span class="kwa">this</span><span class="sym">.</span>num<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> Hi_Exception <span class="kwa">extends</span> <span class="kwc">Exception</span> <span class="sym">{</span>
    <span class="kwb">int</span> num <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">public</span> <span class="kwd">Hi_Exception</span><span class="sym">(</span><span class="kwb">int</span> num<span class="sym">) {</span>
	<span class="kwa">this</span><span class="sym">.</span>num <span class="sym">=</span> num<span class="sym">;</span>
    <span class="sym">}</span>
    <span class="kwa">public</span> <span class="kwc">String</span> <span class="kwd">toString</span><span class="sym">() {</span>
	<span class="kwa">return</span> <span class="str">&quot;Hi_Exception, num = &quot;</span> <span class="sym">+</span> <span class="kwa">this</span><span class="sym">.</span>num<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">public class</span> except <span class="sym">{</span>
    <span class="kwa">static</span> <span class="kwb">int</span> Lo <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">static</span> <span class="kwb">int</span> Hi <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[])</span> <span class="kwa">throws</span> <span class="kwc">IOException</span> <span class="sym">{</span>
	<span class="kwb">int</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
	    <span class="kwd">some_function</span><span class="sym">(</span>i<span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span><span class="str">&quot;Exceptions: HI=&quot;</span> <span class="sym">+</span> Hi <span class="sym">+</span> <span class="str">&quot; / LO=&quot;</span> <span class="sym">+</span> Lo<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">some_function</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {</span>
	<span class="kwa">try</span> <span class="sym">{</span>
	    <span class="kwd">hi_function</span><span class="sym">(</span>n<span class="sym">);</span>
	<span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) {</span>
	    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span><span class="str">&quot;We shouldn't get here: &quot;</span> <span class="sym">+</span> e<span class="sym">);</span>
	<span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">hi_function</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">)</span> <span class="kwa">throws</span> Hi_Exception<span class="sym">,</span> Lo_Exception <span class="sym">{</span>
	<span class="kwa">try</span> <span class="sym">{</span>
	    <span class="kwd">lo_function</span><span class="sym">(</span>n<span class="sym">);</span>
	<span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">(</span>Hi_Exception e<span class="sym">) {</span>
	    Hi<span class="sym">++;</span>
	<span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">lo_function</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">)</span> <span class="kwa">throws</span> Hi_Exception<span class="sym">,</span> Lo_Exception <span class="sym">{</span>
	<span class="kwa">try</span> <span class="sym">{</span>
	    <span class="kwd">blowup</span><span class="sym">(</span>n<span class="sym">);</span>
	<span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">(</span>Lo_Exception e<span class="sym">) {</span>
	    Lo<span class="sym">++;</span>
	<span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">blowup</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">)</span> <span class="kwa">throws</span> Hi_Exception<span class="sym">,</span> Lo_Exception <span class="sym">{</span>
	<span class="kwa">if</span> <span class="sym">((</span>n <span class="sym">%</span> <span class="num">2</span><span class="sym">) ==</span> <span class="num">0</span><span class="sym">) {</span>
	    <span class="kwa">throw new</span> <span class="kwd">Lo_Exception</span><span class="sym">(</span>n<span class="sym">);</span>
	<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
	    <span class="kwa">throw new</span> <span class="kwd">Hi_Exception</span><span class="sym">(</span>n<span class="sym">);</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
