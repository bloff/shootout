<span class="slc">// -*- mode: c++ -*-</span>
<span class="slc">// $Id: echo-gpp.code,v 1.13 2006-04-01 21:26:58 bfulgham Exp $</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>
<span class="dir">#include &lt;unistd.h&gt;</span>
<span class="dir">#include &lt;signal.h&gt;</span>
<span class="dir">#include &lt;errno.h&gt;</span>
<span class="dir">#include &lt;sys/types.h&gt;</span>
<span class="dir">#include &lt;sys/socket.h&gt;</span>
<span class="dir">#include &lt;sys/wait.h&gt;</span>
<span class="dir">#include &lt;netinet/in.h&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="dir">#define DATA</span> <span class="dstr">&quot;Hello there sailor</span><span class="esc">\n</span><span class="dstr">&quot;</span><span class="dir"></span>

<span class="kwb">void</span> <span class="kwd">myabort</span> <span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>m<span class="sym">) {</span> <span class="kwd">fprintf</span><span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">);</span> <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">); }</span>
<span class="kwb">void</span> <span class="kwd">sysabort</span> <span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>m<span class="sym">) {</span> <span class="kwd">perror</span><span class="sym">(</span>m<span class="sym">);</span> <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">); }</span>

<span class="kwb">int</span> sigchld <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwb">void</span> <span class="kwd">reaper</span> <span class="sym">(</span><span class="kwb">int</span> sig<span class="sym">) {</span> sigchld <span class="sym">=</span> <span class="num">1</span><span class="sym">; }</span>

<span class="kwb">int</span> <span class="kwd">server_sock</span> <span class="sym">()</span>
<span class="sym">{</span>
    <span class="kwb">int</span> ss<span class="sym">,</span> optval <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwb">struct</span> sockaddr_in sin<span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">((</span>ss <span class="sym">=</span> <span class="kwd">socket</span><span class="sym">(</span>PF_INET<span class="sym">,</span> SOCK_STREAM<span class="sym">,</span> <span class="num">0</span><span class="sym">)) == -</span><span class="num">1</span><span class="sym">)</span>
	<span class="kwd">sysabort</span><span class="sym">(</span><span class="str">&quot;server/socket&quot;</span><span class="sym">);</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">setsockopt</span><span class="sym">(</span>ss<span class="sym">,</span> SOL_SOCKET<span class="sym">,</span> SO_REUSEADDR<span class="sym">, &amp;</span>optval<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span>optval<span class="sym">)) == -</span><span class="num">1</span><span class="sym">)</span>
	<span class="kwd">sysabort</span><span class="sym">(</span><span class="str">&quot;server/setsockopt&quot;</span><span class="sym">);</span>
    <span class="kwd">memset</span><span class="sym">(&amp;</span>sin<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="kwa">sizeof</span><span class="sym">(</span>sin<span class="sym">));</span>
    sin<span class="sym">.</span>sin_family <span class="sym">=</span> AF_INET<span class="sym">;</span>
    sin<span class="sym">.</span>sin_addr<span class="sym">.</span>s_addr <span class="sym">=</span> <span class="kwd">htonl</span><span class="sym">(</span>INADDR_LOOPBACK<span class="sym">);</span>
    sin<span class="sym">.</span>sin_port <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">bind</span><span class="sym">(</span>ss<span class="sym">, (</span>sockaddr <span class="sym">*)&amp;</span>sin<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span>sin<span class="sym">)) == -</span><span class="num">1</span><span class="sym">)</span>
	<span class="kwd">sysabort</span><span class="sym">(</span><span class="str">&quot;server/bind&quot;</span><span class="sym">);</span>
    <span class="kwd">listen</span><span class="sym">(</span>ss<span class="sym">,</span> <span class="num">2</span><span class="sym">);</span>
    <span class="kwa">return</span><span class="sym">(</span>ss<span class="sym">);</span>
<span class="sym">}</span>


<span class="kwb">int</span> <span class="kwd">get_port</span> <span class="sym">(</span><span class="kwb">int</span> sock<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">struct</span> sockaddr_in sin<span class="sym">;</span>
    socklen_t slen <span class="sym">=</span> <span class="kwa">sizeof</span><span class="sym">(</span>sin<span class="sym">);</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">getsockname</span><span class="sym">(</span>sock<span class="sym">, (</span>sockaddr <span class="sym">*)&amp;</span>sin<span class="sym">, &amp;</span>slen<span class="sym">) == -</span><span class="num">1</span><span class="sym">)</span>
	<span class="kwd">sysabort</span><span class="sym">(</span><span class="str">&quot;server/getsockname&quot;</span><span class="sym">);</span>
    <span class="kwa">return</span><span class="sym">(</span>sin<span class="sym">.</span>sin_port<span class="sym">);</span>
<span class="sym">}</span>


<span class="kwb">int</span> <span class="kwd">client_sock</span> <span class="sym">(</span><span class="kwb">int</span> port<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">struct</span> sockaddr_in sin<span class="sym">;</span>
    <span class="kwb">int</span> sock<span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">((</span>sock <span class="sym">=</span> <span class="kwd">socket</span><span class="sym">(</span>PF_INET<span class="sym">,</span> SOCK_STREAM<span class="sym">,</span> <span class="num">0</span><span class="sym">)) == -</span><span class="num">1</span><span class="sym">)</span>
	<span class="kwd">sysabort</span><span class="sym">(</span><span class="str">&quot;client/socket&quot;</span><span class="sym">);</span>
    sin<span class="sym">.</span>sin_family <span class="sym">=</span> AF_INET<span class="sym">;</span>
    sin<span class="sym">.</span>sin_addr<span class="sym">.</span>s_addr <span class="sym">=</span> <span class="kwd">htonl</span><span class="sym">(</span>INADDR_LOOPBACK<span class="sym">);</span>
    sin<span class="sym">.</span>sin_port <span class="sym">=</span> port<span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">connect</span><span class="sym">(</span>sock<span class="sym">, (</span>sockaddr <span class="sym">*)&amp;</span>sin<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span>sin<span class="sym">)) == -</span><span class="num">1</span><span class="sym">)</span>
	<span class="kwd">sysabort</span><span class="sym">(</span><span class="str">&quot;client/connect&quot;</span><span class="sym">);</span>
    <span class="kwa">return</span><span class="sym">(</span>sock<span class="sym">);</span>
<span class="sym">}</span>


<span class="kwb">void</span> <span class="kwd">echo_client</span> <span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">int</span> port<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> len<span class="sym">,</span> nwritten<span class="sym">,</span> nread<span class="sym">;</span>
    <span class="kwb">char</span> <span class="sym">*</span>offset<span class="sym">,</span> obuf<span class="sym">[</span><span class="num">64</span><span class="sym">],</span> ibuf<span class="sym">[</span><span class="num">64</span><span class="sym">];</span>
    <span class="kwb">char</span> <span class="sym">*</span>end <span class="sym">=</span> ibuf <span class="sym">+</span> <span class="kwa">sizeof</span><span class="sym">(</span>ibuf<span class="sym">);</span>

    <span class="kwb">int</span> sock <span class="sym">=</span> <span class="kwd">client_sock</span><span class="sym">(</span>port<span class="sym">);</span>
    <span class="kwd">strcpy</span><span class="sym">(</span>obuf<span class="sym">,</span> DATA<span class="sym">);</span>
    <span class="kwb">int</span> olen <span class="sym">=</span> <span class="kwd">strlen</span><span class="sym">(</span>obuf<span class="sym">);</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
	len <span class="sym">=</span> olen<span class="sym">;</span>
	offset <span class="sym">=</span> obuf<span class="sym">;</span>
	<span class="kwa">while</span> <span class="sym">(</span>len <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
	    <span class="kwa">if</span> <span class="sym">((</span>nwritten <span class="sym">=</span> <span class="kwd">write</span><span class="sym">(</span>sock<span class="sym">,</span> offset<span class="sym">,</span> len<span class="sym">)) == -</span><span class="num">1</span><span class="sym">)</span>
		<span class="kwd">sysabort</span><span class="sym">(</span><span class="str">&quot;client/write&quot;</span><span class="sym">);</span>
	    offset <span class="sym">+=</span> nwritten<span class="sym">;</span>
	    len <span class="sym">-=</span> nwritten<span class="sym">;</span>
	<span class="sym">}</span>
	offset <span class="sym">=</span> ibuf<span class="sym">;</span>
	<span class="kwa">while</span> <span class="sym">((</span>nread <span class="sym">=</span> <span class="kwd">read</span><span class="sym">(</span>sock<span class="sym">,</span> offset<span class="sym">, (</span>end <span class="sym">-</span> offset<span class="sym">))) &gt;</span> <span class="num">0</span><span class="sym">) {</span>
	    offset <span class="sym">+=</span> nread<span class="sym">;</span>
	    <span class="kwa">if</span> <span class="sym">(*(</span>offset<span class="sym">-</span><span class="num">1</span><span class="sym">) ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;</span>
	<span class="sym">}</span>
	<span class="kwa">if</span> <span class="sym">(</span>nread <span class="sym">== -</span><span class="num">1</span><span class="sym">)</span>
	    <span class="kwd">sysabort</span><span class="sym">(</span><span class="str">&quot;client/read&quot;</span><span class="sym">);</span>
	<span class="sym">*</span>offset <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwa">if</span> <span class="sym">((</span><span class="kwd">strcmp</span><span class="sym">(</span>obuf<span class="sym">,</span> ibuf<span class="sym">)) !=</span> <span class="num">0</span><span class="sym">) {</span>
	    <span class="kwb">char</span> mbuf<span class="sym">[</span><span class="num">128</span><span class="sym">];</span>
	    <span class="kwd">sprintf</span><span class="sym">(</span>mbuf<span class="sym">,</span> <span class="str">&quot;client:</span> <span class="esc">\&quot;</span><span class="str">%s</span><span class="esc">\&quot;</span> <span class="str">ne</span> <span class="esc">\&quot;</span><span class="str">%s</span><span class="esc">\&quot;</span><span class="str">&quot;</span><span class="sym">,</span> obuf<span class="sym">,</span> ibuf<span class="sym">);</span>
	    <span class="kwd">myabort</span><span class="sym">(</span>mbuf<span class="sym">);</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwd">close</span><span class="sym">(</span>sock<span class="sym">);</span>
<span class="sym">}</span>


<span class="kwb">void</span> <span class="kwd">echo_server</span> <span class="sym">(</span><span class="kwb">int</span> n<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> csock<span class="sym">,</span> len<span class="sym">,</span> nwritten<span class="sym">,</span> total_bytes<span class="sym">;</span>
    pid_t pid<span class="sym">;</span>
    <span class="kwb">char</span> buf<span class="sym">[</span><span class="num">64</span><span class="sym">], *</span>offset<span class="sym">;</span>
    <span class="kwb">struct</span> sockaddr_in sin<span class="sym">;</span>
    socklen_t slen <span class="sym">=</span> <span class="kwa">sizeof</span><span class="sym">(</span>sin<span class="sym">);</span>
    <span class="kwb">int</span> status<span class="sym">;</span>

    <span class="kwb">int</span> ssock <span class="sym">=</span> <span class="kwd">server_sock</span><span class="sym">();</span>
    <span class="kwd">signal</span><span class="sym">(</span>SIGCHLD<span class="sym">,</span> reaper<span class="sym">);</span>
    <span class="kwa">if</span> <span class="sym">((</span>pid <span class="sym">=</span> <span class="kwd">fork</span><span class="sym">()) == -</span><span class="num">1</span><span class="sym">)</span>
	<span class="kwd">sysabort</span><span class="sym">(</span><span class="str">&quot;server/fork&quot;</span><span class="sym">);</span>
    <span class="kwa">if</span> <span class="sym">(</span>pid<span class="sym">) {</span>
	<span class="com">/* parent is server */</span>
	<span class="kwa">if</span> <span class="sym">((</span>csock <span class="sym">=</span> <span class="kwd">accept</span><span class="sym">(</span>ssock<span class="sym">, (</span>sockaddr <span class="sym">*)&amp;</span>sin<span class="sym">, &amp;</span>slen<span class="sym">)) == -</span><span class="num">1</span><span class="sym">)</span>
	    <span class="kwd">sysabort</span><span class="sym">(</span><span class="str">&quot;server/accept&quot;</span><span class="sym">);</span>
	total_bytes <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="kwa">while</span> <span class="sym">((</span>len <span class="sym">=</span> <span class="kwd">read</span><span class="sym">(</span>csock<span class="sym">,</span> buf<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span>buf<span class="sym">))) &gt;</span> <span class="num">0</span><span class="sym">) {</span>
	    <span class="kwa">if</span> <span class="sym">(</span>sigchld<span class="sym">)</span> <span class="kwd">myabort</span><span class="sym">(</span><span class="str">&quot;server/sigchld&quot;</span><span class="sym">);</span>
	    offset <span class="sym">=</span> buf<span class="sym">;</span>
	    total_bytes <span class="sym">+=</span> len<span class="sym">;</span>
	    <span class="kwa">while</span> <span class="sym">(</span>len <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
		<span class="kwa">if</span> <span class="sym">((</span>nwritten <span class="sym">=</span> <span class="kwd">write</span><span class="sym">(</span>csock<span class="sym">,</span> offset<span class="sym">,</span> len<span class="sym">)) == -</span><span class="num">1</span><span class="sym">)</span>
		    <span class="kwd">sysabort</span><span class="sym">(</span><span class="str">&quot;server/write&quot;</span><span class="sym">);</span>
		offset <span class="sym">+=</span> nwritten<span class="sym">;</span>
		len <span class="sym">-=</span> nwritten<span class="sym">;</span>
	    <span class="sym">}</span>
	<span class="sym">}</span>
	<span class="kwa">if</span> <span class="sym">(</span>len <span class="sym">== -</span><span class="num">1</span><span class="sym">)</span>
	    <span class="kwd">sysabort</span><span class="sym">(</span><span class="str">&quot;server/read&quot;</span><span class="sym">);</span>
	<span class="kwd">close</span><span class="sym">(</span>csock<span class="sym">);</span>
	<span class="kwd">fprintf</span><span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;server processed %d bytes</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> total_bytes<span class="sym">);</span>
    <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
	<span class="com">/* child is client */</span>
	<span class="kwd">echo_client</span><span class="sym">(</span>n<span class="sym">,</span> <span class="kwd">get_port</span><span class="sym">(</span>ssock<span class="sym">));</span>
    <span class="sym">}</span>
    <span class="kwd">wait</span><span class="sym">(&amp;</span>status<span class="sym">);</span>
<span class="sym">}</span>


<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])</span>
<span class="sym">{</span>
    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwd">echo_server</span><span class="sym">(</span>n<span class="sym">);</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>
