\ $Id<span class="sym">:</span> sieve<span class="sym">.</span>gforth<span class="sym">,</span>v <span class="num">1.3 2004</span><span class="sym">/</span><span class="num">12</span><span class="sym">/</span><span class="num">10 06</span><span class="sym">:</span><span class="num">22</span><span class="sym">:</span><span class="num">25</span> bfulgham Exp $
\ http<span class="sym">:</span><span class="slc">//www.bagley.org/~doug/shootout/</span>
\ adapted from a program in the gforth distribution
\ modified <span class="kwa">and</span> annotated by doug bagley
\ further updated by James Hague

\ find <span class="kwa">and</span> count all primes from <span class="num">2</span> to <span class="num">8192</span>

decimal

\ read NUM from last command line argument
<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

\ we search <span class="kwa">for</span> primes up to <span class="kwa">this</span> SIZE
<span class="num">8192</span> constant SIZE

\ Flags is an array of chars of length SIZE
\ we<span class="str">'ll mark all non-prime indexes in this array as false</span>
<span class="str"></span><span class="esc">\ </span><span class="str">the remaining indexes will be prime numbers</span>
<span class="str">create Flags SIZE allot</span>
<span class="str"></span>
<span class="str"></span><span class="esc">\ </span><span class="str">EndFlags points to end of array Flags</span>
<span class="str">Flags SIZE + constant EndFlags</span>
<span class="str"></span>
<span class="str"></span><span class="esc">\ </span><span class="str">FLAGMULTS</span>
<span class="str"></span><span class="esc">\ </span><span class="str">flag all multiples of n in array as not prime</span>
<span class="str"></span><span class="esc">\ </span><span class="str">array has address range: fromaddr toaddr</span>
<span class="str"></span><span class="esc">\ </span><span class="str">starting value for fromaddr should be</span>
<span class="str"></span><span class="esc">\ </span>  <span class="str">arraystart n n + +</span>
<span class="str"></span><span class="esc">\ </span><span class="str">u+do is a gforth extension of do that can loop zero times</span>
<span class="str">: flagmults ( n toaddr fromaddr -- n) u+do 0 i c! dup +loop ;</span>
<span class="str"></span>
<span class="str"></span>
<span class="str"></span><span class="esc">\ </span><span class="str">PRIMES</span>
<span class="str"></span><span class="esc">\ </span><span class="str">find all primes from 2 to SIZE</span>
<span class="str">: primes  ( -- n )</span>
<span class="str"></span><span class="esc">\ </span><span class="str">fill array Flags with 1'</span>s
    Flags SIZE <span class="num">1</span> fill
    <span class="num">0 2</span>
    \ index i ranges from Flags to EndFlags
    EndFlags Flags <span class="kwa">do</span>
	i c&#64; <span class="kwa">if</span>
	    EndFlags over i <span class="sym">+</span> flagmults
	    \ Increment our Count of Primes
            <span class="num">1</span> under<span class="sym">+</span>
	then
	<span class="num">1</span><span class="sym">+</span>
    loop drop <span class="sym">;</span>
\ END <span class="kwd">PRIMES</span> <span class="sym">(</span>Returns<span class="sym">:</span> Count<span class="sym">)</span>

\ BENCHMARK
\ run the test NUM times
<span class="sym">:</span> benchmark  <span class="num">0</span> NUM <span class="num">0</span> <span class="kwa">do</span>  primes nip loop <span class="sym">;</span>


\ now print count of how many Flags are now <span class="str">&quot;true&quot;</span>
<span class="sym">.</span><span class="str">&quot; Count: &quot;</span> benchmark  <span class="num">1</span> u<span class="sym">.</span>r cr
bye


\ PPRIMES
\ <span class="kwa">for</span> testing<span class="sym">,</span> we can print out all the prime numbers
\: <span class="kwd">pprimes</span> <span class="sym">( -- )</span>
\    SIZE <span class="num">0</span> <span class="kwa">do</span> Flags i <span class="sym">+</span> c&#64; <span class="kwa">if</span> i <span class="num">2</span> <span class="sym">+ .</span> then loop cr <span class="sym">;</span>

\ uncomment the following to print the primes <span class="kwa">or</span> debug
\ pprimes
\ flags <span class="num">100</span> dump
