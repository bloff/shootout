<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Dave Fladebo</span>
<span class="com"></span>
<span class="com">   compile: dmd -O -inline -release message2.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">,</span> std<span class="sym">.</span>thread<span class="sym">,</span> std<span class="sym">.</span>c<span class="sym">.</span>linux<span class="sym">.</span>linux<span class="sym">;</span>

<span class="kwa">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">const int</span> threads <span class="sym">=</span> <span class="num">500</span><span class="sym">;</span>
    <span class="kwa">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">2</span><span class="sym">;</span>

    <span class="kwb">L</span>ink chain <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>
    <span class="kwb">L</span>ink<span class="sym">.</span>total <span class="sym">=</span> threads <span class="sym">*</span> n<span class="sym">;</span>
    <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> threads<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
        <span class="kwb">L</span>ink next <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">L</span>ink<span class="sym">(</span>chain<span class="sym">);</span>
        chain <span class="sym">=</span> next<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwb">L</span>ink first <span class="sym">=</span> chain<span class="sym">;</span>
    <span class="kwa">while</span><span class="sym">(</span>chain<span class="sym">)</span>
    <span class="sym">{</span>
        chain<span class="sym">.</span>start<span class="sym">;</span>
        chain <span class="sym">=</span> chain<span class="sym">.</span>next<span class="sym">;</span>
    <span class="sym">}</span>

    chain <span class="sym">=</span> first<span class="sym">;</span>
    <span class="kwa">while</span><span class="sym">(</span>n<span class="sym">--)</span> chain<span class="sym">.</span><span class="kwd">put</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>

    <span class="kwa">while</span><span class="sym">(</span>chain<span class="sym">)</span>
    <span class="sym">{</span>
        chain<span class="sym">.</span><span class="kwc">wait</span><span class="sym">;</span>
        chain <span class="sym">=</span> chain<span class="sym">.</span>next<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwd">writefln</span><span class="sym">(</span><span class="kwb">L</span>ink<span class="sym">.</span>sum<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">class</span> <span class="kwb">L</span>ink <span class="sym">:</span> <span class="kwb">T</span>hread
<span class="sym">{</span>
<span class="kwa">private</span><span class="sym">:</span>
    <span class="kwa">int</span> message <span class="sym">= -</span><span class="num">1</span><span class="sym">;</span>
    <span class="kwa">static</span> threads <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

<span class="kwa">public</span><span class="sym">:</span>
    <span class="kwb">L</span>ink next<span class="sym">;</span>
    <span class="kwa">static int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> total <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">this</span><span class="sym">(</span><span class="kwb">L</span>ink next<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">super</span><span class="sym">(</span><span class="num">1024</span> <span class="sym">*</span> <span class="num">16</span><span class="sym">);</span>
        <span class="kwa">this</span><span class="sym">.</span>next <span class="sym">=</span> next<span class="sym">;</span>
        threads<span class="sym">++;</span>
    <span class="sym">}</span>

    <span class="kwa">int</span> <span class="kwd">run</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">while</span><span class="sym">(</span>sum <span class="sym">&lt;</span> total<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span>message <span class="sym">&gt; -</span><span class="num">1</span><span class="sym">)</span>
            <span class="sym">{</span>
                <span class="kwa">if</span><span class="sym">(</span>next<span class="sym">)</span>
                <span class="sym">{</span>
		    next<span class="sym">.</span>message <span class="sym">=</span> message <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
                <span class="sym">}</span>
                <span class="kwa">else</span>
                <span class="sym">{</span>
                    sum <span class="sym">+=</span> message <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
                <span class="sym">}</span>
            <span class="sym">}</span>
            <span class="kwd">yield</span><span class="sym">();</span>
        <span class="sym">}</span>
        <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">void</span> <span class="kwd">put</span><span class="sym">(</span><span class="kwa">int</span> msg<span class="sym">)</span>
    <span class="sym">{</span>
        message <span class="sym">=</span> msg<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>
