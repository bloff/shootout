
<span class="sym">(</span>module message mzscheme

  <span class="sym">(</span>define <span class="sym">(</span>generate receive<span class="sym">-</span>ch n<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>zero? n<span class="sym">)</span>
	receive<span class="sym">-</span>ch
	<span class="sym">(</span>let <span class="sym">([</span>ch <span class="sym">(</span>make<span class="sym">-</span>channel<span class="sym">)])</span>
	  <span class="sym">(</span>thread <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span>
		    <span class="sym">(</span>let loop <span class="sym">()</span>
		      <span class="sym">(</span>channel<span class="sym">-</span>put ch <span class="sym">(</span>add1 <span class="sym">(</span>channel<span class="sym">-</span>get receive<span class="sym">-</span>ch<span class="sym">)))</span>
		      <span class="sym">(</span>loop<span class="sym">))))</span>
	  <span class="sym">(</span>generate ch <span class="sym">(</span>sub1 n<span class="sym">)))))</span>

  <span class="sym">(</span>let <span class="sym">([</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number
	    <span class="sym">(</span>vector<span class="sym">-</span>ref <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)</span> <span class="num">0</span><span class="sym">))])</span>
    <span class="sym">(</span>let<span class="sym">* ([</span>start<span class="sym">-</span>ch <span class="sym">(</span>make<span class="sym">-</span>channel<span class="sym">)]</span>
	   <span class="sym">[</span>end<span class="sym">-</span>ch <span class="sym">(</span>generate start<span class="sym">-</span>ch <span class="num">500</span><span class="sym">)])</span>
      <span class="sym">(</span>let loop <span class="sym">([</span>n n<span class="sym">][</span>total <span class="num">0</span><span class="sym">])</span>
	<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>zero? n<span class="sym">)</span>
	    <span class="sym">(</span>printf <span class="str">&quot;~a</span><span class="esc">\n</span><span class="str">&quot;</span> total<span class="sym">)</span>
	    <span class="sym">(</span>begin
	      <span class="sym">(</span>channel<span class="sym">-</span>put start<span class="sym">-</span>ch <span class="num">0</span><span class="sym">)</span>
	      <span class="sym">(</span>loop <span class="sym">(</span>sub1 n<span class="sym">)</span>
		    <span class="sym">(+</span> total <span class="sym">(</span>channel<span class="sym">-</span>get end<span class="sym">-</span>ch<span class="sym">)))))))))</span>
