<span class="line">    1 </span><span class="slc">// $Id: wc-gij.code,v 1.4 2004-11-13 07:43:30 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// with help from Dirus&#64;programmer.net
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="line">    6 </span><span class="sym"></span><span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;
</span><span class="line">    7 </span><span class="sym"></span><span class="kwa">import</span> java<span class="sym">.</span>text<span class="sym">.*;
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym"></span><span class="slc">// this program modified from:
</span><span class="line">   10 </span><span class="slc"></span><span class="slc">//   http://cm.bell-labs.com/cm/cs/who/bwk/interps/pap.html
</span><span class="line">   11 </span><span class="slc"></span><span class="slc">// Timing Trials, or, the Trials of Timing: Experiments with Scripting
</span><span class="line">   12 </span><span class="slc"></span><span class="slc">// and User-Interface Languages&lt;/a&gt; by Brian W. Kernighan and
</span><span class="line">   13 </span><span class="slc"></span><span class="slc">// Christopher J. Van Wyk.
</span><span class="line">   14 </span><span class="slc"></span>
<span class="line">   15 </span><span class="kwa">public class</span> wc <span class="sym">{
</span><span class="line">   16 </span><span class="sym"></span>    <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">) {
</span><span class="line">   17 </span><span class="sym"></span>        <span class="kwb">int</span> nl <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> nw <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> nc <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   18 </span><span class="sym">
</span><span class="line">   19 </span><span class="sym"></span>        <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   20 </span><span class="sym"></span>            <span class="kwb">byte</span><span class="sym">[]</span> buff <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span><span class="num">4096</span><span class="sym">];
</span><span class="line">   21 </span><span class="sym"></span>            <span class="kwb">boolean</span> inword <span class="sym">=</span> false<span class="sym">;
</span><span class="line">   22 </span><span class="sym"></span>            <span class="kwb">int</span> length<span class="sym">;
</span><span class="line">   23 </span><span class="sym"></span>            <span class="kwb">char</span> c<span class="sym">;
</span><span class="line">   24 </span><span class="sym">
</span><span class="line">   25 </span><span class="sym"></span>            <span class="kwa">while</span> <span class="sym">((</span>length <span class="sym">=</span> <span class="kwc">System</span><span class="sym">.</span>in<span class="sym">.</span>read<span class="sym">(</span>buff<span class="sym">)) != -</span><span class="num">1</span><span class="sym">) {
</span><span class="line">   26 </span><span class="sym"></span>                nc <span class="sym">+=</span> length<span class="sym">;
</span><span class="line">   27 </span><span class="sym"></span>                <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> length<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   28 </span><span class="sym"></span>                    c <span class="sym">= (</span><span class="kwb">char</span><span class="sym">)</span>buff<span class="sym">[</span>i<span class="sym">];
</span><span class="line">   29 </span><span class="sym"></span>                    <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">)
</span><span class="line">   30 </span><span class="sym">                        ++</span>nl<span class="sym">;
</span><span class="line">   31 </span><span class="sym"></span>                    <span class="kwa">if</span> <span class="sym">(</span><span class="kwc">Character</span><span class="sym">.</span>isWhitespace<span class="sym">(</span>c<span class="sym">))
</span><span class="line">   32 </span><span class="sym"></span>                        inword <span class="sym">=</span> false<span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>                    <span class="kwa">else if</span> <span class="sym">(</span>inword <span class="sym">==</span> false<span class="sym">) {
</span><span class="line">   34 </span><span class="sym">                        ++</span>nw<span class="sym">;
</span><span class="line">   35 </span><span class="sym"></span>                        inword <span class="sym">=</span> true<span class="sym">;
</span><span class="line">   36 </span><span class="sym">                    }
</span><span class="line">   37 </span><span class="sym">                }
</span><span class="line">   38 </span><span class="sym">            }
</span><span class="line">   39 </span><span class="sym">        }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">IOException</span> e<span class="sym">) {
</span><span class="line">   40 </span><span class="sym"></span>            <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span>e<span class="sym">);
</span><span class="line">   41 </span><span class="sym"></span>            <span class="kwa">return</span><span class="sym">;
</span><span class="line">   42 </span><span class="sym">        }
</span><span class="line">   43 </span><span class="sym"></span>        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span><span class="kwc">Integer</span><span class="sym">.</span>toString<span class="sym">(</span>nl<span class="sym">) +</span> <span class="str">&quot; &quot;</span> <span class="sym">+
</span><span class="line">   44 </span><span class="sym"></span>                           <span class="kwc">Integer</span><span class="sym">.</span>toString<span class="sym">(</span>nw<span class="sym">) +</span> <span class="str">&quot; &quot;</span> <span class="sym">+
</span><span class="line">   45 </span><span class="sym"></span>                           <span class="kwc">Integer</span><span class="sym">.</span>toString<span class="sym">(</span>nc<span class="sym">));
</span><span class="line">   46 </span><span class="sym">    }
</span><span class="line">   47 </span><span class="sym">}</span>
