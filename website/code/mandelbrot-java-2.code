<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com"></span>
<span class="com">   transliteration of Nice program</span>
<span class="com">*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>

<span class="kwa">class</span> mandelbrot <span class="sym">{</span>
   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)</span> <span class="kwa">throws</span> java<span class="sym">.</span>io<span class="sym">.</span><span class="kwc">IOException</span> <span class="sym">{</span>
      <span class="kwb">int</span> width <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
      <span class="kwb">int</span> height <span class="sym">=</span> width<span class="sym">;</span>
      <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+</span> width <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> height<span class="sym">);</span>

      <span class="kwc">BufferedOutputStream</span> s <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedOutputStream</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>out<span class="sym">);</span>
      <span class="kwb">double</span> limitSquared <span class="sym">=</span> <span class="num">4.0</span><span class="sym">;</span>
      <span class="kwb">double</span> iterations <span class="sym">=</span> <span class="num">50</span><span class="sym">;</span>
      <span class="kwb">boolean</span> isOverLimit <span class="sym">=</span> false<span class="sym">;</span>
      <span class="kwb">int</span> bits <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwb">int</span> bitnum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> y<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> y<span class="sym">&lt;</span>height<span class="sym">;</span> y<span class="sym">++){</span>
         <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> x<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> x<span class="sym">&lt;</span>width<span class="sym">;</span> x<span class="sym">++){</span>

            <span class="kwb">double</span> Zr <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span> <span class="kwb">double</span> Zi <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
            <span class="kwb">double</span> Cr <span class="sym">= (</span><span class="num">2.0</span><span class="sym">*</span>x<span class="sym">/</span>width <span class="sym">-</span> <span class="num">1.5</span><span class="sym">);</span> <span class="kwb">double</span> Ci <span class="sym">= (</span><span class="num">2.0</span><span class="sym">*</span>y<span class="sym">/</span>height <span class="sym">-</span> <span class="num">1.0</span><span class="sym">);</span>

            <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwa">do</span> <span class="sym">{</span>
               <span class="kwb">double</span> Tr <span class="sym">=</span> Zr<span class="sym">*</span>Zr <span class="sym">-</span> Zi<span class="sym">*</span>Zi <span class="sym">+</span> Cr<span class="sym">;</span>
               <span class="kwb">double</span> Ti <span class="sym">=</span> <span class="num">2.0</span><span class="sym">*</span>Zr<span class="sym">*</span>Zi <span class="sym">+</span> Ci<span class="sym">;</span>
               Zr <span class="sym">=</span> Tr<span class="sym">;</span> Zi <span class="sym">=</span> Ti<span class="sym">;</span>
               isOverLimit <span class="sym">=</span> Zr<span class="sym">*</span>Zr <span class="sym">+</span> Zi<span class="sym">*</span>Zi <span class="sym">&gt;</span> limitSquared<span class="sym">;</span>
            <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(!</span>isOverLimit <span class="sym">&amp;&amp; (++</span>i <span class="sym">&lt;</span> iterations<span class="sym">));</span>

            bits <span class="sym">=</span> bits <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">if</span> <span class="sym">(!</span>isOverLimit<span class="sym">)</span> bits<span class="sym">++;</span>
            bitnum<span class="sym">++;</span>

            <span class="kwa">if</span> <span class="sym">(</span>x <span class="sym">==</span> width <span class="sym">-</span> <span class="num">1</span><span class="sym">) {</span>
               bits <span class="sym">=</span> bits <span class="sym">&lt;&lt; (</span><span class="num">8</span> <span class="sym">-</span> bitnum<span class="sym">);</span>
               bitnum <span class="sym">=</span> <span class="num">8</span><span class="sym">;</span>
            <span class="sym">}</span>

            <span class="kwa">if</span> <span class="sym">(</span>bitnum <span class="sym">==</span> <span class="num">8</span><span class="sym">){</span>
               s<span class="sym">.</span><span class="kwd">write</span><span class="sym">((</span><span class="kwb">byte</span><span class="sym">)</span>bits<span class="sym">);</span>
               bits <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> bitnum <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="sym">}</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
      s<span class="sym">.</span><span class="kwd">close</span><span class="sym">();</span>
   <span class="sym">}</span>
<span class="sym">}</span>

