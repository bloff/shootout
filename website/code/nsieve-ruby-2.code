<span class="slc">#!/usr/bin/ruby</span>
<span class="slc">#</span>
<span class="slc"># The Great Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># nsieve benchmark in Ruby.</span>
<span class="slc"># Contributed by Glenn Parker, March 2005</span>

<span class="kwa">def</span> <span class="kwd">sieve</span><span class="sym">(</span>m)
  flags = <span class="str">&quot;</span><span class="esc">\x</span><span class="str">1&quot;</span> <span class="sym">*</span> m
  count = <span class="num">0</span>
  pmax = m <span class="sym">-</span> <span class="num">1</span>
  <span class="num">2</span><span class="sym">.</span><span class="kwd">step</span><span class="sym">(</span>pmax<span class="sym">,</span> <span class="num">1</span>) <span class="kwa">do</span> <span class="sym">|</span>p<span class="sym">|</span>
    <span class="kwa">if</span> flags<span class="sym">[</span>p<span class="sym">]</span> == <span class="num">1</span>
      count <span class="sym">+</span>= <span class="num">1</span>
      p<span class="sym">.</span><span class="kwd">step</span><span class="sym">(</span>pmax<span class="sym">,</span> p) <span class="kwa">do</span> <span class="sym">|</span>mult<span class="sym">|</span>
        flags<span class="sym">[</span>mult<span class="sym">]</span> = <span class="num">0</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  count
<span class="kwa">end</span>

n = <span class="sym">(</span><span class="kwc">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] ||</span> <span class="num">2</span>)<span class="sym">.</span>to_i
n<span class="sym">.</span><span class="kwd">step</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">, -</span><span class="num">1</span>) <span class="kwa">do</span> <span class="sym">|</span>exponent<span class="sym">|</span>
  <span class="kwa">break if</span> exponent <span class="sym">&lt;</span> <span class="num">0</span>
  m = <span class="num">2</span> <span class="sym">**</span> exponent <span class="sym">*</span> <span class="num">10_000</span>
  count = <span class="kwd">sieve</span><span class="sym">(</span>m)
  printf <span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> count
<span class="kwa">end</span>
