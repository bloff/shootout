<span class="slc">#!/usr/bin/python
</span><span class="slc"># $Id: lists-psyco.code,v 1.5 2004-12-05 01:58:28 bfulgham Exp $
</span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span><span class="slc"># with improvements from Mark Baker
</span>
<span class="kwc">import</span> sys<span class="sym">,</span> psyco
psyco<span class="sym">.</span>full<span class="sym">()

</span>SIZE <span class="sym">=</span> <span class="num">10000

</span><span class="kwb">def</span> test_lists<span class="sym">():
</span>    Li1 <span class="sym">=</span> <span class="kwa">range</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> SIZE <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span>    Li2 <span class="sym">=</span> Li1<span class="sym">[:]
</span>    Li3 <span class="sym">= []

</span>    <span class="slc"># remove each individual item from left side of Li2 and
</span>    <span class="slc"># append to right side of Li3 (preserving order)
</span>    <span class="slc">#
</span>    <span class="slc"># popping the first element is *expensive*
</span>    <span class="slc">#
</span>    <span class="slc">#while Li2:
</span>    <span class="slc">#    Li3.append(Li2.pop(0))
</span>    Li2<span class="sym">.</span>reverse<span class="sym">()
</span>    <span class="kwb">while</span> Li2<span class="sym">:
</span>        Li3<span class="sym">.</span>append<span class="sym">(</span>Li2<span class="sym">.</span>pop<span class="sym">())
</span>    <span class="kwb">while</span> Li3<span class="sym">:
</span>        Li2<span class="sym">.</span>append<span class="sym">(</span>Li3<span class="sym">.</span>pop<span class="sym">())
</span>    Li1<span class="sym">.</span>reverse<span class="sym">()
</span>    <span class="kwb">if</span> Li1<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> SIZE<span class="sym">:
</span>        <span class="kwb">return</span> <span class="num">0
</span>    <span class="kwb">if</span> Li1 <span class="sym">==</span> Li2<span class="sym">:
</span>        <span class="kwb">return</span> <span class="kwa">len</span><span class="sym">(</span>Li1<span class="sym">)
</span>    <span class="kwb">else</span><span class="sym">:
</span>        <span class="kwb">return</span> <span class="num">0

</span><span class="kwb">def</span> main<span class="sym">():
</span>    NUM <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])
</span>    <span class="kwb">if</span> NUM <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">:
</span>        NUM <span class="sym">=</span> <span class="num">1
</span>    <span class="kwb">while</span> NUM <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">:
</span>        result <span class="sym">=</span> test_lists<span class="sym">()
</span>        NUM <span class="sym">=</span> NUM <span class="num">- 1
</span>    <span class="kwb">print</span> result

main<span class="sym">()</span>
