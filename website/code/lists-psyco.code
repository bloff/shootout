<span class="slc">#!/usr/bin/python</span>
<span class="slc"># $Id: lists-psyco.code,v 1.10 2007-12-04 06:32:47 bfulgham Exp $</span>
<span class="slc"># http://www.bagley.org/~doug/shootout/</span>
<span class="slc"># with improvements from Mark Baker</span>

<span class="kwa">import</span> sys<span class="sym">,</span> psyco
psyco<span class="sym">.</span><span class="kwd">full</span><span class="sym">()</span>

SIZE <span class="sym">=</span> <span class="num">10000</span>

<span class="kwa">def</span> <span class="kwd">test_lists</span><span class="sym">():</span>
    Li1 <span class="sym">=</span> <span class="kwb">range</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> SIZE <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
    Li2 <span class="sym">=</span> Li1<span class="sym">[:]</span>
    Li3 <span class="sym">= []</span>

    <span class="slc"># remove each individual item from left side of Li2 and</span>
    <span class="slc"># append to right side of Li3 (preserving order)</span>
    <span class="slc">#</span>
    <span class="slc"># popping the first element is *expensive*</span>
    <span class="slc">#</span>
    <span class="slc">#while Li2:</span>
    <span class="slc">#    Li3.append(Li2.pop(0))</span>
    Li2<span class="sym">.</span><span class="kwd">reverse</span><span class="sym">()</span>
    <span class="kwa">while</span> Li2<span class="sym">:</span>
        Li3<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>Li2<span class="sym">.</span><span class="kwd">pop</span><span class="sym">())</span>
    <span class="kwa">while</span> Li3<span class="sym">:</span>
        Li2<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>Li3<span class="sym">.</span><span class="kwd">pop</span><span class="sym">())</span>
    Li1<span class="sym">.</span><span class="kwd">reverse</span><span class="sym">()</span>
    <span class="kwa">if</span> Li1<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> SIZE<span class="sym">:</span>
        <span class="kwa">return</span> <span class="num">0</span>
    <span class="kwa">if</span> Li1 <span class="sym">==</span> Li2<span class="sym">:</span>
        <span class="kwa">return</span> <span class="kwb">len</span><span class="sym">(</span>Li1<span class="sym">)</span>
    <span class="kwa">else</span><span class="sym">:</span>
        <span class="kwa">return</span> <span class="num">0</span>

<span class="kwa">def</span> <span class="kwd">main</span><span class="sym">():</span>
    NUM <span class="sym">=</span> <span class="kwb">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span>
    <span class="kwa">if</span> NUM <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">:</span>
        NUM <span class="sym">=</span> <span class="num">1</span>
    <span class="kwa">while</span> NUM <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">:</span>
        result <span class="sym">=</span> <span class="kwd">test_lists</span><span class="sym">()</span>
        NUM <span class="sym">=</span> NUM <span class="sym">-</span> <span class="num">1</span>
    <span class="kwa">print</span> result

<span class="kwd">main</span><span class="sym">()</span>
