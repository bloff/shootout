<span class="line">    1 </span><span class="com">(*
</span><span class="line">    2 </span><span class="com"> * $Id: lists1-ocaml.code,v 1.4 2004-11-13 07:41:53 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> *)</span>
<span class="line">    5 </span>
<span class="line">    6 </span><span class="com">(*
</span><span class="line">    7 </span><span class="com"># List.
</span><span class="line">    8 </span><span class="com">- : int = 45
</span><span class="line">    9 </span><span class="com"> *)</span>
<span class="line">   10 </span>
<span class="line">   11 </span><span class="kwa">open</span> List
<span class="line">   12 </span><span class="kwa">open</span> Printf
<span class="line">   13 </span>
<span class="line">   14 </span><span class="kwa">let</span> seq n <span class="sym">=
</span><span class="line">   15 </span><span class="sym"></span>  <span class="kwa">let rec</span> _seq m l <span class="sym">=</span> <span class="kwa">if</span> m <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> l <span class="kwa">else</span> _seq <span class="sym">(</span>m <span class="num">- 1</span><span class="sym">) (</span>m<span class="sym">::</span>l<span class="sym">)</span> <span class="kwa">in
</span><span class="line">   16 </span><span class="kwa"></span>  _seq n <span class="sym">[]
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym"></span><span class="kwa">let</span> pop_head l <span class="sym">=
</span><span class="line">   19 </span><span class="sym"></span>  <span class="kwa">let</span> item <span class="sym">=</span> hd<span class="sym">(!</span>l<span class="sym">)</span> <span class="kwa">in</span> l <span class="sym">:=</span> tl<span class="sym">(!</span>l<span class="sym">);</span> item
<span class="line">   20 </span>
<span class="line">   21 </span><span class="kwa">let</span> push_head l item <span class="sym">=
</span><span class="line">   22 </span><span class="sym"></span>  l <span class="sym">:=</span> item <span class="sym">:: !</span>l
<span class="line">   23 </span>
<span class="line">   24 </span><span class="kwa">let</span> _ <span class="sym">=
</span><span class="line">   25 </span><span class="sym"></span>  <span class="kwa">let</span> n <span class="sym">=
</span><span class="line">   26 </span><span class="sym"></span>    <span class="kwa">try</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)
</span><span class="line">   27 </span><span class="sym"></span>    <span class="kwa">with</span> Invalid_argument _ <span class="sym">-&gt;</span> <span class="num">1</span> <span class="kwa">in
</span><span class="line">   28 </span><span class="kwa">
</span><span class="line">   29 </span><span class="kwa"></span>  <span class="com">(* create list (A) of integers from 1 through N *)</span>
<span class="line">   30 </span>  <span class="kwa">let</span> a <span class="sym">=</span> ref <span class="sym">(</span>seq n<span class="sym">)
</span><span class="line">   31 </span><span class="sym">
</span><span class="line">   32 </span><span class="sym"></span>  <span class="com">(* create empty list B *)</span>
<span class="line">   33 </span>  <span class="kwa">and</span> b <span class="sym">=</span> ref <span class="sym">[]</span> <span class="kwa">in
</span><span class="line">   34 </span><span class="kwa">
</span><span class="line">   35 </span><span class="kwa"></span>  <span class="com">(* move each individual item from A to B, in a loop, reversing order *)</span>
<span class="line">   36 </span>  <span class="kwa">let rec</span> loop a b <span class="sym">=
</span><span class="line">   37 </span><span class="sym"></span>    <span class="kwa">match</span> <span class="sym">!</span>a <span class="kwa">with
</span><span class="line">   38 </span><span class="kwa"></span>      <span class="sym">[] -&gt; ()
</span><span class="line">   39 </span><span class="sym">    |</span> _ <span class="sym">-&gt;</span> <span class="kwa">begin</span> push_head b <span class="sym">(</span>pop_head a<span class="sym">) ;</span> loop a b <span class="kwa">end
</span><span class="line">   40 </span><span class="kwa">  in</span> loop a b<span class="sym">;
</span><span class="line">   41 </span><span class="sym">
</span><span class="line">   42 </span><span class="sym"></span>  <span class="com">(* print first 2 items in B *)</span>
<span class="line">   43 </span>  printf <span class="str">&quot;%d %d</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>hd <span class="sym">!</span>b<span class="sym">) (</span>hd <span class="sym">(</span>tl <span class="sym">!</span>b<span class="sym">));
</span><span class="line">   44 </span><span class="sym">
</span><span class="line">   45 </span><span class="sym"></span>  <span class="com">(* reverse B (can be done in place) *)</span>
<span class="line">   46 </span>  b <span class="sym">:=</span> rev <span class="sym">!</span>b<span class="sym">;
</span><span class="line">   47 </span><span class="sym">
</span><span class="line">   48 </span><span class="sym"></span>  <span class="com">(* is 0 a member of B? *)</span>
<span class="line">   49 </span>  <span class="kwa">if</span> mem <span class="num">0</span> <span class="sym">!</span>b <span class="kwa">then</span> print_endline <span class="str">&quot;true&quot;</span> <span class="kwa">else</span> print_endline <span class="str">&quot;false&quot;</span><span class="sym">;
</span><span class="line">   50 </span><span class="sym">
</span><span class="line">   51 </span><span class="sym"></span>  <span class="com">(* is N a member of B? *)</span>
<span class="line">   52 </span>  <span class="kwa">if</span> mem n <span class="sym">!</span>b <span class="kwa">then</span> print_endline <span class="str">&quot;true&quot;</span> <span class="kwa">else</span> print_endline <span class="str">&quot;false&quot;</span><span class="sym">;
</span><span class="line">   53 </span><span class="sym">
</span><span class="line">   54 </span><span class="sym"></span>  <span class="com">(* filter values from B to A that are less than N/2, preserving order *)</span>
<span class="line">   55 </span>  <span class="kwa">let</span> mid <span class="sym">=</span> n<span class="sym">/</span><span class="num">2</span> <span class="kwa">in
</span><span class="line">   56 </span><span class="kwa"></span>  a <span class="sym">:=</span> filter <span class="sym">(</span><span class="kwa">fun</span> x <span class="sym">-&gt;</span> x <span class="sym">&lt;</span> mid<span class="sym">) !</span>b<span class="sym">;
</span><span class="line">   57 </span><span class="sym">
</span><span class="line">   58 </span><span class="sym"></span>  <span class="com">(* print first ten items of A *)</span>
<span class="line">   59 </span>  <span class="kwa">let rec</span> print_n n l <span class="sym">=
</span><span class="line">   60 </span><span class="sym"></span>    <span class="kwa">match</span> l <span class="kwa">with
</span><span class="line">   61 </span><span class="kwa"></span>      <span class="sym">[] -&gt; ()
</span><span class="line">   62 </span><span class="sym">    |</span> _ <span class="sym">-&gt;</span> <span class="kwa">if</span> n <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then begin
</span><span class="line">   63 </span><span class="kwa"></span>        printf <span class="str">&quot;%d%s&quot;</span> <span class="sym">(</span>hd l<span class="sym">) (</span><span class="kwa">if</span> n <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span> <span class="str">&quot; &quot;</span> <span class="kwa">else</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">   64 </span><span class="sym"></span>        print_n <span class="sym">(</span>n <span class="num">- 1</span><span class="sym">) (</span>tl l<span class="sym">)
</span><span class="line">   65 </span><span class="sym"></span>    <span class="kwa">end
</span><span class="line">   66 </span><span class="kwa">  in</span> print_n <span class="num">10</span> <span class="sym">!</span>a<span class="sym">;
</span><span class="line">   67 </span><span class="sym">
</span><span class="line">   68 </span><span class="sym"></span>  <span class="com">(* print sum of items in A that are less than 1000 *)</span>
<span class="line">   69 </span>  printf <span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>fold_left <span class="sym">(</span><span class="kwa">fun</span> ac i <span class="sym">-&gt;</span> <span class="kwa">if</span> i <span class="sym">&lt;</span> <span class="num">1000</span> <span class="kwa">then</span> ac <span class="sym">+</span> i <span class="kwa">else</span> ac<span class="sym">)</span> <span class="num">0</span> <span class="sym">!</span>a<span class="sym">);
</span><span class="line">   70 </span><span class="sym">
</span><span class="line">   71 </span><span class="sym"></span>  <span class="com">(* append B to end of A *)</span>
<span class="line">   72 </span>  a <span class="sym">:=</span> append <span class="sym">!</span>a <span class="sym">!</span>b<span class="sym">;
</span><span class="line">   73 </span><span class="sym">
</span><span class="line">   74 </span><span class="sym"></span>  <span class="com">(* print length and last element of A *)</span>
<span class="line">   75 </span>  printf <span class="str">&quot;%d %d</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>length <span class="sym">!</span>a<span class="sym">) (</span>fold_left <span class="sym">(</span><span class="kwa">fun</span> ac i <span class="sym">-&gt;</span> i<span class="sym">)</span> <span class="num">0</span> <span class="sym">!</span>a<span class="sym">);
</span><span class="line">   76 </span><span class="sym"></span>
