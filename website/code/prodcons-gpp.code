<span class="line">    1 </span><span class="slc">// -*- mode: c++ -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// $Id: prodcons-gpp.code,v 1.3 2004-11-11 07:14:03 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="dir">#include &lt;iostream&gt;
</span><span class="line">    6 </span><span class="dir"></span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="line">    7 </span><span class="dir"></span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="line">    8 </span><span class="dir"></span><span class="dir">#include &lt;string.h&gt;
</span><span class="line">    9 </span><span class="dir"></span><span class="dir">#include &lt;unistd.h&gt;
</span><span class="line">   10 </span><span class="dir"></span><span class="dir">#include &lt;signal.h&gt;
</span><span class="line">   11 </span><span class="dir"></span><span class="dir">#include &lt;errno.h&gt;
</span><span class="line">   12 </span><span class="dir"></span><span class="dir">#include &lt;sys/types.h&gt;
</span><span class="line">   13 </span><span class="dir"></span><span class="dir">#include &lt;pthread.h&gt;
</span><span class="line">   14 </span><span class="dir"></span>
<span class="line">   15 </span><span class="kwa">using namespace</span> std<span class="sym">;
</span><span class="line">   16 </span><span class="sym">
</span><span class="line">   17 </span><span class="sym"></span>pthread_mutex_t mutex<span class="sym">;
</span><span class="line">   18 </span><span class="sym"></span>pthread_cond_t control<span class="sym">;
</span><span class="line">   19 </span><span class="sym"></span><span class="kwb">void</span> producer<span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>arg<span class="sym">);
</span><span class="line">   20 </span><span class="sym"></span><span class="kwb">void</span> consumer<span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>arg<span class="sym">);
</span><span class="line">   21 </span><span class="sym"></span><span class="kwb">int</span> pcount<span class="sym">,</span> data<span class="sym">,</span> consumed<span class="sym">,</span> produced<span class="sym">;
</span><span class="line">   22 </span><span class="sym">
</span><span class="line">   23 </span><span class="sym">
</span><span class="line">   24 </span><span class="sym"></span><span class="kwb">int
</span><span class="line">   25 </span><span class="kwb"></span>main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span><span class="line">   26 </span><span class="sym"></span>    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   27 </span><span class="sym"></span>    pthread_t t1<span class="sym">,</span> t2<span class="sym">;
</span><span class="line">   28 </span><span class="sym">
</span><span class="line">   29 </span><span class="sym"></span>    pcount <span class="sym">=</span> data <span class="sym">=</span> consumed <span class="sym">=</span> produced <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   30 </span><span class="sym">
</span><span class="line">   31 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>pthread_mutex_init<span class="sym">(&amp;</span>mutex<span class="sym">,</span> NULL<span class="sym">)) {
</span><span class="line">   32 </span><span class="sym"></span>        perror<span class="sym">(</span><span class="str">&quot;pthread_mutex_init&quot;</span><span class="sym">);
</span><span class="line">   33 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   34 </span><span class="sym">    }
</span><span class="line">   35 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>pthread_cond_init<span class="sym">(&amp;</span>control<span class="sym">,</span> NULL<span class="sym">)) {
</span><span class="line">   36 </span><span class="sym"></span>        perror<span class="sym">(</span><span class="str">&quot;pthread_cond_init&quot;</span><span class="sym">);
</span><span class="line">   37 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   38 </span><span class="sym">    }
</span><span class="line">   39 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>pthread_create<span class="sym">(&amp;</span>t1<span class="sym">, (</span>pthread_attr_t <span class="sym">*)</span>NULL<span class="sym">,
</span><span class="line">   40 </span><span class="sym">                       (</span><span class="kwb">void</span> <span class="sym">* (*)(</span><span class="kwb">void</span> <span class="sym">*))</span>producer<span class="sym">, (</span><span class="kwb">void</span> <span class="sym">*)&amp;</span>n<span class="sym">)) {
</span><span class="line">   41 </span><span class="sym"></span>        perror<span class="sym">(</span><span class="str">&quot;pthread_create&quot;</span><span class="sym">);
</span><span class="line">   42 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   43 </span><span class="sym">    }
</span><span class="line">   44 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>pthread_create<span class="sym">(&amp;</span>t2<span class="sym">, (</span>pthread_attr_t <span class="sym">*)</span>NULL<span class="sym">,
</span><span class="line">   45 </span><span class="sym">                       (</span><span class="kwb">void</span> <span class="sym">* (*)(</span><span class="kwb">void</span> <span class="sym">*))</span>consumer<span class="sym">, (</span><span class="kwb">void</span> <span class="sym">*)&amp;</span>n<span class="sym">)) {
</span><span class="line">   46 </span><span class="sym"></span>        perror<span class="sym">(</span><span class="str">&quot;pthread_create&quot;</span><span class="sym">);
</span><span class="line">   47 </span><span class="sym"></span>        exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   48 </span><span class="sym">    }
</span><span class="line">   49 </span><span class="sym">
</span><span class="line">   50 </span><span class="sym"></span>    pthread_join<span class="sym">(</span>t1<span class="sym">,</span> NULL<span class="sym">);
</span><span class="line">   51 </span><span class="sym"></span>    pthread_join<span class="sym">(</span>t2<span class="sym">,</span> NULL<span class="sym">);
</span><span class="line">   52 </span><span class="sym"></span>    cout <span class="sym">&lt;&lt;</span> produced <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> consumed <span class="sym">&lt;&lt;</span> endl<span class="sym">;
</span><span class="line">   53 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">   54 </span><span class="sym">}
</span><span class="line">   55 </span><span class="sym">
</span><span class="line">   56 </span><span class="sym">
</span><span class="line">   57 </span><span class="sym"></span><span class="kwb">void</span> producer<span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>arg<span class="sym">) {
</span><span class="line">   58 </span><span class="sym"></span>    <span class="kwb">int</span> i<span class="sym">,</span> n <span class="sym">= *</span>arg<span class="sym">;
</span><span class="line">   59 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>n<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   60 </span><span class="sym"></span>        pthread_mutex_lock<span class="sym">(&amp;</span>mutex<span class="sym">);
</span><span class="line">   61 </span><span class="sym"></span>        <span class="kwa">while</span> <span class="sym">(</span>pcount <span class="sym">==</span> <span class="num">1</span><span class="sym">) {
</span><span class="line">   62 </span><span class="sym"></span>            pthread_cond_wait<span class="sym">(&amp;</span>control<span class="sym">, &amp;</span>mutex<span class="sym">);
</span><span class="line">   63 </span><span class="sym">        }
</span><span class="line">   64 </span><span class="sym"></span>        data <span class="sym">=</span> i<span class="sym">;
</span><span class="line">   65 </span><span class="sym"></span>        pcount <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   66 </span><span class="sym"></span>        pthread_cond_signal<span class="sym">(&amp;</span>control<span class="sym">);
</span><span class="line">   67 </span><span class="sym"></span>        pthread_mutex_unlock<span class="sym">(&amp;</span>mutex<span class="sym">);
</span><span class="line">   68 </span><span class="sym"></span>        produced<span class="sym">++;
</span><span class="line">   69 </span><span class="sym">    }
</span><span class="line">   70 </span><span class="sym">}
</span><span class="line">   71 </span><span class="sym">
</span><span class="line">   72 </span><span class="sym">
</span><span class="line">   73 </span><span class="sym"></span><span class="kwb">void</span> consumer<span class="sym">(</span><span class="kwb">int</span> <span class="sym">*</span>arg<span class="sym">) {
</span><span class="line">   74 </span><span class="sym"></span>    <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> n <span class="sym">= *</span>arg<span class="sym">;
</span><span class="line">   75 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">(</span><span class="num">1</span><span class="sym">) {
</span><span class="line">   76 </span><span class="sym"></span>        pthread_mutex_lock<span class="sym">(&amp;</span>mutex<span class="sym">);
</span><span class="line">   77 </span><span class="sym"></span>        <span class="kwa">while</span> <span class="sym">(</span>pcount <span class="sym">==</span> <span class="num">0</span><span class="sym">) {
</span><span class="line">   78 </span><span class="sym"></span>            pthread_cond_wait<span class="sym">(&amp;</span>control<span class="sym">, &amp;</span>mutex<span class="sym">);
</span><span class="line">   79 </span><span class="sym">        }
</span><span class="line">   80 </span><span class="sym"></span>        i <span class="sym">=</span> data<span class="sym">;
</span><span class="line">   81 </span><span class="sym"></span>        pcount <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   82 </span><span class="sym"></span>        pthread_cond_signal<span class="sym">(&amp;</span>control<span class="sym">);
</span><span class="line">   83 </span><span class="sym"></span>        pthread_mutex_unlock<span class="sym">(&amp;</span>mutex<span class="sym">);
</span><span class="line">   84 </span><span class="sym"></span>        consumed<span class="sym">++;
</span><span class="line">   85 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">==</span> n<span class="sym">)</span> <span class="kwa">return</span><span class="sym">;
</span><span class="line">   86 </span><span class="sym">    }
</span><span class="line">   87 </span><span class="sym">}
</span><span class="line">   88 </span><span class="sym"></span>
