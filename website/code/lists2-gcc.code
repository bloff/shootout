<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">/* -*- mode: c -*-
 * $Id: lists2-gcc.code,v 1.2 2004-11-08 08:15:15 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 */</FONT></I>

#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;stdio.h&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;stdlib.h&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;string.h&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;unistd.h&gt;</FONT></B>

<I><FONT COLOR="#B22222">// a simple Double Linked List
</FONT></I><I><FONT COLOR="#B22222">// the head node is special, it's val is length of list
</FONT></I><B><FONT COLOR="#228B22">typedef</FONT></B> <B><FONT COLOR="#228B22">struct</FONT></B> DLL {
    <B><FONT COLOR="#228B22">int</FONT></B> val;
    <B><FONT COLOR="#228B22">struct</FONT></B> DLL *next;	<I><FONT COLOR="#B22222">/* points to next or head (if at tail) */</FONT></I>
    <B><FONT COLOR="#228B22">struct</FONT></B> DLL *prev;	<I><FONT COLOR="#B22222">/* points to prev or tail (if at head) */</FONT></I>
} DLL;

inline <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#0000FF">list_length</FONT></B>(DLL *head) { <B><FONT COLOR="#A020F0">return</FONT></B>(head-&gt;val); }
inline <B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#0000FF">list_empty</FONT></B>(DLL *head) { <B><FONT COLOR="#A020F0">return</FONT></B>(list_length(head) == 0); }
inline DLL *<B><FONT COLOR="#0000FF">list_first</FONT></B>(DLL *head) { <B><FONT COLOR="#A020F0">return</FONT></B>(head-&gt;next); }
inline DLL *<B><FONT COLOR="#0000FF">list_last</FONT></B>(DLL *head) { <B><FONT COLOR="#A020F0">return</FONT></B>(head-&gt;prev); }

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">list_push_tail</FONT></B>(DLL *head, DLL *item) {
    DLL *tail = head-&gt;prev;
    tail-&gt;next = item;
    item-&gt;next = head;
    head-&gt;prev = item;
    item-&gt;prev = tail;
    head-&gt;val++;
}

DLL *<B><FONT COLOR="#0000FF">list_pop_tail</FONT></B>(DLL *head) {
    DLL *prev, *tail;
    <B><FONT COLOR="#A020F0">if</FONT></B> (list_empty(head)) <B><FONT COLOR="#A020F0">return</FONT></B>(NULL);
    tail = head-&gt;prev;
    prev = tail-&gt;prev;
    prev-&gt;next = head;
    head-&gt;prev = prev;
    head-&gt;val--;
    <B><FONT COLOR="#A020F0">return</FONT></B>(tail);
}

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">list_push_head</FONT></B>(DLL *head, DLL *item) {
    DLL *next = head-&gt;next;
    head-&gt;next = item;
    next-&gt;prev = item;
    item-&gt;next = next;
    item-&gt;prev = head;
    head-&gt;val++;
}

DLL *<B><FONT COLOR="#0000FF">list_pop_head</FONT></B>(DLL *head) {
    DLL *next;
    <B><FONT COLOR="#A020F0">if</FONT></B> (list_empty(head)) <B><FONT COLOR="#A020F0">return</FONT></B>(NULL);
    next = head-&gt;next;
    head-&gt;next = next-&gt;next;
    next-&gt;next-&gt;prev = head;
    head-&gt;val--;
    <B><FONT COLOR="#A020F0">return</FONT></B>(next);
}

DLL *<B><FONT COLOR="#0000FF">list_new_item</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> v) {
    DLL *l = (DLL *)malloc(<B><FONT COLOR="#A020F0">sizeof</FONT></B>(DLL));
    l-&gt;next = l;
    l-&gt;prev = l;
    l-&gt;val = v;
    <B><FONT COLOR="#A020F0">return</FONT></B>(l);
}

inline DLL* <B><FONT COLOR="#0000FF">list_create</FONT></B>()  { <B><FONT COLOR="#A020F0">return</FONT></B>(list_new_item(0)); }

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">dump_list</FONT></B>(<B><FONT COLOR="#228B22">char</FONT></B> *msg, DLL *x) {
    DLL *xp = NULL, *first = list_first(x);
    <B><FONT COLOR="#228B22">int</FONT></B> i = 0, len = list_length(x);
    fputs(msg, stdout);
    printf(<B><FONT COLOR="#BC8F8F">&quot;length: %d\n&quot;</FONT></B>, len);
    <B><FONT COLOR="#A020F0">if</FONT></B> (len &gt; 0) {
	<B><FONT COLOR="#A020F0">for</FONT></B> (xp=x-&gt;next; xp-&gt;next != first; xp=xp-&gt;next) {
	    printf(<B><FONT COLOR="#BC8F8F">&quot;i:%3d  v:%3d  n:%3d  p:%3d\n&quot;</FONT></B>, ++i,
		   xp-&gt;val, xp-&gt;next-&gt;val, xp-&gt;prev-&gt;val);
	}
	printf(<B><FONT COLOR="#BC8F8F">&quot;[val of next of tail is:  %d]\n\n&quot;</FONT></B>, xp-&gt;next-&gt;val);
    }
    <I><FONT COLOR="#B22222">// printf(&quot;[last entry points to list head]\n&quot;);
</FONT></I>}

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">print_list</FONT></B>(<B><FONT COLOR="#228B22">char</FONT></B> *msg, DLL *x) {
    DLL *xp = NULL, *first = list_first(x);
    <B><FONT COLOR="#228B22">int</FONT></B> i = 0;
    fputs(msg, stdout);
    <B><FONT COLOR="#A020F0">if</FONT></B> (list_length(x) &gt; 0) {
	<B><FONT COLOR="#A020F0">for</FONT></B> (xp=x-&gt;next; xp-&gt;next != first; xp=xp-&gt;next) {
	    printf(<B><FONT COLOR="#BC8F8F">&quot;%d &quot;</FONT></B>, xp-&gt;val);
	}
    }
    printf(<B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>);
}

<B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#0000FF">main</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> argc, <B><FONT COLOR="#228B22">char</FONT></B> *argv[]) {
    <B><FONT COLOR="#228B22">int</FONT></B> i, n = ((argc == 2) ? atoi(argv[1]) : 1);
    DLL *p, *A, *B;

    <I><FONT COLOR="#B22222">// create a list of integers (li1) from 1 to N
</FONT></I>    A = list_create();
    <B><FONT COLOR="#A020F0">for</FONT></B> (i=n; i&gt;0; i--) {
	list_push_head(A, list_new_item(i));
    }
    B = list_create();

    <B><FONT COLOR="#A020F0">while</FONT></B> (!list_empty(A)) {
	list_push_tail(B, list_pop_head(A));
	list_push_tail(B, list_pop_tail(A));
    }
    <B><FONT COLOR="#A020F0">while</FONT></B> (!list_empty(B)) {
	list_push_head(A, list_pop_tail(B));
	list_push_head(A, list_pop_head(B));
    }
    printf(<B><FONT COLOR="#BC8F8F">&quot;%d\n&quot;</FONT></B>, list_length(A));
    <B><FONT COLOR="#A020F0">for</FONT></B> (i=0, p=list_first(A); p != list_last(A) &amp;&amp; i&lt;10; i++, p=p-&gt;next) {
	printf(<B><FONT COLOR="#BC8F8F">&quot;%d%s&quot;</FONT></B>, p-&gt;val, (i&lt;9) ? <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> : <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>);
    }
    <B><FONT COLOR="#A020F0">return</FONT></B> 0;
}</pre></td></tr></table>
