<span class="com">/* -*- mode: c -*-
 * $Id: wc-icc.code,v 1.8 2005-09-25 23:29:43 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 *
 * Author: Waldemar Hebisch (hebisch&#64;math.uni.wroc.pl)
 * Optimizations: Michael Herf (mike&#64;herfconsulting.com)
 * Further Revisions: Paul Hsieh (qed&#64;pobox.com)
 */</span>

<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;unistd.h&gt;
</span><span class="dir">#include &lt;limits.h&gt;
</span>
<span class="dir">#define BSIZ 4096
</span>
<span class="kwb">unsigned long</span> ws<span class="sym">[</span>UCHAR_MAX <span class="sym">+</span> <span class="num">1</span><span class="sym">];
</span><span class="kwb">unsigned long</span> nws<span class="sym">[</span>UCHAR_MAX <span class="sym">+</span> <span class="num">1</span><span class="sym">];
</span><span class="kwb">char</span> buff<span class="sym">[</span>BSIZ<span class="sym">];

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">void</span><span class="sym">) {
</span>    <span class="kwb">unsigned long</span> prev_nws <span class="sym">=</span> <span class="num">0x10000L</span><span class="sym">,</span> w_cnt <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> l_cnt <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> b_cnt <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> cnt<span class="sym">;

</span>    <span class="com">/* Fill tables */</span>
    <span class="kwa">for</span> <span class="sym">(</span>cnt <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> cnt <span class="sym">&lt;=</span> UCHAR_MAX<span class="sym">;</span> cnt<span class="sym">++) {
</span>         ws<span class="sym">[</span>cnt<span class="sym">] =  (</span>cnt <span class="sym">==</span> <span class="str">' '</span> <span class="sym">||</span> cnt <span class="sym">==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span> <span class="sym">||</span> cnt <span class="sym">==</span> <span class="str">'</span><span class="esc">\t</span><span class="str">'</span><span class="sym">) + (</span><span class="num">0x10000L</span> <span class="sym">&amp; -(</span>cnt <span class="sym">==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">));
</span>	nws<span class="sym">[</span>cnt<span class="sym">] = !(</span>cnt <span class="sym">==</span> <span class="str">' '</span> <span class="sym">||</span> cnt <span class="sym">==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span> <span class="sym">||</span> cnt <span class="sym">==</span> <span class="str">'</span><span class="esc">\t</span><span class="str">'</span><span class="sym">) +</span>  <span class="num">0x10000L</span><span class="sym">;
    }


</span>    <span class="com">/* Main loop */</span>
    <span class="kwa">while</span> <span class="sym">(</span><span class="num">0</span> <span class="sym">!= (</span>cnt <span class="sym">=</span> read <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> buff<span class="sym">,</span> BSIZ<span class="sym">))) {
</span>        <span class="kwb">unsigned long</span> vect_count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>	<span class="kwb">unsigned char</span> <span class="sym">*</span>pp<span class="sym">, *</span>pe<span class="sym">;

</span>	b_cnt <span class="sym">+=</span> cnt<span class="sym">;
</span>	pe <span class="sym">=</span> buff <span class="sym">+</span> cnt<span class="sym">;
</span>	pp <span class="sym">=</span> buff<span class="sym">;

</span>	<span class="kwa">while</span> <span class="sym">(</span>pp <span class="sym">&lt;</span> pe<span class="sym">) {
</span>	    vect_count <span class="sym">+=</span>  ws<span class="sym">[*</span>pp<span class="sym">] &amp;</span> prev_nws<span class="sym">;
</span>	    prev_nws    <span class="sym">=</span> nws<span class="sym">[*</span>pp<span class="sym">];
</span>	    pp <span class="sym">++;
	}
</span>	w_cnt <span class="sym">+=</span> vect_count  <span class="sym">&amp;</span> <span class="num">0xFFFFL</span><span class="sym">;
</span>	l_cnt <span class="sym">+=</span> vect_count <span class="sym">&gt;&gt;</span> <span class="num">16</span><span class="sym">;
    }

</span>    w_cnt <span class="sym">+=</span> <span class="num">1</span> <span class="sym">&amp;</span> prev_nws<span class="sym">;

</span>    printf <span class="sym">(</span><span class="str">&quot;%d %d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> l_cnt<span class="sym">,</span> w_cnt<span class="sym">,</span> b_cnt<span class="sym">);
</span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}</span>
