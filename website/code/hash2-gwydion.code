<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
module:         hash2
synopsis:       implementation of <B><FONT COLOR="#BC8F8F">&quot;Hashes, Part II&quot;</FONT></B> benchmark
author:         Peter Hinely
copyright:      public <B><FONT COLOR="#5F9EA0">domain</FONT></B>
use-libraries:  common-dylan, table-extensions, format-out
use-modules:    common-dylan, table-extensions, format-out


<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B> <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">main </FONT></I></B></FONT></B>() <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">=&gt;</FONT></I></B></FONT></B> ()
  <B><FONT COLOR="#A020F0">let</FONT></B> arg = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">string-to-integer</FONT></I></B></FONT></B>(<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">element</FONT></I></B></FONT></B>(<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">application-arguments</FONT></I></B></FONT></B>(), 0, <B><FONT COLOR="#5F9EA0">default:</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;1&quot;</FONT></B>));

  <B><FONT COLOR="#A020F0">let</FONT></B> table1 = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">make</FONT></I></B></FONT></B>(<B><FONT COLOR="#228B22">&lt;case-insensitive-string-table&gt;</FONT></B>);
  <B><FONT COLOR="#A020F0">let</FONT></B> table2 = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">make</FONT></I></B></FONT></B>(<B><FONT COLOR="#228B22">&lt;case-insensitive-string-table&gt;</FONT></B>);

  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">for </FONT></I></B></FONT></B>(i <B><FONT COLOR="#A020F0">from</FONT></B> 0 <B><FONT COLOR="#A020F0">below</FONT></B> 10000)
    table1[<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">concatenate</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;foo_&quot;</FONT></B>, <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">integer-to-string</FONT></I></B></FONT></B>(i))] <B><FONT COLOR="#5F9EA0">:</FONT></B>= i;
  <B><FONT COLOR="#A020F0">end</FONT></B>;

  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">for </FONT></I></B></FONT></B>(i <B><FONT COLOR="#A020F0">from</FONT></B> 0 <B><FONT COLOR="#A020F0">below</FONT></B> arg)
    <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">for </FONT></I></B></FONT></B>(value <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;integer&gt;</FONT></B> keyed-by key <B><FONT COLOR="#A020F0">in</FONT></B> table1)
      <B><FONT COLOR="#A020F0">let</FONT></B> found <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;integer&gt;</FONT></B> = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">element</FONT></I></B></FONT></B>(table2, key, <B><FONT COLOR="#5F9EA0">default:</FONT></B> 0);
      table2[key] <B><FONT COLOR="#5F9EA0">:</FONT></B>= found + value;
    <B><FONT COLOR="#A020F0">end</FONT></B>;
  <B><FONT COLOR="#A020F0">end</FONT></B>;

  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">format-out</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;%d %d %d %d\n&quot;</FONT></B>, table1[<B><FONT COLOR="#BC8F8F">&quot;foo_1&quot;</FONT></B>], table1[<B><FONT COLOR="#BC8F8F">&quot;foo_9999&quot;</FONT></B>], table2[<B><FONT COLOR="#BC8F8F">&quot;foo_1&quot;</FONT></B>], table2[<B><FONT COLOR="#BC8F8F">&quot;foo_9999&quot;</FONT></B>]);
<B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B>;


<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">main</FONT></I></B></FONT></B>();</pre></td></tr></table>
