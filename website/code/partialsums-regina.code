<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Based on D language implementation by Dave Fladebo                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Use of C library routines [requires interpreter GCI activation else*/</span>
<span class="com">/* runtime error occurs]                                              */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

<span class="kwa">numeric digits</span> <span class="num">18</span>

<span class="com">/* ----------------------------- */</span>

<span class="kwa">call</span> initSqrt <span class="sym">;</span> <span class="kwa">call</span> initSin <span class="sym">;</span> <span class="kwa">call</span> initCos

<span class="com">/* ----------------------------- */</span>

N <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> <span class="kwa">if</span> <span class="kwb">DATATYPE</span><span class="sym">(</span>N<span class="sym">)</span> \<span class="sym">=</span> <span class="str">'NUM'</span> <span class="sym">|</span> N <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> <span class="sym">;</span> N <span class="sym">=</span> <span class="num">1</span>

<span class="kwb">SPACE</span> <span class="sym">=</span> <span class="str">&quot; &quot;</span> <span class="sym">;</span> SUM. <span class="sym">=</span> <span class="num">0.0</span> <span class="sym">;</span> SUM<span class="num">.0</span> <span class="sym">=</span> <span class="num">9</span> <span class="sym">;</span> ALT <span class="sym">=</span> <span class="num">1</span>

<span class="kwa">do</span> D <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> N
  D2 <span class="sym">=</span> D <span class="sym">*</span> D <span class="sym">;</span> D3 <span class="sym">=</span> D2 <span class="sym">*</span> D <span class="sym">;</span> DS <span class="sym">=</span> SIN<span class="sym">(</span>D<span class="sym">) ;</span> DC <span class="sym">=</span> COS<span class="sym">(</span>D<span class="sym">)</span>

  SUM<span class="num">.1</span> <span class="sym">=</span> SUM<span class="num">.1</span> <span class="sym">+ (</span><span class="num">2</span> <span class="sym">/</span> <span class="num">3</span><span class="sym">) ** (</span>D <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
  SUM<span class="num">.2</span> <span class="sym">=</span> SUM<span class="num">.2</span> <span class="sym">+</span> <span class="num">1</span> <span class="sym">/</span> SQRT<span class="sym">(</span>D<span class="sym">)</span>
  SUM<span class="num">.3</span> <span class="sym">=</span> SUM<span class="num">.3</span> <span class="sym">+</span> <span class="num">1</span> <span class="sym">/ (</span>D <span class="sym">* (</span>D <span class="sym">+</span> <span class="num">1</span><span class="sym">))</span>
  SUM<span class="num">.4</span> <span class="sym">=</span> SUM<span class="num">.4</span> <span class="sym">+</span> <span class="num">1</span> <span class="sym">/ (</span>D3 <span class="sym">*</span> DS <span class="sym">*</span> DS<span class="sym">)</span>
  SUM<span class="num">.5</span> <span class="sym">=</span> SUM<span class="num">.5</span> <span class="sym">+</span> <span class="num">1</span> <span class="sym">/ (</span>D3 <span class="sym">*</span> DC <span class="sym">*</span> DC<span class="sym">)</span>
  SUM<span class="num">.6</span> <span class="sym">=</span> SUM<span class="num">.6</span> <span class="sym">+</span> <span class="num">1</span> <span class="sym">/</span> D
  SUM<span class="num">.7</span> <span class="sym">=</span> SUM<span class="num">.7</span> <span class="sym">+</span> <span class="num">1</span> <span class="sym">/</span> D2
  SUM<span class="num">.8</span> <span class="sym">=</span> SUM<span class="num">.8</span> <span class="sym">+</span> ALT <span class="sym">/</span> D
  SUM<span class="num">.9</span> <span class="sym">=</span> SUM<span class="num">.9</span> <span class="sym">+</span> ALT <span class="sym">/ (</span><span class="num">2</span> <span class="sym">*</span> D <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>

  ALT <span class="sym">= -</span>ALT
<span class="kwa">end</span>

<span class="kwa">say</span> <span class="kwb">LEFT</span><span class="sym">(</span><span class="kwb">FORMAT</span><span class="sym">(</span>SUM<span class="num">.1</span><span class="sym">,,</span> <span class="num">9</span><span class="sym">),</span> <span class="num">16</span><span class="sym">,</span> <span class="kwb">SPACE</span><span class="sym">) ||</span> <span class="str">&quot;(2/3)^k&quot;</span>
<span class="kwa">say</span> <span class="kwb">LEFT</span><span class="sym">(</span><span class="kwb">FORMAT</span><span class="sym">(</span>SUM<span class="num">.2</span><span class="sym">,,</span> <span class="num">9</span><span class="sym">),</span> <span class="num">16</span><span class="sym">,</span> <span class="kwb">SPACE</span><span class="sym">) ||</span> <span class="str">&quot;k^-0.5&quot;</span>
<span class="kwa">say</span> <span class="kwb">LEFT</span><span class="sym">(</span><span class="kwb">FORMAT</span><span class="sym">(</span>SUM<span class="num">.3</span><span class="sym">,,</span> <span class="num">9</span><span class="sym">),</span> <span class="num">16</span><span class="sym">,</span> <span class="kwb">SPACE</span><span class="sym">) ||</span> <span class="str">&quot;1/k(k+1)&quot;</span>
<span class="kwa">say</span> <span class="kwb">LEFT</span><span class="sym">(</span><span class="kwb">FORMAT</span><span class="sym">(</span>SUM<span class="num">.4</span><span class="sym">,,</span> <span class="num">9</span><span class="sym">),</span> <span class="num">16</span><span class="sym">,</span> <span class="kwb">SPACE</span><span class="sym">) ||</span> <span class="str">&quot;Flint Hills&quot;</span>
<span class="kwa">say</span> <span class="kwb">LEFT</span><span class="sym">(</span><span class="kwb">FORMAT</span><span class="sym">(</span>SUM<span class="num">.5</span><span class="sym">,,</span> <span class="num">9</span><span class="sym">),</span> <span class="num">16</span><span class="sym">,</span> <span class="kwb">SPACE</span><span class="sym">) ||</span> <span class="str">&quot;Cookson Hills&quot;</span>
<span class="kwa">say</span> <span class="kwb">LEFT</span><span class="sym">(</span><span class="kwb">FORMAT</span><span class="sym">(</span>SUM<span class="num">.6</span><span class="sym">,,</span> <span class="num">9</span><span class="sym">),</span> <span class="num">16</span><span class="sym">,</span> <span class="kwb">SPACE</span><span class="sym">) ||</span> <span class="str">&quot;Harmonic&quot;</span>
<span class="kwa">say</span> <span class="kwb">LEFT</span><span class="sym">(</span><span class="kwb">FORMAT</span><span class="sym">(</span>SUM<span class="num">.7</span><span class="sym">,,</span> <span class="num">9</span><span class="sym">),</span> <span class="num">16</span><span class="sym">,</span> <span class="kwb">SPACE</span><span class="sym">) ||</span> <span class="str">&quot;Riemann Zeta&quot;</span>
<span class="kwa">say</span> <span class="kwb">LEFT</span><span class="sym">(</span><span class="kwb">FORMAT</span><span class="sym">(</span>SUM<span class="num">.8</span><span class="sym">,,</span> <span class="num">9</span><span class="sym">),</span> <span class="num">16</span><span class="sym">,</span> <span class="kwb">SPACE</span><span class="sym">) ||</span> <span class="str">&quot;Alternating Harmonic&quot;</span>
<span class="kwa">say</span> <span class="kwb">LEFT</span><span class="sym">(</span><span class="kwb">FORMAT</span><span class="sym">(</span>SUM<span class="num">.9</span><span class="sym">,,</span> <span class="num">9</span><span class="sym">),</span> <span class="num">16</span><span class="sym">,</span> <span class="kwb">SPACE</span><span class="sym">) ||</span> <span class="str">&quot;Gregory&quot;</span>

<span class="kwa">exit</span> <span class="num">0</span>

<span class="com">/* ----------------------------- */</span>

initSqrt <span class="sym">:</span> <span class="kwa">procedure</span>
  sqrt.calltype <span class="sym">=</span> <span class="str">'cdecl as function with parameters'</span>
  sqrt.<span class="kwa">return</span>.type <span class="sym">=</span> <span class="str">'float64'</span>
  sqrt.<span class="kwa">return</span>.<span class="kwa">name</span> <span class="sym">=</span> <span class="str">'return value'</span>

  sqrt<span class="num">.0</span> <span class="sym">=</span> <span class="num">1</span>

  sqrt<span class="num">.1</span>.type <span class="sym">=</span> <span class="str">'float64'</span>
  sqrt<span class="num">.1</span>.<span class="kwa">name</span> <span class="sym">=</span> <span class="str">'number'</span>

  LIBRARY <span class="sym">=</span> <span class="str">'libm.so.6'</span> <span class="sym">;</span> <span class="kwa">parse source</span> SYSTEM . .
  <span class="kwa">if</span> SYSTEM <span class="sym">==</span> <span class="str">&quot;WIN32&quot;</span> <span class="kwa">then</span> <span class="sym">;</span> LIBRARY <span class="sym">=</span> <span class="str">'msvcrt'</span>

  err <span class="sym">=</span> rxFuncDefine<span class="sym">(</span><span class="str">'sqrt'</span><span class="sym">,</span> LIBRARY<span class="sym">,</span> <span class="str">'sqrt'</span><span class="sym">,</span> <span class="str">'sqrt.'</span><span class="sym">)</span>

  <span class="kwa">if</span> err \<span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span>
    <span class="kwa">say</span> <span class="str">&quot;Error registering function 'sqrt'&quot;</span>

  <span class="kwa">return</span>

<span class="com">/* ----------------------------- */</span>

initSin <span class="sym">:</span> <span class="kwa">procedure</span>
  sin.calltype <span class="sym">=</span> <span class="str">'cdecl as function with parameters'</span>
  sin.<span class="kwa">return</span>.type <span class="sym">=</span> <span class="str">'float64'</span>
  sin.<span class="kwa">return</span>.<span class="kwa">name</span> <span class="sym">=</span> <span class="str">'return value'</span>

  sin<span class="num">.0</span> <span class="sym">=</span> <span class="num">1</span>

  sin<span class="num">.1</span>.type <span class="sym">=</span> <span class="str">'float64'</span>
  sin<span class="num">.1</span>.<span class="kwa">name</span> <span class="sym">=</span> <span class="str">'number'</span>

  LIBRARY <span class="sym">=</span> <span class="str">'libm.so.6'</span> <span class="sym">;</span> <span class="kwa">parse source</span> SYSTEM . .
  <span class="kwa">if</span> SYSTEM <span class="sym">==</span> <span class="str">&quot;WIN32&quot;</span> <span class="kwa">then</span> <span class="sym">;</span> LIBRARY <span class="sym">=</span> <span class="str">'msvcrt'</span>

  err <span class="sym">=</span> rxFuncDefine<span class="sym">(</span><span class="str">'sin'</span><span class="sym">,</span> LIBRARY<span class="sym">,</span> <span class="str">'sin'</span><span class="sym">,</span> <span class="str">'sin.'</span><span class="sym">)</span>

  <span class="kwa">if</span> err \<span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span>
    <span class="kwa">say</span> <span class="str">&quot;Error registering function 'sin'&quot;</span>

  <span class="kwa">return</span>

<span class="com">/* ----------------------------- */</span>

initCos <span class="sym">:</span> <span class="kwa">procedure</span>
  cos.calltype <span class="sym">=</span> <span class="str">'cdecl as function with parameters'</span>
  cos.<span class="kwa">return</span>.type <span class="sym">=</span> <span class="str">'float64'</span>
  cos.<span class="kwa">return</span>.<span class="kwa">name</span> <span class="sym">=</span> <span class="str">'return value'</span>

  cos<span class="num">.0</span> <span class="sym">=</span> <span class="num">1</span>

  cos<span class="num">.1</span>.type <span class="sym">=</span> <span class="str">'float64'</span>
  cos<span class="num">.1</span>.<span class="kwa">name</span> <span class="sym">=</span> <span class="str">'number'</span>

  LIBRARY <span class="sym">=</span> <span class="str">'libm.so.6'</span> <span class="sym">;</span> <span class="kwa">parse source</span> SYSTEM . .
  <span class="kwa">if</span> SYSTEM <span class="sym">==</span> <span class="str">&quot;WIN32&quot;</span> <span class="kwa">then</span> <span class="sym">;</span> LIBRARY <span class="sym">=</span> <span class="str">'msvcrt'</span>

  err <span class="sym">=</span> rxFuncDefine<span class="sym">(</span><span class="str">'cos'</span><span class="sym">,</span> LIBRARY<span class="sym">,</span> <span class="str">'cos'</span><span class="sym">,</span> <span class="str">'cos.'</span><span class="sym">)</span>

  <span class="kwa">if</span> err \<span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span>
    <span class="kwa">say</span> <span class="str">&quot;Error registering function 'cos'&quot;</span>

  <span class="kwa">return</span>

