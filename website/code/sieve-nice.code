<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){</span>
   var n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

   <span class="kwa">let</span> start <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span>
   <span class="kwa">let</span> stop <span class="sym">=</span> <span class="num">8192</span><span class="sym">;</span>
   <span class="kwa">let</span> isPrime <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">boolean</span><span class="sym">[</span>stop<span class="sym">+</span><span class="num">1</span><span class="sym">];</span>
   var count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

   <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">){</span>
      count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">for</span><span class="sym">(</span>var i<span class="sym">=</span>start<span class="sym">;</span> i <span class="sym">&lt;=</span> stop<span class="sym">;</span> i<span class="sym">++)</span> isPrime<span class="sym">[</span>i<span class="sym">] =</span> true<span class="sym">;</span>
      <span class="kwa">for</span><span class="sym">(</span>var i<span class="sym">=</span>start<span class="sym">;</span> i <span class="sym">&lt;=</span> stop<span class="sym">;</span> i<span class="sym">++)</span>
         <span class="kwa">if</span><span class="sym">(</span>isPrime<span class="sym">[</span>i<span class="sym">]) {</span>
             <span class="slc">// remove all multiples of prime: i</span>
            <span class="kwa">for</span><span class="sym">(</span>var k<span class="sym">=</span>i<span class="sym">+</span>i<span class="sym">;</span> k <span class="sym">&lt;=</span> stop<span class="sym">;</span> k<span class="sym">+=</span>i<span class="sym">)</span> isPrime<span class="sym">[</span>k<span class="sym">] =</span> false<span class="sym">;</span>
            count<span class="sym">++;</span>
         <span class="sym">}</span>
   <span class="sym">}</span>

   println<span class="sym">(</span><span class="str">&quot;Count: &quot;</span> <span class="sym">+</span> count<span class="sym">);</span>
<span class="sym">}</span>
