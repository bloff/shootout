<span class="kwb">module</span><span class="sym">:</span>         spellcheck
<span class="kwb">synopsis</span><span class="sym">:</span>       implementation of <span class="str">&quot;Spell Checker&quot;</span> benchmark
<span class="kwb">author</span><span class="sym">:</span>         Peter Hinely
<span class="kwb">copyright</span><span class="sym">:</span>      public <span class="kwa">domain</span>
<span class="kwa">use</span><span class="sym">-</span>libraries<span class="sym">:</span>  common<span class="sym">-</span>dylan<span class="sym">,</span> io<span class="sym">,</span> table<span class="sym">-</span>extensions<span class="sym">,</span> format<span class="sym">-</span>out
<span class="kwa">use</span><span class="sym">-</span>modules<span class="sym">:</span>    common<span class="sym">-</span>dylan<span class="sym">,</span> standard<span class="sym">-</span>io<span class="sym">,</span> streams<span class="sym">,</span> table<span class="sym">-</span>extensions<span class="sym">,</span> format<span class="sym">-</span>out


<span class="kwa">define function</span> <span class="kwd">spellcheck</span> <span class="sym">() =</span>&gt; <span class="sym">()</span>
  <span class="kwa">let</span> dictionary <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(</span><span class="kwa">&lt;case-insensitive-string-table&gt;</span><span class="sym">);</span>

  with<span class="sym">-</span><span class="kwa">open</span><span class="sym">-</span><span class="kwd">file</span> <span class="sym">(</span>file <span class="sym">=</span> <span class="str">&quot;Usr.Dict.Words&quot;</span><span class="sym">)</span>
    <span class="kwa">let</span> line <span class="sym">=</span> #f<span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span>line <span class="sym">:=</span> read<span class="sym">-</span><span class="kwd">line</span><span class="sym">(</span>file<span class="sym">,</span> on<span class="sym">-</span><span class="kwa">end</span><span class="sym">-</span>of<span class="sym">-</span>stream<span class="sym">:</span> #f<span class="sym">))</span>
      dictionary<span class="sym">[</span>line<span class="sym">] :=</span> #t<span class="sym">;</span>
    <span class="kwa">end while</span><span class="sym">;</span>
  <span class="kwa">end</span> with<span class="sym">-</span><span class="kwa">open</span><span class="sym">-</span>file<span class="sym">;</span>

  <span class="kwa">let</span> word<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>check <span class="sym">=</span> #f<span class="sym">;</span>

  <span class="kwa">while</span> <span class="sym">(</span>word<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>check <span class="sym">:=</span> read<span class="sym">-</span><span class="kwd">line</span><span class="sym">(*</span>standard<span class="sym">-</span>input<span class="sym">*,</span> on<span class="sym">-</span><span class="kwa">end</span><span class="sym">-</span>of<span class="sym">-</span>stream<span class="sym">:</span> #f<span class="sym">))</span>
    <span class="kwa">unless</span> <span class="sym">(</span><span class="kwd">element</span><span class="sym">(</span>dictionary<span class="sym">,</span> word<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>check<span class="sym">,</span> default<span class="sym">:</span> #f<span class="sym">))</span>
      format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> word<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>check<span class="sym">);</span>
    <span class="kwa">end</span><span class="sym">;</span>
  <span class="kwa">end while</span><span class="sym">;</span>
<span class="kwa">end function</span><span class="sym">;</span>


<span class="kwd">spellcheck</span><span class="sym">();</span>
