<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- contributed by Marius Amado Alves
</span>
<span class="kwa">with</span> Ada.Characters.Handling<span class="sym">;
</span><span class="kwa">with</span> Ada.Characters.Latin_1<span class="sym">;
</span><span class="kwa">with</span> Ada.Command_Line<span class="sym">;
</span><span class="kwa">with</span> Ada.Streams<span class="sym">;
</span><span class="kwa">with</span> Ada.Streams.Stream_IO<span class="sym">;
</span><span class="kwa">with</span> Ada.Strings.Fixed<span class="sym">;
</span><span class="kwa">with</span> Ada.Text_IO<span class="sym">;
</span><span class="kwa">with</span> Ada.Text_IO.Text_Streams<span class="sym">;

</span><span class="kwa">procedure</span> Wc <span class="kwa">is

    use</span> Ada.Characters.Handling<span class="sym">;
</span>    <span class="kwa">use</span> Ada.Characters.Latin_1<span class="sym">;
</span>    <span class="kwa">use</span> Ada.Command_Line<span class="sym">;
</span>    <span class="kwa">use</span> Ada.Streams<span class="sym">;
</span>    <span class="kwa">use</span> Ada.Streams.Stream_IO<span class="sym">;
</span>    <span class="kwa">use</span> Ada.Text_IO<span class="sym">;
</span>    <span class="kwa">use</span> Ada.Text_IO.Text_Streams<span class="sym">;

</span>    Buffer <span class="sym">:</span> Stream_Element_Array <span class="sym">(</span><span class="num">1</span> .. <span class="num">4096</span><span class="sym">);
</span>    Input_Stream <span class="sym">:</span> Ada.Text_IO.Text_Streams.Stream_Access
      <span class="sym">:=</span> Ada.Text_IO.Text_Streams.Stream <span class="sym">(</span>Current_Input<span class="sym">);
</span>    EOL_Character_Pos <span class="sym">:</span> Stream_Element <span class="sym">:=</span> <span class="kwb">Character</span><span class="sym">'</span>Pos <span class="sym">(</span>LF<span class="sym">);
</span>    Lines <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>    Words <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>    Total <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>    In_Word <span class="sym">:</span> <span class="kwb">Boolean</span> <span class="sym">:=</span> False<span class="sym">;
</span>    N <span class="sym">:</span> Stream_Element_Offset<span class="sym">;
</span>    Is_Separator <span class="sym">:</span> <span class="kwa">array</span> <span class="sym">(</span>Stream_Element<span class="sym">)</span> <span class="kwa">of</span> <span class="kwb">Boolean</span> <span class="sym">:=
      (</span><span class="num">0</span> .. <span class="num">32</span> <span class="sym">|</span> <span class="num">127</span> .. <span class="num">159</span> <span class="sym">=&gt;</span> True<span class="sym">,</span> <span class="kwa">others</span> <span class="sym">=&gt;</span> False<span class="sym">);

</span>    <span class="kwa">procedure</span> Begin_Word <span class="kwa">is
    begin
</span>       Words <span class="sym">:=</span> Words <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>       In_Word <span class="sym">:=</span> True<span class="sym">;
</span>    <span class="kwa">end</span><span class="sym">;

</span>    <span class="kwa">procedure</span> End_Word <span class="kwa">is
    begin
</span>       In_Word <span class="sym">:=</span> False<span class="sym">;
</span>    <span class="kwa">end</span><span class="sym">;

</span>    <span class="kwa">procedure</span> End_Line <span class="kwa">is
    begin
</span>       Lines <span class="sym">:=</span> Lines <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>       End_Word<span class="sym">;
</span>    <span class="kwa">end</span><span class="sym">;

</span>    <span class="kwa">procedure</span> Count_Words <span class="sym">(</span>S <span class="sym">:</span> <span class="kwa">in</span> Stream_Element_Array<span class="sym">)</span> <span class="kwa">is
    begin
</span>       Total <span class="sym">:=</span> Total <span class="sym">+</span> S<span class="sym">'</span>Length<span class="sym">;
</span>       <span class="kwa">for</span> I <span class="kwa">in</span> S<span class="sym">'</span><span class="kwa">Range loop
          if</span> S <span class="sym">(</span>I<span class="sym">) =</span> EOL_Character_Pos <span class="kwa">then
</span>             End_Line<span class="sym">;
</span>          <span class="kwa">else
             if</span> Is_Separator <span class="sym">(</span>S <span class="sym">(</span>I<span class="sym">))</span> <span class="kwa">then
                if</span> In_Word <span class="kwa">then</span> End_Word<span class="sym">;</span> <span class="kwa">end if</span><span class="sym">;
</span>             <span class="kwa">else
                if not</span> In_Word <span class="kwa">then</span> Begin_Word<span class="sym">;</span> <span class="kwa">end if</span><span class="sym">;
</span>             <span class="kwa">end if</span><span class="sym">;
</span>          <span class="kwa">end if</span><span class="sym">;
</span>       <span class="kwa">end loop</span><span class="sym">;
</span>    <span class="kwa">end</span><span class="sym">;

</span>    <span class="kwa">pragma</span> Inline <span class="sym">(</span>Begin_Word<span class="sym">,</span> End_Word<span class="sym">,</span> End_Line<span class="sym">,</span> Count_Words<span class="sym">);

</span><span class="kwa">begin
    begin
</span>       EOL_Character_Pos <span class="sym">:=</span> Stream_Element<span class="sym">'</span>Value <span class="sym">(</span>Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>    <span class="kwa">exception
       when</span> Constraint_Error <span class="sym">=&gt;</span> <span class="kwa">null</span><span class="sym">;
</span>    <span class="kwa">end</span><span class="sym">;

</span>    <span class="kwa">loop
</span>       Read <span class="sym">(</span>Root_Stream_Type<span class="sym">'</span>Class <span class="sym">(</span>Input_Stream.<span class="kwa">all</span><span class="sym">),</span> Buffer<span class="sym">,</span> N<span class="sym">);
</span>       Count_Words <span class="sym">(</span>Buffer <span class="sym">(</span><span class="num">1</span> .. N<span class="sym">));
</span>       <span class="kwa">exit when</span> N <span class="sym">&lt;</span> Buffer<span class="sym">'</span>Length<span class="sym">;
</span>    <span class="kwa">end loop</span><span class="sym">;

</span>    Ada.Text_IO.Put_Line
      <span class="sym">(</span><span class="kwb">Natural</span><span class="sym">'</span>Image <span class="sym">(</span>Lines<span class="sym">) &amp;
</span>       <span class="kwb">Natural</span><span class="sym">'</span>Image <span class="sym">(</span>Words<span class="sym">) &amp;
</span>       <span class="kwb">Natural</span><span class="sym">'</span>Image <span class="sym">(</span>Total<span class="sym">));
</span><span class="kwa">end</span><span class="sym">;</span>
