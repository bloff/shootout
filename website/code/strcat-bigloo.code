<span class="slc">;;; -*- mode: scheme -*-</span>
<span class="slc">;;; $Id: strcat-bigloo.code,v 1.5 2006-02-10 07:03:51 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>
<span class="slc">;;; from Manuel Serrano</span>

<span class="sym">(</span>module <span class="kwa">strcat</span>
	<span class="sym">(</span>option <span class="sym">(</span><span class="kwa">set</span><span class="sym">! *</span>genericity<span class="sym">*</span> #f<span class="sym">))</span>
	<span class="sym">(</span>main main<span class="sym">))</span>

<span class="sym">(</span>define hello #<span class="str">&quot;hello</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">))</span>
	 <span class="sym">(</span>i <span class="num">0</span><span class="sym">)</span>
	 <span class="sym">(</span>buflen <span class="num">32</span><span class="sym">)</span>
	 <span class="sym">(</span>strbuf <span class="sym">(</span>make<span class="sym">-</span>string buflen<span class="sym">))</span>
	 <span class="sym">(</span>stufflen <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> hello<span class="sym">))</span>
	 <span class="sym">(</span>stuff hello<span class="sym">)</span>
	 <span class="sym">(</span>stuffstart <span class="num">0</span><span class="sym">))</span>

    <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
	<span class="sym">((=</span> i n<span class="sym">))</span>
      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;= (+</span>fx stufflen stuffstart<span class="sym">)</span> buflen<span class="sym">)</span>
	  <span class="sym">(</span>let<span class="sym">* ((</span>nbuflen <span class="sym">(*</span>fx <span class="num">2</span> buflen<span class="sym">))</span>
		 <span class="sym">(</span>nstrbuf <span class="sym">(</span>make<span class="sym">-</span>string nbuflen<span class="sym">)))</span>
	    <span class="sym">(</span>blit<span class="sym">-</span>string<span class="sym">!</span> strbuf <span class="num">0</span> nstrbuf <span class="num">0</span> buflen<span class="sym">)</span>
	    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> buflen nbuflen<span class="sym">)</span>
	    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> strbuf nstrbuf<span class="sym">)))</span>
      <span class="sym">(</span>blit<span class="sym">-</span>string<span class="sym">!</span> stuff <span class="num">0</span> strbuf stuffstart stufflen<span class="sym">)</span>
      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> stuffstart <span class="sym">(+</span>fx stuffstart stufflen<span class="sym">)))</span>

    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> strbuf <span class="sym">(</span>substring strbuf <span class="num">0</span> stuffstart<span class="sym">))</span>

    <span class="sym">(</span>display <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> strbuf<span class="sym">))</span>
    <span class="sym">(</span>newline<span class="sym">)))</span>
