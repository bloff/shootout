<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- contributed by Mike Pall</span>

<span class="kwa">local</span> IM <span class="sym">=</span> <span class="num">139968</span>
<span class="kwa">local</span> IA <span class="sym">=</span> <span class="num">3877</span>
<span class="kwa">local</span> IC <span class="sym">=</span> <span class="num">29573</span>
<span class="kwa">local</span> Last <span class="sym">=</span> <span class="num">42</span>

<span class="kwa">local</span> sub<span class="sym">,</span> <span class="kwa">write</span> <span class="sym">=</span> <span class="kwb">string</span>.sub<span class="sym">,</span> io.<span class="kwa">write</span>

<span class="kwa">local function random</span><span class="sym">(</span><span class="kwa">max</span><span class="sym">)</span>
  <span class="kwa">local</span> y <span class="sym">= (</span>Last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM
  Last <span class="sym">=</span> y
  <span class="kwa">return</span> <span class="sym">(</span><span class="kwa">max</span> <span class="sym">*</span> y<span class="sym">) /</span> IM
<span class="kwa">end</span>

<span class="kwa">local function</span> make_repeat_fasta<span class="sym">(</span>id<span class="sym">,</span> desc<span class="sym">,</span> s<span class="sym">,</span> n<span class="sym">)</span>
  <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">,</span> id<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> desc<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
  <span class="kwa">local</span> p<span class="sym">,</span> sn<span class="sym">,</span> s2 <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> #s<span class="sym">,</span> s..s
  <span class="kwa">for</span> i<span class="sym">=</span><span class="num">60</span><span class="sym">,</span>n<span class="sym">,</span><span class="num">60</span> <span class="kwa">do</span>
    <span class="kwa">write</span><span class="sym">(</span>sub<span class="sym">(</span>s2<span class="sym">,</span> p<span class="sym">,</span> p <span class="sym">+</span> <span class="num">59</span><span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
    p <span class="sym">=</span> p <span class="sym">+</span> <span class="num">60</span><span class="sym">;</span> <span class="kwa">if</span> p <span class="sym">&gt;</span> sn <span class="kwa">then</span> p <span class="sym">=</span> p <span class="sym">-</span> sn <span class="kwa">end</span>
  <span class="kwa">end</span>
  <span class="kwa">local</span> tail <span class="sym">=</span> n <span class="sym">%</span> <span class="num">60</span>
  <span class="kwa">if</span> tail <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then write</span><span class="sym">(</span>sub<span class="sym">(</span>s2<span class="sym">,</span> p<span class="sym">,</span> p <span class="sym">+</span> tail<span class="sym">-</span><span class="num">1</span><span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span> <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">local</span> make_random_fasta <span class="sym">=</span> loadstring<span class="sym">([=[</span><span class="kwa">local write</span> <span class="sym">=</span> ...
<span class="kwa">return function</span><span class="sym">(</span>id<span class="sym">,</span> desc<span class="sym">,</span> f<span class="sym">,</span> n<span class="sym">)</span>
  <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">,</span> id<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> desc<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
  <span class="kwa">for</span> i<span class="sym">=</span><span class="num">60</span><span class="sym">,</span>n<span class="sym">,</span><span class="num">60</span> <span class="kwa">do write</span><span class="sym">(]=]</span>..<span class="kwb">string</span>.rep<span class="sym">(</span><span class="str">&quot;f(),&quot;</span><span class="sym">,</span><span class="num">60</span><span class="sym">)</span>..<span class="sym">[=[</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span> <span class="kwa">end</span>
  <span class="kwa">local</span> tail <span class="sym">=</span> n <span class="sym">%</span> <span class="num">60</span>
  <span class="kwa">if</span> tail <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then for</span> j<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>tail <span class="kwa">do write</span><span class="sym">(</span>f<span class="sym">())</span> <span class="kwa">end</span><span class="sym">;</span> <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span> <span class="kwa">end</span>
<span class="kwa">end</span><span class="sym">]=])(</span><span class="kwa">write</span><span class="sym">)</span>

<span class="kwa">local function</span> bisect<span class="sym">(</span>c<span class="sym">,</span> p<span class="sym">,</span> lo<span class="sym">,</span> hi<span class="sym">)</span>
  <span class="kwa">local</span> n <span class="sym">=</span> hi <span class="sym">-</span> lo
  <span class="kwa">if</span> n <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then return</span> <span class="str">&quot;return '&quot;</span>..c<span class="sym">[</span>hi<span class="sym">]</span>..<span class="str">&quot;'</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="kwa">end</span>
  <span class="kwa">local</span> mid <span class="sym">=</span> math.<span class="kwa">floor</span><span class="sym">(</span>n <span class="sym">/</span> <span class="num">2</span><span class="sym">)</span>
  <span class="kwa">return</span> <span class="str">&quot;if r &lt; &quot;</span>..p<span class="sym">[</span>lo<span class="sym">+</span>mid<span class="sym">]</span>..<span class="str">&quot; then</span><span class="esc">\n</span><span class="str">&quot;</span>..bisect<span class="sym">(</span>c<span class="sym">,</span> p<span class="sym">,</span> lo<span class="sym">,</span> lo<span class="sym">+</span>mid<span class="sym">)</span>..
         <span class="str">&quot;else</span><span class="esc">\n</span><span class="str">&quot;</span>..bisect<span class="sym">(</span>c<span class="sym">,</span> p<span class="sym">,</span> lo<span class="sym">+</span>mid<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> hi<span class="sym">)</span>..<span class="str">&quot;end</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="kwa">end</span>

<span class="kwa">local function</span> make_bisect<span class="sym">(</span>tab<span class="sym">)</span>
  <span class="kwa">local</span> c<span class="sym">,</span> p<span class="sym">,</span> sum <span class="sym">= {}, {},</span> <span class="num">0</span>
  <span class="kwa">for</span> i<span class="sym">,</span>row <span class="kwa">in</span> ipairs<span class="sym">(</span>tab<span class="sym">)</span> <span class="kwa">do</span>
    c<span class="sym">[</span>i<span class="sym">] =</span> row<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
    sum <span class="sym">=</span> sum <span class="sym">+</span> row<span class="sym">[</span><span class="num">2</span><span class="sym">]</span>
    p<span class="sym">[</span>i<span class="sym">] =</span> sum
  <span class="kwa">end</span>
  <span class="kwa">return</span> loadstring<span class="sym">(</span><span class="str">&quot;local rr = ...</span><span class="esc">\n</span><span class="str">return function()</span><span class="esc">\n</span><span class="str">local r = rr(1)</span><span class="esc">\n</span><span class="str">&quot;</span>..
    bisect<span class="sym">(</span>c<span class="sym">,</span> p<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> #tab<span class="sym">)</span>..<span class="str">&quot;end</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)(</span><span class="kwa">random</span><span class="sym">)</span>
<span class="kwa">end</span>

<span class="kwa">local</span> alu <span class="sym">=</span>
  <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>..
  <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>..
  <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>..
  <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>..
  <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>..
  <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>..
  <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

<span class="kwa">local</span> iub <span class="sym">=</span> make_bisect<span class="sym">{</span>
  <span class="sym">{</span> <span class="str">&quot;a&quot;</span><span class="sym">,</span> <span class="num">0.27</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;c&quot;</span><span class="sym">,</span> <span class="num">0.12</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;g&quot;</span><span class="sym">,</span> <span class="num">0.12</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;t&quot;</span><span class="sym">,</span> <span class="num">0.27</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;B&quot;</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;D&quot;</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;H&quot;</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;K&quot;</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;M&quot;</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;N&quot;</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;R&quot;</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;S&quot;</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;V&quot;</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;W&quot;</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;Y&quot;</span><span class="sym">,</span> <span class="num">0.02</span> <span class="sym">},</span>
<span class="sym">}</span>

<span class="kwa">local</span> homosapiens <span class="sym">=</span> make_bisect<span class="sym">{</span>
  <span class="sym">{</span> <span class="str">&quot;a&quot;</span><span class="sym">,</span> <span class="num">0.3029549426680</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;c&quot;</span><span class="sym">,</span> <span class="num">0.1979883004921</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;g&quot;</span><span class="sym">,</span> <span class="num">0.1975473066391</span> <span class="sym">},</span>
  <span class="sym">{</span> <span class="str">&quot;t&quot;</span><span class="sym">,</span> <span class="num">0.3015094502008</span> <span class="sym">},</span>
<span class="sym">}</span>

<span class="kwa">local</span> N <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">1000</span>
make_repeat_fasta<span class="sym">(</span><span class="str">'ONE'</span><span class="sym">,</span> <span class="str">'Homo sapiens alu'</span><span class="sym">,</span> alu<span class="sym">,</span> N<span class="sym">*</span><span class="num">2</span><span class="sym">)</span>
make_random_fasta<span class="sym">(</span><span class="str">'TWO'</span><span class="sym">,</span> <span class="str">'IUB ambiguity codes'</span><span class="sym">,</span> iub<span class="sym">,</span> N<span class="sym">*</span><span class="num">3</span><span class="sym">)</span>
make_random_fasta<span class="sym">(</span><span class="str">'THREE'</span><span class="sym">,</span> <span class="str">'Homo sapiens frequency'</span><span class="sym">,</span> homosapiens<span class="sym">,</span> N<span class="sym">*</span><span class="num">5</span><span class="sym">)</span>

