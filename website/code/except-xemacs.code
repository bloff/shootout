<span class="slc">;;; -*- mode: emacs-lisp -*-</span>
<span class="slc">;;; $Id: except-xemacs.code,v 1.5 2006-02-10 07:03:36 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>defvar HI <span class="num">0</span><span class="sym">)</span>
<span class="sym">(</span>defvar LO <span class="num">0</span><span class="sym">)</span>

<span class="sym">(</span><span class="kwa">defun</span> hi_ex <span class="sym">(</span>val<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">cons</span> <span class="str">'hi_ex val))</span>
<span class="str"></span>
<span class="str">(defun lo_ex (val)</span>
<span class="str">  (cons '</span>lo_ex val<span class="sym">))</span>

<span class="sym">(</span><span class="kwa">defun</span> some_fun <span class="sym">(</span>num<span class="sym">)</span>
  <span class="sym">(</span>catch t
    <span class="sym">(</span>hi_fun num<span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> hi_fun <span class="sym">(</span>num<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>val <span class="sym">(</span>catch <span class="str">'Hi_Exception (lo_fun num))))</span>
<span class="str">    (if (and (consp val)</span>
<span class="str">	     (eq (car val) '</span>hi_ex<span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">setq</span> HI <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> HI<span class="sym">)))))</span>

<span class="sym">(</span><span class="kwa">defun</span> lo_fun <span class="sym">(</span>num<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>val <span class="sym">(</span>catch <span class="str">'Lo_Exception (blowup num))))</span>
<span class="str">    (if (and (consp val)</span>
<span class="str">	     (eq (car val) '</span>lo_ex<span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">setq</span> LO <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> LO<span class="sym">)))))</span>

<span class="sym">(</span><span class="kwa">defun</span> blowup <span class="sym">(</span>num<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> <span class="num">0</span> <span class="sym">(</span>mod num <span class="num">2</span><span class="sym">))</span>
      <span class="sym">(</span>throw <span class="str">'Hi_Exception (hi_ex num))</span>
<span class="str">    (throw '</span>Lo_Exception <span class="sym">(</span>lo_ex num<span class="sym">))))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>arg <span class="sym">(</span><span class="kwa">car command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>args<span class="sym">-</span>left<span class="sym">))</span>
	 <span class="sym">(</span>n <span class="sym">(</span><span class="kwa">if</span> arg <span class="sym">(</span>string<span class="sym">-</span>to<span class="sym">-</span>number arg<span class="sym">)</span> <span class="num">1</span><span class="sym">)))</span>
    <span class="sym">(</span><span class="kwa">while</span> <span class="sym">(&gt;</span> n <span class="num">0</span><span class="sym">)</span>
      <span class="sym">(</span><span class="kwa">setq</span> n <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> n<span class="sym">))</span>
      <span class="sym">(</span>some_fun n<span class="sym">)))</span>
  <span class="sym">(</span><span class="kwa">princ</span> <span class="sym">(</span>format <span class="str">&quot;Exceptions: HI=%d / LO=%d</span><span class="esc">\n</span><span class="str">&quot;</span> HI LO<span class="sym">)))</span>
