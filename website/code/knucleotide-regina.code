<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Dennis Decker Jensen</span>
<span class="com">*/</span>

segment <span class="sym">=</span> <span class="str">&quot;&quot;</span>
<span class="kwa">do until</span> segment <span class="sym">=</span> <span class="str">&quot;&gt;THREE&quot;</span>
	<span class="kwa">parse upper</span> <span class="kwb">linein</span> <span class="sym">=</span><span class="num">1</span> segment <span class="sym">+</span><span class="num">6</span>
<span class="kwa">end</span>

sequence <span class="sym">=</span> <span class="str">&quot;&quot;</span>
<span class="kwa">parse upper</span> <span class="kwb">linein line</span>
<span class="kwa">do while</span> <span class="kwb">line</span> \<span class="sym">=</span> <span class="str">&quot;&quot;</span>
	<span class="kwa">if</span> <span class="kwb">verify</span><span class="sym">(</span><span class="kwb">line</span><span class="sym">,</span> <span class="str">&quot;&gt;;&quot;</span><span class="sym">,</span> <span class="str">&quot;Match&quot;</span><span class="sym">)</span> <span class="kwa">then leave</span>
	sequence <span class="sym">=</span> sequence <span class="sym">||</span> <span class="kwb">line</span>
	<span class="kwa">parse upper</span> <span class="kwb">linein line</span>
<span class="kwa">end</span>

<span class="kwa">call</span> kfrequency sequence<span class="sym">,</span> <span class="num">1</span>
<span class="kwa">call</span> kfrequency sequence<span class="sym">,</span> <span class="num">2</span>

<span class="kwa">say</span> countdna<span class="sym">(</span><span class="str">&quot;GGT&quot;</span><span class="sym">,</span> sequence<span class="sym">)</span>
<span class="kwa">say</span> countdna<span class="sym">(</span><span class="str">&quot;GGTA&quot;</span><span class="sym">,</span> sequence<span class="sym">)</span>
<span class="kwa">say</span> countdna<span class="sym">(</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">,</span> sequence<span class="sym">)</span>
<span class="kwa">say</span> countdna<span class="sym">(</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">,</span> sequence<span class="sym">)</span>
<span class="kwa">say</span> countdna<span class="sym">(</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">,</span> sequence<span class="sym">)</span>

<span class="kwa">exit</span> <span class="num">0</span>

countdna<span class="sym">:</span> <span class="kwa">procedure</span>
<span class="kwa">parse arg</span> nucleotide<span class="sym">,</span> sequence
<span class="kwa">return</span> <span class="kwb">countstr</span><span class="sym">(</span>nucleotide<span class="sym">,</span> sequence<span class="sym">) ||</span> <span class="kwb">d2c</span><span class="sym">(</span><span class="num">9</span><span class="sym">) ||</span> nucleotide

kfrequency<span class="sym">:</span> <span class="kwa">procedure</span>
<span class="kwa">parse arg</span> sequence<span class="sym">,</span> sublen .

len <span class="sym">=</span> <span class="kwb">length</span><span class="sym">(</span>sequence<span class="sym">) -</span> sublen
table. <span class="sym">=</span> <span class="num">0</span>
table.subs <span class="sym">=</span> <span class="str">&quot;&quot;</span>
<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> sublen
	<span class="kwa">do</span> j <span class="sym">=</span> i <span class="kwa">to</span> len <span class="kwa">by</span> sublen
		sub <span class="sym">=</span> <span class="kwb">substr</span><span class="sym">(</span>sequence<span class="sym">,</span> j<span class="sym">,</span> sublen<span class="sym">)</span>
		table.sub <span class="sym">=</span> table.sub <span class="sym">+</span> <span class="num">1</span>
		<span class="kwa">if</span> <span class="kwb">pos</span><span class="sym">(</span>sub<span class="sym">,</span> table.subs<span class="sym">) =</span> <span class="num">0</span> <span class="kwa">then</span>
			table.subs <span class="sym">=</span> table.subs sub
	<span class="kwa">end</span>
<span class="kwa">end</span>
table<span class="num">.0</span> <span class="sym">=</span> <span class="kwb">words</span><span class="sym">(</span>table.subs<span class="sym">)</span>

<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> table<span class="num">.0</span>
	sub <span class="sym">=</span> <span class="kwb">word</span><span class="sym">(</span>table.subs<span class="sym">,</span> i<span class="sym">)</span>
	seqs.i <span class="sym">=</span> sub
	counts.i <span class="sym">=</span> table.sub
<span class="kwa">end</span>
<span class="kwa">call</span> qsort <span class="num">1</span><span class="sym">,</span> table<span class="num">.0</span>

<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> table<span class="num">.0</span>
	<span class="kwa">say</span> seqs.i <span class="kwb">format</span><span class="sym">(</span>counts.i<span class="sym">*</span><span class="num">100</span><span class="sym">/</span>len<span class="sym">, ,</span> <span class="num">3</span><span class="sym">)</span>
<span class="kwa">end</span>
<span class="kwa">say</span>
<span class="kwa">return</span>

qsort<span class="sym">:</span> <span class="kwa">procedure expose</span> seqs. counts.
<span class="kwa">arg</span> l<span class="sym">,</span> r
<span class="kwa">if</span> r <span class="sym">-</span> l <span class="sym">&lt;=</span> <span class="num">1</span> <span class="kwa">then return</span>      <span class="com">/* nothing to do */</span>
i <span class="sym">=</span> <span class="kwb">random</span><span class="sym">(</span>l<span class="sym">,</span> r<span class="sym">)</span>               <span class="com">/* pick a random pivot */</span>
<span class="kwa">parse</span> <span class="kwb">value</span> seqs.l seqs.i <span class="kwa">with</span> seqs.i seqs.l <span class="com">/* swap pivot to start */</span>
<span class="kwa">parse</span> <span class="kwb">value</span> counts.l counts.i <span class="kwa">with</span> counts.i counts.l
last <span class="sym">=</span> l
<span class="kwa">do</span> i <span class="sym">=</span> l<span class="sym">+</span><span class="num">1</span> <span class="kwa">to</span> r                <span class="com">/* partition */</span>
	<span class="kwa">if</span> counts.i <span class="sym">&gt;</span> counts.l <span class="sym">| ,</span>
	   counts.i <span class="sym">=</span> counts.l <span class="sym">&amp;</span> seqs.i <span class="sym">&lt;</span> seqs.l <span class="kwa">then do</span>
		last <span class="sym">=</span> last <span class="sym">+</span> <span class="num">1</span>
		<span class="kwa">parse</span> <span class="kwb">value</span> seqs.last seqs.i <span class="sym">,</span>
		       <span class="kwa">with</span> seqs.i seqs.last
		<span class="kwa">parse</span> <span class="kwb">value</span> counts.last counts.i <span class="sym">,</span>
		       <span class="kwa">with</span> counts.i counts.last
	<span class="kwa">end</span>
<span class="kwa">end</span>
<span class="kwa">parse</span> <span class="kwb">value</span> seqs.l seqs.last <span class="sym">,</span> <span class="com">/* restore pivot */</span>
       <span class="kwa">with</span> seqs.last seqs.l
<span class="kwa">parse</span> <span class="kwb">value</span> counts.l counts.last <span class="sym">,</span>
       <span class="kwa">with</span> counts.last counts.l
<span class="kwa">call</span> qsort l<span class="sym">,</span> last             <span class="com">/* recurse */</span>
<span class="kwa">call</span> qsort last<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> r
<span class="kwa">return</span>

