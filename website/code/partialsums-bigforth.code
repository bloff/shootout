\ The Computer Language Shootout
\ http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
\ contributed by Ian <span class="kwd">Osgood</span> <span class="sym">(</span>R<span class="sym">.</span> by Brad Eckert<span class="sym">)</span>
\ modified by Bernd Paysan<span class="sym">/</span>

\ read NUM from last command line argument
<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

import <span class="kwb">float float</span> also

\ <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%.9f&quot;</span><span class="sym">):</span> show nine digits past the decimal point

<span class="sym">:</span> <span class="kwd">fsplit</span>        <span class="sym">(</span> F<span class="sym">:</span> r <span class="sym">-- ) (</span> precision <span class="sym">--</span> sign Dint Dfrac <span class="sym">)</span>
  \ <span class="sym">*</span>G Split <span class="kwb">float</span> into integer component parts<span class="sym">.</span>
  <span class="sym">&gt;</span>R FDUP F0<span class="sym">&lt;</span> FABS                \ <span class="kwb">int</span> part must fit in a <span class="kwb">double</span>
  FDUP F<span class="sym">&gt;</span>D <span class="num">2</span>DUP D<span class="sym">&gt;</span>F F<span class="sym">-</span>            \ get <span class="kwb">int</span><span class="sym">,</span> leave frac
  <span class="num">2</span><span class="sym">.</span> R<span class="sym">&gt;</span> <span class="num">0</span> ?DO D2<span class="sym">*</span> <span class="num">2</span>DUP D2<span class="sym">*</span> D2<span class="sym">*</span> D<span class="sym">+</span> LOOP \ <span class="num">2</span> <span class="sym">*</span> <span class="num">10</span>^precision
  D<span class="sym">&gt;</span>F F<span class="sym">*</span> F<span class="sym">&gt;</span>D  <span class="num">1</span><span class="sym">.</span> D<span class="sym">+</span> D2<span class="sym">/ ;</span>        \ round

<span class="sym">:</span> R<span class="sym">.          (</span> F<span class="sym">:</span> r <span class="sym">-- ) (</span> precision <span class="sym">-- )</span>
  \ <span class="sym">*</span>G Convert <span class="kwb">float</span> to a string of a given precision
  <span class="sym">&lt;</span><span class="dir"># DUP &gt;R fsplit R&#64; 0 ?DO # LOOP D+</span>
  R<span class="sym">&gt;</span> IF <span class="sym">[</span>CHAR<span class="sym">] .</span> HOLD THEN <span class="dir">#S ROT SIGN #&gt; type ;</span>

<span class="sym">:</span> <span class="kwd">sumFn</span> <span class="sym">(</span> xt start <span class="sym">-- )</span> <span class="num">0</span>e
  NUM <span class="num">1</span><span class="sym">+</span> swap <span class="kwa">do</span> I s<span class="sym">&gt;</span>f dup execute f<span class="sym">+</span> f<span class="sym">&gt;</span>fd fd<span class="sym">&gt;</span>f loop drop  <span class="num">9</span> R<span class="sym">.</span> <span class="dir">#tab emit ;</span>

\ all these <span class="kwd">are</span> <span class="sym">(</span> f <span class="sym">--</span> f <span class="sym">)</span>

<span class="sym">:</span>noname <span class="sym">[</span> <span class="num">2</span>e <span class="num">3</span>e f<span class="sym">/ ]</span> fliteral fswap f<span class="sym">** ;</span> <span class="num">0</span> sumFn <span class="sym">.</span><span class="str">&quot; (2/3)^k&quot;</span> cr

<span class="sym">:</span>noname fsqrt <span class="num">1</span><span class="sym">/</span>f <span class="sym">;</span> <span class="num">1</span> sumFn <span class="sym">.</span><span class="str">&quot; k^-0.5&quot;</span> cr

<span class="sym">:</span>noname fdup <span class="num">1</span>e f<span class="sym">+</span> f<span class="sym">*</span> <span class="num">1</span><span class="sym">/</span>f <span class="sym">;</span> <span class="num">1</span> sumFn <span class="sym">.</span><span class="str">&quot; 1/k(k+1)&quot;</span> cr

<span class="sym">:</span>noname fdup fsin fdup f<span class="sym">*</span> fover f<span class="sym">*</span> fover f<span class="sym">*</span> f<span class="sym">*</span> <span class="num">1</span><span class="sym">/</span>f <span class="sym">;</span> <span class="num">1</span> sumFn <span class="sym">.</span><span class="str">&quot; Flint Hills&quot;</span> cr

<span class="sym">:</span>noname fdup fcos fdup f<span class="sym">*</span> fover f<span class="sym">*</span> fover f<span class="sym">*</span> f<span class="sym">*</span> <span class="num">1</span><span class="sym">/</span>f <span class="sym">;</span> <span class="num">1</span> sumFn <span class="sym">.</span><span class="str">&quot; Cookson Hills&quot;</span> cr

<span class="str">' 1/f 1 sumFn .&quot; Harmonic&quot; cr</span>
<span class="str"></span>
<span class="str">:noname fdup f* 1/f ; 1 sumFn .&quot; Riemann Zeta&quot; cr</span>
<span class="str"></span>
<span class="str"></span><span class="esc">\ </span><span class="str">these are ( sum f -- sum f )</span>
<span class="str"></span>
<span class="str">:noname 1/f fnegate fswap fnegate fswap ; 1 sumFn .&quot; Alternating Harmonic&quot; cr</span>
<span class="str"></span>
<span class="str">:noname f2* 1e f- 1/f fnegate fswap fnegate fswap ; 1 sumFn .&quot; Gregory&quot; cr</span>
<span class="str"></span>
<span class="str">bye</span>
