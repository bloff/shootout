<span class="slc">! -*- mode: f90 -*-</span>
<span class="slc">!</span>
<span class="slc">! $Id: raytracer-gfortran.code,v 1.5 2006-09-30 16:39:38 bfulgham Exp $ ; $Name:  $</span>
<span class="slc">!</span>
<span class="slc">! The Great Computer Language Shootout</span>
<span class="slc">! http://shootout.alioth.debian.org/</span>
<span class="slc">!</span>
<span class="slc">! contributed by Simon Geard, 2005; translated from raytracer.cxx by John Harrop</span>
<span class="slc">!</span>
<span class="slc">! Compile: ifort -O3 -u -what -static-libcxa -o raytracer raytracer.f90</span>
<span class="slc">!</span>
<span class="slc">! -&gt; Intel Fortran 8.1-5079</span>
<span class="slc">!</span>
module scene
  <span class="slc">!</span>
  <span class="slc">! This module contains the code for building the scene to be ray traced. It</span>
  <span class="slc">! is generic in nature except for the definition of a Sphere. This is because without</span>
  <span class="slc">! generic types (which are in fortran2003 but there are no compilers yet!)</span>
  <span class="slc">! the tree has to be defined for each data type.</span>
  <span class="slc">!</span>
  <span class="slc">! A sphere</span>
  type Sphere
     real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(</span><span class="num">3</span><span class="sym">) ::</span> centre <span class="sym">= (/</span> <span class="num">0.0</span>d0<span class="sym">,</span><span class="num">0.0</span>d0<span class="sym">,</span><span class="num">0.0</span>d0 <span class="sym">/)</span>
     real<span class="sym">*</span><span class="num">8</span>               <span class="sym">::</span> radius <span class="sym">=</span> <span class="num">0.0</span>d0
  end type Sphere
  <span class="slc">!</span>
  <span class="slc">! Tree data structure</span>
  type Tree
     type<span class="sym">(</span>Sphere<span class="sym">)        ::</span> data
     type<span class="sym">(</span>Tree<span class="sym">),</span> pointer <span class="sym">::</span> children<span class="sym">(:) =&gt;</span> null<span class="sym">()</span>
     integer             <span class="sym">::</span> num_children <span class="sym">=</span> <span class="num">0</span>
  end type Tree

  interface assignment<span class="sym">(=)</span>
     module procedure equals_t_t <span class="slc">! Tree = Tree</span>
  end interface

contains

  <span class="slc">! Assignment</span>
  recursive subroutine equals_t_t<span class="sym">(</span>t2<span class="sym">,</span> t1<span class="sym">)</span>
    type<span class="sym">(</span>Tree<span class="sym">),</span> intent<span class="sym">(</span>out<span class="sym">) ::</span> t2
    type<span class="sym">(</span>Tree<span class="sym">),</span> intent<span class="sym">(</span>in<span class="sym">)  ::</span> t1
    t2<span class="sym">%</span>data <span class="sym">=</span> t1<span class="sym">%</span>data
    t2<span class="sym">%</span>num_children <span class="sym">=</span> t1<span class="sym">%</span>num_children
    t2<span class="sym">%</span>children <span class="sym">=&gt;</span> t1<span class="sym">%</span>children
  end subroutine equals_t_t

  <span class="slc">! Add a child to the tree</span>
  subroutine addChild<span class="sym">(</span>t<span class="sym">,</span> c<span class="sym">)</span>
    type<span class="sym">(</span>Tree<span class="sym">),</span> intent<span class="sym">(</span>inout<span class="sym">) ::</span> t
    type<span class="sym">(</span>Tree<span class="sym">),</span> intent<span class="sym">(</span>in<span class="sym">)    ::</span> c

    type<span class="sym">(</span>Tree<span class="sym">),</span> allocatable   <span class="sym">::</span> wk<span class="sym">(:)</span>
    if <span class="sym">(</span>.not. associated<span class="sym">(</span>t<span class="sym">%</span>children<span class="sym">))</span> then
       allocate<span class="sym">(</span>t<span class="sym">%</span>children<span class="sym">(</span><span class="num">5</span><span class="sym">))</span> <span class="slc">! The optimal choice for this test</span>
       t<span class="sym">%</span>num_children <span class="sym">=</span> <span class="num">0</span>
    elseif <span class="sym">(</span>t<span class="sym">%</span>num_children <span class="sym">==</span> size<span class="sym">(</span>t<span class="sym">%</span>children<span class="sym">))</span> then
       allocate<span class="sym">(</span>wk<span class="sym">(</span>t<span class="sym">%</span>num_children<span class="sym">))</span>
       wk <span class="sym">=</span> t<span class="sym">%</span>children
       deallocate<span class="sym">(</span>t<span class="sym">%</span>children<span class="sym">)</span>
       allocate<span class="sym">(</span>t<span class="sym">%</span>children<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>t<span class="sym">%</span>num_children<span class="sym">))</span>
       t<span class="sym">%</span>children <span class="sym">=</span> wk
       deallocate<span class="sym">(</span>wk<span class="sym">)</span>
    end if
    t<span class="sym">%</span>num_children <span class="sym">=</span> t<span class="sym">%</span>num_children <span class="sym">+</span> <span class="num">1</span>
    t<span class="sym">%</span>children<span class="sym">(</span>t<span class="sym">%</span>num_children<span class="sym">) =</span> c
  end subroutine addChild

  <span class="slc">! Free all allocated memory</span>
  recursive subroutine tidy<span class="sym">(</span>t<span class="sym">)</span>
    type<span class="sym">(</span>Tree<span class="sym">) ::</span> t
    integer <span class="sym">::</span> i
    if <span class="sym">(</span>associated<span class="sym">(</span>t<span class="sym">%</span>children<span class="sym">))</span> then
       do i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>t<span class="sym">%</span>num_children
          call tidy<span class="sym">(</span>t<span class="sym">%</span>children<span class="sym">(</span>i<span class="sym">))</span>
       end do
       deallocate<span class="sym">(</span>t<span class="sym">%</span>children<span class="sym">)</span>
    end if
  end subroutine tidy

end module scene

<span class="slc">! The program itself</span>
program ray_tracer
  use scene

  integer<span class="sym">,</span> parameter   <span class="sym">::</span> ss <span class="sym">=</span> <span class="num">4</span>

  real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(</span><span class="num">3</span><span class="sym">) ::</span> d<span class="sym">,</span> e
  integer              <span class="sym">::</span> x<span class="sym">,</span> dx<span class="sym">,</span> y<span class="sym">,</span> dy<span class="sym">,</span> n
  integer              <span class="sym">::</span> level <span class="sym">=</span> <span class="num">6</span>
  type<span class="sym">(</span>Tree<span class="sym">)           ::</span> t_scene
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">4</span><span class="sym">)     ::</span> argv
  real<span class="sym">*</span><span class="num">8</span>               <span class="sym">::</span> infinity <span class="sym">=</span> huge<span class="sym">(</span><span class="num">1.0</span>d0<span class="sym">)</span>
  real<span class="sym">*</span><span class="num">8</span>               <span class="sym">::</span> delta<span class="sym">,</span> g
  real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(</span><span class="num">3</span><span class="sym">) ::</span> ro <span class="sym">= (/</span><span class="num">0.0</span>d0<span class="sym">,</span><span class="num">0.0</span>d0<span class="sym">,-</span><span class="num">4.0</span>d0<span class="sym">/)</span>
  real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(</span><span class="num">3</span><span class="sym">) ::</span> light <span class="sym">= (/-</span><span class="num">1.0</span>d0<span class="sym">,-</span><span class="num">3.0</span>d0<span class="sym">,</span><span class="num">2.0</span>d0<span class="sym">/)</span>

  type Ray
     real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(</span><span class="num">3</span><span class="sym">) ::</span> orig<span class="sym">,</span> dir
  end type Ray

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">);</span> read<span class="sym">(</span>argv<span class="sym">,*)</span> n
  write<span class="sym">(*,</span><span class="str">'(a2/i0,a1,i0/a3)'</span><span class="sym">)</span> <span class="str">'P5'</span><span class="sym">,</span> n<span class="sym">,</span><span class="str">' '</span><span class="sym">,</span> n<span class="sym">,</span><span class="str">'255'</span>

  delta <span class="sym">=</span> sqrt<span class="sym">(</span>epsilon<span class="sym">(</span><span class="num">1.0</span>d0<span class="sym">))</span>
  light <span class="sym">=</span> light<span class="sym">/</span>sqrt<span class="sym">(</span>dot_product<span class="sym">(</span>light<span class="sym">,</span>light<span class="sym">))</span>
  t_scene <span class="sym">=</span> create<span class="sym">(</span>level<span class="sym">,</span> Sphere<span class="sym">((/</span><span class="num">0.0</span>d0<span class="sym">, -</span><span class="num">1.0</span>d0<span class="sym">,</span> <span class="num">0.0</span>d0<span class="sym">/),</span><span class="num">1.0</span>d0<span class="sym">))</span> <span class="slc">! Build the scene</span>
  do y<span class="sym">=</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,-</span><span class="num">1</span><span class="sym">;</span> do x<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">-</span><span class="num">1</span>
     g <span class="sym">=</span> <span class="num">0.0</span>d0
     do dx<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>ss<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> do dy<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>ss<span class="sym">-</span><span class="num">1</span>
        d <span class="sym">= (/</span>x <span class="sym">+</span> dble<span class="sym">(</span>dx<span class="sym">)/</span>ss <span class="sym">-</span> <span class="num">0.5</span>d0<span class="sym">*</span>n<span class="sym">,</span>y <span class="sym">+</span> dble<span class="sym">(</span>dy<span class="sym">)/</span>ss <span class="sym">-</span> <span class="num">0.5</span>d0<span class="sym">*</span>n<span class="sym">,</span>dble<span class="sym">(</span>n<span class="sym">)/)</span>
        g <span class="sym">=</span> g <span class="sym">+</span> ray_trace<span class="sym">(</span><span class="num">1.0</span>d0<span class="sym">,</span>light<span class="sym">,</span>Ray<span class="sym">(</span>ro<span class="sym">,</span>d<span class="sym">/</span>sqrt<span class="sym">(</span>dot_product<span class="sym">(</span>d<span class="sym">,</span>d<span class="sym">))),</span>t_scene<span class="sym">)</span>
     end do<span class="sym">;</span> end do
     write<span class="sym">(*,</span><span class="str">'(a1)'</span><span class="sym">,</span>advance<span class="sym">=</span><span class="str">'no'</span><span class="sym">)</span> char<span class="sym">(</span>nint<span class="sym">(</span><span class="num">255</span><span class="sym">*</span>g<span class="sym">/(</span>ss<span class="sym">*</span>ss<span class="sym">)))</span>
  end do<span class="sym">;</span> end do
  call tidy<span class="sym">(</span>t_scene<span class="sym">)</span>

contains

  real<span class="sym">*</span><span class="num">8</span> function ray_sphere<span class="sym">(</span>r<span class="sym">,</span> t<span class="sym">)</span>
    type<span class="sym">(</span>Ray<span class="sym">),</span> intent<span class="sym">(</span>in<span class="sym">)  ::</span> r
    type<span class="sym">(</span>Tree<span class="sym">),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> t

    real<span class="sym">*</span><span class="num">8</span>                 <span class="sym">::</span> b<span class="sym">,</span> disc<span class="sym">,</span> d<span class="sym">,</span> v<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>

    v <span class="sym">=</span> t<span class="sym">%</span>data<span class="sym">%</span>centre <span class="sym">-</span> r<span class="sym">%</span>orig
    b <span class="sym">=</span> dot_product<span class="sym">(</span>v<span class="sym">,</span> r<span class="sym">%</span>dir<span class="sym">)</span>
    disc <span class="sym">=</span> b<span class="sym">*</span>b <span class="sym">-</span> dot_product<span class="sym">(</span>v<span class="sym">,</span>v<span class="sym">) +</span> t<span class="sym">%</span>data<span class="sym">%</span>radius <span class="sym">*</span> t<span class="sym">%</span>data<span class="sym">%</span>radius
    if <span class="sym">(</span>disc <span class="sym">&lt;</span> <span class="num">0.0</span>d0<span class="sym">)</span> then
       ray_sphere <span class="sym">=</span> infinity<span class="sym">;</span> return
    end if
    d <span class="sym">=</span> sqrt<span class="sym">(</span>disc<span class="sym">)</span>
    ray_sphere <span class="sym">=</span> merge<span class="sym">(</span>infinity<span class="sym">,</span> merge<span class="sym">(</span>b<span class="sym">-</span>d<span class="sym">,</span> b<span class="sym">+</span>d<span class="sym">,</span> b <span class="sym">&gt;</span> d<span class="sym">),</span> b <span class="sym">&lt; -</span>d<span class="sym">)</span>
  end function ray_sphere

  recursive subroutine intersect<span class="sym">(</span>lambda<span class="sym">,</span> normal<span class="sym">,</span> r<span class="sym">,</span> t<span class="sym">)</span>
    real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> intent<span class="sym">(</span>inout<span class="sym">)               ::</span> lambda
    real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(</span><span class="num">3</span><span class="sym">),</span> intent<span class="sym">(</span>inout<span class="sym">) ::</span> normal
    type<span class="sym">(</span>Ray<span class="sym">),</span> intent<span class="sym">(</span>in<span class="sym">)               ::</span> r
    type<span class="sym">(</span>Tree<span class="sym">),</span> intent<span class="sym">(</span>in<span class="sym">)              ::</span> t

    integer    <span class="sym">::</span> i
    real<span class="sym">*</span><span class="num">8</span>     <span class="sym">::</span> l

    l <span class="sym">=</span> ray_sphere<span class="sym">(</span>r<span class="sym">,</span>t<span class="sym">)</span>
    if <span class="sym">(</span>l <span class="sym">&gt;=</span> lambda<span class="sym">)</span> return
    if <span class="sym">(</span>t<span class="sym">%</span>num_children <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> then
       lambda <span class="sym">=</span> l
       normal <span class="sym">=</span> r<span class="sym">%</span>orig <span class="sym">+</span> l<span class="sym">*</span>r<span class="sym">%</span>dir <span class="sym">-</span> t<span class="sym">%</span>data<span class="sym">%</span>centre
       normal <span class="sym">=</span> normal<span class="sym">/</span>sqrt<span class="sym">(</span>dot_product<span class="sym">(</span>normal<span class="sym">,</span>normal<span class="sym">))</span>
    else
       do i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>t<span class="sym">%</span>num_children
          call intersect<span class="sym">(</span>lambda<span class="sym">,</span> normal<span class="sym">,</span> r<span class="sym">,</span> t<span class="sym">%</span>children<span class="sym">(</span>i<span class="sym">))</span>
       end do
    end if
  end subroutine intersect

  real<span class="sym">*</span><span class="num">8</span> function ray_trace<span class="sym">(</span>weight<span class="sym">,</span> light<span class="sym">,</span>  r<span class="sym">,</span> t<span class="sym">)</span>
    real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">)               ::</span> weight
    real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> light
    type<span class="sym">(</span>Ray<span class="sym">),</span> intent<span class="sym">(</span>in<span class="sym">)            ::</span> r
    type<span class="sym">(</span>Tree<span class="sym">),</span> intent<span class="sym">(</span>in<span class="sym">)           ::</span> t

    real<span class="sym">*</span><span class="num">8</span>                           <span class="sym">::</span> lambda<span class="sym">,</span> g<span class="sym">,</span> l
    real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> dimension<span class="sym">(</span><span class="num">3</span><span class="sym">)             ::</span> normal

    ray_trace <span class="sym">=</span> <span class="num">0.0</span>d0
    lambda <span class="sym">=</span> infinity
    call intersect<span class="sym">(</span>lambda<span class="sym">,</span> normal<span class="sym">,</span> r<span class="sym">,</span> t<span class="sym">)</span>
    if <span class="sym">(</span>lambda <span class="sym">==</span> infinity<span class="sym">)</span> return
    g <span class="sym">= -</span>dot_product<span class="sym">(</span>normal<span class="sym">,</span> light<span class="sym">);</span> l <span class="sym">=</span> infinity
    if <span class="sym">(</span>g <span class="sym">&lt;</span>  <span class="num">0.0</span>d0<span class="sym">)</span> return
    call intersect<span class="sym">(</span>l<span class="sym">,</span> normal<span class="sym">,</span> Ray<span class="sym">(</span>r<span class="sym">%</span>orig <span class="sym">+</span> lambda <span class="sym">*</span> r<span class="sym">%</span>dir <span class="sym">+</span> delta <span class="sym">*</span> normal<span class="sym">, -</span>light<span class="sym">),</span> t<span class="sym">)</span>
    if <span class="sym">(</span>l <span class="sym">==</span> infinity<span class="sym">)</span> ray_trace <span class="sym">=</span> g
  end function ray_trace

  recursive function create<span class="sym">(</span>level<span class="sym">,</span> s<span class="sym">)</span> result<span class="sym">(</span>t<span class="sym">)</span>
    type<span class="sym">(</span>Tree<span class="sym">)                 ::</span> t
    integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">)        ::</span> level
    type<span class="sym">(</span>Sphere<span class="sym">),</span> intent<span class="sym">(</span>in<span class="sym">)   ::</span> s
    real<span class="sym">*</span><span class="num">8</span>     <span class="sym">::</span> rn<span class="sym">,</span>d<span class="sym">,</span>c<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
    type<span class="sym">(</span>Tree<span class="sym">) ::</span> tn
    integer    <span class="sym">::</span> i
    real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> parameter <span class="sym">::</span> cen<span class="sym">(</span><span class="num">8</span><span class="sym">) = (/</span><span class="num">1.0</span>d0<span class="sym">,</span><span class="num">1.0</span>d0<span class="sym">,-</span><span class="num">1.0</span>d0<span class="sym">,</span><span class="num">1.0</span>d0<span class="sym">,</span><span class="num">1.0</span>d0<span class="sym">,-</span><span class="num">1.0</span>d0<span class="sym">,-</span><span class="num">1.0</span>d0<span class="sym">,-</span><span class="num">1.0</span>d0<span class="sym">/)</span>
    if <span class="sym">(</span>level <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span> then
       t<span class="sym">%</span>data <span class="sym">=</span> s <span class="slc">! A leaf</span>
       return
    end if

    t<span class="sym">%</span>data <span class="sym">=</span> Sphere<span class="sym">(</span>s<span class="sym">%</span>centre<span class="sym">,</span><span class="num">3</span><span class="sym">*</span>s<span class="sym">%</span>radius<span class="sym">)</span>
    call addChild<span class="sym">(</span>t<span class="sym">,</span>Tree<span class="sym">(</span>s<span class="sym">,</span>null<span class="sym">(),</span><span class="num">0</span><span class="sym">))</span>

    rn <span class="sym">=</span> t<span class="sym">%</span>data<span class="sym">%</span>radius<span class="sym">/</span>sqrt<span class="sym">(</span><span class="num">12.0</span>d0<span class="sym">)</span>
    d <span class="sym">=</span> <span class="num">0.5</span>d0<span class="sym">*</span>s<span class="sym">%</span>radius
    c <span class="sym">=</span> s<span class="sym">%</span>centre
    do i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span><span class="num">7</span><span class="sym">,</span><span class="num">2</span>
       call addChild<span class="sym">(</span>t<span class="sym">,</span>create<span class="sym">(</span>level<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>Sphere<span class="sym">(</span>c <span class="sym">+</span> rn<span class="sym">*(/</span>cen<span class="sym">(</span>i<span class="sym">),</span><span class="num">1.0</span>d0<span class="sym">,</span>cen<span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)/),</span>d<span class="sym">)))</span>
    end do
  end function create
end program ray_tracer
