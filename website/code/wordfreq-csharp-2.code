<span class="com">/* The Great Computer Language Shootout</span>
<span class="com"> *    http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Isaac Gouy</span>
<span class="com"> * modified by Joshua Tauberer */</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Globalization<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>IO<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">;</span>

<span class="kwa">class</span> WordFreq
<span class="sym">{</span>
   <span class="kwa">static</span> <span class="kwb">void</span> <span class="kwd">Main</span><span class="sym">()</span>
   <span class="sym">{</span>
      <span class="kwb">const int</span> size <span class="sym">=</span> <span class="num">4096</span><span class="sym">;</span>
      Hashtable wordCounts <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Hashtable</span><span class="sym">(</span><span class="num">4000</span><span class="sym">);</span>
      CultureInfo culture <span class="sym">=</span> CultureInfo<span class="sym">.</span>InvariantCulture<span class="sym">;</span>

      <span class="kwa">using</span> <span class="sym">(</span>StreamReader r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">StreamReader</span><span class="sym">(</span>Console<span class="sym">.</span><span class="kwd">OpenStandardInput</span><span class="sym">(</span>size<span class="sym">)))</span>
      <span class="sym">{</span>
         <span class="kwb">char</span><span class="sym">[]</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span>size<span class="sym">];</span>
         <span class="kwb">int</span> charsRead<span class="sym">;</span>

         <span class="kwb">bool</span> insideWord <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
         <span class="kwb">string</span> prefix <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>

         <span class="kwa">while</span> <span class="sym">((</span>charsRead <span class="sym">=</span> r<span class="sym">.</span><span class="kwd">Read</span><span class="sym">(</span>buffer<span class="sym">,</span><span class="num">0</span><span class="sym">,</span>size<span class="sym">)) &gt;</span> <span class="num">0</span><span class="sym">) {</span>
            <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>charsRead<span class="sym">;</span> j<span class="sym">++){</span>
               <span class="kwa">if</span> <span class="sym">(</span>Char<span class="sym">.</span><span class="kwd">IsLetter</span><span class="sym">(</span>buffer<span class="sym">[</span>j<span class="sym">])){</span>
                  <span class="kwa">if</span> <span class="sym">(!</span>insideWord<span class="sym">){</span>
                     insideWord <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;</span>
                     i <span class="sym">=</span> j<span class="sym">;</span>
                  <span class="sym">}</span>
               <span class="sym">}</span>
               <span class="kwa">else if</span> <span class="sym">(</span>insideWord<span class="sym">){</span>
                  insideWord <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;</span>
                  <span class="kwb">string</span> w <span class="sym">= (</span><span class="kwa">new</span> <span class="kwd">String</span><span class="sym">(</span>buffer<span class="sym">,</span>i<span class="sym">,</span>j<span class="sym">-</span>i<span class="sym">));</span>

                  <span class="kwa">if</span> <span class="sym">(</span>prefix <span class="sym">!=</span> <span class="kwa">null</span><span class="sym">){</span>
                     w <span class="sym">=</span> <span class="kwb">string</span><span class="sym">.</span><span class="kwd">Concat</span><span class="sym">(</span>prefix<span class="sym">,</span>w<span class="sym">);</span>
                     prefix <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>
                  <span class="sym">}</span>
                  w <span class="sym">=</span> w<span class="sym">.</span><span class="kwd">ToLower</span><span class="sym">(</span>culture<span class="sym">);</span>

                  <span class="kwb">object</span> item<span class="sym">;</span>
                  <span class="kwa">if</span> <span class="sym">((</span>item <span class="sym">=</span> wordCounts<span class="sym">[</span>w<span class="sym">]) !=</span> <span class="kwa">null</span><span class="sym">)</span>
                     <span class="sym">((</span>KeyValue<span class="sym">)</span>item<span class="sym">).</span>v<span class="sym">++;</span>
                  <span class="kwa">else</span>
                     wordCounts<span class="sym">[</span>w<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwd">KeyValue</span><span class="sym">(</span>w<span class="sym">,</span><span class="num">1</span><span class="sym">);</span>
               <span class="sym">}</span>
            <span class="sym">}</span>
            <span class="kwa">if</span> <span class="sym">(</span>insideWord<span class="sym">)</span> prefix <span class="sym">= (</span><span class="kwa">new</span> <span class="kwd">String</span><span class="sym">(</span>buffer<span class="sym">,</span>i<span class="sym">,</span>charsRead<span class="sym">-</span>i<span class="sym">));</span>
         <span class="sym">}</span>
      <span class="sym">}</span>

      KeyValue<span class="sym">[]</span> items <span class="sym">=</span> <span class="kwa">new</span> KeyValue<span class="sym">[</span>wordCounts<span class="sym">.</span>Count<span class="sym">];</span>
      wordCounts<span class="sym">.</span>Values<span class="sym">.</span><span class="kwd">CopyTo</span><span class="sym">(</span>items<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>

      Array<span class="sym">.</span><span class="kwd">Sort</span><span class="sym">(</span>items<span class="sym">,</span> <span class="kwa">new</span> <span class="kwd">SortByFrequencyAndWord</span><span class="sym">() );</span>

      <span class="kwa">foreach</span> <span class="sym">(</span>KeyValue each in items<span class="sym">) {</span>
         <span class="kwb">string</span> frequency <span class="sym">=</span> each<span class="sym">.</span>v<span class="sym">.</span><span class="kwd">ToString</span><span class="sym">().</span><span class="kwd">PadLeft</span><span class="sym">(</span><span class="num">7</span><span class="sym">);</span>
         Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;{0} {1}&quot;</span><span class="sym">,</span> frequency<span class="sym">,</span> each<span class="sym">.</span>k<span class="sym">);</span>
      <span class="sym">}</span>
   <span class="sym">}</span>


   <span class="kwa">private class</span> KeyValue
   <span class="sym">{</span>
      <span class="kwa">internal</span> String k<span class="sym">;</span>
      <span class="kwa">internal</span> <span class="kwb">int</span> v<span class="sym">;</span>

      <span class="kwa">internal</span> <span class="kwd">KeyValue</span><span class="sym">(</span>String k<span class="sym">,</span> <span class="kwb">int</span> v<span class="sym">) {</span>
         <span class="kwa">this</span><span class="sym">.</span>k <span class="sym">=</span> k<span class="sym">;</span>
         <span class="kwa">this</span><span class="sym">.</span>v <span class="sym">=</span> v<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>


   <span class="kwa">private class</span> SortByFrequencyAndWord <span class="sym">:</span> IComparer
   <span class="sym">{</span>
      CompareInfo comparer <span class="sym">=</span> CultureInfo<span class="sym">.</span>InvariantCulture<span class="sym">.</span>CompareInfo<span class="sym">;</span>

      <span class="kwa">public</span> <span class="kwd">SortByFrequencyAndWord</span><span class="sym">() {}</span>

      <span class="slc">// sort DictionaryEntry by Frequency, then by Word</span>
      <span class="kwb">int</span> IComparer<span class="sym">.</span><span class="kwd">Compare</span><span class="sym">(</span><span class="kwb">object</span> o1<span class="sym">,</span> <span class="kwb">object</span> o2<span class="sym">) {</span>
         KeyValue item1 <span class="sym">= (</span>KeyValue<span class="sym">)</span>o1<span class="sym">;</span>
         KeyValue item2 <span class="sym">= (</span>KeyValue<span class="sym">)</span>o2<span class="sym">;</span>

         <span class="kwb">int</span> comparison <span class="sym">=</span> item2<span class="sym">.</span>v<span class="sym">.</span><span class="kwd">CompareTo</span><span class="sym">(</span>item1<span class="sym">.</span>v<span class="sym">);</span>
         <span class="kwa">if</span> <span class="sym">(</span>comparison <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> comparer<span class="sym">.</span><span class="kwd">Compare</span><span class="sym">(</span>item2<span class="sym">.</span>k<span class="sym">,</span> item1<span class="sym">.</span>k<span class="sym">,</span> CompareOptions<span class="sym">.</span>Ordinal<span class="sym">);</span>
         <span class="kwa">else return</span> comparison<span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>

