<span class="com">{- The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   written by Tom Pledger, 13 Nov 2006</span>
<span class="com">-}</span>

<span class="kwa">import</span> Control.Concurrent
<span class="kwa">import</span> System

<span class="kwa">data</span> Colour <span class="sym">=</span> Red <span class="sym">|</span> Yellow <span class="sym">|</span> Blue <span class="sym">|</span> Faded
complement Red    Red    <span class="sym">=</span> Red
complement Red    Yellow <span class="sym">=</span> Blue
complement Red    Blue   <span class="sym">=</span> Yellow
complement Yellow Red    <span class="sym">=</span> Blue
complement Yellow Yellow <span class="sym">=</span> Yellow
complement Yellow Blue   <span class="sym">=</span> Red
complement Blue   Red    <span class="sym">=</span> Yellow
complement Blue   Yellow <span class="sym">=</span> Red
complement Blue   Blue   <span class="sym">=</span> Blue
complement _      _      <span class="sym">=</span> Faded

<span class="kwa">data</span> MeetingPlace
    <span class="sym">=</span> MP{ quota <span class="sym">:: !</span><span class="kwb">Int</span><span class="sym">,</span> waiter <span class="sym">:: !(</span>Maybe Colour<span class="sym">),</span> done <span class="sym">:: ![</span><span class="kwb">Int</span><span class="sym">]</span> }

main <span class="sym">=</span> <span class="kwa">do</span> args <span class="sym">&lt;-</span> getArgs
          mpv <span class="sym">&lt;-</span> newMVar MP{ quota <span class="sym">=</span> <span class="kwa">case</span> args <span class="kwa">of</span> <span class="sym">[] -&gt;</span> <span class="num">1000000</span><span class="sym">;</span> s<span class="sym">:</span>_ <span class="sym">-&gt;</span> read s<span class="sym">,</span>
                             waiter <span class="sym">=</span> Nothing<span class="sym">,</span> done <span class="sym">= []</span> }
          wakerv <span class="sym">&lt;-</span> newEmptyMVar

          <span class="kwa">let</span> arrive colour tally
                  <span class="sym">=</span> <span class="kwa">do</span> mp <span class="sym">&lt;-</span> takeMVar mpv
                       <span class="kwa">case</span> mp <span class="kwa">of</span>
                           MP{ quota <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> done <span class="sym">=</span> d }
                               <span class="slc">-- Faded now, but nobody wants to know</span>
                               <span class="sym">|</span> length d <span class="sym">==</span> length subCols
                                           <span class="sym">-&gt;</span> print <span class="sym">(</span>tally <span class="sym">+</span> sum d<span class="sym">)</span>
                               <span class="sym">|</span> otherwise <span class="sym">-&gt;</span> putMVar mpv mp{ done <span class="sym">=</span> tally<span class="sym">:</span>d }
                           MP{ waiter <span class="sym">=</span> Nothing }
                               <span class="sym">-&gt;</span> <span class="kwa">do</span> putMVar mpv mp{ waiter <span class="sym">=</span> Just colour }
                                     colour' <span class="sym">&lt;-</span> takeMVar wakerv
                                     arrive colour' $<span class="sym">!</span> tally <span class="sym">+</span> <span class="num">1</span>
                           MP{ quota <span class="sym">=</span> q<span class="sym">,</span> waiter <span class="sym">=</span> Just colour0 }
                               <span class="sym">-&gt;</span> <span class="kwa">do let</span> colour' <span class="sym">=</span> complement colour0 colour
                                     putMVar wakerv $<span class="sym">!</span> colour'
                                     putMVar mpv mp{ quota <span class="sym">=</span> q <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span>
                                                     waiter <span class="sym">=</span> Nothing }
                                     arrive colour' $<span class="sym">!</span> tally <span class="sym">+</span> <span class="num">1</span>
              subCols <span class="sym">= [</span>Blue<span class="sym">,</span> Red<span class="sym">,</span> Yellow<span class="sym">]</span>

          sequence_ <span class="sym">[</span>forkIO <span class="sym">(</span>arrive c <span class="num">0</span><span class="sym">) |</span> c <span class="sym">&lt;-</span> subCols<span class="sym">]</span>
          arrive Blue <span class="num">0</span>
          sequence_ <span class="sym">[</span>yield <span class="sym">|</span> c <span class="sym">&lt;-</span> subCols<span class="sym">]</span>
