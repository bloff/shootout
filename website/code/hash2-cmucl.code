<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">;;; -*- mode: lisp -*-
</FONT></I><I><FONT COLOR="#B22222">;;; $Id: hash2-cmucl.code,v 1.1 2004-11-02 08:52:31 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">;;; from Paul Foley
</FONT></I><I><FONT COLOR="#B22222">;;; Multi-lisp modifications by Brent Fulgham
</FONT></I>
(declaim (optimize (speed 3) (space 0) (safety 0) (debug 0) (compilation-speed 0)))
(defun command-line-argument ()
  (parse-integer (<B><FONT COLOR="#A020F0">or</FONT></B> (car (last #+sbcl sb-ext:*posix-argv*
                                #+cmu  ext:*command-line-strings*)) <B><FONT COLOR="#BC8F8F">&quot;1&quot;</FONT></B>)))

(defconstant +digit+ <B><FONT COLOR="#BC8F8F">&quot;0123456789&quot;</FONT></B>)

(defconstant +digits-needed+
  '(10 100 1000 10000 100000 10000000 100000000 536870911))

(defun fixnum-to-foo-string (n)
  (declare (fixnum n))
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((size (+ 4 (position-if (<B><FONT COLOR="#A020F0">lambda</FONT></B> (x) (&gt; (the fixnum x) n))
                                 +digits-needed+)))
	 (result (make-string (1+ size))))
    (replace result <B><FONT COLOR="#BC8F8F">&quot;foo_&quot;</FONT></B>)
    (loop for i fixnum from size downto 4 with q fixnum = n <B><FONT COLOR="#A020F0">and</FONT></B> r fixnum = 0
      <B><FONT COLOR="#A020F0">do</FONT></B> (multiple-value-setq (q r) (floor q 10))
         (setf (schar result i) (aref +digit+ r)))
    result))

(defun main (&amp;optional (n (command-line-argument)))
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((hash1 (make-hash-table <B><FONT COLOR="#5F9EA0">:test</FONT></B> 'equal <B><FONT COLOR="#5F9EA0">:size</FONT></B> n))
        (hash2 (make-hash-table <B><FONT COLOR="#5F9EA0">:test</FONT></B> 'equal <B><FONT COLOR="#5F9EA0">:size</FONT></B> n)))
    (macrolet ((hash1 (i) `(gethash (fixnum-to-foo-string ,i) hash1))
               (hash2 (i) `(gethash (fixnum-to-foo-string ,i) hash2)))
      (loop for i fixnum below 10000 <B><FONT COLOR="#A020F0">do</FONT></B> (setf (hash1 i) i))
      (loop for i fixnum below n <B><FONT COLOR="#A020F0">do</FONT></B>
        (maphash (<B><FONT COLOR="#A020F0">lambda</FONT></B> (k v)
                   (declare (fixnum v))
                   (incf (the fixnum (gethash k hash2 0)) v))
                 hash1))
      (format t <B><FONT COLOR="#BC8F8F">&quot;~D ~D ~D ~D~%&quot;</FONT></B> (hash1 1) (hash1 9999) (hash2 1) (hash2 9999)))))</pre></td></tr></table>
