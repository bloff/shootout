<span class="com">/* -*- mode: c -*-
 * $Id: lists2-icc.code,v 1.3 2005-03-18 03:44:17 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 */</span>

<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;string.h&gt;
</span><span class="dir">#include &lt;unistd.h&gt;
</span>
<span class="slc">// a simple Double Linked List
</span><span class="slc">// the head node is special, it's val is length of list
</span><span class="kwc">typedef</span> <span class="kwb">struct</span> DLL <span class="sym">{
</span>    <span class="kwb">int</span> val<span class="sym">;
</span>    <span class="kwb">struct</span> DLL <span class="sym">*</span>next<span class="sym">;</span>	<span class="com">/* points to next or head (if at tail) */</span>
    <span class="kwb">struct</span> DLL <span class="sym">*</span>prev<span class="sym">;</span>	<span class="com">/* points to prev or tail (if at head) */</span>
<span class="sym">}</span> DLL<span class="sym">;

</span><span class="kwc">inline</span> <span class="kwb">int</span> list_length<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span>head<span class="sym">-&gt;</span>val<span class="sym">); }
</span><span class="kwc">inline</span> <span class="kwb">int</span> list_empty<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span>list_length<span class="sym">(</span>head<span class="sym">) ==</span> <span class="num">0</span><span class="sym">); }
</span><span class="kwc">inline</span> DLL <span class="sym">*</span>list_first<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span>head<span class="sym">-&gt;</span>next<span class="sym">); }
</span><span class="kwc">inline</span> DLL <span class="sym">*</span>list_last<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span>head<span class="sym">-&gt;</span>prev<span class="sym">); }

</span><span class="kwb">void</span> list_push_tail<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">,</span> DLL <span class="sym">*</span>item<span class="sym">) {
</span>    DLL <span class="sym">*</span>tail <span class="sym">=</span> head<span class="sym">-&gt;</span>prev<span class="sym">;
</span>    tail<span class="sym">-&gt;</span>next <span class="sym">=</span> item<span class="sym">;
</span>    item<span class="sym">-&gt;</span>next <span class="sym">=</span> head<span class="sym">;
</span>    head<span class="sym">-&gt;</span>prev <span class="sym">=</span> item<span class="sym">;
</span>    item<span class="sym">-&gt;</span>prev <span class="sym">=</span> tail<span class="sym">;
</span>    head<span class="sym">-&gt;</span>val<span class="sym">++;
}

</span>DLL <span class="sym">*</span>list_pop_tail<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">) {
</span>    DLL <span class="sym">*</span>prev<span class="sym">, *</span>tail<span class="sym">;
</span>    <span class="kwa">if</span> <span class="sym">(</span>list_empty<span class="sym">(</span>head<span class="sym">))</span> <span class="kwa">return</span><span class="sym">(</span>NULL<span class="sym">);
</span>    tail <span class="sym">=</span> head<span class="sym">-&gt;</span>prev<span class="sym">;
</span>    prev <span class="sym">=</span> tail<span class="sym">-&gt;</span>prev<span class="sym">;
</span>    prev<span class="sym">-&gt;</span>next <span class="sym">=</span> head<span class="sym">;
</span>    head<span class="sym">-&gt;</span>prev <span class="sym">=</span> prev<span class="sym">;
</span>    head<span class="sym">-&gt;</span>val<span class="sym">--;
</span>    <span class="kwa">return</span><span class="sym">(</span>tail<span class="sym">);
}

</span><span class="kwb">void</span> list_push_head<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">,</span> DLL <span class="sym">*</span>item<span class="sym">) {
</span>    DLL <span class="sym">*</span>next <span class="sym">=</span> head<span class="sym">-&gt;</span>next<span class="sym">;
</span>    head<span class="sym">-&gt;</span>next <span class="sym">=</span> item<span class="sym">;
</span>    next<span class="sym">-&gt;</span>prev <span class="sym">=</span> item<span class="sym">;
</span>    item<span class="sym">-&gt;</span>next <span class="sym">=</span> next<span class="sym">;
</span>    item<span class="sym">-&gt;</span>prev <span class="sym">=</span> head<span class="sym">;
</span>    head<span class="sym">-&gt;</span>val<span class="sym">++;
}

</span>DLL <span class="sym">*</span>list_pop_head<span class="sym">(</span>DLL <span class="sym">*</span>head<span class="sym">) {
</span>    DLL <span class="sym">*</span>next<span class="sym">;
</span>    <span class="kwa">if</span> <span class="sym">(</span>list_empty<span class="sym">(</span>head<span class="sym">))</span> <span class="kwa">return</span><span class="sym">(</span>NULL<span class="sym">);
</span>    next <span class="sym">=</span> head<span class="sym">-&gt;</span>next<span class="sym">;
</span>    head<span class="sym">-&gt;</span>next <span class="sym">=</span> next<span class="sym">-&gt;</span>next<span class="sym">;
</span>    next<span class="sym">-&gt;</span>next<span class="sym">-&gt;</span>prev <span class="sym">=</span> head<span class="sym">;
</span>    head<span class="sym">-&gt;</span>val<span class="sym">--;
</span>    <span class="kwa">return</span><span class="sym">(</span>next<span class="sym">);
}

</span>DLL <span class="sym">*</span>list_new_item<span class="sym">(</span><span class="kwb">int</span> v<span class="sym">) {
</span>    DLL <span class="sym">*</span>l <span class="sym">= (</span>DLL <span class="sym">*)</span>malloc<span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span>DLL<span class="sym">));
</span>    l<span class="sym">-&gt;</span>next <span class="sym">=</span> l<span class="sym">;
</span>    l<span class="sym">-&gt;</span>prev <span class="sym">=</span> l<span class="sym">;
</span>    l<span class="sym">-&gt;</span>val <span class="sym">=</span> v<span class="sym">;
</span>    <span class="kwa">return</span><span class="sym">(</span>l<span class="sym">);
}

</span><span class="kwc">inline</span> DLL<span class="sym">*</span> list_create<span class="sym">()  {</span> <span class="kwa">return</span><span class="sym">(</span>list_new_item<span class="sym">(</span><span class="num">0</span><span class="sym">)); }

</span><span class="kwb">void</span> dump_list<span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>msg<span class="sym">,</span> DLL <span class="sym">*</span>x<span class="sym">) {
</span>    DLL <span class="sym">*</span>xp <span class="sym">=</span> NULL<span class="sym">, *</span>first <span class="sym">=</span> list_first<span class="sym">(</span>x<span class="sym">);
</span>    <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> len <span class="sym">=</span> list_length<span class="sym">(</span>x<span class="sym">);
</span>    fputs<span class="sym">(</span>msg<span class="sym">,</span> stdout<span class="sym">);
</span>    printf<span class="sym">(</span><span class="str">&quot;length: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> len<span class="sym">);
</span>    <span class="kwa">if</span> <span class="sym">(</span>len <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
</span>	<span class="kwa">for</span> <span class="sym">(</span>xp<span class="sym">=</span>x<span class="sym">-&gt;</span>next<span class="sym">;</span> xp<span class="sym">-&gt;</span>next <span class="sym">!=</span> first<span class="sym">;</span> xp<span class="sym">=</span>xp<span class="sym">-&gt;</span>next<span class="sym">) {
</span>	    printf<span class="sym">(</span><span class="str">&quot;i:%3d  v:%3d  n:%3d  p:%3d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, ++</span>i<span class="sym">,
</span>		   xp<span class="sym">-&gt;</span>val<span class="sym">,</span> xp<span class="sym">-&gt;</span>next<span class="sym">-&gt;</span>val<span class="sym">,</span> xp<span class="sym">-&gt;</span>prev<span class="sym">-&gt;</span>val<span class="sym">);
	}
</span>	printf<span class="sym">(</span><span class="str">&quot;[val of next of tail is:  %d]</span><span class="esc">\n\n</span><span class="str">&quot;</span><span class="sym">,</span> xp<span class="sym">-&gt;</span>next<span class="sym">-&gt;</span>val<span class="sym">);
    }
</span>    <span class="slc">// printf(&quot;[last entry points to list head]\n&quot;);
</span><span class="sym">}

</span><span class="kwb">void</span> print_list<span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>msg<span class="sym">,</span> DLL <span class="sym">*</span>x<span class="sym">) {
</span>    DLL <span class="sym">*</span>xp <span class="sym">=</span> NULL<span class="sym">, *</span>first <span class="sym">=</span> list_first<span class="sym">(</span>x<span class="sym">);
</span>    <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    fputs<span class="sym">(</span>msg<span class="sym">,</span> stdout<span class="sym">);
</span>    <span class="kwa">if</span> <span class="sym">(</span>list_length<span class="sym">(</span>x<span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">) {
</span>	<span class="kwa">for</span> <span class="sym">(</span>xp<span class="sym">=</span>x<span class="sym">-&gt;</span>next<span class="sym">;</span> xp<span class="sym">-&gt;</span>next <span class="sym">!=</span> first<span class="sym">;</span> xp<span class="sym">=</span>xp<span class="sym">-&gt;</span>next<span class="sym">) {
</span>	    printf<span class="sym">(</span><span class="str">&quot;%d &quot;</span><span class="sym">,</span> xp<span class="sym">-&gt;</span>val<span class="sym">);
	}
    }
</span>    printf<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
}

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">int</span> i<span class="sym">,</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span>    DLL <span class="sym">*</span>p<span class="sym">, *</span>A<span class="sym">, *</span>B<span class="sym">;

</span>    <span class="slc">// create a list of integers (li1) from 1 to N
</span>    A <span class="sym">=</span> list_create<span class="sym">();
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span>n<span class="sym">;</span> i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">--) {
</span>	list_push_head<span class="sym">(</span>A<span class="sym">,</span> list_new_item<span class="sym">(</span>i<span class="sym">));
    }
</span>    B <span class="sym">=</span> list_create<span class="sym">();

</span>    <span class="kwa">while</span> <span class="sym">(!</span>list_empty<span class="sym">(</span>A<span class="sym">)) {
</span>	list_push_tail<span class="sym">(</span>B<span class="sym">,</span> list_pop_head<span class="sym">(</span>A<span class="sym">));
</span>	list_push_tail<span class="sym">(</span>B<span class="sym">,</span> list_pop_tail<span class="sym">(</span>A<span class="sym">));
    }
</span>    <span class="kwa">while</span> <span class="sym">(!</span>list_empty<span class="sym">(</span>B<span class="sym">)) {
</span>	list_push_head<span class="sym">(</span>A<span class="sym">,</span> list_pop_tail<span class="sym">(</span>B<span class="sym">));
</span>	list_push_head<span class="sym">(</span>A<span class="sym">,</span> list_pop_head<span class="sym">(</span>B<span class="sym">));
    }
</span>    printf<span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> list_length<span class="sym">(</span>A<span class="sym">));
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> p<span class="sym">=</span>list_first<span class="sym">(</span>A<span class="sym">);</span> p <span class="sym">!=</span> list_last<span class="sym">(</span>A<span class="sym">) &amp;&amp;</span> i<span class="sym">&lt;</span><span class="num">10</span><span class="sym">;</span> i<span class="sym">++,</span> p<span class="sym">=</span>p<span class="sym">-&gt;</span>next<span class="sym">) {
</span>	printf<span class="sym">(</span><span class="str">&quot;%d%s&quot;</span><span class="sym">,</span> p<span class="sym">-&gt;</span>val<span class="sym">, (</span>i<span class="sym">&lt;</span><span class="num">9</span><span class="sym">)</span> ? <span class="str">&quot; &quot;</span> <span class="sym">:</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
    }
</span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}</span>
