<span class="line">    1 </span><span class="sym">/*</span> The Great Computer Language Shootout
<span class="line">    2 </span>     http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/
</span><span class="line">    3 </span><span class="sym"> 
</span><span class="line">    4 </span><span class="sym"> </span>   contributed by Isaac Gouy <span class="sym">(</span>Clean novice<span class="sym">)
</span><span class="line">    5 </span><span class="sym"> </span>   updated by John van Groningen <span class="sym">(</span>Clean Guru<span class="sym">!)
</span><span class="line">    6 </span><span class="sym"> 
</span><span class="line">    7 </span><span class="sym">    </span>   Clean is a functional programming language.
<span class="line">    8 </span>     Existential <span class="kwa">type</span> variable have some vague similarity
<span class="line">    9 </span>    so NToggle delegates function calls to Toggle.
<span class="line">   10 </span>
<span class="line">   11 </span>  To compile<span class="sym">:
</span><span class="line">   12 </span><span class="sym">         </span>   cleanIDE.exe <span class="slc">--batch-force-build &quot;e:\shoot\contrib\clean\methcall.prj&quot; 
</span><span class="line">   13 </span><span class="slc"></span>
<span class="line">   14 </span> To run<span class="sym">:
</span><span class="line">   15 </span><span class="sym"> </span>   methcall.exe <span class="sym">-</span>con <span class="num">1000000
</span><span class="line">   16 </span><span class="num"> </span><span class="sym">*/
</span><span class="line">   17 </span><span class="sym"> 
</span><span class="line">   18 </span><span class="sym"> 
</span><span class="line">   19 </span><span class="sym"> </span><span class="kwa">module</span> methcall
<span class="line">   20 </span>
<span class="line">   21 </span>  <span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout
<span class="line">   22 </span>
<span class="line">   23 </span>  Start
<span class="line">   24 </span>         # toggle <span class="sym">=</span> makeToggle <span class="kwa">True
</span><span class="line">   25 </span><span class="kwa"> </span>        # toggleValue <span class="sym">=</span> loop argi toggle <span class="kwa">False
</span><span class="line">   26 </span><span class="kwa"> </span>        # ntoggle <span class="sym">=</span> makeNToggle <span class="kwa">True</span> <span class="num">3
</span><span class="line">   27 </span><span class="num"> </span>        # ntoggleValue <span class="sym">=</span> loop argi ntoggle <span class="kwa">False
</span><span class="line">   28 </span><span class="kwa">         </span>        <span class="sym">=</span> toLString toggleValue <span class="sym">+++</span> <span class="str">&quot;\n&quot;</span> <span class="sym">+++
</span><span class="line">   29 </span><span class="sym">  </span>          toLString ntoggleValue <span class="sym">+++</span> <span class="str">&quot;\n&quot;</span>
<span class="line">   30 </span>
<span class="line">   31 </span>          <span class="kwa">where
</span><span class="line">   32 </span><span class="kwa">          </span>        loop <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span>.Toggler <span class="sym">!</span><span class="kwb">Bool</span> <span class="sym">-&gt;</span> <span class="kwb">Bool
</span><span class="line">   33 </span><span class="kwb"> </span>        loop n t v
<span class="line">   34 </span>                 <span class="sym">|</span> n <span class="sym">==</span> <span class="num">0</span> <span class="sym">=</span> v
<span class="line">   35 </span>                 # t <span class="sym">=</span> activate t
<span class="line">   36 </span>                 # v <span class="sym">=</span> value t
<span class="line">   37 </span>                 <span class="sym">=</span> loop <span class="sym">(</span>n<span class="num">-1</span><span class="sym">)</span> t v
<span class="line">   38 </span>
<span class="line">   39 </span>                          toLString b
<span class="line">   40 </span>                 <span class="sym">|</span> b <span class="sym">=</span> <span class="str">&quot;true&quot;</span>
<span class="line">   41 </span>                     <span class="sym">=</span> <span class="str">&quot;false&quot;</span>
<span class="line">   42 </span>
<span class="line">   43 </span>
<span class="line">   44 </span>   <span class="sym">::</span> Toggler <span class="sym">=</span> E.a<span class="sym">:</span> { state <span class="sym">::</span> a
<span class="line">   45 </span>                   <span class="sym">,</span> activate_ <span class="sym">:: !</span> a <span class="sym">-&gt;</span> a
<span class="line">   46 </span>                   <span class="sym">,</span> value_ <span class="sym">:: !</span> a <span class="sym">-&gt;</span> <span class="kwb">Bool
</span><span class="line">   47 </span><span class="kwb"> </span>                  }
<span class="line">   48 </span>
<span class="line">   49 </span>                   value o<span class="sym">=:</span>{state<span class="sym">,</span>value_} <span class="sym">=</span> value_ state
<span class="line">   50 </span> activate o<span class="sym">=:</span>{state<span class="sym">,</span>activate_} <span class="sym">=</span> {o <span class="sym">&amp;</span> state <span class="sym">=</span> activate_ state}
<span class="line">   51 </span>
<span class="line">   52 </span>  makeToggle b <span class="sym">=
</span><span class="line">   53 </span><span class="sym"> </span>        { state <span class="sym">=</span> b
<span class="line">   54 </span>
<span class="line">   55 </span>                  <span class="sym">,</span> activate_ <span class="sym">=</span> \ state <span class="sym">-&gt;</span> not state
<span class="line">   56 </span>
<span class="line">   57 </span>                  <span class="sym">,</span> value_ <span class="sym">=</span> \ state <span class="sym">-&gt;</span> state
<span class="line">   58 </span>         }
<span class="line">   59 </span>
<span class="line">   60 </span>  <span class="sym">::</span> TogglerR <span class="sym">= !</span> { t <span class="sym">:: !</span>Toggler<span class="sym">,</span> max <span class="sym">:: !</span><span class="kwb">Int</span><span class="sym">,</span> count <span class="sym">:: !</span><span class="kwb">Int</span>}
<span class="line">   61 </span>
<span class="line">   62 </span>  makeNToggle b max <span class="sym">=
</span><span class="line">   63 </span><span class="sym"> </span>        { state <span class="sym">=</span> {t <span class="sym">=</span> makeToggle b<span class="sym">,</span> max<span class="sym">=</span>max<span class="sym">,</span> count <span class="sym">=</span> <span class="num">0</span>}
<span class="line">   64 </span>
<span class="line">   65 </span>                  <span class="sym">,</span> activate_ <span class="sym">=</span> \ {t<span class="sym">,</span> max<span class="sym">,</span> count} <span class="sym">-&gt;
</span><span class="line">   66 </span><span class="sym">  </span>                if <span class="sym">(</span>count<span class="sym">+</span><span class="num">1</span> <span class="sym">&gt;=</span> max<span class="sym">)
</span><span class="line">   67 </span><span class="sym"> </span>                        {t<span class="sym">=</span>activate t<span class="sym">,</span> max<span class="sym">=</span>max<span class="sym">,</span> count<span class="sym">=</span><span class="num">0</span>}
<span class="line">   68 </span>                         {t<span class="sym">=</span>t<span class="sym">,</span> max<span class="sym">=</span>max<span class="sym">,</span> count<span class="sym">=</span>count<span class="sym">+</span><span class="num">1</span>}
<span class="line">   69 </span>
<span class="line">   70 </span>                                  <span class="sym">,</span> value_ <span class="sym">=</span> \ {t} <span class="sym">-&gt;</span> value t
<span class="line">   71 </span>         } 
