<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy (Clean novice)
   updated by John van Groningen (Clean Guru!)
   
   Clean is a functional programming language. 
   Existential <B><FONT COLOR="#A020F0">type</FONT></B> variable have some vague similarity
   so NToggle delegates function calls <B><FONT COLOR="#A020F0">to</FONT></B> Toggle.

To compile:	
   cleanIDE.exe <I><FONT COLOR="#B22222">--batch-force-build &quot;e:\shoot\contrib\clean\methcall.prj&quot;
</FONT></I>
To run:
   methcall.exe -con 1000000
*/


<B><FONT COLOR="#A020F0">module</FONT></B> methcall

<B><FONT COLOR="#A020F0">import</FONT></B> StdEnv, LanguageShootout

Start
	# toggle = makeToggle True
	# toggleValue = loop argi toggle False
	# ntoggle = makeNToggle True 3
	# ntoggleValue = loop argi ntoggle False	
	= toLString toggleValue +++ <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B> +++ 
	  toLString ntoggleValue +++ <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>

	<B><FONT COLOR="#A020F0">where</FONT></B> 	
	loop <B><FONT COLOR="#228B22">:: !Int !.Toggler !Bool -&gt; Bool
</FONT></B>	loop n t v
		| n == 0 = v
		# t = activate t
		# v = value t
		= loop (n-1) t v
		
	toLString b
		| b = <B><FONT COLOR="#BC8F8F">&quot;true&quot;</FONT></B>
		    = <B><FONT COLOR="#BC8F8F">&quot;false&quot;</FONT></B>


<B><FONT COLOR="#228B22">:: Toggler = E.a: { state :: a
</FONT></B>                  , activate_ <B><FONT COLOR="#228B22">:: ! a -&gt; a
</FONT></B>                  , value_ <B><FONT COLOR="#228B22">:: ! a -&gt; Bool
</FONT></B>                  }
                 
value o=:{state,value_} = value_ state
activate o=:{state,activate_} = {o &amp; state = activate_ state}

makeToggle b =
	{ state = b
	
	, activate_ = \ state -&gt; not state
	
	, value_ = \ state -&gt; state
	}

<B><FONT COLOR="#228B22">:: TogglerR = ! { t :: !Toggler, max :: !Int, count :: !Int}
</FONT></B>
makeNToggle b max =
	{ state = {t = makeToggle b, max=max, count = 0}
	
	, activate_ = \ {t, max, count} -&gt; 
		<B><FONT COLOR="#A020F0">if</FONT></B> (count+1 &gt;= max)
			{t=activate t, max=max, count=0}
			{t=t, max=max, count=count+1}
			
	, value_ = \ {t} -&gt; value t
	}</pre></td></tr></table>
