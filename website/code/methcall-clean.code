<span class="sym">/*</span> The Great Computer Language Shootout
   http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>

   contributed by Isaac Gouy <span class="sym">(</span>Clean novice<span class="sym">)</span>
   updated by John van Groningen <span class="sym">(</span>Clean Guru<span class="sym">!)</span>

   Clean is a functional programming language.
   Existential <span class="kwa">type</span> variable have some vague similarity
   so NToggle delegates function calls to Toggle.
<span class="sym">*/</span>

<span class="kwa">module</span> methcall
<span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout

Start
   # toggle <span class="sym">=</span> makeToggle <span class="kwa">True</span>
   # toggleValue <span class="sym">=</span> loop argi toggle <span class="kwa">False</span>
   # ntoggle <span class="sym">=</span> makeNToggle <span class="kwa">True</span> <span class="num">3</span>
   # ntoggleValue <span class="sym">=</span> loop argi ntoggle <span class="kwa">False</span>
   <span class="sym">=</span> toLString toggleValue <span class="sym">+++</span> <span class="str">&quot;\n&quot;</span> <span class="sym">+++</span>
      toLString ntoggleValue <span class="sym">+++</span> <span class="str">&quot;\n&quot;</span>

   <span class="kwa">where</span>
   loop <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span>.Toggler <span class="sym">!</span><span class="kwb">Bool</span> <span class="sym">-&gt;</span> <span class="kwb">Bool</span>
   loop n t v
      <span class="sym">|</span> n <span class="sym">==</span> <span class="num">0</span> <span class="sym">=</span> v
      # t <span class="sym">=</span> activate t
      # v <span class="sym">=</span> value t
      <span class="sym">=</span> loop <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> t v

   toLString b
      <span class="sym">|</span> b <span class="sym">=</span> <span class="str">&quot;true&quot;</span>
      <span class="sym">=</span> <span class="str">&quot;false&quot;</span>

<span class="sym">::</span> Toggler <span class="sym">=</span>
   E.a<span class="sym">:</span> { state <span class="sym">::</span> a
        <span class="sym">,</span> activate_ <span class="sym">:: !</span> a <span class="sym">-&gt;</span> a
        <span class="sym">,</span> value_ <span class="sym">:: !</span> a <span class="sym">-&gt;</span> <span class="kwb">Bool</span>
        }

value o<span class="sym">=:</span>{state<span class="sym">,</span>value_} <span class="sym">=</span> value_ state
activate o<span class="sym">=:</span>{state<span class="sym">,</span>activate_} <span class="sym">=</span> {o <span class="sym">&amp;</span> state <span class="sym">=</span> activate_ state}

makeToggle b <span class="sym">=</span>
   { state <span class="sym">=</span> b
   <span class="sym">,</span> activate_ <span class="sym">=</span> \ state <span class="sym">-&gt;</span> not state
   <span class="sym">,</span> value_ <span class="sym">=</span> \ state <span class="sym">-&gt;</span> state
   }

<span class="sym">::</span> TogglerR <span class="sym">= !</span> { t <span class="sym">:: !</span>Toggler<span class="sym">,</span> max <span class="sym">:: !</span><span class="kwb">Int</span><span class="sym">,</span> count <span class="sym">:: !</span><span class="kwb">Int</span>}

makeNToggle b max <span class="sym">=</span>
  { state <span class="sym">=</span> {t <span class="sym">=</span> makeToggle b<span class="sym">,</span> max<span class="sym">=</span>max<span class="sym">,</span> count <span class="sym">=</span> <span class="num">0</span>}
   <span class="sym">,</span> activate_ <span class="sym">=</span> \ {t<span class="sym">,</span> max<span class="sym">,</span> count} <span class="sym">-&gt;</span>
      if <span class="sym">(</span>count<span class="sym">+</span><span class="num">1</span> <span class="sym">&gt;=</span> max<span class="sym">)</span>
         {t<span class="sym">=</span>activate t<span class="sym">,</span> max<span class="sym">=</span>max<span class="sym">,</span> count<span class="sym">=</span><span class="num">0</span>}
         {t<span class="sym">=</span>t<span class="sym">,</span> max<span class="sym">=</span>max<span class="sym">,</span> count<span class="sym">=</span>count<span class="sym">+</span><span class="num">1</span>}
   <span class="sym">,</span> value_ <span class="sym">=</span> \ {t} <span class="sym">-&gt;</span> value t
   }

