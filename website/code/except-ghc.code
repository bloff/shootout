<span class="line">    1 </span><span class="slc">-- $Id: except-ghc.code,v 1.4 2004-11-13 07:41:31 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://shootout.alioth.debian.org
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">--
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">-- from Simon Marlow
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="kwa">import</span> System
<span class="line">    7 </span><span class="kwa">import</span> Control.Exception <span class="kwa">as</span> Exception
<span class="line">    8 </span><span class="kwa">import</span> Data.IORef
<span class="line">    9 </span>
<span class="line">   10 </span>blowup n <span class="sym">|</span> even n    <span class="sym">=</span> throw <span class="sym">(</span>ErrorCall <span class="str">&quot;H&quot;</span><span class="sym">)
</span><span class="line">   11 </span><span class="sym">         |</span> otherwise <span class="sym">=</span> throw <span class="sym">(</span>ErrorCall <span class="str">&quot;L&quot;</span><span class="sym">)
</span><span class="line">   12 </span><span class="sym">
</span><span class="line">   13 </span><span class="sym"></span>lo_function lo n <span class="sym">=
</span><span class="line">   14 </span><span class="sym"></span>  Exception.catch <span class="sym">(</span>blowup n<span class="sym">)</span> $
<span class="line">   15 </span>    \ex <span class="sym">-&gt;</span> <span class="kwa">case</span> ex <span class="kwa">of
</span><span class="line">   16 </span><span class="kwa"></span>                ErrorCall <span class="str">&quot;L&quot;</span> <span class="sym">-&gt;</span> <span class="kwa">do</span> nlo <span class="sym">&lt;-</span> readIORef lo
<span class="line">   17 </span>                                    writeIORef lo $<span class="sym">! (</span>nlo <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span><span class="line">   18 </span><span class="sym"></span>                _ <span class="sym">-&gt;</span> throw ex
<span class="line">   19 </span>
<span class="line">   20 </span>hi_function hi lo n <span class="sym">=
</span><span class="line">   21 </span><span class="sym"></span>  Exception.catch <span class="sym">(</span>lo_function lo n<span class="sym">)</span> $
<span class="line">   22 </span>    \ex <span class="sym">-&gt;</span> <span class="kwa">case</span> ex <span class="kwa">of
</span><span class="line">   23 </span><span class="kwa"></span>                ErrorCall <span class="str">&quot;H&quot;</span> <span class="sym">-&gt;</span> <span class="kwa">do</span> nhi <span class="sym">&lt;-</span> readIORef hi
<span class="line">   24 </span>                                    writeIORef hi $<span class="sym">! (</span>nhi <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span><span class="line">   25 </span><span class="sym"></span>                _ <span class="sym">-&gt;</span> throw ex
<span class="line">   26 </span>
<span class="line">   27 </span>some_function hi lo n <span class="sym">=</span> hi_function hi lo n
<span class="line">   28 </span>
<span class="line">   29 </span>main <span class="sym">=</span> <span class="kwa">do
</span><span class="line">   30 </span><span class="kwa"></span>  <span class="sym">[</span>arg<span class="sym">] &lt;-</span> getArgs
<span class="line">   31 </span>  <span class="kwa">let</span> n <span class="sym">=</span> read arg <span class="sym">::</span> <span class="kwb">Int
</span><span class="line">   32 </span><span class="kwb"></span>  hi <span class="sym">&lt;-</span> newIORef <span class="sym">(</span><span class="num">0</span> <span class="sym">::</span> <span class="kwb">Int</span><span class="sym">)
</span><span class="line">   33 </span><span class="sym"></span>  lo <span class="sym">&lt;-</span> newIORef <span class="sym">(</span><span class="num">0</span> <span class="sym">::</span> <span class="kwb">Int</span><span class="sym">)
</span><span class="line">   34 </span><span class="sym"></span>  mapM_ <span class="sym">(</span>some_function hi lo<span class="sym">) [</span>n<span class="sym">,</span>n<span class="num">-1</span>.<span class="num">.1</span><span class="sym">]
</span><span class="line">   35 </span><span class="sym"></span>  nhi <span class="sym">&lt;-</span> readIORef hi
<span class="line">   36 </span>  nlo <span class="sym">&lt;-</span> readIORef lo
<span class="line">   37 </span>  putStrLn <span class="sym">(</span><span class="str">&quot;Exceptions: HI=&quot;</span> <span class="sym">++</span> show nhi <span class="sym">++</span> <span class="str">&quot; / LO=&quot;</span> <span class="sym">++</span> show nlo<span class="sym">)
</span><span class="line">   38 </span><span class="sym"></span>
