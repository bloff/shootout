<span class="slc">-- $Id: except-ghc.code,v 1.6 2005-03-19 07:50:14 bfulgham Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org
</span><span class="slc">--
</span><span class="slc">-- from Simon Marlow
</span>
<span class="kwa">import</span> System
<span class="kwa">import</span> Control.Exception <span class="kwa">as</span> Exception
<span class="kwa">import</span> Data.IORef

blowup n <span class="sym">|</span> even n    <span class="sym">=</span> throw <span class="sym">(</span>ErrorCall <span class="str">&quot;H&quot;</span><span class="sym">)
	 |</span> otherwise <span class="sym">=</span> throw <span class="sym">(</span>ErrorCall <span class="str">&quot;L&quot;</span><span class="sym">)

</span>lo_function lo n <span class="sym">=
</span>  Exception.catch <span class="sym">(</span>blowup n<span class="sym">)</span> $
    \ex <span class="sym">-&gt;</span> <span class="kwa">case</span> ex <span class="kwa">of
</span>		ErrorCall <span class="str">&quot;L&quot;</span> <span class="sym">-&gt;</span> <span class="kwa">do</span> nlo <span class="sym">&lt;-</span> readIORef lo
				    writeIORef lo $<span class="sym">! (</span>nlo <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span>		_ <span class="sym">-&gt;</span> throw ex

hi_function hi lo n <span class="sym">=
</span>  Exception.catch <span class="sym">(</span>lo_function lo n<span class="sym">)</span> $
    \ex <span class="sym">-&gt;</span> <span class="kwa">case</span> ex <span class="kwa">of
</span>		ErrorCall <span class="str">&quot;H&quot;</span> <span class="sym">-&gt;</span> <span class="kwa">do</span> nhi <span class="sym">&lt;-</span> readIORef hi
				    writeIORef hi $<span class="sym">! (</span>nhi <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span>		_ <span class="sym">-&gt;</span> throw ex

some_function hi lo n <span class="sym">=</span> hi_function hi lo n

main <span class="sym">=</span> <span class="kwa">do
</span>  <span class="sym">[</span>arg<span class="sym">] &lt;-</span> getArgs
  <span class="kwa">let</span> n <span class="sym">=</span> read arg <span class="sym">::</span> <span class="kwb">Int
</span>  hi <span class="sym">&lt;-</span> newIORef <span class="sym">(</span><span class="num">0</span> <span class="sym">::</span> <span class="kwb">Int</span><span class="sym">)
</span>  lo <span class="sym">&lt;-</span> newIORef <span class="sym">(</span><span class="num">0</span> <span class="sym">::</span> <span class="kwb">Int</span><span class="sym">)
</span>  mapM_ <span class="sym">(</span>some_function hi lo<span class="sym">) [</span>n<span class="sym">,</span>n<span class="num">-1</span>.<span class="num">.1</span><span class="sym">]
</span>  nhi <span class="sym">&lt;-</span> readIORef hi
  nlo <span class="sym">&lt;-</span> readIORef lo
  putStrLn <span class="sym">(</span><span class="str">&quot;Exceptions: HI=&quot;</span> <span class="sym">++</span> show nhi <span class="sym">++</span> <span class="str">&quot; / LO=&quot;</span> <span class="sym">++</span> show nlo<span class="sym">)
</span>
