<span class="com">{ The Great Computer Language Shootout</span>
<span class="com">  http://shootout.alioth.debian.org</span>
<span class="com"></span>
<span class="com">  contributed by Ales Katona</span>
<span class="com">  modified by Marc Weustink</span>
<span class="com">}</span>

<span class="kwa">program</span> tcpecho<span class="sym">;</span>

<span class="com">{$mode objfpc}</span><span class="com">{$H-}</span><span class="com">{$I-}</span>

<span class="kwa">uses</span>
  Sockets<span class="sym">,</span> BaseUnix<span class="sym">;</span>

<span class="kwa">const</span>
  M            <span class="sym">=</span> <span class="num">6400</span><span class="sym">;</span>
  REPLY_SIZE   <span class="sym">=</span> <span class="num">64</span><span class="sym">;</span>

  REQUEST_SIZE <span class="sym">=</span> <span class="num">64</span><span class="sym">;</span>
  PORT         <span class="sym">=</span> <span class="num">6747</span><span class="sym">;</span>

<span class="kwa">var</span>
  Reply   <span class="sym">:</span> <span class="kwa">array</span><span class="sym">[</span><span class="num">0</span>..REPLY_SIZE   <span class="sym">-</span> <span class="num">1</span><span class="sym">]</span> <span class="kwa">of</span> <span class="kwb">Byte</span><span class="sym">;</span>
  Request <span class="sym">:</span> <span class="kwa">array</span><span class="sym">[</span><span class="num">0</span>..REQUEST_SIZE <span class="sym">-</span> <span class="num">1</span><span class="sym">]</span> <span class="kwa">of</span> <span class="kwb">Byte</span><span class="sym">;</span>
  Server  <span class="sym">:</span> <span class="kwb">Longint</span><span class="sym">;</span>

<span class="kwa">procedure</span> DoServer<span class="sym">;</span>
<span class="kwa">var</span>
  Client <span class="sym">:</span> <span class="kwb">Longint</span><span class="sym">;</span>
  Addr   <span class="sym">:</span> TSockAddr<span class="sym">;</span>
  len    <span class="sym">:</span> <span class="kwb">Cardinal</span> <span class="sym">=</span> <span class="kwd">SizeOf</span><span class="sym">(</span>Addr<span class="sym">);</span>
<span class="kwa">begin</span>
  Client<span class="sym">:=</span><span class="kwd">fpAccept</span><span class="sym">(</span>Server<span class="sym">, &#64;</span>addr<span class="sym">, &#64;</span>len<span class="sym">);</span>

  <span class="kwa">while</span> <span class="kwd">fpRecv</span><span class="sym">(</span>Client<span class="sym">, &#64;</span>Request<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> REQUEST_SIZE<span class="sym">,</span> <span class="num">0</span><span class="sym">) &gt;</span> <span class="num">0</span> <span class="kwa">do</span>
    <span class="kwd">fpSend</span><span class="sym">(</span>Client<span class="sym">, &#64;</span>Reply<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> REPLY_SIZE<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>

  <span class="kwd">CloseSocket</span><span class="sym">(</span>Client<span class="sym">);</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">procedure</span> <span class="kwd">DoClient</span><span class="sym">(</span><span class="kwa">const</span> msg_count<span class="sym">,</span> msg_mult<span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">);</span>
<span class="kwa">var</span>
  n<span class="sym">,</span> cnt<span class="sym">,</span> Client<span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;</span>
  Addr          <span class="sym">:</span> TSockAddr<span class="sym">;</span>
  Replies       <span class="sym">:</span> <span class="kwb">Cardinal</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  Bytes         <span class="sym">:</span> <span class="kwb">Cardinal</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwa">begin</span>
  Addr.sin_addr.s_addr <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
  Addr.sin_addr.s_bytes<span class="sym">[</span><span class="num">1</span><span class="sym">] :=</span> <span class="num">127</span><span class="sym">;</span>
  Addr.sin_addr.s_bytes<span class="sym">[</span><span class="num">4</span><span class="sym">] :=</span> <span class="num">1</span><span class="sym">;</span>
  Addr.sin_port<span class="sym">:=</span><span class="kwd">htons</span><span class="sym">(</span>PORT<span class="sym">);</span>
  Addr.sin_family<span class="sym">:=</span>AF_INET<span class="sym">;</span>

  Client<span class="sym">:=</span><span class="kwd">fpSocket</span><span class="sym">(</span>AF_INET<span class="sym">,</span> SOCK_STREAM<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
  <span class="kwd">fpConnect</span><span class="sym">(</span>Client<span class="sym">, &#64;</span>Addr<span class="sym">,</span> <span class="kwd">SizeOf</span><span class="sym">(</span>Addr<span class="sym">));</span>

  <span class="kwa">for</span> n <span class="sym">:=</span> msg_count <span class="sym">*</span> msg_mult <span class="sym">-</span> <span class="num">1</span> <span class="kwa">downto</span> <span class="num">0</span> <span class="kwa">do begin</span>
    <span class="kwd">fpSend</span><span class="sym">(</span>Client<span class="sym">, &#64;</span>Request<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> REQUEST_SIZE<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
    cnt <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">repeat</span>
      <span class="kwd">Inc</span><span class="sym">(</span>cnt<span class="sym">,</span> <span class="kwd">fpRecv</span><span class="sym">(</span>Client<span class="sym">, &#64;</span>Reply<span class="sym">[</span><span class="num">0</span><span class="sym">],</span> REPLY_SIZE<span class="sym">,</span> <span class="num">0</span><span class="sym">));</span>
    <span class="kwa">until</span> cnt <span class="sym">&gt;=</span> REPLY_SIZE<span class="sym">;</span>
    <span class="kwd">Inc</span><span class="sym">(</span>Bytes<span class="sym">,</span> cnt<span class="sym">);</span>
    <span class="kwd">Inc</span><span class="sym">(</span>Replies<span class="sym">);</span>
  <span class="kwa">end</span><span class="sym">;</span>

  <span class="kwd">CloseSocket</span><span class="sym">(</span>Client<span class="sym">);</span>
  <span class="kwd">Writeln</span><span class="sym">(</span><span class="str">'replies: '</span><span class="sym">,</span> Replies<span class="sym">,</span> <span class="esc">#9</span><span class="str">'bytes: '</span><span class="sym">,</span> Bytes<span class="sym">);</span>
<span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">var</span>
  N<span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span>
  e<span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  PID<span class="sym">:</span> TPid<span class="sym">;</span>
  Addr   <span class="sym">:</span> TSockAddr<span class="sym">;</span>
<span class="kwa">begin</span>
  <span class="kwa">if</span> ParamCount <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span> <span class="kwd">Val</span><span class="sym">(</span><span class="kwd">ParamStr</span><span class="sym">(</span><span class="num">1</span><span class="sym">),</span> N<span class="sym">,</span> e<span class="sym">);</span>

  Addr.sin_addr.s_addr<span class="sym">:=</span><span class="num">0</span><span class="sym">;</span>
  Addr.sin_port<span class="sym">:=</span><span class="kwd">htons</span><span class="sym">(</span>PORT<span class="sym">);</span>
  Addr.sin_family<span class="sym">:=</span>AF_INET<span class="sym">;</span>

  Server<span class="sym">:=</span><span class="kwd">fpSocket</span><span class="sym">(</span>AF_INET<span class="sym">,</span> SOCK_STREAM<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
  <span class="kwd">SetSocketOptions</span><span class="sym">(</span>Server<span class="sym">,</span> SOL_SOCKET<span class="sym">,</span> SO_REUSEADDR<span class="sym">,</span> <span class="kwb">True</span><span class="sym">,</span> <span class="kwd">SizeOF</span><span class="sym">(</span><span class="kwb">True</span><span class="sym">));</span>
  <span class="kwd">fpBind</span><span class="sym">(</span>Server<span class="sym">, &#64;</span>addr<span class="sym">,</span> <span class="kwd">SizeOf</span><span class="sym">(</span>Addr<span class="sym">));</span>
  <span class="kwd">fpListen</span><span class="sym">(</span>Server<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>

  PID<span class="sym">:=</span>fpFork<span class="sym">;</span>
  <span class="kwa">if</span> PID <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="kwa">then begin</span>
    DoServer<span class="sym">;</span>
    <span class="kwd">CloseSocket</span><span class="sym">(</span>Server<span class="sym">);</span>
    <span class="kwd">FpWait</span><span class="sym">(</span>PID<span class="sym">);</span>
  <span class="kwa">end else</span> <span class="kwd">DoClient</span><span class="sym">(</span>M<span class="sym">,</span> N<span class="sym">);</span>
<span class="kwa">end</span>.
