<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Dennis Decker Jensen,</span>
<span class="com">*/</span>

<span class="com">/* Tried with word arrays, but was too slow. */</span>
<span class="com">/* It is still slow due to decimal arithmetic precision, */</span>
<span class="com">/* so if this can be reduced somehow it will speedup tremendously! */</span>

k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> TAB <span class="sym">=</span> <span class="kwb">x2c</span><span class="sym">(</span><span class="str">'09'</span><span class="sym">)</span>
<span class="kwa">parse</span> <span class="kwb">value</span> <span class="num">1 0 0 1</span> <span class="kwa">with</span> z1 z2 z3 z4
<span class="kwa">parse arg</span> n .
<span class="kwa">numeric digits</span> n <span class="com">/* Decimal arithmetic! Optimizations? */</span>

<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">10</span> <span class="kwa">by</span> <span class="num">10</span> <span class="kwa">while</span> i <span class="sym">&lt;=</span> n
	<span class="kwa">say</span> pidigits<span class="sym">(</span><span class="num">10</span><span class="sym">) ||</span> TAB <span class="sym">||</span> <span class="str">&quot; :&quot;</span> <span class="sym">||</span> i
<span class="kwa">end</span>
i <span class="sym">=</span> i <span class="sym">-</span> <span class="num">10</span>
<span class="kwa">if</span> i <span class="sym">&lt;</span> n <span class="kwa">then say</span> <span class="kwb">left</span><span class="sym">(</span>pidigits<span class="sym">(</span>n<span class="sym">-</span>i<span class="sym">),</span> <span class="num">10</span><span class="sym">) ||</span> TAB <span class="sym">||</span> <span class="str">&quot; :&quot;</span> <span class="sym">||</span> n
<span class="kwa">exit</span>

pidigits<span class="sym">:</span> <span class="kwa">procedure expose</span> k z1 z2 z3 z4
<span class="kwa">arg</span> count
r <span class="sym">=</span> <span class="str">''</span>
<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> count
	y <span class="sym">=</span> extract<span class="sym">(</span>z1<span class="sym">,</span> z2<span class="sym">,</span> z3<span class="sym">,</span> z4<span class="sym">,</span> <span class="num">3</span><span class="sym">)</span>
	<span class="kwa">do while</span> y <span class="sym">&lt;&gt;</span> extract<span class="sym">(</span>z1<span class="sym">,</span> z2<span class="sym">,</span> z3<span class="sym">,</span> z4<span class="sym">,</span> <span class="num">4</span><span class="sym">)</span>
		k <span class="sym">=</span> k <span class="sym">+</span> <span class="num">1</span>
		<span class="kwa">parse</span> <span class="kwb">value</span> compose<span class="sym">(</span>z1<span class="sym">,</span> z2<span class="sym">,</span> z3<span class="sym">,</span> z4<span class="sym">,</span> k<span class="sym">,</span> <span class="num">4</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">) ,</span>
				<span class="kwa">with</span> z1 z2 z3 z4
		y <span class="sym">=</span> extract<span class="sym">(</span>z1<span class="sym">,</span> z2<span class="sym">,</span> z3<span class="sym">,</span> z4<span class="sym">,</span> <span class="num">3</span><span class="sym">)</span>
	<span class="kwa">end</span>
	<span class="kwa">parse</span> <span class="kwb">value</span> compose<span class="sym">(</span><span class="num">10</span><span class="sym">, -</span><span class="num">10</span><span class="sym">*</span>y<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> z1<span class="sym">,</span> z2<span class="sym">,</span> z3<span class="sym">,</span> z4<span class="sym">) ,</span>
			<span class="kwa">with</span> z1 z2 z3 z4
	r <span class="sym">=</span> r y
<span class="kwa">end</span>
<span class="kwa">return</span> <span class="kwb">space</span><span class="sym">(</span>r<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>

compose<span class="sym">:</span> <span class="kwa">procedure</span>
<span class="kwa">arg</span> a1<span class="sym">,</span> a2<span class="sym">,</span> a3<span class="sym">,</span> a4<span class="sym">,</span> b1<span class="sym">,</span> b2<span class="sym">,</span> b3<span class="sym">,</span> b4 .
<span class="kwa">return</span> a1<span class="sym">*</span>b1 a1<span class="sym">*</span>b2<span class="sym">+</span>a2<span class="sym">*</span>b4 a3<span class="sym">*</span>b1<span class="sym">+</span>a4<span class="sym">*</span>b3 a3<span class="sym">*</span>b2<span class="sym">+</span>a4<span class="sym">*</span>b4

extract<span class="sym">:</span> <span class="kwa">procedure</span>
<span class="kwa">parse arg</span> a1<span class="sym">,</span> a2<span class="sym">,</span> a3<span class="sym">,</span> a4<span class="sym">,</span> j .
<span class="kwa">return</span> <span class="sym">(</span>a1<span class="sym">*</span>j<span class="sym">+</span>a2<span class="sym">) % (</span>a3<span class="sym">*</span>j<span class="sym">+</span>a4<span class="sym">)</span>

