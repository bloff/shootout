<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org</span>
<span class="com"></span>
<span class="com">   contributed by Ian Osgood */</span>

Sequence pad <span class="sym">:=</span> <span class="kwa">method</span><span class="sym">(</span>w<span class="sym">,</span> s<span class="sym">:=</span><span class="kwa">self</span><span class="sym">;</span> <span class="kwd">while</span> <span class="sym">(</span>s size <span class="sym">&lt;</span> w<span class="sym">,</span> s<span class="sym">=</span><span class="str">&quot; &quot;</span><span class="sym">..</span> s<span class="sym">) )</span>

sieve <span class="sym">:=</span> <span class="kwb">Object</span> <span class="kwa">clone do</span><span class="sym">(</span>
    flags <span class="sym">:=</span> <span class="kwb">List</span> <span class="kwa">clone</span>
    show <span class="sym">:=</span> <span class="kwa">method</span><span class="sym">(</span>n<span class="sym">,</span>
        flags empty <span class="kwd">preallocateToSize</span><span class="sym">(</span>n<span class="sym">)</span>
        n <span class="kwd">repeatTimes</span><span class="sym">(</span>flags <span class="kwd">append</span><span class="sym">(</span><span class="kwb">Object</span><span class="sym">))</span>  <span class="slc"># true</span>
        primes <span class="sym">:=</span> <span class="num">0</span>
        <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">,</span> <span class="num">2</span><span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>
            <span class="kwa">if</span> <span class="sym">(</span>flags <span class="kwd">at</span><span class="sym">(</span>i<span class="sym">),</span>
                primes <span class="sym">=</span> primes <span class="sym">+</span> <span class="num">1</span>
                <span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">+</span>i <span class="sym">&lt;</span> n<span class="sym">,</span> <span class="kwa">for</span> <span class="sym">(</span>j<span class="sym">,</span> i<span class="sym">+</span>i<span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> i<span class="sym">,</span> flags <span class="kwd">atPut</span><span class="sym">(</span>j<span class="sym">,</span> <span class="kwb">Nil</span><span class="sym">) ) )</span>
            <span class="sym">)</span>
        <span class="sym">)</span>
        <span class="kwd">writeln</span><span class="sym">(</span><span class="str">&quot;Primes up to&quot;</span><span class="sym">,</span> n asString <span class="kwd">pad</span><span class="sym">(</span><span class="num">9</span><span class="sym">),</span> primes asString <span class="kwd">pad</span><span class="sym">(</span><span class="num">9</span><span class="sym">))</span>
    <span class="sym">)</span>
<span class="sym">)</span>

n <span class="sym">:=</span> args <span class="kwd">at</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span> asNumber
sieve <span class="kwd">show</span><span class="sym">(</span><span class="num">10000</span> <span class="kwd">shiftLeft</span><span class="sym">(</span>n<span class="sym">))</span>
sieve <span class="kwd">show</span><span class="sym">(</span><span class="num">10000</span> <span class="kwd">shiftLeft</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">))</span>
sieve <span class="kwd">show</span><span class="sym">(</span><span class="num">10000</span> <span class="kwd">shiftLeft</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">))</span>

