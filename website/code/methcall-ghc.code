<span class="slc">-- $Id: methcall-ghc.code,v 1.5 2005-02-10 06:14:55 bfulgham Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">-- Author: Einar Karttunen
</span>
<span class="kwa">import</span> Control.Monad
<span class="kwa">import</span> Data.IORef
<span class="kwa">import</span> System

<span class="kwa">class</span> Toggle a <span class="kwa">where
</span>    activate <span class="sym">::</span> a <span class="sym">-&gt;</span> IO <span class="sym">()
</span>    value <span class="sym">::</span> a <span class="sym">-&gt;</span> IO <span class="kwb">Bool

</span><span class="kwa">newtype</span> ToggleC    <span class="sym">=</span> ToggleC <span class="sym">(</span>IORef <span class="kwb">Bool</span><span class="sym">)
</span><span class="kwa">newtype</span> NthToggleC <span class="sym">=</span> NthToggleC <span class="sym">(</span>IORef <span class="sym">(</span><span class="kwb">Bool</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">))

</span>modr r x <span class="sym">=</span> <span class="kwa">do</span> { v <span class="sym">&lt;-</span> readIORef r<span class="sym">;</span> writeIORef r $<span class="sym">!</span> x v }

newToggle s <span class="sym">=</span> newIORef s <span class="sym">&gt;&gt;=</span> return . ToggleC
newNthToggle s m <span class="sym">=</span> newIORef <span class="sym">(</span>s<span class="sym">,</span><span class="num">0</span><span class="sym">,</span>m<span class="sym">) &gt;&gt;=</span> return . NthToggleC

<span class="kwa">instance</span> Toggle ToggleC <span class="kwa">where
</span>    activate <span class="sym">(</span>ToggleC t<span class="sym">) =</span> modr t not
    value <span class="sym">(</span>ToggleC t<span class="sym">)    =</span> readIORef t

<span class="kwa">instance</span> Toggle NthToggleC <span class="kwa">where
</span>    activate <span class="sym">(</span>NthToggleC t<span class="sym">) =</span> modr t <span class="sym">(</span>\x&#64;<span class="sym">(</span>s<span class="sym">,</span>v<span class="sym">,</span>m<span class="sym">) -&gt;</span> x `seq` if v<span class="sym">+</span><span class="num">1</span> <span class="sym">==</span> m <span class="kwa">then</span> <span class="sym">(</span>not s<span class="sym">,</span><span class="num">0</span><span class="sym">,</span>m<span class="sym">)</span> <span class="kwa">else</span> <span class="sym">(</span>s<span class="sym">,</span>v<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>m<span class="sym">))
</span>    value    <span class="sym">(</span>NthToggleC t<span class="sym">) =</span> <span class="kwa">do</span> { ~<span class="sym">(</span>s<span class="sym">,</span>_<span class="sym">,</span>_<span class="sym">) &lt;-</span> readIORef t<span class="sym">;</span> s `seq` return s }

out b <span class="sym">=</span> putStrLn <span class="sym">(</span>if b <span class="kwa">then</span> <span class="str">&quot;true&quot;</span> <span class="kwa">else</span> <span class="str">&quot;false&quot;</span><span class="sym">)

</span>main <span class="sym">=</span> <span class="kwa">do</span> <span class="sym">[</span>num<span class="sym">] &lt;-</span> getArgs
	  toggle<span class="sym">&lt;-</span> newToggle <span class="kwa">True
</span>	  replicateM_ <span class="sym">(</span>read num<span class="sym">) (</span>activate toggle <span class="sym">&gt;&gt;</span> value toggle<span class="sym">)
</span>	  value toggle<span class="sym">&gt;&gt;=</span> out
	  ntoggle<span class="sym">&lt;-</span> newNthToggle <span class="kwa">True</span> <span class="num">3
</span>	  replicateM_ <span class="sym">(</span>read num<span class="sym">) (</span>activate ntoggle <span class="sym">&gt;&gt;</span> value ntoggle<span class="sym">)
</span>	  value ntoggle<span class="sym">&gt;&gt;=</span> out
