<span class="slc">;;; -*- mode: lisp -*-
</span><span class="slc">;;; $Id: hash2-sbcl.code,v 1.5 2004-11-30 07:12:00 bfulgham Exp $
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; from Paul Foley
</span><span class="slc">;;; Multi-lisp modifications by Brent Fulgham
</span>
<span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">)</span> #<span class="sym">-</span>gcl <span class="sym">(</span>debug <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)))
(</span><span class="kwa">defun command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>argument <span class="sym">()
  (</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*
</span>                                #<span class="sym">+</span>cmu  ext<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*
</span>				#<span class="sym">+</span>gcl  si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">)))

(</span>defconstant <span class="sym">+</span>digit<span class="sym">+</span> <span class="str">&quot;0123456789&quot;</span><span class="sym">)

(</span>defconstant <span class="sym">+</span>digits<span class="sym">-</span>needed<span class="sym">+
</span>  <span class="str">'(10 100 1000 10000 100000 10000000 100000000 536870911))

(defun fixnum-to-foo-string (n)
  (declare (fixnum n))
  (let* ((size (+ 4 (position-if (lambda (x) (&gt; (the fixnum x) n))
                                 +digits-needed+)))
	 (result (make-string (1+ size))))
    (replace result &quot;foo_&quot;)
    (loop for i fixnum from size downto 4 with q fixnum = n and r fixnum = 0
      do (multiple-value-setq (q r) (floor q 10))
         (setf (schar result i) (aref +digit+ r)))
    result))

(defun main (&amp;optional (n (command-line-argument)))
  (let ((hash1 (make-hash-table :test '</span><span class="kwa">equal</span> <span class="sym">:</span>size n<span class="sym">))
        (</span>hash2 <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="sym">:</span>test <span class="str">'equal :size n)))
    (macrolet ((hash1 (i) `(gethash (fixnum-to-foo-string ,i) hash1))
               (hash2 (i) `(gethash (fixnum-to-foo-string ,i) hash2)))
      (loop for i fixnum below 10000 do (setf (hash1 i) i))
      (loop for i fixnum below n do
        (maphash (lambda (k v)
                   (declare (fixnum v))
                   (incf (the fixnum (gethash k hash2 0)) v))
                 hash1))
      (format t &quot;~D ~D ~D ~D~%&quot; (hash1 1) (hash1 9999) (hash2 1) (hash2 9999)))))</span>
