<span class="sym">!</span> Fibonacci function implementation
<span class="sym">!</span> Simon Geard<span class="sym">,</span> <span class="num">3</span><span class="sym">/</span><span class="num">12</span><span class="sym">/</span><span class="num">04
</span><span class="sym">!
!</span> Building info<span class="sym">.
! ==============
!
!</span> Linux  <span class="sym">-</span> <span class="kwa">using</span> the Intel Fortran90 compiler<span class="sym">:
!
!</span>          ifort fibo<span class="sym">.</span>f90 <span class="sym">-</span>O3 <span class="sym">-</span><span class="kwb">static</span><span class="sym">-</span>libcxa <span class="sym">-</span>o fibo
<span class="sym">!
!</span> WinXP  <span class="sym">-</span> Compaq Visual Fortran <span class="num">6.6c
</span><span class="sym">!
!</span>          f90 fibo<span class="sym">.</span>f90 <span class="sym">/</span>link <span class="sym">/</span>libpath<span class="sym">:</span><span class="str">&quot;d:</span><span class="esc">\P</span><span class="str">rogram Files</span><span class="esc">\M</span><span class="str">icrosoft Visual Studio</span><span class="esc">\d</span><span class="str">f98</span><span class="esc">\l</span><span class="str">ib&quot;</span>
<span class="sym">!
!</span> Cygwin <span class="sym">-</span> g95 compiler
<span class="sym">!
!</span>          g95 fibo<span class="sym">.</span>f90 <span class="sym">-</span>o fibo<span class="sym">.</span>exe
<span class="sym">!
</span>program fibo
  implicit none
  integer result<span class="sym">,</span> num
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">2</span><span class="sym">)</span> argv

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)
</span>  read<span class="sym">(</span>argv<span class="sym">,</span><span class="str">'(I2)'</span><span class="sym">)</span> num
  result <span class="sym">=</span> fibo<span class="sym">(</span>num<span class="sym">)
</span>  write<span class="sym">(*,</span><span class="str">'(1x,a,i2,a,i8)'</span><span class="sym">)</span> <span class="str">'F('</span><span class="sym">,</span>num<span class="sym">,</span><span class="str">') = '</span><span class="sym">,</span>result

contains

  <span class="sym">!</span> The Fibonacci function itself
  recursive integer function fibo<span class="sym">(</span>n<span class="sym">)</span> result<span class="sym">(</span>ifabo<span class="sym">)
</span>    integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> n
    <span class="kwa">if</span><span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">)</span> then
       ifabo <span class="sym">=</span> <span class="num">1
</span>    <span class="kwa">else
</span>       ifabo <span class="sym">=</span> fibo<span class="sym">(</span>n<span class="num">-1</span><span class="sym">) +</span> fibo<span class="sym">(</span>n<span class="num">-2</span><span class="sym">)
</span>    end <span class="kwa">if
</span>  end function fibo

end program fibo
<span class="sym">!</span> vim<span class="sym">:</span> ts<span class="sym">=</span><span class="num">4</span> ft<span class="sym">=</span>fortran
