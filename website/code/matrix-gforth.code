\ <span class="sym">-*-</span> mode<span class="sym">:</span> forth <span class="sym">-*-</span>
\ $Id<span class="sym">:</span> matrix<span class="sym">.</span>gforth<span class="sym">,</span>v <span class="num">1.1 2004</span><span class="sym">/</span><span class="num">05</span><span class="sym">/</span><span class="num">25 03</span><span class="sym">:</span><span class="num">23</span><span class="sym">:</span><span class="num">23</span> bfulgham Exp $
\ http<span class="sym">:</span><span class="slc">//www.bagley.org/~doug/shootout/</span>
\ from Jorge Acereda Maciá

<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant iterations

<span class="num">30</span> constant size
size dup <span class="sym">*</span> floats constant mat<span class="sym">-</span>byte<span class="sym">-</span>size
<span class="sym">:</span> row<span class="sym">-</span>size     size postpone literal <span class="sym">;</span> immediate
<span class="sym">:</span> row<span class="sym">-</span>stride   <span class="kwb">float</span> postpone literal <span class="sym">;</span> immediate
<span class="sym">:</span> col<span class="sym">-</span>stride   size floats postpone literal <span class="sym">;</span> immediate

<span class="sym">:</span> <span class="kwd">mkmatrix</span> <span class="sym">(</span> addr <span class="sym">--)</span>
    <span class="num">1</span><span class="sym">.</span>e mat<span class="sym">-</span>byte<span class="sym">-</span>size bounds <span class="kwa">do</span> fdup i f<span class="sym">!</span> <span class="num">1</span>e f<span class="sym">+</span> <span class="kwb">float</span> <span class="sym">+</span>loop fdrop <span class="sym">;</span>

<span class="sym">: }}</span>? <span class="sym">(</span> n1 n2 matrix <span class="sym">--</span> addr<span class="sym">,</span> print matrix element<span class="sym">)</span>
    rot row<span class="sym">-</span>size <span class="sym">*</span> rot <span class="sym">+</span> floats <span class="sym">+</span> f&#64; f<span class="sym">&gt;</span>d d<span class="sym">&gt;</span>s <span class="num">1</span> u<span class="sym">.</span>r <span class="sym">;</span>

<span class="sym">:</span> mat<span class="sym">* (</span> r m1 m2 <span class="sym">--,</span> multiply matrices m1 <span class="kwa">and</span> m2 storing result at r<span class="sym">)</span>
    <span class="sym">-</span>rot mat<span class="sym">-</span>byte<span class="sym">-</span>size bounds <span class="kwa">do</span>
        over col<span class="sym">-</span>stride bounds <span class="kwa">do</span>
            i col<span class="sym">-</span>stride j row<span class="sym">-</span>stride row<span class="sym">-</span>size v<span class="sym">*</span> dup f<span class="sym">!</span> <span class="kwb">float</span><span class="sym">+</span>
        <span class="kwb">float</span> <span class="sym">+</span>loop
    col<span class="sym">-</span>stride <span class="sym">+</span>loop <span class="num">2</span>drop <span class="sym">;</span>

create a mat<span class="sym">-</span>byte<span class="sym">-</span>size allot   a mkmatrix
create b mat<span class="sym">-</span>byte<span class="sym">-</span>size allot   b mkmatrix
create r mat<span class="sym">-</span>byte<span class="sym">-</span>size allot

<span class="sym">:</span> test iterations <span class="num">0</span> <span class="kwa">do</span>   r a b mat<span class="sym">*</span>   loop <span class="sym">;</span>

test <span class="num">0 0</span> r <span class="sym">}}</span>? space  <span class="num">2 3</span> r <span class="sym">}}</span>? space  <span class="num">3 2</span> r <span class="sym">}}</span>? space  <span class="num">4 4</span> r <span class="sym">}}</span>?  cr bye
