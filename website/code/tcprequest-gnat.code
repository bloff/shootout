<span class="slc">-- $Id: tcprequest-gnat.code,v 1.1 2005-03-31 15:02:56 bfulgham Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- Contributed by Pascal Obry on 2005/03/31
</span>
<span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span>    <span class="kwa">use</span> Ada.Command_Line<span class="sym">;
</span><span class="kwa">with</span> Ada.Text_IO<span class="sym">;</span>         <span class="kwa">use</span> Ada.Text_IO<span class="sym">;
</span><span class="kwa">with</span> Ada.Integer_Text_IO<span class="sym">;</span> <span class="kwa">use</span> Ada.Integer_Text_IO<span class="sym">;
</span><span class="kwa">with</span> Ada.Streams<span class="sym">;</span>         <span class="kwa">use</span> Ada.Streams<span class="sym">;
</span><span class="kwa">with</span> GNAT.Sockets<span class="sym">;</span>        <span class="kwa">use</span> GNAT.Sockets<span class="sym">;

</span><span class="kwa">procedure</span> TCPRequest <span class="kwa">is

</span>   N            <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value <span class="sym">(</span>Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>   M            <span class="sym">:</span> <span class="kwa">constant</span> <span class="sym">:=</span> <span class="num">100</span><span class="sym">;
</span>   Reply_Size   <span class="sym">:</span> <span class="kwa">constant</span> <span class="sym">:=</span> <span class="num">4</span>_096<span class="sym">;
</span>   Request_Size <span class="sym">:</span> <span class="kwa">constant</span> <span class="sym">:=</span> <span class="num">64</span><span class="sym">;

</span>   Reply   <span class="sym">:</span> <span class="kwa">constant</span> Stream_Element_Array <span class="sym">:= (</span><span class="num">1</span> .. Reply_Size <span class="sym">=&gt;</span> <span class="num">88</span><span class="sym">);
</span>   Request <span class="sym">:</span> <span class="kwa">constant</span> Stream_Element_Array <span class="sym">:= (</span><span class="num">1</span> .. Request_Size <span class="sym">=&gt;</span> <span class="num">23</span><span class="sym">);

</span>   Address <span class="sym">:</span> Sock_Addr_Type<span class="sym">;

</span>   <span class="kwa">task</span> Client <span class="kwa">is
      entry</span> Start<span class="sym">;
</span>   <span class="kwa">end</span> Client<span class="sym">;

</span>   <span class="kwa">task body</span> Client <span class="kwa">is
</span>      Socket <span class="sym">:</span> Socket_Type<span class="sym">;
</span>      Buffer <span class="sym">:</span> Stream_Element_Array <span class="sym">(</span><span class="num">1</span> .. Reply_Size<span class="sym">);
</span>      Last   <span class="sym">:</span> Stream_Element_Offset<span class="sym">;
</span>      Count  <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>      Bytes  <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>   <span class="kwa">begin
      accept</span> Start<span class="sym">;

</span>      Create_Socket <span class="sym">(</span>Socket<span class="sym">);
</span>      Connect_Socket <span class="sym">(</span>Socket<span class="sym">,</span> Address<span class="sym">);

</span>      <span class="kwa">for</span> K <span class="kwa">in</span> <span class="num">1</span> .. M <span class="sym">*</span> N <span class="kwa">loop
</span>         Send_Socket <span class="sym">(</span>Socket<span class="sym">,</span> Request<span class="sym">,</span> Last<span class="sym">);

</span>         Bytes <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>         <span class="kwa">while</span> Bytes <span class="sym">/=</span> Reply_Size <span class="kwa">loop
</span>            Receive_Socket <span class="sym">(</span>Socket<span class="sym">,</span> Buffer<span class="sym">,</span> Last<span class="sym">);
</span>            Bytes <span class="sym">:=</span> Bytes <span class="sym">+</span> <span class="kwb">Natural</span> <span class="sym">(</span>Last<span class="sym">);
</span>         <span class="kwa">end loop</span><span class="sym">;

</span>         Count <span class="sym">:=</span> Count <span class="sym">+</span> Bytes<span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;

</span>      Close_Socket <span class="sym">(</span>Socket<span class="sym">);

</span>      Put <span class="sym">(</span><span class="str">&quot;replies: &quot;</span><span class="sym">);</span> Put <span class="sym">(</span>N <span class="sym">*</span> M<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>      Put <span class="sym">(</span>ASCII.HT <span class="sym">&amp;</span> <span class="str">&quot;bytes: &quot;</span><span class="sym">);</span> Put <span class="sym">(</span>Count<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>   <span class="kwa">end</span> Client<span class="sym">;

</span>   Server_Socket <span class="sym">:</span> Socket_Type<span class="sym">;
</span>   Socket        <span class="sym">:</span> Socket_Type<span class="sym">;
</span>   Buffer        <span class="sym">:</span> Stream_Element_Array <span class="sym">(</span><span class="num">1</span> .. Request_Size<span class="sym">);
</span>   Last          <span class="sym">:</span> Stream_Element_Offset<span class="sym">;

</span><span class="kwa">begin
</span>   Address.Addr <span class="sym">:=</span> Addresses <span class="sym">(</span>Get_Host_By_Name <span class="sym">(</span><span class="str">&quot;localhost&quot;</span><span class="sym">),</span> <span class="num">1</span><span class="sym">);
</span>   Address.Port <span class="sym">:=</span> <span class="num">2987</span><span class="sym">;

</span>   Create_Socket <span class="sym">(</span>Server_Socket<span class="sym">);
</span>   Bind_Socket <span class="sym">(</span>Server_Socket<span class="sym">,</span> Address<span class="sym">);
</span>   Listen_Socket <span class="sym">(</span>Server_Socket<span class="sym">);

</span>   Client.Start<span class="sym">;

</span>   Accept_Socket <span class="sym">(</span>Server_Socket<span class="sym">,</span> Socket<span class="sym">,</span> Address<span class="sym">);

</span>   <span class="kwa">for</span> K <span class="kwa">in</span> <span class="num">1</span> .. M <span class="sym">*</span> N <span class="kwa">loop
</span>      Receive_Socket <span class="sym">(</span>Socket<span class="sym">,</span> Buffer<span class="sym">,</span> Last<span class="sym">);
</span>      Send_Socket <span class="sym">(</span>Socket<span class="sym">,</span> Reply<span class="sym">,</span> Last<span class="sym">);
</span>   <span class="kwa">end loop</span><span class="sym">;
</span><span class="kwa">end</span> TCPRequest<span class="sym">;</span>
