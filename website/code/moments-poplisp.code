<span class="line">    1 </span><span class="slc">;;; -*- mode: lisp -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; $Id: moments-poplisp.code,v 1.4 2004-11-13 07:42:20 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)))
</span><span class="line">    6 </span><span class="sym">
</span><span class="line">    7 </span><span class="sym">(</span><span class="kwa">defun</span> quicksort <span class="sym">(</span>vec lo hi<span class="sym">)</span> <span class="slc">;; modified from from Roger Corman's posting in cll
</span><span class="line">    8 </span><span class="slc"></span>  <span class="sym">(</span>declare <span class="sym">(</span>fixnum hi lo<span class="sym">) (</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array double<span class="sym">-</span><span class="kwa">float</span><span class="sym">)</span> vec<span class="sym">))
</span><span class="line">    9 </span><span class="sym">    (</span><span class="kwa">if</span> <span class="sym">(&gt;</span> hi lo<span class="sym">)
</span><span class="line">   10 </span><span class="sym">        (</span>let<span class="sym">* ((</span>mid <span class="sym">(</span>round <span class="sym">(+</span> lo hi<span class="sym">)</span> <span class="num">2</span><span class="sym">))
</span><span class="line">   11 </span><span class="sym">               (</span>i lo<span class="sym">)
</span><span class="line">   12 </span><span class="sym">               (</span>j <span class="sym">(+</span> hi <span class="num">1</span><span class="sym">))
</span><span class="line">   13 </span><span class="sym">               (</span>p <span class="sym">(</span>aref vec mid<span class="sym">)))
</span><span class="line">   14 </span><span class="sym">          (</span>declare <span class="sym">(</span>fixnum i j<span class="sym">) (</span>double<span class="sym">-</span><span class="kwa">float</span> p<span class="sym">))
</span><span class="line">   15 </span><span class="sym">            (</span>rotatef <span class="sym">(</span>aref vec mid<span class="sym">) (</span>aref vec lo<span class="sym">))</span> <span class="slc">;; swap mid element to first
</span><span class="line">   16 </span><span class="slc"></span>            <span class="sym">(</span>loop
<span class="line">   17 </span>                <span class="sym">(</span>loop do <span class="sym">(</span>incf i<span class="sym">)
</span><span class="line">   18 </span><span class="sym"></span>                    until <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(&gt;</span> i hi<span class="sym">) (&gt;</span> p <span class="sym">(</span>aref vec i<span class="sym">))))
</span><span class="line">   19 </span><span class="sym">                (</span>loop do <span class="sym">(</span>decf j<span class="sym">)
</span><span class="line">   20 </span><span class="sym"></span>                    until <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(&lt;=</span> j lo<span class="sym">) (&gt; (</span>aref vec j<span class="sym">)</span> p<span class="sym">)))
</span><span class="line">   21 </span><span class="sym">                (</span><span class="kwa">if</span> <span class="sym">(&lt;</span> j i<span class="sym">) (</span>return<span class="sym">))
</span><span class="line">   22 </span><span class="sym">                (</span>rotatef <span class="sym">(</span>aref vec i<span class="sym">)(</span>aref vec j<span class="sym">)))
</span><span class="line">   23 </span><span class="sym">  (</span>rotatef <span class="sym">(</span>aref vec lo<span class="sym">) (</span>aref vec j<span class="sym">))</span> <span class="slc">;;put partition element in place
</span><span class="line">   24 </span><span class="slc"></span>  <span class="sym">(</span>quicksort vec lo <span class="sym">(-</span> j <span class="num">1</span><span class="sym">))  (</span>quicksort vec i hi<span class="sym">)))</span> vec<span class="sym">)
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym">(</span><span class="kwa">defun</span> do<span class="sym">-</span>moments <span class="sym">(</span>data n mean<span class="sym">)
</span><span class="line">   27 </span><span class="sym">  (</span>declare <span class="sym">(</span>fixnum n<span class="sym">) (</span>double<span class="sym">-</span><span class="kwa">float</span> mean<span class="sym">) (</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array double<span class="sym">-</span><span class="kwa">float</span><span class="sym">)</span> data<span class="sym">))
</span><span class="line">   28 </span><span class="sym">  (</span>let <span class="sym">((</span>average_deviation <span class="num">0.0d0</span><span class="sym">)
</span><span class="line">   29 </span><span class="sym">        (</span>standard_deviation <span class="num">0.0d0</span><span class="sym">)
</span><span class="line">   30 </span><span class="sym">        (</span>variance <span class="num">0.0d0</span><span class="sym">)
</span><span class="line">   31 </span><span class="sym">        (</span>skew <span class="num">0.0d0</span><span class="sym">)
</span><span class="line">   32 </span><span class="sym">        (</span>kurtosis <span class="num">0.0d0</span><span class="sym">)
</span><span class="line">   33 </span><span class="sym">        (</span>median <span class="num">0.0d0</span><span class="sym">))
</span><span class="line">   34 </span><span class="sym">    (</span>declare <span class="sym">(</span>double<span class="sym">-</span><span class="kwa">float</span> mean average_deviation standard_deviation
<span class="line">   35 </span>                           variance skew kurtosis median<span class="sym">))
</span><span class="line">   36 </span><span class="sym">    (</span>declare <span class="sym">(</span>inline quicksort<span class="sym">))
</span><span class="line">   37 </span><span class="sym">    (</span>loop for i fixnum from <span class="num">0</span> below n do
<span class="line">   38 </span>      <span class="sym">(</span>let<span class="sym">* ((</span>deviation <span class="sym">(- (</span>the double<span class="sym">-</span><span class="kwa">float</span> <span class="sym">(</span>aref data i<span class="sym">))</span> mean<span class="sym">))
</span><span class="line">   39 </span><span class="sym">             (</span>deviation2 <span class="sym">(*</span> deviation deviation<span class="sym">))
</span><span class="line">   40 </span><span class="sym">             (</span>deviation3 <span class="sym">(*</span> deviation deviation2<span class="sym">))
</span><span class="line">   41 </span><span class="sym">             (</span>deviation4 <span class="sym">(*</span> deviation deviation3<span class="sym">)))
</span><span class="line">   42 </span><span class="sym">        (</span>incf average_deviation <span class="sym">(</span><span class="kwa">abs</span> deviation<span class="sym">))
</span><span class="line">   43 </span><span class="sym">        (</span>incf variance deviation2<span class="sym">)
</span><span class="line">   44 </span><span class="sym">        (</span>incf skew deviation3<span class="sym">)
</span><span class="line">   45 </span><span class="sym">        (</span>incf kurtosis deviation4<span class="sym">)))
</span><span class="line">   46 </span><span class="sym">
</span><span class="line">   47 </span><span class="sym">    (</span><span class="kwa">setq</span> average_deviation <