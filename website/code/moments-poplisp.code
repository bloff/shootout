<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: moments-poplisp.code,v 1.8 2006-09-20 05:52:00 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>

<span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> quicksort <span class="sym">(</span>vec lo hi<span class="sym">)</span> <span class="slc">;; modified from from Roger Corman's posting in cll</span>
  <span class="sym">(</span>declare <span class="sym">(</span>fixnum hi lo<span class="sym">) (</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array double<span class="sym">-</span><span class="kwa">float</span><span class="sym">)</span> vec<span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> hi lo<span class="sym">)</span>
        <span class="sym">(</span>let<span class="sym">* ((</span>mid <span class="sym">(</span>round <span class="sym">(+</span> lo hi<span class="sym">)</span> <span class="num">2</span><span class="sym">))</span>
               <span class="sym">(</span>i lo<span class="sym">)</span>
               <span class="sym">(</span>j <span class="sym">(+</span> hi <span class="num">1</span><span class="sym">))</span>
               <span class="sym">(</span>p <span class="sym">(</span>aref vec mid<span class="sym">)))</span>
	  <span class="sym">(</span>declare <span class="sym">(</span>fixnum i j<span class="sym">) (</span>double<span class="sym">-</span><span class="kwa">float</span> p<span class="sym">))</span>
            <span class="sym">(</span>rotatef <span class="sym">(</span>aref vec mid<span class="sym">) (</span>aref vec lo<span class="sym">))</span> <span class="slc">;; swap mid element to first</span>
            <span class="sym">(</span>loop
                <span class="sym">(</span>loop do <span class="sym">(</span>incf i<span class="sym">)</span>
                    until <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(&gt;</span> i hi<span class="sym">) (&gt;</span> p <span class="sym">(</span>aref vec i<span class="sym">))))</span>
                <span class="sym">(</span>loop do <span class="sym">(</span>decf j<span class="sym">)</span>
                    until <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(&lt;=</span> j lo<span class="sym">) (&gt; (</span>aref vec j<span class="sym">)</span> p<span class="sym">)))</span>
		<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> j i<span class="sym">) (</span>return<span class="sym">))</span>
                <span class="sym">(</span>rotatef <span class="sym">(</span>aref vec i<span class="sym">)(</span>aref vec j<span class="sym">)))</span>
  <span class="sym">(</span>rotatef <span class="sym">(</span>aref vec lo<span class="sym">) (</span>aref vec j<span class="sym">))</span> <span class="slc">;;put partition element in place</span>
  <span class="sym">(</span>quicksort vec lo <span class="sym">(-</span> j <span class="num">1</span><span class="sym">))  (</span>quicksort vec i hi<span class="sym">)))</span> vec<span class="sym">)</span>

<span class="sym">(</span><span class="kwa">defun</span> do<span class="sym">-</span>moments <span class="sym">(</span>data n mean<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>fixnum n<span class="sym">) (</span>double<span class="sym">-</span><span class="kwa">float</span> mean<span class="sym">) (</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array double<span class="sym">-</span><span class="kwa">float</span><span class="sym">)</span> data<span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((</span>average_deviation <span class="num">0.0</span>d0<span class="sym">)</span>
	<span class="sym">(</span>standard_deviation <span class="num">0.0</span>d0<span class="sym">)</span>
	<span class="sym">(</span>variance <span class="num">0.0</span>d0<span class="sym">)</span>
	<span class="sym">(</span>skew <span class="num">0.0</span>d0<span class="sym">)</span>
	<span class="sym">(</span>kurtosis <span class="num">0.0</span>d0<span class="sym">)</span>
	<span class="sym">(</span>median <span class="num">0.0</span>d0<span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span>double<span class="sym">-</span><span class="kwa">float</span> mean average_deviation standard_deviation
			   variance skew kurtosis median<span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span>inline quicksort<span class="sym">))</span>
    <span class="sym">(</span>loop for i fixnum from <span class="num">0</span> below n do
      <span class="sym">(</span>let<span class="sym">* ((</span>deviation <span class="sym">(- (</span>the double<span class="sym">-</span><span class="kwa">float</span> <span class="sym">(</span>aref data i<span class="sym">))</span> mean<span class="sym">))</span>
	     <span class="sym">(</span>deviation2 <span class="sym">(*</span> deviation deviation<span class="sym">))</span>
	     <span class="sym">(</span>deviation3 <span class="sym">(*</span> deviation deviation2<span class="sym">))</span>
	     <span class="sym">(</span>deviation4 <span class="sym">(*</span> deviation deviation3<span class="sym">)))</span>
	<span class="sym">(</span>incf average_deviation <span class="sym">(</span><span class="kwa">abs</span> deviation<span class="sym">))</span>
	<span class="sym">(</span>incf variance deviation2<span class="sym">)</span>
	<span class="sym">(</span>incf skew deviation3<span class="sym">)</span>
	<span class="sym">(</span>incf kurtosis deviation4<span class="sym">)))</span>

    <span class="sym">(</span><span class="kwa">setq</span> average_deviation <span class="sym">(/</span> average_deviation n<span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">setq</span> variance <span class="sym">(/</span> variance <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> n<span class="sym">)))</span>
    <span class="sym">(</span><span class="kwa">setq</span> standard_deviation <span class="sym">(</span><span class="kwa">sqrt</span> variance<span class="sym">))</span>

    <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&gt;</span> variance <span class="num">0.0</span>d0<span class="sym">)</span>
	   <span class="sym">(</span><span class="kwa">setq</span> skew <span class="sym">(/</span> skew <span class="sym">(*</span> n variance standard_deviation<span class="sym">)))</span>
	   <span class="sym">(</span><span class="kwa">setq</span> kurtosis <span class="sym">(- (/</span> kurtosis <span class="sym">(* (</span>coerce n <span class="str">'double-float)</span>
<span class="str">					    variance variance))</span>
<span class="str">			     3.0d0))))</span>
<span class="str">    (setf data (quicksort data 0 (1- n)))</span>
<span class="str">    (let ((mid (/ n 2)))</span>
<span class="str">      (fixnum mid)</span>
<span class="str">      (if (zerop (mod n 2))</span>
<span class="str">	  (setq median (/ (+ (the double-float (aref data mid))</span>
<span class="str">			     (the double-float (aref data (1- mid))))</span>
<span class="str">			  2.0d0))</span>
<span class="str">	(setq median (aref data mid))))</span>
<span class="str">    (format t &quot;n:                  ~A~%&quot; n)</span>
<span class="str">    (format t &quot;median:             ~,6K~%&quot; median)</span>
<span class="str">    (format t &quot;mean:               ~,6K~%&quot; mean)</span>
<span class="str">    (format t &quot;average_deviation:  ~,6K~%&quot; average_deviation)</span>
<span class="str">    (format t &quot;standard_deviation: ~,6K~%&quot; standard_deviation)</span>
<span class="str">    (format t &quot;variance:           ~,6K~%&quot; variance)</span>
<span class="str">    (format t &quot;skew:               ~,6K~%&quot; skew)</span>
<span class="str">    (format t &quot;kurtosis:           ~,6K~%&quot; kurtosis)))</span>
<span class="str"></span>
<span class="str"></span>
<span class="str">  (let ((buffer (make-string 4096))</span>
<span class="str">	(start 0)</span>
<span class="str">	(end 0)</span>
<span class="str">	(result 0.0d0)</span>
<span class="str">	(char #</span><span class="esc">\X</span><span class="str">)</span>
<span class="str">	(stream *standard-input*)</span>
<span class="str">	(eof-p nil))</span>
<span class="str">    (declare (fixnum start end) (double-float result))</span>
<span class="str">    (labels ((get-char ()</span>
<span class="str">		       (when (= start end)</span>
<span class="str">			 (setf start 0)</span>
<span class="str">			 (setf end (read-sequence buffer stream))</span>
<span class="str">			 (when (zerop end)</span>
<span class="str">			   (setf eof-p t)</span>
<span class="str">			   (setf char #</span><span class="esc">\Z</span><span class="str">) ;any non-digit will do</span>
<span class="str">			   (return-from get-char nil)))</span>
<span class="str">		       (setf char (schar buffer start))</span>
<span class="str">		       (incf start))</span>
<span class="str">	     (get-dfloat ();; parse double float hack someone should rewrite this</span>
<span class="str">			 (let ((minusp nil)</span>
<span class="str">			       (expminusp nil)</span>
<span class="str">			       (before-dp 0)</span>
<span class="str">			       (after-dp 0)</span>
<span class="str">			       (dec-digits 0)</span>
<span class="str">			       (exponent 0))</span>
<span class="str">			   (declare (fixnum before-dp after-dp exponent dec-digits)</span>
<span class="str">				    (inline digit-char-p char=))</span>
<span class="str">			   (loop while (and</span>
<span class="str">					(not</span>
<span class="str">					 (or (and (char= #</span><span class="esc">\-</span> <span class="str">char)</span>
<span class="str">						  (setq minusp t))</span>
<span class="str">					     (digit-char-p char 10)))</span>
<span class="str">					(get-char)))</span>
<span class="str">			   (loop</span>
<span class="str">			     do (let ((weight (digit-char-p char 10)))</span>
<span class="str">				  (declare (type (or null fixnum) weight))</span>
<span class="str">				  (if weight</span>
<span class="str">				      (setq before-dp (+ weight (the fixnum (* before-dp 10))))</span>
<span class="str">				    (return)))</span>
<span class="str">			     until (not (get-char)))</span>
<span class="str">			   (if minusp (setf before-dp (- before-dp)))</span>
<span class="str">			   (when (char= #</span><span class="esc">\.</span> <span class="str">char)</span>
<span class="str">			     (loop while (get-char)</span>
<span class="str">			       do (let ((weight (digit-char-p char 10)))</span>
<span class="str">				    (declare (type (or null (signed-byte 32)) weight))</span>
<span class="str">				    (if weight</span>
<span class="str">					(setq after-dp (+ weight (the fixnum (* after-dp 10)))</span>
<span class="str">					      dec-digits (the fixnum (1+ dec-digits)))</span>
<span class="str">				      (return)))))</span>
<span class="str">			   (when (or (char= #</span><span class="esc">\e</span> <span class="str">char) (char= #</span><span class="esc">\E</span> <span class="str">char))</span>
<span class="str">			     (get-char)</span>
<span class="str">			     (when (char= #</span><span class="esc">\-</span> <span class="str">char)</span>
<span class="str">			       (setq expminusp t)</span>
<span class="str">			       (get-char))</span>
<span class="str">			     (loop</span>
<span class="str">			       do (let ((weight (digit-char-p char 10)))</span>
<span class="str">				    (declare (type (or null fixnum) weight))</span>
<span class="str">				    (if weight</span>
<span class="str">					(setq exponent (+ weight (the fixnum (* exponent 10))))</span>
<span class="str">				      (return)))</span>
<span class="str">			       until (not (get-char)))</span>
<span class="str">			     (if expminusp (setf exponent (- exponent))))</span>
<span class="str">			   (setq result</span>
<span class="str">				 (float (*</span>
<span class="str">					 (+ (float before-dp 1.0d0)</span>
<span class="str">					    (if (zerop after-dp) 0.0d0</span>
<span class="str">					      (* (float after-dp 1.0d0)</span>
<span class="str">						 (if (zerop dec-digits) 1.0d0</span>
<span class="str">						   (expt 10.0d0 (float (- dec-digits) 1.0d0))))))</span>
<span class="str">					 (if (zerop exponent) 1.0d0</span>
<span class="str">					   (expt 10.0d0 (float exponent 1.0d0)))) 1.0d0)))))</span>
<span class="str"></span>
<span class="str">      (let ((sum 0.0d0)</span>
<span class="str">	    nums )</span>
<span class="str">	(declare (double-float sum) (inline vector-push-extend))</span>
<span class="str">	(let* ((array-size 10000)</span>
<span class="str">	       (numbuffer (make-array array-size :element-type '</span>double<span class="sym">-</span><span class="kwa">float</span><span class="sym">))</span>
	       <span class="sym">(</span>buflist <span class="sym">(</span><span class="kwa">list</span> numbuffer<span class="sym">))</span> <span class="slc">;; Doug's idea put these together later</span>
	       <span class="sym">(</span>fill<span class="sym">-</span>pointer <span class="num">0</span><span class="sym">))</span>
	  <span class="sym">(</span>loop
	    <span class="sym">(</span>get<span class="sym">-</span>dfloat<span class="sym">)</span>
	    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> eof<span class="sym">-</span>p<span class="sym">)</span>
		<span class="sym">(</span><span class="kwa">progn</span>
		  <span class="sym">(</span>incf sum result<span class="sym">)</span>
		  <span class="sym">(</span>setf <span class="sym">(</span>aref numbuffer fill<span class="sym">-</span>pointer<span class="sym">)</span> result<span class="sym">)</span>
		  <span class="sym">(</span>incf fill<span class="sym">-</span>pointer<span class="sym">)</span>
		  <span class="sym">(</span>when <span class="sym">(=</span> fill<span class="sym">-</span>pointer array<span class="sym">-</span>size<span class="sym">)</span>
		    <span class="sym">(</span>push
		     <span class="sym">(</span>setf numbuffer <span class="sym">(</span>make<span class="sym">-</span>array array<span class="sym">-</span>size <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'double-float))</span>
<span class="str">		     buflist)</span>
<span class="str">		    (setf fill-pointer 0)))</span>
<span class="str">	      (return)))</span>
<span class="str">	  (let* ((num-arrays (length buflist))</span>
<span class="str">		 (num-elem (+ (* (1- num-arrays) array-size) fill-pointer)))</span>
<span class="str">	    (setf nums (make-array  num-elem :element-type '</span>double<span class="sym">-</span><span class="kwa">float</span><span class="sym">))</span>
	    <span class="sym">(</span>locally <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>array double<span class="sym">-</span><span class="kwa">float</span><span class="sym">)</span> nums<span class="sym">))</span>
		     <span class="sym">(</span>loop for i fixnum from <span class="num">0</span> to <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> num<span class="sym">-</span>arrays<span class="sym">)</span> do
		       <span class="sym">(</span>setf <span class="sym">(</span>subseq nums <span class="sym">(*</span> i array<span class="sym">-</span>size<span class="sym">))</span>
			     <span class="sym">(</span>the <span class="sym">(</span>simple<span class="sym">-</span>array double<span class="sym">-</span><span class="kwa">float</span><span class="sym">)</span>
			       <span class="sym">(</span>elt buflist <span class="sym">(- (</span><span class="num">1</span><span class="sym">-</span> num<span class="sym">-</span>arrays<span class="sym">)</span> i<span class="sym">)))))</span> <span class="slc">;;buflist is rev'd</span>
		     <span class="sym">(</span>do<span class="sym">-</span>moments nums num<span class="sym">-</span>elem <span class="sym">(/</span> sum num<span class="sym">-</span>elem<span class="sym">))))))))</span>
