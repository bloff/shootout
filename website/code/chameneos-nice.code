<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Yauheni Akhotnikau</span>
<span class="com">*/</span>

enum Color <span class="sym">{</span> BLUE<span class="sym">,</span> RED<span class="sym">,</span> YELLOW<span class="sym">,</span> FADED <span class="sym">}</span>

<span class="kwa">class</span> MeetingPlace
  <span class="sym">{</span>
    <span class="kwb">int</span> remaining<span class="sym">;</span>
    <span class="sym">?</span>Creature first <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>

    <span class="kwb">void</span> meet<span class="sym">(</span> Creature me <span class="sym">)</span>
      <span class="sym">{</span>
        <span class="kwa">synchronized</span><span class="sym">(</span> this <span class="sym">)</span>
          <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span> remaining <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">)</span>
              <span class="sym">{</span>
                <span class="kwa">if</span><span class="sym">(</span> first <span class="sym">==</span> <span class="kwa">null</span> <span class="sym">)</span>
                  <span class="sym">{</span>
                    first <span class="sym">=</span> me<span class="sym">;</span>
                    this<span class="sym">.</span>wait<span class="sym">();</span>
                  <span class="sym">}</span>
                <span class="kwa">else</span>
                  <span class="sym">{</span>
                    <span class="kwa">let</span> Creature f <span class="sym">=</span> notNull<span class="sym">(</span>first<span class="sym">);</span>
                    me<span class="sym">.</span>other <span class="sym">=</span> f<span class="sym">.</span>selfColor<span class="sym">;</span>
                    f<span class="sym">.</span>other <span class="sym">=</span> me<span class="sym">.</span>selfColor<span class="sym">;</span>

                    first <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>
                    <span class="sym">--</span>remaining<span class="sym">;</span>

                    this<span class="sym">.</span>notify<span class="sym">();</span>
                  <span class="sym">}</span>
              <span class="sym">}</span>
            <span class="kwa">else</span>
              <span class="sym">{</span>
                me<span class="sym">.</span>other <span class="sym">=</span> FADED<span class="sym">;</span>
              <span class="sym">}</span>
          <span class="sym">}</span>
      <span class="sym">}</span>
  <span class="sym">}</span>

<span class="kwa">class</span> Creature <span class="kwa">extends</span> Thread
  <span class="sym">{</span>
    Color selfColor <span class="sym">=</span> FADED<span class="sym">;</span>
    Color other <span class="sym">=</span> FADED<span class="sym">;</span>
    MeetingPlace meetingPlace<span class="sym">;</span>
    <span class="kwb">int</span> creaturesMeet <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    run<span class="sym">()</span>
      <span class="sym">{</span>
        <span class="kwa">while</span><span class="sym">(</span> selfColor <span class="sym">!=</span> FADED <span class="sym">)</span>
          <span class="sym">{</span>
            meetingPlace<span class="sym">.</span>meet<span class="sym">(</span> this <span class="sym">);</span>
            selfColor <span class="sym">=</span> this<span class="sym">.</span>complement<span class="sym">();</span>
            <span class="kwa">if</span><span class="sym">(</span> FADED <span class="sym">!=</span> selfColor <span class="sym">)</span>
              <span class="sym">++</span>creaturesMeet<span class="sym">;</span>
          <span class="sym">}</span>
      <span class="sym">}</span>

    Color complement<span class="sym">()</span>
      <span class="sym">{</span>
        <span class="kwa">if</span><span class="sym">(</span> FADED <span class="sym">==</span> other <span class="sym">)</span>
          <span class="kwa">return</span> FADED<span class="sym">;</span>
        <span class="kwa">else if</span><span class="sym">(</span> BLUE <span class="sym">==</span> selfColor <span class="sym">)</span>
          <span class="kwa">return</span> other <span class="sym">==</span> RED <span class="sym">?</span> YELLOW <span class="sym">:</span> RED<span class="sym">;</span>
        <span class="kwa">else if</span><span class="sym">(</span> RED <span class="sym">==</span> selfColor <span class="sym">)</span>
          <span class="kwa">return</span> other <span class="sym">==</span> BLUE <span class="sym">?</span> YELLOW <span class="sym">:</span> BLUE<span class="sym">;</span>
        <span class="kwa">else if</span><span class="sym">(</span> YELLOW <span class="sym">==</span> selfColor <span class="sym">)</span>
          <span class="kwa">return</span> other <span class="sym">==</span> BLUE <span class="sym">?</span> RED <span class="sym">:</span> BLUE<span class="sym">;</span>

        <span class="kwa">return</span> selfColor<span class="sym">;</span>
      <span class="sym">}</span>
  <span class="sym">}</span>

<span class="kwa">new</span> Creature<span class="sym">(</span> Color color<span class="sym">,</span> MeetingPlace place <span class="sym">)</span>
  <span class="sym">{</span>
    this<span class="sym">(</span> selfColor<span class="sym">:</span> color<span class="sym">,</span> meetingPlace<span class="sym">:</span> place <span class="sym">);</span>
  <span class="sym">}</span>

<span class="kwb">void</span>
main<span class="sym">(</span> String<span class="sym">[]</span> args <span class="sym">)</span>
  <span class="sym">{</span>
    <span class="kwa">var</span> <span class="kwb">int</span> remaining <span class="sym">=</span> <span class="num">1</span> <span class="sym">==</span> args<span class="sym">.</span>length <span class="sym">?</span> Integer<span class="sym">.</span>parseInt<span class="sym">(</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">] ) :</span> <span class="num">10</span><span class="sym">;</span>

    <span class="kwa">let</span> meetingPlace <span class="sym">=</span> <span class="kwa">new</span> MeetingPlace<span class="sym">(</span> remaining<span class="sym">:</span> remaining <span class="sym">);</span>

    <span class="kwa">var</span> creatures <span class="sym">=</span> <span class="kwa">new</span> LinkedList<span class="sym">();</span>
    <span class="kwa">for</span><span class="sym">(</span> Color c <span class="sym">: [</span> BLUE<span class="sym">,</span> YELLOW<span class="sym">,</span> RED<span class="sym">,</span> BLUE <span class="sym">] )</span>
      creatures<span class="sym">.</span>add<span class="sym">(</span> <span class="kwa">new</span> Creature<span class="sym">(</span> c<span class="sym">,</span> meetingPlace <span class="sym">) );</span>

    <span class="kwa">for</span><span class="sym">(</span> creature <span class="sym">:</span> creatures <span class="sym">)</span>
      creature<span class="sym">.</span>start<span class="sym">();</span>

    <span class="kwa">var</span> total <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span><span class="sym">(</span> creature <span class="sym">:</span> creatures <span class="sym">)</span>
      <span class="sym">{</span>
        creature<span class="sym">.</span>join<span class="sym">();</span>
        total <span class="sym">+=</span> creature<span class="sym">.</span>creaturesMeet<span class="sym">;</span>
      <span class="sym">}</span>

    println<span class="sym">(</span> total <span class="sym">);</span>
  <span class="sym">}</span>

<span class="slc">// vim:ts=2:sts=2:sw=2:expandtab:</span>

