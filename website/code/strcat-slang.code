define <span class="kwd">main_slow</span><span class="sym">()</span>
<span class="sym">{</span>
   variable n <span class="sym">=</span> <span class="kwd">integer</span> <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
   variable str <span class="sym">=</span> <span class="kwd">typecast</span> <span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">,</span> BString_Type<span class="sym">);</span>
   variable hello <span class="sym">=</span> <span class="kwd">typecast</span> <span class="sym">(</span><span class="str">&quot;hello</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> BString_Type<span class="sym">);</span>
   <span class="kwd">loop</span> <span class="sym">(</span>n<span class="sym">)</span>
     str <span class="sym">+=</span> hello<span class="sym">;</span>
   <span class="kwd">fprintf</span> <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%S</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">strlen</span> <span class="sym">(</span>str<span class="sym">));</span>
<span class="sym">}</span>

variable Buffer <span class="sym">=</span> <span class="kwb">struct</span>
<span class="sym">{</span>
   size<span class="sym">,</span> data<span class="sym">,</span> len
<span class="sym">};</span>

define <span class="kwd">new_buffer</span> <span class="sym">(</span>s<span class="sym">)</span>
<span class="sym">{</span>
   variable b <span class="sym">=</span> &#64;Buffer<span class="sym">;</span>
   s <span class="sym">=</span> <span class="kwd">typecast</span> <span class="sym">(</span>s<span class="sym">,</span> BString_Type<span class="sym">);</span>
   b<span class="sym">.</span>data <span class="sym">=</span> <span class="kwd">bstring_to_array</span> <span class="sym">(</span>s<span class="sym">);</span>
   b<span class="sym">.</span>len <span class="sym">=</span> <span class="kwd">bstrlen</span> <span class="sym">(</span>s<span class="sym">);</span>
   b<span class="sym">.</span>size <span class="sym">=</span> b<span class="sym">.</span>len<span class="sym">;</span>
   <span class="kwa">return</span> b<span class="sym">;</span>
<span class="sym">}</span>

define <span class="kwd">append</span> <span class="sym">(</span>b<span class="sym">,</span> b1<span class="sym">)</span>
<span class="sym">{</span>
   variable len <span class="sym">=</span> b<span class="sym">.</span>len<span class="sym">;</span>
   variable len1 <span class="sym">=</span> b1<span class="sym">.</span>len<span class="sym">;</span>
   variable new_len <span class="sym">=</span> len <span class="sym">+</span> len1<span class="sym">;</span>
   variable data <span class="sym">=</span> b<span class="sym">.</span>data<span class="sym">;</span>
   variable i<span class="sym">;</span>

   <span class="kwa">if</span> <span class="sym">(</span>b<span class="sym">.</span>size <span class="sym">&lt;</span> new_len<span class="sym">)</span>
     <span class="sym">{</span>
	b<span class="sym">.</span>size <span class="sym">=</span> new_len <span class="sym">*</span> <span class="num">2</span><span class="sym">;</span>
	variable new_data <span class="sym">=</span> UChar_Type<span class="sym">[</span><span class="num">2</span><span class="sym">*</span>new_len<span class="sym">];</span>
	<span class="kwa">if</span> <span class="sym">(</span>len<span class="sym">)</span>
	  <span class="sym">{</span>
	     i <span class="sym">= [</span><span class="num">0</span><span class="sym">:</span>len<span class="sym">-</span><span class="num">1</span><span class="sym">];</span>
	     new_data<span class="sym">[</span>i<span class="sym">] =</span> data<span class="sym">[</span>i<span class="sym">];</span>
	  <span class="sym">}</span>

	data <span class="sym">=</span> new_data<span class="sym">;</span>
	b<span class="sym">.</span>data <span class="sym">=</span> data<span class="sym">;</span>
     <span class="sym">}</span>

   i <span class="sym">= [</span>len<span class="sym">:</span>new_len<span class="sym">-</span><span class="num">1</span><span class="sym">];</span>
   data<span class="sym">[</span>i<span class="sym">] =</span> b1<span class="sym">.</span>data<span class="sym">[[</span><span class="num">0</span><span class="sym">:</span>len1<span class="sym">-</span><span class="num">1</span><span class="sym">]];</span>
   b<span class="sym">.</span>len <span class="sym">=</span> new_len<span class="sym">;</span>
<span class="sym">}</span>


define <span class="kwd">main_faster</span> <span class="sym">()</span>
<span class="sym">{</span>
   variable n<span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> <span class="kwd">integer</span> <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span> <span class="kwa">else</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>

   variable hello <span class="sym">=</span> <span class="kwd">new_buffer</span> <span class="sym">(</span><span class="str">&quot;hello</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
   variable str <span class="sym">=</span> <span class="kwd">new_buffer</span> <span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);</span>
   <span class="kwd">loop</span> <span class="sym">(</span>n<span class="sym">)</span>
     <span class="kwd">append</span> <span class="sym">(</span>str<span class="sym">,</span> hello<span class="sym">);</span>
   <span class="kwd">fprintf</span> <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%S</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> str<span class="sym">.</span>len<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwd">main_faster</span> <span class="sym">();</span>
