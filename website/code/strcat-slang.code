define main_slow<span class="sym">()
{
</span>   variable n <span class="sym">=</span> integer <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);
</span>   variable str <span class="sym">=</span> typecast <span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">,</span> BString_Type<span class="sym">);
</span>   variable hello <span class="sym">=</span> typecast <span class="sym">(</span><span class="str">&quot;hello</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> BString_Type<span class="sym">);
</span>   loop <span class="sym">(</span>n<span class="sym">)
</span>     str <span class="sym">+=</span> hello<span class="sym">;
</span>   fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%S</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> strlen <span class="sym">(</span>str<span class="sym">));
}

</span>variable Buffer <span class="sym">=</span> <span class="kwb">struct
</span><span class="sym">{
</span>   size<span class="sym">,</span> data<span class="sym">,</span> len
<span class="sym">};

</span>define new_buffer <span class="sym">(</span>s<span class="sym">)
{
</span>   variable b <span class="sym">=</span> &#64;Buffer<span class="sym">;
</span>   s <span class="sym">=</span> typecast <span class="sym">(</span>s<span class="sym">,</span> BString_Type<span class="sym">);
</span>   b<span class="sym">.</span>data <span class="sym">=</span> bstring_to_array <span class="sym">(</span>s<span class="sym">);
</span>   b<span class="sym">.</span>len <span class="sym">=</span> bstrlen <span class="sym">(</span>s<span class="sym">);
</span>   b<span class="sym">.</span>size <span class="sym">=</span> b<span class="sym">.</span>len<span class="sym">;
</span>   <span class="kwa">return</span> b<span class="sym">;
}

</span>define append <span class="sym">(</span>b<span class="sym">,</span> b1<span class="sym">)
{
</span>   variable len <span class="sym">=</span> b<span class="sym">.</span>len<span class="sym">;
</span>   variable len1 <span class="sym">=</span> b1<span class="sym">.</span>len<span class="sym">;
</span>   variable new_len <span class="sym">=</span> len <span class="sym">+</span> len1<span class="sym">;
</span>   variable data <span class="sym">=</span> b<span class="sym">.</span>data<span class="sym">;
</span>   variable i<span class="sym">;

</span>   <span class="kwa">if</span> <span class="sym">(</span>b<span class="sym">.</span>size <span class="sym">&lt;</span> new_len<span class="sym">)
     {
</span>	b<span class="sym">.</span>size <span class="sym">=</span> new_len <span class="sym">*</span> <span class="num">2</span><span class="sym">;
</span>	variable new_data <span class="sym">=</span> UChar_Type<span class="sym">[</span><span class="num">2</span><span class="sym">*</span>new_len<span class="sym">];
</span>	<span class="kwa">if</span> <span class="sym">(</span>len<span class="sym">)
	  {
</span>	     i <span class="sym">= [</span><span class="num">0</span><span class="sym">:</span>len<span class="num">-1</span><span class="sym">];
</span>	     new_data<span class="sym">[</span>i<span class="sym">] =</span> data<span class="sym">[</span>i<span class="sym">];
	  }

</span>	data <span class="sym">=</span> new_data<span class="sym">;
</span>	b<span class="sym">.</span>data <span class="sym">=</span> data<span class="sym">;
     }

</span>   i <span class="sym">= [</span>len<span class="sym">:</span>new_len<span class="num">-1</span><span class="sym">];
</span>   data<span class="sym">[</span>i<span class="sym">] =</span> b1<span class="sym">.</span>data<span class="sym">[[</span><span class="num">0</span><span class="sym">:</span>len1<span class="num">-1</span><span class="sym">]];
</span>   b<span class="sym">.</span>len <span class="sym">=</span> new_len<span class="sym">;
}


</span>define main_faster <span class="sym">()
{
</span>   variable n<span class="sym">;
</span>   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> integer <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span> <span class="kwa">else</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;

</span>   variable hello <span class="sym">=</span> new_buffer <span class="sym">(</span><span class="str">&quot;hello</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span>   variable str <span class="sym">=</span> new_buffer <span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);
</span>   loop <span class="sym">(</span>n<span class="sym">)
</span>     append <span class="sym">(</span>str<span class="sym">,</span> hello<span class="sym">);
</span>   fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%S</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> str<span class="sym">.</span>len<span class="sym">);
}

</span>main_faster <span class="sym">();</span>
