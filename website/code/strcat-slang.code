<span class="line">    1 </span>define main_slow<span class="sym">()
</span><span class="line">    2 </span><span class="sym">{
</span><span class="line">    3 </span><span class="sym"></span>   variable n <span class="sym">=</span> integer <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);
</span><span class="line">    4 </span><span class="sym"></span>   variable str <span class="sym">=</span> typecast <span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">,</span> BString_Type<span class="sym">);
</span><span class="line">    5 </span><span class="sym"></span>   variable hello <span class="sym">=</span> typecast <span class="sym">(</span><span class="str">&quot;hello</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> BString_Type<span class="sym">);
</span><span class="line">    6 </span><span class="sym"></span>   loop <span class="sym">(</span>n<span class="sym">)
</span><span class="line">    7 </span><span class="sym"></span>     str <span class="sym">+=</span> hello<span class="sym">;
</span><span class="line">    8 </span><span class="sym"></span>   fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%S</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> strlen <span class="sym">(</span>str<span class="sym">));
</span><span class="line">    9 </span><span class="sym">}
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym"></span>variable Buffer <span class="sym">=</span> <span class="kwb">struct
</span><span class="line">   12 </span><span class="kwb"></span><span class="sym">{
</span><span class="line">   13 </span><span class="sym"></span>   size<span class="sym">,</span> data<span class="sym">,</span> len
<span class="line">   14 </span><span class="sym">};
</span><span class="line">   15 </span><span class="sym">
</span><span class="line">   16 </span><span class="sym"></span>define new_buffer <span class="sym">(</span>s<span class="sym">)
</span><span class="line">   17 </span><span class="sym">{
</span><span class="line">   18 </span><span class="sym"></span>   variable b <span class="sym">=</span> &#64;Buffer<span class="sym">;
</span><span class="line">   19 </span><span class="sym"></span>   s <span class="sym">=</span> typecast <span class="sym">(</span>s<span class="sym">,</span> BString_Type<span class="sym">);
</span><span class="line">   20 </span><span class="sym"></span>   b<span class="sym">.</span>data <span class="sym">=</span> bstring_to_array <span class="sym">(</span>s<span class="sym">);
</span><span class="line">   21 </span><span class="sym"></span>   b<span class="sym">.</span>len <span class="sym">=</span> bstrlen <span class="sym">(</span>s<span class="sym">);
</span><span class="line">   22 </span><span class="sym"></span>   b<span class="sym">.</span>size <span class="sym">=</span> b<span class="sym">.</span>len<span class="sym">;
</span><span class="line">   23 </span><span class="sym"></span>   <span class="kwa">return</span> b<span class="sym">;
</span><span class="line">   24 </span><span class="sym">}
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym"></span>define append <span class="sym">(</span>b<span class="sym">,</span> b1<span class="sym">)
</span><span class="line">   27 </span><span class="sym">{
</span><span class="line">   28 </span><span class="sym"></span>   variable len <span class="sym">=</span> b<span class="sym">.</span>len<span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>   variable len1 <span class="sym">=</span> b1<span class="sym">.</span>len<span class="sym">;
</span><span class="line">   30 </span><span class="sym"></span>   variable new_len <span class="sym">=</span> len <span class="sym">+</span> len1<span class="sym">;
</span><span class="line">   31 </span><span class="sym"></span>   variable data <span class="sym">=</span> b<span class="sym">.</span>data<span class="sym">;
</span><span class="line">   32 </span><span class="sym"></span>   variable i<span class="sym">;
</span><span class="line">   33 </span><span class="sym">
</span><span class="line">   34 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>b<span class="sym">.</span>size <span class="sym">&lt;</span> new_len<span class="sym">)
</span><span class="line">   35 </span><span class="sym">     {
</span><span class="line">   36 </span><span class="sym"></span>        b<span class="sym">.</span>size <span class="sym">=</span> new_len <span class="sym">*</span> <span class="num">2</span><span class="sym">;
</span><span class="line">   37 </span><span class="sym"></span>        variable new_data <span class="sym">=</span> UChar_Type<span class="sym">[</span><span class="num">2</span><span class="sym">*</span>new_len<span class="sym">];
</span><span class="line">   38 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>len<span class="sym">)
</span><span class="line">   39 </span><span class="sym">          {
</span><span class="line">   40 </span><span class="sym"></span>             i <span class="sym">= [</span><span class="num">0</span><span class="sym">:</span>len<span class="num">-1</span><span class="sym">];
</span><span class="line">   41 </span><span class="sym"></span>             new_data<span class="sym">[</span>i<span class="sym">] =</span> data<span class="sym">[</span>i<span class="sym">];
</span><span class="line">   42 </span><span class="sym">          }
</span><span class="line">   43 </span><span class="sym">
</span><span class="line">   44 </span><span class="sym"></span>        data <span class="sym">=</span> new_data<span class="sym">;
</span><span class="line">   45 </span><span class="sym"></span>        b<span class="sym">.</span>data <span class="sym">=</span> data<span class="sym">;
</span><span class="line">   46 </span><span class="sym">     }
</span><span class="line">   47 </span><span class="sym">
</span><span class="line">   48 </span><span class="sym"></span>   i <span class="sym">= [</span>len<span class="sym">:</span>new_len<span class="num">-1</span><span class="sym">];
</span><span class="line">   49 </span><span class="sym"></span>   data<span class="sym">[</span>i<span class="sym">] =</span> b1<span class="sym">.</span>data<span class="sym">[[</span><span class="num">0</span><span class="sym">:</span>len1<span class="num">-1</span><span class="sym">]];
</span><span class="line">   50 </span><span class="sym"></span>   b<span class="sym">.</span>len <span class="sym">=</span> new_len<span class="sym">;
</span><span class="line">   51 </span><span class="sym">}
</span><span class="line">   52 </span><span class="sym">
</span><span class="line">   53 </span><span class="sym">
</span><span class="line">   54 </span><span class="sym"></span>define main_faster <span class="sym">()
</span><span class="line">   55 </span><span class="sym">{
</span><span class="line">   56 </span><span class="sym"></span>   variable n<span class="sym">;
</span><span class="line">   57 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> integer <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span> <span class="kwa">else</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   58 </span><span class="sym">
</span><span class="line">   59 </span><span class="sym"></span>   variable hello <span class="sym">=</span> new_buffer <span class="sym">(</span><span class="str">&quot;hello</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">   60 </span><span class="sym"></span>   variable str <span class="sym">=</span> new_buffer <span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);
</span><span class="line">   61 </span><span class="sym"></span>   loop <span class="sym">(</span>n<span class="sym">)
</span><span class="line">   62 </span><span class="sym"></span>     append <span class="sym">(</span>str<span class="sym">,</span> hello<span class="sym">);
</span><span class="line">   63 </span><span class="sym"></span>   fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%S</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> str<span class="sym">.</span>len<span class="sym">);
</span><span class="line">   64 </span><span class="sym">}
</span><span class="line">   65 </span><span class="sym">
</span><span class="line">   66 </span><span class="sym"></span>main_faster <span class="sym">();</span>
