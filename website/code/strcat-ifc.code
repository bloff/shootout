<span class="sym">!</span> Concatenation function implementation
<span class="sym">!</span> Simon Geard<span class="sym">,</span> <span class="num">1</span><span class="sym">/</span><span class="num">12</span><span class="sym">/</span><span class="num">04
</span><span class="sym">!
!</span> Building info<span class="sym">.
! ==============
!
!</span> Linux  <span class="sym">-</span> <span class="kwa">using</span> the Intel Fortran90 compiler<span class="sym">:
!
!</span>          ifort iso_varying_string<span class="sym">.</span>f90 strcat<span class="sym">.</span>f90 <span class="sym">-</span>O3 <span class="sym">-</span><span class="kwb">static</span><span class="sym">-</span>libcxa <span class="sym">-</span>o strcat
<span class="sym">!
!</span> WinXP  <span class="sym">-</span> Compaq Visual Fortran <span class="num">6.6c
</span><span class="sym">!
!</span>          f90 iso_varying_string<span class="sym">.</span>f90 strcat<span class="sym">.</span>f90 <span class="sym">/</span>link <span class="sym">/</span>libpath<span class="sym">:</span><span class="str">&quot;d:</span><span class="esc">\P</span><span class="str">rogram Files</span><span class="esc">\M</span><span class="str">icrosoft Visual Studio</span><span class="esc">\d</span><span class="str">f98</span><span class="esc">\l</span><span class="str">ib&quot;</span>
<span class="sym">!
!</span> Cygwin <span class="sym">-</span> g95 compiler
<span class="sym">!
!</span>          g95 iso_varying_string<span class="sym">.</span>f90 strcat<span class="sym">.</span>f90 <span class="sym">-</span>O3 <span class="sym">-</span>o strcat<span class="sym">.</span>exe
<span class="sym">!
</span>program strcat
  use iso_varying_string
  implicit none
  integer num
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">8</span><span class="sym">)</span> argv
  character<span class="sym">(</span>len<span class="sym">=*),</span> parameter <span class="sym">::</span> str <span class="sym">=</span> <span class="str">'hello_'</span>
  type<span class="sym">(</span>varying_string<span class="sym">) ::</span> result
  intrinsic repeat

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)
</span>  read<span class="sym">(</span>argv<span class="sym">,</span><span class="str">'(I4)'</span><span class="sym">)</span> num
  result <span class="sym">=</span> repeat<span class="sym">(</span>str<span class="sym">,</span>num<span class="sym">)

</span>  print <span class="sym">*,</span>len<span class="sym">(</span>result<span class="sym">)
</span>end program strcat
<span class="sym">!</span> vim<span class="sym">:</span> ts<span class="sym">=</span><span class="num">4</span> ft<span class="sym">=</span>fortran
