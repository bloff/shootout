<span class="str">&quot;  The Great Computer Language Shootout
   contributed by Isaac Gouy

   To run: gst -QI /usr/share/gnu-smalltalk/gst.im random.st -a 900000
&quot;</span>

Object subclass<span class="sym">:</span> <span class="slc">#RandomNumber
</span>instanceVariableNames<span class="sym">:</span> <span class="str">'seed scale'</span>
classVariableNames<span class="sym">:</span> <span class="str">'Increment Multiplier Modulus FModulus'</span>
poolDictionaries<span class="sym">:</span> <span class="str">''</span>
category<span class="sym">:</span> nil <span class="sym">!

!</span>RandomNumber class methodsFor<span class="sym">:</span> <span class="str">'initialize'</span><span class="sym">!

</span>initialize
   Increment <span class="sym">:=</span> <span class="num">29573</span>.
   Multiplier <span class="sym">:=</span> <span class="num">3877</span>.
   Modulus <span class="sym">:=</span> <span class="num">139968</span>.
   FModulus <span class="sym">:=</span> <span class="num">139968.0d</span>.
<span class="sym">! !

!</span>RandomNumber class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!

</span>to<span class="sym">:</span> anInteger
   ^self basicNew to<span class="sym">:</span> anInteger <span class="sym">! !

!</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!

</span><span class="kwa">next
</span>   seed <span class="sym">:=</span> seed <span class="sym">*</span> Multiplier <span class="sym">+</span> Increment \\ Modulus.
   ^<span class="sym">(</span>seed <span class="sym">*</span> scale<span class="sym">)</span> asFloatD <span class="sym">/</span> FModulus <span class="sym">! !

!</span>RandomNumber methodsFor<span class="sym">:</span> <span class="str">'private'</span><span class="sym">!

</span>to<span class="sym">:</span> anInteger
   seed <span class="sym">:=</span> <span class="num">42</span>.
   scale <span class="sym">:=</span> anInteger <span class="sym">! !


!</span>Float methodsFor<span class="sym">:</span> <span class="str">'printing'</span><span class="sym">!

</span>printStringRoundedTo<span class="sym">:</span> anInteger
   <span class="sym">|</span> n s <span class="sym">|
</span>   n <span class="sym">:=</span> <span class="num">0.5d</span> <span class="sym">* (</span><span class="num">10</span> raisedToInteger<span class="sym">:</span> anInteger negated<span class="sym">)</span>.
   s <span class="sym">:= ((</span>self sign <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">)</span> ifTrue<span class="sym">: [</span>self <span class="sym">-</span> n<span class="sym">]</span> ifFalse<span class="sym">: [</span>self <span class="sym">+</span> n<span class="sym">])</span> printString.
   ^s copyFrom<span class="sym">:</span> <span class="num">1</span> to<span class="sym">: (</span>s indexOf<span class="sym">:</span> <span class="kwb">$</span>.<span class="sym">) +</span> anInteger <span class="sym">! !


|</span> n random x <span class="sym">|
</span>n <span class="sym">:=</span> Smalltalk arguments first asInteger.

random <span class="sym">:=</span> RandomNumber initialize<span class="sym">;</span> to<span class="sym">:</span> <span class="num">100</span>.
n timesRepeat<span class="sym">: [</span>x <span class="sym">:=</span> random <span class="kwa">next</span><span class="sym">]</span>.
<span class="sym">(</span>x printStringRoundedTo<span class="sym">:</span> <span class="num">9</span><span class="sym">)</span> displayNl <span class="sym">!</span>
