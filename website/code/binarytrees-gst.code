<span class="str">&quot;  The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy

   To run: gst -QI /usr/share/gnu-smalltalk/gst.im binarytrees.st -a 12
&quot;</span>

Object subclass<span class="sym">:</span> <span class="slc">#TreeNode
</span>instanceVariableNames<span class="sym">:</span> <span class="str">'left right item'</span>
classVariableNames<span class="sym">:</span> <span class="str">''</span>
poolDictionaries<span class="sym">:</span> <span class="str">''</span>
category<span class="sym">:</span> nil <span class="sym">!


!</span>TreeNode class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!

</span>bottomUpTree<span class="sym">:</span> anItem depth<span class="sym">:</span> anInteger
   ^<span class="sym">(</span>anInteger <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)
</span>      ifTrue<span class="sym">: [
</span>         self
            left<span class="sym">: (</span>self bottomUpTree<span class="sym">:</span> <span class="num">2</span><span class="sym">*</span>anItem <span class="num">- 1</span> depth<span class="sym">:</span> anInteger <span class="num">- 1</span><span class="sym">)
</span>            right<span class="sym">: (</span>self bottomUpTree<span class="sym">:</span> <span class="num">2</span><span class="sym">*</span>anItem depth<span class="sym">:</span> anInteger <span class="num">- 1</span><span class="sym">)
</span>            item<span class="sym">:</span> anItem
         <span class="sym">]
</span>      ifFalse<span class="sym">: [</span>self left<span class="sym">:</span> nil right<span class="sym">:</span> nil item<span class="sym">:</span> anItem<span class="sym">] !

</span>left<span class="sym">:</span> leftChild right<span class="sym">:</span> rightChild item<span class="sym">:</span> anItem
   ^<span class="sym">(</span>super new<span class="sym">)</span> left<span class="sym">:</span> leftChild right<span class="sym">:</span> rightChild item<span class="sym">:</span> anItem <span class="sym">! !


!</span>TreeNode methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!

</span>left<span class="sym">:</span> leftChild right<span class="sym">:</span> rightChild item<span class="sym">:</span> anItem
   left <span class="sym">:=</span> leftChild.
   right <span class="sym">:=</span> rightChild.
   item <span class="sym">:=</span> anItem <span class="sym">! !


!</span>TreeNode methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!

</span>itemCheck
   ^left isNil
      ifTrue<span class="sym">: [</span>item<span class="sym">]</span> ifFalse<span class="sym">: [</span>item <span class="sym">+ (</span>left itemCheck <span class="sym">-</span> right itemCheck<span class="sym">)] ! !


|</span> minDepth n maxDepth stretchDepth check longLivedTree iterations <span class="sym">|
</span>minDepth <span class="sym">:=</span> <span class="num">4</span>.
n <span class="sym">:=</span> Smalltalk arguments first asInteger.
maxDepth <span class="sym">:=</span> minDepth <span class="sym">+</span> <span class="num">2</span> max<span class="sym">:</span> n.
stretchDepth <span class="sym">:=</span> maxDepth <span class="sym">+</span> <span class="num">1</span>.

check <span class="sym">:= (</span>TreeNode bottomUpTree<span class="sym">:</span> <span class="num">0</span> depth<span class="sym">:</span> stretchDepth<span class="sym">)</span> itemCheck.
Transcript
   show<span class="sym">:</span> <span class="str">'stretch tree of depth '</span><span class="sym">;</span> show<span class="sym">:</span> stretchDepth printString<span class="sym">;</span> tab<span class="sym">;
</span>   show<span class="sym">:</span> <span class="str">'  check: '</span><span class="sym">;</span> showCr<span class="sym">:</span> check printString.

longLivedTree <span class="sym">:=</span> TreeNode bottomUpTree<span class="sym">:</span> <span class="num">0</span> depth<span class="sym">:</span> maxDepth.
minDepth to<span class="sym">:</span> maxDepth by<span class="sym">:</span> <span class="num">2</span> <span class="kwa">do</span><span class="sym">: [:</span>depth<span class="sym">|
</span>   iterations <span class="sym">:=</span> <span class="num">1</span> bitShift<span class="sym">:</span> maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth.

   check <span class="sym">:=</span> <span class="num">0</span>.
   <span class="num">1</span> to<span class="sym">:</span> iterations <span class="kwa">do</span><span class="sym">: [:</span>i<span class="sym">|
</span>      check <span class="sym">:=</span> check <span class="sym">+ (</span>TreeNode bottomUpTree<span class="sym">:</span> i depth<span class="sym">:</span> depth<span class="sym">)</span> itemCheck.
      check <span class="sym">:=</span> check <span class="sym">+ (</span>TreeNode bottomUpTree<span class="sym">: -</span><span class="num">1</span><span class="sym">*</span>i depth<span class="sym">:</span> depth<span class="sym">)</span> itemCheck.
   <span class="sym">]</span>.
   Transcript
      show<span class="sym">: (</span><span class="num">2</span><span class="sym">*</span>iterations<span class="sym">)</span> printString<span class="sym">;</span> tab<span class="sym">;
</span>      show<span class="sym">:</span> <span class="str">' trees of depth '</span><span class="sym">;</span> show<span class="sym">:</span> depth printString<span class="sym">;</span> tab<span class="sym">;
</span>      show<span class="sym">:</span> <span class="str">'  check: '</span><span class="sym">;</span> showCr<span class="sym">:</span> check printString.
<span class="sym">]</span>.

Transcript
   show<span class="sym">:</span> <span class="str">'long lived tree of depth '</span><span class="sym">;</span> show<span class="sym">:</span> maxDepth printString<span class="sym">;</span> tab<span class="sym">;
</span>   show<span class="sym">:</span> <span class="str">'  check: '</span><span class="sym">;</span> showCr<span class="sym">:</span> longLivedTree itemCheck  printString <span class="sym">!
</span>
