BUILD COMMANDS FOR: nsievebits.cmucl

Sat Sep 17 12:02:00 PDT 2005

CMUCL built with: /usr/bin/lisp -noinit -batch -eval '(load "nsievebits.cmucl_compile")'
### START nsievebits.cmucl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(compile-file "nsievebits.cmucl" :block-compile t  :entry-points '(main))
(quit)
### END nsievebits.cmucl_compile

; Loading #P"/opt/shootout/shootout/bench/nsievebits/tmp/nsievebits.cmucl_compile".

; Python version 1.1, VM version Intel x86 on 17 SEP 05 12:02:02 pm.
; Compiling: /opt/shootout/shootout/bench/nsievebits/tmp/nsievebits.cmucl 17 SEP 05 12:02:00 pm

; Converted NSIEVEBITS.
; Converted TEST.
; Converted MAIN.
; Compiling DEFUN MAIN: 

; 
; 
; File: /opt/shootout/shootout/bench/nsievebits/tmp/nsievebits.cmucl

; In: DEFUN NSIEVEBITS

;   (MAKE-ARRAY (LIST M) :INITIAL-ELEMENT 1 :ELEMENT-TYPE ...)
; Note: Unable to optimize because:
;     Dimension list not constant; cannot open code array creation
; 

; In: DEFUN MAIN

;   (>= N 0)
; --> IF 
; ==>
;   (< N 0)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 3) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     etc.
; 
;   (>= N 1)
; --> IF 
; ==>
;   (< N 1)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 3) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     etc.
; 
;   (- N 1)
; Note: Forced to do GENERIC-- (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a (INTEGER 1), not a FIXNUM.
;     The result is a UNSIGNED-BYTE, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a (INTEGER 1), not a FIXNUM.
;     The result is a UNSIGNED-BYTE, not a FIXNUM.
;     etc.
; 
;   (>= N 2)
; --> IF 
; ==>
;   (< N 2)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 3) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a INTEGER, not a FIXNUM.
;     etc.
; 
;   (- N 2)
; Note: Forced to do GENERIC-- (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a (INTEGER 2), not a FIXNUM.
;     The result is a UNSIGNED-BYTE, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a (INTEGER 2), not a FIXNUM.
;     The result is a UNSIGNED-BYTE, not a FIXNUM.
;     etc.
; 

; In: DEFUN TEST

;   (* 10000 (EXPT 2 N))
; ==>
;   (* C::Y 10000)
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline fixnum arithmetic (cost 3) because:
;     The first argument is a (INTEGER 1), not a FIXNUM.
;     The result is a (INTEGER 10000), not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 4) because:
;     The first argument is a (INTEGER 1), not a FIXNUM.
;     The result is a (INTEGER 10000), not a FIXNUM.
;     etc.
; 

; In: DEFUN NSIEVEBITS

;   (1- M)
; ==>
;   (- M 1)
; Note: Forced to do GENERIC-- (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a (INTEGER 10000), not a FIXNUM.
;     The result is a (INTEGER 9999), not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a (INTEGER 10000), not a FIXNUM.
;     The result is a (INTEGER 9999), not a FIXNUM.
;     etc.
; 
;   (LOOP FOR I FROM 2...)
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> I #:G5)
; Note: Forced to do GENERIC-> (cost 10).
;     Unable to do inline fixnum comparison (cost 4) because:
;     The second argument is a (INTEGER 9999), not a FIXNUM.
; 
;   (1- M)
; ==>
;   (- M 1)
; Note: Forced to do GENERIC-- (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a (INTEGER 10000), not a FIXNUM.
;     The result is a (INTEGER 9999), not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a (INTEGER 10000), not a FIXNUM.
;     The result is a (INTEGER 9999), not a FIXNUM.
;     etc.
; 
;   (LOOP FOR J FROM #...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> J #:G0)
; Note: Forced to do GENERIC-> (cost 10).
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a (INTEGER 4 1073741820), not a FIXNUM.
;     The second argument is a (INTEGER 9999), not a FIXNUM.
; 
; --> BLOCK 
; ==>
;   (LET (# # #)
;     (DECLARE # # #)
;     (ANSI-LOOP::LOOP-BODY NIL # # # ...))
; Note: Doing signed word to integer coercion (cost 20) to J.
; 
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ 
; ==>
;   (SETQ J (+ J #:G1))
; Note: Doing signed word to integer coercion (cost 20) to J.
; 
; Byte Compiling Top-Level Form: 

; Compilation unit finished.
;   13 notes


; nsievebits.x86f written.
; Compilation finished in 0:00:01.
### START nsievebits.cmucl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(setq *gc-verbose* nil)
(load "nsievebits.x86f" :verbose nil :print nil)
(main) (quit)
### END nsievebits.cmucl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/lisp -noinit -batch -eval '(load "nsievebits.cmucl_run" :verbose nil :print nil)' %A


PROGRAM OUTPUT
==============
Primes up to  5120000   356244
Primes up to  2560000   187134
Primes up to  1280000    98610
