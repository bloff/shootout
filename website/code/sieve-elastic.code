<span class="slc">// $Id: sieve-elastic.code,v 1.5 2005-05-15 05:34:05 bfulgham Exp $
</span><span class="slc">// http://shootout.alioth.debian.org/
</span>package sieve<span class="sym">;

</span>import basic<span class="sym">;
</span>import sys<span class="sym">;
</span>import array<span class="sym">;

</span><span class="kwc">private</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="kwc">private</span> i<span class="sym">,</span> k<span class="sym">;
</span><span class="kwc">private</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwc">private</span> flags <span class="sym">=</span> <span class="dir">#[];
</span><span class="kwc">private</span> count<span class="sym">;
</span><span class="kwa">if</span><span class="sym">(</span>array<span class="sym">.</span>length<span class="sym">(</span>sys<span class="sym">.</span>args<span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">) {
</span>    n <span class="sym">=</span> basic<span class="sym">.</span><span class="kwb">int</span><span class="sym">(</span>sys<span class="sym">.</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
}</span> <span class="kwa">else</span> <span class="sym">{
</span>    n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
}
</span><span class="kwa">while</span><span class="sym">(</span>n<span class="sym">--) {
</span>    count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;=</span> <span class="num">8192</span><span class="sym">;</span> i<span class="sym">++) {
</span>        flags<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">1</span><span class="sym">;
    }
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;=</span> <span class="num">8192</span><span class="sym">;</span> i<span class="sym">++) {
</span>        <span class="kwa">if</span> <span class="sym">(</span>flags<span class="sym">[</span>i<span class="sym">]) {
</span>        <span class="slc">// remove all multiples of prime: i
</span>        <span class="kwa">for</span> <span class="sym">(</span>k<span class="sym">=</span>i<span class="sym">+</span>i<span class="sym">;</span> k <span class="sym">&lt;=</span> <span class="num">8192</span><span class="sym">;</span> k<span class="sym">=</span>k<span class="sym">+</span>i<span class="sym">) {
</span>            flags<span class="sym">[</span>k<span class="sym">] =</span> <span class="num">0</span><span class="sym">;
        }
</span>        count<span class="sym">++;
        }
    }
}
</span>basic<span class="sym">.</span>print<span class="sym">(</span><span class="str">&quot;Count: &quot;</span><span class="sym">,</span> count<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
