#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp

# random <span class="sym">-</span> benchmark
#
# note<span class="sym">,</span> that newLISP has various fast built<span class="sym">-</span>in random
# functions which are <span class="kwa">not</span> used here
#
# Contributed by Lutz Mueller

<span class="sym">(</span><span class="kwa">set</span> <span class="str">'IM 139968)
(set '</span>IA <span class="num">3877</span><span class="sym">)
(</span><span class="kwa">set</span> <span class="str">'IC 29573)

(set '</span>LAST <span class="num">42</span><span class="sym">)

(</span>define <span class="sym">(</span>gen_random maximum<span class="sym">)
	(</span><span class="kwa">set</span> <span class="str">'LAST (mod (add (mul LAST IA) IC) IM))
	(div (mul maximum LAST) IM))


(define (main)
	(set '</span>N <span class="sym">(</span>integer <span class="sym">(</span><span class="kwa">nth</span> <span class="num">2</span> <span class="sym">(</span>main<span class="sym">-</span>args<span class="sym">))))
	(</span>dotimes <span class="sym">(</span>i <span class="sym">(-</span> N <span class="num">1</span><span class="sym">)) (</span>gen_random <span class="num">100.0</span><span class="sym">))

	(</span>println <span class="sym">(</span>format <span class="str">&quot;%.9f&quot;</span> <span class="sym">(</span>gen_random <span class="num">100.0</span><span class="sym">))) )

(</span>main<span class="sym">)

(</span><span class="kwa">exit</span><span class="sym">)
</span>
