<span class="slc">#!/usr/bin/tclsh
</span><span class="slc"># The Great Computer Language Shootout
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># Contributed by Daniel South
</span><span class="slc"># Modified by Hemang Lavana
</span>
<span class="kwa">proc</span> kFrequency <span class="sym">{</span>str offset framesize<span class="sym">} {
</span>   <span class="kwa">set</span> n <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{[</span><span class="kwa">string</span> length <span class="kwb">$str</span><span class="sym">]-</span><span class="kwb">$offset</span><span class="sym">}]
</span>   <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="kwb">$offset</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$n</span><span class="sym">} {</span><span class="kwa">incr</span> i <span class="kwb">$framesize</span><span class="sym">} {
</span>      <span class="kwa">set</span> fragment <span class="sym">[</span><span class="kwa">string</span> range <span class="kwb">$str $i</span> <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$i</span><span class="sym">+</span><span class="kwb">$framesize</span><span class="num">-1</span><span class="sym">}]]
</span>      <span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">catch</span> <span class="sym">{</span><span class="kwa">incr</span> <span class="sym">::</span>freq<span class="sym">(</span><span class="kwb">$fragment</span><span class="sym">)}]} {</span><span class="kwa">set</span> <span class="sym">::</span>freq<span class="sym">(</span><span class="kwb">$fragment</span><span class="sym">)</span> <span class="num">1</span><span class="sym">}
   }
}

</span><span class="kwa">proc</span> frequency <span class="sym">{</span>str fsize<span class="sym">} {
</span>   <span class="kwa">array unset</span> <span class="sym">::</span>freq

   <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> sum <span class="num">0</span><span class="sym">;</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$fsize</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>kFrequency <span class="kwb">$str $i $fsize</span><span class="sym">}
</span>   <span class="kwa">foreach</span> fragment <span class="sym">[</span><span class="kwa">lsort</span> <span class="sym">[</span><span class="kwa">array</span> names <span class="sym">::</span>freq<span class="sym">]] {
</span>      <span class="kwa">incr</span> sum <span class="sym">[</span><span class="kwa">set</span> count <span class="kwb">$</span><span class="sym">::</span>freq<span class="sym">(</span><span class="kwb">$fragment</span><span class="sym">)]
</span>      <span class="kwa">lappend</span> sortheap <span class="sym">[</span><span class="kwa">list</span> <span class="kwb">$fragment $count</span><span class="sym">]
   }
</span>   <span class="kwa">foreach</span> item <span class="sym">[</span><span class="kwa">lsort</span> <span class="sym">-</span>integer <span class="sym">-</span>index <span class="num">1</span> <span class="sym">-</span>decreasing <span class="kwb">$sortheap</span><span class="sym">] {
</span>      <span class="kwa">set</span> percent <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span>double<span class="sym">([</span><span class="kwa">lindex</span> <span class="kwb">$item</span> <span class="num">1</span><span class="sym">]) /</span> <span class="kwb">$sum</span> <span class="sym">*</span> <span class="num">100</span><span class="sym">}]
</span>      <span class="kwa">puts</span> <span class="sym">[</span><span class="kwa">format</span> <span class="str">&quot;%s %0.3f&quot;</span> <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$item</span> <span class="num">0</span><span class="sym">]</span> <span class="kwb">$percent</span><span class="sym">]
   }
</span>   <span class="kwa">puts</span> <span class="str">&quot;&quot;</span>
<span class="sym">}

</span><span class="kwa">proc</span> count <span class="sym">{</span>str fragment<span class="sym">} {
</span>   <span class="kwa">array unset</span> <span class="sym">::</span>freq

   <span class="kwa">set</span> fsize <span class="sym">[</span><span class="kwa">string</span> length <span class="kwb">$fragment</span><span class="sym">]
</span>   <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> count <span class="num">0</span><span class="sym">;</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$fsize</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {</span>kFrequency <span class="kwb">$str $i $fsize</span><span class="sym">}
</span>   <span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">info</span> exists <span class="sym">::</span>freq<span class="sym">(</span><span class="kwb">$fragment</span><span class="sym">)]} {</span><span class="kwa">set</span> count <span class="kwb">$</span><span class="sym">::</span>freq<span class="sym">(</span><span class="kwb">$fragment</span><span class="sym">)}
</span>   <span class="kwa">puts</span> <span class="kwb">$count</span>\t<span class="kwb">$fragment
</span><span class="sym">}

</span><span class="kwa">proc</span> main <span class="sym">{} {
</span>   <span class="kwa">while</span> <span class="sym">{[</span><span class="kwa">gets</span> stdin line<span class="sym">] != -</span><span class="num">1</span><span class="sym">} {</span><span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">string</span> match <span class="str">&quot;&gt;THREE*&quot;</span> <span class="kwb">$line</span><span class="sym">]}</span> <span class="kwa">break</span><span class="sym">}
</span>   <span class="kwa">while</span> <span class="sym">{[</span><span class="kwa">gets</span> stdin line<span class="sym">] != -</span><span class="num">1</span><span class="sym">} {
</span>      <span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">string</span> index <span class="kwb">$line</span> <span class="num">0</span><span class="sym">]</span> eq <span class="str">&quot;&gt;&quot;</span><span class="sym">} {
</span>         <span class="kwa">break
</span>      <span class="sym">}</span> elseif <span class="sym">{[</span><span class="kwa">string</span> index <span class="kwb">$line</span> <span class="num">0</span><span class="sym">]</span> ne <span class="str">&quot;;&quot;</span><span class="sym">} {
</span>         <span class="kwa">append</span> sequence <span class="kwb">$line
</span>      <span class="sym">}
   }
</span>   <span class="kwa">set</span> sequence <span class="sym">[</span><span class="kwa">string</span> toupper <span class="kwb">$sequence</span><span class="sym">]

</span>   frequency <span class="kwb">$sequence</span> <span class="num">1
</span>   frequency <span class="kwb">$sequence</span> <span class="num">2

</span>   count <span class="kwb">$sequence</span> <span class="str">&quot;GGT&quot;</span>
   count <span class="kwb">$sequence</span> <span class="str">&quot;GGTA&quot;</span>
   count <span class="kwb">$sequence</span> <span class="str">&quot;GGTATT&quot;</span>
   count <span class="kwb">$sequence</span> <span class="str">&quot;GGTATTTTAATT&quot;</span>
   count <span class="kwb">$sequence</span> <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span>
<span class="sym">}

</span>main
