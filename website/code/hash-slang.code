<span class="line">    1 </span>define main <span class="sym">()
</span><span class="line">    2 </span><span class="sym">{
</span><span class="line">    3 </span><span class="sym"></span>   variable n<span class="sym">=</span><span class="num">1</span><span class="sym">;
</span><span class="line">    4 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> n <span class="sym">=</span> integer <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);
</span><span class="line">    5 </span><span class="sym"></span>   variable X <span class="sym">=</span> Assoc_Type<span class="sym">[</span>Int_Type<span class="sym">];
</span><span class="line">    6 </span><span class="sym"></span>   _for <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">,</span> <span class="num">1</span><span class="sym">)
</span><span class="line">    7 </span><span class="sym">     {
</span><span class="line">    8 </span><span class="sym"></span>        variable i <span class="sym">= ();
</span><span class="line">    9 </span><span class="sym"></span>        X<span class="sym">[</span>sprintf<span class="sym">(</span><span class="str">&quot;%x&quot;</span><span class="sym">,</span> i<span class="sym">)] =</span> i<span class="sym">;
</span><span class="line">   10 </span><span class="sym">     }
</span><span class="line">   11 </span><span class="sym"></span>   variable c <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   12 </span><span class="sym"></span>   _for <span class="sym">(</span>n<span class="sym">,</span> <span class="num">1</span><span class="sym">, -</span><span class="num">1</span><span class="sym">)
</span><span class="line">   13 </span><span class="sym">     {
</span><span class="line">   14 </span><span class="sym"></span>        i <span class="sym">=</span> string <span class="sym">();
</span><span class="line">   15 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>assoc_key_exists <span class="sym">(</span>X<span class="sym">,</span> i<span class="sym">))
</span><span class="line">   16 </span><span class="sym"></span>          c<span class="sym">++;
</span><span class="line">   17 </span><span class="sym">     }
</span><span class="line">   18 </span><span class="sym"></span>   fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> c<span class="sym">);
</span><span class="line">   19 </span><span class="sym">}
</span><span class="line">   20 </span><span class="sym">
</span><span class="line">   21 </span><span class="sym"></span>main<span class="sym">();</span>
