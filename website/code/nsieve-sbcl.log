BUILD COMMANDS FOR: nsieve.sbcl

Wed Nov  2 03:11:08 PST 2005

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "nsieve.sbcl_compile")'
### START nsieve.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "nsieve.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END nsieve.sbcl_compile


; compiling file "/opt/shootout/shootout/bench/nsieve/tmp/nsieve.sbcl" (written 02 NOV 2005 03:11:09 AM):
; compiling (DEFUN NSIEVE ...)
; file: /opt/shootout/shootout/bench/nsieve/tmp/nsieve.sbcl
; in: DEFUN NSIEVE
;     (MAKE-ARRAY (LIST M) :INITIAL-ELEMENT T :ELEMENT-TYPE 'BOOLEAN)
; --> LET 
; ==>
;   (MAKE-ARRAY SB-C::DIMS :ELEMENT-TYPE 'T)
; 
; note: unable to
;   optimize
; because:
;   The dimension list is not constant; cannot open code array creation.

;     (1- M)
; ==>
;   (- M 1)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (LOOP FOR I FROM 2 TO (1- M) WHEN (AREF A I) DO (CLEAR I) COUNT ...)
; --> BLOCK LET LET SB-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> I #:LOOP-LIMIT-5)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The second argument is a INTEGER, not a FIXNUM.

;     (1- M)
; ==>
;   (- M 1)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (LOOP FOR J FROM (+ I I) TO (1- M) BY I DO (SETF (AREF A J) NIL))
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> J #:LOOP-LIMIT-0)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 4 1073741821), not a FIXNUM.
;       The second argument is a INTEGER, not a FIXNUM.

; --> BLOCK 
; ==>
;   (LET ((J (+ I I)) (#:LOOP-LIMIT-0 (1- M)) (#:LOOP-STEP-BY-1 I))
;     (DECLARE (TYPE (AND NUMBER (REAL #)) #:LOOP-STEP-BY-1)
;              (TYPE (AND NUMBER REAL) #:LOOP-LIMIT-0)
;              (TYPE (AND REAL NUMBER) J))
;     (SB-LOOP::LOOP-BODY NIL
;                         (NIL NIL
;                              (WHEN (> J #:LOOP-LIMIT-0) (GO SB-LOOP::END-LOOP))
;                              NIL)
;                         ((SETF (AREF A J) NIL))
;                         (NIL
;                          (SB-LOOP::LOOP-REALLY-DESETQ J (+ J #:LOOP-STEP-BY-1))
;                          (WHEN (> J #:LOOP-LIMIT-0) (GO SB-LOOP::END-LOOP))
;                          NIL)
;                         NIL))
; 
; note: doing signed word to integer coercion (cost 20) to J

; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY SB-LOOP::LOOP-REALLY-DESETQ 
; ==>
;   (SETQ J (+ J #:LOOP-STEP-BY-1))
; 
; note: doing signed word to integer coercion (cost 20) to J

; compiling (DEFUN TEST ...)
; file: /opt/shootout/shootout/bench/nsieve/tmp/nsieve.sbcl
; in: DEFUN TEST
;     (* 10000 (EXPT 2 N))
; ==>
;   (* SB-C::Y 10000)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   convert x*2^k to shift
; due to type uncertainty:
;   The first argument is a NUMBER, not a INTEGER.
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a NUMBER, not a (UNSIGNED-BYTE 32).
;   The result is a (VALUES NUMBER
;                           &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 32) &REST T).
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a NUMBER, not a FIXNUM.
;   The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
; 
; note: forced to do GENERIC-* (cost 30)
;       unable to do inline fixnum arithmetic (cost 3) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 4) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; compiling (DEFUN MAIN ...)
; file: /opt/shootout/shootout/bench/nsieve/tmp/nsieve.sbcl
; in: DEFUN MAIN
;     (>= N 0)
; --> IF 
; ==>
;   (< N 0)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (>= N 1)
; --> IF 
; ==>
;   (< N 1)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (- N 1)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (>= N 2)
; --> IF 
; ==>
;   (< N 2)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

;     (- N 2)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER 2), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER 2), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.
; 
; compilation unit finished
;   printed 19 notes


; /opt/shootout/shootout/bench/nsieve/tmp/nsieve.fasl written
; compilation finished in 0:00:01
[doing purification: roots handlers stack bindings static cleanup done]
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /opt/shootout/shootout/bench/nsieve/tmp/sbcl.core:
writing 20112944 bytes from the read-only space at 0x01000000
writing 6840032 bytes from the static space at 0x05000000
writing 4096 bytes from the dynamic space at 0x09000000
done]
### START nsieve.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END nsieve.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load nsieve.sbcl_run %A


PROGRAM OUTPUT
==============
Primes up to  5120000   356244
Primes up to  2560000   187134
Primes up to  1280000    98610
