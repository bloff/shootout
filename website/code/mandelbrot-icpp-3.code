<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Greg Buchholz</span>
<span class="com">   compile:  g++ -O3</span>
<span class="com">*/</span>

<span class="dir">#include&lt;iostream&gt;</span>
<span class="dir">#include&lt;complex&gt;</span>

<span class="kwb">int</span> <span class="kwd">main</span> <span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">**</span>argv<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">char</span>  bit_num <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> byte_acc <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwb">const int</span> iter <span class="sym">=</span> <span class="num">50</span><span class="sym">;</span>
  <span class="kwb">const double</span> lim <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> <span class="num">2.0</span><span class="sym">;</span>

  std<span class="sym">::</span>ios_base<span class="sym">::</span><span class="kwd">sync_with_stdio</span><span class="sym">(</span><span class="kwa">false</span><span class="sym">);</span>
  <span class="kwb">int</span> n <span class="sym">=</span> <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>

  std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">&lt;&lt;</span> n <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> n <span class="sym">&lt;&lt;</span> std<span class="sym">::</span>endl<span class="sym">;</span>

  <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> y<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> y<span class="sym">&lt;</span>n<span class="sym">; ++</span>y<span class="sym">)</span>
    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> x<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> x<span class="sym">&lt;</span>n<span class="sym">; ++</span>x<span class="sym">)</span>
    <span class="sym">{</span>
       std<span class="sym">::</span><span class="kwb">complex</span><span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;</span> <span class="kwd">Z</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">),</span><span class="kwd">C</span><span class="sym">(</span><span class="num">2</span><span class="sym">*(</span><span class="kwb">double</span><span class="sym">)</span>x<span class="sym">/</span>n <span class="sym">-</span> <span class="num">1.5</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*(</span><span class="kwb">double</span><span class="sym">)</span>y<span class="sym">/</span>n <span class="sym">-</span> <span class="num">1.0</span><span class="sym">);</span>

       <span class="slc">//manually inlining &quot;norm&quot; results in a 5x-7x speedup on gcc</span>
       <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>iter <span class="kwa">and</span> Z<span class="sym">.</span><span class="kwd">real</span><span class="sym">()*</span>Z<span class="sym">.</span><span class="kwd">real</span><span class="sym">() +</span> Z<span class="sym">.</span><span class="kwd">imag</span><span class="sym">()*</span>Z<span class="sym">.</span><span class="kwd">imag</span><span class="sym">() &lt;=</span> lim<span class="sym">; ++</span>i<span class="sym">)</span>
         Z <span class="sym">=</span> Z<span class="sym">*</span>Z <span class="sym">+</span> C<span class="sym">;</span>

       byte_acc <span class="sym">= (</span>byte_acc <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">) | ((</span><span class="kwd">norm</span><span class="sym">(</span>Z<span class="sym">) &gt;</span> lim<span class="sym">)</span> ? <span class="num">0x00</span><span class="sym">:</span><span class="num">0x01</span><span class="sym">);</span>

       <span class="kwa">if</span><span class="sym">(++</span>bit_num <span class="sym">==</span> <span class="num">8</span><span class="sym">){</span> std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> byte_acc<span class="sym">;</span> bit_num <span class="sym">=</span> byte_acc <span class="sym">=</span> <span class="num">0</span><span class="sym">; }</span>
       <span class="kwa">else if</span><span class="sym">(</span>x <span class="sym">==</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">) {</span> byte_acc  <span class="sym">&lt;&lt;= (</span><span class="num">8</span><span class="sym">-</span>n<span class="sym">%</span><span class="num">8</span><span class="sym">);</span>
                           std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> byte_acc<span class="sym">;</span>
                           bit_num <span class="sym">=</span> byte_acc <span class="sym">=</span> <span class="num">0</span><span class="sym">; }</span>
    <span class="sym">}</span>
<span class="sym">}</span>
