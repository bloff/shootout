<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># Contributed by Andrew McParland</span>

<span class="kwa">package</span> require Thread

<span class="kwa">proc</span> meeting_place <span class="sym">{} {</span>
    thread<span class="sym">::</span>create <span class="sym">{</span>
        <span class="kwa">proc</span> init <span class="sym">{</span>meetings<span class="sym">} {</span>
            <span class="kwa">global</span> meetings_left first
            <span class="kwa">set</span> meetings_left <span class="kwb">$meetings</span>
            <span class="kwa">set</span> first <span class="num">1</span>
        <span class="sym">}</span>
        <span class="slc"># Process the request to meet</span>
        <span class="kwa">proc</span> meet <span class="sym">{</span>tid colour<span class="sym">} {</span>
            <span class="kwa">global</span> meetings_left first first_colour first_tid
            <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$meetings_left</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">} {</span>
                thread<span class="sym">::</span><span class="kwa">send</span> <span class="sym">-</span>async <span class="kwb">$tid</span> <span class="sym">[</span><span class="kwa">list</span> met <span class="str">&quot;Faded&quot;</span><span class="sym">]</span>
            <span class="sym">}</span> else <span class="sym">{</span>
                <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$first</span><span class="sym">} {</span>
                    <span class="kwa">set</span> first_tid <span class="kwb">$tid</span>
                    <span class="kwa">set</span> first_colour <span class="kwb">$colour</span>
                    <span class="kwa">set</span> first <span class="num">0</span>
                <span class="sym">}</span> else <span class="sym">{</span>
                    <span class="slc"># Tell the 2 creatures the colour of the other creature</span>
                    thread<span class="sym">::</span><span class="kwa">send</span> <span class="sym">-</span>async <span class="kwb">$first_tid</span> <span class="sym">[</span><span class="kwa">list</span> met <span class="kwb">$colour</span><span class="sym">]</span>
                    thread<span class="sym">::</span><span class="kwa">send</span> <span class="sym">-</span>async <span class="kwb">$tid</span> <span class="sym">[</span><span class="kwa">list</span> met <span class="kwb">$first_colour</span><span class="sym">]</span>
                    <span class="kwa">incr</span> meetings_left <span class="sym">-</span><span class="num">1</span>
                    <span class="kwa">set</span> first <span class="num">1</span>
                <span class="sym">}</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        thread<span class="sym">::</span>wait
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">proc</span> create_creature <span class="sym">{} {</span>
    thread<span class="sym">::</span>create <span class="sym">-</span>joinable <span class="sym">{</span>
        <span class="kwa">proc</span> start <span class="sym">{</span>initial_colour MeetingPlaceId<span class="sym">} {</span>
            <span class="kwa">global</span> colour MeetingPlace meetings
            <span class="kwa">set</span> colour <span class="kwb">$initial_colour</span>
            <span class="kwa">set</span> MeetingPlace <span class="kwb">$MeetingPlaceId</span>
            <span class="kwa">set</span> meetings <span class="num">0</span>
            <span class="slc"># Start the meeting process</span>
            thread<span class="sym">::</span><span class="kwa">send</span> <span class="sym">-</span>async <span class="kwb">$MeetingPlace</span> <span class="sym">[</span><span class="kwa">list</span> meet <span class="sym">[</span>thread<span class="sym">::</span>id<span class="sym">]</span> <span class="kwb">$colour</span><span class="sym">]</span>
        <span class="sym">}</span>
        <span class="slc"># Called when met another creature</span>
        <span class="kwa">proc</span> met <span class="sym">{</span>col<span class="sym">} {</span>
            <span class="kwa">global</span> meetings MeetingPlace colour
            <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$col</span> ne <span class="str">&quot;Faded&quot;</span><span class="sym">} {</span>
                <span class="kwa">set</span> colour <span class="sym">[</span>change_colour <span class="kwb">$colour $col</span><span class="sym">]</span>
                <span class="kwa">incr</span> meetings
                <span class="slc"># Request another meeting</span>
                thread<span class="sym">::</span><span class="kwa">send</span> <span class="sym">-</span>async <span class="kwb">$MeetingPlace</span> <span class="sym">[</span><span class="kwa">list</span> meet <span class="sym">[</span>thread<span class="sym">::</span>id<span class="sym">]</span> <span class="kwb">$colour</span><span class="sym">]</span>
            <span class="sym">}</span> else <span class="sym">{</span>
                <span class="slc"># Fade away...</span>
                tsv<span class="sym">::</span><span class="kwa">incr</span> creatures sum <span class="kwb">$meetings</span>
                thread<span class="sym">::</span>release
            <span class="sym">}</span>
        <span class="sym">}</span>
        <span class="kwa">proc</span> change_colour <span class="sym">{</span>col1 col2<span class="sym">} {</span>
            <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$col1</span> eq <span class="kwb">$col2</span><span class="sym">} {</span><span class="kwa">return</span> <span class="kwb">$col1</span><span class="sym">}</span>
            <span class="kwa">switch</span> <span class="kwb">$col1</span> <span class="sym">{</span>
                <span class="str">&quot;Blue&quot;</span> <span class="sym">{</span><span class="kwa">return</span> <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$col2</span> eq <span class="str">&quot;Red&quot;</span> ? <span class="str">&quot;Yellow&quot;</span> <span class="sym">:</span> <span class="str">&quot;Red&quot;</span><span class="sym">}]}</span>
                <span class="str">&quot;Red&quot;</span> <span class="sym">{</span><span class="kwa">return</span> <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$col2</span> eq <span class="str">&quot;Blue&quot;</span> ? <span class="str">&quot;Yellow&quot;</span> <span class="sym">:</span> <span class="str">&quot;Blue&quot;</span><span class="sym">}]}</span>
                <span class="str">&quot;Yellow&quot;</span> <span class="sym">{</span><span class="kwa">return</span> <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$col2</span> eq <span class="str">&quot;Blue&quot;</span> ? <span class="str">&quot;Red&quot;</span> <span class="sym">:</span> <span class="str">&quot;Blue&quot;</span><span class="sym">}]}</span>
                default <span class="sym">{</span><span class="kwa">return</span> <span class="kwb">$col1</span><span class="sym">}</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        thread<span class="sym">::</span>wait
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="slc"># Initialise thread-shared sum of creatures met</span>
tsv<span class="sym">::</span><span class="kwa">set</span> creatures sum <span class="num">0</span>

<span class="slc"># Create the meeting place thread</span>
<span class="kwa">set</span> MeetingPlace <span class="sym">[</span>meeting_place<span class="sym">]</span>

<span class="kwa">set</span> colours <span class="sym">[</span><span class="kwa">list</span> Blue Red Yellow Blue<span class="sym">]</span>

<span class="slc"># Start the creature threads</span>
<span class="kwa">foreach</span> c <span class="kwb">$colours</span> <span class="sym">{</span>
    <span class="kwa">lappend</span> threads <span class="sym">[</span>create_creature<span class="sym">]</span>
<span class="sym">}</span>

<span class="slc"># Initialise the meeting place and start each creature</span>
thread<span class="sym">::</span><span class="kwa">send</span> <span class="kwb">$MeetingPlace</span> <span class="sym">[</span><span class="kwa">list</span> init <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$argv</span> <span class="num">0</span><span class="sym">]]</span>
<span class="kwa">foreach</span> t <span class="kwb">$threads</span> c <span class="kwb">$colours</span> <span class="sym">{</span>
    thread<span class="sym">::</span><span class="kwa">send</span> <span class="kwb">$t</span> <span class="sym">[</span><span class="kwa">list</span> start <span class="kwb">$c $MeetingPlace</span><span class="sym">]</span>
<span class="sym">}</span>

<span class="slc"># Wait for the creature threads to finish</span>
<span class="kwa">foreach</span> t <span class="kwb">$threads</span> <span class="sym">{</span>
    thread<span class="sym">::</span><span class="kwa">join</span> <span class="kwb">$t</span>
<span class="sym">}</span>

<span class="slc"># Print sum of meetings</span>
<span class="kwa">puts</span> <span class="sym">[</span>tsv<span class="sym">::</span><span class="kwa">set</span> creatures sum<span class="sym">]</span>
