<span class="slc">// -*- mode: c++ -*-</span>
<span class="slc">// $Id moments.gpp,v 1.1.1.1 2004/05/19 18:10:47 bfulgham Exp $</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// Calculate statistical moments of a region, from Bill Lear</span>
<span class="slc">// Modified by Tamás Benkõ</span>
<span class="slc">// Further modified by Tom Hyer</span>

<span class="dir">#include &lt;vector&gt;</span>
<span class="dir">#include &lt;numeric&gt;</span>
<span class="dir">#include &lt;iterator&gt;</span>
<span class="dir">#include &lt;algorithm&gt;</span>
<span class="dir">#include &lt;iomanip&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;cstdio&gt;</span>
<span class="dir">#include &lt;cstdlib&gt;</span>
<span class="dir">#include &lt;cmath&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> T<span class="sym">&gt;</span>
<span class="kwb">struct</span> moments <span class="sym">{</span>
<span class="kwc">public</span><span class="sym">:</span>
    <span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> InputIterator<span class="sym">&gt;</span>
    <span class="kwd">moments</span><span class="sym">(</span>InputIterator begin<span class="sym">,</span> InputIterator end<span class="sym">)</span>
        <span class="sym">:</span> <span class="kwd">median</span><span class="sym">(</span><span class="num">0.0</span><span class="sym">),</span> <span class="kwd">mean</span><span class="sym">(</span><span class="num">0.0</span><span class="sym">),</span> <span class="kwd">average_deviation</span><span class="sym">(</span><span class="num">0.0</span><span class="sym">),</span>
          <span class="kwd">standard_deviation</span><span class="sym">(</span><span class="num">0.0</span><span class="sym">),</span> <span class="kwd">variance</span><span class="sym">(</span><span class="num">0.0</span><span class="sym">),</span>
          <span class="kwd">skew</span><span class="sym">(</span><span class="num">0.0</span><span class="sym">),</span> <span class="kwd">kurtosis</span><span class="sym">(</span><span class="num">0.0</span><span class="sym">)</span>
        <span class="sym">{</span>
            T sum <span class="sym">=</span> <span class="kwd">accumulate</span><span class="sym">(</span>begin<span class="sym">,</span> end<span class="sym">,</span> <span class="num">0.0</span><span class="sym">);</span>
            <span class="kwb">size_t</span> N <span class="sym">=</span> end <span class="sym">-</span> begin<span class="sym">;</span>
            mean <span class="sym">=</span> sum <span class="sym">/</span> N<span class="sym">;</span>
            <span class="kwa">for</span> <span class="sym">(</span>InputIterator i <span class="sym">=</span> begin<span class="sym">;</span> i <span class="sym">!=</span> end<span class="sym">; ++</span>i<span class="sym">) {</span>
                T deviation <span class="sym">= *</span>i <span class="sym">-</span> mean<span class="sym">;</span>
                average_deviation <span class="sym">+=</span> <span class="kwd">fabs</span><span class="sym">(</span>deviation<span class="sym">);</span>
				T temp <span class="sym">=</span> deviation <span class="sym">*</span> deviation<span class="sym">;</span>
                variance <span class="sym">+=</span> temp<span class="sym">;</span>
				temp <span class="sym">*=</span> deviation<span class="sym">;</span>
                skew <span class="sym">+=</span> temp<span class="sym">;</span>
                kurtosis <span class="sym">+=</span> temp <span class="sym">*</span> deviation<span class="sym">;</span>
            <span class="sym">}</span>
            average_deviation <span class="sym">/=</span> N<span class="sym">;</span>
            variance <span class="sym">/= (</span>N <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
            standard_deviation <span class="sym">=</span> <span class="kwd">sqrt</span><span class="sym">(</span>variance<span class="sym">);</span>

            <span class="kwa">if</span> <span class="sym">(</span>variance<span class="sym">) {</span>
                skew <span class="sym">/= (</span>N <span class="sym">*</span> variance <span class="sym">*</span> standard_deviation<span class="sym">);</span>
                kurtosis <span class="sym">=</span> kurtosis<span class="sym">/(</span>N <span class="sym">*</span> variance <span class="sym">*</span> variance<span class="sym">) -</span> <span class="num">3.0</span><span class="sym">;</span>
            <span class="sym">}</span>

            InputIterator mid <span class="sym">=</span> begin<span class="sym">+</span>N<span class="sym">/</span><span class="num">2</span><span class="sym">;</span>
            <span class="kwd">nth_element</span><span class="sym">(</span>begin<span class="sym">,</span> mid<span class="sym">,</span> end<span class="sym">);</span>
            <span class="kwa">if</span> <span class="sym">(</span>N <span class="sym">%</span> <span class="num">2</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">) {</span>
				InputIterator next_biggest <span class="sym">=</span> <span class="kwd">max_element</span><span class="sym">(</span>begin<span class="sym">,</span>
mid<span class="sym">);</span>
                median <span class="sym">= (*</span>mid<span class="sym">+*</span>next_biggest<span class="sym">)/</span><span class="num">2</span><span class="sym">;</span>
            <span class="sym">}</span>
			<span class="kwa">else</span>
				median <span class="sym">= *</span>mid<span class="sym">;</span>
        <span class="sym">}</span>

    T median<span class="sym">;</span>
    T mean<span class="sym">;</span>
    T average_deviation<span class="sym">;</span>
    T standard_deviation<span class="sym">;</span>
    T variance<span class="sym">;</span>
    T skew<span class="sym">;</span>
    T kurtosis<span class="sym">;</span>
<span class="sym">};</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">() {</span>
    vector<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;</span> v<span class="sym">;</span>
    <span class="kwb">double</span> d<span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span><span class="kwd">scanf</span><span class="sym">(</span><span class="str">&quot; %lf&quot;</span><span class="sym">, &amp;</span>d<span class="sym">) ==</span> <span class="num">1</span><span class="sym">)</span> v<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span>d<span class="sym">);</span>
    moments<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;</span> <span class="kwd">m</span><span class="sym">(</span>v<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> v<span class="sym">.</span><span class="kwd">end</span><span class="sym">());</span>

    cout <span class="sym">&lt;&lt;</span> std<span class="sym">::</span>fixed <span class="sym">&lt;&lt;</span> std<span class="sym">::</span><span class="kwd">setprecision</span><span class="sym">(</span><span class="num">6</span><span class="sym">);</span>
    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;n:                  &quot;</span> <span class="sym">&lt;&lt;</span> v<span class="sym">.</span><span class="kwd">end</span><span class="sym">() -</span> v<span class="sym">.</span><span class="kwd">begin</span><span class="sym">() &lt;&lt;</span> endl<span class="sym">;</span>
    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;median:             &quot;</span> <span class="sym">&lt;&lt;</span> m<span class="sym">.</span>median <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;mean:               &quot;</span> <span class="sym">&lt;&lt;</span> m<span class="sym">.</span>mean <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;average_deviation:  &quot;</span> <span class="sym">&lt;&lt;</span> m<span class="sym">.</span>average_deviation <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;standard_deviation: &quot;</span> <span class="sym">&lt;&lt;</span> m<span class="sym">.</span>standard_deviation <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;variance:           &quot;</span> <span class="sym">&lt;&lt;</span> m<span class="sym">.</span>variance <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;skew:               &quot;</span> <span class="sym">&lt;&lt;</span> m<span class="sym">.</span>skew <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;kurtosis:           &quot;</span> <span class="sym">&lt;&lt;</span> m<span class="sym">.</span>kurtosis <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
