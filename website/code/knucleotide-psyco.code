<span class="slc">#!/usr/bin/python -OO
</span><span class="slc"># The Great Computer Language Shootout
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># Contributed by Kevin Carson
</span>
<span class="kwc">from</span> sys <span class="kwc">import</span> stdin
<span class="kwc">import</span> psyco

psyco<span class="sym">.</span>full<span class="sym">()


</span><span class="kwa">class</span> k_nucleotide <span class="sym">:
</span>    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> sequence<span class="sym">) :
</span>        <span class="kwc">self</span><span class="sym">.</span>seq <span class="sym">=</span> sequence
        <span class="kwc">self</span><span class="sym">.</span>seq_length <span class="sym">=</span> <span class="kwa">len</span><span class="sym">(</span><span class="kwc">self</span><span class="sym">.</span>seq<span class="sym">)
</span>        <span class="kwc">self</span><span class="sym">.</span>frequencies <span class="sym">= {}


</span>    <span class="kwb">def</span> k_frequency<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> frame<span class="sym">) :
</span>        n <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>seq_length <span class="sym">+</span> <span class="num">1</span> <span class="sym">-</span> frame

        <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>n<span class="sym">) :
</span>            k_nucleo <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>seq<span class="sym">[</span>i<span class="sym">:</span>i <span class="sym">+</span> frame<span class="sym">]

</span>            <span class="kwb">try</span> <span class="sym">:
</span>                <span class="kwc">self</span><span class="sym">.</span>frequencies<span class="sym">[</span>k_nucleo<span class="sym">] +=</span> <span class="num">1
</span>            <span class="kwb">except</span> <span class="kwa">KeyError</span> <span class="sym">:
</span>                <span class="kwc">self</span><span class="sym">.</span>frequencies<span class="sym">[</span>k_nucleo<span class="sym">] =</span> <span class="num">1


</span>    <span class="kwb">def</span> generate_frequencies<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> length<span class="sym">) :
</span>        <span class="kwc">self</span><span class="sym">.</span>frequencies<span class="sym">.</span>clear<span class="sym">()
</span>        <span class="kwc">self</span><span class="sym">.</span>k_frequency<span class="sym">(</span>length<span class="sym">)


</span>    <span class="kwb">def</span> freq_code_cmp<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> fc1<span class="sym">,</span> fc2<span class="sym">) :
</span>        <span class="kwb">if</span> fc1<span class="sym">[</span><span class="num">1</span><span class="sym">] &gt;</span> fc2<span class="sym">[</span><span class="num">1</span><span class="sym">] :
</span>            <span class="kwb">return</span> <span class="num">-1
</span>        <span class="kwb">elif</span> fc1<span class="sym">[</span><span class="num">1</span><span class="sym">] ==</span> fc2<span class="sym">[</span><span class="num">1</span><span class="sym">] :
</span>            <span class="kwb">if</span> fc1<span class="sym">[</span><span class="num">0</span><span class="sym">] &gt;</span> fc2<span class="sym">[</span><span class="num">0</span><span class="sym">] :
</span>                <span class="kwb">return</span> <span class="num">1
</span>            <span class="kwb">elif</span> fc1<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> fc2<span class="sym">[</span><span class="num">0</span><span class="sym">] :
</span>                <span class="kwb">return</span> <span class="num">0
</span>            <span class="kwb">else</span> <span class="sym">:
</span>                <span class="kwb">return</span> <span class="num">-1
</span>        <span class="kwb">else</span> <span class="sym">:
</span>            <span class="kwb">return</span> <span class="num">1


</span>    <span class="kwb">def</span> write_frequencies<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> nucleotide_length<span class="sym">) :
</span>        <span class="kwc">self</span><span class="sym">.</span>generate_frequencies<span class="sym">(</span>nucleotide_length<span class="sym">)

</span>        fcp <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>frequencies<span class="sym">.</span>items<span class="sym">()
</span>        fcp<span class="sym">.</span>sort<span class="sym">(</span> <span class="kwc">self</span><span class="sym">.</span>freq_code_cmp <span class="sym">)

</span>        sum <span class="sym">=</span> <span class="num">0
</span>        <span class="kwb">for</span> <span class="kwa">tuple</span> <span class="kwb">in</span> fcp <span class="sym">:
</span>            sum <span class="sym">+=</span> <span class="kwa">tuple</span><span class="sym">[</span><span class="num">1</span><span class="sym">]

</span>        <span class="kwb">for</span> <span class="kwa">tuple</span> <span class="kwb">in</span> fcp <span class="sym">:
</span>            <span class="kwb">print</span> <span class="str">&quot;%s %.3f&quot;</span> <span class="sym">% (</span><span class="kwa">tuple</span><span class="sym">[</span><span class="num">0</span><span class="sym">], (</span><span class="kwa">tuple</span><span class="sym">[</span><span class="num">1</span><span class="sym">] *</span> <span class="num">100.0</span><span class="sym">) /</span> sum<span class="sym">)

</span>        <span class="kwb">print</span> <span class="str">&quot;&quot;</span>


    <span class="kwb">def</span> write_count<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> fragment<span class="sym">) :
</span>        <span class="kwc">self</span><span class="sym">.</span>generate_frequencies<span class="sym">(</span><span class="kwa">len</span><span class="sym">(</span>fragment<span class="sym">))

</span>        <span class="kwb">try</span> <span class="sym">:
</span>            count <span class="sym">=</span> <span class="kwc">self</span><span class="sym">.</span>frequencies<span class="sym">[</span>fragment<span class="sym">]
</span>        <span class="kwb">except</span> <span class="kwa">KeyError</span> <span class="sym">:
</span>            count <span class="sym">=</span> <span class="num">0

</span>        <span class="kwb">print</span> <span class="str">&quot;%d</span><span class="esc">\t</span><span class="str">%s&quot;</span> <span class="sym">% (</span>count<span class="sym">,</span> fragment<span class="sym">)


</span><span class="kwb">for</span> line <span class="kwb">in</span> stdin <span class="sym">:
</span>    <span class="kwb">if</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">:</span><span class="num">6</span><span class="sym">] ==</span> <span class="str">&quot;&gt;THREE&quot;</span> <span class="sym">:
</span>        <span class="kwb">break

</span>sequence <span class="sym">=</span> <span class="str">''</span>
<span class="kwb">for</span> line <span class="kwb">in</span> stdin <span class="sym">:
</span>    <span class="kwb">if</span> <span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">&quot;&gt;&quot;</span><span class="sym">)</span> <span class="kwb">or</span> <span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">&quot;;&quot;</span><span class="sym">) :
</span>        <span class="kwb">break</span><span class="sym">;
</span>    sequence <span class="sym">+=</span> line<span class="sym">[:-</span><span class="num">1</span><span class="sym">].</span>upper<span class="sym">()


</span>kn <span class="sym">=</span> k_nucleotide<span class="sym">(</span>sequence<span class="sym">)

</span>kn<span class="sym">.</span>write_frequencies<span class="sym">(</span><span class="num">1</span><span class="sym">)
</span>kn<span class="sym">.</span>write_frequencies<span class="sym">(</span><span class="num">2</span><span class="sym">)

</span>kn<span class="sym">.</span>write_count<span class="sym">(</span><span class="str">&quot;GGT&quot;</span><span class="sym">)
</span>kn<span class="sym">.</span>write_count<span class="sym">(</span><span class="str">&quot;GGTA&quot;</span><span class="sym">)
</span>kn<span class="sym">.</span>write_count<span class="sym">(</span><span class="str">&quot;GGTATT&quot;</span><span class="sym">)
</span>kn<span class="sym">.</span>write_count<span class="sym">(</span><span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">)
</span>kn<span class="sym">.</span>write_count<span class="sym">(</span><span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">)</span>
