<span class="com">(* spellcheck.sml</span>
<span class="com"> *</span>
<span class="com"> *   Checking for presence of words in a dictionary.</span>
<span class="com"> *</span>
<span class="com"> * Copyright (c) 2004 by The Fellowship of SML/NJ</span>
<span class="com"> *</span>
<span class="com"> * Author: Matthias Blume (blume&#64;tti-c.org)</span>
<span class="com"> *)</span>
<span class="kwa">structure</span> Test<span class="sym">:</span><span class="kwa">sig val</span> main<span class="sym">:</span><span class="kwb">string</span><span class="sym">*</span><span class="kwb">string</span> list<span class="sym">-&gt;</span>OS.Process.status <span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct</span>
    <span class="kwa">structure</span> H <span class="sym">=</span> HashString <span class="kwa">and</span> T <span class="sym">=</span> HashTable <span class="kwa">and</span> I <span class="sym">=</span> <span class="kwa">TextIO</span>
    <span class="kwa">fun</span> main _ <span class="sym">=</span>
	<span class="kwa">let val</span> ht <span class="sym">=</span> T.mkTable <span class="sym">(</span>H.hashString<span class="sym">,</span> <span class="kwa">op</span> <span class="sym">=) (</span><span class="num">40000</span><span class="sym">,</span> Fail <span class="str">&quot;notfound&quot;</span><span class="sym">)</span>
	    <span class="kwa">val</span> <span class="sym">(</span>i<span class="sym">,</span>f<span class="sym">,</span>d<span class="sym">) = (</span>T.insert ht<span class="sym">,</span> T.find ht<span class="sym">,</span> I.openIn <span class="str">&quot;Usr.Dict.Words&quot;</span><span class="sym">)</span>
	    <span class="kwa">fun</span> c<span class="sym">() =</span> <span class="kwa">case</span> I.inputLine I.stdIn <span class="kwa">of</span>
			  SOME l <span class="sym">=&gt; (</span><span class="kwa">if</span> isSome <span class="sym">(</span>f l<span class="sym">)</span> <span class="kwa">then</span> <span class="sym">()</span> <span class="kwa">else</span> print l<span class="sym">;</span> c<span class="sym">())</span>
			<span class="sym">|</span> NONE <span class="sym">=&gt;</span> OS.Process.success
	    <span class="kwa">fun</span> b<span class="sym">() =</span> <span class="kwa">case</span> I.inputLine d <span class="kwa">of</span> SOME l <span class="sym">=&gt; (</span>i<span class="sym">(</span>l<span class="sym">,());</span> b<span class="sym">())</span>
					  <span class="sym">|</span> NONE <span class="sym">=&gt; (</span>I.closeIn d<span class="sym">;</span> c<span class="sym">())</span>
	<span class="kwa">in</span> b <span class="sym">()</span> <span class="kwa">end</span>
<span class="kwa">end</span>
