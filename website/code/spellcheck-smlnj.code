<span class="line">    1 </span><span class="com">(* -*- mode: sml -*-
</span><span class="line">    2 </span><span class="com"> * $Id: spellcheck-smlnj.code,v 1.4 2004-11-13 07:43:25 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> *)</span>
<span class="line">    5 </span><span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig
</span><span class="line">    6 </span><span class="kwa">    val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="line">    7 </span><span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct
</span><span class="line">    8 </span><span class="kwa">
</span><span class="line">    9 </span><span class="kwa">open TextIO</span><span class="sym">;
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym"></span><span class="kwa">fun</span> chop str <span class="sym">=</span> <span class="kwa">String</span>.substring <span class="sym">(</span>str<span class="sym">,</span> <span class="num">0</span><span class="sym">, (</span><span class="kwa">String</span>.size str<span class="sym">) -</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   12 </span><span class="sym">
</span><span class="line">   13 </span><span class="sym"></span><span class="kwa">fun</span> spellcheck <span class="sym">() =
</span><span class="line">   14 </span><span class="sym"></span>    <span class="kwa">let
</span><span class="line">   15 </span><span class="kwa">        val</span> dict <span class="sym">=</span> HashTable.mkTable <span class="sym">(</span>HashString.hashString<span class="sym">,</span> <span class="kwa">op</span> <span class="sym">=) (</span><span class="num">40000</span><span class="sym">, (</span>Fail <span class="str">&quot;not found&quot;</span><span class="sym">))
</span><span class="line">   16 </span><span class="sym"></span>    <span class="kwa">in
</span><span class="line">   17 </span><span class="kwa">        let val</span> din <span class="sym">=</span> openIn <span class="str">&quot;Usr.Dict.Words&quot;</span>
<span class="line">   18 </span>            <span class="kwa">fun</span> init_dict din dict <span class="sym">=
</span><span class="line">   19 </span><span class="sym"></span>                <span class="kwa">case</span> inputLine din <span class="kwa">of
</span><span class="line">   20 </span><span class="kwa"></span>                    NONE <span class="sym">=&gt; ()
</span><span class="line">   21 </span><span class="sym">                  |</span> SOME<span class="sym">(</span>instr<span class="sym">) =&gt; (</span> HashTable.insert dict <span class="sym">(</span>chop instr<span class="sym">,</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   22 </span><span class="sym"></span>                                     init_dict din dict <span class="sym">)
</span><span class="line">   23 </span><span class="sym"></span>        <span class="kwa">in
</span><span class="line">   24 </span><span class="kwa"></span>            init_dict din dict
<span class="line">   25 </span>        <span class="kwa">end</span><span class="sym">;
</span><span class="line">   26 </span><span class="sym">
</span><span class="line">   27 </span><span class="sym"></span>        <span class="kwa">let fun</span> check_words dict <span class="sym">=
</span><span class="line">   28 </span><span class="sym"></span>            <span class="kwa">case</span> inputLine stdIn <span class="kwa">of
</span><span class="line">   29 </span><span class="kwa"></span>                NONE <span class="sym">=&gt; ()
</span><span class="line">   30 </span><span class="sym">              |</span> SOME<span class="sym">(</span>instr<span class="sym">) =&gt;
</span><span class="line">   31 </span><span class="sym"></span>                  <span class="kwa">let val</span> <span class="kwb">word</span> <span class="sym">=</span> chop instr
<span class="line">   32 </span>                  <span class="kwa">in
</span><span class="line">   33 </span><span class="kwa">                    case</span> HashTable.find dict <span class="kwb">word</span> <span class="kwa">of
</span><span class="line">   34 </span><span class="kwa"></span>                        SOME _ <span class="sym">=&gt; ()
</span><span class="line">   35 </span><span class="sym">                      |</span> NONE <span class="sym">=&gt; (</span>print <span class="kwb">word</span> <span class="sym">;</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">   36 </span><span class="sym"></span>                    check_words dict
<span class="line">   37 </span>                  <span class="kwa">end
</span><span class="line">   38 </span><span class="kwa">        in
</span><span class="line">   39 </span><span class="kwa"></span>            check_words dict
<span class="line">   40 </span>        <span class="kwa">end handle</span> EndOfFile <span class="sym">=&gt; ()
</span><span class="line">   41 </span><span class="sym"></span>    <span class="kwa">end
</span><span class="line">   42 </span><span class="kwa">
</span><span class="line">   43 </span><span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   44 </span><span class="sym">
</span><span class="line">   45 </span><span class="sym"></span><span class="kwa">fun</span> main<span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =
</span><span class="line">   46 </span><span class="sym"></span>    <span class="kwa">let
</span><span class="line">   47 </span><span class="kwa">        val</span> arg <span class="sym">=</span> hd<span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">])
</span><span class="line">   48 </span><span class="sym"></span>        <span class="kwa">val</span> num <span class="sym">=</span> atoi arg
<span class="line">   49 </span>    <span class="kwa">in
</span><span class="line">   50 </span><span class="kwa"></span>        spellcheck <span class="sym">();
</span><span class="line">   51 </span><span class="sym"></span>        OS.Process.success
<span class="line">   52 </span>    <span class="kwa">end</span><span class="sym">;
</span><span class="line">   53 </span><span class="sym"></span><span class="kwa">end
</span><span class="line">   54 </span><span class="kwa">
</span><span class="line">   55 </span><span class="kwa">val</span> _ <span class="sym">=</span> SMLofNJ.exportFn<span class="sym">(</span><span class="str">&quot;spellcheck&quot;</span><span class="sym">,</span> Test.main<span class="sym">);</span>
