<span class="line">    1 </span><span class="slc">#!/usr/bin/perl
</span><span class="line">    2 </span><span class="slc"></span><span class="slc"># $Id: sieve-perl.code,v 1.4 2004-11-13 07:43:22 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc"># with help from Tony Bowden
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="kwa">use</span> strict<span class="sym">;
</span><span class="line">    7 </span><span class="sym"></span><span class="kwa">use</span> integer<span class="sym">;
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym"></span><span class="kwc">my</span> <span class="kwb">$NUM</span> <span class="sym">= (</span><span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] &lt;</span> <span class="num">1</span><span class="sym">)</span> ? <span class="num">1</span> <span class="sym">:</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="line">   10 </span><span class="sym"></span><span class="kwc">my</span> <span class="kwb">$count</span><span class="sym">;
</span><span class="line">   11 </span><span class="sym"></span><span class="kwc">my</span> &#64;flags <span class="sym">= ();
</span><span class="line">   12 </span><span class="sym"></span><span class="kwa">while</span> <span class="sym">(</span><span class="kwb">$NUM</span><span class="sym">--) {
</span><span class="line">   13 </span><span class="sym"></span>    <span class="kwb">$count</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   14 </span><span class="sym"></span>    <span class="kwc">my</span> &#64;flags <span class="sym">= (</span><span class="num">0</span> .. <span class="num">8192</span><span class="sym">);
</span><span class="line">   15 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="kwc">my</span> <span class="kwb">$i</span> <span class="sym">(</span><span class="num">2</span> .. <span class="num">8192</span> <span class="sym">) {
</span><span class="line">   16 </span><span class="sym"></span>        <span class="kwa">next unless</span> defined <span class="kwb">$flags</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">];
</span><span class="line">   17 </span><span class="sym"></span>        <span class="slc"># remove all multiples of prime: i
</span><span class="line">   18 </span><span class="slc"></span>        <span class="kwc">my</span> <span class="kwb">$k</span> <span class="sym">=</span> <span class="kwb">$i</span><span class="sym">;
</span><span class="line">   19 </span><span class="sym"></span>        undef <span class="kwb">$flags</span><span class="sym">[</span><span class="kwb">$k</span><span class="sym">]</span> <span class="kwa">while</span> <span class="sym">((</span><span class="kwb">$k</span><span class="sym">+=</span><span class="kwb">$i</span><span class="sym">) &lt;</span> <span class="num">8193</span><span class="sym">);
</span><span class="line">   20 </span><span class="sym"></span>        <span class="kwb">$count</span><span class="sym">++;
</span><span class="line">   21 </span><span class="sym">    }
</span><span class="line">   22 </span><span class="sym">}
</span><span class="line">   23 </span><span class="sym"></span>print <span class="str">&quot;Count: $count</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
