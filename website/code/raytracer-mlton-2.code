<span class="com">(* The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 * contributed by Jon Harrop, 2005
 * Compile: mlton raytracer.sml
 *)</span>

<span class="kwa">val</span> delta <span class="sym">=</span> Math.sqrt <span class="sym">(</span><span class="kwa">Real</span>.nextAfter<span class="sym">(</span><span class="num">1.0</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">) -</span> <span class="num">1.0</span><span class="sym">)
</span><span class="kwa">val</span> infinity <span class="sym">=</span> <span class="kwa">Real</span>.posInf
<span class="kwa">type</span> vec <span class="sym">=</span> <span class="kwb">real</span> <span class="sym">*</span> <span class="kwb">real</span> <span class="sym">*</span> <span class="kwb">real
</span><span class="kwa">infix</span> <span class="num">7</span> <span class="sym">*|</span> <span class="kwa">fun</span> s <span class="sym">*| (</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">) :</span> vec <span class="sym">= (</span>s<span class="sym">*</span>x<span class="sym">,</span> s<span class="sym">*</span>y<span class="sym">,</span> s<span class="sym">*</span>z<span class="sym">)
</span><span class="kwa">infix</span> <span class="num">6</span> <span class="sym">+|</span> <span class="kwa">fun</span> <span class="sym">(</span>x1<span class="sym">,</span> y1<span class="sym">,</span> z1<span class="sym">) +| (</span>x2<span class="sym">,</span> y2<span class="sym">,</span> z2<span class="sym">) :</span> vec <span class="sym">= (</span>x1<span class="sym">+</span>x2<span class="sym">,</span> y1<span class="sym">+</span>y2<span class="sym">,</span> z1<span class="sym">+</span>z2<span class="sym">)
</span><span class="kwa">infix</span> <span class="num">6</span> <span class="sym">-|</span> <span class="kwa">fun</span> <span class="sym">(</span>x1<span class="sym">,</span> y1<span class="sym">,</span> z1<span class="sym">) -| (</span>x2<span class="sym">,</span> y2<span class="sym">,</span> z2<span class="sym">) :</span> vec <span class="sym">= (</span>x1<span class="sym">-</span>x2<span class="sym">,</span> y1<span class="sym">-</span>y2<span class="sym">,</span> z1<span class="sym">-</span>z2<span class="sym">)
</span><span class="kwa">fun</span> dot <span class="sym">(</span>x1<span class="sym">,</span> y1<span class="sym">,</span> z1<span class="sym">) (</span>x2<span class="sym">,</span> y2<span class="sym">,</span> z2<span class="sym">) :</span> <span class="kwb">real</span> <span class="sym">=</span> x1<span class="sym">*</span>x2 <span class="sym">+</span> y1<span class="sym">*</span>y2 <span class="sym">+</span> z1<span class="sym">*</span>z2
<span class="kwa">fun</span> unitise r <span class="sym">= (</span><span class="num">1.0</span> <span class="sym">/</span> <span class="kwa">Real</span>.Math.sqrt <span class="sym">(</span>dot r r<span class="sym">)) *|</span> r
<span class="kwa">datatype</span> scene <span class="sym">=</span> Sphere <span class="kwa">of</span> vec <span class="sym">*</span> <span class="kwb">real</span> <span class="sym">|</span> Group <span class="kwa">of</span> vec <span class="sym">*</span> <span class="kwb">real</span> <span class="sym">*</span> scene list
<span class="kwa">fun</span> length r <span class="sym">=</span> Math.sqrt<span class="sym">(</span>dot r r<span class="sym">)
</span><span class="kwa">fun</span> ray_sphere orig dir center radius <span class="sym">=
</span>    <span class="kwa">let val</span> v <span class="sym">=</span> center <span class="sym">-|</span> orig <span class="kwa">val</span> b <span class="sym">=</span> dot v dir
	<span class="kwa">val</span> disc <span class="sym">=</span> b <span class="sym">*</span> b <span class="sym">-</span> dot v v <span class="sym">+</span> radius <span class="sym">*</span> radius <span class="kwa">in
	if</span> disc <span class="sym">&lt;</span> <span class="num">0.0</span> <span class="kwa">then</span> infinity <span class="kwa">else
	let val</span> disc <span class="sym">=</span> <span class="kwa">Real</span>.Math.sqrt disc
	    <span class="kwa">val</span> t2 <span class="sym">=</span> b <span class="sym">+</span> disc <span class="kwa">in
	    if</span> t2 <span class="sym">&lt;</span> <span class="num">0.0</span> <span class="kwa">then</span> infinity <span class="kwa">else
	    let val</span> t1 <span class="sym">=</span> b <span class="sym">-</span> disc <span class="kwa">in if</span> t1 <span class="sym">&gt;</span> <span class="num">0.0</span> <span class="kwa">then</span> t1 <span class="kwa">else</span> t2 <span class="kwa">end
	end
    end
fun</span> sray_sphere orig dir center radius <span class="sym">=
</span>    <span class="kwa">let val</span> v <span class="sym">=</span> center <span class="sym">-|</span> orig <span class="kwa">val</span> b <span class="sym">=</span> dot v dir
        <span class="kwa">val</span> disc <span class="sym">=</span> b <span class="sym">*</span> b <span class="sym">-</span> dot v v <span class="sym">+</span> radius <span class="sym">*</span> radius <span class="kwa">in
	if</span> disc <span class="sym">&lt;</span> <span class="num">0.0</span> <span class="kwa">then false else</span> b <span class="sym">+</span> Math.sqrt disc <span class="sym">&gt;=</span> <span class="num">0.0
</span>    <span class="kwa">end
fun</span> intersect orig dir scene <span class="sym">=
</span>    <span class="kwa">let fun</span> aux <span class="sym">(</span>Sphere <span class="sym">(</span>center<span class="sym">,</span> radius<span class="sym">), (</span>l<span class="sym">,</span> n<span class="sym">)) =
</span>	    <span class="kwa">let val</span> l' <span class="sym">=</span> ray_sphere orig dir center radius <span class="kwa">in
		if</span> l' <span class="sym">&gt;=</span> l <span class="kwa">then</span> <span class="sym">(</span>l<span class="sym">,</span> n<span class="sym">)</span> <span class="kwa">else
</span>		<span class="sym">(</span>l'<span class="sym">,</span> unitise <span class="sym">(</span>orig <span class="sym">+|</span> l' <span class="sym">*|</span> dir <span class="sym">-|</span> center<span class="sym">))
</span>	    <span class="kwa">end
</span>	  <span class="sym">|</span> aux <span class="sym">(</span>Group <span class="sym">(</span>center<span class="sym">,</span> radius<span class="sym">,</span> scenes<span class="sym">), (</span>l<span class="sym">,</span> n<span class="sym">)) =
</span>	    <span class="kwa">if</span> ray_sphere orig dir center radius <span class="sym">&gt;=</span> l <span class="kwa">then</span> <span class="sym">(</span>l<span class="sym">,</span> n<span class="sym">)
</span>	    <span class="kwa">else</span> foldl aux <span class="sym">(</span>l<span class="sym">,</span> n<span class="sym">)</span> scenes <span class="kwa">in
</span>	aux <span class="sym">(</span>scene<span class="sym">, (</span>infinity<span class="sym">, (</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">)))</span> <span class="kwa">end
fun</span> sintersect orig dir scene <span class="sym">=
</span>    <span class="kwa">let fun</span> aux <span class="sym">(</span>Sphere <span class="sym">(</span>center<span class="sym">,</span> radius<span class="sym">)) =
</span>	    sray_sphere orig dir center radius
	  <span class="sym">|</span> aux <span class="sym">(</span>Group <span class="sym">(</span>center<span class="sym">,</span> radius<span class="sym">,</span> scenes<span class="sym">)) =
</span>	    sray_sphere orig dir center radius <span class="kwa">andalso List</span>.exists aux scenes
    <span class="kwa">in</span> aux scene <span class="kwa">end
val</span> neg_light <span class="sym">=</span> unitise <span class="sym">(</span><span class="num">1.0</span><span class="sym">,</span> <span class="num">3.0</span><span class="sym">,</span> ~<span class="num">2.0</span><span class="sym">)
</span><span class="kwa">fun</span> ray_trace orig dir scene <span class="sym">=
</span>    <span class="kwa">let val</span> <span class="sym">(</span>lambda<span class="sym">,</span> n<span class="sym">) =</span> intersect orig dir scene <span class="kwa">in
	if</span> lambda <span class="sym">&gt;=</span> infinity <span class="kwa">then</span> <span class="num">0.0</span> <span class="kwa">else
	let val</span> g <span class="sym">=</span> dot n neg_light <span class="kwa">in
	    if</span> g <span class="sym">&lt;=</span> <span class="num">0.0</span> <span class="kwa">then</span> <span class="num">0.0</span> <span class="kwa">else
	    let val</span> orig <span class="sym">=</span> orig <span class="sym">+|</span> lambda <span class="sym">*|</span> dir <span class="sym">+|</span> delta <span class="sym">*|</span> n <span class="kwa">in
		if</span> sintersect orig neg_light scene <span class="kwa">then</span> <span class="num">0.0</span> <span class="kwa">else</span> g
	    <span class="kwa">end
	end
    end
fun</span> bound <span class="sym">(</span>Sphere <span class="sym">(</span>c'<span class="sym">,</span> r'<span class="sym">), (</span>c<span class="sym">,</span> r<span class="sym">)) = (</span>c<span class="sym">,</span> <span class="kwa">Real</span>.max<span class="sym">(</span>r<span class="sym">, (</span>length <span class="sym">(</span>c <span class="sym">-|</span> c'<span class="sym">) +</span> r'<span class="sym">)))
  |</span> bound <span class="sym">(</span>Group <span class="sym">(</span>_<span class="sym">,</span> _<span class="sym">,</span> l<span class="sym">), (</span>c<span class="sym">,</span> r<span class="sym">)) =</span> foldl bound <span class="sym">(</span>c<span class="sym">,</span> r<span class="sym">)</span> l
<span class="kwa">fun</span> create level r <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">) =
</span>    <span class="kwa">let val</span> obj <span class="sym">=</span> Sphere <span class="sym">((</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> r<span class="sym">)</span> <span class="kwa">in
	if</span> level <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span> obj <span class="kwa">else
	let val</span> r' <span class="sym">=</span> <span class="num">3.0</span> <span class="sym">*</span> r <span class="sym">/</span> <span class="kwa">Real</span>.Math.sqrt <span class="num">12.0
</span>	    <span class="kwa">fun</span> aux x' z' <span class="sym">=</span> create <span class="sym">(</span>level<span class="num">-1</span><span class="sym">) (</span><span class="num">0.5</span> <span class="sym">*</span> r<span class="sym">) (</span>x<span class="sym">-</span>x'<span class="sym">,</span> y<span class="sym">+</span>r'<span class="sym">,</span> z<span class="sym">+</span>z'<span class="sym">)
</span>	    <span class="kwa">val</span> objs <span class="sym">= [</span>obj<span class="sym">,</span> aux <span class="sym">(</span>~r'<span class="sym">) (</span>~r'<span class="sym">),</span> aux r' <span class="sym">(</span>~r'<span class="sym">),
</span>			aux <span class="sym">(</span>~r'<span class="sym">)</span> r'<span class="sym">,</span> aux r' r'<span class="sym">]
</span>	    <span class="kwa">val</span> <span class="sym">(</span>c<span class="sym">,</span> r<span class="sym">) =</span> foldl bound <span class="sym">((</span>x<span class="sym">,</span> y<span class="sym">+</span>r<span class="sym">,</span> z<span class="sym">),</span> <span class="num">0.0</span><span class="sym">)</span> objs <span class="kwa">in
</span>	    Group <span class="sym">(</span>c<span class="sym">,</span> r<span class="sym">,</span> objs<span class="sym">)
</span>	<span class="kwa">end
    end
fun</span> loop f accu <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> n<span class="sym">) =
</span>    <span class="kwa">if</span> y<span class="sym">=</span>n <span class="kwa">then</span> accu <span class="kwa">else
    if</span> x<span class="sym">=</span>n <span class="kwa">then</span> loop f accu <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> y<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">)</span> <span class="kwa">else
</span>    loop f <span class="sym">(</span>f accu <span class="sym">(</span><span class="kwb">real</span> x<span class="sym">) (</span><span class="kwb">real</span> y<span class="sym">)) (</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> y<span class="sym">,</span> n<span class="sym">)
</span><span class="kwa">fun</span> eye_ray scene n ss x y g dx dy <span class="sym">=
</span>    <span class="kwa">let val</span> dir <span class="sym">=</span> unitise <span class="sym">(</span>x <span class="sym">+</span> dx<span class="sym">/</span>ss<span class="sym">,</span> y <span class="sym">+</span> dy<span class="sym">/</span>ss<span class="sym">,</span> n<span class="sym">)</span> <span class="kwa">in
</span>	g <span class="sym">+</span> ray_trace <span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> ~<span class="num">4.0</span><span class="sym">)</span> dir scene
    <span class="kwa">end
fun</span> pixel scene n ss <span class="sym">()</span> x y <span class="sym">=
</span>    <span class="kwa">let val</span> <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">) = (</span>x <span class="sym">-</span> n <span class="sym">/</span> <span class="num">2.0</span><span class="sym">, (</span>n <span class="num">- 2.0</span><span class="sym">) /</span> <span class="num">2.0</span> <span class="sym">-</span> y<span class="sym">)
</span>	<span class="kwa">val</span> g <span class="sym">=</span> loop <span class="sym">(</span>eye_ray scene n <span class="sym">(</span><span class="kwb">real</span> ss<span class="sym">)</span> x y<span class="sym">)</span> <span class="num">0.0</span> <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> ss<span class="sym">)</span> <span class="kwa">in
</span>	print <span class="sym">(</span><span class="kwa">String</span>.str<span class="sym">(</span><span class="kwa">Char</span>.chr<span class="sym">(</span><span class="kwa">Real</span>.round <span class="sym">(</span><span class="num">255.0</span> <span class="sym">*</span> g <span class="sym">/</span> <span class="kwb">real</span> <span class="sym">(</span>ss<span class="sym">*</span>ss<span class="sym">)))))
</span>    <span class="kwa">end
val</span> <span class="sym">() =
</span>    <span class="kwa">let val</span> level <span class="sym">=</span> <span class="num">6
</span>	<span class="kwa">val</span> n <span class="sym">=</span> getOpt<span class="sym">(</span><span class="kwa">Int</span>.fromString <span class="sym">(</span><span class="kwa">List</span>.hd <span class="sym">(</span>CommandLine.arguments <span class="sym">())),</span> <span class="num">256</span><span class="sym">)
</span>	<span class="kwa">val</span> ss <span class="sym">=</span> <span class="num">4</span> <span class="kwa">and</span> scene <span class="sym">=</span> create <span class="num">6 1.0</span> <span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> ~<span class="num">1.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">)</span> <span class="kwa">in
</span>	<span class="sym">(</span><span class="kwa">fn</span> s <span class="sym">=&gt;</span> print <span class="sym">(</span><span class="str">&quot;P5</span><span class="esc">\n</span><span class="str">&quot;</span>^s^<span class="str">&quot; &quot;</span>^s^<span class="str">&quot;</span><span class="esc">\n</span><span class="str">255</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)) (</span><span class="kwa">Int</span>.toString n<span class="sym">);
</span>	loop <span class="sym">(</span>pixel scene <span class="sym">(</span><span class="kwb">real</span> n<span class="sym">)</span> ss<span class="sym">) () (</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> n<span class="sym">)
</span>    <span class="kwa">end</span>
