<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &amp;&amp;
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep <B><FONT COLOR="#BC8F8F">&quot;$PROG.jlc&quot;</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;$@&quot;</FONT></B>
!#

<I><FONT COLOR="#B22222">;;; $Id: matrix-rep.code,v 1.2 2004-11-08 08:15:17 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://www.bagley.org/~doug/shootout/
</FONT></I>
(define-structure main ()
  (open rep rep.system)

  (<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">size</FONT></B> 30)

  (<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">mkmatrix</FONT></B> rows cols)
    (<B><FONT COLOR="#A020F0">let</FONT></B> ((mx (make-vector rows 0))
	  (count 1))
      (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 0 (1+ i)))
	  ((= i rows))
	(<B><FONT COLOR="#A020F0">let</FONT></B> ((row (make-vector cols 0)))
	  (<B><FONT COLOR="#A020F0">do</FONT></B> ((j 0 (1+ j)))
	      ((= j cols))
	    (aset row j count)
	    (setq count (+ count 1)))
	  (aset mx i row)))
      mx))

  (<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">num-cols</FONT></B> mx)
    (<B><FONT COLOR="#A020F0">let</FONT></B> ((row (aref mx 0)))
      (length row)))

  (<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">num-rows</FONT></B> mx)
    (length mx))

  (<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">mmult</FONT></B> rows cols m1 m2)
    (<B><FONT COLOR="#A020F0">let</FONT></B> ((m3 (make-vector rows 0)))
      (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 0 (1+ i)))
	  ((= i rows))
	(<B><FONT COLOR="#A020F0">let</FONT></B> ((m1i (aref m1 i))
	      (row (make-vector cols 0)))
	  (<B><FONT COLOR="#A020F0">do</FONT></B> ((j 0 (1+ j)))
	      ((= j cols))
	    (<B><FONT COLOR="#A020F0">let</FONT></B> ((val 0))
	      (<B><FONT COLOR="#A020F0">do</FONT></B> ((k 0 (1+ k)))
		  ((= k cols))
		(setq val (+ val (* (aref m1i k)
				    (aref (aref m2 k) j)))))
	      (aset row j val)))
	  (aset m3 i row)))
      m3))

  (<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">matrix-print</FONT></B> m)
    (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 0 (1+ i)))
	((= i (num-rows m)))
      (<B><FONT COLOR="#A020F0">let</FONT></B> ((row (aref m i)))
	(<B><FONT COLOR="#A020F0">do</FONT></B> ((j 0 (1+ j)))
	    ((= j (num-cols m)))
	  (princ (aref row j))
	  (<B><FONT COLOR="#A020F0">if</FONT></B> (&lt; j (num-cols m))
	      (princ <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>)))
	(princ <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>))))

  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((arg (get-command-line-option <B><FONT COLOR="#BC8F8F">&quot;--num&quot;</FONT></B> t))
	 (n (<B><FONT COLOR="#A020F0">if</FONT></B> arg (read-from-string arg) 1)))
    (<B><FONT COLOR="#A020F0">let</FONT></B> ((mm 0)
	  (m1 (mkmatrix size size))
	  (m2 (mkmatrix size size)))
      (<B><FONT COLOR="#A020F0">let</FONT></B> loop ((iter n))
	(<B><FONT COLOR="#A020F0">cond</FONT></B> ((&gt; iter 0)
	       (setq mm (mmult size size m1 m2))
	       (loop (- iter 1)))))
      (<B><FONT COLOR="#A020F0">let</FONT></B> ((r0 (aref mm 0))
	    (r2 (aref mm 2))
	    (r3 (aref mm 3))
	    (r4 (aref mm 4)))
	(princ (aref r0 0))
	(princ <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>)
	(princ (aref r2 3))
	(princ <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>)
	(princ (aref r3 2))
	(princ <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>)
	(princ (aref r4 4))
	(princ <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>)))))</pre></td></tr></table>
