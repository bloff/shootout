#<span class="sym">!/</span>bin<span class="sym">/</span>bash
# <span class="sym">-*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-</span>
PROG<span class="sym">=</span>$<span class="sym">{</span><span class="num">0</span>%.jl<span class="sym">}</span>
<span class="sym">[</span> \! <span class="sym">-</span>f $PROG.jlc <span class="sym">-</span>o $<span class="num">0</span> <span class="sym">-</span>nt $PROG.jlc <span class="sym">] &amp;&amp;</span>
    rep <span class="sym">--</span>batch <span class="sym">--</span>no<span class="sym">-</span>rc <span class="sym">-</span>l compiler <span class="sym">-</span>f compile<span class="sym">-</span>batch $<span class="num">0</span>
exec rep <span class="str">&quot;$PROG.jlc&quot;</span> <span class="str">&quot;$&#64;&quot;</span>
<span class="sym">!</span>#

<span class="slc">;;; $Id: matrix-rep.code,v 1.6 2006-09-20 05:51:54 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>define<span class="sym">-</span>structure main <span class="sym">()</span>
  <span class="sym">(</span><span class="kwa">open</span> rep rep.system<span class="sym">)</span>

  <span class="sym">(</span>define size <span class="num">30</span><span class="sym">)</span>

  <span class="sym">(</span>define <span class="sym">(</span>mkmatrix rows cols<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>mx <span class="sym">(</span>make<span class="sym">-</span>vector rows <span class="num">0</span><span class="sym">))</span>
	  <span class="sym">(</span>count <span class="num">1</span><span class="sym">))</span>
      <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">)))</span>
	  <span class="sym">((=</span> i rows<span class="sym">))</span>
	<span class="sym">(</span>let <span class="sym">((</span>row <span class="sym">(</span>make<span class="sym">-</span>vector cols <span class="num">0</span><span class="sym">)))</span>
	  <span class="sym">(</span>do <span class="sym">((</span>j <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> j<span class="sym">)))</span>
	      <span class="sym">((=</span> j cols<span class="sym">))</span>
	    <span class="sym">(</span>aset row j count<span class="sym">)</span>
	    <span class="sym">(</span><span class="kwa">setq</span> count <span class="sym">(+</span> count <span class="num">1</span><span class="sym">)))</span>
	  <span class="sym">(</span>aset mx i row<span class="sym">)))</span>
      mx<span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>num<span class="sym">-</span>cols mx<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>row <span class="sym">(</span>aref mx <span class="num">0</span><span class="sym">)))</span>
      <span class="sym">(</span><span class="kwa">length</span> row<span class="sym">)))</span>

  <span class="sym">(</span>define <span class="sym">(</span>num<span class="sym">-</span>rows mx<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">length</span> mx<span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>mmult rows cols m1 m2<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>m3 <span class="sym">(</span>make<span class="sym">-</span>vector rows <span class="num">0</span><span class="sym">)))</span>
      <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">)))</span>
	  <span class="sym">((=</span> i rows<span class="sym">))</span>
	<span class="sym">(</span>let <span class="sym">((</span>m1i <span class="sym">(</span>aref m1 i<span class="sym">))</span>
	      <span class="sym">(</span>row <span class="sym">(</span>make<span class="sym">-</span>vector cols <span class="num">0</span><span class="sym">)))</span>
	  <span class="sym">(</span>do <span class="sym">((</span>j <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> j<span class="sym">)))</span>
	      <span class="sym">((=</span> j cols<span class="sym">))</span>
	    <span class="sym">(</span>let <span class="sym">((</span>val <span class="num">0</span><span class="sym">))</span>
	      <span class="sym">(</span>do <span class="sym">((</span>k <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> k<span class="sym">)))</span>
		  <span class="sym">((=</span> k cols<span class="sym">))</span>
		<span class="sym">(</span><span class="kwa">setq</span> val <span class="sym">(+</span> val <span class="sym">(* (</span>aref m1i k<span class="sym">)</span>
				    <span class="sym">(</span>aref <span class="sym">(</span>aref m2 k<span class="sym">)</span> j<span class="sym">)))))</span>
	      <span class="sym">(</span>aset row j val<span class="sym">)))</span>
	  <span class="sym">(</span>aset m3 i row<span class="sym">)))</span>
      m3<span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>matrix<span class="sym">-</span><span class="kwa">print</span> m<span class="sym">)</span>
    <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">)))</span>
	<span class="sym">((=</span> i <span class="sym">(</span>num<span class="sym">-</span>rows m<span class="sym">)))</span>
      <span class="sym">(</span>let <span class="sym">((</span>row <span class="sym">(</span>aref m i<span class="sym">)))</span>
	<span class="sym">(</span>do <span class="sym">((</span>j <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> j<span class="sym">)))</span>
	    <span class="sym">((=</span> j <span class="sym">(</span>num<span class="sym">-</span>cols m<span class="sym">)))</span>
	  <span class="sym">(</span><span class="kwa">princ</span> <span class="sym">(</span>aref row j<span class="sym">))</span>
	  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> j <span class="sym">(</span>num<span class="sym">-</span>cols m<span class="sym">))</span>
	      <span class="sym">(</span><span class="kwa">princ</span> <span class="str">&quot; &quot;</span><span class="sym">)))</span>
	<span class="sym">(</span><span class="kwa">princ</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">))))</span>

  <span class="sym">(</span>let<span class="sym">* ((</span>arg <span class="sym">(</span>get<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>option <span class="str">&quot;--num&quot;</span> t<span class="sym">))</span>
	 <span class="sym">(</span>n <span class="sym">(</span><span class="kwa">if</span> arg <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>from<span class="sym">-</span>string arg<span class="sym">)</span> <span class="num">1</span><span class="sym">)))</span>
    <span class="sym">(</span>let <span class="sym">((</span>mm <span class="num">0</span><span class="sym">)</span>
	  <span class="sym">(</span>m1 <span class="sym">(</span>mkmatrix size size<span class="sym">))</span>
	  <span class="sym">(</span>m2 <span class="sym">(</span>mkmatrix size size<span class="sym">)))</span>
      <span class="sym">(</span>let loop <span class="sym">((</span>iter n<span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&gt;</span> iter <span class="num">0</span><span class="sym">)</span>
	       <span class="sym">(</span><span class="kwa">setq</span> mm <span class="sym">(</span>mmult size size m1 m2<span class="sym">))</span>
	       <span class="sym">(</span>loop <span class="sym">(-</span> iter <span class="num">1</span><span class="sym">)))))</span>
      <span class="sym">(</span>let <span class="sym">((</span>r0 <span class="sym">(</span>aref mm <span class="num">0</span><span class="sym">))</span>
	    <span class="sym">(</span>r2 <span class="sym">(</span>aref mm <span class="num">2</span><span class="sym">))</span>
	    <span class="sym">(</span>r3 <span class="sym">(</span>aref mm <span class="num">3</span><span class="sym">))</span>
	    <span class="sym">(</span>r4 <span class="sym">(</span>aref mm <span class="num">4</span><span class="sym">)))</span>
	<span class="sym">(</span><span class="kwa">princ</span> <span class="sym">(</span>aref r0 <span class="num">0</span><span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">princ</span> <span class="str">&quot; &quot;</span><span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">princ</span> <span class="sym">(</span>aref r2 <span class="num">3</span><span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">princ</span> <span class="str">&quot; &quot;</span><span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">princ</span> <span class="sym">(</span>aref r3 <span class="num">2</span><span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">princ</span> <span class="str">&quot; &quot;</span><span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">princ</span> <span class="sym">(</span>aref r4 <span class="num">4</span><span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">princ</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)))))</span>
