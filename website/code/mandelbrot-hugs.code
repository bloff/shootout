<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>

<span class="slc">-- contributed by Greg Buchholz</span>

<span class="slc">-- compile:  ghc -O2 -o mandelbrot mandelbrot.hs</span>
<span class="slc">-- run: fractal 600 &gt;mandel.pbm</span>


<span class="kwa">import</span> Complex
<span class="kwa">import</span> System<span class="sym">(</span>getArgs<span class="sym">)</span>
<span class="kwa">import</span> <span class="kwb">Char</span><span class="sym">(</span>chr<span class="sym">)</span>

main <span class="sym">=</span> <span class="kwa">do</span>   <span class="sym">[</span>arg<span class="sym">] &lt;-</span> getArgs
            <span class="kwa">let</span> width <span class="sym">=</span> read arg
            <span class="kwa">let</span> pts <span class="sym">=</span> points width width
            putStr $ <span class="str">&quot;P4\n&quot;</span> <span class="sym">++</span> arg <span class="sym">++</span> <span class="str">&quot; &quot;</span> <span class="sym">++</span> arg <span class="sym">++</span> <span class="str">&quot;\n&quot;</span>
            putStr $ concatMap <span class="sym">(</span>makePBM <span class="num">0 0</span><span class="sym">) (</span>chunk width <span class="sym">(</span>fractal pts<span class="sym">))</span>

limit  <span class="sym">=</span> <span class="num">2</span>
iter   <span class="sym">=</span> <span class="num">50</span><span class="sym">+</span><span class="num">1</span> <span class="slc">-- add one to compensate for the 'iterate' function</span>

points width height <span class="sym">= [(</span><span class="num">2</span><span class="sym">*</span>x<span class="sym">/</span>w <span class="sym">-</span> <span class="num">1.5</span><span class="sym">) :+ (</span><span class="num">2</span><span class="sym">*</span>y<span class="sym">/</span>h <span class="sym">-</span> <span class="num">1</span><span class="sym">) |</span> y<span class="sym">&lt;-[</span><span class="num">0</span>..h<span class="sym">-</span><span class="num">1</span><span class="sym">],</span> x<span class="sym">&lt;-[</span><span class="num">0</span>..w<span class="sym">-</span><span class="num">1</span><span class="sym">]]</span>
                    <span class="kwa">where</span> w <span class="sym">=</span> fromIntegral width
                          h <span class="sym">=</span> fromIntegral height

mandel c z <span class="sym">=</span> z <span class="sym">*</span> z <span class="sym">+</span> c

fractal pts <span class="sym">=</span> map <span class="sym">(</span>\f<span class="sym">-&gt;</span> length <span class="sym">(</span>takeIter <span class="sym">(</span>iterate f <span class="sym">(</span><span class="num">0</span><span class="sym">:+</span><span class="num">0</span><span class="sym">)))) (</span>map mandel pts<span class="sym">)</span>
        <span class="kwa">where</span> takeIter a <span class="sym">=</span> take iter <span class="sym">(</span>takeWhile <span class="sym">(</span>\x<span class="sym">-&gt;</span> magnitude<span class="sym">(</span>x<span class="sym">)&lt;</span>limit<span class="sym">)</span> a<span class="sym">)</span>

makePBM i acc <span class="sym">[]     = (</span>chr <span class="sym">(</span>acc <span class="sym">*</span> <span class="num">2</span>^<span class="sym">(</span><span class="num">8</span><span class="sym">-</span>i<span class="sym">))) : []</span>
makePBM i acc <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) |</span> i<span class="sym">==</span><span class="num">8</span>      <span class="sym">= (</span>chr acc<span class="sym">) :</span> makePBM <span class="num">0 0</span> <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">)</span>
                     <span class="sym">|</span> otherwise <span class="sym">=</span> makePBM <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> n xs
                                    <span class="kwa">where</span>
                                      n <span class="sym">=</span> if x<span class="sym">==</span>iter <span class="kwa">then</span> <span class="sym">(</span>acc<span class="sym">*</span><span class="num">2</span><span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">else</span> <span class="sym">(</span>acc<span class="sym">*</span><span class="num">2</span><span class="sym">)</span>

chunk width <span class="sym">[] = []</span>
chunk width c  <span class="sym">= (</span>fst split<span class="sym">) :</span> chunk width <span class="sym">(</span>snd split<span class="sym">)</span>
                 <span class="kwa">where</span> split <span class="sym">=</span> splitAt width c

