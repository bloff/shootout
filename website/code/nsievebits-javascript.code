<span class="slc">// The Great Computer Language Shootout
</span><span class="slc">//  http://shootout.alioth.debian.org
</span><span class="slc">//
</span><span class="slc">//  Contributed by Ian Osgood
</span>
<span class="kwa">function</span> pad<span class="sym">(</span>n<span class="sym">,</span>width<span class="sym">) {
</span>  <span class="kwa">var</span> s <span class="sym">=</span> n.toString<span class="sym">();
</span>  <span class="kwa">while</span> <span class="sym">(</span>s.length <span class="sym">&lt;</span> width<span class="sym">)</span> s <span class="sym">=</span> <span class="str">' '</span> <span class="sym">+</span> s<span class="sym">;
</span>  <span class="kwa">return</span> s<span class="sym">;
}

</span><span class="kwa">function</span> primes<span class="sym">(</span>isPrime<span class="sym">,</span> n<span class="sym">) {
</span>  <span class="kwa">var</span> i<span class="sym">,</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> m <span class="sym">=</span> <span class="num">10000</span><span class="sym">&lt;&lt;</span>n<span class="sym">,</span> size <span class="sym">=</span> m<span class="sym">+</span><span class="num">31</span><span class="sym">&gt;&gt;</span><span class="num">5</span><span class="sym">;

</span>  <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>size<span class="sym">;</span> i<span class="sym">++)</span> isPrime<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0xffffffff</span><span class="sym">;

</span>  <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i<span class="sym">&lt;</span>m<span class="sym">;</span> i<span class="sym">++)
</span>    <span class="kwa">if</span> <span class="sym">(</span>isPrime<span class="sym">[</span>i<span class="sym">&gt;&gt;</span><span class="num">5</span><span class="sym">] &amp;</span> <span class="num">1</span><span class="sym">&lt;&lt;(</span>i<span class="sym">&amp;</span><span class="num">31</span><span class="sym">)) {
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> j<span class="sym">=</span>i<span class="sym">+</span>i<span class="sym">;</span> j<span class="sym">&lt;</span>m<span class="sym">;</span> j<span class="sym">+=</span>i<span class="sym">)
</span>        isPrime<span class="sym">[</span>j<span class="sym">&gt;&gt;</span><span class="num">5</span><span class="sym">] &amp;=</span> ~<span class="sym">(</span><span class="num">1</span><span class="sym">&lt;&lt;(</span>j<span class="sym">&amp;</span><span class="num">31</span><span class="sym">));
</span>      count<span class="sym">++;
    }

</span>  print<span class="sym">(</span><span class="str">&quot;Primes up to&quot;</span> <span class="sym">+</span> pad<span class="sym">(</span>m<span class="sym">,</span><span class="num">9</span><span class="sym">) +</span> pad<span class="sym">(</span>count<span class="sym">,</span><span class="num">9</span><span class="sym">));
}

</span><span class="kwa">var</span> n <span class="sym">=</span> arguments<span class="sym">[</span><span class="num">0</span><span class="sym">]
</span><span class="kwa">var</span> isPrime <span class="sym">=</span> <span class="kwa">new</span> Array<span class="sym">((</span><span class="num">10000</span><span class="sym">&lt;&lt;</span>n<span class="sym">)+</span><span class="num">31</span><span class="sym">&gt;&gt;</span><span class="num">5</span><span class="sym">)

</span>primes<span class="sym">(</span>isPrime<span class="sym">,</span> n<span class="sym">)
</span>primes<span class="sym">(</span>isPrime<span class="sym">,</span> n<span class="num">-1</span><span class="sym">)
</span>primes<span class="sym">(</span>isPrime<span class="sym">,</span> n<span class="num">-2</span><span class="sym">)</span>
