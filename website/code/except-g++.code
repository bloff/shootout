<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// -*- mode: c++ -*-
</FONT></I><I><FONT COLOR="#B22222">// $Id: except-g++.code,v 1.1 2004-11-02 08:52:30 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">// from Bill Lear
</FONT></I>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;iostream&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;cstdlib&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;cstdio&gt;</FONT></B>

using namespace std;

size_t HI = 0;
size_t LO = 0;

<B><FONT COLOR="#228B22">class</FONT></B> Hi_exception {
<B><FONT COLOR="#228B22">public</FONT></B>:
    explicit Hi_exception(size_t _n) : n(_n) {}
    <B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>* what() { sprintf(N, <B><FONT COLOR="#BC8F8F">&quot;%d&quot;</FONT></B>, n); <B><FONT COLOR="#A020F0">return</FONT></B> N; }
<B><FONT COLOR="#228B22">private</FONT></B>:
    size_t n; <B><FONT COLOR="#228B22">char</FONT></B> N[8];
};

<B><FONT COLOR="#228B22">class</FONT></B> Lo_exception {
<B><FONT COLOR="#228B22">public</FONT></B>:
    explicit Lo_exception(size_t _n) : n(_n) {}
    <B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>* what() { sprintf(N, <B><FONT COLOR="#BC8F8F">&quot;%d&quot;</FONT></B>, n); <B><FONT COLOR="#A020F0">return</FONT></B> N; }
<B><FONT COLOR="#228B22">private</FONT></B>:
    size_t n; <B><FONT COLOR="#228B22">char</FONT></B> N[8];
};

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">blowup</FONT></B>(size_t num) {
    <B><FONT COLOR="#A020F0">if</FONT></B> (num % 2) {
        <B><FONT COLOR="#A020F0">throw</FONT></B> Lo_exception(num);
    }
    <B><FONT COLOR="#A020F0">throw</FONT></B> Hi_exception(num);
}

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">lo_function</FONT></B>(size_t num) {
    <B><FONT COLOR="#A020F0">try</FONT></B> {
        blowup(num);
    } <B><FONT COLOR="#A020F0">catch</FONT></B>(<B><FONT COLOR="#228B22">const</FONT></B> Lo_exception&amp; ex) {
        ++LO;
    }
}

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">hi_function</FONT></B>(size_t num) {
    <B><FONT COLOR="#A020F0">try</FONT></B> {
        lo_function(num);
    } <B><FONT COLOR="#A020F0">catch</FONT></B>(<B><FONT COLOR="#228B22">const</FONT></B> Hi_exception&amp; ex) {
        ++HI;
    }
}

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">some_function</FONT></B>(size_t num) {
    <B><FONT COLOR="#A020F0">try</FONT></B> {
        hi_function(num);
    } <B><FONT COLOR="#A020F0">catch</FONT></B> (...) {
        cerr &lt;&lt; <B><FONT COLOR="#BC8F8F">&quot;We shouldn't get here\n&quot;</FONT></B>; exit(1);
    }
}

<B><FONT COLOR="#228B22">int</FONT></B>
<B><FONT COLOR="#0000FF">main</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> argc, <B><FONT COLOR="#228B22">char</FONT></B>* argv[]) {
    size_t NUM = (argc == 2 ? (atoi(argv[1]) &lt; 1 ? 1 : atoi(argv[1])): 1);
    <B><FONT COLOR="#A020F0">while</FONT></B> (NUM--) {
        some_function(NUM);
    }
    cout &lt;&lt; <B><FONT COLOR="#BC8F8F">&quot;Exceptions: HI=&quot;</FONT></B> &lt;&lt; HI &lt;&lt; <B><FONT COLOR="#BC8F8F">&quot; / &quot;</FONT></B> &lt;&lt; <B><FONT COLOR="#BC8F8F">&quot;LO=&quot;</FONT></B> &lt;&lt; LO &lt;&lt; endl;
}</pre></td></tr></table>
