<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;math.h&gt;</span>
<span class="dir">#include &lt;float.h&gt;</span>

<span class="dir">#ifndef INFINITY</span>
<span class="dir"># define INFINITY DBL_MAX</span>
<span class="dir">#endif</span>

<span class="dir">#define DELTA 1.49012e-08</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> <span class="sym">{</span> <span class="kwb">double</span> x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">; }</span> Vec<span class="sym">;</span>
<span class="kwb">static</span> __inline__ Vec <span class="kwd">vec</span><span class="sym">(</span><span class="kwb">double</span> ix<span class="sym">,</span> <span class="kwb">double</span> iy<span class="sym">,</span> <span class="kwb">double</span> iz<span class="sym">)</span>
<span class="sym">{</span> Vec a<span class="sym">;</span> a<span class="sym">.</span>x <span class="sym">=</span> ix<span class="sym">;</span> a<span class="sym">.</span>y <span class="sym">=</span> iy<span class="sym">;</span> a<span class="sym">.</span>z <span class="sym">=</span> iz<span class="sym">;</span> <span class="kwa">return</span> a<span class="sym">; }</span>
<span class="kwb">static</span> __inline__ Vec <span class="kwd">add</span><span class="sym">(</span>Vec a<span class="sym">,</span> Vec b<span class="sym">) {</span> <span class="kwa">return</span> <span class="kwd">vec</span><span class="sym">(</span>a<span class="sym">.</span>x <span class="sym">+</span> b<span class="sym">.</span>x<span class="sym">,</span> a<span class="sym">.</span>y <span class="sym">+</span> b<span class="sym">.</span>y<span class="sym">,</span> a<span class="sym">.</span>z <span class="sym">+</span> b<span class="sym">.</span>z<span class="sym">); }</span>
<span class="kwb">static</span> __inline__ Vec <span class="kwd">sub</span><span class="sym">(</span>Vec a<span class="sym">,</span> Vec b<span class="sym">) {</span> <span class="kwa">return</span> <span class="kwd">vec</span><span class="sym">(</span>a<span class="sym">.</span>x <span class="sym">-</span> b<span class="sym">.</span>x<span class="sym">,</span> a<span class="sym">.</span>y <span class="sym">-</span> b<span class="sym">.</span>y<span class="sym">,</span> a<span class="sym">.</span>z <span class="sym">-</span> b<span class="sym">.</span>z<span class="sym">); }</span>
<span class="kwb">static</span> __inline__ Vec <span class="kwd">scale</span><span class="sym">(</span><span class="kwb">double</span> a<span class="sym">,</span> Vec b<span class="sym">) {</span> <span class="kwa">return</span> <span class="kwd">vec</span><span class="sym">(</span>a <span class="sym">*</span> b<span class="sym">.</span>x<span class="sym">,</span> a <span class="sym">*</span> b<span class="sym">.</span>y<span class="sym">,</span> a <span class="sym">*</span> b<span class="sym">.</span>z<span class="sym">); }</span>
<span class="kwb">static</span> __inline__ <span class="kwb">double</span> <span class="kwd">dot</span><span class="sym">(</span>Vec a<span class="sym">,</span> Vec b<span class="sym">) {</span> <span class="kwa">return</span> a<span class="sym">.</span>x<span class="sym">*</span>b<span class="sym">.</span>x <span class="sym">+</span> a<span class="sym">.</span>y<span class="sym">*</span>b<span class="sym">.</span>y <span class="sym">+</span> a<span class="sym">.</span>z<span class="sym">*</span>b<span class="sym">.</span>z<span class="sym">; }</span>
<span class="kwb">static</span> __inline__ Vec <span class="kwd">unitise</span><span class="sym">(</span>Vec a<span class="sym">) {</span> <span class="kwa">return</span> <span class="kwd">scale</span><span class="sym">(</span><span class="num">1</span> <span class="sym">/</span> <span class="kwd">sqrt</span><span class="sym">(</span><span class="kwd">dot</span><span class="sym">(</span>a<span class="sym">,</span> a<span class="sym">)),</span> a<span class="sym">); }</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> <span class="sym">{</span> Vec orig<span class="sym">,</span> dir<span class="sym">; }</span> Ray<span class="sym">;</span>
<span class="kwb">static</span> __inline__ Ray <span class="kwd">ray</span><span class="sym">(</span>Vec o<span class="sym">,</span> Vec d<span class="sym">) {</span> Ray r<span class="sym">;</span> r<span class="sym">.</span>orig <span class="sym">=</span> o<span class="sym">;</span> r<span class="sym">.</span>dir <span class="sym">=</span> d<span class="sym">;</span> <span class="kwa">return</span> r<span class="sym">; }</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> _tSphere Sphere<span class="sym">;</span>
<span class="kwc">typedef</span> <span class="kwb">struct</span> _tGroup Group<span class="sym">;</span>
<span class="kwc">typedef</span> <span class="kwb">struct</span> _tScene_Object Scene<span class="sym">;</span>

<span class="dir">#define SCENE_OBJECT(T) \</span>
<span class="dir">   void (*intersect) (T*, double *, Vec *, const Ray *); \</span>
<span class="dir">   void (*destroy) (T *)</span>

<span class="kwb">struct</span> _tScene_Object
<span class="sym">{</span>
   <span class="kwd">SCENE_OBJECT</span><span class="sym">(</span>Scene<span class="sym">);</span>
<span class="sym">};</span>
<span class="kwb">static</span> Scene <span class="sym">*</span><span class="kwd">scene_new</span> <span class="sym">(</span><span class="kwb">int</span><span class="sym">,</span> <span class="kwb">double</span><span class="sym">,</span> <span class="kwb">double</span><span class="sym">,</span> <span class="kwb">double</span><span class="sym">,</span> <span class="kwb">double</span><span class="sym">);</span>

<span class="kwb">struct</span> _tSphere
<span class="sym">{</span>
   <span class="kwd">SCENE_OBJECT</span><span class="sym">(</span>Sphere<span class="sym">);</span>
   Vec center<span class="sym">;</span> <span class="kwb">double</span> radius<span class="sym">;</span>
<span class="sym">};</span>

<span class="kwb">static</span> __inline__ <span class="kwb">double</span> <span class="kwd">ray_sphere</span> <span class="sym">(</span><span class="kwb">const</span> Ray <span class="sym">*</span>r<span class="sym">,</span> <span class="kwb">const</span> Sphere <span class="sym">*</span>s<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">double</span> d<span class="sym">,</span> t1<span class="sym">,</span> t2<span class="sym">;</span>
   Vec v <span class="sym">=</span> <span class="kwd">sub</span><span class="sym">(</span>s<span class="sym">-&gt;</span>center<span class="sym">,</span> r<span class="sym">-&gt;</span>orig<span class="sym">);</span>
   <span class="kwb">double</span> b <span class="sym">=</span> <span class="kwd">dot</span><span class="sym">(</span>v<span class="sym">,</span> r<span class="sym">-&gt;</span>dir<span class="sym">),</span> disc <span class="sym">=</span> b<span class="sym">*</span>b <span class="sym">-</span> <span class="kwd">dot</span><span class="sym">(</span>v<span class="sym">,</span> v<span class="sym">) +</span> s<span class="sym">-&gt;</span>radius <span class="sym">*</span> s<span class="sym">-&gt;</span>radius<span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>disc <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> INFINITY<span class="sym">;</span>
   d <span class="sym">=</span> <span class="kwd">sqrt</span><span class="sym">(</span>disc<span class="sym">),</span> t2 <span class="sym">=</span> b <span class="sym">+</span> d<span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">(</span>t2 <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> INFINITY<span class="sym">;</span>
   t1 <span class="sym">=</span> b <span class="sym">-</span> d<span class="sym">;</span>
   <span class="kwa">return</span> <span class="sym">(</span>t1 <span class="sym">&gt;</span> <span class="num">0</span> ? t1 <span class="sym">:</span> t2<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">static void</span> <span class="kwd">sphere_intersect</span> <span class="sym">(</span>Sphere <span class="sym">*</span>s<span class="sym">,</span> <span class="kwb">double</span> <span class="sym">*</span>lambda<span class="sym">,</span> Vec <span class="sym">*</span>normal<span class="sym">,</span> <span class="kwb">const</span> Ray <span class="sym">*</span>r<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">double</span> l <span class="sym">=</span> <span class="kwd">ray_sphere</span><span class="sym">(</span>r<span class="sym">,</span> s<span class="sym">);</span>
   <span class="kwa">if</span> <span class="sym">(</span>l <span class="sym">&gt;= *</span>lambda<span class="sym">)</span> <span class="kwa">return</span><span class="sym">;</span>
   <span class="sym">*</span>lambda <span class="sym">=</span> l<span class="sym">;</span>
   <span class="sym">*</span>normal <span class="sym">=</span> <span class="kwd">unitise</span> <span class="sym">(</span><span class="kwd">add</span><span class="sym">(</span>r<span class="sym">-&gt;</span>orig<span class="sym">,</span> <span class="kwd">sub</span><span class="sym">(</span><span class="kwd">scale</span><span class="sym">(</span>l<span class="sym">,</span> r<span class="sym">-&gt;</span>dir<span class="sym">),</span> s<span class="sym">-&gt;</span>center<span class="sym">)));</span>
<span class="sym">}</span>

<span class="kwb">static void</span> <span class="kwd">sphere_destroy</span> <span class="sym">(</span>Sphere <span class="sym">*</span>s<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwd">free</span> <span class="sym">((</span><span class="kwb">char</span> <span class="sym">*)</span>s<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">static</span> Sphere <span class="sym">*</span><span class="kwd">sphere_new</span> <span class="sym">(</span><span class="kwb">double</span> r<span class="sym">,</span> <span class="kwb">double</span> x<span class="sym">,</span> <span class="kwb">double</span> y<span class="sym">,</span> <span class="kwb">double</span> z<span class="sym">)</span>
<span class="sym">{</span>
   Sphere <span class="sym">*</span>s <span class="sym">= (</span>Sphere <span class="sym">*)</span> <span class="kwd">calloc</span> <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="kwa">sizeof</span> <span class="sym">(</span>Sphere<span class="sym">));</span>
   s<span class="sym">-&gt;</span>intersect <span class="sym">=</span> sphere_intersect<span class="sym">;</span>
   s<span class="sym">-&gt;</span>destroy <span class="sym">=</span> sphere_destroy<span class="sym">;</span>
   s<span class="sym">-&gt;</span>center<span class="sym">=</span><span class="kwd">vec</span><span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">);</span> s<span class="sym">-&gt;</span>radius<span class="sym">=</span>r<span class="sym">;</span>
   <span class="kwa">return</span> s<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">struct</span> _tGroup
<span class="sym">{</span>
   <span class="kwd">SCENE_OBJECT</span><span class="sym">(</span>Group<span class="sym">);</span>
   Sphere <span class="sym">*</span>bound<span class="sym">;</span>
<span class="dir">#define NUM_GROUP_MEMBERS 5</span>
   Scene <span class="sym">*</span>members<span class="sym">[</span>NUM_GROUP_MEMBERS<span class="sym">];</span>
<span class="sym">};</span>

<span class="kwb">static void</span> <span class="kwd">group_intersect</span> <span class="sym">(</span>Group <span class="sym">*</span>g<span class="sym">,</span> <span class="kwb">double</span> <span class="sym">*</span>lambda<span class="sym">,</span> Vec <span class="sym">*</span>normal<span class="sym">,</span> <span class="kwb">const</span> Ray <span class="sym">*</span>r<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">int</span> i<span class="sym">;</span>

   <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">ray_sphere</span> <span class="sym">(</span>r<span class="sym">,</span> g<span class="sym">-&gt;</span>bound<span class="sym">) &gt;= *</span>lambda<span class="sym">)</span>
     <span class="kwa">return</span><span class="sym">;</span>

   <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> NUM_GROUP_MEMBERS<span class="sym">;</span> i<span class="sym">++)</span>
     <span class="sym">{</span>
	Scene <span class="sym">*</span>s <span class="sym">=</span> g<span class="sym">-&gt;</span>members<span class="sym">[</span>i<span class="sym">];</span>
	<span class="sym">(*</span>s<span class="sym">-&gt;</span>intersect<span class="sym">) (</span>s<span class="sym">,</span> lambda<span class="sym">,</span> normal<span class="sym">,</span> r<span class="sym">);</span>
     <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">static void</span> <span class="kwd">group_destroy</span> <span class="sym">(</span>Group <span class="sym">*</span>g<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">int</span> i<span class="sym">;</span>

   <span class="sym">(*</span>g<span class="sym">-&gt;</span>bound<span class="sym">-&gt;</span>destroy<span class="sym">) (</span>g<span class="sym">-&gt;</span>bound<span class="sym">);</span>
   <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> NUM_GROUP_MEMBERS<span class="sym">;</span> i<span class="sym">++)</span>
     <span class="sym">{</span>
	Scene <span class="sym">*</span>s <span class="sym">=</span> g<span class="sym">-&gt;</span>members<span class="sym">[</span>i<span class="sym">];</span>
	<span class="sym">(*</span>s<span class="sym">-&gt;</span>destroy<span class="sym">) (</span>s<span class="sym">);</span>
     <span class="sym">}</span>
   <span class="kwd">free</span> <span class="sym">((</span><span class="kwb">char</span> <span class="sym">*)</span>g<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">static</span> Group <span class="sym">*</span><span class="kwd">group_new</span> <span class="sym">(</span><span class="kwb">int</span> level<span class="sym">,</span> <span class="kwb">double</span> r<span class="sym">,</span> <span class="kwb">double</span> x<span class="sym">,</span> <span class="kwb">double</span> y<span class="sym">,</span> <span class="kwb">double</span> z<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">static double</span> dz<span class="sym">[</span>NUM_GROUP_MEMBERS<span class="sym">] = {-</span><span class="num">1</span><span class="sym">, -</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">};</span>
   <span class="kwb">static double</span> dx<span class="sym">[</span>NUM_GROUP_MEMBERS<span class="sym">] = {-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">, -</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">};</span>
   <span class="kwb">double</span> rn<span class="sym">;</span>
   <span class="kwb">int</span> i<span class="sym">;</span>
   Group <span class="sym">*</span>g <span class="sym">= (</span>Group <span class="sym">*)</span><span class="kwd">calloc</span> <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="kwa">sizeof</span> <span class="sym">(</span>Group<span class="sym">));</span>
   g<span class="sym">-&gt;</span>intersect <span class="sym">=</span> group_intersect<span class="sym">;</span>
   g<span class="sym">-&gt;</span>destroy <span class="sym">=</span> group_destroy<span class="sym">;</span>
   g<span class="sym">-&gt;</span>bound <span class="sym">=</span> <span class="kwd">sphere_new</span> <span class="sym">(</span><span class="num">3</span><span class="sym">*</span>r<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">);</span>
   rn <span class="sym">=</span> <span class="num">3</span><span class="sym">*</span>r<span class="sym">/</span><span class="kwd">sqrt</span><span class="sym">(</span><span class="num">12.0</span><span class="sym">);</span>
   <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> NUM_GROUP_MEMBERS<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">++)</span>
     g<span class="sym">-&gt;</span>members<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwd">scene_new</span> <span class="sym">(</span>level<span class="sym">,</span> <span class="num">0.5</span><span class="sym">*</span>r<span class="sym">,</span> x<span class="sym">-</span>dx<span class="sym">[</span>i<span class="sym">]*</span>rn<span class="sym">,</span> y<span class="sym">+</span>rn<span class="sym">,</span> z<span class="sym">-</span>dz<span class="sym">[</span>i<span class="sym">]*</span>rn<span class="sym">);</span>
   g<span class="sym">-&gt;</span>members<span class="sym">[</span>NUM_GROUP_MEMBERS<span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> <span class="kwd">scene_new</span> <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> r<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">);</span>

   <span class="kwa">return</span> g<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">static</span> Scene <span class="sym">*</span><span class="kwd">scene_new</span> <span class="sym">(</span><span class="kwb">int</span> level<span class="sym">,</span> <span class="kwb">double</span> r<span class="sym">,</span> <span class="kwb">double</span> x<span class="sym">,</span> <span class="kwb">double</span> y<span class="sym">,</span> <span class="kwb">double</span> z<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">if</span> <span class="sym">(</span>level <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span>
     <span class="kwa">return</span> <span class="sym">(</span>Scene <span class="sym">*)</span> <span class="kwd">sphere_new</span> <span class="sym">(</span>r<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">);</span>
   <span class="kwa">return</span> <span class="sym">(</span>Scene <span class="sym">*)</span> <span class="kwd">group_new</span> <span class="sym">(</span>level<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> r<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">);</span>
<span class="sym">}</span>


<span class="kwb">static double</span> <span class="kwd">ray_trace</span> <span class="sym">(</span>Vec light<span class="sym">,</span> Ray r<span class="sym">,</span> Scene <span class="sym">*</span>scene<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwb">double</span> lambda <span class="sym">=</span> INFINITY<span class="sym">,</span> l<span class="sym">,</span> g<span class="sym">;</span>
   Ray r2<span class="sym">;</span>
   Vec n <span class="sym">=</span> <span class="kwd">vec</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
   <span class="sym">(*</span>scene<span class="sym">-&gt;</span>intersect<span class="sym">) (</span>scene<span class="sym">, &amp;</span>lambda<span class="sym">, &amp;</span>n<span class="sym">, &amp;</span>r<span class="sym">);</span>
   <span class="kwa">if</span> <span class="sym">(</span>lambda <span class="sym">==</span> INFINITY<span class="sym">)</span> <span class="kwa">return</span> <span class="num">0.0</span><span class="sym">;</span>
   <span class="kwa">if</span> <span class="sym">((</span>g <span class="sym">=</span> <span class="kwd">dot</span><span class="sym">(</span>n<span class="sym">,</span> light<span class="sym">)) &lt;=</span> <span class="num">0.0</span><span class="sym">)</span>
     <span class="kwa">return</span> <span class="num">0.0</span><span class="sym">;</span>
   l <span class="sym">=</span> INFINITY<span class="sym">;</span>
   r2 <span class="sym">=</span> <span class="kwd">ray</span><span class="sym">(</span><span class="kwd">add</span><span class="sym">(</span>r<span class="sym">.</span>orig<span class="sym">,</span> <span class="kwd">scale</span><span class="sym">(</span>lambda<span class="sym">,</span> <span class="kwd">add</span><span class="sym">(</span>r<span class="sym">.</span>dir<span class="sym">,</span> <span class="kwd">scale</span><span class="sym">(</span>DELTA<span class="sym">,</span> n<span class="sym">)))),</span> light<span class="sym">);</span>
   <span class="sym">(*</span>scene<span class="sym">-&gt;</span>intersect<span class="sym">) (</span>scene<span class="sym">, &amp;</span>l<span class="sym">, &amp;</span>n<span class="sym">, &amp;</span>r2<span class="sym">);</span>
   <span class="kwa">return</span> <span class="sym">(</span>l <span class="sym">==</span> INFINITY ? g <span class="sym">:</span> <span class="num">0.0</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span> <span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])</span>
<span class="sym">{</span>
   <span class="kwb">int</span> x<span class="sym">,</span> y<span class="sym">,</span> dx<span class="sym">,</span> dy<span class="sym">,</span> level<span class="sym">,</span> n<span class="sym">,</span> ss<span class="sym">;</span>
   Vec light<span class="sym">;</span>
   Scene <span class="sym">*</span>scene<span class="sym">;</span>
   level <span class="sym">=</span> <span class="num">6</span><span class="sym">,</span> n <span class="sym">= (</span>argc<span class="sym">==</span><span class="num">2</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">256</span><span class="sym">),</span> ss <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>
   light <span class="sym">=</span> <span class="kwd">sub</span><span class="sym">(</span><span class="kwd">vec</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">),</span> <span class="kwd">unitise</span><span class="sym">(</span><span class="kwd">vec</span><span class="sym">(-</span><span class="num">1</span><span class="sym">, -</span><span class="num">3</span><span class="sym">,</span> <span class="num">2</span><span class="sym">)));</span>
   scene <span class="sym">=</span> <span class="kwd">scene_new</span> <span class="sym">(</span>level<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">, -</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>  <span class="com">/* Build the scene */</span>
   <span class="kwd">fprintf</span> <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;P5</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">255</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> n<span class="sym">,</span> n<span class="sym">);</span>
   <span class="kwa">for</span> <span class="sym">(</span>y<span class="sym">=</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> y<span class="sym">&gt;=</span><span class="num">0</span><span class="sym">; --</span>y<span class="sym">)</span>
     <span class="sym">{</span>
	<span class="kwa">for</span> <span class="sym">(</span>x<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> x<span class="sym">&lt;</span>n<span class="sym">; ++</span>x<span class="sym">)</span>
	  <span class="sym">{</span>
	     <span class="kwb">double</span> g<span class="sym">=</span><span class="num">0.0</span><span class="sym">;</span>
	     <span class="kwa">for</span> <span class="sym">(</span>dx<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> dx<span class="sym">&lt;</span>ss<span class="sym">; ++</span>dx<span class="sym">)</span>
	       <span class="sym">{</span>
		  <span class="kwa">for</span> <span class="sym">(</span>dy<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> dy<span class="sym">&lt;</span>ss<span class="sym">; ++</span>dy<span class="sym">)</span>
		    <span class="sym">{</span>
		       Vec d<span class="sym">=</span><span class="kwd">vec</span><span class="sym">(</span>x<span class="sym">+(</span><span class="kwb">double</span><span class="sym">)</span>dx<span class="sym">/</span>ss<span class="sym">-</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">.,</span> y<span class="sym">+(</span><span class="kwb">double</span><span class="sym">)</span>dy<span class="sym">/</span>ss<span class="sym">-</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">.,</span> n<span class="sym">);</span>
		       g <span class="sym">+=</span> <span class="kwd">ray_trace</span><span class="sym">(</span>light<span class="sym">,</span> <span class="kwd">ray</span><span class="sym">(</span><span class="kwd">vec</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">, -</span><span class="num">4</span><span class="sym">),</span> <span class="kwd">unitise</span><span class="sym">(</span>d<span class="sym">)),</span> scene<span class="sym">);</span>
		    <span class="sym">}</span>
	       <span class="sym">}</span>
	     <span class="kwd">putc</span> <span class="sym">((</span><span class="kwb">char</span><span class="sym">)(</span><span class="num">.5</span> <span class="sym">+</span> <span class="num">255</span><span class="sym">*</span>g<span class="sym">/(</span>ss<span class="sym">*</span>ss<span class="sym">)),</span>stdout<span class="sym">);</span>
	  <span class="sym">}</span>
    <span class="sym">}</span>
   <span class="sym">(*</span>scene<span class="sym">-&gt;</span>destroy<span class="sym">)(</span>scene<span class="sym">);</span>
   <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
