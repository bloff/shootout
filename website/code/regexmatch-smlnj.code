<span class="line">    1 </span><span class="com">(* -*- mode: sml -*-
</span><span class="line">    2 </span><span class="com"> * $Id: regexmatch-smlnj.code,v 1.3 2004-11-11 07:14:05 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> * from Stephen Weeks
</span><span class="line">    5 </span><span class="com"> * &quot;ported&quot; to SML/NJ
</span><span class="line">    6 </span><span class="com"> * with help from Daniel Wang
</span><span class="line">    7 </span><span class="com"> *)</span>
<span class="line">    8 </span>
<span class="line">    9 </span><span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig
</span><span class="line">   10 </span><span class="kwa">    val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="line">   11 </span><span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct
</span><span class="line">   12 </span><span class="kwa">
</span><span class="line">   13 </span><span class="kwa">
</span><span class="line">   14 </span><span class="kwa">fun</span> <span class="sym">++ (</span>r<span class="sym">:</span> <span class="kwb">int</span> ref<span class="sym">):</span> <span class="kwb">int</span> <span class="sym">=
</span><span class="line">   15 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">   16 </span><span class="kwa">      val</span> n <span class="sym">=</span> <span class="num">1</span> <span class="sym">+ !</span>r
<span class="line">   17 </span>      <span class="kwa">val</span> _ <span class="sym">=</span> r <span class="sym">:=</span> n
<span class="line">   18 </span>   <span class="kwa">in</span> n
<span class="line">   19 </span>   <span class="kwa">end
</span><span class="line">   20 </span><span class="kwa">
</span><span class="line">   21 </span><span class="kwa">structure Int</span> <span class="sym">=
</span><span class="line">   22 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">   23 </span><span class="kwa">      open Int
</span><span class="line">   24 </span><span class="kwa">
</span><span class="line">   25 </span><span class="kwa">      type</span> t <span class="sym">=</span> <span class="kwb">int
</span><span class="line">   26 </span><span class="kwb">
</span><span class="line">   27 </span><span class="kwb"></span>      <span class="kwa">fun</span> exists <span class="sym">(</span>start<span class="sym">:</span> t<span class="sym">,</span> stop<span class="sym">:</span> t<span class="sym">,</span> f<span class="sym">:</span> t <span class="sym">-&gt;</span> <span class="kwb">bool</span><span class="sym">):</span> <span class="kwb">bool</span> <span class="sym">=
</span><span class="line">   28 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">   29 </span><span class="kwa">            fun</span> loop i <span class="sym">=</span> i <span class="sym">&lt;</span> stop <span class="kwa">andalso</span> <span class="sym">(</span>f i <span class="kwa">orelse</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   30 </span><span class="sym"></span>         <span class="kwa">in
</span><span class="line">   31 </span><span class="kwa"></span>            loop start
<span class="line">   32 </span>         <span class="kwa">end
</span><span class="line">   33 </span><span class="kwa">
</span><span class="line">   34 </span><span class="kwa">      fun</span> forall <span class="sym">(</span>start<span class="sym">,</span> stop<span class="sym">,</span> f<span class="sym">) =</span> not <span class="sym">(</span>exists <span class="sym">(</span>start<span class="sym">,</span> stop<span class="sym">,</span> not <span class="kwa">o</span> f<span class="sym">))
</span><span class="line">   35 </span><span class="sym">
</span><span class="line">   36 </span><span class="sym"></span>      <span class="kwa">fun</span> fold <span class="sym">(</span>start<span class="sym">:</span> t<span class="sym">,</span> stop<span class="sym">:</span> t<span class="sym">,</span> a<span class="sym">:</span> 'a<span class="sym">,</span> f<span class="sym">:</span> t <span class="sym">*</span> 'a <span class="sym">-&gt;</span> 'a<span class="sym">):</span> 'a <span class="sym">=
</span><span class="line">   37 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">   38 </span><span class="kwa">            fun</span> loop <span class="sym">(</span>i<span class="sym">:</span> t<span class="sym">,</span> a<span class="sym">:</span> 'a<span class="sym">) =
</span><span class="line">   39 </span><span class="sym"></span>               <span class="kwa">if</span> i <span class="sym">&gt;=</span> stop
<span class="line">   40 </span>                  <span class="kwa">then</span> a
<span class="line">   41 </span>               <span class="kwa">else</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> f <span class="sym">(</span>i<span class="sym">,</span> a<span class="sym">))
</span><span class="line">   42 </span><span class="sym"></span>         <span class="kwa">in</span> loop <span class="sym">(</span>start<span class="sym">,</span> a<span class="sym">)
</span><span class="line">   43 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">   44 </span><span class="kwa">
</span><span class="line">   45 </span><span class="kwa">      fun</span> for <span class="sym">(</span>start<span class="sym">:</span> t<span class="sym">,</span> stop<span class="sym">:</span> t<span class="sym">,</span> f<span class="sym">:</span> t <span class="sym">-&gt;</span> unit<span class="sym">):</span> unit <span class="sym">=
</span><span class="line">   46 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">   47 </span><span class="kwa">            fun</span> loop i <span class="sym">=
</span><span class="line">   48 </span><span class="sym"></span>               <span class="kwa">if</span> i <span class="sym">&gt;=</span> stop
<span class="line">   49 </span>                  <span class="kwa">then</span> <span class="sym">()
</span><span class="line">   50 </span><span class="sym"></span>               <span class="kwa">else</span> <span class="sym">(</span>f i<span class="sym">;</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   51 </span><span class="sym"></span>         <span class="kwa">in
</span><span class="line">   52 </span><span class="kwa"></span>            loop start
<span class="line">   53 </span>         <span class="kwa">end
</span><span class="line">   54 </span><span class="kwa">   end
</span><span class="line">   55 </span><span class="kwa">
</span><span class="line">   56 </span><span class="kwa">structure</span> Array2 <span class="sym">=
</span><span class="line">   57 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">   58 </span><span class="kwa">      open</span> Array2
<span class="line">   59 </span>
<span class="line">   60 </span>      <span class="kwa">type</span> 'a t <span class="sym">=</span> 'a array
<span class="line">   61 </span>
<span class="line">   62 </span>      <span class="kwa">val</span> new <span class="sym">=</span> array
<span class="line">   63 </span>
<span class="line">   64 </span>      <span class="kwa">fun</span> tabulate <span class="sym">(</span>r<span class="sym">,</span> c<span class="sym">,</span> f<span class="sym">) =</span> Array2.tabulate RowMajor <span class="sym">(</span>r<span class="sym">,</span> c<span class="sym">,</span> f<span class="sym">)
</span><span class="line">   65 </span><span class="sym">
</span><span class="line">   66 </span><span class="sym"></span>      <span class="kwa">fun</span> foreachi <span class="sym">(</span>a<span class="sym">,</span> f<span class="sym">) =
</span><span class="line">   67 </span><span class="sym"></span>         appi RowMajor f <span class="sym">{</span>base <span class="sym">=</span> a<span class="sym">,</span> row <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> col <span class="sym">=</span> <span class="num">0</span><span class="sym">,
</span><span class="line">   68 </span><span class="sym"></span>                          nrows <span class="sym">=</span> NONE<span class="sym">,</span> ncols <span class="sym">=</span> NONE<span class="sym">}
</span><span class="line">   69 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">   70 </span><span class="kwa">
</span><span class="line">   71 </span><span class="kwa">structure Vector</span> <span class="sym">=
</span><span class="line">   72 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">   73 </span><span class="kwa">      open Vector
</span><span class="line">   74 </span><span class="kwa">
</span><span class="line">   75 </span><span class="kwa">      fun</span> exists <span class="sym">(</span>v<span class="sym">,</span> f<span class="sym">) =
</span><span class="line">   76 </span><span class="sym"></span>         <span class="kwa">Int</span>.exists <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> length v<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span> f <span class="sym">(</span>sub <span class="sym">(</span>v<span class="sym">,</span> i<span class="sym">)))
</span><span class="line">   77 </span><span class="sym"></span>      <span class="kwa">fun</span> foreach <span class="sym">(</span>v<span class="sym">,</span> f<span class="sym">) =</span> app f v
<span class="line">   78 </span>      <span class="kwa">fun</span> foreachi <span class="sym">(</span>v<span class="sym">,</span> f<span class="sym">) =</span> appi f v
<span class="line">   79 </span>      <span class="kwa">fun</span> new <span class="sym">(</span>n<span class="sym">,</span> x<span class="sym">) =</span> tabulate <span class="sym">(</span>n<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> x<span class="sym">)
</span><span class="line">   80 </span><span class="sym"></span>      <span class="kwa">fun</span> new1 x <span class="sym">=</span> new <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> x<span class="sym">)
</span><span class="line">   81 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">   82 </span><span class="kwa">
</span><span class="line">   83 </span><span class="kwa">structure List</span> <span class="sym">=
</span><span class="line">   84 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">   85 </span><span class="kwa">      open List
</span><span class="line">   86 </span><span class="kwa">
</span><span class="line">   87 </span><span class="kwa">      fun</span> foreach <span class="sym">(</span>l<span class="sym">,</span> f<span class="sym">) =</span> app f l
<span class="line">   88 </span>
<span class="line">   89 </span>      <span class="kwa">fun</span> fold <span class="sym">(</span>l<span class="sym">,</span> b<span class="sym">,</span> f<span class="sym">) =</span> foldl f b l
<span class="line">   90 </span>
<span class="line">   91 </span>      <span class="kwa">fun</span> appendRev <span class="sym">(</span>l1<span class="sym">,</span> l2<span class="sym">) =</span> fold <span class="sym">(</span>l1<span class="sym">,</span> l2<span class="sym">,</span> <span class="kwa">op</span> <span class="sym">::)
</span><span class="line">   92 </span><span class="sym">
</span><span class="line">   93 </span><span class="sym"></span>      <span class="kwa">fun</span> push <span class="sym">(</span>r<span class="sym">,</span> x<span class="sym">) =</span> r <span class="sym">:=</span> x <span class="sym">:: !</span>r
<span class="line">   94 </span>
<span class="line">   95 </span>      <span class="kwa">fun</span> keepAll <span class="sym">(</span>l<span class="sym">,</span> f<span class="sym">) =</span> filter f l
<span class="line">   96 </span>
<span class="line">   97 </span>      <span class="kwa">fun</span> peek <span class="sym">(</span>l<span class="sym">,</span> f<span class="sym">) =</span> find f l
<span class="line">   98 </span>
<span class="line">   99 </span>      <span class="kwa">fun</span> insert <span class="sym">(</span>l<span class="sym">,</span> x<span class="sym">,</span> <span class="kwa">op</span> <span class="sym">&lt;=) =
</span><span class="line">  100 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">  101 </span><span class="kwa">            fun</span> loop <span class="sym">(</span>l<span class="sym">,</span> ac<span class="sym">) =
</span><span class="line">  102 </span><span class="sym"></span>               <span class="kwa">case</span> l <span class="kwa">of
</span><span class="line">  103 </span><span class="kwa"></span>                  <span class="sym">[] =&gt;</span> appendRev <span class="sym">(</span>ac<span class="sym">, [</span>x<span class="sym">])
</span><span class="line">  104 </span><span class="sym">                |</span> x' <span class="sym">::</span> l' <span class="sym">=&gt;
</span><span class="line">  105 </span><span class="sym"></span>                     <span class="kwa">if</span> x <span class="sym">&lt;=</span> x'
<span class="line">  106 </span>                        <span class="kwa">then</span> appendRev <span class="sym">(</span>ac<span class="sym">,</span> x <span class="sym">::</span> l<span class="sym">)
</span><span class="line">  107 </span><span class="sym"></span>                     <span class="kwa">else</span> loop <span class="sym">(</span>l'<span class="sym">,</span> x' <span class="sym">::</span> ac<span class="sym">)
</span><span class="line">  108 </span><span class="sym"></span>         <span class="kwa">in</span> loop <span class="sym">(</span>l<span class="sym">, [])
</span><span class="line">  109 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">  110 </span><span class="kwa">   end
</span><span class="line">  111 </span><span class="kwa">
</span><span class="line">  112 </span><span class="kwa">structure</span> Array <span class="sym">=
</span><span class="line">  113 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">  114 </span><span class="kwa">      open</span> Array
<span class="line">  115 </span>
<span class="line">  116 </span>      <span class="kwa">val</span> new <span class="sym">=</span> array
<span class="line">  117 </span>
<span class="line">  118 </span>      <span class="kwa">fun</span> modify <span class="sym">(</span>a<span class="sym">,</span> f<span class="sym">) =</span> Array.modify f a
<span class="line">  119 </span>
<span class="line">  120 </span>      <span class="kwa">fun</span> foreachi <span class="sym">(</span>a<span class="sym">,</span> f<span class="sym">) =</span> appi f a
<span class="line">  121 </span>
<span class="line">  122 </span>      <span class="kwa">fun</span> indices <span class="sym">(</span>a<span class="sym">:</span> <span class="kwb">bool</span> array<span class="sym">):</span> <span class="kwb">int</span> vector <span class="sym">=
</span><span class="line">  123 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">  124 </span><span class="kwa">            val</span> n <span class="sym">=</span> Array.length a
<span class="line">  125 </span>            <span class="kwa">val</span> numTrue <span class="sym">=
</span><span class="line">  126 </span><span class="sym"></span>               <span class="kwa">let
</span><span class="line">  127 </span><span class="kwa">                  fun</span> loop <span class="sym">(</span>i<span class="sym">,</span> count<span class="sym">) =
</span><span class="line">  128 </span><span class="sym"></span>                     <span class="kwa">if</span> i <span class="sym">=</span> n
<span class="line">  129 </span>                        <span class="kwa">then</span> count
<span class="line">  130 </span>                     <span class="kwa">else</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,
</span><span class="line">  131 </span><span class="sym"></span>                                <span class="kwa">if</span> Array.sub <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">)
</span><span class="line">  132 </span><span class="sym"></span>                                   <span class="kwa">then</span> count <span class="sym">+</span> <span class="num">1
</span><span class="line">  133 </span><span class="num"></span>                                <span class="kwa">else</span> count<span class="sym">)
</span><span class="line">  134 </span><span class="sym"></span>               <span class="kwa">in</span> loop <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span><span class="line">  135 </span><span class="sym"></span>               <span class="kwa">end
</span><span class="line">  136 </span><span class="kwa">            val</span> next <span class="sym">=</span> ref <span class="num">0
</span><span class="line">  137 </span><span class="num"></span>            <span class="kwa">fun</span> loop i <span class="sym">=
</span><span class="line">  138 </span><span class="sym"></span>               <span class="kwa">if</span> Array.sub <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">)
</span><span class="line">  139 </span><span class="sym"></span>                  <span class="kwa">then</span> <span class="sym">(</span>next <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span> i<span class="sym">)
</span><span class="line">  140 </span><span class="sym"></span>               <span class="kwa">else</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span><span class="line">  141 </span><span class="sym"></span>         <span class="kwa">in Vector</span>.tabulate <span class="sym">(</span>numTrue<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> loop <span class="sym">(!</span>next<span class="sym">))
</span><span class="line">  142 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">  143 </span><span class="kwa">   end
</span><span class="line">  144 </span><span class="kwa">
</span><span class="line">  145 </span><span class="kwa">structure Char</span> <span class="sym">=
</span><span class="line">  146 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">  147 </span><span class="kwa">      open Char
</span><span class="line">  148 </span><span class="kwa">
</span><span class="line">  149 </span><span class="kwa">      val</span> fromInt <span class="sym">=</span> chr
<span class="line">  150 </span>      <span class="kwa">val</span> toInt <span class="sym">=</span> ord
<span class="line">  151 </span>   <span class="kwa">end
</span><span class="line">  152 </span><span class="kwa">
</span><span class="line">  153 </span><span class="kwa">structure String</span> <span class="sym">=
</span><span class="line">  154 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">  155 </span><span class="kwa">      open String
</span><span class="line">  156 </span><span class="kwa">
</span><span class="line">  157 </span><span class="kwa">      type</span> t <span class="sym">=</span> <span class="kwb">string
</span><span class="line">  158 </span><span class="kwb">
</span><span class="line">  159 </span><span class="kwb"></span>      <span class="kwa">fun</span> contains <span class="sym">(</span>s<span class="sym">:</span> t<span class="sym">,</span> c<span class="sym">:</span> char<span class="sym">):</span> <span class="kwb">bool</span> <span class="sym">=
</span><span class="line">  160 </span><span class="sym"></span>         <span class="kwa">Int</span>.exists <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> size s<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span> c <span class="sym">=</span> sub <span class="sym">(</span>s<span class="sym">,</span> i<span class="sym">))
</span><span class="line">  161 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">  162 </span><span class="kwa">
</span><span class="line">  163 </span><span class="kwa">val</span> numChars<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">=</span> <span class="num">128
</span><span class="line">  164 </span><span class="num">
</span><span class="line">  165 </span><span class="num"></span><span class="kwa">structure</span> Regexp <span class="sym">=
</span><span class="line">  166 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">  167 </span><span class="kwa">      datatype</span> t <span class="sym">=
</span><span class="line">  168 </span><span class="sym"></span>         AnchorStart
<span class="line">  169 </span>       <span class="sym">|</span> CharSet <span class="kwa">of</span> char <span class="sym">-&gt;</span> <span class="kwb">bool
</span><span class="line">  170 </span><span class="kwb"></span>       <span class="sym">|</span> Or <span class="kwa">of</span> t list
<span class="line">  171 </span>       <span class="sym">|</span> Seq <span class="kwa">of</span> t list
<span class="line">  172 </span>       <span class="sym">|</span> Star <span class="kwa">of</span> t
<span class="line">  173 </span>   <span class="kwa">end
</span><span class="line">  174 </span><span class="kwa">
</span><span class="line">  175 </span><span class="kwa">structure</span> Stack<span class="sym">:
</span><span class="line">  176 </span><span class="sym"></span>   <span class="kwa">sig
</span><span class="line">  177 </span><span class="kwa">      type</span> 'a t
<span class="line">  178 </span>
<span class="line">  179 </span>      <span class="kwa">val</span> clear<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> unit
<span class="line">  180 </span>      <span class="kwa">val</span> exists<span class="sym">:</span> 'a t <span class="sym">* (</span>'a <span class="sym">-&gt;</span> <span class="kwb">bool</span><span class="sym">) -&gt;</span> <span class="kwb">bool
</span><span class="line">  181 </span><span class="kwb"></span>      <span class="kwa">val</span> foreach<span class="sym">:</span> 'a t <span class="sym">* (</span>'a <span class="sym">-&gt;</span> unit<span class="sym">) -&gt;</span> unit
<span class="line">  182 </span>      <span class="kwa">val</span> new<span class="sym">:</span> <span class="kwb">int</span> <span class="sym">*</span> 'a <span class="sym">-&gt;</span> 'a t
<span class="line">  183 </span>      <span class="kwa">val</span> push<span class="sym">:</span> 'a t <span class="sym">*</span> 'a <span class="sym">-&gt;</span> unit
<span class="line">  184 </span>   <span class="kwa">end</span> <span class="sym">=
</span><span class="line">  185 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">  186 </span><span class="kwa">      datatype</span> 'a t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>elts<span class="sym">:</span> 'a array<span class="sym">,
</span><span class="line">  187 </span><span class="sym"></span>                            size<span class="sym">:</span> <span class="kwb">int</span> ref<span class="sym">}
</span><span class="line">  188 </span><span class="sym">
</span><span class="line">  189 </span><span class="sym"></span>      <span class="kwa">fun</span> new <span class="sym">(</span>size<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> dummy<span class="sym">:</span> 'a<span class="sym">):</span> 'a t <span class="sym">=
</span><span class="line">  190 </span><span class="sym"></span>         T <span class="sym">{</span>elts <span class="sym">=</span> Array.new <span class="sym">(</span>size<span class="sym">,</span> dummy<span class="sym">),
</span><span class="line">  191 </span><span class="sym"></span>            size <span class="sym">=</span> ref <span class="num">0</span><span class="sym">}
</span><span class="line">  192 </span><span class="sym">
</span><span class="line">  193 </span><span class="sym"></span>      <span class="kwa">fun</span> push <span class="sym">(</span>T <span class="sym">{</span>elts<span class="sym">,</span> size<span class="sym">},</span> x<span class="sym">) =
</span><span class="line">  194 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">  195 </span><span class="kwa">            val</span> n <span class="sym">= !</span>size
<span class="line">  196 </span>            <span class="kwa">val</span> _ <span class="sym">=</span> Array.update <span class="sym">(</span>elts<span class="sym">,</span> n<span class="sym">,</span> x<span class="sym">)
</span><span class="line">  197 </span><span class="sym"></span>            <span class="kwa">val</span> _ <span class="sym">=</span> size <span class="sym">:=</span> n <span class="sym">+</span> <span class="num">1
</span><span class="line">  198 </span><span class="num"></span>         <span class="kwa">in</span> <span class="sym">()
</span><span class="line">  199 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">  200 </span><span class="kwa">
</span><span class="line">  201 </span><span class="kwa">      fun</span> exists <span class="sym">(</span>T <span class="sym">{</span>elts<span class="sym">,</span> size<span class="sym">,</span> ...<span class="sym">},</span> f<span class="sym">) =
</span><span class="line">  202 </span><span class="sym"></span>         <span class="kwa">Int</span>.exists <span class="sym">(</span><span class="num">0</span><span class="sym">, !</span>size<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span> f <span class="sym">(</span>Array.sub <span class="sym">(</span>elts<span class="sym">,</span> i<span class="sym">)))
</span><span class="line">  203 </span><span class="sym">
</span><span class="line">  204 </span><span class="sym"></span>      <span class="kwa">fun</span> foreach <span class="sym">(</span>T <span class="sym">{</span>elts<span class="sym">,</span> size<span class="sym">},</span> f<span class="sym">) =
</span><span class="line">  205 </span><span class="sym"></span>         <span class="kwa">Int</span>.for <span class="sym">(</span><span class="num">0</span><span class="sym">, !</span>size<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span> f <span class="sym">(</span>Array.sub <span class="sym">(</span>elts<span class="sym">,</span> i<span class="sym">)))
</span><span class="line">  206 </span><span class="sym">
</span><span class="line">  207 </span><span class="sym"></span>      <span class="kwa">fun</span> clear <span class="sym">(</span>T <span class="sym">{</span>size<span class="sym">,</span> ...<span class="sym">}) =</span> size <span class="sym">:=</span> <span class="num">0
</span><span class="line">  208 </span><span class="num"></span>   <span class="kwa">end
</span><span class="line">  209 </span><span class="kwa">
</span><span class="line">  210 </span><span class="kwa"></span><span class="com">(* Non-deterministic Finite Automaton. *)</span>
<span class="line">  211 </span><span class="kwa">structure</span> NFA<span class="sym">:
</span><span class="line">  212 </span><span class="sym"></span>   <span class="kwa">sig
</span><span class="line">  213 </span><span class="kwa"></span>      <span class="com">(* The states in an NFA are indexed from 0 to n-1, where n is the number
</span><span class="line">  214 </span><span class="com">       * of states.
</span><span class="line">  215 </span><span class="com">       *)</span>
<span class="line">  216 </span>      <span class="kwa">type</span> state <span class="sym">=</span> <span class="kwb">int
</span><span class="line">  217 </span><span class="kwb">
</span><span class="line">  218 </span><span class="kwb"></span>      <span class="com">(* State i is final iff Array.sub (final, i).
</span><span class="line">  219 </span><span class="com">       * The outgoing states from state i on input char c are given by
</span><span class="line">  220 </span><span class="com">       * Array2.sub (next, i, Char.ord c).
</span><span class="line">  221 </span><span class="com">       * anchorStarts is sorted in increasing order of state index.
</span><span class="line">  222 </span><span class="com">       *)</span>
<span class="line">  223 </span>      <span class="kwa">datatype</span> t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>anchorStarts<span class="sym">:</span> state list<span class="sym">,
</span><span class="line">  224 </span><span class="sym"></span>                         final<span class="sym">:</span> <span class="kwb">bool</span> array<span class="sym">,
</span><span class="line">  225 </span><span class="sym"></span>                         seen<span class="sym">:</span> <span class="kwb">bool</span> array<span class="sym">,</span> <span class="com">(* used for matching. *)</span>
<span class="line">  226 </span>                         stack1<span class="sym">:</span> <span class="kwb">int</span> Stack.t<span class="sym">,</span> <span class="com">(* used for matching. *)</span>
<span class="line">  227 </span>                         stack2<span class="sym">:</span> <span class="kwb">int</span> Stack.t<span class="sym">,</span> <span class="com">(* used for matching. *)</span>
<span class="line">  228 </span>                         start<span class="sym">:</span> state<span class="sym">,
</span><span class="line">  229 </span><span class="sym"></span>                         next<span class="sym">:</span> state vector Array2.t<span class="sym">}
</span><span class="line">  230 </span><span class="sym">
</span><span class="line">  231 </span><span class="sym"></span>      <span class="kwa">val</span> fromRegexp<span class="sym">:</span> Regexp.t <span class="sym">-&gt;</span> t
<span class="line">  232 </span>      <span class="kwa">val</span> match<span class="sym">: {</span>nfa<span class="sym">:</span> t<span class="sym">,
</span><span class="line">  233 </span><span class="sym"></span>                  <span class="kwb">string</span><span class="sym">:</span> <span class="kwb">string</span><span class="sym">,
</span><span class="line">  234 </span><span class="sym"></span>                  startPos<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,
</span><span class="line">  235 </span><span class="sym"></span>                  anchorStart<span class="sym">:</span> <span class="kwb">bool</span><span class="sym">} -&gt;</span> <span class="kwb">int</span> option
<span class="line">  236 </span>      <span class="kwa">val</span> numStates<span class="sym">:</span> t <span class="sym">-&gt;</span> <span class="kwb">int
</span><span class="line">  237 </span><span class="kwb"></span>   <span class="kwa">end</span> <span class="sym">=
</span><span class="line">  238 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">  239 </span><span class="kwa">      type</span> state <span class="sym">=</span> <span class="kwb">int
</span><span class="line">  240 </span><span class="kwb"></span>      <span class="kwa">datatype</span> t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>anchorStarts<span class="sym">:</span> state list<span class="sym">,
</span><span class="line">  241 </span><span class="sym"></span>                         final<span class="sym">:</span> <span class="kwb">bool</span> array<span class="sym">,
</span><span class="line">  242 </span><span class="sym"></span>                         seen<span class="sym">:</span> <span class="kwb">bool</span> array<span class="sym">,
</span><span class="line">  243 </span><span class="sym"></span>                         stack1<span class="sym">:</span> <span class="kwb">int</span> Stack.t<span class="sym">,
</span><span class="line">  244 </span><span class="sym"></span>                         stack2<span class="sym">:</span> <span class="kwb">int</span> Stack.t<span class="sym">,
</span><span class="line">  245 </span><span class="sym"></span>                         start<span class="sym">:</span> state<span class="sym">,
</span><span class="line">  246 </span><span class="sym"></span>                         next<span class="sym">:</span> state vector Array2.t<span class="sym">}
</span><span class="line">  247 </span><span class="sym">
</span><span class="line">  248 </span><span class="sym"></span>      <span class="kwa">fun</span> numStates <span class="sym">(</span>T <span class="sym">{</span>next<span class="sym">,</span> ...<span class="sym">}) =</span> Array2.nRows next
<span class="line">  249 </span>
<span class="line">  250 </span>
<span class="line">  251 </span>      <span class="com">(* Simulating an NFA with two stacks and a bit vector, as in Algorithm 3.4
</span><span class="line">  252 </span><span class="com">       * (page 126) of Compilers: Principles, Techniques, and Tools by Aho,
</span><span class="line">  253 </span><span class="com">       * Sethi, and Ullman.
</span><span class="line">  254 </span><span class="com">       *)</span>
<span class="line">  255 </span>      <span class="kwa">fun</span> match <span class="sym">{</span>anchorStart<span class="sym">:</span> <span class="kwb">bool</span><span class="sym">,
</span><span class="line">  256 </span><span class="sym"></span>                 nfa <span class="kwa">as</span> T <span class="sym">{</span>anchorStarts<span class="sym">,</span> final<span class="sym">,</span> seen<span class="sym">,</span> stack1<span class="sym">,</span> stack2<span class="sym">,</span> start<span class="sym">,
</span><span class="line">  257 </span><span class="sym"></span>                           next<span class="sym">},
</span><span class="line">  258 </span><span class="sym"></span>                 startPos<span class="sym">,
</span><span class="line">  259 </span><span class="sym"></span>                 <span class="kwb">string</span> <span class="sym">=</span> s<span class="sym">}:</span> <span class="kwb">int</span> option <span class="sym">=
</span><span class="line">  260 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">  261 </span><span class="kwa">            val</span> numStates <span class="sym">=</span> numStates nfa
<span class="line">  262 </span>            <span class="kwa">val</span> n <span class="sym">=</span> <span class="kwa">String</span>.size s
<span class="line">  263 </span>            <span class="kwa">val</span> _ <span class="sym">=</span> Array.modify <span class="sym">(</span>seen<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> <span class="kwa">false</span><span class="sym">)
</span><span class="line">  264 </span><span class="sym"></span>            <span class="kwa">fun</span> loop <span class="sym">(</span>current<span class="sym">:</span> state Stack.t<span class="sym">,
</span><span class="line">  265 </span><span class="sym"></span>                      nextStates<span class="sym">:</span> state Stack.t<span class="sym">,
</span><span class="line">  266 </span><span class="sym"></span>                      i<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,
</span><span class="line">  267 </span><span class="sym"></span>                      last<span class="sym">:</span> <span class="kwb">int</span> option<span class="sym">):</span> <span class="kwb">int</span> option <span class="sym">=
</span><span class="line">  268 </span><span class="sym"></span>               <span class="kwa">let
</span><span class="line">  269 </span><span class="kwa">                  val</span> last <span class="sym">=
</span><span class="line">  270 </span><span class="sym"></span>                     <span class="kwa">if</span> Stack.exists <span class="sym">(</span>current<span class="sym">,</span> <span class="kwa">fn</span> s <span class="sym">=&gt;</span> Array.sub <span class="sym">(</span>final<span class="sym">,</span> s<span class="sym">))
</span><span class="line">  271 </span><span class="sym"></span>                        <span class="kwa">then</span> SOME i
<span class="line">  272 </span>                     <span class="kwa">else</span> last
<span class="line">  273 </span>               <span class="kwa">in
</span><span class="line">  274 </span><span class="kwa">                  if</span> numStates <span class="sym">=</span> <span class="num">0</span> <span class="kwa">orelse</span> i <span class="sym">=</span> n
<span class="line">  275 </span>                     <span class="kwa">then</span> <span class="sym">(</span>Stack.clear stack1
<span class="line">  276 </span>                           <span class="sym">;</span> Stack.clear stack2
<span class="line">  277 </span>                           <span class="sym">;</span> last<span class="sym">)
</span><span class="line">  278 </span><span class="sym"></span>                  <span class="kwa">else
</span><span class="line">  279 </span><span class="kwa">                     let
</span><span class="line">  280 </span><span class="kwa">                        val</span> _ <span class="sym">=</span> Array.modify <span class="sym">(</span>seen<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> <span class="kwa">false</span><span class="sym">)
</span><span class="line">  281 </span><span class="sym"></span>                        <span class="kwa">val</span> c <span class="sym">=</span> <span class="kwa">Char</span>.toInt <span class="sym">(</span><span class="kwa">String</span>.sub <span class="sym">(</span>s<span class="sym">,</span> i<span class="sym">))
</span><span class="line">  282 </span><span class="sym"></span>                        <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">  283 </span><span class="sym"></span>                           Stack.foreach <span class="sym">(</span>current<span class="sym">,</span> <span class="kwa">fn</span> s <span class="sym">=&gt;
</span><span class="line">  284 </span><span class="sym"></span>                                          <span class="kwa">Vector</span>.foreach
<span class="line">  285 </span>                                          <span class="sym">(</span>Array2.sub <span class="sym">(</span>next<span class="sym">,</span> s<span class="sym">,</span> c<span class="sym">),
</span><span class="line">  286 </span><span class="sym"></span>                                           <span class="kwa">fn</span> s' <span class="sym">=&gt;
</span><span class="line">  287 </span><span class="sym"></span>                                           <span class="kwa">if</span> Array.sub <span class="sym">(</span>seen<span class="sym">,</span> s'<span class="sym">)
</span><span class="line">  288 </span><span class="sym"></span>                                              <span class="kwa">then</span> <span class="sym">()
</span><span class="line">  289 </span><span class="sym"></span>                                           <span class="kwa">else</span> <span class="sym">(</span>Array.update <span class="sym">(</span>seen<span class="sym">,</span> s'<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)
</span><span class="line">  290 </span><span class="sym">                                                 ;</span> Stack.push <span class="sym">(</span>nextStates<span class="sym">,</span> s'<span class="sym">))))
</span><span class="line">  291 </span><span class="sym"></span>                        <span class="kwa">val</span> _ <span class="sym">=</span> Stack.clear current
<span class="line">  292 </span>                     <span class="kwa">in</span> loop <span class="sym">(</span>nextStates<span class="sym">,</span> current<span class="sym">,</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> last<span class="sym">)
</span><span class="line">  293 </span><span class="sym"></span>                     <span class="kwa">end
</span><span class="line">  294 </span><span class="kwa">               end
</span><span class="line">  295 </span><span class="kwa">            val</span> _ <span class="sym">=</span> Stack.push <span class="sym">(</span>stack1<span class="sym">,</span> start<span class="sym">)
</span><span class="line">  296 </span><span class="sym"></span>            <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">  297 </span><span class="sym"></span>               <span class="kwa">if</span> anchorStart
<span class="line">  298 </span>                  <span class="kwa">then List</span>.foreach <span class="sym">(</span>anchorStarts<span class="sym">,</span> <span class="kwa">fn</span> s <span class="sym">=&gt;
</span><span class="line">  299 </span><span class="sym"></span>                                     Stack.push <span class="sym">(</span>stack1<span class="sym">,</span> s<span class="sym">))
</span><span class="line">  300 </span><span class="sym"></span>               <span class="kwa">else</span> <span class="sym">()
</span><span class="line">  301 </span><span class="sym"></span>         <span class="kwa">in
</span><span class="line">  302 </span><span class="kwa"></span>            loop <span class="sym">(</span>stack1<span class="sym">,</span> stack2<span class="sym">,</span> startPos<span class="sym">,</span> NONE<span class="sym">)
</span><span class="line">  303 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">  304 </span><span class="kwa">
</span><span class="line">  305 </span><span class="kwa"></span>      <span class="com">(* This conversion from a regular expression to an NFA is based on
</span><span class="line">  306 </span><span class="com">       * Section 3.9 (pages 134 -- 140) of Compilers: Principles, Techniques,
</span><span class="line">  307 </span><span class="com">       * and Tools by Aho, Sethi, and Ullman.
</span><span class="line">  308 </span><span class="com">       *
</span><span class="line">  309 </span><span class="com">       * It creates one NFA state for each CharSet (called a &quot;position&quot;) that is
</span><span class="line">  310 </span><span class="com">       * in the regexp.  There is also one extra state for the start state.
</span><span class="line">  311 </span><span class="com">       * It adds edges as in rules 1 and 2 (page 138) for the followpos function.
</span><span class="line">  312 </span><span class="com">       *)</span>
<span class="line">  313 </span>      <span class="kwa">fun</span> fromRegexp <span class="sym">(</span>r<span class="sym">:</span> Regexp.t<span class="sym">):</span> t <span class="sym">=
</span><span class="line">  314 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">  315 </span><span class="kwa">            fun</span> loop <span class="sym">(</span>r<span class="sym">,</span> ac<span class="sym">) =
</span><span class="line">  316 </span><span class="sym"></span>               <span class="kwa">let open</span> Regexp
<span class="line">  317 </span>               <span class="kwa">in case</span> r <span class="kwa">of
</span><span class="line">  318 </span><span class="kwa"></span>                  AnchorStart <span class="sym">=&gt;</span> ac <span class="sym">+</span> <span class="num">1
</span><span class="line">  319 </span><span class="num"></span>                <span class="sym">|</span> CharSet _ <span class="sym">=&gt;</span> ac <span class="sym">+</span> <span class="num">1
</span><span class="line">  320 </span><span class="num"></span>                <span class="sym">|</span> Or rs <span class="sym">=&gt;</span> <span class="kwa">List</span>.fold <span class="sym">(</span>rs<span class="sym">,</span> ac<span class="sym">,</span> loop<span class="sym">)
</span><span class="line">  321 </span><span class="sym">                |</span> Seq rs <span class="sym">=&gt;</span> <span class="kwa">List</span>.fold <span class="sym">(</span>rs<span class="sym">,</span> ac<span class="sym">,</span> loop<span class="sym">)
</span><span class="line">  322 </span><span class="sym">                |</span> Star r <span class="sym">=&gt;</span> loop <span class="sym">(</span>r<span class="sym">,</span> ac<span class="sym">)
</span><span class="line">  323 </span><span class="sym"></span>               <span class="kwa">end
</span><span class="line">  324 </span><span class="kwa">            val</span> numPos <span class="sym">=</span> loop <span class="sym">(</span>r<span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span><span class="line">  325 </span><span class="sym"></span>            <span class="kwa">val</span> numStates <span class="sym">=</span> numPos <span class="sym">+</span> <span class="num">1
</span><span class="line">  326 </span><span class="num"></span>            <span class="kwa">val</span> start <span class="sym">=</span> numPos
<span class="line">  327 </span>            <span class="kwa">val</span> posCounter <span class="sym">=</span> ref ~<span class="num">1
</span><span class="line">  328 </span><span class="num"></span>            <span class="kwa">val</span> follow <span class="sym">=</span> Array2.new <span class="sym">(</span>numStates<span class="sym">,</span> numStates<span class="sym">,</span> <span class="kwa">false</span><span class="sym">)
</span><span class="line">  329 </span><span class="sym"></span>            <span class="kwa">val</span> posChars <span class="sym">=</span> Array2.tabulate <span class="sym">(</span>numPos<span class="sym">,</span> numChars<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> <span class="kwa">false</span><span class="sym">)
</span><span class="line">  330 </span><span class="sym"></span>            <span class="kwa">local
</span><span class="line">  331 </span><span class="kwa">               datatype</span> t <span class="sym">=</span> T <span class="kwa">of</span> <span class="kwb">bool</span> vector <span class="com">(* of length numPos *)</span>
<span class="line">  332 </span>            <span class="kwa">in
</span><span class="line">  333 </span><span class="kwa">               fun</span> contains <span class="sym">(</span>T v<span class="sym">,</span> s<span class="sym">) =</span> <span class="kwa">Vector</span>.sub <span class="sym">(</span>v<span class="sym">,</span> s<span class="sym">)
</span><span class="line">  334 </span><span class="sym"></span>               <span class="kwa">val</span> empty<span class="sym">:</span> t <span class="sym">=</span> T <span class="sym">(</span><span class="kwa">Vector</span>.new <span class="sym">(</span>numPos<span class="sym">,</span> <span class="kwa">false</span><span class="sym">))
</span><span class="line">  335 </span><span class="sym"></span>               <span class="kwa">fun</span> union <span class="sym">(</span>T v<span class="sym">,</span> T v'<span class="sym">):</span> t <span class="sym">=
</span><span class="line">  336 </span><span class="sym"></span>                  T <span class="sym">(</span><span class="kwa">Vector</span>.tabulate <span class="sym">(</span>numPos<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;
</span><span class="line">  337 </span><span class="sym"></span>                                      <span class="kwa">Vector</span>.sub <span class="sym">(</span>v<span class="sym">,</span> i<span class="sym">)
</span><span class="line">  338 </span><span class="sym"></span>                                      <span class="kwa">orelse Vector</span>.sub <span class="sym">(</span>v'<span class="sym">,</span> i<span class="sym">)))
</span><span class="line">  339 </span><span class="sym"></span>               <span class="kwa">fun</span> singleton <span class="sym">(</span>i<span class="sym">:</span> <span class="kwb">int</span><span class="sym">):</span> t <span class="sym">=
</span><span class="line">  340 </span><span class="sym"></span>                  T <span class="sym">(</span><span class="kwa">Vector</span>.tabulate <span class="sym">(</span>numPos<span class="sym">,</span> <span class="kwa">fn</span> j <span class="sym">=&gt;</span> i <span class="sym">=</span> j<span class="sym">))
</span><span class="line">  341 </span><span class="sym"></span>               <span class="kwa">fun</span> foreach <span class="sym">(</span>T v<span class="sym">,</span> f<span class="sym">) =
</span><span class="line">  342 </span><span class="sym"></span>                  <span class="kwa">Vector</span>.foreachi <span class="sym">(</span>v<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">(</span>i<span class="sym">,</span> b<span class="sym">) =&gt;</span> <span class="kwa">if</span> b <span class="kwa">then</span> f i <span class="kwa">else</span> <span class="sym">())
</span><span class="line">  343 </span><span class="sym"></span>            <span class="kwa">end
</span><span class="line">  344 </span><span class="kwa">            val</span> anchorStarts <span class="sym">=</span> ref <span class="sym">[]
</span><span class="line">  345 </span><span class="sym"></span>            <span class="com">(* The following loop fills in follow and posChars. *)</span>
<span class="line">  346 </span>            <span class="kwa">fun</span> loop r <span class="sym">=
</span><span class="line">  347 </span><span class="sym"></span>               <span class="kwa">case</span> r <span class="kwa">of
</span><span class="line">  348 </span><span class="kwa"></span>                  Regexp.AnchorStart <span class="sym">=&gt;
</span><span class="line">  349 </span><span class="sym"></span>                     <span class="kwa">let
</span><span class="line">  350 </span><span class="kwa">                        val</span> i <span class="sym">= ++</span> posCounter
<span class="line">  351 </span>                        <span class="kwa">val</span> _ <span class="sym">=</span> <span class="kwa">List</span>.push <span class="sym">(</span>anchorStarts<span class="sym">,</span> i<span class="sym">)
</span><span class="line">  352 </span><span class="sym"></span>                        <span class="kwa">val</span> first <span class="sym">=</span> singleton i
<span class="line">  353 </span>                     <span class="kwa">in
</span><span class="line">  354 </span><span class="kwa"></span>                        <span class="sym">{</span>first <span class="sym">=</span> first<span class="sym">,
</span><span class="line">  355 </span><span class="sym"></span>                         last <span class="sym">=</span> first<span class="sym">,
</span><span class="line">  356 </span><span class="sym"></span>                         nullable <span class="sym">=</span> <span class="kwa">false</span><span class="sym">}
</span><span class="line">  357 </span><span class="sym"></span>                     <span class="kwa">end
</span><span class="line">  358 </span><span class="kwa"></span>                <span class="sym">|</span> Regexp.CharSet f <span class="sym">=&gt;
</span><span class="line">  359 </span><span class="sym"></span>                     <span class="kwa">let
</span><span class="line">  360 </span><span class="kwa">                        val</span> i <span class="sym">= ++</span> posCounter
<span class="line">  361 </span>                        <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">  362 </span><span class="sym"></span>                           <span class="kwa">Int</span>.for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> numChars<span class="sym">,</span> <span class="kwa">fn</span> c <span class="sym">=&gt;
</span><span class="line">  363 </span><span class="sym"></span>                                    <span class="kwa">if</span> f <span class="sym">(</span><span class="kwa">Char</span>.chr c<span class="sym">)
</span><span class="line">  364 </span><span class="sym"></span>                                       <span class="kwa">then</span> Array2.update <span class="sym">(</span>posChars<span class="sym">,</span> i<span class="sym">,</span> c<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)
</span><span class="line">  365 </span><span class="sym"></span>                                    <span class="kwa">else</span> <span class="sym">())
</span><span class="line">  366 </span><span class="sym"></span>                        <span class="kwa">val</span> first <span class="sym">=</span> singleton i
<span class="line">  367 </span>                     <span class="kwa">in</span> <span class="sym">{</span>first <span class="sym">=</span> first<span class="sym">,
</span><span class="line">  368 </span><span class="sym"></span>                         last <span class="sym">=</span> first<span class="sym">,
</span><span class="line">  369 </span><span class="sym"></span>                         nullable <span class="sym">=</span> <span class="kwa">false</span><span class="sym">}
</span><span class="line">  370 </span><span class="sym"></span>                     <span class="kwa">end
</span><span class="line">  371 </span><span class="kwa"></span>                <span class="sym">|</span> Regexp.Or rs <span class="sym">=&gt;
</span><span class="line">  372 </span><span class="sym"></span>                     <span class="kwa">List</span>.fold
<span class="line">  373 </span>                     <span class="sym">(</span>rs<span class="sym">, {</span>first <span class="sym">=</span> empty<span class="sym">,
</span><span class="line">  374 </span><span class="sym"></span>                           last <span class="sym">=</span> empty<span class="sym">,
</span><span class="line">  375 </span><span class="sym"></span>                           nullable <span class="sym">=</span> <span class="kwa">false</span><span class="sym">},
</span><span class="line">  376 </span><span class="sym"></span>                      <span class="kwa">fn</span> <span class="sym">(</span>r<span class="sym">, {</span>first <span class="sym">=</span> f<span class="sym">,</span> last <span class="sym">=</span> l<span class="sym">,</span> nullable <span class="sym">=</span> n<span class="sym">}) =&gt;
</span><span class="line">  377 </span><span class="sym"></span>                      <span class="kwa">let
</span><span class="line">  378 </span><span class="kwa">                         val</span> <span class="sym">{</span>first <span class="sym">=</span> f'<span class="sym">,</span> last <span class="sym">=</span> l'<span class="sym">,</span> nullable <span class="sym">=</span> n'<span class="sym">} =
</span><span class="line">  379 </span><span class="sym"></span>                            loop r
<span class="line">  380 </span>                      <span class="kwa">in
</span><span class="line">  381 </span><span class="kwa"></span>                         <span class="sym">{</span>first <span class="sym">=</span> union <span class="sym">(</span>f<span class="sym">,</span> f'<span class="sym">),
</span><span class="line">  382 </span><span class="sym"></span>                          last <span class="sym">=</span> union <span class="sym">(</span>l<span class="sym">,</span> l'<span class="sym">),
</span><span class="line">  383 </span><span class="sym"></span>                          nullable <span class="sym">=</span> n <span class="kwa">orelse</span> n'<span class="sym">}
</span><span class="line">  384 </span><span class="sym"></span>                      <span class="kwa">end</span><span class="sym">)
</span><span class="line">  385 </span><span class="sym">                |</span> Regexp.Seq rs <span class="sym">=&gt;
</span><span class="line">  386 </span><span class="sym"></span>                     <span class="kwa">List</span>.fold
<span class="line">  387 </span>                     <span class="sym">(</span>rs<span class="sym">, {</span>first <span class="sym">=</span> empty<span class="sym">,
</span><span class="line">  388 </span><span class="sym"></span>                           last <span class="sym">=</span> empty<span class="sym">,
</span><span class="line">  389 </span><span class="sym"></span>                           nullable <span class="sym">=</span> <span class="kwa">true</span><span class="sym">},
</span><span class="line">  390 </span><span class="sym"></span>                      <span class="kwa">fn</span> <span class="sym">(</span>r<span class="sym">, {</span>first <span class="sym">=</span> f<span class="sym">,</span> last <span class="sym">=</span> l<span class="sym">,</span> nullable <span class="sym">=</span> n<span class="sym">}) =&gt;
</span><span class="line">  391 </span><span class="sym"></span>                      <span class="kwa">let
</span><span class="line">  392 </span><span class="kwa">                         val</span> <span class="sym">{</span>first <span class="sym">=</span> f'<span class="sym">,</span> last <span class="sym">=</span> l'<span class="sym">,</span> nullable <span class="sym">=</span> n'<span class="sym">} =
</span><span class="line">  393 </span><span class="sym"></span>                            loop r
<span class="line">  394 </span>                         <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">  395 </span><span class="sym"></span>                            foreach
<span class="line">  396 </span>                            <span class="sym">(</span>l<span class="sym">,</span> <span class="kwa">fn</span> s <span class="sym">=&gt;
</span><span class="line">  397 </span><span class="sym"></span>                             foreach
<span class="line">  398 </span>                             <span class="sym">(</span>f'<span class="sym">,</span> <span class="kwa">fn</span> s' <span class="sym">=&gt;</span> Array2.update <span class="sym">(</span>follow<span class="sym">,</span> s<span class="sym">,</span> s'<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)))
</span><span class="line">  399 </span><span class="sym"></span>                      <span class="kwa">in
</span><span class="line">  400 </span><span class="kwa"></span>                         <span class="sym">{</span>first <span class="sym">=</span> <span class="kwa">if</span> n <span class="kwa">then</span> union <span class="sym">(</span>f<span class="sym">,</span> f'<span class="sym">)</span> <span class="kwa">else</span> f<span class="sym">,
</span><span class="line">  401 </span><span class="sym"></span>                          last <span class="sym">=</span> <span class="kwa">if</span> n' <span class="kwa">then</span> union <span class="sym">(</span>l<span class="sym">,</span> l'<span class="sym">)</span> <span class="kwa">else</span> l'<span class="sym">,
</span><span class="line">  402 </span><span class="sym"></span>                          nullable <span class="sym">=</span> n <span class="kwa">andalso</span> n'<span class="sym">}
</span><span class="line">  403 </span><span class="sym"></span>                      <span class="kwa">end</span><span class="sym">)
</span><span class="line">  404 </span><span class="sym">                |</span> Regexp.Star r <span class="sym">=&gt;
</span><span class="line">  405 </span><span class="sym"></span>                     <span class="kwa">let
</span><span class="line">  406 </span><span class="kwa">                        val</span> <span class="sym">{</span>first <span class="sym">=</span> f<span class="sym">,</span> last <span class="sym">=</span> l<span class="sym">,</span> nullable <span class="sym">=</span> n<span class="sym">} =</span> loop r
<span class="line">  407 </span>                        <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">  408 </span><span class="sym"></span>                           foreach
<span class="line">  409 </span>                           <span class="sym">(</span>l<span class="sym">,</span> <span class="kwa">fn</span> s <span class="sym">=&gt;
</span><span class="line">  410 </span><span class="sym"></span>                            foreach
<span class="line">  411 </span>                            <span class="sym">(</span>f<span class="sym">,</span> <span class="kwa">fn</span> s' <span class="sym">=&gt;</span> Array2.update <span class="sym">(</span>follow<span class="sym">,</span> s<span class="sym">,</span> s'<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)))
</span><span class="line">  412 </span><span class="sym"></span>                     <span class="kwa">in
</span><span class="line">  413 </span><span class="kwa"></span>                        <span class="sym">{</span>first <span class="sym">=</span> f<span class="sym">,</span> last <span class="sym">=</span> l<span class="sym">,</span> nullable <span class="sym">=</span> <span class="kwa">true</span><span class="sym">}
</span><span class="line">  414 </span><span class="sym"></span>                     <span class="kwa">end
</span><span class="line">  415 </span><span class="kwa">            val</span> <span class="sym">{</span>first<span class="sym">,</span> last<span class="sym">,</span> nullable<span class="sym">} =</span> loop r
<span class="line">  416 </span>            <span class="com">(* Any anchor starts in first should be anchor starts.
</span><span class="line">  417 </span><span class="com">             * This also reverses anchorStarts so they are in order.
</span><span class="line">  418 </span><span class="com">             *)</span>
<span class="line">  419 </span>            <span class="kwa">val</span> anchorStarts <span class="sym">=
</span><span class="line">  420 </span><span class="sym"></span>               <span class="kwa">List</span>.fold <span class="sym">(!</span>anchorStarts<span class="sym">, [],</span> <span class="kwa">fn</span> <span class="sym">(</span>s<span class="sym">,</span> ac<span class="sym">) =&gt;
</span><span class="line">  421 </span><span class="sym"></span>                          <span class="kwa">if</span> contains <span class="sym">(</span>first<span class="sym">,</span> s<span class="sym">)</span> <span class="kwa">then</span> s <span class="sym">::</span> ac <span class="kwa">else</span> ac<span class="sym">)
</span><span class="line">  422 </span><span class="sym"></span>            <span class="com">(* The positions in first are all reachable from the start state. *)</span>
<span class="line">  423 </span>            <span class="kwa">val</span> _ <span class="sym">=</span> foreach <span class="sym">(</span>first<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;
</span><span class="line">  424 </span><span class="sym"></span>                             Array2.update <span class="sym">(</span>follow<span class="sym">,</span> start<span class="sym">,</span> i<span class="sym">,</span> <span class="kwa">true</span><span class="sym">))
</span><span class="line">  425 </span><span class="sym"></span>            <span class="com">(* The positions in last are all final states. *)</span>
<span class="line">  426 </span>            <span class="kwa">val</span> final <span class="sym">=</span> Array.array <span class="sym">(</span>numStates<span class="sym">,</span> <span class="kwa">false</span><span class="sym">)
</span><span class="line">  427 </span><span class="sym"></span>            <span class="kwa">val</span> _ <span class="sym">=</span> foreach <span class="sym">(</span>last<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span> Array.update <span class="sym">(</span>final<span class="sym">,</span> i<span class="sym">,</span> <span class="kwa">true</span><span class="sym">))
</span><span class="line">  428 </span><span class="sym"></span>            <span class="com">(* The start state is final if the whole regexp is nullable. *)</span>
<span class="line">  429 </span>            <span class="kwa">val</span> _ <span class="sym">=</span> <span class="kwa">if</span> nullable <span class="kwa">then</span> Array.update <span class="sym">(</span>final<span class="sym">,</span> start<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)</span> <span class="kwa">else</span> <span class="sym">()
</span><span class="line">  430 </span><span class="sym"></span>            <span class="com">(* Now c1ompute the transition table. *)</span>
<span class="line">  431 </span>            <span class="kwa">val</span> a <span class="sym">=</span> Array.new <span class="sym">(</span>numStates<span class="sym">,</span> <span class="kwa">false</span><span class="sym">)
</span><span class="line">  432 </span><span class="sym"></span>            <span class="kwa">val</span> next <span class="sym">=
</span><span class="line">  433 </span><span class="sym"></span>               Array2.tabulate
<span class="line">  434 </span>               <span class="sym">(</span>numStates<span class="sym">,</span> numChars<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">(</span>i<span class="sym">,</span> c<span class="sym">) =&gt;
</span><span class="line">  435 </span><span class="sym"></span>                <span class="kwa">let
</span><span class="line">  436 </span><span class="kwa">                   val</span> _ <span class="sym">=
</span><span class="line">  437 </span><span class="sym"></span>                      <span class="kwa">Int</span>.for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> numStates<span class="sym">,</span> <span class="kwa">fn</span> j <span class="sym">=&gt;</span> Array.update <span class="sym">(</span>a<span class="sym">,</span> j<span class="sym">,</span> <span class="kwa">false</span><span class="sym">))
</span><span class="line">  438 </span><span class="sym"></span>                   <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">  439 </span><span class="sym"></span>                      <span class="kwa">Int</span>.for
<span class="line">  440 </span>                      <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> numPos<span class="sym">,</span> <span class="kwa">fn</span> j <span class="sym">=&gt;
</span><span class="line">  441 </span><span class="sym"></span>                       <span class="kwa">if</span> Array2.sub <span class="sym">(</span>follow<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">)
</span><span class="line">  442 </span><span class="sym"></span>                          <span class="kwa">andalso</span> Array2.sub <span class="sym">(</span>posChars<span class="sym">,</span> j<span class="sym">,</span> c<span class="sym">)
</span><span class="line">  443 </span><span class="sym"></span>                          <span class="kwa">then</span> Array.update <span class="sym">(</span>a<span class="sym">,</span> j<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)
</span><span class="line">  444 </span><span class="sym"></span>                       <span class="kwa">else</span> <span class="sym">())
</span><span class="line">  445 </span><span class="sym"></span>                <span class="kwa">in</span> Array.indices a
<span class="line">  446 </span>                <span class="kwa">end</span><span class="sym">)
</span><span class="line">  447 </span><span class="sym"></span>         <span class="kwa">in
</span><span class="line">  448 </span><span class="kwa"></span>            T <span class="sym">{</span>anchorStarts <span class="sym">=</span> anchorStarts<span class="sym">,
</span><span class="line">  449 </span><span class="sym"></span>               final <span class="sym">=</span> final<span class="sym">,
</span><span class="line">  450 </span><span class="sym"></span>               next <span class="sym">=</span> next<span class="sym">,
</span><span class="line">  451 </span><span class="sym"></span>               seen <span class="sym">=</span> Array.new <span class="sym">(</span>numStates<span class="sym">,</span> <span class="kwa">false</span><span class="sym">),
</span><span class="line">  452 </span><span class="sym"></span>               stack1 <span class="sym">=</span> Stack.new <span class="sym">(</span>numStates<span class="sym">,</span> ~<span class="num">1</span><span class="sym">),
</span><span class="line">  453 </span><span class="sym"></span>               stack2 <span class="sym">=</span> Stack.new <span class="sym">(</span>numStates<span class="sym">,</span> ~<span class="num">1</span><span class="sym">),
</span><span class="line">  454 </span><span class="sym"></span>               start <span class="sym">=</span> start<span class="sym">}
</span><span class="line">  455 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">  456 </span><span class="kwa">
</span><span class="line">  457 </span><span class="kwa">   end
</span><span class="line">  458 </span><span class="kwa">
</span><span class="line">  459 </span><span class="kwa">structure</span> DFA<span class="sym">:
</span><span class="line">  460 </span><span class="sym"></span>   <span class="kwa">sig
</span><span class="line">  461 </span><span class="kwa">      type</span> t
<span class="line">  462 </span>
<span class="line">  463 </span>      <span class="kwa">val</span> fromNFA<span class="sym">:</span> NFA.t <span class="sym">-&gt;</span> t
<span class="line">  464 </span>      <span class="kwa">val</span> match<span class="sym">: {</span>dfa<span class="sym">:</span> t<span class="sym">,
</span><span class="line">  465 </span><span class="sym"></span>                  <span class="kwb">string</span><span class="sym">:</span> <span class="kwb">string</span><span class="sym">,
</span><span class="line">  466 </span><span class="sym"></span>                  startPos<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,
</span><span class="line">  467 </span><span class="sym"></span>                  anchorStart<span class="sym">:</span> <span class="kwb">bool</span><span class="sym">} -&gt;</span> <span class="kwb">int</span> option
<span class="line">  468 </span>      <span class="kwa">val</span> minimize<span class="sym">:</span> t <span class="sym">-&gt;</span> t
<span class="line">  469 </span>   <span class="kwa">end</span> <span class="sym">=
</span><span class="line">  470 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">  471 </span><span class="kwa"></span>      <span class="com">(* The states in a DFA are indexed from 0 to n-1, where n is the number
</span><span class="line">  472 </span><span class="com">       * of states.
</span><span class="line">  473 </span><span class="com">       *)</span>
<span class="line">  474 </span>      <span class="kwa">type</span> state <span class="sym">=</span> <span class="kwb">int
</span><span class="line">  475 </span><span class="kwb">
</span><span class="line">  476 </span><span class="kwb"></span>      <span class="com">(* State i is final iff Array.sub (final, i).
</span><span class="line">  477 </span><span class="com">       * The outgoing state from state i on input char c is
</span><span class="line">  478 </span><span class="com">       * Array2.sub (next, i, Char.ord c).
</span><span class="line">  479 </span><span class="com">       *)</span>
<span class="line">  480 </span>      <span class="kwa">datatype</span> t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>anchorStart<span class="sym">:</span> state<span class="sym">,
</span><span class="line">  481 </span><span class="sym"></span>                         dead<span class="sym">:</span> <span class="kwb">bool</span> array<span class="sym">,
</span><span class="line">  482 </span><span class="sym"></span>                         final<span class="sym">:</span> <span class="kwb">bool</span> array<span class="sym">,
</span><span class="line">  483 </span><span class="sym"></span>                         next<span class="sym">:</span> state Array2.t<span class="sym">,
</span><span class="line">  484 </span><span class="sym"></span>                         start<span class="sym">:</span> state<span class="sym">}
</span><span class="line">  485 </span><span class="sym">
</span><span class="line">  486 </span><span class="sym"></span>      <span class="kwa">fun</span> numStates <span class="sym">(</span>T <span class="sym">{</span>next<span class="sym">,</span> ...<span class="sym">}):</span> <span class="kwb">int</span> <span class="sym">=</span> Array2.nRows next
<span class="line">  487 </span>
<span class="line">  488 </span>
<span class="line">  489 </span>      <span class="kwa">fun</span> match <span class="sym">{</span>dfa <span class="kwa">as</span> T <span class="sym">{</span>anchorStart <span class="sym">=</span> ancSt<span class="sym">,</span> dead<span class="sym">,</span> final<span class="sym">,</span> start<span class="sym">,</span> next<span class="sym">},
</span><span class="line">  490 </span><span class="sym"></span>                 <span class="kwb">string</span> <span class="kwa">as</span> s<span class="sym">,
</span><span class="line">  491 </span><span class="sym"></span>                 startPos<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,
</span><span class="line">  492 </span><span class="sym"></span>                 anchorStart<span class="sym">:</span> <span class="kwb">bool</span><span class="sym">}:</span> <span class="kwb">int</span> option <span class="sym">=
</span><span class="line">  493 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">  494 </span><span class="kwa">            val</span> n <span class="sym">=</span> <span class="kwa">String</span>.size s
<span class="line">  495 </span>            <span class="kwa">fun</span> loop <span class="sym">(</span>i<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> state<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> last<span class="sym">:</span> <span class="kwb">int</span> option<span class="sym">):</span> <span class="kwb">int</span> option <span class="sym">=
</span><span class="line">  496 </span><span class="sym"></span>               <span class="kwa">let
</span><span class="line">  497 </span><span class="kwa">                  val</span> last <span class="sym">=
</span><span class="line">  498 </span><span class="sym"></span>                     <span class="kwa">if</span> Array.sub <span class="sym">(</span>final<span class="sym">,</span> state<span class="sym">)
</span><span class="line">  499 </span><span class="sym"></span>                        <span class="kwa">then</span> SOME i
<span class="line">  500 </span>                     <span class="kwa">else</span> last
<span class="line">  501 </span>               <span class="kwa">in
</span><span class="line">  502 </span><span class="kwa">                  if</span> Array.sub <span class="sym">(</span>dead<span class="sym">,</span> state<span class="sym">)</span> <span class="kwa">orelse</span> i <span class="sym">=</span> n
<span class="line">  503 </span>                     <span class="kwa">then</span> last
<span class="line">  504 </span>                  <span class="kwa">else</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,
</span><span class="line">  505 </span><span class="sym"></span>                             Array2.sub <span class="sym">(</span>next<span class="sym">,</span> state<span class="sym">,
</span><span class="line">  506 </span><span class="sym"></span>                                         <span class="kwa">Char</span>.toInt <span class="sym">(</span><span class="kwa">String</span>.sub <span class="sym">(</span>s<span class="sym">,</span> i<span class="sym">))),
</span><span class="line">  507 </span><span class="sym"></span>                             last<span class="sym">)
</span><span class="line">  508 </span><span class="sym"></span>               <span class="kwa">end
</span><span class="line">  509 </span><span class="kwa">         in</span> loop <span class="sym">(</span>startPos<span class="sym">,
</span><span class="line">  510 </span><span class="sym"></span>                  <span class="kwa">if</span> anchorStart <span class="kwa">then</span> ancSt <span class="kwa">else</span> start<span class="sym">,
</span><span class="line">  511 </span><span class="sym"></span>                     NONE<span class="sym">)
</span><span class="line">  512 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">  513 </span><span class="kwa">
</span><span class="line">  514 </span><span class="kwa">      fun</span> dead <span class="sym">(</span>numStates<span class="sym">,</span> final<span class="sym">,</span> next<span class="sym">) =
</span><span class="line">  515 </span><span class="sym"></span>         Array.tabulate
<span class="line">  516 </span>         <span class="sym">(</span>numStates<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;
</span><span class="line">  517 </span><span class="sym"></span>          not <span class="sym">(</span>Array.sub <span class="sym">(</span>final<span class="sym">,</span> i<span class="sym">))
</span><span class="line">  518 </span><span class="sym"></span>          <span class="kwa">andalso Int</span>.forall <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> numChars<span class="sym">,</span> <span class="kwa">fn</span> c <span class="sym">=&gt;
</span><span class="line">  519 </span><span class="sym"></span>                              i <span class="sym">=</span> Array2.sub <span class="sym">(</span>next<span class="sym">,</span> i<span class="sym">,</span> c<span class="sym">)))
</span><span class="line">  520 </span><span class="sym">
</span><span class="line">  521 </span><span class="sym"></span>      <span class="com">(* This DFA minimization algorithm is based on algorithm 3.6 (page 142)
</span><span class="line">  522 </span><span class="com">       * of Compilers: Principles, Techniques, and Tools by Aho, Sethi, and
</span><span class="line">  523 </span><span class="com">       * Ullman.
</span><span class="line">  524 </span><span class="com">       *
</span><span class="line">  525 </span><span class="com">       * It maintains an array, r, that stores for each state s the
</span><span class="line">  526 </span><span class="com">       * representative of the class to which s belongs.
</span><span class="line">  527 </span><span class="com">       * It repeatedly refines an equivalence relation, represented by a list
</span><span class="line">  528 </span><span class="com">       * of classes, where each class is a list of states (i.e. ints).
</span><span class="line">  529 </span><span class="com">       *)</span>
<span class="line">  530 </span>      <span class="kwa">fun</span> minimize <span class="sym">(</span>dfa <span class="kwa">as</span> T <span class="sym">{</span>anchorStart<span class="sym">,</span> final<span class="sym">,</span> start<span class="sym">,</span> next<span class="sym">,</span> ...<span class="sym">}):</span> t <span class="sym">=
</span><span class="line">  531 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">  532 </span><span class="kwa">            val</span> numStates <span class="sym">=</span> numStates dfa
<span class="line">  533 </span>            <span class="kwa">type</span> class <span class="sym">=</span> <span class="kwb">int</span> list
<span class="line">  534 </span>            <span class="kwa">type</span> classes <span class="sym">=</span> class list
<span class="line">  535 </span>            <span class="kwa">val</span> repCounter <span class="sym">=</span> ref ~<span class="num">1
</span><span class="line">  536 </span><span class="num"></span>            <span class="kwa">val</span> change <span class="sym">=</span> ref <span class="kwa">false
</span><span class="line">  537 </span><span class="kwa">            fun</span> newRep <span class="sym">() = (</span>change <span class="sym">:=</span> <span class="kwa">true</span><span class="sym">; ++</span> repCounter<span class="sym">)
</span><span class="line">  538 </span><span class="sym"></span>            <span class="kwa">val</span> finRep <span class="sym">=</span> newRep <span class="sym">()
</span><span class="line">  539 </span><span class="sym"></span>            <span class="kwa">val</span> nonfinRep <span class="sym">=</span> newRep <span class="sym">()
</span><span class="line">  540 </span><span class="sym"></span>            <span class="kwa">val</span> r <span class="sym">=</span> Array.tabulate <span class="sym">(</span>numStates<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;
</span><span class="line">  541 </span><span class="sym"></span>                                    <span class="kwa">if</span> Array.sub <span class="sym">(</span>final<span class="sym">,</span> i<span class="sym">)
</span><span class="line">  542 </span><span class="sym"></span>                                       <span class="kwa">then</span> finRep
<span class="line">  543 </span>                                    <span class="kwa">else</span> nonfinRep<span class="sym">)
</span><span class="line">  544 </span><span class="sym"></span>            <span class="kwa">fun</span> rep s <span class="sym">=</span> Array.sub <span class="sym">(</span>r<span class="sym">,</span> s<span class="sym">)
</span><span class="line">  545 </span><span class="sym"></span>            <span class="kwa">fun</span> trans <span class="sym">(</span>s<span class="sym">,</span> c<span class="sym">) =</span> rep <span class="sym">(</span>Array2.sub <span class="sym">(</span>next<span class="sym">,</span> s<span class="sym">,</span> c<span class="sym">))
</span><span class="line">  546 </span><span class="sym"></span>            <span class="kwa">fun</span> refine <span class="sym">(</span>class<span class="sym">:</span> class<span class="sym">,</span> ac<span class="sym">:</span> classes<span class="sym">):</span> classes <span class="sym">=
</span><span class="line">  547 </span><span class="sym"></span>               <span class="kwa">let
</span><span class="line">  548 </span><span class="kwa">                  val</span> r <span class="sym">=
</span><span class="line">  549 </span><span class="sym"></span>                     <span class="kwa">List</span>.fold
<span class="line">  550 </span>                     <span class="sym">(</span>class<span class="sym">, [],</span> <span class="kwa">fn</span> <span class="sym">(</span>state<span class="sym">,</span> classes<span class="sym">) =&gt;
</span><span class="line">  551 </span><span class="sym"></span>                      <span class="kwa">let
</span><span class="line">  552 </span><span class="kwa">                         fun</span> loop <span class="sym">(</span>classes<span class="sym">,</span> ac<span class="sym">) =
</span><span class="line">  553 </span><span class="sym"></span>                            <span class="kwa">case</span> classes <span class="kwa">of
</span><span class="line">  554 </span><span class="kwa"></span>                               <span class="sym">[] =&gt;
</span><span class="line">  555 </span><span class="sym">                                  (</span><span class="kwa">case</span> ac <span class="kwa">of
</span><span class="line">  556 </span><span class="kwa"></span>                                      <span class="sym">[] =&gt; [{</span>class <span class="sym">= [</span>state<span class="sym">],
</span><span class="line">  557 </span><span class="sym"></span>                                              old <span class="sym">=</span> state<span class="sym">}]
</span><span class="line">  558 </span><span class="sym">                                    |</span> _ <span class="sym">=&gt;
</span><span class="line">  559 </span><span class="sym"></span>                                         <span class="kwa">let
</span><span class="line">  560 </span><span class="kwa">                                            val</span> s <span class="sym">=</span> newRep <span class="sym">()
</span><span class="line">  561 </span><span class="sym"></span>                                            <span class="kwa">val</span> _ <span class="sym">=</span> Array.update <span class="sym">(</span>r<span class="sym">,</span> state<span class="sym">,</span> s<span class="sym">)
</span><span class="line">  562 </span><span class="sym"></span>                                         <span class="kwa">in</span> <span class="sym">{</span>class <span class="sym">= [</span>state<span class="sym">],
</span><span class="line">  563 </span><span class="sym"></span>                                             old <span class="sym">=</span> state<span class="sym">} ::</span> ac
<span class="line">  564 </span>                                         <span class="kwa">end</span><span class="sym">)
</span><span class="line">  565 </span><span class="sym">                             | (</span>z <span class="kwa">as</span> <span class="sym">{</span>class<span class="sym">,</span> old<span class="sym">}) ::</span> classes <span class="sym">=&gt;
</span><span class="line">  566 </span><span class="sym"></span>                                  <span class="kwa">if Int</span>.forall
<span class="line">  567 </span>                                     <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> numChars<span class="sym">,</span> <span class="kwa">fn</span> c <span class="sym">=&gt;
</span><span class="line">  568 </span><span class="sym"></span>                                      trans <span class="sym">(</span>old<span class="sym">,</span> c<span class="sym">) =</span> trans <span class="sym">(</span>state<span class="sym">,</span> c<span class="sym">))
</span><span class="line">  569 </span><span class="sym"></span>                                     <span class="kwa">then
</span><span class="line">  570 </span><span class="kwa"></span>                                        <span class="sym">(</span>Array.update <span class="sym">(</span>r<span class="sym">,</span> state<span class="sym">,</span> rep old<span class="sym">)
</span><span class="line">  571 </span><span class="sym">                                         ; {</span>class <span class="sym">=</span> state <span class="sym">::</span> class<span class="sym">,
</span><span class="line">  572 </span><span class="sym"></span>                                            old <span class="sym">=</span> old<span class="sym">} :: (</span><span class="kwa">List</span>.appendRev
<span class="line">  573 </span>                                                           <span class="sym">(</span>classes<span class="sym">,</span> ac<span class="sym">)))
</span><span class="line">  574 </span><span class="sym"></span>                                  <span class="kwa">else</span> loop <span class="sym">(</span>classes<span class="sym">,</span> z <span class="sym">::</span> ac<span class="sym">)
</span><span class="line">  575 </span><span class="sym"></span>                      <span class="kwa">in</span> loop <span class="sym">(</span>classes<span class="sym">, [])
</span><span class="line">  576 </span><span class="sym"></span>                      <span class="kwa">end</span><span class="sym">)
</span><span class="line">  577 </span><span class="sym"></span>               <span class="kwa">in List</span>.fold <span class="sym">(</span>r<span class="sym">,</span> ac<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">({</span>class<span class="sym">,</span> ...<span class="sym">},</span> ac<span class="sym">) =&gt;
</span><span class="line">  578 </span><span class="sym"></span>                             <span class="kwa">case</span> class <span class="kwa">of
</span><span class="line">  579 </span><span class="kwa"></span>                                <span class="sym">[</span>_<span class="sym">] =&gt;</span> ac
<span class="line">  580 </span>                              <span class="sym">|</span> _ <span class="sym">=&gt;</span> class <span class="sym">::</span> ac<span class="sym">)
</span><span class="line">  581 </span><span class="sym"></span>               <span class="kwa">end
</span><span class="line">  582 </span><span class="kwa">            fun</span> refineAll <span class="sym">(</span>classes<span class="sym">:</span> classes<span class="sym">):</span> unit <span class="sym">=
</span><span class="line">  583 </span><span class="sym"></span>               <span class="kwa">case</span> classes <span class="kwa">of
</span><span class="line">  584 </span><span class="kwa"></span>                  <span class="sym">[] =&gt; ()
</span><span class="line">  585 </span><span class="sym">                |</span> _ <span class="sym">=&gt;
</span><span class="line">  586 </span><span class="sym"></span>                     <span class="kwa">let
</span><span class="line">  587 </span><span class="kwa">                        val</span> _ <span class="sym">=</span> change <span class="sym">:=</span> <span class="kwa">false
</span><span class="line">  588 </span><span class="kwa">                        val</span> classes <span class="sym">=
</span><span class="line">  589 </span><span class="sym"></span>                           <span class="kwa">List</span>.fold <span class="sym">(</span>classes<span class="sym">, [],</span> <span class="kwa">fn</span> <span class="sym">(</span>class<span class="sym">,</span> ac<span class="sym">) =&gt;
</span><span class="line">  590 </span><span class="sym"></span>                                      <span class="kwa">case</span> class <span class="kwa">of
</span><span class="line">  591 </span><span class="kwa"></span>                                         <span class="sym">[</span>_<span class="sym">] =&gt;</span> ac
<span class="line">  592 </span>                                       <span class="sym">|</span> _ <span class="sym">=&gt;</span> refine <span class="sym">(</span>class<span class="sym">,</span> ac<span class="sym">))
</span><span class="line">  593 </span><span class="sym"></span>                     <span class="kwa">in if</span> <span class="sym">!</span>change
<span class="line">  594 </span>                           <span class="kwa">then</span> refineAll classes
<span class="line">  595 </span>                        <span class="kwa">else</span> <span class="sym">()
</span><span class="line">  596 </span><span class="sym"></span>                     <span class="kwa">end
</span><span class="line">  597 </span><span class="kwa">            val</span> <span class="sym">(</span>fin<span class="sym">,</span> nonfin<span class="sym">) =
</span><span class="line">  598 </span><span class="sym"></span>               <span class="kwa">Int</span>.fold <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> numStates<span class="sym">, ([], []),</span> <span class="kwa">fn</span> <span class="sym">(</span>i<span class="sym">, (</span>f<span class="sym">,</span> n<span class="sym">)) =&gt;
</span><span class="line">  599 </span><span class="sym"></span>                         <span class="kwa">if</span> Array.sub <span class="sym">(</span>final<span class="sym">,</span> i<span class="sym">)
</span><span class="line">  600 </span><span class="sym"></span>                            <span class="kwa">then</span> <span class="sym">(</span>i <span class="sym">::</span> f<span class="sym">,</span> n<span class="sym">)
</span><span class="line">  601 </span><span class="sym"></span>                         <span class="kwa">else</span> <span class="sym">(</span>f<span class="sym">,</span> i <span class="sym">::</span> n<span class="sym">))
</span><span class="line">  602 </span><span class="sym"></span>            <span class="kwa">val</span> _ <span class="sym">=</span> refineAll <span class="sym">[</span>fin<span class="sym">,</span> nonfin<span class="sym">]
</span><span class="line">  603 </span><span class="sym"></span>            <span class="kwa">val</span> numStates' <span class="sym">=</span> <span class="num">1</span> <span class="sym">+ !</span>repCounter
<span class="line">  604 </span>            <span class="com">(* Compute reachable states. *)</span>
<span class="line">  605 </span>            <span class="kwa">val</span> reached <span class="sym">=</span> Array.new <span class="sym">(</span>numStates'<span class="sym">,</span> <span class="kwa">false</span><span class="sym">)
</span><span class="line">  606 </span><span class="sym"></span>            <span class="kwa">fun</span> visit <span class="sym">(</span>s<span class="sym">:</span> <span class="kwb">int</span> <span class="com">(* an old state *)</span><span class="sym">):</span> unit <span class="sym">=
</span><span class="line">  607 </span><span class="sym"></span>               <span class="kwa">let
</span><span class="line">  608 </span><span class="kwa">                  val</span> s' <span class="sym">=</span> rep s
<span class="line">  609 </span>               <span class="kwa">in
</span><span class="line">  610 </span><span class="kwa">                  if</span> Array.sub <span class="sym">(</span>reached<span class="sym">,</span> s'<span class="sym">)
</span><span class="line">  611 </span><span class="sym"></span>                     <span class="kwa">then</span> <span class="sym">()
</span><span class="line">  612 </span><span class="sym"></span>                  <span class="kwa">else</span> <span class="sym">(</span>Array.update <span class="sym">(</span>reached<span class="sym">,</span> s'<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)
</span><span class="line">  613 </span><span class="sym">                        ;</span> <span class="kwa">Int</span>.for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> numChars<span class="sym">,</span> <span class="kwa">fn</span> c <span class="sym">=&gt;
</span><span class="line">  614 </span><span class="sym"></span>                                   visit <span class="sym">(</span>Array2.sub <span class="sym">(</span>next<span class="sym">,</span> s<span class="sym">,</span> c<span class="sym">))))
</span><span class="line">  615 </span><span class="sym"></span>               <span class="kwa">end
</span><span class="line">  616 </span><span class="kwa">            val</span> _ <span class="sym">=</span> visit start
<span class="line">  617 </span>            <span class="kwa">val</span> _ <span class="sym">=</span> visit anchorStart
<span class="line">  618 </span>            <span class="com">(* Compute new representatives. *)</span>
<span class="line">  619 </span>            <span class="kwa">val</span> c <span class="sym">=</span> ref ~<span class="num">1
</span><span class="line">  620 </span><span class="num"></span>            <span class="kwa">val</span> newR <span class="sym">=</span> Array.tabulate <span class="sym">(</span>numStates'<span class="sym">,</span> <span class="kwa">fn</span> s <span class="sym">=&gt;
</span><span class="line">  621 </span><span class="sym"></span>                                       <span class="kwa">if</span> Array.sub <span class="sym">(</span>reached<span class="sym">,</span> s<span class="sym">)
</span><span class="line">  622 </span><span class="sym"></span>                                          <span class="kwa">then</span> <span class="sym">++</span> c
<span class="line">  623 </span>                                       <span class="kwa">else</span> ~<span class="num">1</span><span class="sym">)
</span><span class="line">  624 </span><span class="sym"></span>            <span class="kwa">val</span> numStates' <span class="sym">=</span> <span class="num">1</span> <span class="sym">+ !</span>c
<span class="line">  625 </span>            <span class="kwa">val</span> _ <span class="sym">=</span> Array.modify <span class="sym">(</span>r<span class="sym">,</span> <span class="kwa">fn</span> s <span class="sym">=&gt;</span> Array.sub <span class="sym">(</span>newR<span class="sym">,</span> s<span class="sym">))
</span><span class="line">  626 </span><span class="sym"></span>            <span class="kwa">val</span> next' <span class="sym">=</span> Array2.new <span class="sym">(</span>numStates'<span class="sym">,</span> numChars<span class="sym">,</span> ~<span class="num">1</span><span class="sym">)
</span><span class="line">  627 </span><span class="sym"></span>            <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">  628 </span><span class="sym"></span>               Array2.foreachi
<span class="line">  629 </span>               <span class="sym">(</span>next<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">(</span>s<span class="sym">,</span> c<span class="sym">,</span> s'<span class="sym">) =&gt;
</span><span class="line">  630 </span><span class="sym"></span>                Array2.update <span class="sym">(</span>next'<span class="sym">,</span> rep s<span class="sym">,</span> c<span class="sym">,</span> rep s'<span class="sym">))
</span><span class="line">  631 </span><span class="sym"></span>            <span class="kwa">val</span> final' <span class="sym">=</span> Array.array <span class="sym">(</span>numStates'<span class="sym">,</span> <span class="kwa">false</span><span class="sym">)
</span><span class="line">  632 </span><span class="sym"></span>            <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">  633 </span><span class="sym"></span>               Array.foreachi
<span class="line">  634 </span>               <span class="sym">(</span>final<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">(</span>i<span class="sym">,</span> b<span class="sym">) =&gt;
</span><span class="line">  635 </span><span class="sym"></span>                <span class="kwa">if</span> b <span class="kwa">then</span> Array.update <span class="sym">(</span>final'<span class="sym">,</span> rep i<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)</span> <span class="kwa">else</span> <span class="sym">())
</span><span class="line">  636 </span><span class="sym"></span>         <span class="kwa">in</span> T <span class="sym">{</span>anchorStart <span class="sym">=</span> rep anchorStart<span class="sym">,
</span><span class="line">  637 </span><span class="sym"></span>               dead <span class="sym">=</span> dead <span class="sym">(</span>numStates'<span class="sym">,</span> final'<span class="sym">,</span> next'<span class="sym">),
</span><span class="line">  638 </span><span class="sym"></span>               final <span class="sym">=</span> final'<span class="sym">,
</span><span class="line">  639 </span><span class="sym"></span>               start <span class="sym">=</span> rep start<span class="sym">,
</span><span class="line">  640 </span><span class="sym"></span>               next <span class="sym">=</span> next'<span class="sym">}
</span><span class="line">  641 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">  642 </span><span class="kwa">
</span><span class="line">  643 </span><span class="kwa"></span>      <span class="com">(* This is the usual &quot;subset construction&quot;, as in algorithm 3.2 (page 118)
</span><span class="line">  644 </span><span class="com">       * of Compilers: Principles, Techniques, and Tools by Aho, Sethi, and
</span><span class="line">  645 </span><span class="com">       * Ullman.
</span><span class="line">  646 </span><span class="com">       *
</span><span class="line">  647 </span><span class="com">       * It associates each (reachable) set of states in the nfa with a single
</span><span class="line">  648 </span><span class="com">       * state in the DFA.
</span><span class="line">  649 </span><span class="com">       *)</span>
<span class="line">  650 </span>      <span class="kwa">fun</span> fromNFA <span class="sym">(</span>nfa <span class="kwa">as</span> NFA.T <span class="sym">{</span>anchorStarts<span class="sym">,</span> final<span class="sym">,</span> start<span class="sym">,</span> next<span class="sym">,</span> ...<span class="sym">}) =
</span><span class="line">  651 </span><span class="sym"></span>         <span class="kwa">let
</span><span class="line">  652 </span><span class="kwa"></span>            <span class="com">(* Sets of states are represented as sorted vectors. *)</span>
<span class="line">  653 </span>            <span class="kwa">type</span> states <span class="sym">=</span> state vector
<span class="line">  654 </span>            <span class="kwa">val</span> counter <span class="sym">=</span> ref ~<span class="num">1
</span><span class="line">  655 </span><span class="num"></span>            <span class="kwa">type</span> work <span class="sym">= {</span>states<span class="sym">:</span> states<span class="sym">,
</span><span class="line">  656 </span><span class="sym"></span>                         state<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,
</span><span class="line">  657 </span><span class="sym"></span>                         out<span class="sym">:</span> <span class="kwb">int</span> vector option ref<span class="sym">}
</span><span class="line">  658 </span><span class="sym"></span>            <span class="kwa">val</span> cache<span class="sym">:</span> work list ref <span class="sym">=</span> ref <span class="sym">[]
</span><span class="line">  659 </span><span class="sym"></span>            <span class="kwa">val</span> todo<span class="sym">:</span> work list ref <span class="sym">=</span> ref <span class="sym">[]
</span><span class="line">  660 </span><span class="sym"></span>            <span class="kwa">fun</span> statesToState <span class="sym">(</span>ss<span class="sym">:</span> states<span class="sym">):</span> <span class="kwb">int</span> <span class="sym">=
</span><span class="line">  661 </span><span class="sym"></span>               <span class="kwa">case List</span>.peek <span class="sym">(!</span>cache<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">{</span>states<span class="sym">,</span> ...<span class="sym">} =&gt;</span> ss <span class="sym">=</span> states<span class="sym">)</span> <span class="kwa">of
</span><span class="line">  662 </span><span class="kwa"></span>                  NONE <span class="sym">=&gt;
</span><span class="line">  663 </span><span class="sym"></span>                     <span class="kwa">let
</span><span class="line">  664 </span><span class="kwa">                        val</span> state <span class="sym">= ++</span> counter
<span class="line">  665 </span>                        <span class="kwa">val</span> work <span class="sym">= {</span>out <span class="sym">=</span> ref NONE<span class="sym">,
</span><span class="line">  666 </span><span class="sym"></span>                                    state <span class="sym">=</span> state<span class="sym">,
</span><span class="line">  667 </span><span class="sym"></span>                                    states <span class="sym">=</span> ss<span class="sym">}
</span><span class="line">  668 </span><span class="sym"></span>                        <span class="kwa">val</span> _ <span class="sym">=</span> <span class="kwa">List</span>.push <span class="sym">(</span>cache<span class="sym">,</span> work<span class="sym">)
</span><span class="line">  669 </span><span class="sym"></span>                        <span class="kwa">val</span> _ <span class="sym">=</span> <span class="kwa">List</span>.push <span class="sym">(</span>todo<span class="sym">,</span> work<span class="sym">)
</span><span class="line">  670 </span><span class="sym"></span>                     <span class="kwa">in
</span><span class="line">  671 </span><span class="kwa"></span>                        state
<span class="line">  672 </span>                     <span class="kwa">end
</span><span class="line">  673 </span><span class="kwa"></span>                <span class="sym">|</span> SOME <span class="sym">{</span>state<span class="sym">,</span> ...<span class="sym">} =&gt;</span> state
<span class="line">  674 </span>            <span class="kwa">local
</span><span class="line">  675 </span><span class="kwa">               val</span> seen <span class="sym">=</span> Array.array <span class="sym">(</span>NFA.numStates nfa<span class="sym">,</span> <span class="kwa">false</span><span class="sym">)
</span><span class="line">  676 </span><span class="sym"></span>            <span class="kwa">in
</span><span class="line">  677 </span><span class="kwa">               fun</span> loop <span class="sym">() =
</span><span class="line">  678 </span><span class="sym"></span>                  <span class="kwa">case</span> <span class="sym">!</span>todo <span class="kwa">of
</span><span class="line">  679 </span><span class="kwa"></span>                     <span class="sym">[] =&gt; ()
</span><span class="line">  680 </span><span class="sym">                   | {</span>states<span class="sym">,</span> out<span class="sym">,</span> ...<span class="sym">} ::</span> rest <span class="sym">=&gt;
</span><span class="line">  681 </span><span class="sym">                        (</span>todo <span class="sym">:=</span> rest
<span class="line">  682 </span>                         <span class="sym">;</span> out <span class="sym">:= (</span>SOME
<span class="line">  683 </span>                                   <span class="sym">(</span><span class="kwa">Vector</span>.tabulate
<span class="line">  684 </span>                                    <span class="sym">(</span>numChars<span class="sym">,</span> <span class="kwa">fn</span> c <span class="sym">=&gt;
</span><span class="line">  685 </span><span class="sym"></span>                                     <span class="kwa">let
</span><span class="line">  686 </span><span class="kwa">                                        val</span> _ <span class="sym">=
</span><span class="line">  687 </span><span class="sym"></span>                                           Array.modify <span class="sym">(</span>seen<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> <span class="kwa">false</span><span class="sym">)
</span><span class="line">  688 </span><span class="sym"></span>                                        <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">  689 </span><span class="sym"></span>                                           <span class="kwa">Vector</span>.foreach
<span class="line">  690 </span>                                           <span class="sym">(</span>states<span class="sym">,</span> <span class="kwa">fn</span> s <span class="sym">=&gt;
</span><span class="line">  691 </span><span class="sym"></span>                                            <span class="kwa">Vector</span>.foreach
<span class="line">  692 </span>                                            <span class="sym">(</span>Array2.sub <span class="sym">(</span>next<span class="sym">,</span> s<span class="sym">,</span> c<span class="sym">),</span> <span class="kwa">fn</span> s' <span class="sym">=&gt;
</span><span class="line">  693 </span><span class="sym"></span>                                             Array.update <span class="sym">(</span>seen<span class="sym">,</span> s'<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)))
</span><span class="line">  694 </span><span class="sym"></span>                                     <span class="kwa">in</span> statesToState <span class="sym">(</span>Array.indices seen<span class="sym">)
</span><span class="line">  695 </span><span class="sym"></span>                                     <span class="kwa">end</span><span class="sym">)))
</span><span class="line">  696 </span><span class="sym">                         ;</span> loop <span class="sym">())
</span><span class="line">  697 </span><span class="sym"></span>            <span class="kwa">end
</span><span class="line">  698 </span><span class="kwa"></span>            <span class="com">(* This call to statesToState initializes the worklist. *)</span>
<span class="line">  699 </span>            <span class="kwa">val</span> start' <span class="sym">=</span> statesToState <span class="sym">(</span><span class="kwa">Vector</span>.new1 start<span class="sym">)
</span><span class="line">  700 </span><span class="sym"></span>            <span class="kwa">val</span> anchorStart' <span class="sym">=
</span><span class="line">  701 </span><span class="sym"></span>               statesToState
<span class="line">  702 </span>               <span class="sym">(</span><span class="kwa">Vector</span>.fromList <span class="sym">(</span><span class="kwa">List</span>.insert <span class="sym">(</span>anchorStarts<span class="sym">,</span> start<span class="sym">,</span> <span class="kwa">op</span> <span class="sym">&lt;=)))
</span><span class="line">  703 </span><span class="sym"></span>            <span class="kwa">val</span> _ <span class="sym">=</span> loop <span class="sym">()
</span><span class="line">  704 </span><span class="sym"></span>            <span class="kwa">val</span> numStates <span class="sym">=</span> <span class="num">1</span> <span class="sym">+ !</span>counter
<span class="line">  705 </span>            <span class="kwa">val</span> next' <span class="sym">=</span> Array2.new <span class="sym">(</span>numStates<span class="sym">,</span> numChars<span class="sym">,</span> ~<span class="num">1</span><span class="sym">)
</span><span class="line">  706 </span><span class="sym"></span>            <span class="kwa">val</span> final' <span class="sym">=</span> Array.new <span class="sym">(</span>numStates<span class="sym">,</span> <span class="kwa">false</span><span class="sym">)
</span><span class="line">  707 </span><span class="sym"></span>            <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">  708 </span><span class="sym"></span>               <span class="kwa">List</span>.foreach
<span class="line">  709 </span>               <span class="sym">(!</span>cache<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">{</span>states<span class="sym">,</span> state <span class="sym">=</span> i<span class="sym">,</span> out<span class="sym">,</span> ...<span class="sym">}:</span> work <span class="sym">=&gt;
</span><span class="line">  710 </span><span class="sym"></span>                <span class="kwa">let
</span><span class="line">  711 </span><span class="kwa">                   val</span> _ <span class="sym">=
</span><span class="line">  712 </span><span class="sym"></span>                      <span class="kwa">Vector</span>.foreachi
<span class="line">  713 </span>                      <span class="sym">(</span>valOf <span class="sym">(!</span> out<span class="sym">),</span> <span class="kwa">fn</span> <span class="sym">(</span>c<span class="sym">,</span> j<span class="sym">) =&gt;
</span><span class="line">  714 </span><span class="sym"></span>                       Array2.update <span class="sym">(</span>next'<span class="sym">,</span> i<span class="sym">,</span> c<span class="sym">,</span> j<span class="sym">))
</span><span class="line">  715 </span><span class="sym"></span>                   <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">  716 </span><span class="sym"></span>                      <span class="kwa">if Vector</span>.exists <span class="sym">(</span>states<span class="sym">,</span> <span class="kwa">fn</span> s <span class="sym">=&gt;</span> Array.sub <span class="sym">(</span>final<span class="sym">,</span> s<span class="sym">))
</span><span class="line">  717 </span><span class="sym"></span>                         <span class="kwa">then</span> Array.update <span class="sym">(</span>final'<span class="sym">,</span> i<span class="sym">,</span> <span class="kwa">true</span><span class="sym">)
</span><span class="line">  718 </span><span class="sym"></span>                      <span class="kwa">else</span> <span class="sym">()
</span><span class="line">  719 </span><span class="sym"></span>                <span class="kwa">in</span> <span class="sym">()
</span><span class="line">  720 </span><span class="sym"></span>                <span class="kwa">end</span><span class="sym">)
</span><span class="line">  721 </span><span class="sym"></span>            <span class="kwa">val</span> dead' <span class="sym">=</span> dead <span class="sym">(</span>numStates<span class="sym">,</span> final'<span class="sym">,</span> next'<span class="sym">)
</span><span class="line">  722 </span><span class="sym"></span>         <span class="kwa">in</span> T <span class="sym">{</span>anchorStart <span class="sym">=</span> anchorStart'<span class="sym">,
</span><span class="line">  723 </span><span class="sym"></span>               dead <span class="sym">=</span> dead'<span class="sym">,
</span><span class="line">  724 </span><span class="sym"></span>               final <span class="sym">=</span> final'<span class="sym">,
</span><span class="line">  725 </span><span class="sym"></span>               start <span class="sym">=</span> start'<span class="sym">,
</span><span class="line">  726 </span><span class="sym"></span>               next <span class="sym">=</span> next'<span class="sym">}
</span><span class="line">  727 </span><span class="sym"></span>         <span class="kwa">end
</span><span class="line">  728 </span><span class="kwa">
</span><span class="line">  729 </span><span class="kwa">   end
</span><span class="line">  730 </span><span class="kwa">
</span><span class="line">  731 </span><span class="kwa">structure</span> Regexp<span class="sym">:
</span><span class="line">  732 </span><span class="sym"></span>   <span class="kwa">sig
</span><span class="line">  733 </span><span class="kwa">      structure</span> Compiled<span class="sym">:
</span><span class="line">  734 </span><span class="sym"></span>         <span class="kwa">sig
</span><span class="line">  735 </span><span class="kwa">            type</span> t
<span class="line">  736 </span>
<span class="line">  737 </span>            <span class="com">(* find returns the longest of the leftmost matches. *)</span>
<span class="line">  738 </span>            <span class="kwa">val</span> find<span class="sym">:</span> t <span class="sym">*</span> <span class="kwb">string</span> <span class="sym">-&gt; {</span>start<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> length<span class="sym">:</span> <span class="kwb">int</span><span class="sym">}</span> option
<span class="line">  739 </span>         <span class="kwa">end
</span><span class="line">  740 </span><span class="kwa">
</span><span class="line">  741 </span><span class="kwa">      type</span> t
<span class="line">  742 </span>
<span class="line">  743 </span>      <span class="kwa">val</span> anchorStart<span class="sym">:</span> t
<span class="line">  744 </span>      <span class="kwa">val</span> any<span class="sym">:</span> t
<span class="line">  745 </span>      <span class="kwa">val</span> char<span class="sym">:</span> char <span class="sym">-&gt;</span> t
<span class="line">  746 </span>      <span class="kwa">val</span> compileDFA<span class="sym">:</span> t <span class="sym">-&gt;</span> Compiled.t
<span class="line">  747 </span>      <span class="kwa">val</span> compileNFA<span class="sym">:</span> t <span class="sym">-&gt;</span> Compiled.t
<span class="line">  748 </span>      <span class="kwa">val</span> digit<span class="sym">:</span> t
<span class="line">  749 </span>      <span class="kwa">val</span> nonDigit<span class="sym">:</span> t
<span class="line">  750 </span>      <span class="kwa">val</span> notOneOf<span class="sym">:</span> <span class="kwb">string</span> <span class="sym">-&gt;</span> t
<span class="line">  751 </span>      <span class="kwa">val</span> oneOf<span class="sym">:</span> <span class="kwb">string</span> <span class="sym">-&gt;</span> t
<span class="line">  752 </span>      <span class="kwa">val</span> or<span class="sym">:</span> t list <span class="sym">-&gt;</span> t
<span class="line">  753 </span>      <span class="kwa">val</span> seq<span class="sym">:</span> t list <span class="sym">-&gt;</span> t
<span class="line">  754 </span>      <span class="kwa">val</span> star<span class="sym">:</span> t <span class="sym">-&gt;</span> t
<span class="line">  755 </span>   <span class="kwa">end</span> <span class="sym">=
</span><span class="line">  756 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">  757 </span><span class="kwa">      open</span> Regexp
<span class="line">  758 </span>
<span class="line">  759 </span>      <span class="kwa">val</span> anchorStart <span class="sym">=</span> AnchorStart
<span class="line">  760 </span>      <span class="kwa">val</span> isChar <span class="sym">=</span> CharSet
<span class="line">  761 </span>      <span class="kwa">fun</span> isNotChar f <span class="sym">=</span> isChar <span class="sym">(</span>not <span class="kwa">o</span> f<span class="sym">)
</span><span class="line">  762 </span><span class="sym"></span>      <span class="kwa">fun</span> char c <span class="sym">=</span> isChar <span class="sym">(</span><span class="kwa">fn</span> c' <span class="sym">=&gt;</span> c <span class="sym">=</span> c'<span class="sym">)
</span><span class="line">  763 </span><span class="sym"></span>      <span class="kwa">val</span> or <span class="sym">=</span> Or
<span class="line">  764 </span>      <span class="kwa">val</span> seq <span class="sym">=</span> Seq
<span class="line">  765 </span>      <span class="kwa">val</span> star <span class="sym">=</span> Star
<span class="line">  766 </span>
<span class="line">  767 </span>      <span class="kwa">val</span> any <span class="sym">=</span> isChar <span class="sym">(</span><span class="kwa">fn</span> _ <span class="sym">=&gt;</span> <span class="kwa">true</span><span class="sym">)
</span><span class="line">  768 </span><span class="sym">
</span><span class="line">  769 </span><span class="sym"></span>      <span class="kwa">fun</span> oneOf s <span class="sym">=</span> isChar <span class="sym">(</span><span class="kwa">fn</span> c <span class="sym">=&gt;</span> <span class="kwa">String</span>.contains <span class="sym">(</span>s<span class="sym">,</span> c<span class="sym">))
</span><span class="line">  770 </span><span class="sym"></span>      <span class="kwa">fun</span> notOneOf s <span class="sym">=</span> isNotChar <span class="sym">(</span><span class="kwa">fn</span> c <span class="sym">=&gt;</span> <span class="kwa">String</span>.contains <span class="sym">(</span>s<span class="sym">,</span> c<span class="sym">))
</span><span class="line">  771 </span><span class="sym"></span>      <span class="kwa">val</span> digs <span class="sym">=</span> <span class="str">&quot;0123456789&quot;</span>
<span class="line">  772 </span>      <span class="kwa">val</span> digit <span class="sym">=</span> oneOf digs
<span class="line">  773 </span>      <span class="kwa">val</span> nonDigit <span class="sym">=</span> notOneOf digs
<span class="line">  774 </span>
<span class="line">  775 </span>      <span class="kwa">val</span> empty <span class="sym">=</span> Or <span class="sym">[]</span> <span class="com">(* Empty Language. *)</span>
<span class="line">  776 </span>      <span class="kwa">val</span> emptyString <span class="sym">=</span> Seq <span class="sym">[]</span> <span class="com">(* Language containing the empty string only. *)</span>
<span class="line">  777 </span>
<span class="line">  778 </span>
<span class="line">  779 </span>      <span class="kwa">structure</span> Compiled <span class="sym">=
</span><span class="line">  780 </span><span class="sym"></span>         <span class="kwa">struct
</span><span class="line">  781 </span><span class="kwa">            datatype</span> t <span class="sym">=
</span><span class="line">  782 </span><span class="sym"></span>               DFA <span class="kwa">of</span> DFA.t
<span class="line">  783 </span>             <span class="sym">|</span> NFA <span class="kwa">of</span> NFA.t
<span class="line">  784 </span>
<span class="line">  785 </span>            <span class="kwa">fun</span> find <span class="sym">(</span>c<span class="sym">:</span> t<span class="sym">,</span> s<span class="sym">:</span> <span class="kwb">string</span><span class="sym">) =
</span><span class="line">  786 </span><span class="sym"></span>               <span class="kwa">let
</span><span class="line">  787 </span><span class="kwa">                  val</span> n <span class="sym">=</span> <span class="kwa">String</span>.size s
<span class="line">  788 </span>                  <span class="kwa">fun</span> loop <span class="sym">(</span>i<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> anchorStart<span class="sym">:</span> <span class="kwb">bool</span><span class="sym">) =
</span><span class="line">  789 </span><span class="sym"></span>                     <span class="kwa">if</span> i <span class="sym">=</span> n
<span class="line">  790 </span>                        <span class="kwa">then</span> NONE
<span class="line">  791 </span>                     <span class="kwa">else
</span><span class="line">  792 </span><span class="kwa">                        let
</span><span class="line">  793 </span><span class="kwa">                           val</span> res <span class="sym">=
</span><span class="line">  794 </span><span class="sym"></span>                              <span class="kwa">case</span> c <span class="kwa">of
</span><span class="line">  795 </span><span class="kwa"></span>                                 DFA dfa <span class="sym">=&gt;
</span><span class="line">  796 </span><span class="sym"></span>                                    DFA.match <span class="sym">{</span>dfa <span class="sym">=</span> dfa<span class="sym">,
</span><span class="line">  797 </span><span class="sym"></span>                                               <span class="kwb">string</span> <span class="sym">=</span> s<span class="sym">,
</span><span class="line">  798 </span><span class="sym"></span>                                               startPos <span class="sym">=</span> i<span class="sym">,
</span><span class="line">  799 </span><span class="sym"></span>                                               anchorStart <span class="sym">=</span> anchorStart<span class="sym">}
</span><span class="line">  800 </span><span class="sym">                               |</span> NFA nfa <span class="sym">=&gt;
</span><span class="line">  801 </span><span class="sym"></span>                                    NFA.match <span class="sym">{</span>nfa <span class="sym">=</span> nfa<span class="sym">,
</span><span class="line">  802 </span><span class="sym"></span>                                               <span class="kwb">string</span> <span class="sym">=</span> s<span class="sym">,
</span><span class="line">  803 </span><span class="sym"></span>                                               startPos <span class="sym">=</span> i<span class="sym">,
</span><span class="line">  804 </span><span class="sym"></span>                                               anchorStart <span class="sym">=</span> anchorStart<span class="sym">}
</span><span class="line">  805 </span><span class="sym"></span>                        <span class="kwa">in
</span><span class="line">  806 </span><span class="kwa">                           case</span> res <span class="kwa">of
</span><span class="line">  807 </span><span class="kwa"></span>                              NONE <span class="sym">=&gt;</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="kwa">false</span><span class="sym">)
</span><span class="line">  808 </span><span class="sym">                            |</span> SOME finish <span class="sym">=&gt;</span> SOME <span class="sym">{</span>start <span class="sym">=</span> i<span class="sym">,
</span><span class="line">  809 </span><span class="sym"></span>                                                   length <span class="sym">=</span> finish <span class="sym">-</span> i<span class="sym">}
</span><span class="line">  810 </span><span class="sym"></span>                        <span class="kwa">end
</span><span class="line">  811 </span><span class="kwa">               in</span> loop <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="kwa">true</span><span class="sym">)
</span><span class="line">  812 </span><span class="sym"></span>               <span class="kwa">end
</span><span class="line">  813 </span><span class="kwa">         end
</span><span class="line">  814 </span><span class="kwa">
</span><span class="line">  815 </span><span class="kwa">      fun</span> compileDFA r <span class="sym">=
</span><span class="line">  816 </span><span class="sym"></span>         Compiled.DFA <span class="sym">(</span>DFA.minimize <span class="sym">(</span>DFA.fromNFA <span class="sym">(</span>NFA.fromRegexp r<span class="sym">)))
</span><span class="line">  817 </span><span class="sym"></span>      <span class="kwa">fun</span> compileNFA r <span class="sym">=
</span><span class="line">  818 </span><span class="sym"></span>         Compiled.NFA <span class="sym">(</span>NFA.fromRegexp r<span class="sym">)
</span><span class="line">  819 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">  820 </span><span class="kwa">
</span><span class="line">  821 </span><span class="kwa">local
</span><span class="line">  822 </span><span class="kwa">   open</span> Regexp
<span class="line">  823 </span><span class="kwa">in
</span><span class="line">  824 </span><span class="kwa">   val</span> d <span class="sym">=</span> digit
<span class="line">  825 </span>   <span class="kwa">val</span> eol <span class="sym">=</span> char #<span class="str">&quot;#&quot;</span>
<span class="line">  826 </span>   <span class="kwa">val</span> space <span class="sym">=</span> oneOf <span class="str">&quot;</span> <span class="esc">\t</span><span class="str">&quot;</span>
<span class="line">  827 </span>   <span class="kwa">val</span> r <span class="sym">=
</span><span class="line">  828 </span><span class="sym"></span>      seq <span class="sym">[</span>or <span class="sym">[</span>anchorStart<span class="sym">,</span> notOneOf <span class="str">&quot;0123456789(&quot;</span><span class="sym">],
</span><span class="line">  829 </span><span class="sym"></span>           or <span class="sym">[</span>seq <span class="sym">[</span>char #<span class="str">&quot;(&quot;</span><span class="sym">,</span> d<span class="sym">,</span> d<span class="sym">,</span> d<span class="sym">,</span> char #<span class="str">&quot;)&quot;</span><span class="sym">],
</span><span class="line">  830 </span><span class="sym"></span>               seq <span class="sym">[</span>d<span class="sym">,</span> d<span class="sym">,</span> d<span class="sym">]],
</span><span class="line">  831 </span><span class="sym"></span>           char #<span class="str">&quot; &quot;</span><span class="sym">,
</span><span class="line">  832 </span><span class="sym"></span>           d<span class="sym">,</span> d<span class="sym">,</span> d<span class="sym">,
</span><span class="line">  833 </span><span class="sym"></span>           oneOf <span class="str">&quot; -&quot;</span><span class="sym">,
</span><span class="line">  834 </span><span class="sym"></span>           d<span class="sym">,</span> d<span class="sym">,</span> d<span class="sym">,</span> d<span class="sym">,
</span><span class="line">  835 </span><span class="sym"></span>           or <span class="sym">[</span>eol<span class="sym">,</span> nonDigit<span class="sym">]]
</span><span class="line">  836 </span><span class="sym"></span><span class="com">(*   val comp = Regexp.compileNFA r *)</span>
<span class="line">  837 </span>   <span class="kwa">val</span> comp <span class="sym">=</span> Regexp.compileDFA r
<span class="line">  838 </span><span class="kwa">end
</span><span class="line">  839 </span><span class="kwa">
</span><span class="line">  840 </span><span class="kwa">fun</span> incr <span class="sym">(</span>r<span class="sym">:</span> <span class="kwb">int</span> ref<span class="sym">) =</span> r <span class="sym">:= !</span>r <span class="sym">+</span> <span class="num">1
</span><span class="line">  841 </span><span class="num">
</span><span class="line">  842 </span><span class="num"></span><span class="kwa">val</span> ins <span class="sym">=</span> <span class="kwa">TextIO</span>.stdIn
<span class="line">  843 </span>
<span class="line">  844 </span>
<span class="line">  845 </span>
<span class="line">  846 </span><span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">)
</span><span class="line">  847 </span><span class="sym">
</span><span class="line">  848 </span><span class="sym"></span><span class="com">(* Based on regexmatch.ocaml. *)</span>
<span class="line">  849 </span>
<span class="line">  850 </span><span class="kwa">local
</span><span class="line">  851 </span><span class="kwa">   val</span> form <span class="sym">=</span> <span class="str">&quot;(...) ...-....&quot;</span>
<span class="line">  852 </span>   <span class="kwa">val</span> a <span class="sym">=</span> CharArray.tabulate <span class="sym">(</span><span class="kwa">String</span>.size form<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;
</span><span class="line">  853 </span><span class="sym"></span>                               <span class="kwa">String</span>.sub <span class="sym">(</span>form<span class="sym">,</span> i<span class="sym">))
</span><span class="line">  854 </span><span class="sym"></span><span class="kwa">in
</span><span class="line">  855 </span><span class="kwa">   fun</span> checkPhone <span class="sym">(</span>mustPrint<span class="sym">:</span> <span class="kwb">bool</span><span class="sym">,</span> cnt<span class="sym">:</span> <span class="kwb">int</span> ref<span class="sym">,</span> line<span class="sym">:</span> <span class="kwb">string</span><span class="sym">) =
</span><span class="line">  856 </span><span class="sym"></span>      <span class="kwa">case</span> Regexp.Compiled.find <span class="sym">(</span>comp<span class="sym">,</span> line<span class="sym">)</span> <span class="kwa">of
</span><span class="line">  857 </span><span class="kwa"></span>         NONE <span class="sym">=&gt; ()
</span><span class="line">  858 </span><span class="sym">       |</span> SOME <span class="sym">{</span>start <span class="sym">=</span> pos<span class="sym">,</span> ...<span class="sym">} =&gt;
</span><span class="line">  859 </span><span class="sym"></span>            <span class="kwa">let
</span><span class="line">  860 </span><span class="kwa">               fun</span> blit <span class="sym">(</span>src<span class="sym">,</span> dst<span class="sym">,</span> length<span class="sym">) =
</span><span class="line">  861 </span><span class="sym"></span>                  <span class="kwa">let
</span><span class="line">  862 </span><span class="kwa">                     val</span> stop <span class="sym">=</span> src <span class="sym">+</span> length
<span class="line">  863 </span>                     <span class="kwa">fun</span> loop <span class="sym">(</span>src<span class="sym">,</span> dst<span class="sym">) =
</span><span class="line">  864 </span><span class="sym"></span>                        <span class="kwa">if</span> src <span class="sym">=</span> stop
<span class="line">  865 </span>                           <span class="kwa">then</span> <span class="sym">()
</span><span class="line">  866 </span><span class="sym"></span>                        <span class="kwa">else</span> <span class="sym">(</span>CharArray.update <span class="sym">(</span>a<span class="sym">,</span> dst<span class="sym">,
</span><span class="line">  867 </span><span class="sym"></span>                                                <span class="kwa">String</span>.sub <span class="sym">(</span>line<span class="sym">,</span> src<span class="sym">))
</span><span class="line">  868 </span><span class="sym">                              ;</span> loop <span class="sym">(</span>src <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> dst <span class="sym">+</span> <span class="num">1</span><span class="sym">))
</span><span class="line">  869 </span><span class="sym"></span>                  <span class="kwa">in
</span><span class="line">  870 </span><span class="kwa"></span>                     loop <span class="sym">(</span>src<span class="sym">,</span> dst<span class="sym">)
</span><span class="line">  871 </span><span class="sym"></span>                  <span class="kwa">end
</span><span class="line">  872 </span><span class="kwa">               val</span> <span class="sym">(</span>o1<span class="sym">,</span> o2<span class="sym">,</span> o3<span class="sym">) =
</span><span class="line">  873 </span><span class="sym"></span>                  <span class="kwa">if</span> #<span class="str">&quot;(&quot;</span> <span class="sym">=</span> <span class="kwa">String</span>.sub <span class="sym">(</span>line<span class="sym">,</span> pos<span class="sym">)
</span><span class="line">  874 </span><span class="sym"></span>                     <span class="kwa">then</span> <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">6</span><span class="sym">,</span> <span class="num">10</span><span class="sym">)
</span><span class="line">  875 </span><span class="sym"></span>                  <span class="kwa">else if</span> #<span class="str">&quot;(&quot;</span> <span class="sym">=</span> <span class="kwa">String</span>.sub <span class="sym">(</span>line<span class="sym">,</span> pos <span class="sym">+</span> <span class="num">1</span><span class="sym">)
</span><span class="line">  876 </span><span class="sym"></span>                          <span class="kwa">then</span> <span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="num">7</span><span class="sym">,</span> <span class="num">11</span><span class="sym">)
</span><span class="line">  877 </span><span class="sym"></span>                       <span class="kwa">else if Char</span>.isDigit <span class="sym">(</span><span class="kwa">String</span>.sub <span class="sym">(</span>line<span class="sym">,</span> pos<span class="sym">))
</span><span class="line">  878 </span><span class="sym"></span>                               <span class="kwa">then</span> <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">4</span><span class="sym">,</span> <span class="num">8</span><span class="sym">)
</span><span class="line">  879 </span><span class="sym"></span>                            <span class="kwa">else</span> <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">5</span><span class="sym">,</span> <span class="num">9</span><span class="sym">)
</span><span class="line">  880 </span><span class="sym"></span>               <span class="kwa">val</span> _ <span class="sym">=</span> blit <span class="sym">(</span>pos <span class="sym">+</span> o1<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="num">3</span><span class="sym">)
</span><span class="line">  881 </span><span class="sym"></span>               <span class="kwa">val</span> _ <span class="sym">=</span> blit <span class="sym">(</span>pos <span class="sym">+</span> o2<span class="sym">,</span> <span class="num">6</span><span class="sym">,</span> <span class="num">3</span><span class="sym">)
</span><span class="line">  882 </span><span class="sym"></span>               <span class="kwa">val</span> _ <span class="sym">=</span> blit <span class="sym">(</span>pos <span class="sym">+</span> o3<span class="sym">,</span> <span class="num">10</span><span class="sym">,</span> <span class="num">4</span><span class="sym">)
</span><span class="line">  883 </span><span class="sym"></span>               <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">  884 </span><span class="sym"></span>                  <span class="kwa">if</span> mustPrint
<span class="line">  885 </span>                     <span class="kwa">then</span> printl <span class="sym">[</span><span class="kwa">Int</span>.toString <span class="sym">(!</span>cnt<span class="sym">),</span> <span class="str">&quot;: &quot;</span><span class="sym">,</span> CharArray.vector a<span class="sym">]
</span><span class="line">  886 </span><span class="sym"></span>                  <span class="kwa">else</span> <span class="sym">()
</span><span class="line">  887 </span><span class="sym"></span>               <span class="kwa">val</span> _ <span class="sym">=</span> incr cnt
<span class="line">  888 </span>            <span class="kwa">in
</span><span class="line">  889 </span><span class="kwa"></span>               <span class="sym">()
</span><span class="line">  890 </span><span class="sym"></span>            <span class="kwa">end
</span><span class="line">  891 </span><span class="kwa">end
</span><span class="line">  892 </span><span class="kwa">
</span><span class="line">  893 </span><span class="kwa">fun</span> doit <span class="sym">(</span>phones<span class="sym">,</span>mustPrint<span class="sym">:</span> <span class="kwb">bool</span><span class="sym">):</span> unit <span class="sym">=
</span><span class="line">  894 </span><span class="sym"></span>   <span class="kwa">let val</span> cnt <span class="sym">=</span> ref <span class="num">1
</span><span class="line">  895 </span><span class="num"></span>   <span class="kwa">in List</span>.foreach <span class="sym">(</span>phones<span class="sym">,</span> <span class="kwa">fn</span> line <span class="sym">=&gt;</span> checkPhone <span class="sym">(</span>mustPrint<span class="sym">,</span> cnt<span class="sym">,</span> line<span class="sym">))
</span><span class="line">  896 </span><span class="sym"></span>   <span class="kwa">end
</span><span class="line">  897 </span><span class="kwa">
</span><span class="line">  898 </span><span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0
</span><span class="line">  899 </span><span class="num">
</span><span class="line">  900 </span><span class="num"></span><span class="kwa">fun</span> main <span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =
</span><span class="line">  901 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">  902 </span><span class="kwa">      val</span> n <span class="sym">=</span> atoi <span class="sym">(</span>hd <span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]))
</span><span class="line">  903 </span><span class="sym"></span>      <span class="kwa">val</span> phones <span class="sym">=
</span><span class="line">  904 </span><span class="sym"></span>        <span class="kwa">let
</span><span class="line">  905 </span><span class="kwa">          fun</span> loop lines <span class="sym">=
</span><span class="line">  906 </span><span class="sym"></span>            <span class="kwa">case TextIO</span>.inputLine ins <span class="kwa">of
</span><span class="line">  907 </span><span class="kwa"></span>                NONE <span class="sym">=&gt;</span> rev lines
<span class="line">  908 </span>              <span class="sym">|</span> SOME<span class="sym">(</span>str<span class="sym">) =&gt;
</span><span class="line">  909 </span><span class="sym">                (</span><span class="kwa">case</span> str <span class="kwa">of
</span><span class="line">  910 </span><span class="kwa"></span>                     <span class="str">&quot;&quot;</span> <span class="sym">=&gt;</span> rev lines
<span class="line">  911 </span>                   <span class="sym">|</span> line <span class="sym">=&gt;</span> loop <span class="sym">(</span>line <span class="sym">::</span> lines<span class="sym">))
</span><span class="line">  912 </span><span class="sym"></span>        <span class="kwa">in</span> loop <span class="sym">[]
</span><span class="line">  913 </span><span class="sym"></span>        <span class="kwa">end
</span><span class="line">  914 </span><span class="kwa">      val</span> _ <span class="sym">=</span> <span class="kwa">Int</span>.for <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> doit <span class="sym">(</span>phones<span class="sym">,</span><span class="kwa">false</span><span class="sym">))
</span><span class="line">  915 </span><span class="sym"></span>      <span class="kwa">val</span> _ <span class="sym">=</span> doit <span class="sym">(</span>phones<span class="sym">,</span><span class="kwa">true</span><span class="sym">)
</span><span class="line">  916 </span><span class="sym"></span>   <span class="kwa">in</span> OS.Process.success
<span class="line">  917 </span>   <span class="kwa">end
</span><span class="line">  918 </span><span class="kwa">end
</span><span class="line">  919 </span><span class="kwa">val</span> _ <span class="sym">=</span> SMLofNJ.exportFn<span class="sym">(</span><span class="str">&quot;regexmatch&quot;</span><span class="sym">,</span> Test.main<span class="sym">);
</span><span class="line">  920 </span><span class="sym"></span>
