<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release mandelbrot2.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwa">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwa">char</span> bit_num <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> byte_acc <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>
  <span class="kwa">const</span> iter <span class="sym">=</span> <span class="num">50</span><span class="sym">;</span>
  <span class="kwa">const</span> lim <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> <span class="num">2.0</span><span class="sym">;</span>

  <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">%d %d&quot;</span><span class="sym">,</span>n<span class="sym">,</span>n<span class="sym">);</span>

  <span class="kwa">for</span><span class="sym">(</span><span class="kwa">auto</span> y<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> y<span class="sym">&lt;</span>n<span class="sym">;</span> y<span class="sym">++)</span>
  <span class="sym">{</span>
    <span class="kwa">for</span><span class="sym">(</span><span class="kwa">auto</span> x<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> x<span class="sym">&lt;</span>n<span class="sym">;</span> x<span class="sym">++)</span>
    <span class="sym">{</span>
       <span class="kwa">auto</span> Z <span class="sym">=</span> <span class="num">0</span> <span class="sym">+</span> <span class="num">0</span>i<span class="sym">;</span> <span class="kwa">auto</span> C <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span><span class="kwa">cast</span><span class="sym">(</span><span class="kwa">double</span><span class="sym">)</span>x<span class="sym">/</span>n <span class="sym">-</span> <span class="num">1.5</span> <span class="sym">+</span> <span class="num">2</span>i<span class="sym">*</span><span class="kwa">cast</span><span class="sym">(</span><span class="kwa">double</span><span class="sym">)</span>y<span class="sym">/</span>n <span class="sym">-</span> <span class="num">1</span>i<span class="sym">;</span>

       <span class="kwa">for</span><span class="sym">(</span><span class="kwa">auto</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> iter <span class="sym">&amp;&amp;</span> <span class="kwd">norm</span><span class="sym">(</span>Z<span class="sym">) &lt;=</span> lim<span class="sym">;</span> i<span class="sym">++)</span>
         Z <span class="sym">=</span> Z<span class="sym">*</span>Z <span class="sym">+</span> C<span class="sym">;</span>

       byte_acc <span class="sym">= (</span>byte_acc <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">) | ((</span><span class="kwd">norm</span><span class="sym">(</span>Z<span class="sym">) &gt;</span> lim<span class="sym">)</span> ? <span class="num">0x00</span><span class="sym">:</span><span class="num">0x01</span><span class="sym">);</span>

       bit_num<span class="sym">++;</span>
       <span class="kwa">if</span><span class="sym">(</span>bit_num <span class="sym">==</span> <span class="num">8</span><span class="sym">)</span>
       <span class="sym">{</span>
           <span class="kwd">putc</span><span class="sym">(</span>byte_acc<span class="sym">,</span>stdout<span class="sym">);</span>
           bit_num <span class="sym">=</span> byte_acc <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
       <span class="sym">}</span>
       <span class="kwa">else if</span><span class="sym">(</span>x <span class="sym">==</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
       <span class="sym">{</span>
           byte_acc  <span class="sym">&lt;&lt;= (</span><span class="num">8</span><span class="sym">-</span>n<span class="sym">%</span><span class="num">8</span><span class="sym">);</span>
           <span class="kwd">putc</span><span class="sym">(</span>byte_acc<span class="sym">,</span>stdout<span class="sym">);</span>
           bit_num <span class="sym">=</span> byte_acc <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
       <span class="sym">}</span>
    <span class="sym">}</span>
  <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">double</span> <span class="kwd">norm</span><span class="sym">(</span><span class="kwa">cdouble</span> C<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">return</span> C<span class="sym">.</span>re<span class="sym">*</span>C<span class="sym">.</span>re <span class="sym">+</span> C<span class="sym">.</span>im<span class="sym">*</span>C<span class="sym">.</span>im<span class="sym">;</span>
<span class="sym">}</span>
