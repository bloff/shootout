<span class="slc">% The Computer Language Benchmarks Game</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> System Application

<span class="kwa">define</span>
   <span class="kwa">fun</span> <span class="sym">{</span>RendezvousServer Done N<span class="sym">}</span>
      CreatureList
      CreaturePort <span class="sym">= {</span>Port<span class="sym">.</span>new CreatureList<span class="sym">}</span>
      OtherList
      OtherPort <span class="sym">= {</span>Port<span class="sym">.</span>new OtherList<span class="sym">}</span>
      CountDown <span class="sym">= {</span>NewCell N<span class="sym">}</span>

      <span class="kwa">proc</span> <span class="sym">{</span>Meetings C1<span class="sym">|</span>C2<span class="sym">|</span>C O1<span class="sym">|</span>O2<span class="sym">|</span>O<span class="sym">}</span>
         <span class="kwa">if</span> <span class="sym">&#64;</span>CountDown <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span>
            O1 <span class="sym">=</span> C2
            O2 <span class="sym">=</span> C1
            CountDown <span class="sym">:= &#64;</span>CountDown <span class="sym">-</span> <span class="num">1</span>
            <span class="sym">{</span>Meetings C O<span class="sym">}</span>
         <span class="kwa">else</span>
            Done <span class="sym">=</span> <span class="kwa">true</span>   <span class="slc">% exit without cleaning up</span>
         <span class="kwa">end</span>
      <span class="kwa">end</span>

      <span class="kwa">fun</span> <span class="sym">{</span>Notify Me<span class="sym">}</span>
         Other
      <span class="kwa">in</span>
         <span class="sym">{</span>Port<span class="sym">.</span>send CreaturePort Me<span class="sym">}</span>
         <span class="sym">{</span>Port<span class="sym">.</span>send OtherPort Other<span class="sym">}</span>
         Other
      <span class="kwa">end</span>

   <span class="kwa">in</span>
      <span class="kwa">thread</span> <span class="sym">{</span>Meetings CreatureList OtherList<span class="sym">}</span> <span class="kwa">end</span>
      rendezvous<span class="sym">(</span>notify<span class="sym">:</span> Notify<span class="sym">)</span>
   <span class="kwa">end</span>



   <span class="kwa">class</span> Creature
      <span class="kwa">attr</span> name colour selfMet<span class="sym">:</span><span class="num">0</span> creaturesMet<span class="sym">:</span><span class="num">0</span> rendezvous

      <span class="kwa">meth</span> init<span class="sym">(</span>Name Colour Rendezvous<span class="sym">)</span>
         name <span class="sym">:=</span> Name
         colour <span class="sym">:=</span> Colour
         rendezvous <span class="sym">:=</span> Rendezvous

         <span class="kwa">if</span> Name <span class="sym">\=</span> <span class="num">0</span> <span class="kwa">then</span>
            <span class="kwa">thread</span> <span class="sym">{</span><span class="kwa">self</span> meetOthers<span class="sym">}</span> <span class="kwa">end</span>
         <span class="kwa">end</span>
      <span class="kwa">end</span>

      <span class="kwa">meth</span> meetOthers<span class="sym">()</span>
         Name Colour
      <span class="kwa">in</span>
         Name <span class="sym">#</span> Colour <span class="sym">= {&#64;</span>rendezvous<span class="sym">.</span>notify <span class="sym">&#64;</span>name <span class="sym"># &#64;</span>colour<span class="sym">}</span>
         colour <span class="sym">:= {</span><span class="kwa">self</span> complementColour<span class="sym">(</span>Colour <span class="sym">$)}</span>
         <span class="kwa">if</span> Name <span class="sym">== &#64;</span>name <span class="kwa">then</span> selfMet <span class="sym">:= &#64;</span>selfMet <span class="sym">+</span> <span class="num">1</span> <span class="kwa">end</span>
         creaturesMet <span class="sym">:= &#64;</span>creaturesMet <span class="sym">+</span> <span class="num">1</span>
         <span class="sym">{</span><span class="kwa">self</span> meetOthers<span class="sym">}</span>
      <span class="kwa">end</span>

      <span class="kwa">meth</span> colour<span class="sym">($) &#64;</span>colour <span class="kwa">end</span>

      <span class="kwa">meth</span> selfMet<span class="sym">($) &#64;</span>selfMet <span class="kwa">end</span>

      <span class="kwa">meth</span> creaturesMet<span class="sym">($) &#64;</span>creaturesMet <span class="kwa">end</span>

      <span class="kwa">meth</span> complementColour<span class="sym">(</span>OtherColour <span class="sym">$)</span>
         <span class="kwa">if</span> <span class="sym">&#64;</span>colour <span class="sym">==</span> OtherColour <span class="kwa">then</span>
            OtherColour
         <span class="kwa">else</span>
            <span class="kwa">case</span> <span class="sym">&#64;</span>colour
            <span class="kwa">of</span> blue <span class="kwa">then if</span> OtherColour <span class="sym">==</span> red <span class="kwa">then</span> yellow <span class="kwa">else</span> red <span class="kwa">end</span>
            <span class="sym">[]</span> red <span class="kwa">then if</span> OtherColour <span class="sym">==</span> blue <span class="kwa">then</span> yellow <span class="kwa">else</span> blue <span class="kwa">end</span>
            <span class="sym">[]</span> yellow <span class="kwa">then if</span> OtherColour <span class="sym">==</span> blue <span class="kwa">then</span> red <span class="kwa">else</span> blue <span class="kwa">end</span>
            <span class="kwa">end</span>
         <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>   <span class="slc">% Creature</span>



   <span class="kwa">fun</span> <span class="sym">{</span>StartRendezvousCreaturesWith ColourList<span class="sym">}</span>
      Done
      Rendezvous <span class="sym">= {</span>RendezvousServer Done N<span class="sym">}</span>

      C <span class="sym">= {</span>List<span class="sym">.</span>mapInd ColourList
         <span class="kwa">fun</span><span class="sym">{$</span> I C<span class="sym">} {</span>New Creature init<span class="sym">(</span>I C Rendezvous<span class="sym">)}</span> <span class="kwa">end</span> <span class="sym">}</span>
   <span class="kwa">in</span>
      <span class="sym">{</span>Wait Done<span class="sym">}</span>
      C
   <span class="kwa">end</span>


   <span class="kwa">proc</span> <span class="sym">{</span>CheckCreatureColourChanges<span class="sym">}</span>
      ColourList <span class="sym">= [</span>blue red yellow<span class="sym">]</span>
      Creatures <span class="sym">= {</span>Map ColourList <span class="kwa">fun</span><span class="sym">{$</span> C<span class="sym">} {</span>New Creature init<span class="sym">(</span><span class="num">0</span> C nil<span class="sym">)}</span> <span class="kwa">end</span> <span class="sym">}</span>
   <span class="kwa">in</span>
      <span class="sym">{</span>ForAll Creatures
         <span class="kwa">proc</span> <span class="sym">{$</span> C<span class="sym">} {</span>
            ForAll ColourList
               <span class="kwa">proc</span> <span class="sym">{$</span> X<span class="sym">} {</span>
                  System<span class="sym">.</span>showInfo
                     <span class="sym">{</span>C colour<span class="sym">($)} #</span> &quot; <span class="sym">+</span> &quot; <span class="sym">#</span> X <span class="sym">#</span> &quot; <span class="sym">-&gt;</span> &quot; <span class="sym">#</span>
                        <span class="sym">{</span>C complementColour<span class="sym">(</span>X <span class="sym">$)}</span>
               <span class="sym">}</span> <span class="kwa">end</span>
         <span class="sym">}</span> <span class="kwa">end</span>
      <span class="sym">}</span>
      <span class="sym">{</span>System<span class="sym">.</span>showInfo &quot;&quot;<span class="sym">}</span>
   <span class="kwa">end</span>


   <span class="kwa">proc</span> <span class="sym">{</span>ReportRendezvouses ColourList<span class="sym">}</span>

      Numbers <span class="sym">= {</span>Tuple<span class="sym">.</span>toArray <span class="sym">{</span>List<span class="sym">.</span>toTuple <span class="str">'#'</span>
         <span class="sym">{</span>Map
            <span class="sym">[</span>zero one two three four five six seven eight nine<span class="sym">]</span>
            <span class="kwa">fun</span> <span class="sym">{$</span> A<span class="sym">} {</span>AtomToString A<span class="sym">}</span> <span class="kwa">end</span>
         <span class="sym">} } }</span>

      <span class="kwa">fun</span> <span class="sym">{</span>Spellout K<span class="sym">}</span>
         <span class="sym">{</span>Flatten <span class="sym">{</span>Map <span class="sym">{</span>IntToString K<span class="sym">}</span>
            <span class="kwa">fun</span> <span class="sym">{$</span> C<span class="sym">} [</span>&quot; &quot; Numbers<span class="sym">.({</span>StringToInt <span class="sym">[</span>C<span class="sym">]} +</span> <span class="num">1</span><span class="sym">)]</span> <span class="kwa">end</span> <span class="sym">} }</span>
      <span class="kwa">end</span>

      Sum <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>
      RendezvousCreatures
   <span class="kwa">in</span>
      <span class="sym">{</span>System<span class="sym">.</span>showInfo
         <span class="sym">{</span>Flatten <span class="sym">{</span>Map ColourList <span class="kwa">fun</span> <span class="sym">{$</span> C<span class="sym">} [</span>&quot; &quot; <span class="sym">{</span>AtomToString C<span class="sym">}]</span> <span class="kwa">end</span> <span class="sym">} } }</span>

      RendezvousCreatures <span class="sym">= {</span>StartRendezvousCreaturesWith ColourList<span class="sym">}</span>

      <span class="sym">{</span>ForAll RendezvousCreatures
         <span class="kwa">proc</span> <span class="sym">{$</span> C<span class="sym">}</span>
            Meetings <span class="sym">= {</span>C creaturesMet<span class="sym">($)}</span>
         <span class="kwa">in</span>
            Sum <span class="sym">:= &#64;</span>Sum <span class="sym">+</span> Meetings
            <span class="sym">{</span>System<span class="sym">.</span>showInfo <span class="sym">{</span>IntToString Meetings<span class="sym">} # {</span>Spellout <span class="sym">{</span>C selfMet<span class="sym">($)} } }</span>
         <span class="kwa">end</span>
      <span class="sym">}</span>

      <span class="sym">{</span>System<span class="sym">.</span>showInfo <span class="sym">{</span>Spellout <span class="sym">&#64;</span>Sum<span class="sym">}}</span>
      <span class="sym">{</span>System<span class="sym">.</span>showInfo &quot;&quot;<span class="sym">}</span>
   <span class="kwa">end</span>


   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String<span class="sym">.</span>toInt Arg<span class="sym">}</span>
<span class="kwa">in</span>
   <span class="sym">{</span>CheckCreatureColourChanges<span class="sym">}</span>
   <span class="sym">{</span>ReportRendezvouses <span class="sym">[</span>blue red yellow<span class="sym">]}</span>
   <span class="sym">{</span>ReportRendezvouses <span class="sym">[</span>blue red yellow red yellow blue red yellow red blue<span class="sym">]}</span>

   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>   <span class="slc">% exit without cleaning up</span>
<span class="kwa">end</span>
