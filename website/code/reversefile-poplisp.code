<span class="line">    1 </span><span class="slc">;;; -*- mode: lisp -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; $Id: reversefile-poplisp.code,v 1.3 2004-11-11 07:14:14 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">;;; from Bulent Murtezaoglu
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)))
</span><span class="line">    7 </span><span class="sym">
</span><span class="line">    8 </span><span class="sym">(</span>defconstant BLOCKSIZE <span class="num">4096</span><span class="sym">)
</span><span class="line">    9 </span><span class="sym">
</span><span class="line">   10 </span><span class="sym">(</span>declaim <span class="sym">(</span>inline position<span class="sym">-</span>rev<span class="sym">))
</span><span class="line">   11 </span><span class="sym"></span><span class="slc">;; I wrote the the function below because the default cmucl image
</span><span class="line">   12 </span><span class="slc"></span><span class="slc">;; doesn't seem to to have the inline expansion of position available
</span><span class="line">   13 </span><span class="slc"></span><span class="sym">(</span><span class="kwa">defun</span> position<span class="sym">-</span>rev <span class="sym">(</span>string end char<span class="sym">)
</span><span class="line">   14 </span><span class="sym">  (</span>declare <span class="sym">(</span>simple<span class="sym">-</span>string string<span class="sym">) (</span>fixnum end<span class="sym">))
</span><span class="line">   15 </span><span class="sym">  (</span>declare <span class="sym">(</span>inline char<span class="sym">=))
</span><span class="line">   16 </span><span class="sym">  (</span>loop for i from <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> end<span class="sym">)</span> downto <span class="num">0
</span><span class="line">   17 </span><span class="num"></span>    do <span class="sym">(</span>when <span class="sym">(</span>char<span class="sym">= (</span>aref string i<span class="sym">)</span> char<span class="sym">)
</span><span class="line">   18 </span><span class="sym">         (</span>return<span class="sym">-</span>from position<span class="sym">-</span>rev i<span class="sym">))))
</span><span class="line">   19 </span><span class="sym">
</span><span class="line">   20 </span><span class="sym">  (</span>declare <span class="sym">(</span>inline <span class="kwa">read</span><span class="sym">-</span>sequence write<span class="sym">-</span>string position<span class="sym">-</span>rev replace<span class="sym">))
</span><span class="line">   21 </span><span class="sym">  (</span>let <span class="sym">((</span>fp <span class="num">0</span><span class="sym">)
</span><span class="line">   22 </span><span class="sym">        (</span>bufsize BLOCKSIZE<span class="sym">)
</span><span class="line">   23 </span><span class="sym">        (</span>buf <span class="sym">(</span>make<span class="sym">-</span>string BLOCKSIZE<span class="sym">)))
</span><span class="line">   24 </span><span class="sym">    (</span>declare <span class="sym">(</span>fixnum bufsize<span class="sym">) (</span>simple<span class="sym">-</span>string buf<span class="sym">))
</span><span class="line">   25 </span><span class="sym">    (</span>loop for i fixnum <span class="sym">= (</span><span class="kwa">read</span><span class="sym">-</span>sequence buf <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*
</span><span class="line">   26 </span><span class="sym">        :</span>start fp <span class="sym">:</span>end <span class="sym">(+</span> fp BLOCKSIZE<span class="sym">))
</span><span class="line">   27 </span><span class="sym"></span>      until <span class="sym">(=</span> i fp<span class="sym">)</span> do
<span class="line">   28 </span>      <span class="sym">(</span><span class="kwa">setq</span> fp i<span class="sym">)
</span><span class="line">   29 </span><span class="sym">      (</span>when <span class="sym">(&gt; (+</span> i BLOCKSIZE<span class="sym">)</span> bufsize<span class="sym">)
</span><span class="line">   30 </span><span class="sym">        (</span><span class="kwa">setq</span> bufsize <span class="sym">(*</span> <span class="num">2</span> bufsize<span class="sym">))
</span><span class="line">   31 </span><span class="sym">        (</span>let <span class="sym">((</span>tmpbuf <span class="sym">(</span>make<span class="sym">-</span>string bufsize<span class="sym">)))
</span><span class="line">   32 </span><span class="sym">          (</span>replace tmpbuf buf <span class="sym">:</span>start1 <span class="num">0</span> <span class="sym">:</span>end1 fp <span class="sym">:</span>start2 <span class="num">0</span> <span class="sym">:</span>end2 fp<span class="sym">)
</span><span class="line">   33 </span><span class="sym">          (</span><span class="kwa">setq</span> buf tmpbuf<span class="sym">))))
</span><span class="line">   34 </span><span class="sym">    (</span>loop for i <span class="sym">= (</span><span class="num">1</span><span class="sym">-</span> fp<span class="sym">)</span> then j as j <span class="sym">= (</span>position<span class="sym">-</span>rev buf i #\Newline<span class="sym">)
</span><span class="line">   35 </span><span class="sym"></span>      do <span class="sym">(</span>write<span class="sym">-</span>string buf <span class="sym">*</span>standard<span class="sym">-</span>output<span class="sym">* :</span>start <span class="sym">(</span><span class="kwa">if</span> j <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> j<span class="sym">)</span> <span class="num">0</span><span class="sym">) :</span>end <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">))
</span><span class="line">   36 </span><span class="sym"></span>      <span class="kwa">while</span> j<span class="sym">))</span>
