# Contributed by Joshua Isom
.<span class="kwa">sub</span> fannkuch
	.param <span class="kwa">int</span> n
	.<span class="kwa">local</span> pmc perm<span class="sym">,</span> perm1<span class="sym">,</span> count
	perm  <span class="sym">=</span> new .FixedIntegerArray
	perm1 <span class="sym">=</span> new .FixedIntegerArray
	count <span class="sym">=</span> new .FixedIntegerArray
	.<span class="kwa">local int</span> flips<span class="sym">,</span> flipsMax<span class="sym">,</span> r<span class="sym">,</span> i<span class="sym">,</span> k<span class="sym">,</span> didpr
	.<span class="kwa">local int</span> n1
	n1 <span class="sym">=</span> n
	<span class="kwa">dec</span> n1

	if n <span class="sym">&gt;</span> <span class="num">1</span> goto countok
	.return<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
countok<span class="sym">:</span>
	perm  <span class="sym">=</span> n
	perm1 <span class="sym">=</span> n
	count <span class="sym">=</span> n
	i <span class="sym">=</span> <span class="num">0</span>
for_1<span class="sym">:</span>
	perm1<span class="sym">[</span>i<span class="sym">] =</span> i
	<span class="kwa">inc</span> i
	if i <span class="sym">&lt;</span> n goto for_1
	r <span class="sym">=</span> n
	didpr <span class="sym">=</span> <span class="num">0</span>
	flipsMax <span class="sym">=</span> <span class="num">0</span>
beginwhile_1<span class="sym">:</span>
	unless didpr <span class="sym">&lt;</span> <span class="num">30</span> goto endif_1
			i <span class="sym">=</span> <span class="num">0</span>
		for_2<span class="sym">:</span>
			$I0 <span class="sym">=</span> perm1<span class="sym">[</span>i<span class="sym">]</span>
			<span class="kwa">inc</span> $I0
			print $I0
		<span class="kwa">inc</span> i
		if i <span class="sym">&lt;</span> n goto for_2
		print <span class="str">&quot;\n&quot;</span>
		<span class="kwa">inc</span> didpr
	endif_1<span class="sym">:</span>
	for_3<span class="sym">:</span>
		unless r <span class="sym">!=</span> <span class="num">1</span> goto endfor_3
			$I0 <span class="sym">=</span> r <span class="sym">-</span> <span class="num">1</span>
			count<span class="sym">[</span>$I0<span class="sym">] =</span> r
		<span class="kwa">dec</span> r
		goto for_3
	endfor_3<span class="sym">:</span>
	$I0 <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
	$I1 <span class="sym">=</span> iseq $I0<span class="sym">,</span> <span class="num">0</span>
	$I0 <span class="sym">=</span> perm1<span class="sym">[</span>n1<span class="sym">]</span>
	$I2 <span class="sym">=</span> iseq $I0<span class="sym">,</span> n1
	$I0 <span class="sym">=</span> <span class="kwa">or</span> $I1<span class="sym">,</span> $I2
	if $I0 goto endif_2
			flips <span class="sym">=</span> <span class="num">0</span>
			perm <span class="sym">=</span> clone perm1
			k <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
		dowhile_1<span class="sym">:</span>
			.<span class="kwa">local int</span> j
			i <span class="sym">=</span> <span class="num">1</span>
			j <span class="sym">=</span> k <span class="sym">-</span> <span class="num">1</span>
			for_5<span class="sym">:</span>
			unless i <span class="sym">&lt;</span> j goto endfor_5
				$I0 <span class="sym">=</span> perm<span class="sym">[</span>i<span class="sym">]</span>
				$I1 <span class="sym">=</span> perm<span class="sym">[</span>j<span class="sym">]</span>
				perm<span class="sym">[</span>i<span class="sym">] =</span> $I1
				perm<span class="sym">[</span>j<span class="sym">] =</span> $I0
			<span class="kwa">inc</span> i
			<span class="kwa">dec</span> j
			goto for_5
			endfor_5<span class="sym">:</span>
			<span class="kwa">inc</span> flips
			j <span class="sym">=</span> perm<span class="sym">[</span>k<span class="sym">]</span>
			perm<span class="sym">[</span>k<span class="sym">] =</span> k
			k <span class="sym">=</span> j
		if k goto dowhile_1
		unless flipsMax <span class="sym">&lt;</span> flips goto endif_3
			flipsMax <span class="sym">=</span> flips
		endif_3<span class="sym">:</span>
endif_2<span class="sym">:</span>
while_1<span class="sym">:</span>
	unless r <span class="sym">==</span> n goto endif_4
		.return<span class="sym">(</span>flipsMax<span class="sym">)</span>
	endif_4<span class="sym">:</span>
	.<span class="kwa">local int</span> perm0
	perm0 <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">]</span>
	i <span class="sym">=</span> <span class="num">0</span>
	beginwhile_2<span class="sym">:</span>
		unless i <span class="sym">&lt;</span> r goto endwhile_2
		k <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
		$I0 <span class="sym">=</span> perm1<span class="sym">[</span>k<span class="sym">]</span>
		perm1<span class="sym">[</span>i<span class="sym">] =</span> $I0
		i <span class="sym">=</span> k
	goto beginwhile_2
	endwhile_2<span class="sym">:</span>
	perm1<span class="sym">[</span>r<span class="sym">] =</span> perm0
	$I0 <span class="sym">=</span> count<span class="sym">[</span>r<span class="sym">]</span>
	<span class="kwa">dec</span> $I0
	count<span class="sym">[</span>r<span class="sym">] =</span> $I0
	if $I0 <span class="sym">&gt;</span> <span class="num">0</span> goto beginwhile_1
	<span class="kwa">inc</span> r
	goto while_1
.<span class="kwa">end</span>

.<span class="kwa">sub</span> main <span class="sym">:</span>main
	.param pmc argv
	.<span class="kwa">local int</span> argc
	$S0 <span class="sym">=</span> argv<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
	$I0 <span class="sym">=</span> $S0
	$I1 <span class="sym">=</span> fannkuch<span class="sym">(</span>$I0<span class="sym">)</span>
	print <span class="str">&quot;Pfannkuchen(&quot;</span>
	print $S0
	print <span class="str">&quot;) = &quot;</span>
	print $I1
	print <span class="str">&quot;\n&quot;</span>
	exit <span class="num">0</span>
.<span class="kwa">end</span>
