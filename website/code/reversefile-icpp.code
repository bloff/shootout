<span class="slc">// -*- mode: c++ -*-</span>
<span class="slc">// $Id: reversefile-icpp.code,v 1.8 2006-04-01 21:27:07 bfulgham Exp $</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Based on the C version by Alan Post &lt;apost&#64;recalcitrant.org&gt;</span>
<span class="slc">// C++-ified by Brent Fulgham, based on an idea by Mark Fitzgerald</span>

<span class="dir">#include &lt;assert.h&gt;</span>
<span class="dir">#include &lt;sys/uio.h&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="dir">#if defined(__INTEL_COMPILER)</span>
<span class="dir">#define STDOUT_FILENO 1</span>
<span class="dir">#endif</span>

<span class="slc">//</span>
<span class="slc">// Note that malloc(3) seems happier with chunks of 4096</span>
<span class="slc">//</span>
<span class="kwb">const int</span> MAXREAD <span class="sym">= (</span><span class="num">4096</span> <span class="sym">-</span> <span class="kwa">sizeof</span><span class="sym">(</span> <span class="kwb">size_t</span> <span class="sym">) -</span> <span class="kwa">sizeof</span><span class="sym">(</span> <span class="kwb">void</span><span class="sym">* ));</span>

<span class="kwb">struct</span> buf_t
<span class="sym">{</span>
    <span class="kwb">char</span> d<span class="sym">[</span>MAXREAD<span class="sym">];</span>
    <span class="kwb">size_t</span> len<span class="sym">;</span>
    buf_t <span class="sym">*</span>next<span class="sym">;</span>
<span class="sym">};</span>

<span class="kwb">static</span> buf_t<span class="sym">*</span> <span class="kwd">read_lines</span><span class="sym">(</span> buf_t<span class="sym">*</span> tail <span class="sym">)</span>
<span class="sym">{</span>
    buf_t<span class="sym">*</span> curr <span class="sym">=</span> tail<span class="sym">;</span>
    tail<span class="sym">-&gt;</span>next <span class="sym">=</span> NULL<span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span> <span class="kwa">true</span> <span class="sym">)</span>
    <span class="sym">{</span>
        cin<span class="sym">.</span><span class="kwd">read</span><span class="sym">(</span>curr<span class="sym">-&gt;</span>d<span class="sym">,</span> MAXREAD <span class="sym">);</span>
	<span class="kwb">int</span> nread <span class="sym">=</span> cin<span class="sym">.</span><span class="kwd">gcount</span><span class="sym">();</span>
	curr<span class="sym">-&gt;</span>len <span class="sym">=</span> nread<span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">(</span> nread <span class="sym">&lt;</span> MAXREAD <span class="sym">) {</span> <span class="kwa">return</span> curr<span class="sym">; }</span>
        buf_t<span class="sym">*</span> head <span class="sym">=</span> <span class="kwa">new</span> buf_t<span class="sym">;</span>
        head<span class="sym">-&gt;</span>next <span class="sym">=</span> curr<span class="sym">;</span>
        curr <span class="sym">=</span> head<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="dir">#define WRITEOUT( p_, l_ ) \</span>
<span class="dir">        do { \</span>
<span class="dir">            vec[ ivec ].iov_base = (char*) (p_); \</span>
<span class="dir">            vec[ ivec ].iov_len = (int) (l_); \</span>
<span class="dir">            ivec++; \</span>
<span class="dir">            if ( ivec == IOV_MAX ) \</span>
<span class="dir">            { \</span>
<span class="dir">                writev( STDOUT_FILENO, vec, ivec ); \</span>
<span class="dir">                ivec = 0; \</span>
<span class="dir">            } \</span>
<span class="dir">        } while (0)</span>

<span class="dir">#define LINEOUT \</span>
<span class="dir">        do { \</span>
<span class="dir">            WRITEOUT( pos, end - pos); \</span>
<span class="dir">            for (; loh != NULL; loh = loh-&gt;next ) \</span>
<span class="dir">                WRITEOUT( loh-&gt;d, loh-&gt;len ); \</span>
<span class="dir">        } while (0)</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> argv<span class="sym">[])</span>
<span class="sym">{</span>
    buf_t tail<span class="sym">;</span>
    buf_t<span class="sym">*</span> head <span class="sym">=</span> <span class="kwd">read_lines</span><span class="sym">( &amp;</span>tail <span class="sym">);</span>

    buf_t<span class="sym">*</span> loh <span class="sym">=</span> NULL<span class="sym">;</span>
    buf_t<span class="sym">*</span> curr <span class="sym">=</span> head<span class="sym">;</span>

    <span class="kwb">struct</span> iovec vec<span class="sym">[</span> IOV_MAX <span class="sym">];</span>
    <span class="kwb">size_t</span> ivec <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span> <span class="kwa">true</span> <span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwb">char</span><span class="sym">*</span> buf <span class="sym">=</span> curr<span class="sym">-&gt;</span>d<span class="sym">;</span>
        <span class="kwb">char</span><span class="sym">*</span> end <span class="sym">=</span> buf <span class="sym">+</span> curr<span class="sym">-&gt;</span>len<span class="sym">;</span>
        <span class="kwb">char</span><span class="sym">*</span> pos <span class="sym">=</span> end<span class="sym">;</span>
        <span class="kwa">for</span> <span class="sym">(;;</span> pos<span class="sym">--)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">(</span> pos <span class="sym">&lt;=</span> buf <span class="sym">)</span>
            <span class="sym">{</span>
                buf_t<span class="sym">*</span> new_curr <span class="sym">=</span> curr<span class="sym">-&gt;</span>next<span class="sym">;</span>

                <span class="kwa">if</span> <span class="sym">(</span> new_curr <span class="sym">==</span> NULL <span class="sym">)</span>
                <span class="sym">{</span>
                    LINEOUT<span class="sym">;</span>
                    <span class="kwd">writev</span><span class="sym">(</span> STDOUT_FILENO<span class="sym">,</span> vec<span class="sym">,</span> ivec <span class="sym">);</span>
                    <span class="kwa">return</span> EXIT_SUCCESS<span class="sym">;</span>
                <span class="sym">}</span>

                curr<span class="sym">-&gt;</span>len <span class="sym">=</span> end <span class="sym">-</span> buf<span class="sym">;</span>
                curr<span class="sym">-&gt;</span>next <span class="sym">=</span> loh<span class="sym">;</span>
                loh <span class="sym">=</span> curr<span class="sym">;</span>

                curr <span class="sym">=</span> new_curr<span class="sym">;</span>
                <span class="kwa">break</span><span class="sym">;</span>
            <span class="sym">}</span>
            <span class="kwa">if</span> <span class="sym">( *(</span>pos<span class="sym">-</span><span class="num">1</span><span class="sym">) ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span> <span class="sym">)</span>
            <span class="sym">{</span>
                LINEOUT<span class="sym">;</span>
                end <span class="sym">=</span> pos<span class="sym">;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwd">assert</span><span class="sym">(</span> NULL <span class="sym">==</span> <span class="str">&quot;unreachable&quot;</span> <span class="sym">);</span>
    <span class="kwa">return</span> EXIT_FAILURE<span class="sym">;</span>
<span class="sym">}</span>

