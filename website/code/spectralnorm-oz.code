<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Floating point conversion routines courtesy Juergen Stuber and Jorge</span>
<span class="slc">% Marques Pelizzoni [previously used in other Mozart/Oz Shooutout</span>
<span class="slc">% submissions].</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo<span class="sym">)</span> Application<span class="sym">(</span>exit getArgs<span class="sym">)</span>

<span class="kwb">define</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>Approximate N<span class="sym">}</span>
    U <span class="sym">= {</span>NewArray <span class="num">1</span> N <span class="num">1.0</span><span class="sym">}</span> V <span class="sym">= {</span>NewArray <span class="num">1</span> N <span class="num">0.0</span><span class="sym">}</span> VBv <span class="sym">= {</span>NewCell <span class="num">0.0</span><span class="sym">}</span> Vv <span class="sym">= {</span>NewCell <span class="num">0.0</span><span class="sym">}</span>
  <span class="kwb">in</span>
    <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">1</span>.<span class="num">.10</span> <span class="kwb">do</span>
      <span class="sym">{</span>MulAtAv N U V<span class="sym">} {</span>MulAtAv N V U<span class="sym">}</span>
    <span class="kwb">end</span>

    <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">1</span>..<span class="sym">{</span>Array.high U<span class="sym">}</span> <span class="kwb">do</span>
      VBv <span class="sym">:=</span> &#64;VBv <span class="sym">+ {</span>Array.get U I<span class="sym">} * {</span>Array.get V I<span class="sym">}</span>
      Vv <span class="sym">:=</span> &#64;Vv <span class="sym">+ {</span>Array.get V I<span class="sym">} * {</span>Array.get V I<span class="sym">}</span>
    <span class="kwb">end</span>

    <span class="sym">{</span>Float.sqrt <span class="sym">(</span>&#64;VBv <span class="sym">/</span> &#64;Vv<span class="sym">)}</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>A I J<span class="sym">}</span>
    If <span class="sym">= {</span>IntToFloat <span class="sym">(</span>I <span class="sym">-</span> <span class="num">1</span><span class="sym">)}</span> Jf <span class="sym">= {</span>IntToFloat <span class="sym">(</span>J <span class="sym">-</span> <span class="num">1</span><span class="sym">)}</span>
  <span class="kwb">in</span>
    <span class="num">1.0</span> <span class="sym">/ ((</span>If <span class="sym">+</span> Jf<span class="sym">) *(</span> If <span class="sym">+</span> Jf <span class="sym">+</span> <span class="num">1.0</span><span class="sym">) /</span> <span class="num">2.0</span> <span class="sym">+</span> If <span class="sym">+</span> <span class="num">1.0</span><span class="sym">)</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">proc</span> <span class="sym">{</span>MulAv N V Av<span class="sym">}</span>
    <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">1</span>..N <span class="kwb">do</span>
      <span class="sym">{</span>Array.put Av I <span class="num">0.0</span><span class="sym">}</span>
      <span class="kwb">for</span> J <span class="kwb">in</span> <span class="num">1</span>..N <span class="kwb">do</span>
        <span class="sym">{</span>Array.put Av I <span class="sym">({</span>Array.get Av I<span class="sym">} + {</span>A I J<span class="sym">} * {</span>Array.get V J<span class="sym">})}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">proc</span> <span class="sym">{</span>MulAtv N V Atv<span class="sym">}</span>
    <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">1</span>..N <span class="kwb">do</span>
      <span class="sym">{</span>Array.put Atv I <span class="num">0.0</span><span class="sym">}</span>
      <span class="kwb">for</span> J <span class="kwb">in</span> <span class="num">1</span>..N <span class="kwb">do</span>
        <span class="sym">{</span>Array.put Atv I <span class="sym">({</span>Array.get Atv I<span class="sym">} + {</span>A J I<span class="sym">} * {</span>Array.get V J<span class="sym">})}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">proc</span> <span class="sym">{</span>MulAtAv N V AtAv<span class="sym">}</span>
    U <span class="sym">= {</span>NewArray <span class="num">1</span> N <span class="num">0.0</span><span class="sym">}</span>
  <span class="kwb">in</span>
    <span class="sym">{</span>MulAv N V U<span class="sym">} {</span>MulAtv N U AtAv<span class="sym">}</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>CmdlNArg Nth Default<span class="sym">}</span> N Nt <span class="kwb">in</span>
    <span class="kwa">try</span>
      Nt <span class="sym">= {</span>String.toInt <span class="sym">{</span>Application.getArgs plain<span class="sym">}</span>.Nth<span class="sym">}</span>
      N <span class="sym">=</span> <span class="kwb">if</span> Nt <span class="sym">&lt;</span> Default <span class="kwb">then</span> Default <span class="kwb">else</span> Nt <span class="kwb">end</span>
    <span class="kwa">catch</span> error<span class="sym">(</span>...<span class="sym">)</span> <span class="kwb">then</span>
      N <span class="sym">=</span> Default
    <span class="kwb">end</span>
    N
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="slc">%% Floating Point Conversion Routines</span>

  <span class="kwb">fun</span> <span class="sym">{</span>FloatAbs X<span class="sym">}</span>
    <span class="kwb">if</span> X <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwb">then</span> X <span class="kwb">else</span> ~X <span class="kwb">end</span>
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>FloatSquare X<span class="sym">}</span>
    X <span class="sym">*</span> X
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>FloatPower X E<span class="sym">}</span>
    <span class="kwb">if</span> E<span class="sym">==</span><span class="num">0</span> <span class="kwb">then</span> <span class="num">1.0</span>
    <span class="kwb">elseif</span> E<span class="sym">&lt;</span><span class="num">0</span> <span class="kwb">then</span> <span class="kwa">raise</span> negativeExponent<span class="sym">(</span>E<span class="sym">)</span> <span class="kwb">end</span>
    <span class="kwb">else</span>
      <span class="kwb">if</span> E mod <span class="num">2</span> <span class="sym">==</span> <span class="num">1</span> <span class="kwb">then</span> X <span class="kwb">else</span> <span class="num">1.0</span> <span class="kwb">end</span>
      <span class="sym">* {</span>FloatSquare <span class="sym">{</span>FloatPower X E div <span class="num">2</span><span class="sym">}}</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>MakePadding Ch L<span class="sym">}</span>
    <span class="kwb">if</span> L <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwb">then</span>
      Padding <span class="sym">= {</span>MakeList L<span class="sym">}</span>
    <span class="kwb">in</span>
      <span class="kwb">for</span> V <span class="kwb">in</span> Padding <span class="kwb">do</span> V <span class="sym">=</span> Ch <span class="kwb">end</span>
        Padding
      <span class="kwb">else</span>
        <span class="kwa">nil</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>PadLeft Ch String L<span class="sym">}</span>
    PL <span class="sym">=</span> L <span class="sym">- {</span>List.length String<span class="sym">}</span>
  <span class="kwb">in</span>
    <span class="sym">{</span>MakePadding Ch PL<span class="sym">}</span> # String
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>FloatToVS F Prec<span class="sym">}</span>
    <span class="kwb">fun</span> <span class="sym">{</span>FractionToString Frac Prec<span class="sym">}</span>
      <span class="kwb">if</span> Prec <span class="sym">=&lt;</span> <span class="num">0</span> <span class="kwb">then</span> <span class="str">&quot;&quot;</span>
      <span class="kwb">elseif</span> Prec <span class="sym">&gt;</span> <span class="num">10</span> <span class="kwb">then</span> <span class="kwa">raise</span> excessivePrecision<span class="sym">(</span>Prec<span class="sym">)</span> <span class="kwb">end</span>
      <span class="kwb">else</span>
        Shifted <span class="sym">= {</span>FloatPower <span class="num">10.0</span> Prec<span class="sym">} *</span> Frac
        Digits <span class="sym">= {</span>FloatToInt <span class="sym">{</span>Round Shifted<span class="sym">}}</span>
        <span class="kwb">in</span> <span class="sym">{</span>PadLeft <span class="sym">&amp;</span><span class="num">0</span> <span class="sym">{</span>IntToString Digits<span class="sym">}</span> Prec<span class="sym">}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    I <span class="sym">= {</span>FloatToInt <span class="sym">{</span><span class="kwb">if</span> F <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwb">then</span> Floor <span class="kwb">else</span> Ceil <span class="kwb">end</span> F<span class="sym">}}</span>
    Frac <span class="sym">= {</span>FloatAbs F <span class="sym">- {</span>IntToFloat I<span class="sym">}}</span>
  <span class="kwb">in</span>
    <span class="sym">{</span>IntToString I<span class="sym">}</span> # <span class="str">&quot;.&quot;</span> # <span class="sym">{</span>FractionToString Frac Prec<span class="sym">}</span>
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>FloatToString F Prec<span class="sym">}</span>
    Result <span class="sym">= {</span>NewCell <span class="sym">{</span>VirtualString.toString <span class="sym">{</span>FloatToVS F Prec<span class="sym">}}}</span>
    P <span class="sym">=</span> <span class="kwb">fun</span> <span class="sym">{</span>$ C<span class="sym">}</span> <span class="kwb">if</span> C <span class="sym">== &amp;</span>~ <span class="kwb">then</span> <span class="sym">&amp;-</span> <span class="kwb">else</span> C <span class="kwb">end end</span>
  <span class="kwb">in</span>
    <span class="kwb">if</span> F <span class="sym">&lt;</span> <span class="num">0.0</span> andthen <span class="sym">{</span>Nth &#64;Result <span class="num">1</span><span class="sym">}</span> \= <span class="sym">&amp;</span>~ <span class="kwb">then</span>
      Result <span class="sym">:= &amp;</span>~<span class="sym">|</span>&#64;Result
    <span class="kwb">end</span>
    <span class="sym">{</span>Map &#64;Result P<span class="sym">}</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  N

<span class="slc">% ------------- %</span>

<span class="kwb">in</span>
  N <span class="sym">= {</span>CmdlNArg <span class="num">1 100</span><span class="sym">}</span>

  <span class="sym">{</span>System.showInfo <span class="sym">{</span>FloatToString <span class="sym">{</span>Approximate N<span class="sym">}</span> <span class="num">9</span><span class="sym">}}</span>

  <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>

