<span class="slc">;; ---------------------------------------------------------------------</span>
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Anthony Borla</span>
<span class="slc">;; ---------------------------------------------------------------------</span>

<span class="sym">(</span>require<span class="sym">-</span>extension format<span class="sym">)</span>

<span class="sym">(</span>declare <span class="sym">(</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>unsafe<span class="sym">) (</span>block<span class="sym">) (</span><span class="kwa">lambda</span><span class="sym">-</span>lift<span class="sym">))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>approximate n<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>u <span class="sym">(</span>make<span class="sym">-</span>vector n <span class="num">1.0</span><span class="sym">))</span>
        <span class="sym">(</span>v <span class="sym">(</span>make<span class="sym">-</span>vector n <span class="num">0.0</span><span class="sym">))</span>
        <span class="sym">(</span>vBv <span class="num">0.0</span><span class="sym">) (</span>vV <span class="num">0.0</span><span class="sym">))</span>

    <span class="sym">(</span>do <span class="sym">((</span>i #e0 <span class="sym">(</span>fx<span class="sym">+</span> i <span class="num">1</span><span class="sym">)))</span>
        <span class="sym">((</span>fx<span class="sym">=</span> <span class="num">10</span> i<span class="sym">))</span>
      <span class="sym">(</span>mulAtAv n u v<span class="sym">)</span>
      <span class="sym">(</span>mulAtAv n v u<span class="sym">))</span>

    <span class="sym">(</span>do <span class="sym">((</span>i #e0 <span class="sym">(</span>fx<span class="sym">+</span> i <span class="num">1</span><span class="sym">)))</span>
        <span class="sym">((</span>fx<span class="sym">=</span> n i<span class="sym">))</span>
      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> vBv <span class="sym">(+</span> vBv <span class="sym">(* (</span>vector<span class="sym">-</span>ref u i<span class="sym">) (</span>vector<span class="sym">-</span>ref v i<span class="sym">))))</span>
      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> vV <span class="sym">(+</span> vV <span class="sym">(* (</span>vector<span class="sym">-</span>ref v i<span class="sym">) (</span>vector<span class="sym">-</span>ref v i<span class="sym">)))))</span>

    <span class="sym">(</span><span class="kwa">sqrt</span> <span class="sym">(/</span> vBv vV<span class="sym">))))</span>

<span class="slc">; --------------</span>

<span class="sym">(</span>define <span class="sym">(</span>A i j<span class="sym">)</span>
  <span class="sym">(/</span> <span class="num">1.0</span> <span class="sym">(</span>exact<span class="sym">-&gt;</span>inexact <span class="sym">(</span>fx<span class="sym">+ (</span>fx<span class="sym">+ (</span>fx<span class="sym">/ (</span>fx<span class="sym">* (</span>fx<span class="sym">+</span> i j<span class="sym">) (</span>fx<span class="sym">+ (</span>fx<span class="sym">+</span> i j<span class="sym">)</span> <span class="num">1</span><span class="sym">))</span> <span class="num">2</span><span class="sym">)</span> i<span class="sym">)</span> <span class="num">1</span><span class="sym">))))</span>

<span class="slc">; --------------</span>

<span class="sym">(</span>define <span class="sym">(</span>mulAv n v av<span class="sym">)</span>
  <span class="sym">(</span>do <span class="sym">((</span>i #e0 <span class="sym">(</span>fx<span class="sym">+</span> i <span class="num">1</span><span class="sym">)))</span>
      <span class="sym">((</span>fx<span class="sym">=</span> n i<span class="sym">))</span>
    <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> av i <span class="num">0.0</span><span class="sym">)</span>
    <span class="sym">(</span>do <span class="sym">((</span>j #e0 <span class="sym">(</span>fx<span class="sym">+</span> j <span class="num">1</span><span class="sym">)))</span>
        <span class="sym">((</span>fx<span class="sym">=</span> n j<span class="sym">))</span>
      <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> av i <span class="sym">(+ (</span>vector<span class="sym">-</span>ref av i<span class="sym">) (* (</span>A i j<span class="sym">) (</span>vector<span class="sym">-</span>ref v j<span class="sym">)))))))</span>

<span class="slc">; --------------</span>

<span class="sym">(</span>define <span class="sym">(</span>mulAtV n v atv<span class="sym">)</span>
  <span class="sym">(</span>do <span class="sym">((</span>i #e0 <span class="sym">(</span>fx<span class="sym">+</span> i <span class="num">1</span><span class="sym">)))</span>
      <span class="sym">((</span>fx<span class="sym">=</span> n i<span class="sym">))</span>
    <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> atv i <span class="num">0.0</span><span class="sym">)</span>
    <span class="sym">(</span>do <span class="sym">((</span>j #e0 <span class="sym">(</span>fx<span class="sym">+</span> j <span class="num">1</span><span class="sym">)))</span>
        <span class="sym">((</span>fx<span class="sym">=</span> n j<span class="sym">))</span>
      <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> atv i <span class="sym">(+ (</span>vector<span class="sym">-</span>ref atv i<span class="sym">) (* (</span>A j i<span class="sym">) (</span>vector<span class="sym">-</span>ref v j<span class="sym">)))))))</span>

<span class="slc">; --------------</span>

<span class="sym">(</span>define <span class="sym">(</span>mulAtAv n v atav<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>u <span class="sym">(</span>make<span class="sym">-</span>vector n <span class="num">0.0</span><span class="sym">)))</span>
    <span class="sym">(</span>mulAv n v u<span class="sym">)</span>
    <span class="sym">(</span>mulAtV n u atav<span class="sym">)))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? args<span class="sym">)</span>
               <span class="num">100</span>
               <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">car</span> args<span class="sym">)))))</span>

    <span class="sym">(</span>format #t <span class="str">&quot;~,9F~%&quot;</span> <span class="sym">(</span>approximate n<span class="sym">))))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>

