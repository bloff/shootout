<span class="line">    1 </span><span class="slc">// $Id: regexmatch-gcj.code,v 1.3 2004-11-11 07:14:05 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span><span class="line">    3 </span><span class="slc"></span>
<span class="line">    4 </span><span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="line">    5 </span><span class="sym"></span><span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;
</span><span class="line">    6 </span><span class="sym"></span><span class="kwa">import</span> java<span class="sym">.</span>text<span class="sym">.*;
</span><span class="line">    7 </span><span class="sym"></span><span class="kwa">import</span> java<span class="sym">.</span>lang<span class="sym">.</span>reflect<span class="sym">.*;
</span><span class="line">    8 </span><span class="sym"></span><span class="kwa">import</span> com<span class="sym">.</span>oroinc<span class="sym">.</span>text<span class="sym">.</span>regex<span class="sym">.*;
</span><span class="line">    9 </span><span class="sym">
</span><span class="line">   10 </span><span class="sym"></span><span class="kwa">public class</span> regexmatch <span class="sym">{
</span><span class="line">   11 </span><span class="sym">
</span><span class="line">   12 </span><span class="sym"></span>    <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[])
</span><span class="line">   13 </span><span class="sym"></span>        <span class="kwa">throws</span> <span class="kwc">IOException</span><span class="sym">,</span> MalformedPatternException <span class="sym">{
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym"></span>        <span class="kwb">int</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span><span class="line">   16 </span><span class="sym"></span>        <span class="kwc">LinkedList</span> lines <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span><span class="line">   17 </span><span class="sym"></span>        <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   18 </span><span class="sym"></span>            <span class="kwc">BufferedReader</span> in <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">BufferedReader</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwc">InputStreamReader</span><span class="sym">(</span><span class="kwc">System</span><span class="sym">.</span>in<span class="sym">));
</span><span class="line">   19 </span><span class="sym"></span>            <span class="kwc">String</span> line<span class="sym">;
</span><span class="line">   20 </span><span class="sym"></span>            <span class="kwa">while</span> <span class="sym">((</span>line <span class="sym">=</span> in<span class="sym">.</span>readLine<span class="sym">()) !=</span> null<span class="sym">) {
</span><span class="line">   21 </span><span class="sym"></span>                lines<span class="sym">.</span>addLast<span class="sym">(</span>line<span class="sym">);
</span><span class="line">   22 </span><span class="sym">            }
</span><span class="line">   23 </span><span class="sym"></span>            in<span class="sym">.</span>close<span class="sym">();
</span><span class="line">   24 </span><span class="sym">        }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">IOException</span> e<span class="sym">) {
</span><span class="line">   25 </span><span class="sym"></span>            <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span>e<span class="sym">);
</span><span class="line">   26 </span><span class="sym"></span>            <span class="kwa">return</span><span class="sym">;
</span><span class="line">   27 </span><span class="sym">        }
</span><span class="line">   28 </span><span class="sym">
</span><span class="line">   29 </span><span class="sym"></span>        <span class="kwc">String</span> regex <span class="sym">=
</span><span class="line">   30 </span><span class="sym"></span>            <span class="str">&quot;(?: ^ | [^</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">(])                # must be preceeded by non-digit</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span><span class="line">   31 </span><span class="sym"></span>            <span class="str">&quot;(?:                        # area code is 3 digits</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span><span class="line">   32 </span><span class="sym"></span>            <span class="str">&quot;</span> <span class="esc">\\</span><span class="str">((</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)</span><span class="esc">\\</span><span class="str">)                # match 1: with parens</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span><span class="line">   33 </span><span class="sym"></span>            <span class="str">&quot;|                                # or</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span><span class="line">   34 </span><span class="sym"></span>            <span class="str">&quot; (</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)                # match 2: without parens</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span><span class="line">   35 </span><span class="sym"></span>            <span class="str">&quot;)                                # if match1 then match right paren</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span><span class="line">   36 </span><span class="sym"></span>            <span class="str">&quot;[ ]                        # area code followed by one space</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span><span class="line">   37 </span><span class="sym"></span>            <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)                # match 3: prefix of 3 digits</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span><span class="line">   38 </span><span class="sym"></span>            <span class="str">&quot;[ -]                        # separator is either space or dash</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span><span class="line">   39 </span><span class="sym"></span>            <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)                # match 4: last 4 digits</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">+
</span><span class="line">   40 </span><span class="sym"></span>            <span class="str">&quot;(?:</span><span class="esc">\\</span><span class="str">D|$)                        # must be followed by a non-digit</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
</span><span class="line">   41 </span><span class="sym">
</span><span class="line">   42 </span><span class="sym"></span>        PatternMatcher matcher <span class="sym">=</span> <span class="kwa">new</span> Perl5Matcher<span class="sym">();
</span><span class="line">   43 </span><span class="sym"></span>        PatternCompiler compiler <span class="sym">=</span> <span class="kwa">new</span> Perl5Compiler<span class="sym">();
</span><span class="line">   44 </span><span class="sym"></span>        <span class="kwc">Pattern</span> pattern <span class="sym">=</span> null<span class="sym">;
</span><span class="line">   45 </span><span class="sym">
</span><span class="line">   46 </span><span class="sym"></span>        <span class="kwa">try</span> <span class="sym">{
</span><span class="line">   47 </span><span class="sym"></span>            pattern <span class="sym">=</span> compiler<span class="sym">.</span>compile<span class="sym">(</span>regex<span class="sym">,</span> Perl5Compiler<span class="sym">.</span>EXTENDED_MASK<span class="sym">);
</span><span class="line">   48 </span><span class="sym">        }</span> <span class="kwa">catch</span><span class="sym">(</span>MalformedPatternException e<span class="sym">) {
</span><span class="line">   49 </span><span class="sym"></span>            <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;Bad pattern.&quot;</span><span class="sym">);
</span><span class="line">   50 </span><span class="sym"></span>            <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span>e<span class="sym">.</span>getMessage<span class="sym">());
</span><span class="line">   51 </span><span class="sym"></span>            <span class="kwc">System</span><span class="sym">.</span>exit<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   52 </span><span class="sym">        }
</span><span class="line">   53 </span><span class="sym">
</span><span class="line">   54 </span><span class="sym"></span>        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   55 </span><span class="sym"></span>            <span class="kwc">LinkedList</span> phones <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
</span><span class="line">   56 </span><span class="sym"></span>            <span class="kwa">for</span> <span class="sym">(</span><span class="kwc">ListIterator</span> li <span class="sym">=</span> lines<span class="sym">.</span>listIterator<span class="sym">();</span> li<span class="sym">.</span>hasNext<span class="sym">();) {
</span><span class="line">   57 </span><span class="sym"></span>                <span class="kwc">String</span> line <span class="sym">= (</span><span class="kwc">String</span><span class="sym">)</span>li<span class="sym">.</span>next<span class="sym">();
</span><span class="line">   58 </span><span class="sym"></span>                <span class="kwa">if</span> <span class="sym">(</span>matcher<span class="sym">.</span>contains<span class="sym">(</span>line<span class="sym">,</span> pattern<span class="sym">)) {
</span><span class="line">   59 </span><span class="sym"></span>                    <span class="kwc">MatchResult</span> match <span class="sym">=</span> matcher<span class="sym">.</span>getMatch<span class="sym">();
</span><span class="line">   60 </span><span class="sym"></span>                    <span class="kwc">String</span> num <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;
</span><span class="line">   61 </span><span class="sym"></span>                    <span class="kwa">if</span> <span class="sym">(</span>match<span class="sym">.</span>group<span class="sym">(</span><span class="num">1</span><span class="sym">) !=</span> null<span class="sym">) {
</span><span class="line">   62 </span><span class="sym"></span>                        num <span class="sym">=</span> <span class="str">&quot;(&quot;</span> <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">1</span><span class="sym">) +</span> <span class="str">&quot;) &quot;</span> <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">3</span><span class="sym">) +</span> <span class="str">&quot;-&quot;</span> <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">4</span><span class="sym">);
</span><span class="line">   63 </span><span class="sym">                    }</span> <span class="kwa">else</span> <span class="sym">{
</span><span class="line">   64 </span><span class="sym"></span>                        num <span class="sym">=</span> <span class="str">&quot;(&quot;</span> <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">2</span><span class="sym">) +</span> <span class="str">&quot;) &quot;</span> <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">3</span><span class="sym">) +</span> <span class="str">&quot;-&quot;</span> <span class="sym">+</span> match<span class="sym">.</span>group<span class="sym">(</span><span class="num">4</span><span class="sym">);
</span><span class="line">   65 </span><span class="sym">                    }
</span><span class="line">   66 </span><span class="sym"></span>                    phones<span class="sym">.</span>addLast<span class="sym">(</span>num<span class="sym">);
</span><span class="line">   67 </span><span class="sym">                }
</span><span class="line">   68 </span><span class="sym">            }
</span><span class="line">   69 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(</span>i <span class="sym">== (</span>n <span class="num">- 1</span><span class="sym">)) {
</span><span class="line">   70 </span><span class="sym"></span>                <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   71 </span><span class="sym"></span>                <span class="kwa">for</span> <span class="sym">(</span><span class="kwc">ListIterator</span> li <span class="sym">=</span> phones<span class="sym">.</span>listIterator<span class="sym">();</span> li<span class="sym">.</span>hasNext<span class="sym">();) {
</span><span class="line">   72 </span><span class="sym"></span>                    <span class="kwc">String</span> num <span class="sym">= (</span><span class="kwc">String</span><span class="sym">)</span>li<span class="sym">.</span>next<span class="sym">();
</span><span class="line">   73 </span><span class="sym"></span>                    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>count<span class="sym">++ +</span> <span class="str">&quot;: &quot;</span> <span class="sym">+</span> num<span class="sym">);
</span><span class="line">   74 </span><span class="sym">                }
</span><span class="line">   75 </span><span class="sym">            }
</span><span class="line">   76 </span><span class="sym">        }
</span><span class="line">   77 </span><span class="sym">    }
</span><span class="line">   78 </span><span class="sym">}</span>
