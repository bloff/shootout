<span class="com">/*
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Written by Dima Dorfman, 2004
 * Compile: gcc -std=c99 -O2 -o nsieve_gcc nsieve.c
 */</span>

<span class="dir">#include &lt;limits.h&gt;
</span><span class="dir">#include &lt;stdbool.h&gt;
</span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;stdint.h&gt;
</span><span class="dir">#include &lt;string.h&gt;
</span>
<span class="kwb">static uintmax_t
</span>nsieve<span class="sym">(</span><span class="kwb">uintmax_t</span> m<span class="sym">)
{
</span>	<span class="kwb">uintmax_t</span> count<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">;
</span>	<span class="kwb">bool</span> a<span class="sym">[</span>m<span class="sym">];

</span>	memset<span class="sym">(</span>a<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span>a<span class="sym">));
</span>	count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>	<span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;</span> m<span class="sym">; ++</span>i<span class="sym">)
</span>		<span class="kwa">if</span> <span class="sym">(</span>a<span class="sym">[</span>i<span class="sym">]) {
</span>			<span class="kwa">for</span> <span class="sym">(</span>j <span class="sym">=</span> i <span class="sym">+</span> i<span class="sym">;</span> j <span class="sym">&lt;</span> m<span class="sym">;</span> j <span class="sym">+=</span> i<span class="sym">)
</span>				a<span class="sym">[</span>j<span class="sym">] =</span> <span class="num">0</span><span class="sym">;
			++</span>count<span class="sym">;
		}
</span>	<span class="kwa">return</span> <span class="sym">(</span>count<span class="sym">);
}

</span><span class="kwb">static void
</span>test<span class="sym">(</span><span class="kwb">unsigned long</span> n<span class="sym">)
{
</span>	<span class="kwb">uintmax_t</span> count<span class="sym">,</span> m<span class="sym">;

</span>	m <span class="sym">= (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n<span class="sym">) *</span> <span class="num">10000</span><span class="sym">;
</span>	count <span class="sym">=</span> nsieve<span class="sym">(</span>m<span class="sym">);
</span>	printf<span class="sym">(</span><span class="str">&quot;Primes up to %8ju %8ju</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> count<span class="sym">);
}

</span><span class="kwb">int
</span>main<span class="sym">(</span><span class="kwb">int</span> ac<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">**</span>av<span class="sym">)
{
</span>	<span class="kwb">unsigned long</span> n<span class="sym">;
</span>	<span class="kwb">char</span> <span class="sym">*</span>cp<span class="sym">;

</span>	<span class="kwa">if</span> <span class="sym">(</span>ac <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">) {
</span>usage<span class="sym">:</span>		fprintf<span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;usage: nsieve N</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span>		exit<span class="sym">(</span><span class="num">2</span><span class="sym">);
	}
</span>	n <span class="sym">=</span> strtoul<span class="sym">(</span>av<span class="sym">[</span><span class="num">1</span><span class="sym">], &amp;</span>cp<span class="sym">,</span> <span class="num">10</span><span class="sym">);
</span>	<span class="kwa">if</span> <span class="sym">(*</span>av<span class="sym">[</span><span class="num">1</span><span class="sym">] ==</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span> <span class="sym">|| *</span>cp <span class="sym">!=</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span> <span class="sym">||</span> n <span class="sym">==</span> ULONG_MAX<span class="sym">)
</span>		<span class="kwa">goto</span> usage<span class="sym">;
</span>	test<span class="sym">(</span>n<span class="sym">);
</span>	<span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;=</span> <span class="num">1</span><span class="sym">)
</span>		test<span class="sym">(</span>n <span class="num">- 1</span><span class="sym">);
</span>	<span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;=</span> <span class="num">2</span><span class="sym">)
</span>		test<span class="sym">(</span>n <span class="num">- 2</span><span class="sym">);
</span>	exit<span class="sym">(</span><span class="num">0</span><span class="sym">);
}</span>
