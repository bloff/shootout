<span class="slc">// -*- mode: c++ -*-
</span><span class="slc">// $Id: hash2-icpp.code,v 1.4 2005-03-21 08:36:36 bfulgham Exp $
</span><span class="slc">// http://shootout.alioth.debian.org/
</span>
<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;iostream&gt;
</span><span class="dir">#include &lt;ext/hash_map&gt;
</span>
<span class="kwa">using namespace</span> std<span class="sym">;
</span><span class="dir">#if (! defined(__INTEL_COMPILER))
</span><span class="kwa">using namespace</span> __gnu_cxx<span class="sym">;
</span><span class="dir">#endif
</span>
<span class="kwb">struct</span> eqstr <span class="sym">{
</span>   <span class="kwb">bool</span> <span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">const char</span><span class="sym">*</span> s1<span class="sym">,</span> <span class="kwb">const char</span><span class="sym">*</span> s2<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{
</span>      <span class="kwa">if</span> <span class="sym">(</span>s1 <span class="sym">==</span> s2<span class="sym">)</span> <span class="kwa">return true</span><span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">(!</span>s1 <span class="sym">|| !</span>s2<span class="sym">)</span> <span class="kwa">return false</span><span class="sym">;
</span>      <span class="kwa">while</span> <span class="sym">(*</span>s1 <span class="sym">!=</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span> <span class="sym">&amp;&amp; *</span>s1 <span class="sym">== *</span>s2<span class="sym">)
</span>         s1<span class="sym">++,</span> s2<span class="sym">++;
</span>      <span class="kwa">return</span> <span class="sym">*</span>s1 <span class="sym">== *</span>s2<span class="sym">;
   }
};

</span><span class="kwb">struct</span> strhash <span class="sym">{
</span><span class="dir">#if defined(__INTEL_COMPILER)
</span>   <span class="kwb">enum</span> <span class="sym">{</span> bucket_size <span class="sym">=</span> <span class="num">4</span><span class="sym">,</span> min_buckets <span class="sym">=</span> <span class="num">8</span> <span class="sym">};

</span>   <span class="kwb">bool</span> <span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">char const</span> <span class="sym">*</span>s1<span class="sym">,</span> <span class="kwb">char const</span> <span class="sym">*</span>s2<span class="sym">)</span> <span class="kwb">const
</span>        <span class="sym">{</span><span class="kwa">return</span> strcmp<span class="sym">(</span>s1<span class="sym">,</span> s2<span class="sym">) &lt;</span> <span class="num">0</span><span class="sym">;}
</span><span class="dir">#endif
</span>   <span class="kwb">size_t</span> <span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">const char</span><span class="sym">*</span> s<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{
</span>      <span class="kwb">size_t</span> i<span class="sym">;
</span>      <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">; *</span>s<span class="sym">;</span> s<span class="sym">++)
</span>         i <span class="sym">=</span> <span class="num">31</span> <span class="sym">*</span> i <span class="sym">+ *</span>s<span class="sym">;
</span>      <span class="kwa">return</span> i<span class="sym">;
   }
};

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span>    <span class="kwb">char</span> buf<span class="sym">[</span><span class="num">16</span><span class="sym">];
</span><span class="dir">#if defined(__INTEL_COMPILER)
</span>    <span class="kwc">typedef</span> hash_map<span class="sym">&lt;</span><span class="kwb">const char</span><span class="sym">*,</span> <span class="kwb">int</span><span class="sym">,</span> strhash<span class="sym">&gt;</span> HM<span class="sym">;
</span><span class="dir">#else
</span>    <span class="kwc">typedef</span> hash_map<span class="sym">&lt;</span><span class="kwb">const char</span><span class="sym">*,</span> <span class="kwb">int</span><span class="sym">,</span> strhash<span class="sym">,</span> eqstr<span class="sym">&gt;</span> HM<span class="sym">;
</span><span class="dir">#endif
</span>    HM hash1<span class="sym">,</span> hash2<span class="sym">;

</span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">10000</span><span class="sym">;</span> i<span class="sym">++) {
</span>        sprintf<span class="sym">(</span>buf<span class="sym">,</span> <span class="str">&quot;foo_%d&quot;</span><span class="sym">,</span> i<span class="sym">);
</span>        hash1<span class="sym">[</span>strdup<span class="sym">(</span>buf<span class="sym">)] =</span> i<span class="sym">;
    }
</span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>        <span class="kwa">for</span> <span class="sym">(</span>HM<span class="sym">::</span>iterator k <span class="sym">=</span> hash1<span class="sym">.</span>begin<span class="sym">();</span> k <span class="sym">!=</span> hash1<span class="sym">.</span>end<span class="sym">(); ++</span>k<span class="sym">) {
</span>            hash2<span class="sym">[(*</span>k<span class="sym">).</span>first<span class="sym">] +=</span> k<span class="sym">-&gt;</span>second<span class="sym">;
        }
    }
</span>    cout <span class="sym">&lt;&lt;</span> hash1<span class="sym">[</span><span class="str">&quot;foo_1&quot;</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> hash1<span class="sym">[</span><span class="str">&quot;foo_9999&quot;</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; &quot;</span>
         <span class="sym">&lt;&lt;</span> hash2<span class="sym">[</span><span class="str">&quot;foo_1&quot;</span><span class="sym">] &lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> hash2<span class="sym">[</span><span class="str">&quot;foo_9999&quot;</span><span class="sym">] &lt;&lt;</span> endl<span class="sym">;
}</span>
