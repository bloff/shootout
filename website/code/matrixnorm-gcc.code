<span class="com">/* The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Sebastien Loisel
 */</span>

<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;math.h&gt;
</span>
<span class="kwb">double</span> eval_A<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> j<span class="sym">) {</span> <span class="kwa">return</span> <span class="num">1.0</span><span class="sym">/((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span><span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">); }

</span><span class="kwb">void</span> eval_A_times_u<span class="sym">(</span><span class="kwb">int</span> N<span class="sym">,</span> <span class="kwb">const double</span> u<span class="sym">[],</span> <span class="kwb">double</span> Au<span class="sym">[])
{
</span>  <span class="kwb">int</span> i<span class="sym">,</span>j<span class="sym">;
</span>  <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>N<span class="sym">;</span>i<span class="sym">++)
    {
</span>      Au<span class="sym">[</span>i<span class="sym">]=</span><span class="num">0</span><span class="sym">;
</span>      <span class="kwa">for</span><span class="sym">(</span>j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>j<span class="sym">&lt;</span>N<span class="sym">;</span>j<span class="sym">++)</span> Au<span class="sym">[</span>i<span class="sym">]+=</span>eval_A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">)*</span>u<span class="sym">[</span>j<span class="sym">];
    }
}

</span><span class="kwb">void</span> eval_At_times_u<span class="sym">(</span><span class="kwb">int</span> N<span class="sym">,</span> <span class="kwb">const double</span> u<span class="sym">[],</span> <span class="kwb">double</span> Au<span class="sym">[])
{
</span>  <span class="kwb">int</span> i<span class="sym">,</span>j<span class="sym">;
</span>  <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>N<span class="sym">;</span>i<span class="sym">++)
    {
</span>      Au<span class="sym">[</span>i<span class="sym">]=</span><span class="num">0</span><span class="sym">;
</span>      <span class="kwa">for</span><span class="sym">(</span>j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>j<span class="sym">&lt;</span>N<span class="sym">;</span>j<span class="sym">++)</span> Au<span class="sym">[</span>i<span class="sym">]+=</span>eval_A<span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">)*</span>u<span class="sym">[</span>j<span class="sym">];
    }
}

</span><span class="kwb">void</span> eval_AtA_times_u<span class="sym">(</span><span class="kwb">int</span> N<span class="sym">,</span> <span class="kwb">const double</span> u<span class="sym">[],</span> <span class="kwb">double</span> AtAu<span class="sym">[])
{</span> <span class="kwb">double</span> v<span class="sym">[</span>N<span class="sym">];</span> eval_A_times_u<span class="sym">(</span>N<span class="sym">,</span>u<span class="sym">,</span>v<span class="sym">);</span> eval_At_times_u<span class="sym">(</span>N<span class="sym">,</span>v<span class="sym">,</span>AtAu<span class="sym">); }

</span><span class="kwb">int</span> main<span class="sym">()
{
</span>  <span class="kwb">int</span> N<span class="sym">=</span><span class="num">2000</span><span class="sym">,</span>i<span class="sym">;
</span>  <span class="kwb">double</span> u<span class="sym">[</span>N<span class="sym">],</span>v<span class="sym">[</span>N<span class="sym">],</span>vBv<span class="sym">,</span>vv<span class="sym">;
</span>  <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>N<span class="sym">;</span>i<span class="sym">++)</span> u<span class="sym">[</span>i<span class="sym">]=</span><span class="num">1</span><span class="sym">;
</span>  <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span><span class="num">10</span><span class="sym">;</span>i<span class="sym">++)
    {
</span>      eval_AtA_times_u<span class="sym">(</span>N<span class="sym">,</span>u<span class="sym">,</span>v<span class="sym">);
</span>      eval_AtA_times_u<span class="sym">(</span>N<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">);
    }
</span>  vBv<span class="sym">=</span>vv<span class="sym">=</span><span class="num">0</span><span class="sym">;
</span>  <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>N<span class="sym">;</span>i<span class="sym">++) {</span> vBv<span class="sym">+=</span>u<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];</span> vv<span class="sym">+=</span>v<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">]; }
</span>  printf<span class="sym">(</span><span class="str">&quot;%0.20f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>sqrt<span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">));
</span>  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}
</span>
