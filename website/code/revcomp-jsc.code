<span class="com">/*</span>
<span class="com">The Computer Language Shootout</span>
<span class="com">http://shootout.alioth.debian.org/</span>
<span class="com">Contributed by Jesse Millikan</span>
<span class="com">*/</span>

<span class="kwa">var</span> keys<span class="sym">=</span><span class="str">'WSATUGCYRKMBDHVN'</span><span class="sym">,</span>
    comps<span class="sym">=</span><span class="str">'WSTAACGRYMKVHDBN'</span><span class="sym">,</span>
    complement<span class="sym">=[],</span>
    seq<span class="sym">=</span><span class="str">&quot;&quot;</span><span class="sym">,</span>l<span class="sym">,</span>i

<span class="kwa">for</span><span class="sym">(</span>i <span class="kwa">in</span> keys<span class="sym">)</span> complement<span class="sym">[</span>keys<span class="sym">.</span><span class="kwc">charCodeAt</span><span class="sym">(</span>i<span class="sym">)] =</span> comps<span class="sym">[</span>i<span class="sym">]</span>

<span class="kwa">function</span> <span class="kwd">revcomp</span><span class="sym">(</span>seq<span class="sym">){</span>
 <span class="kwa">var</span> rseq <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">,</span> l <span class="sym">=</span> seq<span class="sym">.</span><span class="kwc">length</span> <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> i

 <span class="kwa">for</span><span class="sym">(</span>i <span class="sym">=</span> l<span class="sym">;</span> i <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;</span> i<span class="sym">--)</span>
  rseq <span class="sym">+=</span> complement<span class="sym">[</span>seq<span class="sym">.</span><span class="kwc">charCodeAt</span><span class="sym">(</span>i<span class="sym">)]</span>

 <span class="kwa">for</span><span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> l<span class="sym">;</span> i <span class="sym">+=</span> <span class="num">60</span><span class="sym">)</span>
  <span class="kwc">print</span><span class="sym">(</span>rseq<span class="sym">.</span><span class="kwc">substr</span><span class="sym">(</span>i<span class="sym">,</span> <span class="num">60</span><span class="sym">))</span>
<span class="sym">}</span>

<span class="kwa">while</span><span class="sym">(</span>l <span class="sym">=</span> <span class="kwd">readline</span><span class="sym">()){</span>
 <span class="kwa">if</span><span class="sym">(</span>l<span class="sym">.</span><span class="kwc">match</span><span class="sym">(/&gt;/)){</span>
  <span class="kwa">if</span><span class="sym">(</span>seq<span class="sym">.</span><span class="kwc">length</span> <span class="sym">!=</span> <span class="num">0</span><span class="sym">){</span>
   <span class="kwd">revcomp</span><span class="sym">(</span>seq<span class="sym">)</span>
   seq <span class="sym">=</span> <span class="str">&quot;&quot;</span>
  <span class="sym">}</span>
  <span class="kwc">print</span><span class="sym">(</span>l<span class="sym">)</span>
 <span class="sym">}</span>
 <span class="kwa">else</span> seq <span class="sym">+=</span> l<span class="sym">.</span><span class="kwc">toUpperCase</span><span class="sym">()</span>
<span class="sym">}</span>

<span class="kwd">revcomp</span><span class="sym">(</span>seq<span class="sym">)</span>
