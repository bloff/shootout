<span class="slc">// -*-c++-*-
</span><span class="slc">// The Great Computer Language Shootout
</span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="slc">//
</span><span class="slc">// contributed by Sebastien Loisel
</span><span class="slc">//
</span><span class="slc">// OVERVIEW: In this test, we solve an ordinary differential equation
</span><span class="slc">//    u'=f(t,u)
</span><span class="slc">// using the Trapezoid numerical method, which can be written as
</span><span class="slc">//    (u[k+1]-u[k])=(f(t[k],u[k])+f(t[k]+dt,u[k+1]))*dt/2,
</span><span class="slc">// where t[k], u[k], dt and the function f are known and u[k+1] is the
</span><span class="slc">// unknown.
</span><span class="slc">//
</span><span class="slc">// Since u[k+1] appears on both sides of the equation, we use an iterative
</span><span class="slc">// solver called the newton iteration to compute u[k+1]. The newton iteration
</span><span class="slc">// computes the solution to
</span><span class="slc">//    h(x)=0
</span><span class="slc">// where h is a known function and x is the unknown 0 of h, using the method
</span><span class="slc">//    x[k+1]=x[k]-f(x[k])/f'(x[k]).
</span><span class="slc">// Here, f' denotes the derivative of f.
</span><span class="slc">//
</span><span class="slc">// To compute f' from the definition of f alone, we use a technique called
</span><span class="slc">// automatic differentiation. This works by replacing all floating point
</span><span class="slc">// variables by a special type we call ad (for automatic differentiation.)
</span><span class="slc">// If the python program for f is called with parameter x of type ad,
</span><span class="slc">// it will do the same work as if it were called with the equivalent parameter
</span><span class="slc">// of type floating point, but will also return f'. That's why it's called
</span><span class="slc">// &quot;automatic.&quot;
</span><span class="slc">//
</span><span class="slc">// To shake things up, we also have another type, fl (for &quot;float&quot;) which
</span><span class="slc">// works exactly like a double precision floating point, but with much
</span><span class="slc">// less precision.
</span>
<span class="dir">#include &lt;math.h&gt;
</span><span class="dir">#include &lt;iostream&gt;
</span><span class="dir">#include &lt;complex&gt;
</span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;string&gt;
</span>
<span class="kwa">using namespace</span> std<span class="sym">;
</span><span class="dir">#define op operator
</span>
<span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> F<span class="sym">&gt;</span> F sqr<span class="sym">(</span><span class="kwb">const</span> F <span class="sym">&amp;</span>x<span class="sym">) {</span> <span class="kwa">return</span> x<span class="sym">*</span>x<span class="sym">; }
</span><span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> F<span class="sym">&gt;</span> F pow<span class="sym">(</span><span class="kwb">const</span> F <span class="sym">&amp;</span>x<span class="sym">,</span> <span class="kwb">int</span> i<span class="sym">)
{</span> <span class="kwa">if</span><span class="sym">(</span>i<span class="sym">&lt;=</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> F<span class="sym">(</span><span class="num">1</span><span class="sym">);</span> <span class="kwa">if</span><span class="sym">(</span>i<span class="sym">&amp;</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">return</span> x<span class="sym">*</span>pow<span class="sym">(</span>x<span class="sym">,</span>i<span class="num">-1</span><span class="sym">);</span> <span class="kwa">return</span> sqr<span class="sym">(</span>pow<span class="sym">(</span>x<span class="sym">,</span>i<span class="sym">/</span><span class="num">2</span><span class="sym">)); }

</span><span class="kwb">struct</span> fl
<span class="sym">{
</span>  <span class="kwb">double</span> a<span class="sym">;
</span>  fl<span class="sym">() :</span> a<span class="sym">(</span><span class="num">0</span><span class="sym">) {}
</span>  <span class="kwb">void</span> set<span class="sym">(</span><span class="kwb">const double</span> x<span class="sym">)
  {
</span>    <span class="kwa">if</span><span class="sym">(</span>x<span class="sym">==</span><span class="num">0</span><span class="sym">) {</span> a<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> <span class="kwa">return</span><span class="sym">; }
</span>    <span class="kwb">int</span> k<span class="sym">=(</span><span class="kwb">int</span><span class="sym">)</span>log<span class="sym">(</span>fabs<span class="sym">(</span>x<span class="sym">));
</span>    a<span class="sym">=</span>round<span class="sym">(</span>x<span class="sym">*</span>exp<span class="sym">(-</span>k<span class="sym">+</span><span class="num">6.0</span><span class="sym">))*</span>exp<span class="sym">(</span>k<span class="num">-6.0</span><span class="sym">);
  }
</span>  fl<span class="sym">(</span><span class="kwb">int</span> x<span class="sym">) {</span> set<span class="sym">(</span>x<span class="sym">); }
</span>  fl<span class="sym">(</span><span class="kwb">double</span> x<span class="sym">) {</span> set<span class="sym">(</span>x<span class="sym">); }
</span>  fl op <span class="sym">+(</span><span class="kwb">const</span> fl <span class="sym">&amp;</span>y<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{</span> <span class="kwa">return</span> fl<span class="sym">(</span>a<span class="sym">+</span>y<span class="sym">.</span>a<span class="sym">); }
</span>  fl <span class="sym">&amp;</span>op <span class="sym">+=(</span><span class="kwb">const</span> fl <span class="sym">&amp;</span>y<span class="sym">) { *</span><span class="kwa">this</span><span class="sym">=(*</span><span class="kwa">this</span><span class="sym">)+</span>y<span class="sym">;</span> <span class="kwa">return</span> <span class="sym">*</span><span class="kwa">this</span><span class="sym">; }
</span>  fl op <span class="sym">-(</span><span class="kwb">const</span> fl <span class="sym">&amp;</span>y<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{</span> <span class="kwa">return</span> fl<span class="sym">(</span>a<span class="sym">-</span>y<span class="sym">.</span>a<span class="sym">); }
</span>  fl <span class="sym">&amp;</span>op <span class="sym">-=(</span><span class="kwb">const</span> fl <span class="sym">&amp;</span>y<span class="sym">) { *</span><span class="kwa">this</span><span class="sym">=(*</span><span class="kwa">this</span><span class="sym">)-</span>y<span class="sym">;</span> <span class="kwa">return</span> <span class="sym">*</span><span class="kwa">this</span><span class="sym">; }
</span>  fl op <span class="sym">*(</span><span class="kwb">const</span> fl <span class="sym">&amp;</span>y<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{</span> <span class="kwa">return</span> fl<span class="sym">(</span>a<span class="sym">*</span>y<span class="sym">.</span>a<span class="sym">); }
</span>  fl op <span class="sym">/(</span><span class="kwb">const</span> fl <span class="sym">&amp;</span>y<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{</span> <span class="kwa">return</span> fl<span class="sym">(</span>a<span class="sym">/</span>y<span class="sym">.</span>a<span class="sym">); }
};

</span><span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> F<span class="sym">&gt;
</span><span class="kwb">struct</span> ad
<span class="sym">{
</span>  F x<span class="sym">,</span>dx<span class="sym">;
</span>  ad<span class="sym">() :</span> x<span class="sym">(</span><span class="num">0</span><span class="sym">),</span> dx<span class="sym">(</span><span class="num">0</span><span class="sym">) {}
</span>  ad<span class="sym">(</span><span class="kwb">int</span> y<span class="sym">) :</span> x<span class="sym">(</span>y<span class="sym">),</span> dx<span class="sym">(</span><span class="num">0</span><span class="sym">) {}
</span>  ad<span class="sym">(</span><span class="kwb">const</span> F <span class="sym">&amp;</span>y<span class="sym">,</span> F dy<span class="sym">=</span>F<span class="sym">(</span><span class="num">0</span><span class="sym">)) :</span> x<span class="sym">(</span>y<span class="sym">),</span> dx<span class="sym">(</span>dy<span class="sym">) {}
</span>  ad op <span class="sym">+(</span><span class="kwb">const</span> ad <span class="sym">&amp;</span>y<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{</span> <span class="kwa">return</span> ad<span class="sym">(</span>x<span class="sym">+</span>y<span class="sym">.</span>x<span class="sym">,</span>dx<span class="sym">+</span>y<span class="sym">.</span>dx<span class="sym">); }
</span>  ad op <span class="sym">-(</span><span class="kwb">const</span> ad <span class="sym">&amp;</span>y<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{</span> <span class="kwa">return</span> ad<span class="sym">(</span>x<span class="sym">-</span>y<span class="sym">.</span>x<span class="sym">,</span>dx<span class="sym">-</span>y<span class="sym">.</span>dx<span class="sym">); }
</span>  ad op <span class="sym">*(</span><span class="kwb">const</span> ad <span class="sym">&amp;</span>y<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{</span> <span class="kwa">return</span> ad<span class="sym">(</span>x<span class="sym">*</span>y<span class="sym">.</span>x<span class="sym">,</span>dx<span class="sym">*</span>y<span class="sym">.</span>x<span class="sym">+</span>x<span class="sym">*</span>y<span class="sym">.</span>dx<span class="sym">); }
</span>  ad op <span class="sym">/ (</span><span class="kwb">const</span> ad <span class="sym">&amp;</span>y<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{</span> <span class="kwa">return</span> ad<span class="sym">(</span>x<span class="sym">/</span>y<span class="sym">.</span>x<span class="sym">,(</span>dx<span class="sym">*</span>y<span class="sym">.</span>x<span class="sym">-</span>x<span class="sym">*</span>y<span class="sym">.</span>dx<span class="sym">)/(</span>y<span class="sym">.</span>x<span class="sym">*</span>y<span class="sym">.</span>x<span class="sym">)); }
};

</span><span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> F<span class="sym">&gt;</span> F rat<span class="sym">(</span><span class="kwb">const</span> F <span class="sym">&amp;</span>x<span class="sym">)
{</span> <span class="kwa">return</span> <span class="sym">(</span>x<span class="sym">*</span>F<span class="sym">(</span><span class="num">2</span><span class="sym">)+</span>pow<span class="sym">(</span>x<span class="sym">,</span><span class="num">2</span><span class="sym">)*</span>F<span class="sym">(</span><span class="num">3</span><span class="sym">)+</span>pow<span class="sym">(</span>x<span class="sym">,</span><span class="num">6</span><span class="sym">)*</span>F<span class="sym">(</span><span class="num">7</span><span class="sym">)+</span>pow<span class="sym">(</span>x<span class="sym">,</span><span class="num">11</span><span class="sym">)*</span>F<span class="sym">(</span><span class="num">5</span><span class="sym">)+</span>F<span class="sym">(</span><span class="num">1</span><span class="sym">))/
    (</span>x<span class="sym">*</span>F<span class="sym">(</span><span class="num">5</span><span class="sym">)-</span>pow<span class="sym">(</span>x<span class="sym">,</span><span class="num">3</span><span class="sym">)*</span>F<span class="sym">(</span><span class="num">6</span><span class="sym">)-</span>pow<span class="sym">(</span>x<span class="sym">,</span><span class="num">7</span><span class="sym">)*</span>F<span class="sym">(</span><span class="num">3</span><span class="sym">)+</span>F<span class="sym">(</span><span class="num">2</span><span class="sym">)); }

</span><span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> F<span class="sym">,</span> <span class="kwc">class</span> fun<span class="sym">&gt;
</span>F newton<span class="sym">(</span>F x0<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">,</span> fun <span class="sym">&amp;</span>g<span class="sym">)
{
</span>  ad<span class="sym">&lt;</span>F<span class="sym">&gt;</span> val<span class="sym">;</span> <span class="kwb">int</span> i<span class="sym">;
</span>  <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>n<span class="sym">;</span>i<span class="sym">++) {</span> val<span class="sym">=</span>g<span class="sym">(</span>ad<span class="sym">&lt;</span>F<span class="sym">&gt;(</span>x0<span class="sym">,</span>F<span class="sym">(</span><span class="num">1</span><span class="sym">)));</span> x0<span class="sym">=</span>x0<span class="sym">-</span>val<span class="sym">.</span>x<span class="sym">/</span>val<span class="sym">.</span>dx<span class="sym">; }
</span>  <span class="kwa">return</span> x0<span class="sym">;
}

</span><span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> F<span class="sym">&gt;</span> <span class="kwb">struct</span> sqrfinder
<span class="sym">{</span> ad<span class="sym">&lt;</span>F<span class="sym">&gt;</span> op <span class="sym">() (</span><span class="kwb">const</span> ad<span class="sym">&lt;</span>F<span class="sym">&gt; &amp;</span>z<span class="sym">) {</span> <span class="kwa">return</span> sqr<span class="sym">(</span>z<span class="sym">)-</span>ad<span class="sym">&lt;</span>F<span class="sym">&gt;(</span><span class="num">2</span><span class="sym">); } };
</span><span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> F<span class="sym">&gt;</span> <span class="kwb">struct</span> ratfinder
<span class="sym">{</span> ad<span class="sym">&lt;</span>F<span class="sym">&gt;</span> op <span class="sym">() (</span><span class="kwb">const</span> ad<span class="sym">&lt;</span>F<span class="sym">&gt; &amp;</span>z<span class="sym">) {</span> <span class="kwa">return</span> rat<span class="sym">(</span>z<span class="sym">); } };

</span><span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> F<span class="sym">,</span> <span class="kwc">class</span> fun<span class="sym">&gt;
</span><span class="kwb">struct</span> trapezoid_method_rooter
<span class="sym">{
</span>  fun g<span class="sym">;
</span>  ad<span class="sym">&lt;</span>F<span class="sym">&gt;</span> g0<span class="sym">;
</span>  F y0<span class="sym">,</span>t0<span class="sym">,</span>t1<span class="sym">;
</span>  trapezoid_method_rooter<span class="sym">(</span>fun <span class="sym">&amp;</span>G<span class="sym">,</span> <span class="kwb">const</span> F <span class="sym">&amp;</span>Y0<span class="sym">,</span> <span class="kwb">const</span> F <span class="sym">&amp;</span>T0<span class="sym">,</span> <span class="kwb">const</span> F <span class="sym">&amp;</span>T1<span class="sym">) :
</span>    g<span class="sym">(</span>G<span class="sym">),</span>y0<span class="sym">(</span>Y0<span class="sym">),</span>t0<span class="sym">(</span>T0<span class="sym">),</span>t1<span class="sym">(</span>T1<span class="sym">),</span>g0<span class="sym">(</span>G<span class="sym">(</span>T0<span class="sym">,</span>Y0<span class="sym">)) {}
</span>  ad<span class="sym">&lt;</span>F<span class="sym">&gt;</span> op <span class="sym">() (</span><span class="kwb">const</span> ad<span class="sym">&lt;</span>F<span class="sym">&gt; &amp;</span>y1<span class="sym">)
  {</span> <span class="kwa">return</span> <span class="sym">(</span>g<span class="sym">(</span>ad<span class="sym">&lt;</span>F<span class="sym">&gt;(</span>t1<span class="sym">),</span>y1<span class="sym">)+</span>g0<span class="sym">)*((</span>t1<span class="sym">-</span>t0<span class="sym">)/</span>F<span class="sym">(</span><span class="num">2</span><span class="sym">))+</span>ad<span class="sym">&lt;</span>F<span class="sym">&gt;(</span>y0<span class="sym">)-</span>y1<span class="sym">; }
};

</span><span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> F<span class="sym">,</span> <span class="kwc">class</span> fun<span class="sym">&gt;
</span>F trapezoid_method<span class="sym">(</span>F t0<span class="sym">,</span> <span class="kwb">const</span> F <span class="sym">&amp;</span>dt<span class="sym">,</span> F y0<span class="sym">,</span> fun <span class="sym">&amp;</span>g<span class="sym">,</span> <span class="kwb">int</span> numsteps<span class="sym">)
{
</span>  <span class="kwb">int</span> i<span class="sym">;
</span>  <span class="kwa">for</span><span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>numsteps<span class="sym">;</span>i<span class="sym">++)
    {
</span>      trapezoid_method_rooter<span class="sym">&lt;</span>F<span class="sym">,</span>fun<span class="sym">&gt;</span> solver<span class="sym">(</span>g<span class="sym">,</span>y0<span class="sym">,</span>t0<span class="sym">,</span>t0<span class="sym">+</span>dt<span class="sym">);
</span>      y0<span class="sym">=</span>newton<span class="sym">(</span>y0<span class="sym">,</span><span class="num">10</span><span class="sym">,</span>solver<span class="sym">);</span> t0<span class="sym">=</span>t0<span class="sym">+</span>dt<span class="sym">;
    }
</span>  <span class="kwa">return</span> y0<span class="sym">;
}

</span>string pr<span class="sym">(</span><span class="kwb">double</span> x<span class="sym">) {</span> <span class="kwb">char</span> s<span class="sym">[</span><span class="num">100</span><span class="sym">];</span> sprintf<span class="sym">(</span>s<span class="sym">,</span><span class="str">&quot;%.12e&quot;</span><span class="sym">,</span>x<span class="sym">);</span> <span class="kwa">return</span> string<span class="sym">(</span>s<span class="sym">); }
</span>string pr<span class="sym">(</span><span class="kwb">const</span> fl <span class="sym">&amp;</span>x<span class="sym">) {
</span>  <span class="kwb">char</span> s<span class="sym">[</span><span class="num">100</span><span class="sym">];
</span>  sprintf<span class="sym">(</span>s<span class="sym">,</span><span class="str">&quot;%.2e&quot;</span><span class="sym">,</span>x<span class="sym">.</span>a<span class="sym">);
</span>  <span class="kwa">return</span> string<span class="sym">(</span>s<span class="sym">);
}

</span><span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> F<span class="sym">&gt;
</span>string pr<span class="sym">(</span><span class="kwb">const complex</span><span class="sym">&lt;</span>F<span class="sym">&gt; &amp;</span>x<span class="sym">) {</span> <span class="kwa">return</span> pr<span class="sym">(</span>real<span class="sym">(</span>x<span class="sym">))+</span><span class="str">&quot; &quot;</span><span class="sym">+</span>pr<span class="sym">(</span>imag<span class="sym">(</span>x<span class="sym">)); }
</span><span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> F<span class="sym">&gt;
</span>ostream <span class="sym">&amp;</span> op <span class="sym">&lt;&lt;(</span>ostream <span class="sym">&amp;</span>o<span class="sym">,</span> <span class="kwb">const</span> ad<span class="sym">&lt;</span>F<span class="sym">&gt; &amp;</span>x<span class="sym">) {
</span>  <span class="kwa">return</span> o<span class="sym">&lt;&lt;</span>pr<span class="sym">(</span>x<span class="sym">.</span>x<span class="sym">)&lt;&lt;</span><span class="str">&quot; &quot;</span><span class="sym">&lt;&lt;</span>pr<span class="sym">(</span>x<span class="sym">.</span>dx<span class="sym">);
}

</span><span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> F<span class="sym">&gt;
</span><span class="kwb">struct</span> sqrintegrand <span class="sym">{</span> F op <span class="sym">() (</span><span class="kwb">const</span> F <span class="sym">&amp;</span>t<span class="sym">,</span> <span class="kwb">const</span> F <span class="sym">&amp;</span>y<span class="sym">) {</span> <span class="kwa">return</span> sqr<span class="sym">(</span>y<span class="sym">); } };
</span><span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> F<span class="sym">&gt;
</span><span class="kwb">struct</span> ratintegrand <span class="sym">{</span> F op <span class="sym">() (</span><span class="kwb">const</span> F <span class="sym">&amp;</span>t<span class="sym">,</span> <span class="kwb">const</span> F <span class="sym">&amp;</span>y<span class="sym">) {</span> <span class="kwa">return</span> rat<span class="sym">(</span>y<span class="sym">)-</span>t<span class="sym">; } };

</span><span class="kwc">template</span> <span class="sym">&lt;</span><span class="kwc">class</span> F<span class="sym">&gt;
</span><span class="kwb">void</span> integrate_functions<span class="sym">(</span>F x0<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">)
{
</span>  sqrintegrand<span class="sym">&lt;</span>ad<span class="sym">&lt;</span>F<span class="sym">&gt; &gt;</span> i1<span class="sym">;
</span>  ratintegrand<span class="sym">&lt;</span>ad<span class="sym">&lt;</span>F<span class="sym">&gt; &gt;</span> i2<span class="sym">;
</span>  cout<span class="sym">&lt;&lt;</span><span class="str">&quot;i1 &quot;</span><span class="sym">&lt;&lt;</span>pr<span class="sym">(</span>trapezoid_method<span class="sym">(</span>F<span class="sym">(</span><span class="num">1</span><span class="sym">),</span>F<span class="sym">(</span><span class="num">1</span><span class="sym">)/</span>F<span class="sym">(</span>n<span class="sym">),</span>x0<span class="sym">,</span>i1<span class="sym">,</span>n<span class="sym">))
    &lt;&lt;</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">i2 &quot;</span><span class="sym">&lt;&lt;</span>pr<span class="sym">(</span>trapezoid_method<span class="sym">(</span>F<span class="sym">(</span><span class="num">1</span><span class="sym">),</span>F<span class="sym">(</span><span class="num">1</span><span class="sym">)/</span>F<span class="sym">(</span>n<span class="sym">),</span>x0<span class="sym">,</span>i2<span class="sym">,</span>n<span class="sym">))&lt;&lt;</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
}

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])
{
</span>  <span class="kwb">int</span> N<span class="sym">=(</span>argc<span class="sym">==</span><span class="num">2</span><span class="sym">)</span>?<span class="sym">(</span>atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])):</span><span class="num">50</span><span class="sym">;
</span>  sqrfinder<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;</span> mysqrt<span class="sym">;</span> ratfinder<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;</span> myratt<span class="sym">;
</span>  <span class="kwb">double</span> x<span class="sym">(</span>newton<span class="sym">(-</span><span class="num">1.0</span><span class="sym">,</span><span class="num">6</span><span class="sym">,</span>myratt<span class="sym">));
</span>  cout<span class="sym">&lt;&lt;</span><span class="str">&quot;rational_taylor_series: &quot;</span><span class="sym">&lt;&lt;</span>rat<span class="sym">(</span>ad<span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;(</span><span class="num">0.25</span><span class="sym">,</span><span class="num">1.0</span><span class="sym">))&lt;&lt;</span>endl<span class="sym">;
</span>  cout<span class="sym">&lt;&lt;</span><span class="str">&quot;newton-sqrt_2: &quot;</span><span class="sym">&lt;&lt;</span>pr<span class="sym">(</span>newton<span class="sym">(</span><span class="num">1.0</span><span class="sym">,</span><span class="num">10</span><span class="sym">,</span>mysqrt<span class="sym">))&lt;&lt;</span>endl<span class="sym">;
</span>  cout<span class="sym">&lt;&lt;</span><span class="str">&quot;newton-rat: &quot;</span><span class="sym">&lt;&lt;</span>pr<span class="sym">(</span>x<span class="sym">)&lt;&lt;</span>endl<span class="sym">;
</span>  integrate_functions<span class="sym">(</span><span class="num">0.02</span><span class="sym">,</span>N<span class="sym">*</span><span class="num">4</span><span class="sym">);
</span>  integrate_functions<span class="sym">(</span>fl<span class="sym">(</span><span class="num">0.02</span><span class="sym">),</span>N<span class="sym">);
</span>  integrate_functions<span class="sym">(</span><span class="kwb">complex</span><span class="sym">&lt;</span><span class="kwb">double</span><span class="sym">&gt;(</span><span class="num">0.02</span><span class="sym">,</span><span class="num">0.02</span><span class="sym">),</span>N<span class="sym">);
</span>  integrate_functions<span class="sym">(</span><span class="kwb">complex</span><span class="sym">&lt;</span>fl<span class="sym">&gt;(</span>fl<span class="sym">(</span><span class="num">0.02</span><span class="sym">),</span>fl<span class="sym">(</span><span class="num">0.02</span><span class="sym">)),</span>N<span class="sym">);
</span>  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}</span>
