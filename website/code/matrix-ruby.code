<span class="slc">#!/usr/bin/ruby
</span><span class="slc"># -*- mode: ruby -*-
</span><span class="slc"># $Id: matrix-ruby.code,v 1.8 2005-05-23 06:14:21 bfulgham Exp $
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># Contributed by Christopher Williams
</span>
n = <span class="sym">(</span><span class="kwa">ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">] ||</span> <span class="num">60</span><span class="sym">)</span>.to_i
size = <span class="num">30

</span><span class="kwa">def</span> mkmatrix<span class="sym">(</span>rows<span class="sym">,</span> cols<span class="sym">)
</span>  count = <span class="num">0
</span>  Array.new<span class="sym">(</span>rows<span class="sym">)</span> <span class="kwa">do</span> <span class="sym">|</span>i<span class="sym">|
</span>    Array.new<span class="sym">(</span>cols<span class="sym">) {|</span>j<span class="sym">|</span> count <span class="sym">+</span>=<span class="num">1</span> <span class="sym">}
</span>  <span class="kwa">end
end

def</span> mmult<span class="sym">(</span>rows<span class="sym">,</span> cols<span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">)
</span>  m3 = <span class="sym">[]
</span>  <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span> .. <span class="sym">(</span>rows <span class="num">- 1</span><span class="sym">)
</span>    row = <span class="sym">[]
</span>    <span class="kwa">for</span> j <span class="kwa">in</span> <span class="num">0</span> .. <span class="sym">(</span>cols <span class="num">- 1</span><span class="sym">)
</span>      val = <span class="num">0
</span>      <span class="kwa">for</span> k <span class="kwa">in</span> <span class="num">0</span> .. <span class="sym">(</span>cols <span class="num">- 1</span><span class="sym">)
</span>        val <span class="sym">+</span>= m1<span class="sym">[</span>i<span class="sym">][</span>k<span class="sym">] *</span> m2<span class="sym">[</span>k<span class="sym">][</span>j<span class="sym">]
</span>      <span class="kwa">end
</span>      row <span class="sym">&lt;&lt;</span> val
    <span class="kwa">end
</span>    m3 <span class="sym">&lt;&lt;</span> row
  <span class="kwa">end
</span>  m3
<span class="kwa">end

</span>m1 = mkmatrix<span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">)
</span>m2 = mkmatrix<span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">)
</span>mm = <span class="sym">[]
</span>n.times <span class="kwa">do
</span>  mm = mmult<span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">)
</span><span class="kwa">end
</span>puts <span class="str">&quot;#{mm[0][0]} #{mm[2][3]} #{mm[3][2]} #{mm[4][4]}&quot;</span>
