<span class="line">    1 </span><span class="slc">#!/usr/bin/ruby
</span><span class="line">    2 </span><span class="slc"></span><span class="slc"># -*- mode: ruby -*-
</span><span class="line">    3 </span><span class="slc"></span><span class="slc"># $Id: matrix-ruby.code,v 1.3 2004-11-11 07:14:00 bfulgham Exp $
</span><span class="line">    4 </span><span class="slc"></span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span>n = Integer<span class="sym">(</span><span class="kwa">ARGV</span>.shift <span class="sym">||</span> <span class="num">1</span><span class="sym">)
</span><span class="line">    7 </span><span class="sym">
</span><span class="line">    8 </span><span class="sym"></span>size = <span class="num">30
</span><span class="line">    9 </span><span class="num">
</span><span class="line">   10 </span><span class="num"></span><span class="kwa">def</span> mkmatrix<span class="sym">(</span>rows<span class="sym">,</span> cols<span class="sym">)
</span><span class="line">   11 </span><span class="sym"></span>    count = <span class="num">1
</span><span class="line">   12 </span><span class="num"></span>    mx = Array.new<span class="sym">(</span>rows<span class="sym">)
</span><span class="line">   13 </span><span class="sym"></span>    <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span> .. <span class="sym">(</span>rows <span class="num">- 1</span><span class="sym">)
</span><span class="line">   14 </span><span class="sym"></span>        row = Array.new<span class="sym">(</span>cols<span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span><span class="line">   15 </span><span class="sym"></span>        <span class="kwa">for</span> j <span class="kwa">in</span> <span class="num">0</span> .. <span class="sym">(</span>cols <span class="num">- 1</span><span class="sym">)
</span><span class="line">   16 </span><span class="sym"></span>            row<span class="sym">[</span>j<span class="sym">]</span> = count
<span class="line">   17 </span>            count <span class="sym">+</span>= <span class="num">1
</span><span class="line">   18 </span><span class="num"></span>        <span class="kwa">end
</span><span class="line">   19 </span><span class="kwa"></span>        mx<span class="sym">[</span>i<span class="sym">]</span> = row
<span class="line">   20 </span>    <span class="kwa">end
</span><span class="line">   21 </span><span class="kwa"></span>    mx
<span class="line">   22 </span><span class="kwa">end
</span><span class="line">   23 </span><span class="kwa">
</span><span class="line">   24 </span><span class="kwa">def</span> mmult<span class="sym">(</span>rows<span class="sym">,</span> cols<span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">)
</span><span class="line">   25 </span><span class="sym"></span>    m3 = Array.new<span class="sym">(</span>rows<span class="sym">)
</span><span class="line">   26 </span><span class="sym"></span>    <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span> .. <span class="sym">(</span>rows <span class="num">- 1</span><span class="sym">)
</span><span class="line">   27 </span><span class="sym"></span>        row = Array.new<span class="sym">(</span>cols<span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span><span class="line">   28 </span><span class="sym"></span>        <span class="kwa">for</span> j <span class="kwa">in</span> <span class="num">0</span> .. <span class="sym">(</span>cols <span class="num">- 1</span><span class="sym">)
</span><span class="line">   29 </span><span class="sym"></span>            val = <span class="num">0
</span><span class="line">   30 </span><span class="num"></span>            <span class="kwa">for</span> k <span class="kwa">in</span> <span class="num">0</span> .. <span class="sym">(</span>cols <span class="num">- 1</span><span class="sym">)
</span><span class="line">   31 </span><span class="sym"></span>                val <span class="sym">+</span>= m1.at<span class="sym">(</span>i<span class="sym">)</span>.at<span class="sym">(</span>k<span class="sym">) *</span> m2.at<span class="sym">(</span>k<span class="sym">)</span>.at<span class="sym">(</span>j<span class="sym">)
</span><span class="line">   32 </span><span class="sym"></span>            <span class="kwa">end
</span><span class="line">   33 </span><span class="kwa"></span>            row<span class="sym">[</span>j<span class="sym">]</span> = val
<span class="line">   34 </span>        <span class="kwa">end
</span><span class="line">   35 </span><span class="kwa"></span>        m3<span class="sym">[</span>i<span class="sym">]</span> = row
<span class="line">   36 </span>    <span class="kwa">end
</span><span class="line">   37 </span><span class="kwa"></span>    m3
<span class="line">   38 </span><span class="kwa">end
</span><span class="line">   39 </span><span class="kwa">
</span><span class="line">   40 </span><span class="kwa"></span>m1 = mkmatrix<span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">)
</span><span class="line">   41 </span><span class="sym"></span>m2 = mkmatrix<span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">)
</span><span class="line">   42 </span><span class="sym"></span>mm = Array.new
<span class="line">   43 </span>n.times <span class="kwa">do
</span><span class="line">   44 </span><span class="kwa"></span>    mm = mmult<span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">)
</span><span class="line">   45 </span><span class="sym"></span><span class="kwa">end
</span><span class="line">   46 </span><span class="kwa"></span>puts <span class="str">&quot;#{mm[0][0]} #{mm[2][3]} #{mm[3][2]} #{mm[4][4]}&quot;</span>
