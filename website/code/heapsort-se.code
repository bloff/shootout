<span class="slc">-- -*- mode: eiffel -*-</span>
<span class="slc">-- $Id: heapsort-se.code,v 1.11 2005-12-23 06:48:47 bfulgham Exp $</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Modified to use FIXED_ARRAY by Brent Fulgham, based on</span>
<span class="slc">--   recommendation of Jose Bollo</span>

<span class="kwa">class</span> HEAPSORT

insert
	ARGUMENTS

creation <span class="sym">{</span>ANY<span class="sym">}</span>
	make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}</span>
   make <span class="kwa">is</span>
      <span class="kwa">local</span>
	 array<span class="sym">:</span> FIXED_ARRAY<span class="sym">[</span><span class="kwb">DOUBLE</span><span class="sym">]</span>
	 n<span class="sym">:</span> <span class="kwb">INTEGER</span>
      <span class="kwa">do</span>
	 n <span class="sym">:=</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
	 <span class="sym">!!</span>array.<span class="kwd">make</span><span class="sym">(</span>n<span class="sym">)</span>
	 <span class="kwd">fill_array</span><span class="sym">(</span>array<span class="sym">)</span>
	 <span class="kwd">sort_array</span><span class="sym">(</span>n<span class="sym">,</span> array<span class="sym">)</span>
	 io.<span class="kwd">put_string</span><span class="sym">(</span>array.<span class="kwd">item</span><span class="sym">(</span>n<span class="sym">)</span>.<span class="kwd">to_string_format</span><span class="sym">(</span><span class="num">10</span><span class="sym">))</span>
	 io.put_new_line
      <span class="kwa">end</span>

   <span class="kwd">sort_array</span><span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span> ra<span class="sym">:</span> FIXED_ARRAY<span class="sym">[</span><span class="kwb">DOUBLE</span><span class="sym">])</span> <span class="kwa">is</span>
      <span class="kwa">local</span>
	 i<span class="sym">,</span> j<span class="sym">,</span> ir<span class="sym">,</span> l<span class="sym">:</span> <span class="kwb">INTEGER</span>
	 rra<span class="sym">:</span> <span class="kwb">DOUBLE</span>
	 done<span class="sym">:</span> <span class="kwb">BOOLEAN</span>
      <span class="kwa">do</span>
	 j <span class="sym">:=</span> <span class="num">0</span>
	 i <span class="sym">:=</span> <span class="num">0</span>
	 rra <span class="sym">:=</span> <span class="num">0.0</span>
	 ir <span class="sym">:=</span> n
	 l <span class="sym">:=</span> n <span class="sym">//</span> <span class="num">2</span>
	 done <span class="sym">:=</span> <span class="kwa">false</span>

	 <span class="kwa">from</span> until done <span class="kwa">loop</span>
	    <span class="kwa">if</span> l <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span>
	       l <span class="sym">:=</span> l <span class="sym">-</span> <span class="num">1</span>
	       rra <span class="sym">:=</span> ra.<span class="kwd">item</span><span class="sym">(</span>l<span class="sym">)</span>
	    <span class="kwa">else</span>
	       rra <span class="sym">:=</span> ra.<span class="kwd">item</span><span class="sym">(</span>ir<span class="sym">)</span>
	       ra.<span class="kwd">put</span><span class="sym">(</span>ra.<span class="kwd">item</span><span class="sym">(</span><span class="num">1</span><span class="sym">),</span> ir<span class="sym">)</span>
	       ir <span class="sym">:=</span> ir <span class="sym">-</span> <span class="num">1</span>
	       <span class="kwa">if</span> ir <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span>
		  ra.<span class="kwd">put</span><span class="sym">(</span>rra<span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
		  <span class="slc">-- should throw exception out of here instead of</span>
		  <span class="slc">-- using boolean</span>
		  done <span class="sym">:=</span> <span class="kwa">true</span>
	       <span class="kwa">end</span>
	    <span class="kwa">end</span>

	    <span class="kwa">if not</span> done <span class="kwa">then</span>
	       i <span class="sym">:=</span> l
	       j <span class="sym">:=</span> l <span class="sym">*</span> <span class="num">2</span>

	       <span class="kwa">from</span> until j <span class="sym">&gt;</span> ir <span class="kwa">loop</span>
		  <span class="kwa">if</span> <span class="sym">(</span>j <span class="sym">&lt;</span> ir<span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>ra.<span class="kwd">item</span><span class="sym">(</span>j<span class="sym">) &lt;</span> ra.<span class="kwd">item</span><span class="sym">(</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">))</span> <span class="kwa">then</span>
		     j <span class="sym">:=</span> j <span class="sym">+</span> <span class="num">1</span>
		  <span class="kwa">end</span>
		  <span class="kwa">if</span> rra <span class="sym">&lt;</span> ra.<span class="kwd">item</span><span class="sym">(</span>j<span class="sym">)</span> <span class="kwa">then</span>
		     ra.<span class="kwd">put</span><span class="sym">(</span>ra.<span class="kwd">item</span><span class="sym">(</span>j<span class="sym">),</span> i<span class="sym">)</span>
		     i <span class="sym">:=</span> j
		     j <span class="sym">:=</span> j <span class="sym">+</span> i
		  <span class="kwa">else</span>
		     j <span class="sym">:=</span> ir <span class="sym">+</span> <span class="num">1</span>
		  <span class="kwa">end</span>
	       <span class="kwa">end</span>
	       ra.<span class="kwd">put</span><span class="sym">(</span>rra<span class="sym">,</span> i<span class="sym">)</span>
	    <span class="kwa">end</span>
	 <span class="kwa">end</span>
      <span class="kwa">end</span>


   <span class="kwd">fill_array</span><span class="sym">(</span>an_array<span class="sym">:</span> FIXED_ARRAY<span class="sym">[</span><span class="kwb">DOUBLE</span><span class="sym">])</span> <span class="kwa">is</span>
      <span class="kwa">local</span>
	 rand<span class="sym">:</span> RANDOMNUMBER
	 index<span class="sym">:</span> <span class="kwb">INTEGER</span>
      <span class="kwa">do</span>
	 <span class="kwa">from</span>
	    <span class="sym">!!</span>rand.make
	    index <span class="sym">:=</span> an_array.lower
	 until
	    index <span class="sym">&gt;</span> an_array.upper
	 <span class="kwa">loop</span>
	    an_array.<span class="kwd">put</span><span class="sym">(</span>rand.<span class="kwd">next</span><span class="sym">(</span><span class="num">1</span><span class="sym">),</span> index<span class="sym">)</span>
	    index <span class="sym">:=</span> index <span class="sym">+</span> <span class="num">1</span>
	 <span class="kwa">end</span>
      <span class="kwa">end</span>

<span class="kwa">end</span>

