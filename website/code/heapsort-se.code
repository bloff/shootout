<span class="slc">-- -*- mode: eiffel -*-
</span><span class="slc">-- $Id: heapsort-se.code,v 1.7 2005-05-09 01:22:43 bfulgham Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- Modified to use FIXED_ARRAY by Brent Fulgham, based on
</span><span class="slc">--   recommendation of Jose Bollo
</span>
<span class="kwa">class</span> HEAPSORT

creation make

<span class="kwa">feature

</span>   make <span class="kwa">is
      local
</span>	 array<span class="sym">:</span> FIXED_ARRAY<span class="sym">[</span><span class="kwb">DOUBLE</span><span class="sym">]
</span>	 n<span class="sym">:</span> <span class="kwb">INTEGER
</span>      <span class="kwa">do
</span>	 n <span class="sym">:=</span> argument<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
	 <span class="sym">!!</span>array.make<span class="sym">(</span>n<span class="sym">)
</span>	 fill_array<span class="sym">(</span>array<span class="sym">)
</span>	 sort_array<span class="sym">(</span>n<span class="sym">,</span> array<span class="sym">)
</span>	 io.put_string<span class="sym">(</span>array.item<span class="sym">(</span>n<span class="sym">)</span>.to_string_format<span class="sym">(</span><span class="num">10</span><span class="sym">))
</span>	 io.put_new_line
      <span class="kwa">end

</span>   sort_array<span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span> ra<span class="sym">:</span> FIXED_ARRAY<span class="sym">[</span><span class="kwb">DOUBLE</span><span class="sym">])</span> <span class="kwa">is
      local
</span>	 i<span class="sym">,</span> j<span class="sym">,</span> ir<span class="sym">,</span> l<span class="sym">:</span> <span class="kwb">INTEGER
</span>	 rra<span class="sym">:</span> <span class="kwb">DOUBLE
</span>	 done<span class="sym">:</span> <span class="kwb">BOOLEAN
</span>      <span class="kwa">do
</span>	 j <span class="sym">:=</span> <span class="num">0
</span>	 i <span class="sym">:=</span> <span class="num">0
</span>	 rra <span class="sym">:=</span> <span class="num">0.0
</span>	 ir <span class="sym">:=</span> n
	 l <span class="sym">:=</span> n <span class="sym">//</span> <span class="num">2
</span>	 done <span class="sym">:=</span> <span class="kwa">false

	 from</span> until done <span class="kwa">loop
	    if</span> l <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then
</span>	       l <span class="sym">:=</span> l <span class="num">- 1
</span>	       rra <span class="sym">:=</span> ra.item<span class="sym">(</span>l<span class="sym">)
</span>	    <span class="kwa">else
</span>	       rra <span class="sym">:=</span> ra.item<span class="sym">(</span>ir<span class="sym">)
</span>	       ra.put<span class="sym">(</span>ra.item<span class="sym">(</span><span class="num">1</span><span class="sym">),</span> ir<span class="sym">)
</span>	       ir <span class="sym">:=</span> ir <span class="num">- 1
</span>	       <span class="kwa">if</span> ir <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then
</span>		  ra.put<span class="sym">(</span>rra<span class="sym">,</span> <span class="num">1</span><span class="sym">)
</span>		  <span class="slc">-- should throw exception out of here instead of
</span>		  <span class="slc">-- using boolean
</span>		  done <span class="sym">:=</span> <span class="kwa">true
	       end
	    end

	    if not</span> done <span class="kwa">then
</span>	       i <span class="sym">:=</span> l
	       j <span class="sym">:=</span> l <span class="sym">*</span> <span class="num">2

</span>	       <span class="kwa">from</span> until j <span class="sym">&gt;</span> ir <span class="kwa">loop
		  if</span> <span class="sym">(</span>j <span class="sym">&lt;</span> ir<span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>ra.item<span class="sym">(</span>j<span class="sym">) &lt;</span> ra.item<span class="sym">(</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">))</span> <span class="kwa">then
</span>		     j <span class="sym">:=</span> j <span class="sym">+</span> <span class="num">1
</span>		  <span class="kwa">end
		  if</span> rra <span class="sym">&lt;</span> ra.item<span class="sym">(</span>j<span class="sym">)</span> <span class="kwa">then
</span>		     ra.put<span class="sym">(</span>ra.item<span class="sym">(</span>j<span class="sym">),</span> i<span class="sym">)
</span>		     i <span class="sym">:=</span> j
		     j <span class="sym">:=</span> j <span class="sym">+</span> i
		  <span class="kwa">else
</span>		     j <span class="sym">:=</span> ir <span class="sym">+</span> <span class="num">1
</span>		  <span class="kwa">end
	       end
</span>	       ra.put<span class="sym">(</span>rra<span class="sym">,</span> i<span class="sym">)
</span>	    <span class="kwa">end
	 end
      end


</span>   fill_array<span class="sym">(</span>an_array<span class="sym">:</span> FIXED_ARRAY<span class="sym">[</span><span class="kwb">DOUBLE</span><span class="sym">])</span> <span class="kwa">is
      local
</span>	 rand<span class="sym">:</span> RANDOMNUMBER
	 index<span class="sym">:</span> <span class="kwb">INTEGER
</span>      <span class="kwa">do
	 from
</span>	    <span class="sym">!!</span>rand.make
	    index <span class="sym">:=</span> an_array.lower
	 until
	    index <span class="sym">&gt;</span> an_array.upper
	 <span class="kwa">loop
</span>	    an_array.put<span class="sym">(</span>rand.next<span class="sym">(</span><span class="num">1</span><span class="sym">),</span> index<span class="sym">)
</span>	    index <span class="sym">:=</span> index <span class="sym">+</span> <span class="num">1
</span>	 <span class="kwa">end
      end

end
</span>
