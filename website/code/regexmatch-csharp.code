<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">/* The Great Computer Language Shootout 
   contributed by Isaac Gouy */</FONT></I>

using System;
using System.Text.RegularExpressions;

class RegexMatch
{
   <B><FONT COLOR="#228B22">static</FONT></B> <B><FONT COLOR="#228B22">void</FONT></B> Main(string[] args)
   {
      <I><FONT COLOR="#B22222">// Get the number of iterations
</FONT></I>      <B><FONT COLOR="#228B22">int</FONT></B> n = 0;
      <B><FONT COLOR="#A020F0">if</FONT></B> (args.Length &gt; 0) n = Int32.Parse(args[0]); 

      Regex r = new Regex(
         <B><FONT COLOR="#BC8F8F">&quot;(?: ^ | [^\\d\\(])&quot;</FONT></B> +   <I><FONT COLOR="#B22222">// must be preceeded by non-digit
</FONT></I>         <B><FONT COLOR="#BC8F8F">&quot;( \\( )?&quot;</FONT></B> +         <I><FONT COLOR="#B22222">// match 1: possible initial left paren
</FONT></I>         <B><FONT COLOR="#BC8F8F">&quot;(\\d\\d\\d)&quot;</FONT></B> +         <I><FONT COLOR="#B22222">// match 2: area code is 3 digits
</FONT></I>         <B><FONT COLOR="#BC8F8F">&quot;(?(1) \\) )&quot;</FONT></B> +         <I><FONT COLOR="#B22222">// if match1 then match right paren
</FONT></I>         <B><FONT COLOR="#BC8F8F">&quot;[ ]&quot;</FONT></B> +               <I><FONT COLOR="#B22222">// area code followed by one space
</FONT></I>         <B><FONT COLOR="#BC8F8F">&quot;(\\d\\d\\d)&quot;</FONT></B> +         <I><FONT COLOR="#B22222">// match 3: prefix of 3 digits
</FONT></I>         <B><FONT COLOR="#BC8F8F">&quot;[ -]&quot;</FONT></B> +            <I><FONT COLOR="#B22222">// separator is either space or dash
</FONT></I>         <B><FONT COLOR="#BC8F8F">&quot;(\\d\\d\\d\\d)&quot;</FONT></B> +      <I><FONT COLOR="#B22222">// match 4: last 4 digits
</FONT></I>         <B><FONT COLOR="#BC8F8F">&quot;\\D&quot;</FONT></B>               <I><FONT COLOR="#B22222">// must be followed by a non-digit
</FONT></I>         ,RegexOptions.IgnorePatternWhitespace | RegexOptions.Compiled);

      String phoneNumbers = Console.In.ReadToEnd();
      <B><FONT COLOR="#228B22">int</FONT></B> count = 0;
      Match m;

      <B><FONT COLOR="#A020F0">while</FONT></B> (n-- &gt; 0)
         <B><FONT COLOR="#A020F0">for</FONT></B> (m = r.Match(phoneNumbers); m.Success; m = m.NextMatch()) {
            <B><FONT COLOR="#A020F0">if</FONT></B> (n == 1) <I><FONT COLOR="#B22222">// counting-down 1 is the last iteration
</FONT></I>               Console.WriteLine(<B><FONT COLOR="#BC8F8F">&quot;{0}: ({1}) {2}-{3}&quot;</FONT></B>, 
                  ++count, m.Groups[2].Value, m.Groups[3].Value, m.Groups[4].Value);
         }
   }
}
</pre></td></tr></table>
