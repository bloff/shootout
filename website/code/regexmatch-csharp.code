<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">   fixed by TJ Fontaine</span>
<span class="com">*/</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Text<span class="sym">.</span>RegularExpressions<span class="sym">;</span>

<span class="kwc">class</span> regexmatch
<span class="sym">{</span>
   <span class="kwb">static void</span> <span class="kwd">Main</span><span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">){</span>
      <span class="slc">// Get the number of iterations</span>
      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

      Regex r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Regex</span><span class="sym">(</span>
         <span class="str">&quot;(?: ^ | [^</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">(])&quot;</span> <span class="sym">+</span>   <span class="slc">// must be preceeded by non-digit</span>
         <span class="str">&quot;(</span> <span class="esc">\\</span><span class="str">( )?&quot;</span> <span class="sym">+</span>         <span class="slc">// match 1: possible initial left paren</span>
         <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span> <span class="sym">+</span>         <span class="slc">// match 2: area code is 3 digits</span>
         <span class="str">&quot;(?(1)</span> <span class="esc">\\</span><span class="str">) )&quot;</span> <span class="sym">+</span>         <span class="slc">// if match1 then match right paren</span>
         <span class="str">&quot;[ ]&quot;</span> <span class="sym">+</span>               <span class="slc">// area code followed by one space</span>
         <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span> <span class="sym">+</span>         <span class="slc">// match 3: prefix of 3 digits</span>
         <span class="str">&quot;[ -]&quot;</span> <span class="sym">+</span>            <span class="slc">// separator is either space or dash</span>
         <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d</span><span class="esc">\\</span><span class="str">d)&quot;</span> <span class="sym">+</span>      <span class="slc">// match 4: last 4 digits</span>
         <span class="str">&quot;</span><span class="esc">\\</span><span class="str">D&quot;</span>               <span class="slc">// must be followed by a non-digit</span>
         <span class="sym">,</span>RegexOptions<span class="sym">.</span>IgnorePatternWhitespace <span class="sym">|</span> RegexOptions<span class="sym">.</span>Compiled <span class="sym">|</span> RegexOptions<span class="sym">.</span>Multiline<span class="sym">);</span>

      String phoneNumbers <span class="sym">=</span> Console<span class="sym">.</span>In<span class="sym">.</span><span class="kwd">ReadToEnd</span><span class="sym">();</span>
      <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      Match m<span class="sym">;</span>

      <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">)</span>
         <span class="kwa">for</span> <span class="sym">(</span>m <span class="sym">=</span> r<span class="sym">.</span><span class="kwd">Match</span><span class="sym">(</span>phoneNumbers<span class="sym">);</span> m<span class="sym">.</span>Success<span class="sym">;</span> m <span class="sym">=</span> m<span class="sym">.</span><span class="kwd">NextMatch</span><span class="sym">()) {</span>
            <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span> <span class="slc">// counting-down 1 is the last iteration</span>
               Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;{0}: ({1}) {2}-{3}&quot;</span><span class="sym">,</span>
                  <span class="sym">++</span>count<span class="sym">,</span> m<span class="sym">.</span>Groups<span class="sym">[</span><span class="num">2</span><span class="sym">].</span>Value<span class="sym">,</span> m<span class="sym">.</span>Groups<span class="sym">[</span><span class="num">3</span><span class="sym">].</span>Value<span class="sym">,</span> m<span class="sym">.</span>Groups<span class="sym">[</span><span class="num">4</span><span class="sym">].</span>Value<span class="sym">);</span>
         <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>

