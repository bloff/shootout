<span class="com">(*
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Sebastien Loisel
 *)</span>

<span class="kwa">let</span> eval_A i j <span class="sym">=</span> <span class="num">1.0</span> <span class="sym">/</span>. <span class="sym">(</span>float_of_int <span class="sym">((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span><span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">))
</span><span class="kwa">let</span> eval_A_times_u u v <span class="sym">=
</span>  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="sym">(</span>Array.length v<span class="sym">) -</span> <span class="num">1</span> <span class="kwa">do
</span>    v.<span class="sym">(</span>i<span class="sym">) &lt;-</span> <span class="num">0.0</span> <span class="sym">;
</span>    <span class="kwa">for</span> j <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="sym">(</span>Array.length u<span class="sym">) -</span> <span class="num">1</span> <span class="kwa">do
</span>      v.<span class="sym">(</span>i<span class="sym">) &lt;-</span> v.<span class="sym">(</span>i<span class="sym">) +</span>. <span class="sym">(</span>eval_A i j<span class="sym">) *</span>. u.<span class="sym">(</span>j<span class="sym">)
</span>    <span class="kwa">done
  done
let</span> eval_At_times_u u v <span class="sym">=
</span>  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="sym">(</span>Array.length v<span class="sym">)-</span><span class="num">1</span> <span class="kwa">do
</span>    v.<span class="sym">(</span>i<span class="sym">)&lt;-</span><span class="num">0.0</span> <span class="sym">;
</span>    <span class="kwa">for</span> j <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="sym">(</span>Array.length u<span class="sym">)-</span><span class="num">1</span> <span class="kwa">do
</span>      v.<span class="sym">(</span>i<span class="sym">)&lt;-</span>v.<span class="sym">(</span>i<span class="sym">) +</span>. <span class="sym">(</span>eval_A j i<span class="sym">) *</span>. u.<span class="sym">(</span>j<span class="sym">)
</span>    <span class="kwa">done
  done
let</span> print_array u <span class="sym">=
</span>  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="sym">(</span>Array.length u<span class="sym">)-</span><span class="num">1</span> <span class="kwa">do
</span>    Printf.printf <span class="str">&quot; %f&quot;</span> u.<span class="sym">(</span>i<span class="sym">)
</span>  <span class="kwa">done</span><span class="sym">;
</span>  Printf.printf <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>

<span class="kwa">let</span> eval_AtA_times_u u v <span class="sym">=
</span>  <span class="kwa">let</span> w <span class="sym">=</span> Array.create <span class="sym">(</span>Array.length u<span class="sym">)</span> <span class="num">0.0</span> <span class="kwa">in
</span>  eval_A_times_u u w<span class="sym">;</span> eval_At_times_u w v

<span class="kwa">let</span> n<span class="sym">=</span><span class="num">2000
</span><span class="kwa">let</span> u <span class="sym">=</span> Array.create n <span class="num">1.0
</span><span class="kwa">let</span> v <span class="sym">=</span> Array.create n <span class="num">0.0</span> <span class="sym">;;

</span><span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="num">9</span> <span class="kwa">do
</span>  eval_AtA_times_u u v<span class="sym">;</span> eval_AtA_times_u v u
<span class="kwa">done</span><span class="sym">;;

</span><span class="kwa">let</span> vv <span class="sym">=</span> ref <span class="num">0.0
</span><span class="kwa">let</span> vBv <span class="sym">=</span> ref <span class="num">0.0</span> <span class="sym">;;

</span><span class="kwa">for</span> i<span class="sym">=</span><span class="num">0</span> <span class="kwa">to</span> n<span class="num">-1</span> <span class="kwa">do
</span>  vv <span class="sym">:= !</span>vv <span class="sym">+</span>. v.<span class="sym">(</span>i<span class="sym">) *</span>. v.<span class="sym">(</span>i<span class="sym">);
</span>  vBv <span class="sym">:= !</span>vBv <span class="sym">+</span>. u.<span class="sym">(</span>i<span class="sym">) *</span>. v.<span class="sym">(</span>i<span class="sym">)
</span><span class="kwa">done</span><span class="sym">;;

</span>Printf.printf <span class="str">&quot;%.20f</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>sqrt <span class="sym">(!</span>vBv <span class="sym">/</span>. <span class="sym">!</span>vv<span class="sym">));;</span>
