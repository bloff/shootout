<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Brent Fulgham, based on the Java</span>
<span class="com">   version by Jarkko Miettinen</span>
<span class="com">*/</span>

<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;objc/Object.h&gt;</span>

<span class="kwa">&#64;interface</span> TreeNode <span class="sym">:</span> Object <span class="sym">{</span>
   TreeNode<span class="sym">*</span> left<span class="sym">,</span> right<span class="sym">;</span>
   <span class="kwb">int</span>       item<span class="sym">;</span>
<span class="sym">-(</span><span class="kwa">id</span><span class="sym">)</span> init<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span> p_item<span class="sym">;</span>
<span class="sym">-(</span><span class="kwa">id</span><span class="sym">)</span> init<span class="sym">: (</span>TreeNode<span class="sym">*)</span> pLeft <span class="sym">: (</span>TreeNode<span class="sym">*)</span> pRight <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span> p_item<span class="sym">;</span>
<span class="sym">-</span>bottomUpTree <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span> p_item <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span> p_depth<span class="sym">;</span>
<span class="sym">-(</span><span class="kwb">int</span><span class="sym">)</span> itemCheck<span class="sym">:</span>
<span class="kwa">&#64;end</span>

<span class="kwa">&#64;implementation</span> TreeNode
<span class="sym">-</span>init<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span> p_item <span class="sym">{</span>
   item <span class="sym">=</span> p_item<span class="sym">;</span>

   <span class="kwa">return self</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="sym">-</span>init<span class="sym">: (</span>TreeNode<span class="sym">*)</span> pLeft <span class="sym">: (</span>TreeNode<span class="sym">*)</span> pRight <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span> p_item <span class="sym">{</span>
   left <span class="sym">=</span> pLeft<span class="sym">;</span>
   right <span class="sym">=</span> pRight<span class="sym">;</span>
   item <span class="sym">=</span> p_item<span class="sym">;</span>

   <span class="kwa">return self</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="sym">-</span>bottomUpTree<span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span> p_item <span class="sym">: (</span><span class="kwb">int</span><span class="sym">)</span> depth <span class="sym">{</span>
   <span class="kwa">if</span> <span class="sym">(</span>depth <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)  {</span>
      pLeft <span class="sym">=</span> <span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">);</span>
      pRight <span class="sym">=</span> <span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">);</span>
      item <span class="sym">=</span> p_item<span class="sym">;</span>
   <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
      <span class="kwa">return new</span> <span class="kwd">TreeNode</span><span class="sym">(</span>item<span class="sym">);</span>
   <span class="sym">}</span>
<span class="sym">}</span>

<span class="sym">-(</span><span class="kwb">int</span><span class="sym">)</span> itemCheck<span class="sym">: {</span>
   <span class="slc">// if necessary deallocate here</span>
   <span class="kwa">if</span> <span class="sym">(</span>left <span class="sym">==</span> <span class="kwa">nil</span><span class="sym">)</span>
      <span class="kwa">return</span> item<span class="sym">;</span>
   <span class="kwa">else</span>
      <span class="kwa">return</span> item <span class="sym">+ [</span>left itemCheck<span class="sym">] - [</span>right itemCheck<span class="sym">];</span>
<span class="sym">}</span>
<span class="kwa">&#64;end</span>

<span class="kwb">const static int</span> MIN_DEPTH <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> argv<span class="sym">[]) {</span>
   <span class="kwb">int</span> n <span class="sym">= (</span>argc <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">10</span><span class="sym">;</span>

   <span class="kwb">int</span> maxDepth <span class="sym">= (</span>MIN_DEPTH <span class="sym">+</span> <span class="num">2</span> <span class="sym">&gt;</span> n<span class="sym">)</span> ? MIN_DEPTH <span class="sym">+</span> <span class="num">2</span> <span class="sym">:</span> n<span class="sym">;</span>
   <span class="kwb">int</span> stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

   <span class="kwb">int</span> check <span class="sym">= (</span>TreeNode.<span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>stretchDepth<span class="sym">))</span>.<span class="kwd">itemCheck</span><span class="sym">();</span>
   <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;stretch tree of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stretchDepth<span class="sym">,</span> check<span class="sym">);</span>
   System.<span class="kwa">out</span>.<span class="kwd">println</span><span class="sym">(</span><span class="str">&quot;stretch tree of depth &quot;</span><span class="sym">+</span>stretchDepth<span class="sym">+</span><span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> <span class="sym">+</span> check<span class="sym">);</span>

TreeNode longLivedTree <span class="sym">=</span> TreeNode.<span class="kwd">bottomUpTree</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>maxDepth<span class="sym">);</span>

<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> depth<span class="sym">=</span>minDepth<span class="sym">;</span> depth<span class="sym">&lt;=</span>maxDepth<span class="sym">;</span> depth<span class="sym">+=</span><span class="num">2</span><span class="sym">){</span>
	<span class="kwb">int</span> iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">);</span>
	check <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>iterations<span class="sym">;</span> i<span class="sym">++){</span>
		check <span class="sym">+= (</span>TreeNode.<span class="kwd">bottomUpTree</span><span class="sym">(</span>i<span class="sym">,</span>depth<span class="sym">))</span>.<span class="kwd">itemCheck</span><span class="sym">();</span>
		check <span class="sym">+= (</span>TreeNode.<span class="kwd">bottomUpTree</span><span class="sym">(-</span>i<span class="sym">,</span>depth<span class="sym">))</span>.<span class="kwd">itemCheck</span><span class="sym">();</span>
	<span class="sym">}</span>
	System.<span class="kwa">out</span>.<span class="kwd">println</span><span class="sym">((</span>iterations<span class="sym">*</span><span class="num">2</span><span class="sym">) +</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">trees of depth &quot;</span> <span class="sym">+</span> depth <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> <span class="sym">+</span> check<span class="sym">);</span>
<span class="sym">}</span>
System.<span class="kwa">out</span>.<span class="kwd">println</span><span class="sym">(</span><span class="str">&quot;long lived tree of depth &quot;</span> <span class="sym">+</span> maxDepth <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span><span class="sym">+</span> longLivedTree.<span class="kwd">itemCheck</span><span class="sym">());</span>
<span class="sym">}</span>
