#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>qu
<span class="slc">;;; The Great Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Adapted from CMUCL code by Dima Dorfman; bit-vector stuff by Alex Shinn;</span>
<span class="slc">;; cobbled together by felix, converted to MzScheme by Brent Fulgham</span>
<span class="slc">;; Note:  Requires MzScheme 299+</span>

<span class="sym">(</span>module nsievebits mzscheme

  <span class="sym">(</span>define <span class="sym">(</span>make<span class="sym">-</span>bit<span class="sym">-</span>vector size<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ((</span>len <span class="sym">(</span>quotient <span class="sym">(+</span> size <span class="num">7</span><span class="sym">)</span> <span class="num">8</span><span class="sym">))</span>
           <span class="sym">(</span>res <span class="sym">(</span>make<span class="sym">-</span>bytes len #b11111111<span class="sym">)))</span>
      <span class="sym">(</span>let <span class="sym">((</span>off <span class="sym">(</span>remainder size <span class="num">8</span><span class="sym">)))</span>
	<span class="sym">(</span>unless <span class="sym">(</span>zero? off<span class="sym">)</span>
	  <span class="sym">(</span>bytes<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> res <span class="sym">(-</span> len <span class="num">1</span><span class="sym">) (- (</span>arithmetic<span class="sym">-</span>shift <span class="num">1</span> off<span class="sym">)</span> <span class="num">1</span><span class="sym">))))</span>
      res<span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>bit<span class="sym">-</span>vector<span class="sym">-</span>ref vec i<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>byte <span class="sym">(</span>arithmetic<span class="sym">-</span>shift i <span class="sym">-</span><span class="num">3</span><span class="sym">))</span>
          <span class="sym">(</span>off <span class="sym">(</span>bitwise<span class="sym">-</span><span class="kwa">and</span> i #x7<span class="sym">)))</span>
      <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(&lt;</span> byte <span class="sym">(</span>bytes<span class="sym">-</span><span class="kwa">length</span> vec<span class="sym">))</span>
           <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>zero? <span class="sym">(</span>bitwise<span class="sym">-</span><span class="kwa">and</span> <span class="sym">(</span>bytes<span class="sym">-</span>ref vec byte<span class="sym">)</span>
                                    <span class="sym">(</span>arithmetic<span class="sym">-</span>shift <span class="num">1</span> off<span class="sym">)))))))</span>

  <span class="sym">(</span>define <span class="sym">(</span>bit<span class="sym">-</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> vec i x<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>byte <span class="sym">(</span>arithmetic<span class="sym">-</span>shift i <span class="sym">-</span><span class="num">3</span><span class="sym">))</span>
          <span class="sym">(</span>off <span class="sym">(</span>bitwise<span class="sym">-</span><span class="kwa">and</span> i #x7<span class="sym">)))</span>
      <span class="sym">(</span>let <span class="sym">((</span>val <span class="sym">(</span>bytes<span class="sym">-</span>ref vec byte<span class="sym">))</span>
	    <span class="sym">(</span>mask <span class="sym">(</span>arithmetic<span class="sym">-</span>shift <span class="num">1</span> off<span class="sym">)))</span>
	<span class="sym">(</span>bytes<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> vec
		    byte
		    <span class="sym">(</span><span class="kwa">if</