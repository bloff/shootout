<span class="com">{ The Great Computer Language Shootout
  http://shootout.alioth.debian.org

  contributed by Daniel Mantione
}</span>

<span class="kwa">program</span> wordfreq<span class="sym">;

</span><span class="kwa">type</span>    Ptree<span class="sym">=</span>^Ttree<span class="sym">;
</span>        Ttree<span class="sym">=</span><span class="kwa">record
</span>          left<span class="sym">,</span>right<span class="sym">:</span>Ptree<span class="sym">;
</span>          count<span class="sym">:</span><span class="kwb">cardinal</span><span class="sym">;
</span>          <span class="kwb">word</span><span class="sym">:</span><span class="kwa">string</span><span class="sym">[</span><span class="num">32</span><span class="sym">];
</span>        <span class="kwa">end</span><span class="sym">;

</span><span class="kwa">var</span> s<span class="sym">,</span>w<span class="sym">:</span><span class="kwa">string</span><span class="sym">;
</span>    i<span class="sym">:</span><span class="kwb">byte</span><span class="sym">;
</span>    t<span class="sym">:</span>Ptree<span class="sym">=</span><span class="kwa">nil</span><span class="sym">;
</span>    t2<span class="sym">:</span>Ptree<span class="sym">=</span><span class="kwa">nil</span><span class="sym">;
</span>    lr<span class="sym">:</span><span class="kwb">boolean</span><span class="sym">=</span><span class="kwb">false</span><span class="sym">;

</span><span class="kwa">procedure</span> add_word<span class="sym">(</span><span class="kwa">const</span> w<span class="sym">:</span><span class="kwa">string</span><span class="sym">;</span><span class="kwa">var</span> t<span class="sym">:</span>Ptree<span class="sym">);
</span><span class="kwa">begin
  if</span> t<span class="sym">=</span><span class="kwa">nil then
    begin
</span>      new<span class="sym">(</span>t<span class="sym">);
</span>      t^.left<span class="sym">:=</span><span class="kwa">nil</span><span class="sym">;
</span>      t^.right<span class="sym">:=</span><span class="kwa">nil</span><span class="sym">;
</span>      t^.count<span class="sym">:=</span><span class="num">1</span><span class="sym">;
</span>      t^.<span class="kwb">word</span><span class="sym">:=</span>w<span class="sym">;
</span>    <span class="kwa">end
  else if</span> w<span class="sym">&lt;</span>t^.<span class="kwb">word</span> <span class="kwa">then</span> add_word<span class="sym">(</span>w<span class="sym">,</span>t^.left<span class="sym">)
</span>  <span class="kwa">else if</span> w<span class="sym">&gt;</span>t^.<span class="kwb">word</span> <span class="kwa">then</span> add_word<span class="sym">(</span>w<span class="sym">,</span>t^.right<span class="sym">)
</span>  <span class="kwa">else</span> inc<span class="sym">(</span>t^.count<span class="sym">);
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> add_word_second<span class="sym">(</span>count<span class="sym">:</span><span class="kwb">cardinal</span><span class="sym">;</span><span class="kwa">const</span> w<span class="sym">:</span><span class="kwa">string</span><span class="sym">;</span><span class="kwa">var</span> t<span class="sym">:</span>Ptree<span class="sym">);
</span><span class="kwa">var</span> on_left<span class="sym">:</span><span class="kwb">boolean</span><span class="sym">;
</span><span class="kwa">begin
  if</span> t<span class="sym">=</span><span class="kwa">nil then
    begin
</span>      new<span class="sym">(</span>t<span class="sym">);
</span>      t^.left<span class="sym">:=</span><span class="kwa">nil</span><span class="sym">;
</span>      t^.right<span class="sym">:=</span><span class="kwa">nil</span><span class="sym">;
</span>      t^.count<span class="sym">:=</span>count<span class="sym">;
</span>      t^.<span class="kwb">word</span><span class="sym">:=</span>w<span class="sym">;
</span>    <span class="kwa">end
  else
    begin
</span>      on_left<span class="sym">:=</span>count<span class="sym">&gt;</span>t^.count<span class="sym">;
</span>      <span class="kwa">if</span> t^.count<span class="sym">=</span>count <span class="kwa">then
</span>        on_left<span class="sym">:=</span>w<span class="sym">&gt;</span>t^.<span class="kwb">word</span><span class="sym">;
</span>      <span class="kwa">if</span> on_left <span class="kwa">then</span> add_word_second<span class="sym">(</span>count<span class="sym">,</span>w<span class="sym">,</span>t^.left<span class="sym">)
</span>      <span class="kwa">else</span> add_word_second<span class="sym">(</span>count<span class="sym">,</span>w<span class="sym">,</span>t^.right<span class="sym">);
</span>    <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> build_second_tree<span class="sym">(</span>tree<span class="sym">:</span>Ptree<span class="sym">);
</span><span class="kwa">begin
</span>  lr<span class="sym">:=</span><span class="kwa">not</span> lr<span class="sym">;
</span>  <span class="kwa">if</span> tree<span class="sym">&lt;&gt;</span><span class="kwa">nil then
    begin
</span>      add_word_second<span class="sym">(</span>tree^.count<span class="sym">,</span>tree^.<span class="kwb">word</span><span class="sym">,</span>t2<span class="sym">);
</span>      <span class="kwa">if</span> lr <span class="kwa">then
        begin
</span>          build_second_tree<span class="sym">(</span>tree^.left<span class="sym">);
</span>          build_second_tree<span class="sym">(</span>tree^.right<span class="sym">);
</span>        <span class="kwa">end
      else
        begin
</span>          build_second_tree<span class="sym">(</span>tree^.right<span class="sym">);
</span>          build_second_tree<span class="sym">(</span>tree^.left<span class="sym">);
</span>        <span class="kwa">end</span><span class="sym">;
</span>    <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> write_second_tree<span class="sym">(</span>tree<span class="sym">:</span>Ptree<span class="sym">);
</span><span class="kwa">begin
  if</span> tree<span class="sym">&lt;&gt;</span><span class="kwa">nil then
    begin
</span>      write_second_tree<span class="sym">(</span>tree^.left<span class="sym">);
</span>      writeln<span class="sym">(</span>tree^.count<span class="sym">:</span><span class="num">7</span><span class="sym">,</span><span class="str">' '</span><span class="sym">,</span>tree^.<span class="kwb">word</span><span class="sym">);
</span>      write_second_tree<span class="sym">(</span>tree^.right<span class="sym">);
</span>    <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">begin
  while not</span> eof <span class="kwa">do
    begin
</span>      readln<span class="sym">(</span>s<span class="sym">);
</span>      s<span class="sym">:=</span>lowercase<span class="sym">(</span>s<span class="sym">);
</span>      w<span class="sym">:=</span><span class="str">''</span><span class="sym">;
</span>      <span class="kwa">for</span> i<span class="sym">:=</span><span class="num">1</span> <span class="kwa">to</span> length<span class="sym">(</span>s<span class="sym">)</span> <span class="kwa">do
        if not</span><span class="sym">(</span>s<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">in</span> <span class="sym">[</span><span class="str">'a'</span>..<span class="str">'z'</span><span class="sym">])</span> <span class="kwa">then
          begin
            if</span> length<span class="sym">(</span>w<span class="sym">)&lt;&gt;</span><span class="num">0</span> <span class="kwa">then</span> add_word<span class="sym">(</span>w<span class="sym">,</span>t<span class="sym">);
</span>            w<span class="sym">:=</span><span class="str">''</span><span class="sym">;
</span>          <span class="kwa">end
        else</span> w<span class="sym">:=</span>w<span class="sym">+</span>s<span class="sym">[</span>i<span class="sym">];
</span>      <span class="kwa">if</span> length<span class="sym">(</span>w<span class="sym">)&lt;&gt;</span><span class="num">0</span> <span class="kwa">then</span> add_word<span class="sym">(</span>w<span class="sym">,</span>t<span class="sym">);
</span>    <span class="kwa">end</span><span class="sym">;
</span>  build_second_tree<span class="sym">(</span>t<span class="sym">);
</span>  write_second_tree<span class="sym">(</span>t2<span class="sym">);
</span><span class="kwa">end</span>.
