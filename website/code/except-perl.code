<span class="slc">#!/usr/bin/perl</span>
<span class="slc"># $Id: except-perl.code,v 1.7 2006-09-20 05:51:11 bfulgham Exp $</span>
<span class="slc"># http://www.bagley.org/~doug/shootout/</span>

<span class="kwa">use</span> integer<span class="sym">;</span>

<span class="kwc">my</span> <span class="kwb">$HI</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwc">my</span> <span class="kwb">$LO</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwc">my</span> <span class="kwb">$NUM</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
<span class="kwb">$NUM</span> <span class="sym">=</span> <span class="num">1</span> <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$NUM</span> <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">);</span>

<span class="kwa">package</span> Lo_Exception<span class="sym">;</span>

<span class="kwa">sub</span> new <span class="sym">{</span>
    <span class="kwd">bless</span><span class="sym">({</span>Val <span class="sym">=&gt;</span> shift<span class="sym">},</span> __PACKAGE__<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">package</span> Hi_Exception<span class="sym">;</span>

<span class="kwa">sub</span> new <span class="sym">{</span>
    <span class="kwd">bless</span><span class="sym">({</span>Val <span class="sym">=&gt;</span> shift<span class="sym">},</span> __PACKAGE__<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">package</span> main<span class="sym">;</span>

<span class="kwa">sub</span> some_function <span class="sym">{</span>
    <span class="kwc">my</span> <span class="kwb">$num</span> <span class="sym">=</span> shift<span class="sym">;</span>
    eval <span class="sym">{</span>
	<span class="sym">&amp;</span><span class="kwd">hi_function</span><span class="sym">(</span><span class="kwb">$num</span><span class="sym">);</span>
    <span class="sym">};</span>
    <span class="kwa">if</span> <span class="sym">($</span>&#64;<span class="sym">) {</span>
	die <span class="str">&quot;We shouldn't get here ($&#64;)&quot;</span><span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">sub</span> hi_function <span class="sym">{</span>
    <span class="kwc">my</span> <span class="kwb">$num</span> <span class="sym">=</span> shift<span class="sym">;</span>
    eval <span class="sym">{</span>
	<span class="sym">&amp;</span><span class="kwd">lo_function</span><span class="sym">(</span><span class="kwb">$num</span><span class="sym">);</span>
    <span class="sym">};</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">ref</span><span class="sym">($</span>&#64;<span class="sym">)</span> <span class="kwa">eq</span> <span class="str">&quot;Hi_Exception&quot;</span><span class="sym">) {</span>
	<span class="kwb">$HI</span><span class="sym">++;</span>		<span class="slc"># handle</span>
    <span class="sym">}</span> <span class="kwa">elsif</span> <span class="sym">($</span>&#64;<span class="sym">) {</span>
	die <span class="sym">$</span>&#64;<span class="sym">;</span>		<span class="slc"># rethrow</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">sub</span> lo_function <span class="sym">{</span>
    <span class="kwc">my</span> <span class="kwb">$num</span> <span class="sym">=</span> shift<span class="sym">;</span>
    eval <span class="sym">{</span>
	<span class="sym">&amp;</span><span class="kwd">blowup</span><span class="sym">(</span><span class="kwb">$num</span><span class="sym">);</span>
    <span class="sym">};</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">ref</span><span class="sym">($</span>&#64;<span class="sym">)</span> <span class="kwa">eq</span> <span class="str">&quot;Lo_Exception&quot;</span><span class="sym">) {</span>
	<span class="kwb">$LO</span><span class="sym">++;</span>		<span class="slc"># handle</span>
    <span class="sym">}</span> <span class="kwa">elsif</span> <span class="sym">($</span>&#64;<span class="sym">) {</span>
	die <span class="sym">$</span>&#64;<span class="sym">;</span>		<span class="slc"># rethrow</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">sub</span> blowup <span class="sym">{</span>
    <span class="kwc">my</span> <span class="kwb">$num</span> <span class="sym">=</span> shift<span class="sym">;</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$num</span> % <span class="num">2</span><span class="sym">) {</span>
	die Lo_Exception<span class="sym">-&gt;</span><span class="kwd">new</span><span class="sym">(</span>Num <span class="sym">=&gt;</span> <span class="kwb">$num</span><span class="sym">);</span>
    <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
	die Hi_Exception<span class="sym">-&gt;</span><span class="kwd">new</span><span class="sym">(</span>Num <span class="sym">=&gt;</span> <span class="kwb">$num</span><span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">$NUM</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
<span class="kwa">while</span> <span class="sym">(</span><span class="kwb">$NUM</span><span class="sym">--) {</span>
    <span class="sym">&amp;</span><span class="kwd">some_function</span><span class="sym">(</span><span class="kwb">$NUM</span><span class="sym">);</span>
<span class="sym">}</span>
print <span class="str">&quot;Exceptions: HI=$HI / LO=$LO</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
