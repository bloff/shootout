<span class="line">    1 </span><span class="slc">%% The Great Computer Language Shootout 
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">%% contributed by Isaac Gouy (Erlang novice) 
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">%% 
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">%% http://shootout.alioth.debian.org/ 
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">%% 
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">%% Used destructive assignment in the process dictionary  
</span><span class="line">    7 </span><span class="slc"></span><span class="slc">%% to keep count of handled exceptions. 
</span><span class="line">    8 </span><span class="slc"></span><span class="slc">%% 
</span><span class="line">    9 </span><span class="slc"></span><span class="slc">%% Usage: start from command line with 
</span><span class="line">   10 </span><span class="slc"></span><span class="slc">%%     erlc except.erl 
</span><span class="line">   11 </span><span class="slc"></span><span class="slc">%%     erl -noinput -s except main 200000 
</span><span class="line">   12 </span><span class="slc"></span>
<span class="line">   13 </span> <span class="sym">-</span>module<span class="sym">(</span>except<span class="sym">)</span>.
<span class="line">   14 </span>  <span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.
<span class="line">   15 </span>
<span class="line">   16 </span>
<span class="line">   17 </span>    blowup<span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">when</span> N rem <span class="num">2</span> <span class="sym">==</span> <span class="num">0</span> <span class="sym">-&gt;</span> <span class="kwb">throw</span><span class="sym">({</span>lo_exception<span class="sym">,</span> N<span class="sym">});
</span><span class="line">   18 </span><span class="sym"> </span>blowup<span class="sym">(</span>N<span class="sym">) -&gt;</span> <span class="kwb">throw</span><span class="sym">({</span>hi_exception<span class="sym">,</span> N<span class="sym">})</span>.
<span class="line">   19 </span>
<span class="line">   20 </span>
<span class="line">   21 </span>   lo_fun<span class="sym">(</span>N<span class="sym">) -&gt;
</span><span class="line">   22 </span><span class="sym"> </span>    <span class="kwa">case catch</span> blowup<span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">of
</span><span class="line">   23 </span><span class="kwa"> </span>        <span class="sym">{</span>lo_exception<span class="sym">,</span> N1<span class="sym">} -&gt;</span> <span class="kwb">put</span><span class="sym">(</span>lo_count<span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>lo_count<span class="sym">) +</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   24 </span><span class="sym">         {</span>hi_exception<span class="sym">,</span> N2<span class="sym">} -&gt;</span> <span class="kwb">throw</span><span class="sym">({</span>hi_exception<span class="sym">,</span> N2<span class="sym">})
</span><span class="line">   25 </span><span class="sym"> </span>    <span class="kwa">end</span>.
<span class="line">   26 </span>
<span class="line">   27 </span>
<span class="line">   28 </span>   hi_fun<span class="sym">(</span>N<span class="sym">) -&gt;
</span><span class="line">   29 </span><span class="sym">  </span>    <span class="kwa">case catch</span> lo_fun<span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">of
</span><span class="line">   30 </span><span class="kwa"> </span>        <span class="sym">{</span>hi_exception<span class="sym">,</span> N1<span class="sym">} -&gt;</span> <span class="kwb">put</span><span class="sym">(</span>hi_count<span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>hi_count<span class="sym">) +</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   31 </span><span class="sym"> </span>        _ <span class="sym">-&gt;</span> true
<span class="line">   32 </span>     <span class="kwa">end</span>.
<span class="line">   33 </span>
<span class="line">   34 </span>
<span class="line">   35 </span>   some_fun<span class="sym">(</span><span class="num">0</span><span class="sym">) -&gt;</span> true<span class="sym">;
</span><span class="line">   36 </span><span class="sym"> </span>some_fun<span class="sym">(</span>N<span class="sym">) -&gt;
</span><span class="line">   37 </span><span class="sym"> </span>    <span class="kwa">case catch</span> hi_fun<span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">of
</span><span class="line">   38 </span><span class="kwa"> </span>        <span class="sym">{</span>lo_exception<span class="sym">,</span> N1<span class="sym">} -&gt;</span> io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;~s~n&quot;</span><span class="sym">, [</span><span class="str">&quot;lo_exception should not get here.&quot;</span><span class="sym">]);
</span><span class="line">   39 </span><span class="sym">         {</span>hi_exception<span class="sym">,</span> N2<span class="sym">} -&gt;</span> io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;~s~n&quot;</span><span class="sym">, [</span><span class="str">&quot;hi_exception should not get here.&quot;</span><span class="sym">]);
</span><span class="line">   40 </span><span class="sym"> </span>        _ <span class="sym">-&gt;</span> true
<span class="line">   41 </span>     <span class="kwa">end</span><span class="sym">,
</span><span class="line">   42 </span><span class="sym"> </span>    some_fun<span class="sym">(</span>N <span class="num">- 1</span><span class="sym">)</span>.
<span class="line">   43 </span>
<span class="line">   44 </span>
<span class="line">   45 </span>   main<span class="sym">([</span>Arg<span class="sym">]) -&gt;
</span><span class="line">   46 </span><span class="sym"> </span>    Num <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span><span class="kwb">atom_to_list</span><span class="sym">(</span>Arg<span class="sym">)),
</span><span class="line">   47 </span><span class="sym"> </span>    <span class="kwb">put</span><span class="sym">(</span>hi_count<span class="sym">,</span> <span class="num">0</span><span class="sym">),
</span><span class="line">   48 </span><span class="sym"> </span>    <span class="kwb">put</span><span class="sym">(</span>lo_count<span class="sym">,</span> <span class="num">0</span><span class="sym">),
</span><span class="line">   49 </span><span class="sym"> </span>    some_fun<span class="sym">(</span>Num<span class="sym">),
</span><span class="line">   50 </span><span class="sym"> </span>    io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;~s~w ~s~w~n&quot;</span><span class="sym">, [</span><span class="str">&quot;Exceptions: HI=&quot;</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>hi_count<span class="sym">),</span><span class="str">&quot;/ LO=&quot;</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>lo_count<span class="sym">)]),
</span><span class="line">   51 </span><span class="sym"> </span>    <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.
<span class="line">   52 </span>
<span class="line">   53 </span>
<span class="line">   54 </span>
<span class="line">   55 </span>     
