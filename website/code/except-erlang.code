<span class="slc">%%%  The Great Computer Language Shootout
</span><span class="slc">%%%  http://shootout.alioth.debian.org/
</span><span class="slc">%%%
</span><span class="slc">%%%  modified by Isaac Gouy
</span>
<span class="slc">%%%  Use destructive assignment in the process dictionary
</span><span class="slc">%%%  to keep count of handled exceptions.
</span>
<span class="sym">-</span>module<span class="sym">(</span>except<span class="sym">)</span>.
<span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

blowup<span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">when</span> N rem <span class="num">2</span> <span class="sym">==</span> <span class="num">0</span> <span class="sym">-&gt;</span> <span class="kwb">throw</span><span class="sym">({</span>lo_exception<span class="sym">,</span> N<span class="sym">});
</span>blowup<span class="sym">(</span>N<span class="sym">) -&gt;</span> <span class="kwb">throw</span><span class="sym">({</span>hi_exception<span class="sym">,</span> N<span class="sym">})</span>.

lo_fun<span class="sym">(</span>N<span class="sym">) -&gt;
</span>   <span class="kwa">case catch</span> blowup<span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">of
</span>      <span class="sym">{</span>lo_exception<span class="sym">,</span> N1<span class="sym">} -&gt;</span> <span class="kwb">put</span><span class="sym">(</span>lo_count<span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>lo_count<span class="sym">) +</span> <span class="num">1</span><span class="sym">);
      {</span>hi_exception<span class="sym">,</span> N2<span class="sym">} -&gt;</span> <span class="kwb">throw</span><span class="sym">({</span>hi_exception<span class="sym">,</span> N2<span class="sym">})
</span>   <span class="kwa">end</span>.

hi_fun<span class="sym">(</span>N<span class="sym">) -&gt;
</span>   <span class="kwa">case catch</span> lo_fun<span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">of
</span>      <span class="sym">{</span>hi_exception<span class="sym">,</span> N1<span class="sym">} -&gt;</span> <span class="kwb">put</span><span class="sym">(</span>hi_count<span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>hi_count<span class="sym">) +</span> <span class="num">1</span><span class="sym">);
</span>      _ <span class="sym">-&gt;</span> true
   <span class="kwa">end</span>.

some_fun<span class="sym">(</span><span class="num">0</span><span class="sym">) -&gt;</span> true<span class="sym">;
</span>some_fun<span class="sym">(</span>N<span class="sym">) -&gt;
</span>   <span class="kwa">case catch</span> hi_fun<span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">of
</span>      <span class="sym">{</span>lo_exception<span class="sym">,</span> N1<span class="sym">} -&gt;</span> io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;~s~n&quot;</span><span class="sym">, [</span><span class="str">&quot;lo_exception should not get here.&quot;</span><span class="sym">]);
      {</span>hi_exception<span class="sym">,</span> N2<span class="sym">} -&gt;</span> io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;~s~n&quot;</span><span class="sym">, [</span><span class="str">&quot;hi_exception should not get here.&quot;</span><span class="sym">]);
</span>      _ <span class="sym">-&gt;</span> true
   <span class="kwa">end</span><span class="sym">,
</span>   some_fun<span class="sym">(</span>N <span class="num">- 1</span><span class="sym">)</span>.

main<span class="sym">() -&gt;</span> main<span class="sym">([</span><span class="str">&quot;1&quot;</span><span class="sym">])</span>.
main<span class="sym">([</span>Arg<span class="sym">]) -&gt;
</span>   N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),
</span>   <span class="kwb">put</span><span class="sym">(</span>hi_count<span class="sym">,</span> <span class="num">0</span><span class="sym">),
</span>   <span class="kwb">put</span><span class="sym">(</span>lo_count<span class="sym">,</span> <span class="num">0</span><span class="sym">),
</span>   some_fun<span class="sym">(</span>Num<span class="sym">),
</span>   io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;~s~w ~s~w~n&quot;</span><span class="sym">, [</span><span class="str">&quot;Exceptions: HI=&quot;</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>hi_count<span class="sym">),</span><span class="str">&quot;/ LO=&quot;</span><span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>lo_count<span class="sym">)]),
</span>   <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.
