<span class="slc">! -*- mode: f90 -*-</span>
<span class="slc">!</span>
<span class="slc">! $Id: matrix-ifc.code,v 1.8 2005-12-31 16:45:39 bfulgham Exp $ ; $Name:  $</span>
<span class="slc">!</span>
<span class="slc">! Matrix function implementation</span>
<span class="slc">! Simon Geard, 3/12/04</span>
<span class="slc">!</span>
<span class="slc">! Building info.</span>
<span class="slc">! ==============</span>
<span class="slc">!</span>
<span class="slc">! Linux  - using the Intel Fortran90 compiler:</span>
<span class="slc">!</span>
<span class="slc">!          ifort matrix.f90 -O3 -static-libcxa -o matrix</span>
<span class="slc">!</span>
<span class="slc">! WinXP  - Compaq Visual Fortran 6.6c</span>
<span class="slc">!</span>
<span class="slc">!          f90 matrix.f90 /link /libpath:&quot;d:\Program Files\Microsoft Visual Studio\df98\lib&quot;</span>
<span class="slc">!</span>
<span class="slc">! Cygwin - g95 compiler</span>
<span class="slc">!</span>
<span class="slc">!          g95 matrix.f90 -o matrix.exe</span>
<span class="slc">!</span>
program matrix
  implicit none
  integer<span class="sym">,</span> parameter <span class="sym">::</span> msize <span class="sym">=</span> <span class="num">30</span>
  integer<span class="sym">,</span> dimension<span class="sym">(</span>msize<span class="sym">,</span>msize<span class="sym">) ::</span> m1<span class="sym">,</span> m2<span class="sym">,</span> mres
  integer <span class="sym">::</span> i<span class="sym">,</span> k<span class="sym">,</span> num
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">4</span><span class="sym">)</span> argv
  intrinsic matmul

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)</span>
  read<span class="sym">(</span>argv<span class="sym">,*)</span> num
  if <span class="sym">(</span>num <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> num <span class="sym">=</span> <span class="num">1</span>

  m1 <span class="sym">=</span> reshape<span class="sym">(</span>source<span class="sym">=(/ (</span>i<span class="sym">,</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>msize<span class="sym">*</span>msize<span class="sym">)/),</span> shape<span class="sym">=(/</span>msize<span class="sym">,</span>msize<span class="sym">/))</span>
  m2 <span class="sym">=</span> m1
  do k<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>num
     mres <span class="sym">=</span> matmul<span class="sym">(</span>m1<span class="sym">,</span>m2<span class="sym">)</span>
  end do
  write<span class="sym">(*,</span><span class="str">'(3(i0,a),i0)'</span><span class="sym">)</span> mres<span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">),</span><span class="str">' '</span><span class="sym">,</span>mres<span class="sym">(</span><span class="num">4</span><span class="sym">,</span><span class="num">3</span><span class="sym">),</span><span class="str">' '</span><span class="sym">,</span>mres<span class="sym">(</span><span class="num">3</span><span class="sym">,</span><span class="num">4</span><span class="sym">),</span><span class="str">' '</span><span class="sym">,</span>mres<span class="sym">(</span><span class="num">5</span><span class="sym">,</span><span class="num">5</span><span class="sym">)</span>
end program matrix

