<span class="sym">!</span> Matrix function implementation
<span class="sym">!</span> Simon Geard<span class="sym">,</span> <span class="num">3</span><span class="sym">/</span><span class="num">12</span><span class="sym">/</span><span class="num">04
</span><span class="sym">!
!</span> Building info<span class="sym">.
! ==============
!
!</span> Linux  <span class="sym">-</span> <span class="kwa">using</span> the Intel Fortran90 compiler<span class="sym">:
!
!</span>          ifort matrix<span class="sym">.</span>f90 <span class="sym">-</span>O3 <span class="sym">-</span><span class="kwb">static</span><span class="sym">-</span>libcxa <span class="sym">-</span>o matrix
<span class="sym">!
!</span> WinXP  <span class="sym">-</span> Compaq Visual Fortran <span class="num">6.6c
</span><span class="sym">!
!</span>          f90 matrix<span class="sym">.</span>f90 <span class="sym">/</span>link <span class="sym">/</span>libpath<span class="sym">:</span><span class="str">&quot;d:</span><span class="esc">\P</span><span class="str">rogram Files</span><span class="esc">\M</span><span class="str">icrosoft Visual Studio</span><span class="esc">\d</span><span class="str">f98</span><span class="esc">\l</span><span class="str">ib&quot;</span>
<span class="sym">!
!</span> Cygwin <span class="sym">-</span> g95 compiler
<span class="sym">!
!</span>          g95 matrix<span class="sym">.</span>f90 <span class="sym">-</span>o matrix<span class="sym">.</span>exe
<span class="sym">!
</span>program matrix
  implicit none
  integer<span class="sym">,</span> parameter <span class="sym">::</span> msize <span class="sym">=</span> <span class="num">30
</span>  integer<span class="sym">,</span> dimension<span class="sym">(</span>msize<span class="sym">,</span>msize<span class="sym">) ::</span> m1<span class="sym">,</span> m2<span class="sym">,</span> mres
  integer <span class="sym">::</span> i<span class="sym">,</span> k<span class="sym">,</span> num
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">4</span><span class="sym">)</span> argv
  intrinsic matmul

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)
</span>  read<span class="sym">(</span>argv<span class="sym">,*)</span> num
  <span class="kwa">if</span> <span class="sym">(</span>num <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> num <span class="sym">=</span> <span class="num">1

</span>  m1 <span class="sym">=</span> reshape<span class="sym">(</span>source<span class="sym">=(/ (</span>i<span class="sym">,</span>i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>msize<span class="sym">*</span>msize<span class="sym">)/),</span> shape<span class="sym">=(/</span>msize<span class="sym">,</span>msize<span class="sym">/))
</span>  m2 <span class="sym">=</span> m1
  <span class="kwa">do</span> k<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>num
     mres <span class="sym">=</span> matmul<span class="sym">(</span>m1<span class="sym">,</span>m2<span class="sym">)
</span>  end <span class="kwa">do
</span>  write<span class="sym">(*,</span><span class="str">'(3(i0,a),i0)'</span><span class="sym">)</span> mres<span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">),</span><span class="str">' '</span><span class="sym">,</span>mres<span class="sym">(</span><span class="num">4</span><span class="sym">,</span><span class="num">3</span><span class="sym">),</span><span class="str">' '</span><span class="sym">,</span>mres<span class="sym">(</span><span class="num">3</span><span class="sym">,</span><span class="num">4</span><span class="sym">),</span><span class="str">' '</span><span class="sym">,</span>mres<span class="sym">(</span><span class="num">5</span><span class="sym">,</span><span class="num">5</span><span class="sym">)
</span>end program matrix

