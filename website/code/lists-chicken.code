<span class="slc">;;; lists.scm</span>
<span class="slc">;;;</span>
<span class="slc">;;; Contributed by Felix Winkelmann</span>
<span class="slc">;;; -Ob</span>

<span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>uses srfi<span class="sym">-</span><span class="num">1</span><span class="sym">))</span>

<span class="sym">(</span>define SIZE <span class="num">10000</span><span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>sequence start stop<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> start stop<span class="sym">)</span>
      <span class="str">'()</span>
<span class="str">      (cons start (sequence (+ start 1) stop))))</span>
<span class="str"></span>
<span class="str">(define (head-to-tail! headlist taillist)</span>
<span class="str">  (when (null? taillist)</span>
<span class="str">    (set! taillist (list (car headlist)))</span>
<span class="str">    (set! headlist (cdr headlist)))</span>
<span class="str">  (letrec ((htt-helper (lambda (dest)</span>
<span class="str">			 (when (not (null? headlist))</span>
<span class="str">			   (let ((headlink headlist))</span>
<span class="str">			     (set-cdr! dest headlink)</span>
<span class="str">			     (set! headlist (cdr headlist))</span>
<span class="str">			     (htt-helper headlink))))))</span>
<span class="str">    (htt-helper taillist)</span>
<span class="str">    (values headlist taillist)))</span>
<span class="str"></span>
<span class="str">(define (test-lists)</span>
<span class="str">  (let* ([L1 (sequence 1 SIZE)]</span>
<span class="str">	 [L2 (append L1 '</span><span class="sym">())]</span>
	 <span class="sym">[</span>L3 <span class="str">'()])</span>
<span class="str">    (set!-values (L2 L3) (head-to-tail! L2 L3))</span>
<span class="str">    (set!-values (L3 L2) (head-to-tail! (reverse! L3) L2))</span>
<span class="str">    (set! L1 (reverse! L1))</span>
<span class="str">    (cond ((not (= SIZE (car L1))) 0)</span>
<span class="str">	  ((not (equal? L1 L2))	   0)</span>
<span class="str">	  (else           (length L1)))))</span>
<span class="str"></span>
<span class="str">(define (main args)</span>
<span class="str">  (let ((result #f))</span>
<span class="str">    (let loop ((counter (if (null? args)</span>
<span class="str">			    1</span>
<span class="str">			    (string-&gt;number (car args)))))</span>
<span class="str">      (when (&gt; counter 0)</span>
<span class="str">	(set! result (test-lists))</span>
<span class="str">	(loop (- counter 1))))</span>
<span class="str">    (print result)))</span>
<span class="str"></span>
<span class="str">(main (command-line-arguments))</span>
