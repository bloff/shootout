<span class="slc">;;; lists.scm</span>
<span class="slc">;;;</span>
<span class="slc">;;; Contributed by Felix Winkelmann</span>
<span class="slc">;;; -Ob</span>

<span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>uses srfi<span class="sym">-</span><span class="num">1</span><span class="sym">))</span>

<span class="sym">(</span>define SIZE <span class="num">10000</span><span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>sequence start stop<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> start stop<span class="sym">)</span>
      <span class="sym">'()</span>
      <span class="sym">(</span><span class="kwa">cons</span> start <span class="sym">(</span>sequence <span class="sym">(+</span> start <span class="num">1</span><span class="sym">)</span> stop<span class="sym">))))</span>

<span class="sym">(</span>define <span class="sym">(</span>head<span class="sym">-</span>to<span class="sym">-</span>tail<span class="sym">!</span> headlist taillist<span class="sym">)</span>
  <span class="sym">(</span>when <span class="sym">(</span><span class="kwa">null</span>? taillist<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> taillist <span class="sym">(</span><span class="kwa">list</span> <span class="sym">(</span><span class="kwa">car</span> headlist<span class="sym">)))</span>
    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> headlist <span class="sym">(</span><span class="kwa">cdr</span> headlist<span class="sym">)))</span>
  <span class="sym">(</span>letrec <span class="sym">((</span>htt<span class="sym">-</span>helper <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>dest<span class="sym">)</span>
			 <span class="sym">(</span>when <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span><span class="kwa">null</span>? headlist<span class="sym">))</span>
			   <span class="sym">(</span>let <span class="sym">((</span>headlink headlist<span class="sym">))</span>
			     <span class="sym">(</span><span class="kwa">set</span><span class="sym">-</span><span class="kwa">cdr</span><span class="sym">!</span> dest headlink<span class="sym">)</span>
			     <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> headlist <span class="sym">(</span><span class="kwa">cdr</span> headlist<span class="sym">))</span>
			     <span class="sym">(</span>htt<span class="sym">-</span>helper headlink<span class="sym">))))))</span>
    <span class="sym">(</span>htt<span class="sym">-</span>helper taillist<span class="sym">)</span>
    <span class="sym">(</span>values headlist taillist<span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>test<span class="sym">-</span>lists<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ([</span>L1 <span class="sym">(</span>sequence <span class="num">1</span> SIZE<span class="sym">)]</span>
	 <span class="sym">[</span>L2 <span class="sym">(</span><span class="kwa">append</span> L1 <span class="sym">'())]</span>
	 <span class="sym">[</span>L3 <span class="sym">'()])</span>
    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!-</span>values <span class="sym">(</span>L2 L3<span class="sym">) (</span>head<span class="sym">-</span>to<span class="sym">-</span>tail<span class="sym">!</span> L2 L3<span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!-</span>values <span class="sym">(</span>L3 L2<span class="sym">) (</span>head<span class="sym">-</span>to<span class="sym">-</span>tail<span class="sym">! (</span><span class="kwa">reverse</span><span class="sym">!</span> L3<span class="sym">)</span> L2<span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> L1 <span class="sym">(</span><span class="kwa">reverse</span><span class="sym">!</span> L1<span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">not</span> <span class="sym">(=</span> SIZE <span class="sym">(</span><span class="kwa">car</span> L1<span class="sym">)))</span> <span class="num">0</span><span class="sym">)</span>
	  <span class="sym">((</span><span class="kwa">not</span> <span class="sym">(</span><span class="kwa">equal</span>? L1 L2<span class="sym">))</span>	   <span class="num">0</span><span class="sym">)</span>
	  <span class="sym">(</span>else           <span class="sym">(</span><span class="kwa">length</span> L1<span class="sym">)))))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>result #f<span class="sym">))</span>
    <span class="sym">(</span>let loop <span class="sym">((</span>counter <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? args<span class="sym">)</span>
			    <span class="num">1</span>
			    <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">car</span> args<span class="sym">)))))</span>
      <span class="sym">(</span>when <span class="sym">(&gt;</span> counter <span class="num">0</span><span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> result <span class="sym">(</span>test<span class="sym">-</span>lists<span class="sym">))</span>
	<span class="sym">(</span>loop <span class="sym">(-</span> counter <span class="num">1</span><span class="sym">))))</span>
    <span class="sym">(</span><span class="kwa">print</span> result<span class="sym">)))</span>

<span class="sym">(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>
