<span class="com">(*</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Jon Harrop, 2005</span>
<span class="com"> * Compile: ocamlopt -ffast-math -inline 100 raytracer.ocaml -o raytracer</span>
<span class="com"> *)</span>

<span class="kwa">let</span> delta <span class="sym">=</span> sqrt epsilon_float <span class="kwa">and</span> pi <span class="sym">=</span> <span class="num">4</span>. <span class="sym">*</span>. atan <span class="num">1</span>.

<span class="kwa">type</span> vec <span class="sym">= {</span>x<span class="sym">:</span><span class="kwb">float</span><span class="sym">;</span> y<span class="sym">:</span><span class="kwb">float</span><span class="sym">;</span> z<span class="sym">:</span><span class="kwb">float</span><span class="sym">}</span>
<span class="kwa">let</span> <span class="sym">( *| )</span> s r <span class="sym">= {</span>x <span class="sym">=</span> s <span class="sym">*</span>. r.x<span class="sym">;</span> y <span class="sym">=</span> s <span class="sym">*</span>. r.y<span class="sym">;</span> z <span class="sym">=</span> s <span class="sym">*</span>. r.z<span class="sym">}</span>
<span class="kwa">let</span> <span class="sym">( +| )</span> a b <span class="sym">= {</span>x <span class="sym">=</span> a.x <span class="sym">+</span>. b.x<span class="sym">;</span> y <span class="sym">=</span> a.y <span class="sym">+</span>. b.y<span class="sym">;</span> z <span class="sym">=</span> a.z <span class="sym">+</span>. b.z<span class="sym">}</span>
<span class="kwa">let</span> <span class="sym">( -| )</span> a b <span class="sym">= {</span>x <span class="sym">=</span> a.x <span class="sym">-</span>. b.x<span class="sym">;</span> y <span class="sym">=</span> a.y <span class="sym">-</span>. b.y<span class="sym">;</span> z <span class="sym">=</span> a.z <span class="sym">-</span>. b.z<span class="sym">}</span>
<span class="kwa">let</span> dot a b <span class="sym">=</span> a.x <span class="sym">*</span>. b.x <span class="sym">+</span>. a.y <span class="sym">*</span>. b.y <span class="sym">+</span>. a.z <span class="sym">*</span>. b.z
<span class="kwa">let</span> unitise r <span class="sym">= (</span><span class="num">1</span>. <span class="sym">/</span>. sqrt <span class="sym">(</span>dot r r<span class="sym">)) *|</span> r

<span class="kwa">type</span> ray <span class="sym">= {</span> orig<span class="sym">:</span> vec<span class="sym">;</span> dir<span class="sym">:</span> vec <span class="sym">}</span>

<span class="kwa">type</span> scene <span class="sym">=</span> Sphere <span class="kwa">of</span> vec <span class="sym">*</span> <span class="kwb">float</span> <span class="sym">|</span> Group <span class="kwa">of</span> vec <span class="sym">*</span> <span class="kwb">float</span> <span class="sym">*</span> scene array

<span class="kwa">let</span> ray_sphere ray center radius <span class="sym">=</span>
  <span class="kwa">let</span> v <span class="sym">=</span> center <span class="sym">-|</span> ray.orig <span class="kwa">in</span>
  <span class="kwa">let</span> b <span class="sym">=</span> dot v ray.dir <span class="kwa">in</span>
  <span class="kwa">let</span> disc <span class="sym">=</span> b <span class="sym">*</span>. b <span class="sym">-</span>. dot v v <span class="sym">+</span>. radius <span class="sym">*</span>. radius <span class="kwa">in</span>
  <span class="kwa">if</span> disc <span class="sym">&lt;</span> <span class="num">0</span>. <span class="kwa">then</span> infinity <span class="kwa">else</span>
    <span class="kwa">let</span> disc <span class="sym">=</span> sqrt disc <span class="kwa">in</span>
    <span class="sym">(</span><span class="kwa">fun</span> t2 <span class="sym">-&gt;</span> <span class="kwa">if</span> t2 <span class="sym">&lt;</span> <span class="num">0</span>. <span class="kwa">then</span> infinity <span class="kwa">else</span>
       <span class="sym">((</span><span class="kwa">fun</span> t1 <span class="sym">-&gt;</span> <span class="kwa">if</span> t1 <span class="sym">&gt;</span> <span class="num">0</span>. <span class="kwa">then</span> t1 <span class="kwa">else</span> t2<span class="sym">) (</span>b <span class="sym">-</span>. disc<span class="sym">))) (</span>b <span class="sym">+</span>. disc<span class="sym">)</span>

<span class="kwa">let</span> intersect ray scene <span class="sym">=</span>
  <span class="kwa">let rec</span> of_scene <span class="sym">((</span>l<span class="sym">,</span> _<span class="sym">)</span> <span class="kwa">as</span> first<span class="sym">) =</span> <span class="kwa">function</span>
      Sphere <span class="sym">(</span>center<span class="sym">,</span> radius<span class="sym">) -&gt;</span>
	<span class="kwa">let</span> l' <span class="sym">=</span> ray_sphere ray center radius <span class="kwa">in</span>
	<span class="kwa">if</span> l' <span class="sym">&gt;=</span> l <span class="kwa">then</span> first <span class="kwa">else</span>
	  l'<span class="sym">,</span> unitise <span class="sym">(</span>ray.orig <span class="sym">+|</span> l' <span class="sym">*|</span> ray.dir <span class="sym">-|</span> center<span class="sym">)</span>
    <span class="sym">|</span> Group <span class="sym">(</span>center<span class="sym">,</span> radius<span class="sym">,</span> scenes<span class="sym">) -&gt;</span>
	<span class="kwa">let</span> l' <span class="sym">=</span> ray_sphere ray center radius <span class="kwa">in</span>
	<span class="kwa">if</span> l' <span class="sym">&gt;=</span> l <span class="kwa">then</span> first <span class="kwa">else</span> Array.fold_left of_scene first scenes <span class="kwa">in</span>
  of_scene <span class="sym">(</span>infinity<span class="sym">, {</span>x<span class="sym">=</span><span class="num">0</span>.<span class="sym">;</span> y<span class="sym">=</span><span class="num">0</span>.<span class="sym">;</span> z<span class="sym">=</span><span class="num">0</span>.<span class="sym">})</span> scene

<span class="kwa">let rec</span> ray_trace light ray scene <span class="sym">=</span>
  <span class="kwa">let</span> lambda<span class="sym">,</span> n <span class="sym">=</span> intersect ray scene <span class="kwa">in</span>
  <span class="kwa">if</span> lambda <span class="sym">=</span> infinity <span class="kwa">then</span> <span class="num">0</span>. <span class="kwa">else</span>
    <span class="kwa">let</span> g <span class="sym">= -</span>. dot n light <span class="kwa">in</span>
    <span class="kwa">if</span> g <span class="sym">&lt;=</span> <span class="num">0</span>. <span class="kwa">then</span> <span class="num">0</span>. <span class="kwa">else</span>
      <span class="kwa">match</span> intersect <span class="sym">{</span> orig <span class="sym">=</span> ray.orig <span class="sym">+|</span> lambda <span class="sym">*|</span> ray.dir <span class="sym">+|</span> delta <span class="sym">*|</span> n<span class="sym">;</span>
			dir <span class="sym">= {</span>x<span class="sym">=</span><span class="num">0</span>.<span class="sym">;</span> y<span class="sym">=</span><span class="num">0</span>.<span class="sym">;</span> z<span class="sym">=</span><span class="num">0</span>.<span class="sym">} -|</span> light <span class="sym">}</span> scene <span class="kwa">with</span>
	l<span class="sym">,</span> _ <span class="kwa">when</span> l <span class="sym">=</span> infinity <span class="sym">-&gt;</span> g <span class="sym">|</span> _ <span class="sym">-&gt;</span> <span class="num">0</span>.

<span class="kwa">let rec</span> create level r <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">) =</span>
  <span class="kwa">let</span> obj <span class="sym">=</span> Sphere <span class="sym">({</span>x<span class="sym">=</span>x<span class="sym">;</span> y<span class="sym">=</span>y<span class="sym">;</span> z<span class="sym">=</span>z<span class="sym">},</span> r<span class="sym">)</span> <span class="kwa">in</span>
  <span class="kwa">if</span> level <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span> obj <span class="kwa">else</span>
    <span class="kwa">let</span> aux l <span class="sym">(</span>x'<span class="sym">,</span> y'<span class="sym">,</span> z'<span class="sym">) =</span>
      create <span class="sym">(</span>level<span class="sym">-</span><span class="num">1</span><span class="sym">) (</span><span class="num">0.5</span> <span class="sym">*</span>. r<span class="sym">) (</span>x <span class="sym">-</span>. x'<span class="sym">,</span> y <span class="sym">+</span>. y'<span class="sym">,</span> z <span class="sym">+</span>. z'<span class="sym">) ::</span> l <span class="kwa">in</span>
    <span class="kwa">let</span> objs <span class="sym">=</span> <span class="kwa">let</span> r' <span class="sym">=</span> <span class="num">3</span>. <span class="sym">*</span>. r <span class="sym">/</span>. sqrt <span class="num">12</span>. <span class="kwa">in</span>
    Array.fold_left aux <span class="sym">[</span>obj<span class="sym">]</span>
      <span class="sym">[|-</span>.r'<span class="sym">,</span> r'<span class="sym">, -</span>.r'<span class="sym">;</span> r'<span class="sym">,</span> r'<span class="sym">, -</span>.r'<span class="sym">; -</span>.r'<span class="sym">,</span> r'<span class="sym">,</span> r'<span class="sym">;</span> r'<span class="sym">,</span> r'<span class="sym">,</span> r'<span class="sym">|]</span> <span class="kwa">in</span>
    Group <span class="sym">({</span>x<span class="sym">=</span>x<span class="sym">;</span> y<span class="sym">=</span>y<span class="sym">;</span> z<span class="sym">=</span>z<span class="sym">},</span> <span class="num">3</span>. <span class="sym">*</span>. r<span class="sym">,</span> Array.of_list objs<span class="sym">)</span>

<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="kwa">let</span> level <span class="sym">=</span> <span class="num">6</span> <span class="kwa">and</span> ss <span class="sym">=</span> <span class="num">4</span> <span class="kwa">in</span>
  <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">match</span> Sys.argv <span class="kwa">with</span> <span class="sym">[|</span> _<span class="sym">;</span> l <span class="sym">|] -&gt;</span> int_of_string l <span class="sym">|</span> _ <span class="sym">-&gt;</span> <span class="num">256</span> <span class="kwa">in</span>
  <span class="kwa">let</span> scene <span class="sym">=</span> create level <span class="num">1</span>. <span class="sym">(</span><span class="num">0</span>.<span class="sym">, -</span><span class="num">1</span>.<span class="sym">,</span> <span class="num">0</span>.<span class="sym">)</span> <span class="kwa">in</span>

  Printf.printf <span class="str">&quot;P5</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">255</span><span class="esc">\n</span><span class="str">&quot;</span> n n<span class="sym">;</span>
  <span class="kwa">for</span> y <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span> <span class="kwa">downto</span> <span class="num">0</span> <span class="kwa">do</span>
    <span class="kwa">for</span> x <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> n <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span>
      <span class="kwa">let</span> g <span class="sym">=</span> ref <span class="num">0</span>. <span class="kwa">in</span>
      <span class="kwa">for</span> dx <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> ss <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span>
	<span class="kwa">for</span> dy <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> ss <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span>
	  <span class="kwa">let</span> x<span class="sym">,</span> y<span class="sym">,</span> dx<span class="sym">,</span> dy<span class="sym">,</span> n <span class="sym">=</span> <span class="kwb">float</span> x<span class="sym">,</span> <span class="kwb">float</span> y<span class="sym">,</span> <span class="kwb">float</span> dx<span class="sym">,</span> <span class="kwb">float</span> dy<span class="sym">,</span> <span class="kwb">float</span> n <span class="kwa">in</span>
	  <span class="kwa">let</span> ray <span class="sym">=</span>
	    <span class="sym">{</span>orig <span class="sym">= {</span>x<span class="sym">=</span><span class="num">0</span>.<span class="sym">;</span> y<span class="sym">=</span><span class="num">0</span>.<span class="sym">;</span> z<span class="sym">= -</span><span class="num">4</span>.<span class="sym">};</span>
	     dir <span class="sym">=</span> unitise <span class="sym">{</span>x <span class="sym">=</span> x <span class="sym">-</span>. n <span class="sym">/</span>. <span class="num">2</span>. <span class="sym">+</span>. dx <span class="sym">/</span>. <span class="kwb">float</span> ss<span class="sym">;</span>
			    y <span class="sym">=</span> y <span class="sym">-</span>. n <span class="sym">/</span>. <span class="num">2</span>. <span class="sym">+</span>. dy <span class="sym">/</span>. <span class="kwb">float</span> ss<span class="sym">;</span>
			    z <span class="sym">=</span> n <span class="sym">} }</span> <span class="kwa">in</span>
	  g <span class="sym">:= !</span>g <span class="sym">+</span>. ray_trace <span class="sym">(</span>unitise <span class="sym">{</span>x<span class="sym">= -</span><span class="num">1</span>.<span class="sym">;</span> y<span class="sym">= -</span><span class="num">3</span>.<span class="sym">;</span> z<span class="sym">=</span><span class="num">2</span>.<span class="sym">})</span> ray scene<span class="sym">;</span>
	<span class="kwa">done</span><span class="sym">;</span>
      <span class="kwa">done</span><span class="sym">;</span>
      <span class="kwa">let</span> g <span class="sym">=</span> <span class="num">0.5</span> <span class="sym">+</span>. <span class="num">255</span>. <span class="sym">*</span>. <span class="sym">!</span>g <span class="sym">/</span>. <span class="kwb">float</span> <span class="sym">(</span>ss<span class="sym">*</span>ss<span class="sym">)</span> <span class="kwa">in</span>
      Printf.printf <span class="str">&quot;%c&quot;</span> <span class="sym">(</span>char_of_int <span class="sym">(</span>int_of_float g<span class="sym">));</span>
    <span class="kwa">done</span><span class="sym">;</span>
  <span class="kwa">done</span><span class="sym">;</span>
