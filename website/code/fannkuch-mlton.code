<span class="com">(* fannkuch.sml
 *
 *   The &quot;Pfannkuchen flipping&quot; benchmark.
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume&#64;tti-c.org)
 * Modified by sweeks&#64;sweeks.com to run with MLton.
 *)</span>

<span class="kwa">structure</span> Test<span class="sym">:</span><span class="kwa">sig val</span> main<span class="sym">:</span><span class="kwb">string</span><span class="sym">*</span><span class="kwb">string</span> list<span class="sym">-&gt;</span>OS.Process.status <span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct

    infix</span> <span class="num">8</span> $  <span class="kwa">val op</span> $ <span class="sym">=</span> Unsafe.Array.sub
    <span class="kwa">infix</span> <span class="num">3</span> <span class="sym">&lt;-</span> <span class="kwa">fun</span> <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">) &lt;-</span> x <span class="sym">=</span> Unsafe.Array.update <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> x<span class="sym">)

</span>    <span class="kwa">fun</span> main' N <span class="sym">=
</span>	<span class="kwa">let val</span> <span class="sym">(</span>a<span class="sym">,</span> b<span class="sym">) = (</span>Array.tabulate <span class="sym">(</span>N<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span> i<span class="sym">),</span> Array.array <span class="sym">(</span>N<span class="sym">,</span> <span class="num">0</span><span class="sym">))
</span>	    <span class="kwa">val</span> maxc <span class="sym">=</span> ref <span class="num">0
</span>	    <span class="kwa">fun</span> pk <span class="sym">() =
</span>		<span class="kwa">let fun</span> fl <span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">) =
</span>			 <span class="kwa">let val</span> t <span class="sym">=</span> b$i <span class="kwa">val</span> <span class="sym">(</span>k<span class="sym">,</span>l<span class="sym">) = (</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>j<span class="num">-1</span><span class="sym">)
</span>			 <span class="kwa">in</span> <span class="sym">(</span>b<span class="sym">,</span>i<span class="sym">)&lt;-</span>b$j<span class="sym">;(</span>b<span class="sym">,</span>j<span class="sym">)&lt;-</span>t<span class="sym">;</span> <span class="kwa">if</span> k<span class="sym">&gt;=</span>l <span class="kwa">then</span> <span class="sym">()</span> <span class="kwa">else</span> fl<span class="sym">(</span>k<span class="sym">,</span>l<span class="sym">)
</span>			 <span class="kwa">end
		    fun</span> try c <span class="sym">=
</span>			<span class="kwa">let val</span> k <span class="sym">=</span> b$<span class="num">0
</span>			<span class="kwa">in if</span> k<span class="sym">=</span><span class="num">0</span> <span class="kwa">then</span> c <span class="kwa">else</span> <span class="sym">(</span>fl<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>k<span class="sym">);</span>try<span class="sym">(</span>c<span class="sym">+</span><span class="num">1</span><span class="sym">))</span> <span class="kwa">end
		in</span> Array.copy <span class="sym">{</span> src<span class="sym">=</span>a<span class="sym">,</span> dst<span class="sym">=</span>b<span class="sym">,</span> di<span class="sym">=</span><span class="num">0</span> <span class="sym">};
</span>		   maxc <span class="sym">:=</span> <span class="kwa">Int</span>.max <span class="sym">(</span>try <span class="num">0</span><span class="sym">, !</span>maxc<span class="sym">)
</span>		<span class="kwa">end
	    fun</span> sw <span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">) =</span> <span class="kwa">let val</span> t <span class="sym">=</span> a$i <span class="kwa">in</span> <span class="sym">(</span>a<span class="sym">,</span>i<span class="sym">)&lt;-</span>a$j<span class="sym">; (</span>a<span class="sym">,</span>j<span class="sym">)&lt;-</span>t <span class="kwa">end
	    fun</span> go <span class="num">0</span> <span class="sym">=</span> pk <span class="sym">()</span>	<span class="com">(* odd case *)</span>
	      <span class="sym">|</span> go <span class="num">1</span> <span class="sym">= (</span>pk <span class="sym">();</span> sw<span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">);</span> pk <span class="sym">())</span> <span class="com">(* shortcut *)</span>
	      <span class="sym">|</span> go n <span class="sym">=
</span>		<span class="kwa">let val</span> m <span class="sym">=</span> n<span class="num">-1
</span>		    <span class="kwa">fun</span> l c <span class="sym">=</span> <span class="kwa">if</span> c<span class="sym">&gt;</span>n <span class="kwa">then</span> <span class="sym">()</span> <span class="kwa">else</span> <span class="sym">(</span>ge m<span class="sym">;</span> sw<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">);</span> l<span class="sym">(</span>c<span class="sym">+</span><span class="num">1</span><span class="sym">))
</span>		<span class="kwa">in</span> l <span class="num">0</span> <span class="kwa">end
	    and</span> ge <span class="num">0</span> <span class="sym">=</span> pk <span class="sym">()</span>	<span class="com">(* even case *)</span>
	      <span class="sym">|</span> ge <span class="num">1</span> <span class="sym">= (</span>pk <span class="sym">();</span> sw<span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">);</span> pk <span class="sym">())</span> <span class="com">(* shortcut *)</span>
	      <span class="sym">|</span> ge n <span class="sym">=
</span>		<span class="kwa">let val</span> m <span class="sym">=</span> n<span class="num">-1
</span>		    <span class="kwa">fun</span> l c <span class="sym">=</span> <span class="kwa">if</span> c<span class="sym">&gt;</span>n <span class="kwa">then</span> <span class="sym">()</span> <span class="kwa">else</span> <span class="sym">(</span>go m<span class="sym">;</span> sw<span class="sym">(</span>c<span class="sym">,</span>n<span class="sym">);</span> l<span class="sym">(</span>c<span class="sym">+</span><span class="num">1</span><span class="sym">))
</span>		<span class="kwa">in</span> l <span class="num">0</span> <span class="kwa">end
	in if</span> N mod <span class="num">2</span> <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> ge <span class="sym">(</span>N<span class="num">-1</span><span class="sym">)</span> <span class="kwa">else</span> go <span class="sym">(</span>N<span class="num">-1</span><span class="sym">);
</span>	   print <span class="sym">(</span>concat <span class="sym">[</span><span class="str">&quot;Pfannkuchen(&quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString N<span class="sym">,</span> <span class="str">&quot;) = &quot;</span><span class="sym">,
</span>			  <span class="kwa">Int</span>.toString <span class="sym">(!</span>maxc<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">]);
</span>	   OS.Process.success
	<span class="kwa">end

    fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1
</span>      <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))
</span><span class="kwa">end

val</span> <span class="sym">() =
</span>   OS.Process.exit <span class="sym">(</span>Test.main <span class="sym">(</span>CommandLine.name<span class="sym">(),</span> CommandLine.arguments<span class="sym">()))</span>
