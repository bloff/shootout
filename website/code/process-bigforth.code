\ The Great Computer Language Shootout
\ http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
\
\ contributed by Ian Osgood

\ read NUM from last command line argument
<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

require tasker<span class="sym">.</span>fs

variable receiver  \ task being poked
variable data      \ data being poked

<span class="sym">:</span> <span class="kwd">poke</span> <span class="sym">(</span> task data <span class="sym">-- )</span>
  begin receiver &#64; <span class="kwa">while</span> pause repeat
  data <span class="sym">!</span> dup receiver <span class="sym">!</span> wake <span class="sym">;</span>

<span class="sym">:</span> peek? <span class="sym">(</span> task <span class="sym">--</span> data T <span class="sym">|</span> F <span class="sym">)</span>
  receiver &#64; <span class="sym">=</span> dup <span class="kwa">if</span> <span class="num">0</span> receiver <span class="sym">!</span>  data &#64; swap then <span class="sym">;</span>

<span class="sym">:</span> <span class="kwd">task</span> <span class="sym">(</span> next<span class="sym">-</span>task <span class="sym">--</span> <span class="kwa">new</span><span class="sym">-</span>task <span class="sym">)</span>
  <span class="num">64</span> NewTask tuck <span class="num">2</span> over pass

  \ The remainder of <span class="kwa">this</span> word is executed in the task context<span class="sym">.</span>
  \ The task is killed when the word exits<span class="sym">.</span>

  <span class="sym">(</span> next<span class="sym">-</span>task <span class="kwa">this</span><span class="sym">-</span>task <span class="sym">-- )</span>
  begin pause dup peek? until nip
  <span class="num">1</span><span class="sym">+</span> over <span class="kwa">if</span> poke <span class="kwa">else</span> <span class="num">1</span> u<span class="sym">.</span>r cr drop then <span class="sym">;</span>

<span class="sym">:</span> main   <span class="num">0</span> receiver <span class="sym">!</span>
  <span class="kwd">0</span> <span class="sym">(</span> next<span class="sym">-</span>task <span class="sym">)</span>
  NUM <span class="num">0</span> <span class="kwa">do</span> task loop
  <span class="num">0</span> poke
  \ wait <span class="kwa">for</span> all tasks to finish
  begin pause single<span class="sym">-</span>tasking? until <span class="sym">;</span>

main bye  \ done<span class="sym">!</span>
