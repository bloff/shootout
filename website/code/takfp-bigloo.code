<span class="slc">;;; -*- mode: scheme -*-</span>
<span class="slc">;;; $Id: takfp-bigloo.code,v 1.3 2006-09-20 05:52:42 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; Contributed by Will M. Farr</span>
<span class="slc">;;;</span>

<span class="sym">(</span>module takfp
	<span class="sym">(</span>export
		<span class="sym">(</span>tak<span class="sym">::</span>double x<span class="sym">::</span>double y<span class="sym">::</span>double z<span class="sym">::</span>double<span class="sym">)</span>
		<span class="sym">(</span>takn<span class="sym">::</span>double <span class="sym">::</span>int<span class="sym">))</span>
		<span class="sym">(</span>main main<span class="sym">)</span>
		<span class="sym">(</span><span class="kwa">eval</span> <span class="sym">(</span>export<span class="sym">-</span>all<span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>tak<span class="sym">::</span>double x<span class="sym">::</span>double y<span class="sym">::</span>double z<span class="sym">::</span>double<span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;=</span>fl y x<span class="sym">)</span>
		z
		<span class="sym">(</span>tak <span class="sym">(</span>tak <span class="sym">(-</span>fl x <span class="num">1.0</span><span class="sym">)</span> y z<span class="sym">)</span>
				<span class="sym">(</span>tak <span class="sym">(-</span>fl y <span class="num">1.0</span><span class="sym">)</span> z x<span class="sym">)</span>
				<span class="sym">(</span>tak <span class="sym">(-</span>fl z <span class="num">1.0</span><span class="sym">)</span> x y<span class="sym">))))</span>

<span class="sym">(</span>define <span class="sym">(</span>takn<span class="sym">::</span>double n<span class="sym">::</span>int<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>a <span class="sym">(</span>fixnum<span class="sym">-&gt;</span>flonum n<span class="sym">)))</span>
	<span class="sym">(</span>tak <span class="sym">(*</span>fl <span class="num">3.0</span> a<span class="sym">) (*</span>fl <span class="num">2.0</span> a<span class="sym">) (*</span>fl <span class="num">1.0</span> a<span class="sym">))))</span>

<span class="sym">(</span>define <span class="sym">(</span>main argv<span class="sym">)</span>
	<span class="sym">(</span>display <span class="sym">(</span>takn <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> argv<span class="sym">))))</span>
	<span class="sym">(</span>newline<span class="sym">))</span>

<span class="slc">; vim: ts=4 ft=scheme</span>
