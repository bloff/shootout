#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp

# Fannkuch benchmark
#
# Contributed by Brent Fulgham

<span class="sym">(</span>define <span class="sym">(</span>fannkuch n<span class="sym">)
    (</span><span class="kwa">set</span> <span class="str">'perm  (array n))
    (set '</span>r n<span class="sym">)
    (</span><span class="kwa">set</span> <span class="str">'maxFlipsCount 0)
    (set '</span>m <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))
    (</span><span class="kwa">set</span> <span class="str">'perm1 (array n (sequence 0 m)))

    (while true
        (set '</span>mycount <span class="sym">(</span>array r <span class="sym">(</span>sequence <span class="num">1</span> r<span class="sym">)))
	(</span><span class="kwa">set</span> <span class="str">'r 1)

        (if (not (or (= (nth 0 perm1) 0)
                     (= (nth m perm1) m)))
            (begin
                (dotimes (i m)
                    (nth-set i perm (nth i perm1)))
                (set '</span>flipsCount <span class="num">0</span><span class="sym">)
                (</span><span class="kwa">set</span> <span class="str">'k -1)
                (while (!= k 0)
                    (set '</span>k <span class="sym">(</span><span class="kwa">nth</span> <span class="num">0</span> perm<span class="sym">))
                    (</span><span class="kwa">if</span> <span class="sym">(!=</span> k <span class="num">0</span><span class="sym">)
                        (</span>dotimes <span class="sym">(</span>i <span class="sym">(- (/ (+</span> <span class="num">1</span> k<span class="sym">)</span> <span class="num">2</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))
                            (</span><span class="kwa">set</span> <span class="str">'temp (nth i perm))
                            (nth-set i perm (nth (- k i) perm))
                            (nth-set (- k i) perm temp))
                        (set '</span>flipsCount <span class="sym">(+</span> flipsCount <span class="num">1</span><span class="sym">))))
                (</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(= (</span><span class="kwa">nth</span> <span class="num">0</span> perm1<span class="sym">)</span> <span class="num">0</span><span class="sym">)
                             (= (</span><span class="kwa">nth</span> m perm1<span class="sym">)</span> m<span class="sym">)))
                    (</span><span class="kwa">if</span> <span class="sym">(&gt;</span> flipsCount maxFlipsCount<span class="sym">)
                        (</span>begin
                            <span class="sym">(</span><span class="kwa">set</span> <span class="str">'maxFlipsCount flipsCount)
                            (dotimes (i m)
                                (nth-set i maxPerm (nth i perm1))))))
		(set '</span>tf true<span class="sym">)
                (</span><span class="kwa">while</span> tf
                    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> r n<span class="sym">)
                        (</span>return maxFlipsCount<span class="sym">))
                    (</span><span class="kwa">set</span> <span class="str">'perm0 (nth 0 perm1))
                    (set '</span>i <span class="num">0</span><span class="sym">)
                    (</span><span class="kwa">set</span> <span class="str">'j 0)
                    (while (&lt; i r)
                        (begin
                            (set '</span>j <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))
                            (</span><span class="kwa">nth</span><span class="sym">-</span><span class="kwa">set</span> i perm1 <span class="sym">(</span><span class="kwa">nth</span> j perm1<span class="sym">))
                            (</span><span class="kwa">set</span> <span class="str">'i j)))
                    (nth-set r perm1 perm0)

                    (nth-set r mycount (- (nth r mycount) 1))
                    (if (&gt; (nth r mycount) 0)
		        (set '</span>tf nil<span class="sym">)))
                (</span><span class="kwa">set</span> <span class="str">'r (+ r 1))))))

(define (main)
    (set '</span>n <span class="sym">(</span>integer <span class="sym">(</span><span class="kwa">nth</span> <span class="num">2</span> <span class="sym">(</span>main<span class="sym">-</span>args<span class="sym">))))
    (</span>println
        <span class="sym">(</span>format <span class="str">&quot;Pfannkuchen(%d) = %d&quot;</span> n <span class="sym">(</span>fannkuch n<span class="sym">))))

(</span>main<span class="sym">)
(</span><span class="kwa">exit</span><span class="sym">)</span>
