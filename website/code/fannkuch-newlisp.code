#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp

# fannkuch.newlisp <span class="sym">-</span> Fannkuch benchmark
#
# by Lutz Mueller <span class="num">2004</span><span class="sym">-</span><span class="num">12</span><span class="sym">-</span><span class="num">11</span>

<span class="sym">(</span>define MaxCount <span class="num">0</span><span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>permute left right<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">(</span>j <span class="sym">(</span><span class="kwa">length</span> right<span class="sym">))</span>
        <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> j <span class="num">2</span><span class="sym">)</span>
            <span class="sym">(</span>permCount <span class="sym">(</span><span class="kwa">append</span> left right<span class="sym">))</span>
            <span class="sym">(</span>dotimes <span class="sym">(</span>i j<span class="sym">)</span>
                <span class="sym">(</span>permute <span class="sym">(</span><span class="kwa">append</span> left <span class="sym">(</span>slice right i <span class="num">1</span><span class="sym">))</span>
                         <span class="sym">(</span><span class="kwa">append</span> <span class="sym">(</span>slice right <span class="num">0</span> i<span class="sym">) (</span>slice right <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))))))))</span>

<span class="sym">(</span>define <span class="sym">(</span>permCount perm <span class="sym">,</span> myCount perm0<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">set</span> <span class="str">'myCount 0)</span>
<span class="str">    (while (!= (set '</span>perm0 <span class="sym">(</span>first perm<span class="sym">))</span> <span class="num">1</span><span class="sym">)</span>
        <span class="sym">(</span>inc <span class="str">'myCount)</span>
<span class="str">        (set '</span>perm <span class="sym">(</span><span class="kwa">append</span> <span class="sym">(</span><span class="kwa">reverse</span> <span class="sym">(</span>slice perm <span class="num">0</span> perm0<span class="sym">)) (</span>slice perm perm0<span class="sym">))))</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> myCount MaxCount<span class="sym">) (</span><span class="kwa">set</span> <span class="str">'MaxCount myCount)))</span>
<span class="str"></span>
<span class="str">(define (fannkuch n)</span>
<span class="str">    (permute '</span><span class="sym">() (</span>sequence <span class="num">1</span> n<span class="sym">))</span>
    MaxCount<span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>main<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">set</span> <span class="str">'n (integer (nth 2 (main-args))))</span>
<span class="str">    (println (format &quot;Pfannkuchen(%d) = %d&quot; n (fannkuch n))))</span>
<span class="str"></span>
<span class="str">(main)</span>
<span class="str">(exit)</span>
