<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy

To compile:
   nicec --sourcepath=.. -d=. -a spectralnorm.jar spectralnorm

To run:
   java -jar spectralnorm.jar 2000
*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>text<span class="sym">.*;

</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span>   <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>   <span class="slc">// create unit vector
</span>   <span class="kwa">let</span> u <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>n<span class="sym">];
</span>   <span class="kwa">for</span> <span class="sym">(</span>var i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> u<span class="sym">[</span>i<span class="sym">] =</span>  <span class="num">1.0</span><span class="sym">;

</span>   <span class="slc">// 20 steps of the power method
</span>   <span class="kwa">let</span> v <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>n<span class="sym">];
</span>   <span class="kwa">for</span> <span class="sym">(</span>var i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span><span class="num">10</span><span class="sym">;</span> i<span class="sym">++) {
</span>      MultiplyAtAv<span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">,</span>v<span class="sym">);
</span>      MultiplyAtAv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">);
   }

</span>   <span class="slc">// B=AtA         A multiplied by A transposed
</span>   <span class="slc">// v.Bv /(v.v)   eigenvalue of v
</span>   var vBv <span class="sym">=</span> <span class="num">0.0</span><span class="sym">,</span> vv <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>   <span class="kwa">for</span> <span class="sym">(</span>var i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>      vBv <span class="sym">+=</span> u<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];
</span>      vv  <span class="sym">+=</span> v<span class="sym">[</span>i<span class="sym">]*</span>v<span class="sym">[</span>i<span class="sym">];
   }

</span>   println<span class="sym">(</span> floatFormat<span class="sym">(</span><span class="num">9</span><span class="sym">).</span>format<span class="sym">(</span> <span class="kwc">Math</span><span class="sym">.</span>sqrt<span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">) ) );
}


</span><span class="com">/* return element i,j of infinite matrix A */</span>
<span class="kwb">double</span> A<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> j<span class="sym">){
</span>   <span class="kwa">return</span> <span class="num">1.0</span><span class="sym">/((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">) /</span><span class="num">2</span> <span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">);
}

</span><span class="com">/* multiply vector v by matrix A */</span>
<span class="kwb">void</span> MultiplyAv<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> v<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> Av<span class="sym">){
</span>   <span class="kwa">for</span> <span class="sym">(</span>var i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++){
</span>      Av<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0.0</span><span class="sym">;
</span>      <span class="kwa">for</span> <span class="sym">(</span>var j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>n<span class="sym">;</span> j<span class="sym">++)</span> Av<span class="sym">[</span>i<span class="sym">] +=</span> A<span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">)*</span>v<span class="sym">[</span>j<span class="sym">];
   }
}

</span><span class="com">/* multiply vector v by matrix A transposed */</span>
<span class="kwb">void</span> MultiplyAtv<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> v<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> Atv<span class="sym">){
</span>   <span class="kwa">for</span> <span class="sym">(</span>var i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span>i<span class="sym">&lt;</span>n<span class="sym">;</span>i<span class="sym">++){
</span>      Atv<span class="sym">[</span>i<span class="sym">] =</span> <span class="num">0.0</span><span class="sym">;
</span>      <span class="kwa">for</span> <span class="sym">(</span>var j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>n<span class="sym">;</span> j<span class="sym">++)</span> Atv<span class="sym">[</span>i<span class="sym">] +=</span> A<span class="sym">(</span>j<span class="sym">,</span>i<span class="sym">)*</span>v<span class="sym">[</span>j<span class="sym">];
   }
}

</span><span class="com">/* multiply vector v by matrix A and then by matrix A transposed */</span>
<span class="kwb">void</span> MultiplyAtAv<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> v<span class="sym">,</span> <span class="kwb">double</span><span class="sym">[]</span> AtAv<span class="sym">){
</span>   <span class="kwa">let</span> u <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span>n<span class="sym">];
</span>   MultiplyAv<span class="sym">(</span>n<span class="sym">,</span>v<span class="sym">,</span>u<span class="sym">);
</span>   MultiplyAtv<span class="sym">(</span>n<span class="sym">,</span>u<span class="sym">,</span>AtAv<span class="sym">);
}

</span><span class="kwc">NumberFormat</span> floatFormat<span class="sym">(</span><span class="kwb">int</span> digits<span class="sym">){
</span>   <span class="kwa">let</span> f <span class="sym">=</span> <span class="kwc">NumberFormat</span><span class="sym">.</span>getInstance<span class="sym">();
</span>   f<span class="sym">.</span>setGroupingUsed<span class="sym">(</span>false<span class="sym">);
</span>   f<span class="sym">.</span>setMaximumFractionDigits<span class="sym">(</span>digits<span class="sym">);
</span>   f<span class="sym">.</span>setMinimumFractionDigits<span class="sym">(</span>digits<span class="sym">);
</span>   <span class="kwa">return</span> f<span class="sym">;
}</span>
