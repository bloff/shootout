#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="sym">-</span>e main <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="slc">;;; $Id: wordfreq-guile.code,v 1.6 2005-11-06 23:11:42 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; from Brad Knotwell</span>

<span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="sym">-</span><span class="num">9</span> string<span class="sym">-</span>fun<span class="sym">) (</span>ice<span class="sym">-</span><span class="num">9</span> common<span class="sym">-</span><span class="kwa">list</span><span class="sym">))</span>
<span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="sym">-</span><span class="num">9</span> format<span class="sym">))</span>

<span class="sym">(</span>define my<span class="sym">-</span>hash <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="num">4000</span><span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>sorted<span class="sym">-</span>hash<span class="sym">)</span>
  <span class="sym">(</span>define <span class="sym">(</span>display<span class="sym">-</span>elt elt<span class="sym">)</span>
    <span class="sym">(</span>display <span class="sym">(</span>format <span class="str">&quot;~7D ~a</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span><span class="kwa">car</span> elt<span class="sym">) (</span><span class="kwa">cdr</span> elt<span class="sym">))))</span>
  <span class="sym">(</span>map display<span class="sym">-</span>elt
       <span class="sym">(</span>sort<span class="sym">-</span><span class="kwa">list</span> <span class="sym">(</span>hash<span class="sym">-</span>fold <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>x y z<span class="sym">) (</span><span class="kwa">cons</span> <span class="sym">(</span><span class="kwa">cons</span> y x<span class="sym">)</span> z<span class="sym">))</span>  <span class="str">'() my-hash)</span>
<span class="str">		  (lambda (x y) (or (&gt; (car x) (car y))</span>
<span class="str">				    (and (= (car x) (car y))</span>
<span class="str">					 (string&gt;=? (cdr x) (cdr y))))))))</span>
<span class="str">(define (load-hash x . tl)</span>
<span class="str">  (define (do-entry entry)</span>
<span class="str">    (let ((entry-val (hash-ref my-hash entry)))</span>
<span class="str">      (hash-set! my-hash entry (if entry-val (1+ entry-val) 1))))</span>
<span class="str">  (map do-entry (remove-if (lambda (x) (string=? x &quot;&quot;)) (cons x tl))))</span>
<span class="str"></span>
<span class="str">(define (main args)</span>
<span class="str">  (do ((line (read-line) (read-line)))</span>
<span class="str">      ((eof-object? line) (print-sorted-hash))</span>
<span class="str">    (separate-fields-discarding-char</span>
<span class="str">     #</span><span class="esc">\s</span><span class="str">pace</span>
<span class="str">     (list-&gt;string (map (lambda (x) (if (char-alphabetic? x) x #</span><span class="esc">\s</span><span class="str">pace))</span>
<span class="str">			(string-&gt;list (string-downcase line))))</span>
<span class="str">     load-hash)))</span>
