<span class="slc">#########################################</span>
<span class="slc">#     The Computer Language Shootout    #</span>
<span class="slc">#   http://shootout.alioth.debian.org/  #</span>
<span class="slc">#                                       #</span>
<span class="slc">#      Contributed by Jesse Millikan    #</span>
<span class="slc">#########################################</span>

<span class="kwa">use</span> threads<span class="sym">;</span>
<span class="kwa">use</span> threads<span class="sym">::</span>shared<span class="sym">;</span>

<span class="slc"># Complement method is numerical based on Haskell version</span>
<span class="kwc">my</span> <span class="sym">(</span><span class="kwb">$red</span><span class="sym">,</span> <span class="kwb">$yellow</span><span class="sym">,</span> <span class="kwb">$blue</span><span class="sym">,</span> <span class="kwb">$none</span><span class="sym">) = (</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">2</span><span class="sym">,</span><span class="num">3</span><span class="sym">);</span>

<span class="slc"># Count, signal and mutex are all $meetings</span>
<span class="kwc">my</span> <span class="kwb">$meetings</span> <span class="sym">:</span> shared <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];</span>

<span class="slc"># Locked and updated by each thread when it ends</span>
<span class="kwc">my</span> <span class="kwb">$total_meetings</span> <span class="sym">:</span> shared <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

<span class="slc"># Colour communication variables</span>
<span class="kwc">my</span> <span class="kwb">$first</span> <span class="sym">:</span> shared <span class="sym">=</span> <span class="kwb">$none</span><span class="sym">;</span>
<span class="kwc">my</span> <span class="kwb">$second</span> <span class="sym">:</span> shared <span class="sym">=</span> <span class="kwb">$none</span><span class="sym">;</span>

<span class="slc"># $_ is thread on the outer map and color on the inner loop</span>
map <span class="sym">{</span> <span class="kwb">$_</span><span class="sym">-&gt;</span>join <span class="sym">} (</span>map <span class="sym">{</span>
 <span class="slc"># async starts a new thread running the block given</span>
 async <span class="sym">{</span>
  <span class="kwc">my</span> <span class="sym">(</span><span class="kwb">$color</span><span class="sym">,</span> <span class="kwb">$other_color</span><span class="sym">) = (</span><span class="kwb">$_</span><span class="sym">,</span><span class="kwb">$none</span><span class="sym">);</span>
  <span class="kwc">my</span> <span class="kwb">$met</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

  <span class="slc"># with 'redo', loop until 'last' is called</span>
  LIVE<span class="sym">: {</span>

   <span class="slc"># Meeting place</span>
   <span class="sym">{</span>
    lock <span class="kwb">$meetings</span><span class="sym">;</span>

    <span class="kwa">last</span> LIVE <span class="kwa">if</span><span class="sym">(</span><span class="kwb">$meetings</span> <span class="sym">&lt;=</span> <span class="num">0</span><span class="sym">);</span> <span class="slc"># 'fade' by jumping out of the block</span>

    <span class="kwa">if</span><span class="sym">(</span><span class="kwb">$first</span> <span class="sym">!=</span> <span class="kwb">$none</span><span class="sym">){</span>
     <span class="kwb">$other_color</span> <span class="sym">=</span> <span class="kwb">$first</span><span class="sym">;</span>
     <span class="kwb">$second</span> <span class="sym">=</span> <span class="kwb">$color</span><span class="sym">;</span>
     cond_signal <span class="kwb">$meetings</span><span class="sym">;</span>
     <span class="kwb">$meetings</span> <span class="sym">-=</span> <span class="num">1</span><span class="sym">;</span>
     <span class="kwb">$first</span> <span class="sym">=</span> <span class="kwb">$none</span><span class="sym">;</span>
    <span class="sym">}</span>
    <span class="kwa">else</span>
    <span class="sym">{</span>
     <span class="kwb">$first</span> <span class="sym">=</span> <span class="kwb">$color</span><span class="sym">;</span>
     cond_wait <span class="kwb">$meetings</span><span class="sym">;</span>
     <span class="kwb">$other_color</span> <span class="sym">=</span> <span class="kwb">$second</span><span class="sym">;</span>
    <span class="sym">}</span>
   <span class="sym">}</span> <span class="slc"># Unlock the meeting place</span>

   <span class="kwb">$color</span> <span class="sym">=</span> <span class="num">3</span> <span class="sym">-</span> <span class="kwb">$color</span> <span class="sym">-</span> <span class="kwb">$other_color</span> <span class="kwa">if</span><span class="sym">(</span><span class="kwb">$color</span> <span class="sym">!=</span> <span class="kwb">$other_color</span><span class="sym">);</span>
   <span class="kwb">$met</span><span class="sym">++;</span>

   redo<span class="sym">;</span>
  <span class="sym">}</span>

  <span class="slc"># Lock the total and add own to it before dying</span>
  lock <span class="kwb">$total_meetings</span><span class="sym">;</span>
  <span class="kwb">$total_meetings</span> <span class="sym">+=</span> <span class="kwb">$met</span><span class="sym">;</span>
 <span class="sym">}</span>
<span class="sym">} (</span><span class="kwb">$blue</span><span class="sym">,</span> <span class="kwb">$red</span><span class="sym">,</span> <span class="kwb">$yellow</span><span class="sym">,</span> <span class="kwb">$blue</span><span class="sym">));</span>

print <span class="str">&quot;$total_meetings</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
