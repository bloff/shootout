<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by bfulgham (with help from Dirus&#64;programmer.net)
   modified by M. Hanauska

   this program modified from:
     http://cm.bell-labs.com/cm/cs/who/bwk/interps/pap.html
   Timing Trials, or, the Trials of Timing: Experiments with Scripting
   and User-Interface Languages&lt;/a&gt; by Brian W. Kernighan and
   Christopher J. Van Wyk.
*/</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;

</span><span class="kwa">public class</span> wc <span class="sym">{
</span>    <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">) {
</span>        <span class="kwb">int</span> nl <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> nw <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> nc <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>        <span class="kwa">try</span> <span class="sym">{
</span>            <span class="kwb">byte</span><span class="sym">[]</span> buff <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span><span class="num">4096</span><span class="sym">];
</span>            <span class="kwb">boolean</span> inword <span class="sym">=</span> false<span class="sym">;
</span>            <span class="kwb">int</span> length<span class="sym">;

</span>            <span class="kwa">while</span> <span class="sym">((</span>length <span class="sym">=</span> <span class="kwc">System</span><span class="sym">.</span>in<span class="sym">.</span>read<span class="sym">(</span>buff<span class="sym">)) != -</span><span class="num">1</span><span class="sym">) {
</span>                nc <span class="sym">+=</span> length<span class="sym">;
</span>                <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> length<span class="sym">;</span> i<span class="sym">++) {
</span>                    <span class="kwa">switch</span> <span class="sym">(</span>buff<span class="sym">[</span>i<span class="sym">]) {
</span>                        <span class="com">/* Linebreak */</span>
                        <span class="kwa">case</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">:</span> nl<span class="sym">++;

</span>                        <span class="com">/* Whitespace */</span>
                        <span class="kwa">case</span> <span class="str">'</span><span class="esc">\r</span><span class="str">'</span><span class="sym">:
</span>                        <span class="kwa">case</span> <span class="str">'</span><span class="esc">\t</span><span class="str">'</span><span class="sym">:
</span>                        <span class="kwa">case</span>  <span class="str">' '</span><span class="sym">:</span> inword <span class="sym">=</span> false<span class="sym">;</span> <span class="kwa">break</span><span class="sym">;

</span>                        <span class="com">/* Within word */</span>
                        <span class="kwa">default</span><span class="sym">:
</span>                            <span class="kwa">if</span> <span class="sym">(!</span>inword<span class="sym">) {
</span>                                nw <span class="sym">++;
</span>                                inword <span class="sym">=</span> true<span class="sym">;
                            }
                    }

                }
            }
        }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">IOException</span> e<span class="sym">) {
</span>            <span class="kwc">System</span><span class="sym">.</span>err<span class="sym">.</span>println<span class="sym">(</span>e<span class="sym">);
</span>            <span class="kwa">return</span><span class="sym">;
        }
</span>        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span><span class="kwc">Integer</span><span class="sym">.</span>toString<span class="sym">(</span>nl<span class="sym">) +</span> <span class="str">&quot; &quot;</span> <span class="sym">+
</span>                           <span class="kwc">Integer</span><span class="sym">.</span>toString<span class="sym">(</span>nw<span class="sym">) +</span> <span class="str">&quot; &quot;</span> <span class="sym">+
</span>                           <span class="kwc">Integer</span><span class="sym">.</span>toString<span class="sym">(</span>nc<span class="sym">));
    }
}</span>
