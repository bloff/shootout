<span class="line">    1 </span><span class="com">(* -*- mode: sml -*-
</span><span class="line">    2 </span><span class="com"> * $Id: methcall-mlton.code,v 1.4 2004-11-13 07:42:17 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> * from Stephen Weeks
</span><span class="line">    5 </span><span class="com"> *)</span>
<span class="line">    6 </span><span class="com">(* Based on methcall.gcc. *)</span>
<span class="line">    7 </span>
<span class="line">    8 </span><span class="kwa">fun</span> for <span class="sym">(</span>start<span class="sym">,</span> stop<span class="sym">,</span> f<span class="sym">) =
</span><span class="line">    9 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">   10 </span><span class="kwa">      fun</span> loop i <span class="sym">=
</span><span class="line">   11 </span><span class="sym"></span>         <span class="kwa">if</span> i <span class="sym">&gt;</span> stop
<span class="line">   12 </span>            <span class="kwa">then</span> <span class="sym">()
</span><span class="line">   13 </span><span class="sym"></span>         <span class="kwa">else</span> <span class="sym">(</span>f i<span class="sym">;</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   14 </span><span class="sym"></span>   <span class="kwa">in
</span><span class="line">   15 </span><span class="kwa"></span>      loop start
<span class="line">   16 </span>   <span class="kwa">end
</span><span class="line">   17 </span><span class="kwa">
</span><span class="line">   18 </span><span class="kwa">structure</span> Toggle <span class="sym">=
</span><span class="line">   19 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">   20 </span><span class="kwa">      datatype</span> 'a t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{
</span><span class="line">   21 </span><span class="sym"></span>                            state<span class="sym">:</span> 'a ref<span class="sym">,
</span><span class="line">   22 </span><span class="sym"></span>                            value<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> 'a<span class="sym">,
</span><span class="line">   23 </span><span class="sym"></span>                            activate<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> 'a t
<span class="line">   24 </span>                            <span class="sym">}
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym"></span>      <span class="kwa">fun</span> new state <span class="sym">=
</span><span class="line">   27 </span><span class="sym"></span>         T <span class="sym">{</span>state <span class="sym">=</span> ref state<span class="sym">,
</span><span class="line">   28 </span><span class="sym"></span>            value <span class="sym">=</span> <span class="kwa">fn</span> T <span class="sym">{</span>state<span class="sym">,</span> ...<span class="sym">} =&gt; !</span>state<span class="sym">,
</span><span class="line">   29 </span><span class="sym"></span>            activate <span class="sym">=</span> <span class="kwa">fn</span> this <span class="kwa">as</span> T <span class="sym">{</span>state<span class="sym">,</span> ...<span class="sym">} =&gt; (</span>state <span class="sym">:=</span> not<span class="sym">(!</span>state<span class="sym">);</span> this<span class="sym">)}
</span><span class="line">   30 </span><span class="sym">
</span><span class="line">   31 </span><span class="sym"></span>      <span class="kwa">fun</span> activate <span class="sym">(</span>this <span class="kwa">as</span> T <span class="sym">{</span>activate<span class="sym">,</span> ...<span class="sym">}) =</span> activate this
<span class="line">   32 </span>      <span class="kwa">fun</span> value <span class="sym">(</span>this <span class="kwa">as</span> T <span class="sym">{</span>value<span class="sym">,</span> ...<span class="sym">}) =</span> value this
<span class="line">   33 </span>   <span class="kwa">end
</span><span class="line">   34 </span><span class="kwa">
</span><span class="line">   35 </span><span class="kwa">structure</span> Ntoggle <span class="sym">=
</span><span class="line">   36 </span><span class="sym"></span>   <span class="kwa">struct
</span><span class="line">   37 </span><span class="kwa">      datatype</span> 'a t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{
</span><span class="line">   38 </span><span class="sym"></span>                            state<span class="sym">:</span> 'a ref<span class="sym">,
</span><span class="line">   39 </span><span class="sym"></span>                            value<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> 'a<span class="sym">,
</span><span class="line">   40 </span><span class="sym"></span>                            activate<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> 'a t<span class="sym">,
</span><span class="line">   41 </span><span class="sym"></span>                            countMax<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,
</span><span class="line">   42 </span><span class="sym"></span>                            counter<span class="sym">:</span> <span class="kwb">int</span> ref
<span class="line">   43 </span>                            <span class="sym">}
</span><span class="line">   44 </span><span class="sym">
</span><span class="line">   45 </span><span class="sym"></span>      <span class="kwa">fun</span> new <span class="sym">(</span>state<span class="sym">,</span> countMax<span class="sym">) =
</span><span class="line">   46 </span><span class="sym"></span>         T <span class="sym">{
</span><span class="line">   47 </span><span class="sym"></span>            state <span class="sym">=</span> ref state<span class="sym">,
</span><span class="line">   48 </span><span class="sym"></span>            value <span class="sym">=</span> <span class="kwa">fn</span> T <span class="sym">{</span>state<span class="sym">,</span> ...<span class="sym">} =&gt; !</span>state<span class="sym">,
</span><span class="line">   49 </span><span class="sym"></span>            activate <span class="sym">= (</span><span class="kwa">fn</span> this <span class="kwa">as</span> T <span class="sym">{</span>state<span class="sym">,</span> counter<span class="sym">,</span> countMax<span class="sym">,</span> ...<span class="sym">} =&gt;
</span><span class="line">   50 </span><span class="sym"></span>                        <span class="kwa">let
</span><span class="line">   51 </span><span class="kwa">                           val</span> newCounter <span class="sym">=</span> <span class="num">1</span> <span class="sym">+ !</span>counter
<span class="line">   52 </span>                           <span class="kwa">val</span> _ <span class="sym">=</span> counter <span class="sym">:=</span> newCounter
<span class="line">   53 </span>                           <span class="kwa">val</span> _ <span class="sym">=
</span><span class="line">   54 </span><span class="sym"></span>                              <span class="kwa">if</span> <span class="sym">!</span>counter <span class="sym">&gt;=</span> countMax
<span class="line">   55 </span>                                 <span class="kwa">then</span> <span class="sym">(</span>state <span class="sym">:=</span> not<span class="sym">(!</span>state<span class="sym">);
</span><span class="line">   56 </span><span class="sym"></span>                                       counter <span class="sym">:=</span> <span class="num">0</span><span class="sym">)
</span><span class="line">   57 </span><span class="sym"></span>                              <span class="kwa">else</span> <span class="sym">()
</span><span class="line">   58 </span><span class="sym"></span>                        <span class="kwa">in
</span><span class="line">   59 </span><span class="kwa"></span>                           this
<span class="line">   60 </span>                        <span class="kwa">end</span><span class="sym">),
</span><span class="line">   61 </span><span class="sym"></span>            countMax <span class="sym">=</span> countMax<span class="sym">,
</span><span class="line">   62 </span><span class="sym"></span>            counter <span class="sym">=</span> ref <span class="num">0
</span><span class="line">   63 </span><span class="num"></span>            <span class="sym">}
</span><span class="line">   64 </span><span class="sym">
</span><span class="line">   65 </span><span class="sym"></span>      <span class="kwa">fun</span> activate <span class="sym">(</span>this <span class="kwa">as</span> T <span class="sym">{</span>activate<span class="sym">,</span> ...<span class="sym">}) =</span> activate this
<span class="line">   66 </span>      <span class="kwa">fun</span> value <span class="sym">(</span>this <span class="kwa">as</span> T <span class="sym">{</span>value<span class="sym">,</span> ...<span class="sym">}) =</span> value this
<span class="line">   67 </span>   <span class="kwa">end
</span><span class="line">   68 </span><span class="kwa">
</span><span class="line">   69 </span><span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0
</span><span class="line">   70 </span><span class="num"></span><span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">)
</span><span class="line">   71 </span><span class="sym">
</span><span class="line">   72 </span><span class="sym"></span><span class="kwa">fun</span> main <span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =
</span><span class="line">   73 </span><span class="sym"></span>   <span class="kwa">let
</span><span class="line">   74 </span><span class="kwa">      val</span> n <span class="sym">=</span> atoi <span class="sym">(</span>hd <span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]))
</span><span class="line">   75 </span><span class="sym"></span>      <span class="kwa">val</span> v <span class="sym">=</span> ref <span class="kwa">true
</span><span class="line">   76 </span><span class="kwa">      val</span> tog <span class="sym">=</span> Toggle.new <span class="kwa">true
</span><span class="line">   77 </span><span class="kwa">      val</span> _ <span class="sym">=</span> for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n <span class="num">- 1</span><span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> v <span class="sym">:=</span> Toggle.value <span class="sym">(</span>Toggle.activate tog<span class="sym">))
</span><span class="line">   78 </span><span class="sym"></span>      <span class="kwa">val</span> _ <span class="sym">=</span> print <span class="sym">(</span><span class="kwa">if</span> <span class="sym">!</span>v <span class="kwa">then</span> <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="kwa">else</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)
</span><span class="line">   79 </span><span class="sym"></span>      <span class="kwa">val</span> _ <span class="sym">=</span> v <span class="sym">:=</span> <span class="kwa">true
</span><span class="line">   80 </span><span class="kwa">      val</span> ntog <span class="sym">=</span> Ntoggle.new <span class="sym">(!</span>v<span class="sym">,</span> <span class="num">3</span><span class="sym">)
</span><span class="line">   81 </span><span class="sym"></span>      <span class="kwa">val</span> _ <span class="sym">=</span> for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n <span class="num">- 1</span><span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> v <span class="sym">:=</span> Ntoggle.value <span class="sym">(</span>Ntoggle.activate ntog<span class="sym">))
</span><span class="line">   82 </span><span class="sym"></span>      <span class="kwa">val</span> _ <span class="sym">=</span> print <span class="sym">(</span><span class="kwa">if</span> <span class="sym">!</span>v <span class="kwa">then</span> <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="kwa">else</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)
</span><span class="line">   83 </span><span class="sym"></span>   <span class="kwa">in
</span><span class="line">   84 </span><span class="kwa"></span>      OS.Process.success
<span class="line">   85 </span>   <span class="kwa">end
</span><span class="line">   86 </span><span class="kwa">
</span><span class="line">   87 </span><span class="kwa">val</span> _ <span class="sym">=</span> main<span class="sym">(</span> CommandLine.name<span class="sym">(),</span> CommandLine.arguments<span class="sym">() )</span>
