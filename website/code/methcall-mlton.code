<span class="com">(* -*- mode: sml -*-</span>
<span class="com"> * $Id: methcall-mlton.code,v 1.8 2006-02-15 07:29:44 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * from Stephen Weeks</span>
<span class="com"> *)</span>
<span class="com">(* Based on methcall.gcc. *)</span>

<span class="kwa">structure</span> Toggle <span class="sym">=</span>
   <span class="kwa">struct</span>
      <span class="kwa">datatype</span> 'a t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>
			    state<span class="sym">:</span> 'a ref<span class="sym">,</span>
			    value<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> 'a<span class="sym">,</span>
			    activate<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> 'a t
			    <span class="sym">}</span>

      <span class="kwa">fun</span> new state <span class="sym">=</span>
	 T <span class="sym">{</span>state <span class="sym">=</span> ref state<span class="sym">,</span>
	    value <span class="sym">=</span> <span class="kwa">fn</span> T <span class="sym">{</span>state<span class="sym">,</span> ...<span class="sym">} =&gt; !</span>state<span class="sym">,</span>
	    activate <span class="sym">=</span> <span class="kwa">fn</span> this <span class="kwa">as</span> T <span class="sym">{</span>state<span class="sym">,</span> ...<span class="sym">} =&gt; (</span>state <span class="sym">:=</span> not<span class="sym">(!</span>state<span class="sym">);</span> this<span class="sym">)}</span>

      <span class="kwa">fun</span> activate <span class="sym">(</span>this <span class="kwa">as</span> T <span class="sym">{</span>activate<span class="sym">,</span> ...<span class="sym">}) =</span> activate this
      <span class="kwa">fun</span> value <span class="sym">(</span>this <span class="kwa">as</span> T <span class="sym">{</span>value<span class="sym">,</span> ...<span class="sym">}) =</span> value this
   <span class="kwa">end</span>

<span class="kwa">structure</span> Ntoggle <span class="sym">=</span>
   <span class="kwa">struct</span>
      <span class="kwa">datatype</span> 'a t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>
			    state<span class="sym">:</span> 'a ref<span class="sym">,</span>
			    value<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> 'a<span class="sym">,</span>
			    activate<span class="sym">:</span> 'a t <span class="sym">-&gt;</span> 'a t<span class="sym">,</span>
			    countMax<span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span>
			    counter<span class="sym">:</span> <span class="kwb">int</span> ref
			    <span class="sym">}</span>

      <span class="kwa">fun</span> new <span class="sym">(</span>state<span class="sym">,</span> countMax<span class="sym">) =</span>
	 T <span class="sym">{</span>
	    state <span class="sym">=</span> ref state<span class="sym">,</span>
	    value <span class="sym">=</span> <span class="kwa">fn</span> T <span class="sym">{</span>state<span class="sym">,</span> ...<span class="sym">} =&gt; !</span>state<span class="sym">,</span>
	    activate <span class="sym">= (</span><span class="kwa">fn</span> this <span class="kwa">as</span> T <span class="sym">{</span>state<span class="sym">,</span> counter<span class="sym">,</span> countMax<span class="sym">,</span> ...<span class="sym">} =&gt;</span>
			<span class="kwa">let</span>
			   <span class="kwa">val</span> newCounter <span class="sym">=</span> <span class="num">1</span> <span class="sym">+ !</span>counter
			   <span class="kwa">val</span> _ <span class="sym">=</span> counter <span class="sym">:=</span> newCounter
			   <span class="kwa">val</span> _ <span class="sym">=</span>
			      <span class="kwa">if</span> <span class="sym">!</span>counter <span class="sym">&gt;=</span> countMax
				 <span class="kwa">then</span> <span class="sym">(</span>state <span class="sym">:=</span> not<span class="sym">(!</span>state<span class="sym">);</span>
				       counter <span class="sym">:=</span> <span class="num">0</span><span class="sym">)</span>
			      <span class="kwa">else</span> <span class="sym">()</span>
			<span class="kwa">in</span>
			   this
			<span class="kwa">end</span><span class="sym">),</span>
	    countMax <span class="sym">=</span> countMax<span class="sym">,</span>
	    counter <span class="sym">=</span> ref <span class="num">0</span>
	    <span class="sym">}</span>

      <span class="kwa">fun</span> activate <span class="sym">(</span>this <span class="kwa">as</span> T <span class="sym">{</span>activate<span class="sym">,</span> ...<span class="sym">}) =</span> activate this
      <span class="kwa">fun</span> value <span class="sym">(</span>this <span class="kwa">as</span> T <span class="sym">{</span>value<span class="sym">,</span> ...<span class="sym">}) =</span> value this
   <span class="kwa">end</span>

<span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0</span>
<span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">)</span>

<span class="kwa">fun</span> main <span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =</span>
   <span class="kwa">let</span>
      <span class="kwa">val</span> n <span class="sym">=</span> atoi <span class="sym">(</span>hd <span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]))</span>
      <span class="kwa">val</span> v <span class="sym">=</span> ref <span class="kwa">true</span>
      <span class="kwa">val</span> tog <span class="sym">=</span> Toggle.new <span class="kwa">true</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> v <span class="sym">:=</span> Toggle.value <span class="sym">(</span>Toggle.activate tog<span class="sym">))</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> print <span class="sym">(</span><span class="kwa">if</span> <span class="sym">!</span>v <span class="kwa">then</span> <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="kwa">else</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> v <span class="sym">:=</span> <span class="kwa">true</span>
      <span class="kwa">val</span> ntog <span class="sym">=</span> Ntoggle.new <span class="sym">(!</span>v<span class="sym">,</span> <span class="num">3</span><span class="sym">)</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> v <span class="sym">:=</span> Ntoggle.value <span class="sym">(</span>Ntoggle.activate ntog<span class="sym">))</span>
      <span class="kwa">val</span> _ <span class="sym">=</span> print <span class="sym">(</span><span class="kwa">if</span> <span class="sym">!</span>v <span class="kwa">then</span> <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="kwa">else</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
   <span class="kwa">in</span>
      OS.Process.success
   <span class="kwa">end</span>

<span class="kwa">val</span> _ <span class="sym">=</span> main<span class="sym">(</span> CommandLine.name<span class="sym">(),</span> CommandLine.arguments<span class="sym">() )</span>
