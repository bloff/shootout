<span class="slc"># The Great Computer Language Shootout
</span><span class="slc"># http://shootout.alioth.debian.org
</span><span class="slc">#
</span><span class="slc"># contributed by Steven Huwig
</span>
<span class="kwa">BEGIN</span> <span class="sym">{
</span>    REPLY_SIZE <span class="sym">=</span> <span class="num">64</span><span class="sym">;
</span>    REQUEST_SIZE <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>    M <span class="sym">=</span> <span class="num">6400</span><span class="sym">;
</span>    N <span class="sym">=</span> <span class="kwb">ARGV</span><span class="sym">[</span><span class="num">1</span><span class="sym">];
</span>    <span class="kwa">if</span> <span class="sym">(!</span>client<span class="sym">) {
</span>        socket <span class="sym">=</span> <span class="str">&quot;/inet/tcp/8000/0/0&quot;</span><span class="sym">;
</span>        <span class="kwa">system</span><span class="sym">(</span><span class="str">&quot;./tcp.awk -v client=1 &quot;</span> N <span class="str">&quot; &amp;&quot;</span><span class="sym">);
</span>        <span class="kwa">while</span> <span class="sym">((</span>socket <span class="sym">|&amp;</span> <span class="kwa">getline</span><span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">) {
</span>            <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">%&quot;</span><span class="str">REPLY_SIZE&quot;</span>s<span class="str">&quot;, &quot;</span>\n<span class="str">&quot;) |&amp; socket;
        }
    } else {
        socket = &quot;</span><span class="sym">/</span>inet<span class="sym">/</span>tcp<span class="sym">/</span><span class="num">0</span><span class="sym">/</span>localhost<span class="sym">/</span><span class="num">8000</span><span class="str">&quot;;
        i = N;
        while (i-- &gt; 0) {
            j = M;
            while (j-- &gt; 0) {
                printf(&quot;</span>%<span class="str">&quot;REQUEST_SIZE&quot;</span>s<span class="str">&quot;, &quot;</span>\n<span class="str">&quot;) |&amp; socket;
                socket |&amp; getline var;
                bytes += length(var) + 1; # +1 for implicit</span> <span class="esc">\n </span> <span class="str">getline chomp
                replies++;
            }
        }
        print &quot;</span>replies<span class="sym">:</span> <span class="str">&quot; replies &quot;</span>   bytes<span class="sym">:</span> <span class="str">&quot; bytes;
    }
    close(socket);
}</span>
