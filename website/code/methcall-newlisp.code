#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp

# method call  <span class="sym">-</span> benchmark
#
# this is almost identical to objinst.lsp
# but here method call is measured instead of
# object creation <span class="sym">/</span> instantiation
#
# Contributed by Lutz Mueller

# define class Toggle

<span class="sym">(</span>context <span class="str">'Toggle)</span>
<span class="str"></span>
<span class="str">(define (init start_state)</span>
<span class="str">	(set '</span>bool start_state<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>value<span class="sym">)</span>
	bool<span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>activate<span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">set</span> <span class="str">'bool (not bool)))</span>
<span class="str"></span>
<span class="str">(context '</span>MAIN<span class="sym">)</span>

# subclass Toggle to NthToggle <span class="kwa">and</span> overwrite methods

<span class="sym">(</span>new Toggle <span class="str">'NthToggle)</span>
<span class="str"></span>
<span class="str">(context NthToggle)</span>
<span class="str"></span>
<span class="str">(define (init start_state max_counter)</span>
<span class="str">	(set '</span>bool start_state<span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">set</span> <span class="str">'count_max max_counter)</span>
<span class="str">	(set '</span>counter <span class="num">0</span><span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>activate<span class="sym">)</span>
	<span class="sym">(</span>inc <span class="str">'counter)</span>
<span class="str">	(if (&gt;= counter count_max)</span>
<span class="str">		(begin</span>
<span class="str">			(set '</span>bool <span class="sym">(</span><span class="kwa">not</span> bool<span class="sym">))</span>
			<span class="sym">(</span><span class="kwa">set</span> <span class="str">'counter 0))</span>
<span class="str">                counter ))</span>
<span class="str"></span>
<span class="str">(context '</span>MAIN<span class="sym">)</span>

# get n from <span class="kwa">command line</span>

<span class="sym">(</span><span class="kwa">set</span> <span class="str">'n (integer (nth 2 (main-args))))</span>
<span class="str"></span>
<span class="str">(define (main)</span>
<span class="str">	(new Toggle '</span>toggle<span class="sym">)</span>
	<span class="sym">(</span>toggle<span class="sym">:</span>init true<span class="sym">)</span>

	<span class="sym">(</span>dotimes <span class="sym">(</span>x n<span class="sym">)</span>
		<span class="sym">(</span>toggle<span class="sym">:</span>activate<span class="sym">)</span>
		<span class="sym">(</span><span class="kwa">set</span> <span class="str">'val toggle:value))</span>
<span class="str"></span>
<span class="str">	(if (toggle:value) (println &quot;true&quot;) (println &quot;false&quot;))</span>
<span class="str"></span>
<span class="str">	(new NthToggle '</span>ntoggle<span class="sym">)</span>
	<span class="sym">(</span>ntoggle<span class="sym">:</span>init true <span class="num">3</span><span class="sym">)</span>

	<span class="sym">(</span>dotimes <span class="sym">(</span>x n<span class="sym">)</span>
		<span class="sym">(</span>ntoggle<span class="sym">:</span>activate<span class="sym">)</span>
		<span class="sym">(</span><span class="kwa">set</span> <span class="str">'val ntoggle:value))</span>
<span class="str"></span>
<span class="str">	(if (ntoggle:value) (println &quot;true&quot;) (println &quot;false&quot;))</span>
<span class="str">	)</span>
<span class="str"></span>
<span class="str">(main)</span>
<span class="str">(exit)</span>
<span class="str"></span>
<span class="str"></span>
