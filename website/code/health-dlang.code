<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   C# reference implementation contributed by Isaac Gouy</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release health2.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>c<span class="sym">.</span>stdlib<span class="sym">;</span>

<span class="kwa">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">100</span><span class="sym">;</span>

    <span class="kwb">H</span>ealthcare<span class="kwb">R</span>egion healthcareSystem <span class="sym">=</span> <span class="kwb">H</span>ealthcare<span class="kwb">R</span>egion<span class="sym">.</span><span class="kwb">C</span>reate<span class="sym">();</span>

    <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span>
        healthcareSystem<span class="sym">.</span><span class="kwb">T</span>ransfer<span class="kwb">P</span>atients<span class="sym">();</span>

    <span class="kwb">T</span>otals t <span class="sym">=</span> healthcareSystem<span class="sym">.</span><span class="kwb">A</span>ccumulate<span class="kwb">T</span>otals<span class="sym">();</span>

    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;Patients: &quot;</span><span class="sym">,</span> t<span class="sym">.</span>patients <span class="sym">);</span>
    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;Time:     &quot;</span><span class="sym">,</span> t<span class="sym">.</span>hospitalTime <span class="sym">);</span>
    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;Visits:   &quot;</span><span class="sym">,</span> t<span class="sym">.</span>hospitalVisits <span class="sym">);</span>

    <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">Treatment Queue - Remaining Treatment Time&quot;</span><span class="sym">);</span>
    <span class="kwa">foreach</span><span class="sym">(</span><span class="kwb">P</span>atient p<span class="sym">;</span> healthcareSystem<span class="sym">.</span><span class="kwb">T</span>reatment<span class="kwb">Q</span>ueue<span class="sym">())</span>
        <span class="kwd">writefln</span><span class="sym">(</span>p<span class="sym">.</span>remainingTime<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">anonymous patient&quot;</span><span class="sym">);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">class</span> <span class="kwb">S</span>imple<span class="kwb">L</span>ist<span class="sym">(</span><span class="kwb">T</span><span class="sym">)</span>
<span class="sym">{</span>
<span class="kwa">private</span><span class="sym">:</span>
    <span class="kwa">struct</span> <span class="kwb">S</span>imple<span class="kwb">N</span>ode
    <span class="sym">{</span>
        <span class="kwb">T</span> item<span class="sym">;</span>
        <span class="kwb">S</span>imple<span class="kwb">N</span>ode<span class="sym">*</span> next<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwb">S</span>imple<span class="kwb">N</span>ode<span class="sym">*</span> first<span class="sym">,</span> last<span class="sym">;</span>

<span class="kwa">public</span><span class="sym">:</span>
    <span class="kwa">void</span> <span class="kwb">A</span>dd<span class="sym">(</span><span class="kwb">T</span> o<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwb">S</span>imple<span class="kwb">N</span>ode<span class="sym">*</span> a <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">S</span>imple<span class="kwb">N</span>ode<span class="sym">;</span>
        a<span class="sym">.</span>item <span class="sym">=</span> o<span class="sym">;</span>
        <span class="kwa">if</span><span class="sym">(</span>first <span class="kwa">is null</span><span class="sym">)</span> first <span class="sym">=</span> a<span class="sym">;</span>
        <span class="kwa">else</span> last<span class="sym">.</span>next <span class="sym">=</span> a<span class="sym">;</span>
        last <span class="sym">=</span> a<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">void</span> <span class="kwb">R</span>emove<span class="sym">(</span><span class="kwb">T</span> o<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">if</span><span class="sym">(</span>first<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwb">S</span>imple<span class="kwb">N</span>ode<span class="sym">*</span> t <span class="sym">=</span> first<span class="sym">.</span>next<span class="sym">;</span>
            <span class="kwa">if</span><span class="sym">(</span>first<span class="sym">.</span>item <span class="kwa">is</span> o<span class="sym">)</span>
            <span class="sym">{</span>
                <span class="kwa">delete</span> first<span class="sym">;</span>
                first <span class="sym">=</span> t<span class="sym">;</span>
            <span class="sym">}</span>
            <span class="kwa">else</span>
            <span class="sym">{</span>
                <span class="kwb">S</span>imple<span class="kwb">N</span>ode<span class="sym">*</span> p <span class="sym">=</span> first<span class="sym">;</span>
                <span class="kwa">while</span><span class="sym">(</span>t <span class="sym">&amp;&amp; !(</span>t<span class="sym">.</span>item <span class="kwa">is</span> o<span class="sym">))</span>
                <span class="sym">{</span>
                    p <span class="sym">=</span> t<span class="sym">;</span> t <span class="sym">=</span> t<span class="sym">.</span>next<span class="sym">;</span>
                <span class="sym">}</span>
                <span class="kwa">if</span> <span class="sym">(</span>t <span class="sym">&amp;&amp;</span> t<span class="sym">.</span>item <span class="kwa">is</span> o<span class="sym">)</span>
                <span class="sym">{</span>
                    p<span class="sym">.</span>next <span class="sym">=</span> t<span class="sym">.</span>next<span class="sym">;</span>
                    <span class="kwa">if</span><span class="sym">(</span>last <span class="kwa">is</span> t<span class="sym">)</span> last <span class="sym">=</span> p<span class="sym">;</span>
                    <span class="kwa">delete</span> t<span class="sym">;</span>
                <span class="sym">}</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">void</span> <span class="kwb">C</span>lear<span class="sym">() {</span> <span class="kwa">delete</span> first<span class="sym">; }</span>

    <span class="kwa">int</span> <span class="kwd">opApply</span><span class="sym">(</span><span class="kwa">int delegate</span><span class="sym">(</span><span class="kwa">inout</span> <span class="kwb">T</span><span class="sym">)</span> dg<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">int</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

        <span class="kwa">for</span><span class="sym">(</span><span class="kwb">S</span>imple<span class="kwb">N</span>ode<span class="sym">*</span> n <span class="sym">=</span> first<span class="sym">;</span> n<span class="sym">;</span> n <span class="sym">=</span> n<span class="sym">.</span>next<span class="sym">)</span>
        <span class="sym">{</span>
            result <span class="sym">=</span> <span class="kwd">dg</span><span class="sym">(</span>n<span class="sym">.</span>item<span class="sym">);</span>
            <span class="kwa">if</span> <span class="sym">(</span>result<span class="sym">)</span> <span class="kwa">break</span><span class="sym">;</span>
        <span class="sym">}</span>

        <span class="kwa">return</span> result<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">struct</span> <span class="kwb">P</span>atient
<span class="sym">{</span>
    <span class="kwa">static</span> <span class="kwb">P</span>atient <span class="kwd">opCall</span><span class="sym">() {</span> <span class="kwb">P</span>atient p<span class="sym">;</span> <span class="kwa">return</span> p<span class="sym">; }</span>
    <span class="kwa">int</span> remainingTime<span class="sym">,</span> hospitalTime<span class="sym">,</span> hospitalVisits<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">alias</span> <span class="kwb">S</span>imple<span class="kwb">L</span>ist<span class="sym">!(</span><span class="kwb">P</span>atient<span class="sym">)</span> <span class="kwb">P</span>atient<span class="kwb">L</span>ist<span class="sym">;</span>

<span class="kwa">class</span> <span class="kwb">H</span>ealthcare<span class="kwb">R</span>egion
<span class="sym">{</span>
<span class="kwa">private</span><span class="sym">:</span>
    <span class="kwa">const int</span> <span class="kwb">LEVELS</span> <span class="sym">=</span> <span class="num">5</span><span class="sym">,</span> <span class="kwb">DISTRICTS</span> <span class="sym">=</span> <span class="num">4</span><span class="sym">;</span>
    <span class="kwb">H</span>ealthcare<span class="kwb">R</span>egion<span class="sym">[]</span> districts<span class="sym">;</span>
    <span class="kwb">H</span>ospital localHospital<span class="sym">;</span>

<span class="kwa">public</span><span class="sym">:</span>
    <span class="kwa">static</span> <span class="kwb">H</span>ealthcare<span class="kwb">R</span>egion <span class="kwb">C</span>reate<span class="sym">() {</span> <span class="kwa">return</span> <span class="kwb">H</span>ealthcare<span class="kwb">R</span>egion<span class="sym">.</span><span class="kwb">C</span>reate<span class="sym">(</span><span class="kwb">LEVELS</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">42</span><span class="sym">); }</span>

    <span class="kwa">static</span> <span class="kwb">H</span>ealthcare<span class="kwb">R</span>egion <span class="kwb">C</span>reate<span class="sym">(</span><span class="kwa">int</span> level<span class="sym">,</span> <span class="kwa">int</span> seed1<span class="sym">,</span> <span class="kwa">int</span> seed2<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwb">H</span>ealthcare<span class="kwb">R</span>egion r <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;</span>
        <span class="kwa">if</span><span class="sym">(</span>level <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
        <span class="sym">{</span>
            r <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">H</span>ealthcare<span class="kwb">R</span>egion<span class="sym">(</span>level<span class="sym">,</span> seed1<span class="sym">*</span>seed2<span class="sym">);</span>
            <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> r<span class="sym">.</span>districts<span class="sym">.</span>length<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> i <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;</span> i<span class="sym">--)</span>
                r<span class="sym">.</span>districts<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwb">C</span>reate<span class="sym">(</span>level<span class="sym">-</span><span class="num">1</span><span class="sym">, (</span>seed1<span class="sym">*</span><span class="num">4</span><span class="sym">)+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> seed2<span class="sym">);</span>
        <span class="sym">}</span>
        <span class="kwa">return</span> r<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">this</span><span class="sym">(</span><span class="kwa">int</span> level<span class="sym">,</span> <span class="kwa">int</span> s<span class="sym">)</span>
    <span class="sym">{</span>
        districts <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">H</span>ealthcare<span class="kwb">R</span>egion<span class="sym">[</span><span class="kwb">DISTRICTS</span><span class="sym">];</span>
        localHospital <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">H</span>ospital<span class="sym">(</span>level <span class="sym">==</span> <span class="kwb">LEVELS</span><span class="sym">,</span> level<span class="sym">,</span> s<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwb">P</span>atient<span class="kwb">L</span>ist <span class="kwb">T</span>ransfer<span class="kwb">P</span>atients<span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> districts<span class="sym">.</span>length<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> i <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;</span> i<span class="sym">--)</span>
            <span class="kwa">if</span><span class="sym">(</span>districts<span class="sym">[</span>i<span class="sym">])</span>
                <span class="kwa">foreach</span><span class="sym">(</span><span class="kwb">P</span>atient p<span class="sym">;</span> districts<span class="sym">[</span>i<span class="sym">].</span><span class="kwb">T</span>ransfer<span class="kwb">P</span>atients<span class="sym">())</span>
                    localHospital<span class="sym">.</span><span class="kwb">N</span>ew<span class="kwb">A</span>rrival<span class="sym">(</span>p<span class="sym">);</span>

        localHospital<span class="sym">.</span><span class="kwb">T</span>riage<span class="kwb">E</span>xamination<span class="kwb">T</span>reatment<span class="sym">();</span>

        <span class="kwa">return</span> localHospital<span class="sym">.</span><span class="kwb">R</span>egional<span class="kwb">T</span>ransfer<span class="kwb">P</span>atients<span class="sym">();</span>
    <span class="sym">}</span>

    <span class="kwb">T</span>otals <span class="kwb">A</span>ccumulate<span class="kwb">T</span>otals<span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwb">T</span>otals t <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">T</span>otals<span class="sym">();</span>
        <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> districts<span class="sym">.</span>length<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> i <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">;</span> i<span class="sym">--)</span>
            <span class="kwa">if</span><span class="sym">(</span>districts<span class="sym">[</span>i<span class="sym">])</span>
                t <span class="sym">+=</span> districts<span class="sym">[</span>i<span class="sym">].</span><span class="kwb">A</span>ccumulate<span class="kwb">T</span>otals<span class="sym">();</span>

        localHospital<span class="sym">.</span><span class="kwb">A</span>ccumulate<span class="kwb">T</span>otals<span class="sym">(</span>t<span class="sym">);</span>

        <span class="kwa">return</span> t<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwb">P</span>atient<span class="kwb">L</span>ist <span class="kwb">T</span>reatment<span class="kwb">Q</span>ueue<span class="sym">() {</span> <span class="kwa">return</span> localHospital<span class="sym">.</span><span class="kwb">T</span>reatment<span class="kwb">Q</span>ueue<span class="sym">(); }</span>
<span class="sym">}</span>

<span class="kwa">class</span> <span class="kwb">H</span>ospital
<span class="sym">{</span>
<span class="kwa">public</span><span class="sym">:</span>
    <span class="kwa">this</span><span class="sym">(</span>bool hasNoRegionalHospital<span class="sym">,</span> <span class="kwa">int</span> level<span class="sym">,</span> <span class="kwa">int</span> seed<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">this</span><span class="sym">.</span>hasNoRegionalHospital <span class="sym">=</span> hasNoRegionalHospital<span class="sym">;</span>
        availableStaff <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>level <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
        triage <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">P</span>atient<span class="kwb">L</span>ist<span class="sym">;</span>
        examination <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">P</span>atient<span class="kwb">L</span>ist<span class="sym">;</span>
        treatment <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">P</span>atient<span class="kwb">L</span>ist<span class="sym">;</span>
        transfers <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">P</span>atient<span class="kwb">L</span>ist<span class="sym">;</span>
        discharged <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">T</span>otals<span class="sym">();</span>
        <span class="kwa">this</span><span class="sym">.</span>seed <span class="sym">=</span> seed<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">void</span> <span class="kwb">T</span>riage<span class="kwb">E</span>xamination<span class="kwb">T</span>reatment<span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwb">D</span>ischarge<span class="kwb">P</span>atients<span class="sym">();</span>
        <span class="kwb">T</span>reat<span class="kwb">O</span>r<span class="kwb">T</span>ransfer<span class="kwb">P</span>atients<span class="sym">();</span>
        <span class="kwb">T</span>riage<span class="kwb">P</span>atients<span class="sym">();</span>

        <span class="kwa">if</span><span class="sym">(</span><span class="kwd">genRandom</span><span class="sym">(</span><span class="num">1.0</span><span class="sym">) &gt;</span> <span class="num">0.7</span><span class="sym">)</span> <span class="kwb">N</span>ew<span class="kwb">A</span>rrival<span class="sym">(</span><span class="kwb">P</span>atient<span class="sym">());</span>
    <span class="sym">}</span>

    <span class="kwb">P</span>atient<span class="kwb">L</span>ist <span class="kwb">R</span>egional<span class="kwb">T</span>ransfer<span class="kwb">P</span>atients<span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">return</span> transfers<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">void</span> <span class="kwb">A</span>ccumulate<span class="kwb">T</span>otals<span class="sym">(</span><span class="kwb">T</span>otals t<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">foreach</span><span class="sym">(</span><span class="kwb">P</span>atient p<span class="sym">;</span> triage<span class="sym">)</span> t <span class="sym">+=</span> p<span class="sym">;</span>
        <span class="kwa">foreach</span><span class="sym">(</span><span class="kwb">P</span>atient p<span class="sym">;</span> examination<span class="sym">)</span> t <span class="sym">+=</span> p<span class="sym">;</span>
        <span class="kwa">foreach</span><span class="sym">(</span><span class="kwb">P</span>atient p<span class="sym">;</span> treatment<span class="sym">)</span> t <span class="sym">+=</span> p<span class="sym">;</span>
        t <span class="sym">+=</span> discharged<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">void</span> <span class="kwb">N</span>ew<span class="kwb">A</span>rrival<span class="sym">(</span><span class="kwb">P</span>atient p<span class="sym">)</span>
    <span class="sym">{</span>
        p<span class="sym">.</span>hospitalVisits<span class="sym">++;</span>
        <span class="kwa">if</span><span class="sym">(</span>availableStaff <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
        <span class="sym">{</span>
            availableStaff<span class="sym">--;</span>
            p<span class="sym">.</span>remainingTime <span class="sym">=</span> <span class="num">3</span><span class="sym">;</span>
            p<span class="sym">.</span>hospitalTime <span class="sym">+=</span> <span class="num">3</span><span class="sym">;</span>
            examination<span class="sym">.</span><span class="kwb">A</span>dd<span class="sym">(</span>p<span class="sym">);</span>
        <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            triage<span class="sym">.</span><span class="kwb">A</span>dd<span class="sym">(</span>p<span class="sym">);</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwb">P</span>atient<span class="kwb">L</span>ist <span class="kwb">T</span>reatment<span class="kwb">Q</span>ueue<span class="sym">() {</span> <span class="kwa">return</span> treatment<span class="sym">; }</span>

<span class="kwa">private</span><span class="sym">:</span>
    <span class="kwb">P</span>atient<span class="kwb">L</span>ist triage<span class="sym">,</span> examination<span class="sym">,</span> treatment<span class="sym">,</span> transfers<span class="sym">;</span>
    <span class="kwb">T</span>otals discharged<span class="sym">;</span>
    <span class="kwa">int</span> availableStaff<span class="sym">;</span>
    bool hasNoRegionalHospital<span class="sym">;</span>

    <span class="kwa">void</span> <span class="kwb">D</span>ischarge<span class="kwb">P</span>atients<span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">inout</span> <span class="kwb">P</span>atient p<span class="sym">;</span> treatment<span class="sym">)</span>
        <span class="sym">{</span>
            p<span class="sym">.</span>remainingTime <span class="sym">-=</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">if</span><span class="sym">(!</span>p<span class="sym">.</span>remainingTime<span class="sym">)</span>
            <span class="sym">{</span>
                availableStaff<span class="sym">++;</span>
                discharged <span class="sym">+=</span> p<span class="sym">;</span>
                treatment<span class="sym">.</span><span class="kwb">R</span>emove<span class="sym">(</span>p<span class="sym">);</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">void</span> <span class="kwb">T</span>reat<span class="kwb">O</span>r<span class="kwb">T</span>ransfer<span class="kwb">P</span>atients<span class="sym">()</span>
    <span class="sym">{</span>
        transfers<span class="sym">.</span><span class="kwb">C</span>lear<span class="sym">();</span>

        <span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">inout</span> <span class="kwb">P</span>atient p<span class="sym">;</span> examination<span class="sym">)</span>
        <span class="sym">{</span>
            p<span class="sym">.</span>remainingTime <span class="sym">-=</span> <span class="num">1</span><span class="sym">;</span>

            <span class="kwa">if</span><span class="sym">(!</span>p<span class="sym">.</span>remainingTime<span class="sym">)</span>
            <span class="sym">{</span>
                <span class="slc">// no transfer</span>
                <span class="kwa">if</span><span class="sym">(</span><span class="kwd">genRandom</span><span class="sym">(</span><span class="num">1.0</span><span class="sym">) &gt;</span> <span class="num">0.1</span> <span class="sym">||</span> hasNoRegionalHospital<span class="sym">)</span>
                <span class="sym">{</span>
                    p<span class="sym">.</span>remainingTime <span class="sym">=</span> <span class="num">10</span><span class="sym">;</span>
                    p<span class="sym">.</span>hospitalTime <span class="sym">+=</span> <span class="num">10</span><span class="sym">;</span>
                    treatment<span class="sym">.</span><span class="kwb">A</span>dd<span class="sym">(</span>p<span class="sym">);</span>
                <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
                <span class="slc">// transfer</span>
                    availableStaff<span class="sym">++;</span>
                    transfers<span class="sym">.</span><span class="kwb">A</span>dd<span class="sym">(</span>p<span class="sym">);</span>
                <span class="sym">}</span>
                examination<span class="sym">.</span><span class="kwb">R</span>emove<span class="sym">(</span>p<span class="sym">);</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">void</span> <span class="kwb">T</span>riage<span class="kwb">P</span>atients<span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">inout</span> <span class="kwb">P</span>atient p<span class="sym">;</span> triage<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span>availableStaff <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
            <span class="sym">{</span>
                availableStaff<span class="sym">--;</span>
                p<span class="sym">.</span>remainingTime <span class="sym">=</span> <span class="num">3</span><span class="sym">;</span>
                p<span class="sym">.</span>hospitalTime <span class="sym">+=</span> <span class="num">3</span><span class="sym">;</span>
                examination<span class="sym">.</span><span class="kwb">A</span>dd<span class="sym">(</span>p<span class="sym">);</span>
                triage<span class="sym">.</span><span class="kwb">R</span>emove<span class="sym">(</span>p<span class="sym">);</span>
            <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
                p<span class="sym">.</span>hospitalTime<span class="sym">++;</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">int</span> seed<span class="sym">;</span>
    <span class="kwa">const int</span> <span class="kwb">IM</span> <span class="sym">=</span> <span class="num">139968</span><span class="sym">,</span> <span class="kwb">IA</span> <span class="sym">=</span> <span class="num">3877</span><span class="sym">,</span> <span class="kwb">IC</span> <span class="sym">=</span> <span class="num">29573</span><span class="sym">;</span>
    <span class="kwa">double</span> <span class="kwd">genRandom</span><span class="sym">(</span><span class="kwa">double</span> max<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span>max <span class="sym">* (</span>seed <span class="sym">= (</span>seed <span class="sym">*</span> <span class="kwb">IA</span> <span class="sym">+</span> <span class="kwb">IC</span><span class="sym">) %</span> <span class="kwb">IM</span><span class="sym">) /</span> <span class="kwb">IM</span><span class="sym">); }</span>
<span class="sym">}</span>

<span class="kwa">class</span> <span class="kwb">T</span>otals
<span class="sym">{</span>
    <span class="kwa">private long</span> patients<span class="sym">,</span> hospitalTime<span class="sym">,</span> hospitalVisits<span class="sym">;</span>

    <span class="kwa">public</span> <span class="kwb">T</span>otals <span class="kwd">opAddAssign</span><span class="sym">(</span><span class="kwb">T</span>otals b<span class="sym">)</span>
    <span class="sym">{</span>
        patients <span class="sym">+=</span> b<span class="sym">.</span>patients<span class="sym">;</span>
        hospitalTime <span class="sym">+=</span> b<span class="sym">.</span>hospitalTime<span class="sym">;</span>
        hospitalVisits <span class="sym">+=</span> b<span class="sym">.</span>hospitalVisits<span class="sym">;</span>
        <span class="kwa">return this</span><span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">public</span> <span class="kwb">T</span>otals <span class="kwd">opAddAssign</span><span class="sym">(</span><span class="kwb">P</span>atient p<span class="sym">)</span>
    <span class="sym">{</span>
        patients<span class="sym">++;</span>
        hospitalTime <span class="sym">+=</span> p<span class="sym">.</span>hospitalTime<span class="sym">;</span>
        hospitalVisits <span class="sym">+=</span> p<span class="sym">.</span>hospitalVisits<span class="sym">;</span>
        <span class="kwa">return this</span><span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>
