<span class="slc">! -*- mode: f90 -*-
</span><span class="slc">!
</span><span class="slc">! $Id: mandelbrot-g95.code,v 1.4 2005-09-25 08:05:41 bfulgham Exp $ ; $Name:  $
</span><span class="slc">!
</span><span class="slc">! The Great Computer Language Shootout
</span><span class="slc">! http://shootout.alioth.debian.org/
</span><span class="slc">!
</span><span class="slc">! Simon Geard, 6/1/05
</span><span class="slc">!
</span><span class="slc">! Adapted  mandelbrot.c by Greg Buchholz
</span><span class="slc">!
</span><span class="slc">! Building info.
</span><span class="slc">! ==============
</span><span class="slc">!
</span><span class="slc">! Linux  - using the Intel Fortran90 compiler:
</span><span class="slc">!
</span><span class="slc">!          ifort mandelbrot.f90 -O3 -static-libcxa -o mandelbrot
</span><span class="slc">!
</span>program mandelbrot
  implicit none
  integer w<span class="sym">,</span> h<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> bit_num
  integer<span class="sym">(</span>kind<span class="sym">=</span><span class="num">1</span><span class="sym">)</span> byte_acc
  integer<span class="sym">(</span>kind<span class="sym">=</span><span class="num">1</span><span class="sym">),</span> parameter <span class="sym">::</span> K0 <span class="sym">=</span> <span class="num">0
</span>  integer<span class="sym">(</span>kind<span class="sym">=</span><span class="num">1</span><span class="sym">),</span> parameter <span class="sym">::</span> K1 <span class="sym">=</span> <span class="num">1
</span>  integer<span class="sym">,</span> parameter <span class="sym">::</span> iter <span class="sym">=</span> <span class="num">50
</span>  real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> parameter  <span class="sym">::</span> limit2 <span class="sym">=</span> <span class="num">4.0d0
</span>  integer  i
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">8</span><span class="sym">)</span> argv
  complex<span class="sym">(</span>kind<span class="sym">=</span><span class="num">8</span><span class="sym">)</span> Z<span class="sym">,</span> C
  logical debug<span class="sym">,</span> in_mandelbrot

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)
</span>  read<span class="sym">(</span>argv<span class="sym">,*)</span> w
  h <span class="sym">=</span> w
  bit_num <span class="sym">=</span> <span class="num">0
</span>  byte_acc <span class="sym">=</span> K0
  <span class="slc">! Output pbm header
</span>  write<span class="sym">(*,</span><span class="str">'(a)'</span><span class="sym">)</span> <span class="str">'P4'</span>
  write<span class="sym">(*,</span><span class="str">'(i0,a,i0)'</span><span class="sym">)</span> w<span class="sym">,</span><span class="str">' '</span><span class="sym">,</span>h
  do y<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>h<span class="num">-1
</span>     do x<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>w<span class="num">-1
</span>        C <span class="sym">=</span> cmplx<span class="sym">(</span><span class="num">2.0d0</span><span class="sym">*</span>x<span class="sym">/</span>w<span class="num">-1.5d0</span><span class="sym">,</span><span class="num">2.0d0</span><span class="sym">*</span>y<span class="sym">/</span>h<span class="num">-1.0d0</span><span class="sym">)
</span>        Z <span class="sym">= (</span><span class="num">0.0d0</span><span class="sym">,</span><span class="num">0.0d0</span><span class="sym">)
</span>        in_mandelbrot <span class="sym">=</span> .true.
        do i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>iter<span class="num">-1
</span>           Z <span class="sym">=</span> Z<span class="sym">**</span><span class="num">2</span> <span class="sym">+</span> C
           if <span class="sym">(</span>real<span class="sym">(</span>Z<span class="sym">*</span>conjg<span class="sym">(</span>Z<span class="sym">)) &gt;</span> limit2<span class="sym">)</span> then
              in_mandelbrot <span class="sym">=</span> .false.
              exit
           end if
        end do
        if <span class="sym">(</span>in_mandelbrot<span class="sym">)</span> then
           <span class="slc">! Inside the set so set this bit to 1
</span>           byte_acc <span class="sym">=</span> ior<span class="sym">(</span>ishft<span class="sym">(</span>byte_acc<span class="sym">,</span><span class="num">1</span><span class="sym">),</span>K1<span class="sym">)
</span>        else
           <span class="slc">! Outside the set so set this bit to 0
</span>           byte_acc <span class="sym">=</span> ishft<span class="sym">(</span>byte_acc<span class="sym">,</span><span class="num">1</span><span class="sym">)
</span>        end if

        bit_num <span class="sym">=</span> bit_num <span class="sym">+</span> <span class="num">1
</span>        if <span class="sym">(</span>bit_num <span class="sym">==</span> <span class="num">8</span><span class="sym">)</span> then
           <span class="slc">! All bits set so output them
</span>           write<span class="sym">(*,</span><span class="str">'(a1)'</span><span class="sym">,</span>advance<span class="sym">=</span><span class="str">'no'</span><span class="sym">)</span> char<span class="sym">(</span>byte_acc<span class="sym">)
</span>           byte_acc <span class="sym">=</span> K0
           bit_num <span class="sym">=</span> <span class="num">0

</span>        elseif <span class="sym">(</span>x <span class="sym">==</span> w<span class="num">-1</span><span class="sym">)</span> then
           <span class="slc">! End of a row so left-justify the bits we have and output them
</span>           byte_acc <span class="sym">=</span> ishft<span class="sym">(</span>byte_acc<span class="sym">,</span><span class="num">8</span><span class="sym">-</span>mod<span class="sym">(</span>w<span class="sym">,</span><span class="num">8</span><span class="sym">))
</span>           write<span class="sym">(*,</span><span class="str">'(a1)'</span><span class="sym">,</span>advance<span class="sym">=</span><span class="str">'no'</span><span class="sym">)</span> char<span class="sym">(</span>byte_acc<span class="sym">)
</span>           byte_acc <span class="sym">=</span> K0
           bit_num <span class="sym">=</span> <span class="num">0

</span>        end if

     end do
  end do
end program mandelbrot
