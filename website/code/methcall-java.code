<span class="slc">// $Id: methcall-java.code,v 1.13 2006-09-30 16:39:27 bfulgham Exp $</span>
<span class="slc">// http://www.bagley.org/~doug/shootout/</span>
<span class="slc">// Collection class code is from my friend Phil Chu, Thanks Phil!</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>text<span class="sym">.*;</span>

<span class="kwa">class</span> Toggle <span class="sym">{</span>
    <span class="kwb">boolean</span> state <span class="sym">=</span> true<span class="sym">;</span>
    <span class="kwa">public</span> <span class="kwd">Toggle</span><span class="sym">(</span><span class="kwb">boolean</span> start_state<span class="sym">) {</span>
	<span class="kwa">this</span><span class="sym">.</span>state <span class="sym">=</span> start_state<span class="sym">;</span>
    <span class="sym">}</span>
    <span class="kwa">public</span> <span class="kwb">boolean</span> <span class="kwd">value</span><span class="sym">() {</span>
	<span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">.</span>state<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">public</span> Toggle <span class="kwd">activate</span><span class="sym">() {</span>
	<span class="kwa">this</span><span class="sym">.</span>state <span class="sym">= !</span><span class="kwa">this</span><span class="sym">.</span>state<span class="sym">;</span>
	<span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> NthToggle <span class="kwa">extends</span> Toggle <span class="sym">{</span>
    <span class="kwb">int</span> count_max <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">int</span> counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    <span class="kwa">public</span> <span class="kwd">NthToggle</span><span class="sym">(</span><span class="kwb">boolean</span> start_state<span class="sym">,</span> <span class="kwb">int</span> max_counter<span class="sym">) {</span>
	<span class="kwa">super</span><span class="sym">(</span>start_state<span class="sym">);</span>
	<span class="kwa">this</span><span class="sym">.</span>count_max <span class="sym">=</span> max_counter<span class="sym">;</span>
	<span class="kwa">this</span><span class="sym">.</span>counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="sym">}</span>
    <span class="kwa">public</span> Toggle <span class="kwd">activate</span><span class="sym">() {</span>
	<span class="kwa">this</span><span class="sym">.</span>counter <span class="sym">+=</span> <span class="num">1</span><span class="sym">;</span>
	<span class="kwa">if</span> <span class="sym">(</span><span class="kwa">this</span><span class="sym">.</span>counter <span class="sym">&gt;=</span> <span class="kwa">this</span><span class="sym">.</span>count_max<span class="sym">) {</span>
	    <span class="kwa">this</span><span class="sym">.</span>state <span class="sym">= !</span><span class="kwa">this</span><span class="sym">.</span>state<span class="sym">;</span>
	    <span class="kwa">this</span><span class="sym">.</span>counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="sym">}</span>
	<span class="kwa">return</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">public class</span> methcall <span class="sym">{</span>
    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[])</span> <span class="kwa">throws</span> <span class="kwc">IOException</span> <span class="sym">{</span>
	<span class="kwb">int</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

	<span class="kwb">boolean</span> val <span class="sym">=</span> true<span class="sym">;</span>
	Toggle toggle <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Toggle</span><span class="sym">(</span>val<span class="sym">);</span>
	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
	    val <span class="sym">=</span> toggle<span class="sym">.</span><span class="kwd">activate</span><span class="sym">().</span><span class="kwd">value</span><span class="sym">();</span>
	<span class="sym">}</span>
	<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">((</span>val<span class="sym">)</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">);</span>

	val <span class="sym">=</span> true<span class="sym">;</span>
	NthToggle ntoggle <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">NthToggle</span><span class="sym">(</span>true<span class="sym">,</span> <span class="num">3</span><span class="sym">);</span>
	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
	    val <span class="sym">=</span> ntoggle<span class="sym">.</span><span class="kwd">activate</span><span class="sym">().</span><span class="kwd">value</span><span class="sym">();</span>
	<span class="sym">}</span>
	<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">((</span>val<span class="sym">)</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span><span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>
