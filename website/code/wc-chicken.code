<span class="slc">;;;; -Ob
</span>
<span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">))

</span><span class="slc">;
</span><span class="slc">;  Faster, more idiomatic Scheme by Neil Van Dyke
</span><span class="slc">;
</span>
<span class="sym">(</span>define <span class="sym">(</span>main iport<span class="sym">)
  (</span><span class="kwa">apply</span> printf <span class="str">&quot;~s ~s ~s</span><span class="esc">\n</span><span class="str">&quot;</span>
         <span class="sym">(</span>let wc <span class="sym">((</span>i #f<span class="sym">) (</span>lines <span class="num">0</span><span class="sym">) (</span>words <span class="num">0</span><span class="sym">) (</span>chars <span class="num">0</span><span class="sym">))
	   (</span>let <span class="sym">((</span>x <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>char iport<span class="sym">)))
	     (</span><span class="kwa">if</span> <span class="sym">(</span>eof<span class="sym">-</span>object? x<span class="sym">)
	         (</span><span class="kwa">list</span> lines words chars<span class="sym">)
		 (</span>case x
		   <span class="sym">((</span>#\newline<span class="sym">)     (</span>wc #f <span class="sym">(</span>add1 lines<span class="sym">)</span> words <span class="sym">(</span>add1 chars<span class="sym">)))
		   ((</span>#\space #\tab<span class="sym">) (</span>wc #f       lines  words <span class="sym">(</span>add1 chars<span class="sym">)))
		   (</span>else
		     <span class="sym">(</span>wc #t lines <span class="sym">(</span><span class="kwa">if</span> i words <span class="sym">(</span>add1 words<span class="sym">)) (</span>add1 chars<span class="sym">)))))))))

(</span>main <span class="sym">(</span>current<span class="sym">-</span>input<span class="sym">-</span>port<span class="sym">))</span>  
