<span class="com">(* matrix.sml</span>
<span class="com"> *</span>
<span class="com"> *   Matrix multiplication with integers.</span>
<span class="com"> *</span>
<span class="com"> * Copyright (c) 2004 by The Fellowship of SML/NJ</span>
<span class="com"> *</span>
<span class="com"> * Author: Matthias Blume (blume&#64;tti-c.org)</span>
<span class="com"> *)</span>
<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig</span>
    <span class="kwa">val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct</span>

    <span class="kwa">fun</span> x <span class="sym">+</span> y <span class="sym">=</span> <span class="kwa">Word</span>.toIntX <span class="sym">(</span><span class="kwa">Word</span>.<span class="sym">+ (</span><span class="kwa">Word</span>.fromInt x<span class="sym">,</span> <span class="kwa">Word</span>.fromInt y<span class="sym">))</span>
    <span class="kwa">fun</span> x <span class="sym">-</span> y <span class="sym">=</span> <span class="kwa">Word</span>.toIntX <span class="sym">(</span><span class="kwa">Word</span>.<span class="sym">- (</span><span class="kwa">Word</span>.fromInt x<span class="sym">,</span> <span class="kwa">Word</span>.fromInt y<span class="sym">))</span>
    <span class="kwa">fun</span> x <span class="sym">*</span> y <span class="sym">=</span> <span class="kwa">Word</span>.toIntX <span class="sym">(</span><span class="kwa">Word</span>.<span class="sym">* (</span><span class="kwa">Word</span>.fromInt x<span class="sym">,</span> <span class="kwa">Word</span>.fromInt y<span class="sym">))</span>

    <span class="kwa">fun</span> mkmatrix <span class="sym">(</span>rows<span class="sym">,</span> cols<span class="sym">) =</span> Array.tabulate <span class="sym">(</span>rows <span class="sym">*</span> cols<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>

    <span class="kwa">val</span> sub <span class="sym">=</span> Unsafe.Array.sub
    <span class="kwa">val</span> upd <span class="sym">=</span> Unsafe.Array.update

    <span class="kwa">fun</span> mmult <span class="sym">(</span>r<span class="sym">,</span> cr<span class="sym">,</span> c<span class="sym">,</span> a1<span class="sym">,</span> a2<span class="sym">,</span> a<span class="sym">) =</span>
	<span class="kwa">let fun</span> elem <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) =</span> <span class="kwa">let</span>
		<span class="kwa">val</span> k1start <span class="sym">=</span> i <span class="sym">*</span> cr
		<span class="kwa">val</span> k1end <span class="sym">=</span> k1start <span class="sym">+</span> cr
		<span class="kwa">fun</span> loop <span class="sym">(</span>k1<span class="sym">,</span> k2<span class="sym">,</span> x<span class="sym">) =</span>
		    <span class="kwa">if</span> k1 <span class="sym">&gt;=</span> k1end <span class="kwa">then</span> x
		    <span class="kwa">else</span> loop <span class="sym">(</span>k1 <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> k2 <span class="sym">+</span> c<span class="sym">,</span> x <span class="sym">+</span> sub <span class="sym">(</span>a1<span class="sym">,</span> k1<span class="sym">) *</span> sub <span class="sym">(</span>a2<span class="sym">,</span> k2<span class="sym">))</span>
	    <span class="kwa">in</span> loop <span class="sym">(</span>k1start<span class="sym">,</span> j<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>
	    <span class="kwa">end</span>
	    <span class="kwa">fun</span> oloop <span class="sym">(</span>i0<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">) =</span>
		<span class="kwa">if</span> j <span class="sym">&gt;=</span> c <span class="kwa">then</span> oloop <span class="sym">(</span>i0<span class="sym">,</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>
		<span class="kwa">else if</span> i <span class="sym">&gt;=</span> r <span class="kwa">then</span> <span class="sym">()</span>
		<span class="kwa">else</span> <span class="sym">(</span>upd <span class="sym">(</span>a<span class="sym">,</span> i0<span class="sym">,</span> elem <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">));</span> oloop <span class="sym">(</span>i0 <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> i<span class="sym">,</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">))</span>
	<span class="kwa">in</span> oloop <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>
	<span class="kwa">end</span>

    <span class="kwa">val</span> sz <span class="sym">=</span> <span class="num">30</span>

    <span class="kwa">fun</span> main' n <span class="sym">=</span>
	<span class="kwa">let val</span> <span class="sym">(</span>a1<span class="sym">,</span> a2<span class="sym">) = (</span>mkmatrix <span class="sym">(</span>sz<span class="sym">,</span> sz<span class="sym">),</span> mkmatrix <span class="sym">(</span>sz<span class="sym">,</span> sz<span class="sym">))</span>
	    <span class="kwa">val</span> a <span class="sym">=</span> Array.array <span class="sym">(</span>sz <span class="sym">*</span> sz<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span>
	    <span class="kwa">fun</span> loop n <span class="sym">= (</span>mmult <span class="sym">(</span>sz<span class="sym">,</span> sz<span class="sym">,</span> sz<span class="sym">,</span> a1<span class="sym">,</span> a2<span class="sym">,</span> a<span class="sym">);</span>
			  <span class="kwa">if</span> n <span class="sym">&lt;=</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">()</span> <span class="kwa">else</span> loop <span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span>
	    <span class="kwa">fun</span> show <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) =</span> <span class="kwa">Int</span>.toString <span class="sym">(</span>sub <span class="sym">(</span>a<span class="sym">,</span> i <span class="sym">*</span> sz <span class="sym">+</span> j<span class="sym">))</span>
	<span class="kwa">in</span> loop <span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
	   app print <span class="sym">[</span>show <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">),</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> show <span class="sym">(</span><span class="num">2</span><span class="sym">,</span> <span class="num">3</span><span class="sym">),</span> <span class="str">&quot; &quot;</span><span class="sym">,</span>
		      show <span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="num">2</span><span class="sym">),</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> show <span class="sym">(</span><span class="num">4</span><span class="sym">,</span> <span class="num">4</span><span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">];</span>
	   OS.Process.success
	<span class="kwa">end</span>

    <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1</span>
      <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>
<span class="kwa">end</span>
