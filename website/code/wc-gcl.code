<span class="slc">;;; -*- mode: lisp -*-
</span><span class="slc">;;; $Id: wc-gcl.code,v 1.6 2005-03-31 10:41:37 bfulgham Exp $
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; from Bulent Murtezaoglu (with some code from Andrew McDowell)
</span><span class="slc">;;; Multi-lisp modifications by Brent Fulgham
</span>
<span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">)</span> #<span class="sym">-</span>gcl <span class="sym">(</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)))

(</span><span class="kwa">defun</span> main <span class="sym">()
  (</span>let<span class="sym">* ((</span>start <span class="num">0</span><span class="sym">)
	 (</span>current #\X<span class="sym">)</span>			<span class="slc">;junk char save me the locally
</span>	 <span class="sym">(</span>end <span class="num">0</span><span class="sym">)
	 (</span>nc <span class="num">0</span><span class="sym">)
	 (</span>buffer <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">4096</span><span class="sym">)))
    (</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>simple<span class="sym">-</span>base<span class="sym">-</span>string <span class="num">4096</span><span class="sym">)</span> buffer<span class="sym">) (</span>fixnum start end nc<span class="sym">)
	     (</span>base<span class="sym">-</span>char current<span class="sym">))
    (</span>labels
	<span class="sym">((</span>get<span class="sym">-</span>char <span class="sym">()
		   (</span>when <span class="sym">(=</span> start end<span class="sym">)
		     (</span>setf start <span class="num">0</span><span class="sym">)
		     (</span>setf end <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>sequence buffer <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*))
		     (</span>incf nc end<span class="sym">)
		     (</span>when <span class="sym">(</span><span class="kwa">zerop</span> end<span class="sym">)
		       (</span>return<span class="sym">-</span>from get<span class="sym">-</span>char nil<span class="sym">)))
		   (</span>setf current <span class="sym">(</span>schar buffer start<span class="sym">))
		   (</span>incf start<span class="sym">)))
      (</span>let <span class="sym">((</span>nl <span class="num">0</span><span class="sym">)
	    (</span>nw <span class="num">0</span><span class="sym">)
	    (</span>inword nil<span class="sym">))
	(</span>declare <span class="sym">(</span>fixnum nl nw<span class="sym">))
	(</span>loop <span class="kwa">while</span> <span class="sym">(</span>get<span class="sym">-</span>char<span class="sym">)</span> do
	  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span>char<span class="sym">=</span> current #\newline<span class="sym">)
		 (</span>incf nl<span class="sym">)
		 (</span><span class="kwa">setq</span> inword nil<span class="sym">))
		((</span><span class="kwa">or</span> <span class="sym">(</span>char<span class="sym">=</span> current #\space<span class="sym">) (</span>char<span class="sym">=</span> current #\tab<span class="sym">))
		 (</span><span class="kwa">setq</span> inword nil<span class="sym">))
		((</span><span class="kwa">not</span> inword<span class="sym">)</span> <span class="slc">;; only tested if we have a word constituent
</span>		 <span class="sym">(</span>incf nw<span class="sym">) (</span><span class="kwa">setq</span> inword t<span class="sym">))))
	(</span>format t <span class="str">&quot;~A ~A ~A~%&quot;</span> nl nw nc<span class="sym">)))))</span>
