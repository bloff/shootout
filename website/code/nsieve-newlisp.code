#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp

# nsieve <span class="sym">-</span> benchmark
#
# by Lutz Mueller <span class="num">2004</span><span class="sym">-</span><span class="num">12</span><span class="sym">-</span><span class="num">11</span>
#
# A solution with a newLISP array for flags is about the same
# speed but uses much more memory. Here a character vector is
# manipulated directly.

<span class="sym">(</span>define <span class="sym">(</span>nsieve m f<span class="sym">,</span> cnt<span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">set</span> <span class="str">'cnt 0)</span>
<span class="str"></span>
<span class="str">        (for (i 2 m)</span>
<span class="str">            (if (= (char f:isPrime i) 1)</span>
<span class="str">                (begin</span>
<span class="str">                    (set '</span>k <span class="sym">(+</span> i i<span class="sym">))</span>
                    <span class="sym">(</span><span class="kwa">while</span> <span class="sym">(&lt;=</span> k m<span class="sym">)</span>
                        <span class="sym">(</span>cpymem <span class="str">&quot;</span><span class="esc">\0</span><span class="str">00&quot;</span> <span class="sym">(+</span> k <span class="sym">(</span>address f<span class="sym">:</span>isPrime<span class="sym">))</span> <span class="num">1</span><span class="sym">)</span>
                        <span class="sym">(</span>inc <span class="str">'k i))</span>
<span class="str">	        (inc '</span>cnt<span class="sym">))))</span>
         cnt<span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>main<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">set</span> <span class="str">'n (integer (nth 2 (main-args))))</span>
<span class="str"></span>
<span class="str">    (set '</span>m <span class="sym">(* (</span>pow <span class="num">2</span> n<span class="sym">)</span> <span class="num">10000</span><span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">set</span> <span class="str">'flags:isPrime (dup &quot;</span><span class="esc">\0</span><span class="str">0</span><span class="esc">1&quot;</span> <span class="str">(+ m 1) ))</span>
<span class="str"></span>
<span class="str">    (println (format &quot;Primes up to %8d %8d&quot; m (nsieve m flags)))</span>
<span class="str"></span>
<span class="str">    (set '</span>m <span class="sym">(* (</span>pow <span class="num">2</span> <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))</span> <span class="num">10000</span><span class="sym">))</span>
    <span class="sym">(</span>println <span class="sym">(</span>format <span class="str">&quot;Primes up to %8d %8d&quot;</span> m <span class="sym">(</span>nsieve m flags<span class="sym">)))</span>

    <span class="sym">(</span><span class="kwa">set</span> <span class="str">'m (* (pow 2 (- n 2)) 10000))</span>
<span class="str">    (println (format &quot;Primes up to %8d %8d&quot; m (nsieve m flags)))</span>
<span class="str">    )</span>
<span class="str"></span>
<span class="str">(main)</span>
<span class="str"></span>
<span class="str">(exit)</span>
