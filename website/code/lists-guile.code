#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="sym">-</span>e main <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="slc">;;; $Id: lists-guile.code,v 1.6 2005-11-06 23:11:14 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>
<span class="slc">;;; from Brad Knotwell</span>

<span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="sym">-</span><span class="num">9</span> format<span class="sym">))</span>

<span class="sym">(</span>define SIZE <span class="num">10000</span><span class="sym">)</span>
<span class="sym">(</span>define Li1 <span class="sym">(</span><span class="kwa">cdr</span> <span class="sym">(</span>iota <span class="sym">(+</span> SIZE <span class="num">1</span><span class="sym">))))</span>
<span class="sym">(</span>define Li2 <span class="sym">(</span><span class="kwa">list</span><span class="sym">-</span>copy Li1<span class="sym">))</span>
<span class="sym">(</span>define Li3 <span class="str">'())</span>
<span class="str"></span>
<span class="str">;;;  note the reverses</span>
<span class="str">;;;  AFAIK, guile doesn'</span>t have a primitive for grabbing elts from the
<span class="slc">;;;  end of a list.  no scheme programmer would do this anyway.  they'd</span>
<span class="slc">;;;  reverse the list in place</span>
<span class="sym">(</span>define <span class="sym">(</span>test<span class="sym">-</span>lists<span class="sym">)</span>
  <span class="sym">(</span>begin
    <span class="sym">(</span>do <span class="sym">((</span>elt <span class="sym">(</span><span class="kwa">car</span> Li2<span class="sym">) (</span><span class="kwa">car</span> Li2<span class="sym">)))</span>
	<span class="sym">((</span><span class="kwa">eq</span>? <span class="sym">(</span><span class="kwa">cdr</span> Li2<span class="sym">)</span> <span class="str">'()) (begin  (set! Li3 (cons elt Li3))</span>
<span class="str">				     (set! Li2 '</span><span class="sym">())</span>
				     <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> Li3 <span class="sym">(</span><span class="kwa">reverse</span><span class="sym">!</span> Li3<span class="sym">))))</span>
      <span class="sym">(</span>begin <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> Li3 <span class="sym">(</span><span class="kwa">cons</span> elt Li3<span class="sym">))</span>
	     <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> Li2 <span class="sym">(</span><span class="kwa">cdr</span> Li2<span class="sym">))))</span>
    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> Li3 <span class="sym">(</span><span class="kwa">reverse</span><span class="sym">!</span> Li3<span class="sym">))</span>
    <span class="sym">(</span>do <span class="sym">((</span>elt <span class="sym">(</span><span class="kwa">car</span> Li3<span class="sym">) (</span><span class="kwa">car</span> Li3<span class="sym">)))</span>
	<span class="sym">((</span><span class="kwa">eq</span>? <span class="sym">(</span><span class="kwa">cdr</span> Li3<span class="sym">)</span> <span class="str">'()) (begin (set! Li2 (cons elt Li2))</span>
<span class="str">				    (set! Li3 '</span><span class="sym">())</span>
				    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> Li2 <span class="sym">(</span><span class="kwa">reverse</span><span class="sym">!</span> Li2<span class="sym">))))</span>
      <span class="sym">(</span>begin <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> Li2 <span class="sym">(</span><span class="kwa">cons</span> elt Li2<span class="sym">))</span>
	     <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> Li3 <span class="sym">(</span><span class="kwa">cdr</span> Li3<span class="sym">))))</span>
    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> Li1 <span class="sym">(</span><span class="kwa">reverse</span><span class="sym">!</span> Li1<span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">car</span> Li1<span class="sym">)</span> SIZE<span class="sym">) (</span>every<span class="sym">-</span><span class="num">2</span>? <span class="sym">=</span> Li1 Li2<span class="sym">)) (</span><span class="kwa">length</span> Li1<span class="sym">)</span> <span class="num">0</span><span class="sym">)))</span>

<span class="sym">(</span>define every<span class="sym">-</span><span class="num">2</span>? <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>test l1 l2<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">null</span>? l1<span class="sym">)</span>
      <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(</span>test <span class="sym">(</span><span class="kwa">car</span> l1<span class="sym">) (</span><span class="kwa">car</span> l2<span class="sym">))</span>
           <span class="sym">(</span>every<span class="sym">-</span><span class="num">2</span>? test <span class="sym">(</span><span class="kwa">cdr</span> l1<span class="sym">) (</span><span class="kwa">cdr</span> l2<span class="sym">))))))</span>


<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">)))</span>
    <span class="sym">(</span>do <span class="sym">((</span>i n <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> n <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> n<span class="sym">))))</span>
	<span class="sym">((=</span> n <span class="num">1</span><span class="sym">) (</span>write<span class="sym">-</span><span class="kwa">line</span> <span class="sym">(</span>test<span class="sym">-</span>lists<span class="sym">)))</span>
      <span class="sym">(</span>test<span class="sym">-</span>lists<span class="sym">))))</span>
