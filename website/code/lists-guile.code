<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/usr/bin/guile \
-e main -s
!#

<I><FONT COLOR="#B22222">;;; $Id: lists-guile.code,v 1.2 2004-11-08 08:15:15 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">;;; from Brad Knotwell
</FONT></I>
(use-modules (ice-9 format))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">SIZE</FONT></B> 10000)
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">Li1</FONT></B> (cdr (iota (+ SIZE 1))))
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">Li2</FONT></B> (list-copy Li1))
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">Li3</FONT></B> '())

<I><FONT COLOR="#B22222">;;;  note the reverses
</FONT></I><I><FONT COLOR="#B22222">;;;  AFAIK, guile doesn't have a primitive for grabbing elts from the
</FONT></I><I><FONT COLOR="#B22222">;;;  end of a list.  no scheme programmer would do this anyway.  they'd
</FONT></I><I><FONT COLOR="#B22222">;;;  reverse the list in place
</FONT></I>(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">test-lists</FONT></B>)
  (<B><FONT COLOR="#A020F0">begin</FONT></B>
    (<B><FONT COLOR="#A020F0">do</FONT></B> ((elt (car Li2) (car Li2)))
	((eq? (cdr Li2) '()) (<B><FONT COLOR="#A020F0">begin</FONT></B>  (<B><FONT COLOR="#A020F0">set!</FONT></B> Li3 (cons elt Li3))
				     (<B><FONT COLOR="#A020F0">set!</FONT></B> Li2 '())
				     (<B><FONT COLOR="#A020F0">set!</FONT></B> Li3 (reverse! Li3))))
      (<B><FONT COLOR="#A020F0">begin</FONT></B> (<B><FONT COLOR="#A020F0">set!</FONT></B> Li3 (cons elt Li3))
	     (<B><FONT COLOR="#A020F0">set!</FONT></B> Li2 (cdr Li2))))
    (<B><FONT COLOR="#A020F0">set!</FONT></B> Li3 (reverse! Li3))
    (<B><FONT COLOR="#A020F0">do</FONT></B> ((elt (car Li3) (car Li3)))
	((eq? (cdr Li3) '()) (<B><FONT COLOR="#A020F0">begin</FONT></B> (<B><FONT COLOR="#A020F0">set!</FONT></B> Li2 (cons elt Li2))
				    (<B><FONT COLOR="#A020F0">set!</FONT></B> Li3 '())
				    (<B><FONT COLOR="#A020F0">set!</FONT></B> Li2 (reverse! Li2))))
      (<B><FONT COLOR="#A020F0">begin</FONT></B> (<B><FONT COLOR="#A020F0">set!</FONT></B> Li2 (cons elt Li2))
	     (<B><FONT COLOR="#A020F0">set!</FONT></B> Li3 (cdr Li3))))
    (<B><FONT COLOR="#A020F0">set!</FONT></B> Li1 (reverse! Li1))
    (<B><FONT COLOR="#A020F0">if</FONT></B> (<B><FONT COLOR="#A020F0">and</FONT></B> (= (car Li1) SIZE) (every-2? = Li1 Li2)) (length Li1) 0)))
	   
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">every-2?</FONT></B> (<B><FONT COLOR="#A020F0">lambda</FONT></B> (test l1 l2)
  (<B><FONT COLOR="#A020F0">or</FONT></B> (null? l1)
      (<B><FONT COLOR="#A020F0">and</FONT></B> (test (car l1) (car l2))
           (every-2? test (cdr l1) (cdr l2))))))


(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> args)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((n (<B><FONT COLOR="#A020F0">or</FONT></B> (<B><FONT COLOR="#A020F0">and</FONT></B> (= (length args) 2) (string-&gt;number (cadr args))) 1)))
    (<B><FONT COLOR="#A020F0">do</FONT></B> ((i n (<B><FONT COLOR="#A020F0">set!</FONT></B> n (1- n))))
	((= n 1) (write-line (test-lists)))
      (test-lists))))</pre></td></tr></table>
