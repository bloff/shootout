<span class="line">    1 </span>variable Toggle <span class="sym">=</span> <span class="kwb">struct</span> <span class="sym">{</span> state<span class="sym">,</span> value<span class="sym">,</span> activate <span class="sym">};
</span><span class="line">    2 </span><span class="sym">
</span><span class="line">    3 </span><span class="sym"></span>define toggle_value <span class="sym">(</span><span class="kwa">this</span><span class="sym">)
</span><span class="line">    4 </span><span class="sym">{
</span><span class="line">    5 </span><span class="sym"></span>   <span class="kwa">return this</span><span class="sym">.</span>state<span class="sym">;
</span><span class="line">    6 </span><span class="sym">}
</span><span class="line">    7 </span><span class="sym">
</span><span class="line">    8 </span><span class="sym"></span>define toggle_activate <span class="sym">(</span><span class="kwa">this</span><span class="sym">)
</span><span class="line">    9 </span><span class="sym">{
</span><span class="line">   10 </span><span class="sym"></span>   <span class="kwa">this</span><span class="sym">.</span>state <span class="sym">=</span> <span class="kwa">not this</span><span class="sym">.</span>state<span class="sym">;
</span><span class="line">   11 </span><span class="sym"></span>   <span class="kwa">return this</span><span class="sym">;
</span><span class="line">   12 </span><span class="sym">}
</span><span class="line">   13 </span><span class="sym">
</span><span class="line">   14 </span><span class="sym"></span>define init_Toggle <span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> start_state<span class="sym">)
</span><span class="line">   15 </span><span class="sym">{
</span><span class="line">   16 </span><span class="sym"></span>   <span class="kwa">this</span><span class="sym">.</span>state <span class="sym">=</span> start_state<span class="sym">;
</span><span class="line">   17 </span><span class="sym"></span>   <span class="kwa">this</span><span class="sym">.</span>value <span class="sym">= &amp;</span>toggle_value<span class="sym">;
</span><span class="line">   18 </span><span class="sym"></span>   <span class="kwa">this</span><span class="sym">.</span>activate <span class="sym">= &amp;</span>toggle_activate<span class="sym">;
</span><span class="line">   19 </span><span class="sym"></span>   <span class="kwa">return this</span><span class="sym">;
</span><span class="line">   20 </span><span class="sym">}
</span><span class="line">   21 </span><span class="sym"></span>define new_Toggle <span class="sym">(</span>start_state<span class="sym">)
</span><span class="line">   22 </span><span class="sym">{
</span><span class="line">   23 </span><span class="sym"></span>   <span class="kwa">return</span> init_Toggle <span class="sym">(</span>&#64;Toggle<span class="sym">,</span> start_state<span class="sym">);
</span><span class="line">   24 </span><span class="sym">}
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym"></span>define NthToggle_activate <span class="sym">(</span><span class="kwa">this</span><span class="sym">)
</span><span class="line">   27 </span><span class="sym">{
</span><span class="line">   28 </span><span class="sym"></span>   variable counter <span class="sym">=</span> <span class="kwa">this</span><span class="sym">.</span>counter<span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>   counter<span class="sym">++;
</span><span class="line">   30 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span><span class="kwa">this</span><span class="sym">.</span>count_max <span class="sym">&lt;=</span> counter<span class="sym">)
</span><span class="line">   31 </span><span class="sym">     {
</span><span class="line">   32 </span><span class="sym"></span>        <span class="kwa">this</span><span class="sym">.</span>state <span class="sym">=</span> <span class="kwa">not</span> <span class="sym">(</span><span class="kwa">this</span><span class="sym">.</span>state<span class="sym">);
</span><span class="line">   33 </span><span class="sym"></span>        counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   34 </span><span class="sym">    }
</span><span class="line">   35 </span><span class="sym"></span>   <span class="kwa">this</span><span class="sym">.</span>counter <span class="sym">=</span> counter<span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span>   <span class="kwa">return this</span><span class="sym">;
</span><span class="line">   37 </span><span class="sym">}
</span><span class="line">   38 </span><span class="sym">
</span><span class="line">   39 </span><span class="sym"></span>define init_NthToggle <span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> max_count<span class="sym">)
</span><span class="line">   40 </span><span class="sym">{
</span><span class="line">   41 </span><span class="sym"></span>   <span class="kwa">this</span><span class="sym">.</span>count_max <span class="sym">=</span> max_count<span class="sym">;
</span><span class="line">   42 </span><span class="sym"></span>   <span class="kwa">this</span><span class="sym">.</span>counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>   <span class="kwa">this</span><span class="sym">.</span>activate <span class="sym">= &amp;</span>NthToggle_activate<span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>   <span class="kwa">return this</span><span class="sym">;
</span><span class="line">   45 </span><span class="sym">}
</span><span class="line">   46 </span><span class="sym">
</span><span class="line">   47 </span><span class="sym"></span>define new_NthToggle <span class="sym">(</span>start_state<span class="sym">,</span> max_count<span class="sym">)
</span><span class="line">   48 </span><span class="sym">{
</span><span class="line">   49 </span><span class="sym"></span>   variable <span class="kwa">this</span> <span class="sym">=</span> &#64;Struct_Type
<span class="line">   50 </span>     <span class="sym">([</span>get_struct_field_names<span class="sym">(</span>Toggle<span class="sym">),</span> <span class="str">&quot;count_max&quot;</span><span class="sym">,</span> <span class="str">&quot;counter&quot;</span><span class="sym">]);
</span><span class="line">   51 </span><span class="sym"></span>   <span class="kwa">this</span> <span class="sym">=</span> init_Toggle<span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> start_state<span class="sym">);
</span><span class="line">   52 </span><span class="sym"></span>   <span class="kwa">return</span> init_NthToggle<span class="sym">(</span><span class="kwa">this</span><span class="sym">,</span> max_count<span class="sym">);
</span><span class="line">   53 </span><span class="sym">}
</span><span class="line">   54 </span><span class="sym">
</span><span class="line">   55 </span><span class="sym"></span>define do_toggle <span class="sym">(</span>tog<span class="sym">,</span> n<span class="sym">)
</span><span class="line">   56 </span><span class="sym">{
</span><span class="line">   57 </span><span class="sym"></span>   variable val<span class="sym">;
</span><span class="line">   58 </span><span class="sym"></span>   loop <span class="sym">(</span>n<span class="sym">)
</span><span class="line">   59 </span><span class="sym"></span>     val <span class="sym">=</span> &#64;<span class="sym">((</span>&#64;tog<span class="sym">.</span>activate<span class="sym">)(</span>tog<span class="sym">).</span>value<span class="sym">)(</span>tog<span class="sym">);
</span><span class="line">   60 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>val<span class="sym">)
</span><span class="line">   61 </span><span class="sym"></span>     fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">   62 </span><span class="sym"></span>   <span class="kwa">else
</span><span class="line">   63 </span><span class="kwa"></span>     fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">   64 </span><span class="sym">}
</span><span class="line">   65 </span><span class="sym">
</span><span class="line">   66 </span><span class="sym"></span>define main <span class="sym">()
</span><span class="line">   67 </span><span class="sym">{
</span><span class="line">   68 </span><span class="sym"></span>   variable n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   69 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> n <span class="sym">=</span> integer <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);
</span><span class="line">   70 </span><span class="sym">
</span><span class="line">   71 </span><span class="sym"></span>   do_toggle <span class="sym">(</span>new_Toggle <span class="sym">(</span><span class="num">1</span><span class="sym">),</span> n<span class="sym">);
</span><span class="line">   72 </span><span class="sym"></span>   do_toggle <span class="sym">(</span>new_NthToggle <span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">3</span><span class="sym">),</span> n<span class="sym">);
</span><span class="line">   73 </span><span class="sym">}
</span><span class="line">   74 </span><span class="sym"></span>main<span class="sym">();</span>
