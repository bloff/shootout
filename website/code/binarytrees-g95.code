<span class="slc">! -*- mode: f90 -*-
</span><span class="slc">!
</span><span class="slc">! $Id: binarytrees-g95.code,v 1.2 2005-09-25 08:05:40 bfulgham Exp $ ; $Name:  $
</span><span class="slc">!
</span><span class="slc">! The Great Computer Language Shootout
</span><span class="slc">! http://shootout.alioth.debian.org/
</span><span class="slc">!
</span><span class="slc">! contributed by Simon Geard, 2005; translated from binarytrees.python by Kevin Carson
</span><span class="slc">!
</span><span class="slc">! Tested and working with the following compilers (28/08/2005):
</span><span class="slc">!
</span><span class="slc">! /opt/intel/fc/9.0/bin/ifort -O3 -what -o binarytrees binarytrees.f90 -Wl,-rpath,/opt/intel/fc/9.0/lib
</span><span class="slc">! =&gt; Intel Fortran 9.0-5238
</span><span class="slc">!
</span><span class="slc">! /opt/intel_fc_80/bin/ifort -O3 -what -o binarytrees binarytrees.f90 -Wl,-rpath,/opt/intel_fc_80/lib
</span><span class="slc">! =&gt; Intel Fortran 8.1-5079
</span><span class="slc">!
</span><span class="slc">! g95 -O3 -o binarytrees binarytrees.f90
</span><span class="slc">! =&gt; G95 (GCC 4.0.1 (g95!) Aug 27 2005)
</span><span class="slc">!
</span><span class="slc">! At these compiler revisions g95 is about 10x slower than the Intel compilers
</span><span class="slc">!
</span><span class="slc">! This program requires proper implementation of TR15581 which specifies support for allocatable
</span><span class="slc">! functions. Without this support the tree has to be returned through subroutine arguments.
</span><span class="slc">!
</span>module binaryTree
  <span class="slc">!
</span>  <span class="slc">! Tree data structure
</span>  type Tree
     integer             <span class="sym">::</span> data
     type<span class="sym">(</span>Tree<span class="sym">),</span> pointer <span class="sym">::</span> left  <span class="sym">=&gt;</span> null<span class="sym">()
</span>     type<span class="sym">(</span>Tree<span class="sym">),</span> pointer <span class="sym">::</span> right <span class="sym">=&gt;</span> null<span class="sym">()
</span>  end type Tree

  interface assignment<span class="sym">(=)
</span>     module procedure equals_t_t <span class="slc">! Tree = Tree
</span>  end interface
contains

  <span class="slc">! Assignment
</span>  recursive subroutine equals_t_t<span class="sym">(</span>t2<span class="sym">,</span> t1<span class="sym">)
</span>    type<span class="sym">(</span>Tree<span class="sym">),</span> intent<span class="sym">(</span>out<span class="sym">) ::</span> t2
    type<span class="sym">(</span>Tree<span class="sym">),</span> intent<span class="sym">(</span>in<span class="sym">)  ::</span> t1
    t2<span class="sym">%</span>data <span class="sym">=</span> t1<span class="sym">%</span>data
    t2<span class="sym">%</span>left <span class="sym">=&gt;</span> t1<span class="sym">%</span>left
    t2<span class="sym">%</span>right <span class="sym">=&gt;</span> t1<span class="sym">%</span>right
  end subroutine equals_t_t

  <span class="slc">! Initialize tree nodes
</span>  type<span class="sym">(</span>Tree<span class="sym">)</span> function init<span class="sym">(</span>item<span class="sym">,</span> left<span class="sym">,</span> right<span class="sym">)</span> result<span class="sym">(</span>t<span class="sym">)
</span>    integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">)              ::</span> item
    type<span class="sym">(</span>Tree<span class="sym">),</span> intent<span class="sym">(</span>in<span class="sym">),</span> optional <span class="sym">::</span> left<span class="sym">,</span> right
    t<span class="sym">%</span>data <span class="sym">=</span> item
    if <span class="sym">(</span>present<span class="sym">(</span>left<span class="sym">))</span> then
       allocate<span class="sym">(</span>t<span class="sym">%</span>left<span class="sym">)
</span>       t<span class="sym">%</span>left <span class="sym">=</span> left
    end if
    if <span class="sym">(</span>present<span class="sym">(</span>right<span class="sym">))</span> then
       allocate<span class="sym">(</span>t<span class="sym">%</span>right<span class="sym">)
</span>       t<span class="sym">%</span>right <span class="sym">=</span> right
    end if
  end function init

  recursive function BottomUpTree<span class="sym">(</span>item<span class="sym">,</span> depth<span class="sym">)</span> result<span class="sym">(</span>bu<span class="sym">)
</span>    type<span class="sym">(</span>Tree<span class="sym">)          ::</span> bu
    integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> item
    integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> depth
    integer <span class="sym">::</span> item_item
    if <span class="sym">(</span>depth <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> then
       item_item <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>item
       bu <span class="sym">=</span> init<span class="sym">(</span>item<span class="sym">,</span> BottomUpTree<span class="sym">(</span>item_item <span class="num">- 1</span><span class="sym">,</span> depth<span class="num">-1</span><span class="sym">),</span> BottomUpTree<span class="sym">(</span>item_item<span class="sym">,</span> depth<span class="num">-1</span><span class="sym">))
</span>    else
       bu <span class="sym">=</span> init<span class="sym">(</span>item<span class="sym">)
</span>    end if
  end function BottomUpTree

  recursive function ItemCheck<span class="sym">(</span>t<span class="sym">)</span> result<span class="sym">(</span>ic<span class="sym">)
</span>    integer ic
    type<span class="sym">(</span>Tree<span class="sym">) ::</span> t

    if <span class="sym">(</span>.not. associated<span class="sym">(</span>t<span class="sym">%</span>left<span class="sym">))</span> then
       ic <span class="sym">=</span> t<span class="sym">%</span>data
    else
       ic <span class="sym">=</span> t<span class="sym">%</span>data <span class="sym">+</span> ItemCheck<span class="sym">(</span>t<span class="sym">%</span>left<span class="sym">) -</span> ItemCheck<span class="sym">(</span>t<span class="sym">%</span>right<span class="sym">)
</span>       deallocate<span class="sym">(</span>t<span class="sym">%</span>left<span class="sym">)
</span>       deallocate<span class="sym">(</span>t<span class="sym">%</span>right<span class="sym">)
</span>    end if
  end function ItemCheck

  <span class="slc">! Free all allocated memory
</span>  recursive subroutine tidy<span class="sym">(</span>t<span class="sym">)
</span>    type<span class="sym">(</span>Tree<span class="sym">),</span> intent<span class="sym">(</span>inout<span class="sym">) ::</span> t
    return
    if <span class="sym">(</span>associated<span class="sym">(</span>t<span class="sym">%</span>left<span class="sym">))</span> then
       call tidy<span class="sym">(</span>t<span class="sym">%</span>left<span class="sym">)
</span>       deallocate<span class="sym">(</span>t<span class="sym">%</span>left<span class="sym">)
</span>    end if
    if <span class="sym">(</span>associated<span class="sym">(</span>t<span class="sym">%</span>right<span class="sym">))</span> then
       call tidy<span class="sym">(</span>t<span class="sym">%</span>right<span class="sym">)
</span>       deallocate<span class="sym">(</span>t<span class="sym">%</span>right<span class="sym">)
</span>    end if
  end subroutine tidy

end module binaryTree

<span class="slc">! The program itself
</span>program bTrees
  use binaryTree

  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">1</span><span class="sym">),</span> parameter <span class="sym">::</span> tab <span class="sym">=</span> achar<span class="sym">(</span><span class="num">9</span><span class="sym">)
</span>  integer    <span class="sym">::</span> N<span class="sym">,</span> minDepth<span class="sym">,</span> maxDepth<span class="sym">,</span> stretchDepth<span class="sym">,</span> depth<span class="sym">,</span> iterations<span class="sym">,</span> i<span class="sym">,</span> check
  type<span class="sym">(</span>Tree<span class="sym">) ::</span> stretchTree<span class="sym">,</span> longLivedTree<span class="sym">,</span> tempTree
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">3</span><span class="sym">)</span> argv

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)
</span>  read<span class="sym">(</span>argv<span class="sym">,*)</span> N

  minDepth <span class="sym">=</span> <span class="num">4
</span>  maxDepth <span class="sym">=</span> max<span class="sym">(</span>N<span class="sym">,</span>minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">)

</span>  stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1
</span>  stretchTree <span class="sym">=</span> BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretchDepth<span class="sym">)
</span>  write<span class="sym">(*,</span><span class="str">'(2(a,i0))'</span><span class="sym">)</span> <span class="str">'stretch tree of depth '</span><span class="sym">,</span>stretchDepth<span class="sym">,</span>tab<span class="sym">//</span><span class="str">' check: '</span><span class="sym">,</span>ItemCheck<span class="sym">(</span>stretchTree<span class="sym">)
</span>  call tidy<span class="sym">(</span>stretchTree<span class="sym">)
</span>  longLivedTree <span class="sym">=</span> BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> maxDepth<span class="sym">)

</span>  do depth <span class="sym">=</span> minDepth<span class="sym">,</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="num">2
</span>     iterations <span class="sym">=</span> <span class="num">2</span><span class="sym">**(</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">)
</span>     check <span class="sym">=</span> <span class="num">0
</span>     do i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span> iterations
        tempTree <span class="sym">=</span> BottomUpTree<span class="sym">(</span>i<span class="sym">,</span> depth<span class="sym">)
</span>        check <span class="sym">=</span> check <span class="sym">+</span> ItemCheck<span class="sym">(</span>tempTree<span class="sym">)
</span>        call tidy<span class="sym">(</span>tempTree<span class="sym">)

</span>        tempTree <span class="sym">=</span> BottomUpTree<span class="sym">(-</span>i<span class="sym">,</span> depth<span class="sym">)
</span>        check <span class="sym">=</span> check <span class="sym">+</span> ItemCheck<span class="sym">(</span>tempTree<span class="sym">)
</span>        call tidy<span class="sym">(</span>tempTree<span class="sym">)
</span>     end do
     write<span class="sym">(*,</span><span class="str">'(2(i0,a),i0)'</span><span class="sym">)</span> iterations <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span>tab<span class="sym">//</span><span class="str">' trees of depth '</span><span class="sym">,</span>depth<span class="sym">,</span>tab<span class="sym">//</span><span class="str">' check: '</span><span class="sym">,</span>check
  end do
  write<span class="sym">(*,</span><span class="str">'(2(a,i0))'</span><span class="sym">)</span> <span class="str">'long lived tree of depth '</span><span class="sym">,</span>maxDepth<span class="sym">,</span>tab<span class="sym">//</span><span class="str">' check: '</span><span class="sym">,</span>ItemCheck<span class="sym">(</span>longLivedTree<span class="sym">)
</span>  call tidy<span class="sym">(</span>longLivedTree<span class="sym">)
</span>end program bTrees
