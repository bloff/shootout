<span class="slc">! The Computer Language Shootout Benchmarks</span>
<span class="slc">! http://shootout.alioth.debian.org/</span>
<span class="slc">!</span>
<span class="slc">! $Id: regexdna-g95.code,v 1.7 2007-12-04 06:32:56 bfulgham Exp $</span>
<span class="slc">!</span>
<span class="slc">! contributed by Steve Decker</span>
<span class="slc">! main program based on the Python version by Dominique Wahli</span>
<span class="slc">! compilation:</span>
<span class="slc">!    g95 -O1 -funroll-loops -fomit-frame-pointer regex.f90</span>
<span class="slc">!    ifort -O3 regex.f90</span>

module string_mod
  implicit none

  interface indx
     module procedure indexC
     module procedure indexArr
  end interface

contains

  pure function tolower<span class="sym">(</span>line<span class="sym">)</span>
    character<span class="sym">(</span>len<span class="sym">=*),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> line
    character<span class="sym">(</span>len<span class="sym">=</span>len<span class="sym">(</span>line<span class="sym">)) ::</span> tolower

    character<span class="sym">(</span>len<span class="sym">=</span><span class="num">122</span><span class="sym">),</span> parameter <span class="sym">::</span> Table <span class="sym">=</span> repeat<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">,</span> <span class="num">61</span><span class="sym">) //  &amp;</span>
         <span class="str">&quot;&gt;  abcdefghijklmnopqrstuvwxyz&quot;</span> <span class="sym">//</span> repeat<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">,</span> <span class="num">6</span><span class="sym">) //  &amp;</span>
         <span class="str">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>

    integer <span class="sym">::</span> i

    do i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> len<span class="sym">(</span>line<span class="sym">)</span>
       tolower<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">) =</span> Table<span class="sym">(</span>iachar<span class="sym">(</span>line<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">)):</span>iachar<span class="sym">(</span>line<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">)))</span>
    end do
  end function tolower

  pure integer function indexC<span class="sym">(</span>string<span class="sym">,</span> find<span class="sym">)</span>
    character<span class="sym">,</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> string
    character<span class="sym">,</span>               intent<span class="sym">(</span>in<span class="sym">) ::</span> find

    integer <span class="sym">::</span> i

    indexC <span class="sym">=</span> <span class="num">0</span>
    do i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> size<span class="sym">(</span>string<span class="sym">)</span>
       if <span class="sym">(</span>string<span class="sym">(</span>i<span class="sym">) ==</span> find<span class="sym">)</span> then
          indexC <span class="sym">=</span> i
          exit
       end if
    end do
  end function indexC

  <span class="slc">! The Boyer-Moore method</span>
  pure integer function indexArr<span class="sym">(</span>y<span class="sym">,</span> x<span class="sym">)</span>
    character<span class="sym">,</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> y<span class="sym">,</span> x

    integer<span class="sym">,</span>   dimension<span class="sym">(</span><span class="num">0</span><span class="sym">:</span><span class="num">127</span><span class="sym">)   ::</span> bmbc
    integer<span class="sym">,</span>   dimension<span class="sym">(</span>size<span class="sym">(</span>x<span class="sym">)) ::</span> bmgs
    character<span class="sym">,</span> dimension<span class="sym">(</span>size<span class="sym">(</span>x<span class="sym">)) ::</span> string
    integer <span class="sym">::</span> ysize<span class="sym">,</span> xsize<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">,</span> k

    ysize <span class="sym">=</span> size<span class="sym">(</span>y<span class="sym">)</span>
    xsize <span class="sym">=</span> size<span class="sym">(</span>x<span class="sym">)</span>

    bmbc <span class="sym">=</span> xsize
    do i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> xsize<span class="sym">-</span><span class="num">1</span>
       bmbc<span class="sym">(</span>iachar<span class="sym">(</span>x<span class="sym">(</span>i<span class="sym">))) =</span> xsize <span class="sym">-</span> i
    end do

    do i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> xsize
       do j <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> i
          string<span class="sym">(</span>j<span class="sym">) =</span> x<span class="sym">(</span>xsize<span class="sym">-</span>i<span class="sym">+</span>j<span class="sym">)</span>
       end do
       do j <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> xsize
          if <span class="sym">(</span>j <span class="sym">==</span> xsize<span class="sym">)</span> exit
          k <span class="sym">=</span> i <span class="sym">+</span> j <span class="sym">-</span> <span class="num">1</span>
          if <span class="sym">(</span>xsize<span class="sym">-</span>k <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> then
             if <span class="sym">(</span>string<span class="sym">(</span><span class="num">1</span><span class="sym">) ==</span> x<span class="sym">(</span>xsize<span class="sym">-</span>k<span class="sym">))</span> cycle
          end if
          if <span class="sym">(</span>all<span class="sym">(</span>string<span class="sym">(</span><span class="num">2</span><span class="sym">+</span>max<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>k<span class="sym">-</span>xsize<span class="sym">):</span>i<span class="sym">) ==</span> x<span class="sym">(</span>max<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>xsize<span class="sym">-</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">):</span>xsize<span class="sym">-</span>j<span class="sym">)))</span> exit
       end do
       bmgs<span class="sym">(</span>xsize<span class="sym">-</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">) =</span> j
    end do

    indexArr <span class="sym">=</span> <span class="num">0</span>
    j <span class="sym">=</span> <span class="num">1</span>
    do
       do i <span class="sym">=</span> xsize<span class="sym">,</span> <span class="num">1</span><span class="sym">, -</span><span class="num">1</span>
          if <span class="sym">(</span>x<span class="sym">(</span>i<span class="sym">) /=</span> y<span class="sym">(</span>i<span class="sym">+</span>j<span class="sym">-</span><span class="num">1</span><span class="sym">))</span> exit
       end do
       if <span class="sym">(</span>i <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> then
          indexArr <span class="sym">=</span> j
          exit
       end if
       j <span class="sym">=</span> j <span class="sym">+</span> max<span class="sym">(</span>bmgs<span class="sym">(</span>i<span class="sym">),</span> bmbc<span class="sym">(</span>iachar<span class="sym">(</span>y<span class="sym">(</span>i<span class="sym">+</span>j<span class="sym">-</span><span class="num">1</span><span class="sym">))) -</span> xsize <span class="sym">+</span> i<span class="sym">)</span>
       if <span class="sym">(</span>j <span class="sym">&gt;</span> ysize <span class="sym">-</span> xsize <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> exit
    end do
  end function indexArr
end module string_mod

module regex_subs
  use string_mod
  implicit none

  integer<span class="sym">,</span>   parameter <span class="sym">::</span> MaxCharLen <span class="sym">=</span> <span class="num">8</span>
  character<span class="sym">,</span> parameter <span class="sym">::</span> NewLine <span class="sym">=</span> achar<span class="sym">(</span><span class="num">10</span><span class="sym">)</span>

contains

  pure subroutine sub<span class="sym">(</span>pattern<span class="sym">,</span> replacement<span class="sym">,</span> string<span class="sym">,</span> length<span class="sym">)</span>
    character<span class="sym">(</span>len<span class="sym">=*),</span>        intent<span class="sym">(</span>in<span class="sym">)    ::</span> pattern<span class="sym">,</span> replacement
    character<span class="sym">,</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>inout<span class="sym">) ::</span> string
    integer<span class="sym">,</span>                 intent<span class="sym">(</span>inout<span class="sym">) ::</span> length

    character<span class="sym">(</span>len<span class="sym">=*),</span>        parameter <span class="sym">::</span> Separator <span class="sym">=</span> <span class="str">&quot;|&quot;</span><span class="sym">,</span> Star <span class="sym">=</span> <span class="str">&quot;.*&quot;</span>

    character<span class="sym">,</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> rep<span class="sym">,</span> p1a<span class="sym">,</span> p2a
    character<span class="sym">,</span> dimension<span class="sym">(</span><span class="num">0</span><span class="sym">) ::</span> null
    integer <span class="sym">::</span> head<span class="sym">,</span> tail<span class="sym">,</span> pos<span class="sym">,</span> ind1<span class="sym">,</span> ind2
    logical <span class="sym">::</span> done
    character<span class="sym">(</span>len<span class="sym">=</span>MaxCharLen<span class="sym">) ::</span> p1<span class="sym">,</span> p2

    head <span class="sym">=</span> <span class="num">1</span>
    done <span class="sym">=</span> .false.
    p1 <span class="sym">=</span> repeat<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">,</span> MaxCharLen<span class="sym">)</span>
    p2 <span class="sym">=</span> repeat<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">,</span> MaxCharLen<span class="sym">)</span>
    do
       tail <span class="sym">=</span> index<span class="sym">(</span>pattern<span class="sym">(</span>head<span class="sym">:),</span> Separator<span class="sym">) -</span> <span class="num">1</span>
       if <span class="sym">(</span>tail <span class="sym">== -</span><span class="num">1</span><span class="sym">)</span> then
          tail <span class="sym">=</span> len<span class="sym">(</span>pattern<span class="sym">)</span>
          done <span class="sym">=</span> .true.
       end if
       pos <span class="sym">=</span> index<span class="sym">(</span>pattern<span class="sym">(</span>head<span class="sym">:</span>tail<span class="sym">),</span> Star<span class="sym">) -</span> <span class="num">1</span>
       if <span class="sym">(</span>pos <span class="sym">== -</span><span class="num">1</span><span class="sym">)</span> then
          if <span class="sym">(</span>pattern<span class="sym">(</span>head<span class="sym">:</span>tail<span class="sym">) ==</span> <span class="str">&quot;(\n)&quot;</span><span class="sym">)</span> then
             call find_replace_all<span class="sym">(</span>string<span class="sym">,</span> length<span class="sym">,</span> NewLine<span class="sym">,</span> null<span class="sym">)</span>
          else
             allocate<span class="sym">(</span>rep<span class="sym">(</span>len_trim<span class="sym">(</span>replacement<span class="sym">)))</span>
             rep <span class="sym">=</span> transfer<span class="sym">(</span>trim<span class="sym">(</span>replacement<span class="sym">),</span> rep<span class="sym">)</span>
             call find_replace_all<span class="sym">(</span>string<span class="sym">,</span> length<span class="sym">,</span> pattern<span class="sym">(</span>head<span class="sym">:</span>head<span class="sym">),</span> rep<span class="sym">)</span>
             deallocate<span class="sym">(</span>rep<span class="sym">)</span>
          end if
       else
          call process_star<span class="sym">(</span>p1<span class="sym">,</span> head<span class="sym">,</span> pos<span class="sym">)</span>
          call process_star<span class="sym">(</span>p2<span class="sym">,</span> pos<span class="sym">+</span>len<span class="sym">(</span>Star<span class="sym">)+</span><span class="num">1</span><span class="sym">,</span> tail<span class="sym">)</span>
          allocate<span class="sym">(</span>p1a<span class="sym">(</span>len_trim<span class="sym">(</span>p1<span class="sym">)),</span> p2a<span class="sym">(</span>len_trim<span class="sym">(</span>p2<span class="sym">)))</span>
          p1a <span class="sym">=</span> transfer<span class="sym">(</span>trim<span class="sym">(</span>p1<span class="sym">),</span> p1a<span class="sym">)</span>
          p2a <span class="sym">=</span> transfer<span class="sym">(</span>trim<span class="sym">(</span>p2<span class="sym">),</span> p2a<span class="sym">)</span>
          do
             ind1 <span class="sym">=</span> indx<span class="sym">(</span>string<span class="sym">(:</span>length<span class="sym">),</span> p1a<span class="sym">)</span>
             if <span class="sym">(</span>ind1 <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> exit
             ind2 <span class="sym">=</span> indx<span class="sym">(</span>string<span class="sym">(</span>ind1<span class="sym">:</span>length<span class="sym">),</span> p2a<span class="sym">) +</span> ind1
             if <span class="sym">(</span>ind2 <span class="sym">==</span> ind1<span class="sym">)</span> exit
             string<span class="sym">(</span>ind1<span class="sym">:</span>length<span class="sym">) =</span> string<span class="sym">(</span>ind2<span class="sym">:</span>ind2<span class="sym">+</span>length<span class="sym">-</span>ind1<span class="sym">)</span>
             length <span class="sym">=</span> length <span class="sym">- (</span>ind2<span class="sym">-</span>ind1<span class="sym">)</span>
          end do
       end if
       if <span class="sym">(</span>done<span class="sym">)</span> exit
       head <span class="sym">=</span> tail <span class="sym">+</span> <span class="num">2</span>
    end do

  contains

    pure subroutine process_star<span class="sym">(</span>p<span class="sym">,</span> a<span class="sym">,</span> b<span class="sym">)</span>
      character<span class="sym">(</span>len<span class="sym">=*),</span> intent<span class="sym">(</span>inout<span class="sym">) ::</span> p
      integer<span class="sym">,</span>          intent<span class="sym">(</span>in<span class="sym">)    ::</span> a<span class="sym">,</span> b

      integer <span class="sym">::</span> i<span class="sym">,</span> j

      j <span class="sym">=</span> <span class="num">1</span>
      do i <span class="sym">=</span> a<span class="sym">,</span> b
         if <span class="sym">(</span>pattern<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">) /=</span> <span class="str">&quot;(&quot;</span> .and. pattern<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">) /=</span> <span class="str">&quot;)&quot;</span><span class="sym">)</span> then
            p<span class="sym">(</span>j<span class="sym">:</span>j<span class="sym">) =</span> pattern<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">)</span>
            j <span class="sym">=</span> j <span class="sym">+</span> <span class="num">1</span>
         end if
      end do
      if <span class="sym">(</span>p <span class="sym">==</span> <span class="str">&quot;\n&quot;</span><span class="sym">)</span> p <span class="sym">=</span> NewLine
    end subroutine process_star
  end subroutine sub

  pure integer function num_matches<span class="sym">(</span>pattern<span class="sym">,</span> string<span class="sym">,</span> length<span class="sym">)</span>
    character<span class="sym">(</span>len<span class="sym">=*),</span>        intent<span class="sym">(</span>in<span class="sym">) ::</span> pattern
    character<span class="sym">,</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> string
    integer<span class="sym">,</span>                 intent<span class="sym">(</span>in<span class="sym">) ::</span> length

    character<span class="sym">(</span>len<span class="sym">=*),</span> parameter <span class="sym">::</span> Separator <span class="sym">=</span> <span class="str">&quot;|&quot;</span>

    character<span class="sym">,</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> findArr
    integer <span class="sym">::</span> head<span class="sym">,</span> tail<span class="sym">,</span> lb<span class="sym">,</span> rb<span class="sym">,</span> i<span class="sym">,</span> ind1<span class="sym">,</span> ind2
    logical <span class="sym">::</span> done
    character<span class="sym">(</span>len<span class="sym">=</span>MaxCharLen<span class="sym">) ::</span> finds

    num_matches <span class="sym">=</span> <span class="num">0</span>
    head <span class="sym">=</span> <span class="num">1</span>
    done <span class="sym">=</span> .false.
    do
       tail <span class="sym">=</span> index<span class="sym">(</span>pattern<span class="sym">(</span>head<span class="sym">:),</span> Separator<span class="sym">) -</span> <span class="num">1</span>
       if <span class="sym">(</span>tail <span class="sym">== -</span><span class="num">1</span><span class="sym">)</span> then
          tail <span class="sym">=</span> len<span class="sym">(</span>pattern<span class="sym">)</span>
          done <span class="sym">=</span> .true.
       end if
       lb <span class="sym">=</span> index<span class="sym">(</span>pattern<span class="sym">(</span>head<span class="sym">:</span>tail<span class="sym">),</span> <span class="str">&quot;[&quot;</span><span class="sym">)</span>
       rb <span class="sym">=</span> index<span class="sym">(</span>pattern<span class="sym">(</span>head<span class="sym">:</span>tail<span class="sym">),</span> <span class="str">&quot;]&quot;</span><span class="sym">)</span>
       finds<span class="sym">(</span><span class="num">1</span><span class="sym">:</span>lb<span class="sym">-</span><span class="num">1</span><span class="sym">) =</span> pattern<span class="sym">(</span>head<span class="sym">:</span>head<span class="sym">+</span>lb<span class="sym">-</span><span class="num">2</span><span class="sym">)</span>
       finds<span class="sym">(</span>lb<span class="sym">+</span><span class="num">1</span><span class="sym">:) =</span> pattern<span class="sym">(</span>head<span class="sym">+</span>rb<span class="sym">:</span>tail<span class="sym">)</span>
       if <span class="sym">(</span>lb <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> rb <span class="sym">=</span> <span class="num">2</span>
       do i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> rb<span class="sym">-</span>lb<span class="sym">-</span><span class="num">1</span>
          if <span class="sym">(</span>lb <span class="sym">/=</span> <span class="num">0</span><span class="sym">)</span> finds<span class="sym">(</span>lb<span class="sym">:</span>lb<span class="sym">) =</span> pattern<span class="sym">(</span>head<span class="sym">+</span>lb<span class="sym">+</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">:</span>head<span class="sym">+</span>lb<span class="sym">+</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
          allocate<span class="sym">(</span>findArr<span class="sym">(</span>len_trim<span class="sym">(</span>finds<span class="sym">)))</span>
          findArr <span class="sym">=</span> transfer<span class="sym">(</span>finds<span class="sym">(</span><span class="num">1</span><span class="sym">:</span>len_trim<span class="sym">(</span>finds<span class="sym">)),</span> findArr<span class="sym">)</span>
          ind1 <span class="sym">=</span> <span class="num">1</span>
          do
             ind2 <span class="sym">=</span> indx<span class="sym">(</span>string<span class="sym">(</span>ind1<span class="sym">:</span>length<span class="sym">),</span> findArr<span class="sym">)</span>
             if <span class="sym">(</span>ind2 <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> exit
             num_matches <span class="sym">=</span> num_matches <span class="sym">+</span> <span class="num">1</span>
             ind1 <span class="sym">=</span> ind1 <span class="sym">+</span> ind2
          end do
          deallocate<span class="sym">(</span>findArr<span class="sym">)</span>
       end do
       if <span class="sym">(</span>done<span class="sym">)</span> exit
       head <span class="sym">=</span> tail <span class="sym">+</span> <span class="num">2</span>
    end do
  end function num_matches

  pure subroutine find_replace_all<span class="sym">(</span>string<span class="sym">,</span> length<span class="sym">,</span> find<span class="sym">,</span> rep<span class="sym">)</span>
    character<span class="sym">,</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>inout<span class="sym">) ::</span> string
    integer<span class="sym">,</span>                 intent<span class="sym">(</span>inout<span class="sym">) ::</span> length
    character<span class="sym">,</span>               intent<span class="sym">(</span>in<span class="sym">)    ::</span> find
    character<span class="sym">,</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>in<span class="sym">)    ::</span> rep

    character<span class="sym">,</span> dimension<span class="sym">(</span>size<span class="sym">(</span>string<span class="sym">)) ::</span> orig
    integer <span class="sym">::</span> lenrep<span class="sym">,</span> sprev<span class="sym">,</span> oprev<span class="sym">,</span> ocur<span class="sym">,</span> scur

    lenrep <span class="sym">=</span> size<span class="sym">(</span>rep<span class="sym">)</span>
    sprev <span class="sym">=</span> <span class="num">0</span>
    oprev <span class="sym">=</span> <span class="num">1</span>
    orig <span class="sym">=</span> string
    do
       ocur <span class="sym">=</span> indx<span class="sym">(</span>orig<span class="sym">(</span>oprev<span class="sym">:</span>length<span class="sym">),</span> find<span class="sym">) +</span> oprev <span class="sym">-</span> <span class="num">1</span>
       if <span class="sym">(</span>ocur <span class="sym">==</span> oprev <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> exit
       scur <span class="sym">=</span> sprev <span class="sym">+</span> ocur <span class="sym">-</span> oprev
       string<span class="sym">(</span>sprev<span class="sym">+</span><span class="num">1</span><span class="sym">:</span>scur<span class="sym">) =</span> orig<span class="sym">(</span>oprev<span class="sym">:</span>ocur<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
       sprev <span class="sym">=</span> scur <span class="sym">+</span> lenrep
       string<span class="sym">(</span>scur<span class="sym">+</span><span class="num">1</span><span class="sym">:</span>sprev<span class="sym">) =</span> rep
       oprev <span class="sym">=</span> ocur <span class="sym">+</span> <span class="num">1</span>
    end do
    ocur <span class="sym">=</span> length <span class="sym">+</span> <span class="num">1</span>
    scur <span class="sym">=</span> sprev <span class="sym">+</span> ocur <span class="sym">-</span> oprev
    string<span class="sym">(</span>sprev<span class="sym">+</span><span class="num">1</span><span class="sym">:</span>scur<span class="sym">) =</span> orig<span class="sym">(</span>oprev<span class="sym">:</span>ocur<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
    length <span class="sym">=</span> scur
  end subroutine find_replace_all
end module regex_subs

program regex
  use regex_subs
  implicit none

  integer<span class="sym">,</span> parameter <span class="sym">::</span> NumVariants <span class="sym">=</span> <span class="num">9</span><span class="sym">,</span> NumSubsts <span class="sym">=</span> <span class="num">11</span><span class="sym">,</span> InitBufSize <span class="sym">=</span> <span class="num">53248</span><span class="sym">,</span> LineLen <span class="sym">=</span> <span class="num">60</span>
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">25</span><span class="sym">),</span> dimension<span class="sym">(</span>NumVariants<span class="sym">),</span> parameter <span class="sym">::</span> Variants <span class="sym">= (/  &amp;</span>
       <span class="str">&quot;agggtaaa|tttaccct        &quot;</span><span class="sym">,</span> <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">,  &amp;</span>
       <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="sym">,</span> <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">,  &amp;</span>
       <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">,</span> <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="sym">,  &amp;</span>
       <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">,</span> <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">,  &amp;</span>
       <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span> <span class="sym">/)</span>
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">9</span><span class="sym">),</span> dimension<span class="sym">(</span><span class="num">2</span><span class="sym">,</span>NumSubsts<span class="sym">),</span> parameter <span class="sym">::</span> Subst <span class="sym">=</span> reshape<span class="sym">( (/  &amp;</span>
       <span class="str">&quot;b        &quot;</span><span class="sym">,</span> <span class="str">&quot;(c|g|t)  &quot;</span><span class="sym">,</span> <span class="str">&quot;d        &quot;</span><span class="sym">,</span> <span class="str">&quot;(a|g|t)  &quot;</span><span class="sym">,</span> <span class="str">&quot;h        &quot;</span><span class="sym">,  &amp;</span>
       <span class="str">&quot;(a|c|t)  &quot;</span><span class="sym">,</span> <span class="str">&quot;k        &quot;</span><span class="sym">,</span> <span class="str">&quot;(g|t)    &quot;</span><span class="sym">,</span> <span class="str">&quot;m        &quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c)    &quot;</span><span class="sym">,  &amp;</span>
       <span class="str">&quot;n        &quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">,</span> <span class="str">&quot;r        &quot;</span><span class="sym">,</span> <span class="str">&quot;(a|g)    &quot;</span><span class="sym">,</span> <span class="str">&quot;s        &quot;</span><span class="sym">,  &amp;</span>
       <span class="str">&quot;(c|g)    &quot;</span><span class="sym">,</span> <span class="str">&quot;v        &quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c|g)  &quot;</span><span class="sym">,</span> <span class="str">&quot;w        &quot;</span><span class="sym">,</span> <span class="str">&quot;(a|t)    &quot;</span><span class="sym">,  &amp;</span>
       <span class="str">&quot;y        &quot;</span><span class="sym">,</span> <span class="str">&quot;(c|t)    &quot;</span> <span class="sym">/), (/</span> <span class="num">2</span><span class="sym">,</span> NumSubsts <span class="sym">/) )</span>

  character<span class="sym">,</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> seq<span class="sym">,</span> temp
  integer                <span class="sym">::</span> stat<span class="sym">,</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> ilen<span class="sym">,</span> clen
  character<span class="sym">(</span>len<span class="sym">=</span>LineLen<span class="sym">) ::</span> line

  allocate<span class="sym">(</span>seq<span class="sym">(</span>InitBufSize<span class="sym">))</span>
  seq <span class="sym">=</span> <span class="str">&quot; &quot;</span>
  do
     i <span class="sym">=</span> j <span class="sym">+</span> <span class="num">1</span>
     read <span class="sym">(*,</span> <span class="str">&quot;(a)&quot;</span><span class="sym">,</span> iostat<span class="sym">=</span>stat<span class="sym">)</span> line
     if <span class="sym">(</span>stat <span class="sym">/=</span> <span class="num">0</span><span class="sym">)</span> exit
     j <span class="sym">=</span> i <span class="sym">+</span> len_trim<span class="sym">(</span>line<span class="sym">)</span>
     if <span class="sym">(</span>j <span class="sym">&gt;</span> size<span class="sym">(</span>seq<span class="sym">))</span> then
        allocate<span class="sym">(</span>temp<span class="sym">(</span>size<span class="sym">(</span>seq<span class="sym">)))</span>
        temp <span class="sym">=</span> seq
        deallocate<span class="sym">(</span>seq<span class="sym">)</span>
        allocate<span class="sym">(</span>seq<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>size<span class="sym">(</span>temp<span class="sym">)))</span>
        seq<span class="sym">(:</span>size<span class="sym">(</span>temp<span class="sym">)) =</span> temp
        seq<span class="sym">(</span>size<span class="sym">(</span>temp<span class="sym">)+</span><span class="num">1</span><span class="sym">:) =</span> <span class="str">&quot; &quot;</span>
        deallocate<span class="sym">(</span>temp<span class="sym">)</span>
     end if
     seq<span class="sym">(</span>i<span class="sym">:</span>j<span class="sym">) =</span> transfer<span class="sym">(</span>trim<span class="sym">(</span>tolower<span class="sym">(</span>line<span class="sym">))//</span>NewLine<span class="sym">,</span> seq<span class="sym">)</span>
  end do
  allocate<span class="sym">(</span>temp<span class="sym">(</span>nint<span class="sym">(</span><span class="num">1.35</span><span class="sym">*</span>j<span class="sym">)))</span>
  temp<span class="sym">(:</span>j<span class="sym">) =</span> seq<span class="sym">(:</span>j<span class="sym">)</span>
  temp<span class="sym">(</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">:) =</span> <span class="str">&quot; &quot;</span>
  deallocate<span class="sym">(</span>seq<span class="sym">)</span>
  allocate<span class="sym">(</span>seq<span class="sym">(</span>size<span class="sym">(</span>temp<span class="sym">)))</span>
  seq <span class="sym">=</span> temp
  deallocate<span class="sym">(</span>temp<span class="sym">)</span>
  ilen <span class="sym">=</span> j

  call sub<span class="sym">(</span><span class="str">&quot;(&gt;.*\n)|(\n)&quot;</span><span class="sym">,</span> <span class="str">&quot;&quot;</span><span class="sym">,</span> seq<span class="sym">,</span> j<span class="sym">)</span>
  clen <span class="sym">=</span> j

  do i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> NumVariants
     write <span class="sym">(*,</span> <span class="str">&quot;(a,1x,i0)&quot;</span><span class="sym">)</span> trim<span class="sym">(</span>Variants<span class="sym">(</span>i<span class="sym">)),</span> num_matches<span class="sym">(</span>trim<span class="sym">(</span>Variants<span class="sym">(</span>i<span class="sym">)),</span> seq<span class="sym">,</span> j<span class="sym">)</span>
  end do

  do i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> NumSubsts
     call sub<span class="sym">(</span>Subst<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>i<span class="sym">),</span> Subst<span class="sym">(</span><span class="num">2</span><span class="sym">,</span>i<span class="sym">),</span> seq<span class="sym">,</span> j<span class="sym">)</span>
  end do

  write <span class="sym">(*,</span> <span class="str">'(3(/i0))'</span><span class="sym">)</span> ilen<span class="sym">,</span> clen<span class="sym">,</span> j
end program regex
