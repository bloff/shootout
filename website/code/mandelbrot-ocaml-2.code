<span class="com">(*								-*tuareg-*-</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Christophe TROESTLER</span>
<span class="com"> * Enhanced by Christian Szegedy &lt;szegedy&#64;t-online.de&gt;</span>
<span class="com"> *             Yaron Minsky &lt;yminsky-guest&gt;</span>
<span class="com"> * Modified by Brian Hurt &lt;bhurt&#64;spnz.org&gt;</span>
<span class="com"> *)</span>

<span class="kwa">let</span> niter <span class="sym">=</span> <span class="num">50</span>
<span class="kwa">let</span> limit <span class="sym">=</span> <span class="num">2</span>.

<span class="kwa">let</span> limit2 <span class="sym">=</span> limit <span class="sym">*</span>. limit

<span class="kwa">type</span> complex <span class="sym">= {</span> <span class="kwa">mutable</span> r<span class="sym">:</span> <span class="kwb">float</span><span class="sym">;</span> <span class="kwa">mutable</span> i<span class="sym">:</span> <span class="kwb">float</span> <span class="sym">}</span>

<span class="kwa">let</span> add_bit0 c <span class="sym">=</span>
  <span class="kwa">let rec</span> loop i zr zi c <span class="sym">=</span>
	<span class="kwa">if</span> i <span class="sym">&gt;=</span> niter <span class="kwa">then</span>
      <span class="num">1</span>
	<span class="kwa">else if</span> <span class="sym">(</span>zr <span class="sym">*</span>. zr <span class="sym">+</span>. zi <span class="sym">*</span>. zi<span class="sym">) &gt;</span> limit2 <span class="kwa">then</span>
      <span class="num">0</span>
	<span class="kwa">else</span> <span class="kwd">loop</span> <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>zr <span class="sym">*</span>. zr <span class="sym">-</span>. zi <span class="sym">*</span>. zi <span class="sym">+</span>. c.r<span class="sym">) (</span><span class="num">2</span>. <span class="sym">*</span>. zr <span class="sym">*</span>. zi <span class="sym">+</span>. c.i<span class="sym">)</span> c
  <span class="kwa">in</span>
  loop <span class="num">0 0</span>. <span class="num">0</span>. c

<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="kwa">let</span> w <span class="sym">=</span> <span class="kwd">int_of_string</span><span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">in</span>
  <span class="kwa">let</span> h <span class="sym">=</span> w <span class="kwa">in</span>
  <span class="kwa">let</span> fw <span class="sym">=</span> <span class="kwb">float</span> w
  <span class="kwa">and</span> fh <span class="sym">=</span> <span class="kwb">float</span> h <span class="kwa">in</span>
  Printf.printf <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">%i %i</span><span class="esc">\n</span><span class="str">&quot;</span> w h<span class="sym">;</span>
  <span class="kwa">let rec</span> yloop c y <span class="sym">=</span>
    <span class="kwa">if</span> y <span class="sym">&gt;=</span> h <span class="kwa">then</span>
      <span class="sym">()</span>
    <span class="kwa">else</span>
      <span class="kwa">let rec</span> xloop c x byte b <span class="sym">=</span>
        <span class="kwa">if</span> x <span class="sym">&gt;=</span> w <span class="kwa">then</span>
          <span class="kwa">if</span> b <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span>
            output_byte <span class="kwd">stdout</span> <span class="sym">(</span>byte <span class="kwa">lsl</span> <span class="sym">(</span><span class="num">9</span> <span class="sym">-</span> b<span class="sym">))</span>
          <span class="kwa">else</span>
            <span class="sym">()</span>
        <span class="kwa">else</span>
          <span class="kwa">let</span> <span class="sym">() =</span> c.r <span class="sym">&lt;-</span> <span class="num">2</span>. <span class="sym">*</span>. <span class="kwb">float</span> x <span class="sym">/</span>. fw <span class="sym">-</span>. <span class="num">1.5</span> <span class="kwa">in</span>
          <span class="kwa">let</span> byte <span class="sym">= (</span>byte <span class="kwa">lsl</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">lor</span> <span class="sym">(</span>add_bit0 c<span class="sym">)</span> <span class="kwa">in</span>
          <span class="kwa">if</span> <span class="sym">(</span>b <span class="sym">&lt;</span> <span class="num">8</span><span class="sym">)</span> <span class="kwa">then</span>
            xloop <span class="kwd">c</span> <span class="sym">(</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="kwd">byte</span> <span class="sym">(</span>b<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
          <span class="kwa">else</span>
            <span class="kwa">let</span> <span class="sym">() =</span> output_byte stdout byte <span class="kwa">in</span>
            xloop <span class="kwd">c</span> <span class="sym">(</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="num">0 1</span>
      <span class="kwa">in</span>
      c.i <span class="sym">&lt;-</span> <span class="num">2</span>. <span class="sym">*</span>. <span class="kwb">float</span> y <span class="sym">/</span>. fh <span class="sym">-</span>. <span class="num">1</span>.<span class="sym">;</span>
      xloop c <span class="num">0 0 1</span><span class="sym">;</span>
      yloop <span class="kwd">c</span> <span class="sym">(</span>y<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
  <span class="kwa">in</span>
  yloop <span class="sym">{</span>r <span class="sym">=</span> <span class="num">0</span>.<span class="sym">;</span> i <span class="sym">=</span> <span class="num">0</span>.<span class="sym">}</span> <span class="num">0</span>

