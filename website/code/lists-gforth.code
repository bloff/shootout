\ <span class="sym">-*-</span> mode<span class="sym">:</span> forth <span class="sym">-*-</span>
\ $Id<span class="sym">:</span> lists<span class="sym">.</span>gforth<span class="sym">,</span>v <span class="num">1.1 2004</span><span class="sym">/</span><span class="num">05</span><span class="sym">/</span><span class="num">25 03</span><span class="sym">:</span><span class="num">22</span><span class="sym">:</span><span class="num">00</span> bfulgham Exp $
\ http<span class="sym">:</span><span class="slc">//www.bagley.org/~doug/shootout/</span>
\ from Anton Ertl

<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2</span>drop drop constant NUM

<span class="num">10000</span> constant SIZE

<span class="kwb">struct</span>
    cell<span class="sym">%</span> field list<span class="sym">-</span>next
    cell<span class="sym">%</span> field list<span class="sym">-</span>val
end<span class="sym">-</span><span class="kwb">struct</span> list<span class="sym">%</span>

<span class="sym">:</span> make<span class="sym">-</span><span class="kwd">list</span> <span class="sym">( --</span> list <span class="sym">)</span>
    <span class="num">0 0</span> SIZE <span class="sym">-</span><span class="kwa">do</span> <span class="sym">(</span> tail <span class="sym">)</span>
	list<span class="sym">% %</span>alloc
	i over list<span class="sym">-</span>val <span class="sym">!</span>
	tuck list<span class="sym">-</span>next <span class="sym">!</span>
	<span class="num">1</span> <span class="sym">-</span>loop
<span class="sym">;</span>

<span class="sym">:</span> copy<span class="sym">-</span><span class="kwd">list</span> <span class="sym">(</span> list1 <span class="sym">--</span> list2 <span class="sym">)</span>
    <span class="num">0</span> <span class="sym">{</span> w^ list2 <span class="sym">}</span>
    list2 <span class="kwd">begin</span> <span class="sym">(</span> list1<span class="str">' list2p'</span> <span class="sym">)</span>
	over
    <span class="kwa">while</span>
	list<span class="sym">% %</span>alloc dup <span class="sym">&gt;</span>r swap <span class="sym">! (</span> list1<span class="str">' R: list2'</span> <span class="sym">)</span>
	dup list<span class="sym">-</span>val &#64; r&#64; list<span class="sym">-</span>val <span class="sym">!</span>
	list<span class="sym">-</span>next &#64; r<span class="sym">&gt;</span> list<span class="sym">-</span><span class="kwd">next</span> <span class="sym">(</span> list1<span class="str">''</span> list2p<span class="str">''</span> <span class="sym">)</span>
    repeat
    off drop list2 &#64; <span class="sym">;</span>

<span class="sym">:</span> move<span class="sym">-</span>head<span class="sym">-</span>to<span class="sym">-</span><span class="kwd">tail</span> <span class="sym">(</span> list1 <span class="sym">--</span> list2 <span class="sym">)</span>
    \ somehow <span class="kwa">this</span> is an expensive noop
    <span class="num">0</span> <span class="sym">{</span> w^ list2 <span class="sym">}</span>
    list2 <span class="kwd">begin</span> <span class="sym">(</span> list1<span class="str">' list2p'</span> <span class="sym">)</span>
	over
    <span class="kwa">while</span>
	\ move one element
	over list<span class="sym">-</span>next dup &#64; <span class="num">2</span><span class="sym">&gt;</span><span class="kwd">r</span> <span class="sym">(</span> list1<span class="str">' list2p'</span> R<span class="sym">:</span> list2p<span class="str">''</span> list1<span class="str">''</span> <span class="sym">)</span>
	over list<span class="sym">-</span>next off
	<span class="sym">!</span> r<span class="sym">&gt;</span> r<span class="sym">&gt;</span>
    repeat
    off drop list2 &#64; <span class="sym">;</span>

<span class="sym">:</span> <span class="kwd">nreverse</span> <span class="sym">(</span> list1 <span class="sym">--</span> list2 <span class="sym">)</span>
    \ destructive reverse
    <span class="num">0</span> swap <span class="kwd">begin</span> <span class="sym">(</span> list2<span class="str">' list1'</span> <span class="sym">)</span>
	dup
    <span class="kwa">while</span>
	dup list<span class="sym">-</span>next &#64; <span class="sym">&gt;</span><span class="kwd">r</span> <span class="sym">(</span> list2<span class="str">' list1'</span> R<span class="sym">:</span> list1<span class="str">''</span> <span class="sym">)</span>
	tuck list<span class="sym">-</span>next <span class="sym">!</span> r<span class="sym">&gt; (</span> list1<span class="str">' list1'</span><span class="str">' )</span>
<span class="str">    repeat</span>
<span class="str">    drop ;</span>
<span class="str"></span>
<span class="str">: move-tail-to-tail ( list1 -- list2 )</span>
<span class="str"></span>    <span class="esc">\ </span><span class="str">use head-to-tail instead of head-to-head nreverse</span>
<span class="str">    nreverse move-head-to-tail ;</span>
<span class="str"></span>
<span class="str">: list-equals ( list1 list2 -- f )</span>
<span class="str">    begin ( l1'</span> l2<span class="str">' )</span>
<span class="str">	dup</span>
<span class="str">    while</span>
<span class="str">	over</span>
<span class="str">    while</span>
<span class="str">	over list-val &#64; over list-val &#64; &lt;&gt; if</span>
<span class="str">	    2drop false exit</span>
<span class="str">	endif</span>
<span class="str">	list-next &#64; swap list-next &#64; ( symmetric )</span>
<span class="str">    repeat then</span>
<span class="str">    = ;</span>
<span class="str"></span>
<span class="str">: list-length ( list -- n )</span>
<span class="str">    0 begin ( l'</span> n<span class="str">' )</span>
<span class="str">	over</span>
<span class="str">    while</span>
<span class="str">	1+ swap list-next &#64; swap</span>
<span class="str">    repeat</span>
<span class="str">    nip ;</span>
<span class="str"></span>
<span class="str">s&quot; wrong result&quot; exception constant wrong-result</span>
<span class="str"></span>
<span class="str">: main ( -- n )</span>
<span class="str">    0 NUM 0 ?do</span>
<span class="str">	drop</span>
<span class="str">	make-list dup copy-list ( list1 list2 )</span>
<span class="str">	move-head-to-tail move-tail-to-tail swap nreverse ( list2 list1 )</span>
<span class="str">	dup list-val &#64; SIZE &lt;&gt; wrong-result and throw</span>
<span class="str">	tuck list-equals 0= wrong-result and throw</span>
<span class="str">	list-length</span>
<span class="str">    loop ;</span>
<span class="str"></span>
<span class="str">main 0 .r cr bye</span>
<span class="str"></span>
