<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">using</span> System<span class="sym">;</span>

<span class="kwc">class</span> Fannkuch
<span class="sym">{</span>
   <span class="kwc">public</span> <span class="kwb">static int</span> <span class="kwd">fannkuch</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {</span>
      <span class="kwb">int</span> check <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwb">int</span><span class="sym">[]</span> perm <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
      <span class="kwb">int</span><span class="sym">[]</span> perm1 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
      <span class="kwb">int</span><span class="sym">[]</span> count <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
      <span class="kwb">int</span><span class="sym">[]</span> maxPerm <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
      <span class="kwb">int</span> maxFlipsCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwb">int</span> m <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>

      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> perm1<span class="sym">[</span>i<span class="sym">] =</span> i<span class="sym">;</span>
      <span class="kwb">int</span> r <span class="sym">=</span> n<span class="sym">;</span>

      <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">) {</span>
         <span class="slc">// write-out the first 30 permutations</span>
         <span class="kwa">if</span> <span class="sym">(</span>check <span class="sym">&lt;</span> <span class="num">30</span><span class="sym">){</span>
           <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> Console<span class="sym">.</span><span class="kwd">Write</span><span class="sym">(</span><span class="str">&quot;{0}&quot;</span><span class="sym">,</span> perm1<span class="sym">[</span>i<span class="sym">]+</span><span class="num">1</span><span class="sym">);</span>
           Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">();</span>
           check<span class="sym">++;</span>
         <span class="sym">}</span>

         <span class="kwa">while</span> <span class="sym">(</span>r <span class="sym">!=</span> <span class="num">1</span><span class="sym">){</span> count<span class="sym">[</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> r<span class="sym">;</span> r<span class="sym">--; }</span>
         <span class="kwa">if</span> <span class="sym">(! (</span>perm1<span class="sym">[</span><span class="num">0</span><span class="sym">]==</span><span class="num">0</span> <span class="sym">||</span> perm1<span class="sym">[</span>m<span class="sym">] ==</span> m<span class="sym">)){</span>
            <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> perm<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>i<span class="sym">];</span>
            <span class="kwb">int</span> flipsCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwb">int</span> k<span class="sym">;</span>

            <span class="kwa">while</span> <span class="sym">( !((</span>k<span class="sym">=</span>perm<span class="sym">[</span><span class="num">0</span><span class="sym">]) ==</span> <span class="num">0</span><span class="sym">) ) {</span>
               <span class="kwb">int</span> k2 <span class="sym">= (</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">) &gt;&gt;</span> <span class="num">1</span><span class="sym">;</span>
               <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>k2<span class="sym">;</span> i<span class="sym">++) {</span>
                  <span class="kwb">int</span> temp <span class="sym">=</span> perm<span class="sym">[</span>i<span class="sym">];</span> perm<span class="sym">[</span>i<span class="sym">] =</span> perm<span class="sym">[</span>k<span class="sym">-</span>i<span class="sym">];</span> perm<span class="sym">[</span>k<span class="sym">-</span>i<span class="sym">] =</span> temp<span class="sym">;</span>
               <span class="sym">}</span>
               flipsCount<span class="sym">++;</span>
            <span class="sym">}</span>

            <span class="kwa">if</span> <span class="sym">(</span>flipsCount <span class="sym">&gt;</span> maxFlipsCount<span class="sym">) {</span>
               maxFlipsCount <span class="sym">=</span> flipsCount<span class="sym">;</span>
               <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++)</span> maxPerm<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>i<span class="sym">];</span>
            <span class="sym">}</span>
         <span class="sym">}</span>

         <span class="slc">// Use incremental change to generate another permutation</span>
         <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">) {</span>
            <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">==</span> n<span class="sym">)</span> <span class="kwa">return</span> maxFlipsCount<span class="sym">;</span>
            <span class="kwb">int</span> perm0 <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
            <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwa">while</span> <span class="sym">(</span>i <span class="sym">&lt;</span> r<span class="sym">) {</span>
               <span class="kwb">int</span> j <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
               perm1<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>j<span class="sym">];</span>
               i <span class="sym">=</span> j<span class="sym">;</span>
            <span class="sym">}</span>
            perm1<span class="sym">[</span>r<span class="sym">] =</span> perm0<span class="sym">;</span>

            count<span class="sym">[</span>r<span class="sym">] =</span> count<span class="sym">[</span>r<span class="sym">] -</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">if</span> <span class="sym">(</span>count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;</span>
            r<span class="sym">++;</span>
         <span class="sym">}</span>
      <span class="sym">}</span>
   <span class="sym">}</span>

   <span class="kwb">static void</span> <span class="kwd">Main</span><span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">){</span>
      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">7</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;Pfannkuchen({0}) = {1}&quot;</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwd">fannkuch</span><span class="sym">(</span>n<span class="sym">));</span>
   <span class="sym">}</span>
<span class="sym">}</span>
