<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">;;; -*- mode: scheme -*-
</FONT></I><I><FONT COLOR="#B22222">;;; $Id: moments-stalin.code,v 1.1 2004-11-02 08:52:37 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://www.bagley.org/~doug/shootout/
</FONT></I>
(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> args)
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((sum 0.0)
	 (numlist (<B><FONT COLOR="#A020F0">let</FONT></B> loop ((line (read-line)) (numlist '()))
		    (<B><FONT COLOR="#A020F0">cond</FONT></B> ((eof-object? line) numlist)
			  (<B><FONT COLOR="#A020F0">else</FONT></B>
			   (<B><FONT COLOR="#A020F0">let</FONT></B> ((num (string-&gt;real line)))
			     (<B><FONT COLOR="#A020F0">set!</FONT></B> sum (+ num sum))
			     (loop (read-line) (cons num numlist))))))))
    (<B><FONT COLOR="#A020F0">let</FONT></B> ((n (length numlist)))
      (<B><FONT COLOR="#A020F0">let</FONT></B> ((mean (/ sum n))
	    (average_deviation 0.0)
	    (standard_deviation 0.0)
	    (variance 0.0)
	    (skew 0.0)
	    (kurtosis 0.0)
	    (median 0.0)
	    (deviation 0.0))
	(<B><FONT COLOR="#A020F0">let</FONT></B> loop ((nums numlist))
	     (<B><FONT COLOR="#A020F0">if</FONT></B> (not (null? nums))
		 (<B><FONT COLOR="#A020F0">begin</FONT></B>
		   (<B><FONT COLOR="#A020F0">set!</FONT></B> deviation (- (car nums) mean))
		   (<B><FONT COLOR="#A020F0">set!</FONT></B> average_deviation (+ average_deviation (abs deviation)))
		   (<B><FONT COLOR="#A020F0">set!</FONT></B> variance (+ variance (expt deviation 2.0)))
		   (<B><FONT COLOR="#A020F0">set!</FONT></B> skew (+ skew (expt deviation 3.0)))
		   (<B><FONT COLOR="#A020F0">set!</FONT></B> kurtosis (+ kurtosis (expt deviation 4)))
		   (loop (cdr nums)))))

	(<B><FONT COLOR="#A020F0">set!</FONT></B> average_deviation (/ average_deviation (fixnum-&gt;flonum n)))
	(<B><FONT COLOR="#A020F0">set!</FONT></B> variance (/ variance (- n 1)))
	(<B><FONT COLOR="#A020F0">set!</FONT></B> standard_deviation (sqrt variance))

	(<B><FONT COLOR="#A020F0">cond</FONT></B> ((&gt; variance 0.0)
	       (<B><FONT COLOR="#A020F0">set!</FONT></B> skew (/ skew (* n variance standard_deviation)))
	       (<B><FONT COLOR="#A020F0">set!</FONT></B> kurtosis (- (/ kurtosis (* n variance variance))
				 3.0))))

	(<B><FONT COLOR="#A020F0">set!</FONT></B> numlist (sort numlist (<B><FONT COLOR="#A020F0">lambda</FONT></B> (x y) (&lt;fl x y))))

	(<B><FONT COLOR="#A020F0">let</FONT></B> ((mid (/ n 2)))
	  (<B><FONT COLOR="#A020F0">if</FONT></B> (zero? (modulo n 2))
	      (<B><FONT COLOR="#A020F0">set!</FONT></B> median (/ (+ (car (list-tail numlist mid))
				 (car (list-tail numlist (- mid 1))))
			      2.0))
	    (<B><FONT COLOR="#A020F0">set!</FONT></B> median (car (list-tail numlist mid)))))
      
	
	(<B><FONT COLOR="#A020F0">set!</FONT></B> standard_deviation (/ (round (* standard_deviation 1000000)) 1000000))

        (display <B><FONT COLOR="#BC8F8F">&quot;n:                  ~D~n&quot;</FONT></B> n)
	(display <B><FONT COLOR="#BC8F8F">&quot;median:             ~,6F~n&quot;</FONT></B> median)
	(display <B><FONT COLOR="#BC8F8F">&quot;mean:               ~,6F~n&quot;</FONT></B> mean)
	(display <B><FONT COLOR="#BC8F8F">&quot;average_deviation:  ~,6F~n&quot;</FONT></B> average_deviation)
	(display <B><FONT COLOR="#BC8F8F">&quot;standard_deviation: ~,6F~n&quot;</FONT></B> standard_deviation)
	(display <B><FONT COLOR="#BC8F8F">&quot;variance:           ~,6F~n&quot;</FONT></B> variance)
	(display <B><FONT COLOR="#BC8F8F">&quot;skew:               ~,6F~n&quot;</FONT></B> skew)
	(display <B><FONT COLOR="#BC8F8F">&quot;kurtosis:           ~,6F~n&quot;</FONT></B> kurtosis)))))

(main (vector-&gt;list argv))</pre></td></tr></table>
