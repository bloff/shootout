<span class="slc">;;; -*- mode: scheme -*-</span>
<span class="slc">;;; $Id: moments-stalin.code,v 1.8 2006-09-20 05:52:01 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>sum <span class="num">0.0</span><span class="sym">)</span>
	 <span class="sym">(</span>numlist <span class="sym">(</span>let loop <span class="sym">((</span><span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)) (</span>numlist <span class="str">'()))</span>
<span class="str">		    (cond ((eof-object? line) numlist)</span>
<span class="str">			  (else</span>
<span class="str">			   (let ((num (string-&gt;real line)))</span>
<span class="str">			     (set! sum (+ num sum))</span>
<span class="str">			     (loop (read-line) (cons num numlist))))))))</span>
<span class="str">    (let ((n (length numlist)))</span>
<span class="str">      (let ((mean (/ sum n))</span>
<span class="str">	    (average_deviation 0.0)</span>
<span class="str">	    (standard_deviation 0.0)</span>
<span class="str">	    (variance 0.0)</span>
<span class="str">	    (skew 0.0)</span>
<span class="str">	    (kurtosis 0.0)</span>
<span class="str">	    (median 0.0)</span>
<span class="str">	    (deviation 0.0))</span>
<span class="str">	(let loop ((nums numlist))</span>
<span class="str">	     (if (not (null? nums))</span>
<span class="str">		 (begin</span>
<span class="str">		   (set! deviation (- (car nums) mean))</span>
<span class="str">		   (set! average_deviation (+ average_deviation (abs deviation)))</span>
<span class="str">		   (set! variance (+ variance (expt deviation 2.0)))</span>
<span class="str">		   (set! skew (+ skew (expt deviation 3.0)))</span>
<span class="str">		   (set! kurtosis (+ kurtosis (expt deviation 4)))</span>
<span class="str">		   (loop (cdr nums)))))</span>
<span class="str"></span>
<span class="str">	(set! average_deviation (/ average_deviation (fixnum-&gt;flonum n)))</span>
<span class="str">	(set! variance (/ variance (- n 1)))</span>
<span class="str">	(set! standard_deviation (sqrt variance))</span>
<span class="str"></span>
<span class="str">	(cond ((&gt; variance 0.0)</span>
<span class="str">	       (set! skew (/ skew (* n variance standard_deviation)))</span>
<span class="str">	       (set! kurtosis (- (/ kurtosis (* n variance variance))</span>
<span class="str">				 3.0))))</span>
<span class="str"></span>
<span class="str">	(set! numlist (sort numlist (lambda (x y) (&lt;fl x y))))</span>
<span class="str"></span>
<span class="str">	(let ((mid (/ n 2)))</span>
<span class="str">	  (if (zero? (modulo n 2))</span>
<span class="str">	      (set! median (/ (+ (car (list-tail numlist mid))</span>
<span class="str">				 (car (list-tail numlist (- mid 1))))</span>
<span class="str">			      2.0))</span>
<span class="str">	    (set! median (car (list-tail numlist mid)))))</span>
<span class="str"></span>
<span class="str"></span>
<span class="str">	(set! standard_deviation (/ (round (* standard_deviation 1000000)) 1000000))</span>
<span class="str"></span>
<span class="str">        (display &quot;n:                  ~D~n&quot; n)</span>
<span class="str">	(display &quot;median:             ~,6F~n&quot; median)</span>
<span class="str">	(display &quot;mean:               ~,6F~n&quot; mean)</span>
<span class="str">	(display &quot;average_deviation:  ~,6F~n&quot; average_deviation)</span>
<span class="str">	(display &quot;standard_deviation: ~,6F~n&quot; standard_deviation)</span>
<span class="str">	(display &quot;variance:           ~,6F~n&quot; variance)</span>
<span class="str">	(display &quot;skew:               ~,6F~n&quot; skew)</span>
<span class="str">	(display &quot;kurtosis:           ~,6F~n&quot; kurtosis)))))</span>
<span class="str"></span>
<span class="str">(main (vector-&gt;list argv))</span>
