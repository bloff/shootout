<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Alexei Svitkine
*/</span>

<span class="kwa">class</span> fasta
<span class="sym">{
</span>  <span class="kwa">public static final</span> <span class="kwb">int</span> IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;
</span>  <span class="kwa">public static final</span> <span class="kwb">int</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;
</span>  <span class="kwa">public static final</span> <span class="kwb">int</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;
</span>  <span class="kwa">public static</span> <span class="kwb">int</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">;

</span>  <span class="kwa">public static final</span> <span class="kwb">int</span> LineLength <span class="sym">=</span> <span class="num">60</span><span class="sym">;

</span>  <span class="slc">// The usual pseudo-random number generator
</span>  <span class="kwa">public static</span> <span class="kwb">double</span> random<span class="sym">(</span><span class="kwb">double</span> max<span class="sym">)
  {
</span>    last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">;
</span>    <span class="kwa">return</span> max <span class="sym">*</span> last <span class="sym">/</span> IM <span class="sym">;
  }

</span>  <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)
  {
</span>    MakeCumulative<span class="sym">(</span>HomoSapiens<span class="sym">);
</span>    MakeCumulative<span class="sym">(</span>IUB<span class="sym">);

</span>    <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1000</span><span class="sym">;
</span>    <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>    MakeRepeatFasta<span class="sym">(</span><span class="str">&quot;ONE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens alu&quot;</span><span class="sym">,</span> ALU<span class="sym">,</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">);
</span>    MakeRandomFasta<span class="sym">(</span><span class="str">&quot;TWO&quot;</span><span class="sym">,</span> <span class="str">&quot;IUB ambiguity codes&quot;</span><span class="sym">,</span> IUB<span class="sym">,</span> n<span class="sym">*</span><span class="num">3</span><span class="sym">);
</span>    MakeRandomFasta<span class="sym">(</span><span class="str">&quot;THREE&quot;</span><span class="sym">,</span> <span class="str">&quot;Homo sapiens frequency&quot;</span><span class="sym">,</span> HomoSapiens<span class="sym">,</span> n<span class="sym">*</span><span class="num">5</span><span class="sym">);
  }

</span>  <span class="slc">// Weighted selection from alphabet
</span>  <span class="kwa">public static</span> <span class="kwc">String</span> ALU <span class="sym">=
</span>    <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="sym">+
</span>    <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="sym">+
</span>    <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="sym">+
</span>    <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="sym">+
</span>    <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="sym">+
</span>    <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="sym">+
</span>    <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">;

</span>  <span class="kwa">public static final</span> Frequency<span class="sym">[]</span> IUB <span class="sym">=</span> <span class="kwa">new</span> Frequency<span class="sym">[] {
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.12</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.27</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'B'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'D'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'H'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'K'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'M'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'N'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'R'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'S'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'V'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'W'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'Y'</span><span class="sym">,</span> <span class="num">0.02</span><span class="sym">)
  };

</span>  <span class="kwa">public static final</span> Frequency<span class="sym">[]</span> HomoSapiens <span class="sym">=</span> <span class="kwa">new</span> Frequency<span class="sym">[] {
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.3029549426680</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.1979883004921</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.1975473066391</span><span class="sym">),
</span>    <span class="kwa">new</span> Frequency<span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.3015094502008</span><span class="sym">)
  };

</span>  <span class="kwa">public static</span> <span class="kwb">void</span> MakeCumulative<span class="sym">(</span>Frequency<span class="sym">[]</span> a<span class="sym">) {
</span>    <span class="kwb">double</span> cp <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> a<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++) {
</span>      cp <span class="sym">+=</span> a<span class="sym">[</span>i<span class="sym">].</span>p<span class="sym">;
</span>      a<span class="sym">[</span>i<span class="sym">].</span>p <span class="sym">=</span> cp<span class="sym">;
    }
  }

</span>  <span class="slc">// naive
</span>  <span class="kwa">public static</span> <span class="kwb">char</span> SelectRandom<span class="sym">(</span>Frequency<span class="sym">[]</span> a<span class="sym">) {
</span>    <span class="kwb">double</span> r <span class="sym">=</span> random<span class="sym">(</span><span class="num">1.0</span><span class="sym">);
</span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> a<span class="sym">.</span>length<span class="sym">;</span> i<span class="sym">++)
</span>      <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">&lt;</span> a<span class="sym">[</span>i<span class="sym">].</span>p<span class="sym">)</span> <span class="kwa">return</span> a<span class="sym">[</span>i<span class="sym">].</span>c<span class="sym">;

</span>    <span class="kwa">return</span> a<span class="sym">[</span>a<span class="sym">.</span>length<span class="num">-1</span><span class="sym">].</span>c<span class="sym">;
  }

</span>  <span class="kwa">static</span> <span class="kwb">void</span> MakeRandomFasta<span class="sym">(</span><span class="kwc">String</span> id<span class="sym">,</span> <span class="kwc">String</span> desc<span class="sym">,</span> Frequency<span class="sym">[]</span> a<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">) {
</span>    <span class="kwb">int</span> m <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;&gt;&quot;</span> <span class="sym">+</span> id <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> desc<span class="sym">);

</span>    <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
</span>      <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> LineLength<span class="sym">)</span> m <span class="sym">=</span> n<span class="sym">;</span> <span class="kwa">else</span> m <span class="sym">=</span> LineLength<span class="sym">;
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>m<span class="sym">;</span> i<span class="sym">++)</span> <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>print<span class="sym">(</span>SelectRandom<span class="sym">(</span>a<span class="sym">));
</span>      <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">();
</span>      n <span class="sym">-=</span> LineLength<span class="sym">;
    }
  }

</span>  <span class="kwa">static</span> <span class="kwb">void</span> MakeRepeatFasta<span class="sym">(</span><span class="kwc">String</span> id<span class="sym">,</span> <span class="kwc">String</span> desc<span class="sym">,</span> <span class="kwc">String</span> alu<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">) {

</span>    <span class="kwb">int</span> m <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> kn <span class="sym">=</span> alu<span class="sym">.</span>length<span class="sym">();
</span>    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span><span class="str">&quot;&gt;&quot;</span> <span class="sym">+</span> id <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> desc<span class="sym">);

</span>    <span class="kwa">while</span> <span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
</span>      <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&lt;</span> LineLength<span class="sym">)</span> m <span class="sym">=</span> n<span class="sym">;</span> <span class="kwa">else</span> m <span class="sym">=</span> LineLength<span class="sym">;
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>m<span class="sym">;</span> i<span class="sym">++){
</span>        <span class="kwa">if</span> <span class="sym">(</span>k <span class="sym">==</span> kn<span class="sym">)</span> k <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>        <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>print<span class="sym">(</span>alu<span class="sym">.</span>charAt<span class="sym">(</span>k<span class="sym">));
</span>        k<span class="sym">++;
      }
</span>      <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">();
</span>      n <span class="sym">-=</span> LineLength<span class="sym">;
    }
  }

</span>  <span class="kwa">public static class</span> Frequency
  <span class="sym">{
</span>    <span class="kwa">public</span> <span class="kwb">char</span> c<span class="sym">;
</span>    <span class="kwa">public</span> <span class="kwb">double</span> p<span class="sym">;

</span>    <span class="kwa">public</span> Frequency<span class="sym">(</span><span class="kwb">char</span> c<span class="sym">,</span> <span class="kwb">double</span> p<span class="sym">) {
</span>      <span class="kwa">this</span><span class="sym">.</span>c <span class="sym">=</span> c<span class="sym">;
</span>      <span class="kwa">this</span><span class="sym">.</span>p <span class="sym">=</span> p<span class="sym">;
    }
  }
}
</span>
