<span class="sym">&lt;</span>?php

<span class="com">/* The Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Charles G.</span>
<span class="com"> * fixed by Isaac Gouy</span>
<span class="com"> */</span>

<span class="kwa">function</span> nsieve<span class="sym">(</span><span class="kwb">$m</span><span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">$flags</span> <span class="sym">=</span> <span class="str">' '</span><span class="sym">;</span>
    <span class="kwb">$flags</span><span class="sym">[</span><span class="kwb">$m</span><span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> <span class="str">' '</span><span class="sym">;</span>

    <span class="kwb">$count</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$i</span> <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> <span class="kwb">$i</span> <span class="sym">&lt;=</span> <span class="kwb">$m</span><span class="sym">; ++</span><span class="kwb">$i</span><span class="sym">)</span>
        <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$flags</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">-</span><span class="num">1</span><span class="sym">] ==</span> <span class="str">' '</span><span class="sym">) {</span>
            <span class="sym">++</span><span class="kwb">$count</span><span class="sym">;</span>
            <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$j</span> <span class="sym">=</span> <span class="kwb">$i</span> <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;</span> <span class="kwb">$j</span> <span class="sym">&lt;</span> <span class="kwb">$m</span><span class="sym">;</span> <span class="kwb">$j</span> <span class="sym">+=</span> <span class="kwb">$i</span><span class="sym">)</span>
                <span class="kwb">$flags</span><span class="sym">[</span><span class="kwb">$j</span><span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> <span class="str">'x'</span><span class="sym">;</span>
        <span class="sym">}</span>

<span class="slc">//    echo &quot;Primes up to $m $count\n&quot;;</span>

    <span class="kwa">printf</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwb">$m</span><span class="sym">,</span> <span class="kwb">$count</span><span class="sym">);</span>

<span class="sym">}</span>

<span class="kwb">$m</span> <span class="sym">=</span> <span class="kwb">$argv</span><span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">$i</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> <span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="num">3</span><span class="sym">; ++</span><span class="kwb">$i</span><span class="sym">)</span>
    nsieve<span class="sym">(</span><span class="num">10000</span> <span class="sym">&lt;&lt; (</span><span class="kwb">$m</span><span class="sym">-</span><span class="kwb">$i</span><span class="sym">));</span>
?<span class="sym">&gt;</span>
