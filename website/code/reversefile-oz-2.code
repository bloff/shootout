<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Attempt at a reasonably memory-efficient implementation which should:</span>
<span class="slc">%</span>
<span class="slc">% * Handle 'large' files [~ &gt;2MB] faster than existing version</span>
<span class="slc">% * Handle arbitrarily large files [~ &gt;10MB] files without crashing</span>
<span class="slc">%   [unlike existing version which, since it uses stack unwinding to perform</span>
<span class="slc">%   its task, is very sensitive to the input file size]</span>
<span class="slc">%</span>
<span class="slc">% Use made of code from 'Concepts, Techniques and Models of Computer</span>
<span class="slc">% Programming' [CTM] by P. van Roy, S. Haridi.</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo<span class="sym">)</span> Application<span class="sym">(</span>exit<span class="sym">)</span> Open<span class="sym">(</span>text file<span class="sym">)</span>

<span class="kwb">define</span>
  <span class="kwa">class</span> TextFile_
    <span class="kwb">from</span> Open.file Open.text
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="slc">%% General Purpose Stateful Stack [CTM implementation]</span>
  <span class="kwb">fun</span> <span class="sym">{</span>NewStack<span class="sym">}</span>
    C <span class="sym">= {</span>NewCell <span class="kwa">nil</span><span class="sym">}</span>

    <span class="kwb">proc</span> <span class="sym">{</span>Push X<span class="sym">}</span> S <span class="kwb">in</span> S <span class="sym">=</span> &#64;C C <span class="sym">:=</span> X<span class="sym">|</span>S <span class="kwb">end</span>

    <span class="kwb">fun</span> <span class="sym">{</span>Pop<span class="sym">}</span> S1 <span class="kwb">in</span>
      S1 <span class="sym">=</span> &#64;C
      <span class="kwb">case</span> S1 <span class="kwb">of</span> X<span class="sym">|</span>S <span class="kwb">then</span>
        C <span class="sym">:=</span> S
        X
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    <span class="kwb">fun</span> <span class="sym">{</span>IsEmpty<span class="sym">}</span> S <span class="kwb">in</span> S <span class="sym">=</span> &#64;C S <span class="sym">==</span> <span class="kwa">nil</span> <span class="kwb">end</span>
  <span class="kwb">in</span>
    ops<span class="sym">(</span>push<span class="sym">:</span>Push pop<span class="sym">:</span>Pop isEmpty<span class="sym">:</span>IsEmpty<span class="sym">)</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">local</span>
    LF <span class="sym">=</span> <span class="num">10</span> Lines <span class="sym">= {</span>NewStack<span class="sym">}</span> Spill <span class="sym">= {</span>NewCell <span class="kwa">nil</span><span class="sym">}</span>
  <span class="kwb">in</span>
    <span class="kwb">proc</span> <span class="sym">{</span>ProcessBuffer Buffer<span class="sym">}</span> Ys Yr <span class="kwb">in</span>
      <span class="sym">{</span>String.token Buffer LF Ys Yr<span class="sym">}</span>
      <span class="sym">{</span>SplitAndPrint Yr<span class="sym">}</span>
      Spill <span class="sym">:=</span> Ys
    <span class="kwb">end</span>

    <span class="kwb">proc</span> <span class="sym">{</span>FlushBuffer<span class="sym">}</span>
      <span class="sym">{</span>DumpSpill<span class="sym">}</span>
    <span class="kwb">end</span>

    <span class="kwb">proc</span> <span class="sym">{</span>DumpLines<span class="sym">}</span>
      <span class="kwb">if</span> <span class="sym">{</span>Lines.isEmpty<span class="sym">}</span> <span class="kwb">then</span> skip
      <span class="kwb">else</span> <span class="sym">{</span>System.showInfo <span class="sym">{</span>Lines.pop<span class="sym">}} {</span>DumpLines<span class="sym">}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    <span class="kwb">proc</span> <span class="sym">{</span>DumpSpill<span class="sym">}</span>
      <span class="kwb">if</span> &#64;Spill \= <span class="kwa">nil</span> <span class="kwb">then</span> <span class="sym">{</span>System.showInfo &#64;Spill<span class="sym">}</span> Spill <span class="sym">:=</span> <span class="kwa">nil</span> <span class="kwb">end</span>
    <span class="kwb">end</span>

    <span class="kwb">proc</span> <span class="sym">{</span>SplitAndPrint Xs<span class="sym">}</span>
      <span class="kwb">case</span> Xs <span class="kwb">of</span> <span class="kwa">nil</span> <span class="kwb">then</span> skip
      <span class="kwb">else</span> Ys Yr <span class="kwb">in</span>
        <span class="sym">{</span>String.token Xs LF Ys Yr<span class="sym">}</span>

        <span class="slc">%% Should really handle blank / LF-only lines here ...</span>
        <span class="slc">%% case Ys#Yr of nil#nil then ...</span>
        <span class="slc">%% [] nil#_ then ...</span>
        <span class="slc">%% [] _#nil then ...</span>

        <span class="kwb">case</span> Yr <span class="kwb">of</span> <span class="kwa">nil</span> <span class="kwb">then</span>
          <span class="kwb">if</span> <span class="sym">{</span>List.last Xs<span class="sym">}</span> \= LF <span class="kwb">then</span>
            Spill <span class="sym">:= {</span>List.append Ys &#64;Spill<span class="sym">}</span>
          <span class="kwb">else</span>
            <span class="sym">{</span>Lines.push Ys<span class="sym">}</span>
          <span class="kwb">end</span>
          <span class="sym">{</span>DumpSpill<span class="sym">}</span>
          <span class="sym">{</span>DumpLines<span class="sym">}</span>
        <span class="kwb">else</span>
          <span class="sym">{</span>Lines.push Ys<span class="sym">}</span>
          <span class="sym">{</span>SplitAndPrint Yr<span class="sym">}</span>
        <span class="kwb">end</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">proc</span> <span class="sym">{</span>ReverseFile FILE BufferSize<span class="sym">}</span>

    <span class="kwb">proc</span> <span class="sym">{</span>ReadBuffer RemainingBytes<span class="sym">}</span> BytesRead Buffer StartPos ToRead <span class="kwb">in</span>
      <span class="kwb">if</span> RemainingBytes <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwb">then</span>
        <span class="sym">{</span>FlushBuffer<span class="sym">}</span>
      <span class="kwb">else</span>
        ToRead <span class="sym">=</span> <span class="kwb">if</span> RemainingBytes <span class="sym">&lt;</span> BufferSize <span class="kwb">then</span> RemainingBytes <span class="kwb">else</span> BufferSize <span class="kwb">end</span>
        <span class="sym">{</span>FILE seek<span class="sym">(</span>whence<span class="sym">:</span>current offset<span class="sym">:</span>~ToRead<span class="sym">)}</span>
        <span class="sym">{</span>FILE tell<span class="sym">(</span>offset<span class="sym">:</span>StartPos<span class="sym">)}</span>
        <span class="sym">{</span>FILE read<span class="sym">(</span>list<span class="sym">:</span>Buffer size<span class="sym">:</span>ToRead len<span class="sym">:</span>BytesRead<span class="sym">)}</span>
        <span class="sym">{</span>FILE seek<span class="sym">(</span>whence<span class="sym">:</span>set offset<span class="sym">:</span>StartPos<span class="sym">)}</span>
        <span class="sym">{</span>ProcessBuffer Buffer<span class="sym">}</span>
        <span class="sym">{</span>ReadBuffer <span class="sym">(</span>RemainingBytes <span class="sym">-</span> BytesRead<span class="sym">)}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    RemainingBytes
  <span class="kwb">in</span>
    <span class="sym">{</span>FILE seek<span class="sym">(</span>whence<span class="sym">:</span><span class="str">'end'</span> offset<span class="sym">:</span><span class="num">0</span><span class="sym">)}</span>
    <span class="sym">{</span>FILE tell<span class="sym">(</span>offset<span class="sym">:</span>RemainingBytes<span class="sym">)}</span>
    <span class="sym">{</span>ReadBuffer RemainingBytes<span class="sym">}</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

<span class="kwb">in</span>
  <span class="sym">{</span>ReverseFile <span class="sym">{</span>New TextFile_ init<span class="sym">(</span>name<span class="sym">:</span>stdin flags<span class="sym">:[</span>read text<span class="sym">])}</span> <span class="num">4096</span><span class="sym">}</span>
  <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>

