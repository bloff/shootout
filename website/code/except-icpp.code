<span class="slc">// -*- mode: c++ -*-</span>
<span class="slc">// $Id: except-icpp.code,v 1.10 2006-09-20 05:51:11 bfulgham Exp $</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// from Bill Lear</span>

<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;cstdlib&gt;</span>
<span class="dir">#include &lt;cstdio&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwb">size_t</span> HI <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwb">size_t</span> LO <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

<span class="kwc">class</span> Hi_exception <span class="sym">{</span>
<span class="kwc">public</span><span class="sym">:</span>
    <span class="kwc">explicit</span> <span class="kwd">Hi_exception</span><span class="sym">(</span><span class="kwb">size_t</span> _n<span class="sym">) :</span> <span class="kwd">n</span><span class="sym">(</span>_n<span class="sym">) {}</span>
    <span class="kwb">const char</span><span class="sym">*</span> <span class="kwd">what</span><span class="sym">() {</span> <span class="kwd">sprintf</span><span class="sym">(</span>N<span class="sym">,</span> <span class="str">&quot;%d&quot;</span><span class="sym">,</span> n<span class="sym">);</span> <span class="kwa">return</span> N<span class="sym">; }</span>
<span class="kwc">private</span><span class="sym">:</span>
    <span class="kwb">size_t</span> n<span class="sym">;</span> <span class="kwb">char</span> N<span class="sym">[</span><span class="num">8</span><span class="sym">];</span>
<span class="sym">};</span>

<span class="kwc">class</span> Lo_exception <span class="sym">{</span>
<span class="kwc">public</span><span class="sym">:</span>
    <span class="kwc">explicit</span> <span class="kwd">Lo_exception</span><span class="sym">(</span><span class="kwb">size_t</span> _n<span class="sym">) :</span> <span class="kwd">n</span><span class="sym">(</span>_n<span class="sym">) {}</span>
    <span class="kwb">const char</span><span class="sym">*</span> <span class="kwd">what</span><span class="sym">() {</span> <span class="kwd">sprintf</span><span class="sym">(</span>N<span class="sym">,</span> <span class="str">&quot;%d&quot;</span><span class="sym">,</span> n<span class="sym">);</span> <span class="kwa">return</span> N<span class="sym">; }</span>
<span class="kwc">private</span><span class="sym">:</span>
    <span class="kwb">size_t</span> n<span class="sym">;</span> <span class="kwb">char</span> N<span class="sym">[</span><span class="num">8</span><span class="sym">];</span>
<span class="sym">};</span>

<span class="kwb">void</span> <span class="kwd">blowup</span><span class="sym">(</span><span class="kwb">size_t</span> num<span class="sym">) {</span>
    <span class="kwa">if</span> <span class="sym">(</span>num <span class="sym">%</span> <span class="num">2</span><span class="sym">) {</span>
        <span class="kwa">throw</span> <span class="kwd">Lo_exception</span><span class="sym">(</span>num<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">throw</span> <span class="kwd">Hi_exception</span><span class="sym">(</span>num<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">lo_function</span><span class="sym">(</span><span class="kwb">size_t</span> num<span class="sym">) {</span>
    <span class="kwa">try</span> <span class="sym">{</span>
        <span class="kwd">blowup</span><span class="sym">(</span>num<span class="sym">);</span>
    <span class="sym">}</span> <span class="kwa">catch</span><span class="sym">(</span><span class="kwb">const</span> Lo_exception<span class="sym">&amp;</span> ex<span class="sym">) {</span>
        <span class="sym">++</span>LO<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">hi_function</span><span class="sym">(</span><span class="kwb">size_t</span> num<span class="sym">) {</span>
    <span class="kwa">try</span> <span class="sym">{</span>
        <span class="kwd">lo_function</span><span class="sym">(</span>num<span class="sym">);</span>
    <span class="sym">}</span> <span class="kwa">catch</span><span class="sym">(</span><span class="kwb">const</span> Hi_exception<span class="sym">&amp;</span> ex<span class="sym">) {</span>
        <span class="sym">++</span>HI<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">some_function</span><span class="sym">(</span><span class="kwb">size_t</span> num<span class="sym">) {</span>
    <span class="kwa">try</span> <span class="sym">{</span>
        <span class="kwd">hi_function</span><span class="sym">(</span>num<span class="sym">);</span>
    <span class="sym">}</span> <span class="kwa">catch</span> <span class="sym">(...) {</span>
        cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;We shouldn't get here</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span> <span class="kwd">exit</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">int</span>
<span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> argv<span class="sym">[]) {</span>
    <span class="kwb">size_t</span> NUM <span class="sym">= (</span>argc <span class="sym">==</span> <span class="num">2</span> ? <span class="sym">(</span><span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) &lt;</span> <span class="num">1</span> ? <span class="num">1</span> <span class="sym">:</span> <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])):</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwa">while</span> <span class="sym">(</span>NUM<span class="sym">--) {</span>
        <span class="kwd">some_function</span><span class="sym">(</span>NUM<span class="sym">);</span>
    <span class="sym">}</span>
    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Exceptions: HI=&quot;</span> <span class="sym">&lt;&lt;</span> HI <span class="sym">&lt;&lt;</span> <span class="str">&quot; / &quot;</span> <span class="sym">&lt;&lt;</span> <span class="str">&quot;LO=&quot;</span> <span class="sym">&lt;&lt;</span> LO <span class="sym">&lt;&lt;</span> endl<span class="sym">;</span>
<span class="sym">}</span>
