<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- $Id: moments-ghc.code,v 1.1 2004-11-02 08:52:37 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">-- http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">-- from Brian Gregor
</FONT></I><I><FONT COLOR="#B22222">-- with modifications by Max
</FONT></I><I><FONT COLOR="#B22222">-- with further modifications by JP Bernardy
</FONT></I><I><FONT COLOR="#B22222">-- replace stock &quot;read&quot; with faster version by Greg Buchholz
</FONT></I><I><FONT COLOR="#B22222">-- compile with: ghc -O2 -o moments moments.hs
</FONT></I><I><FONT COLOR="#B22222">-- for better performance run with increased stack and heap
</FONT></I><I><FONT COLOR="#B22222">-- i.e. ./moments +RTS -K2M -H45M &lt; Input
</FONT></I>
<B><FONT COLOR="#A020F0">import</FONT></B> Numeric
<B><FONT COLOR="#A020F0">import</FONT></B> List(sort)
<B><FONT COLOR="#A020F0">import</FONT></B> Char( ord )

main = interact $ unlines . answers . map fast_read . lines

<I><FONT COLOR="#B22222">-- compute out the answers
</FONT></I>answers <B><FONT COLOR="#228B22">:: [Double] -&gt; [String]
</FONT></B>answers nums = [<B><FONT COLOR="#BC8F8F">&quot;n:                  &quot;</FONT></B> ++ show (length nums),
                <B><FONT COLOR="#BC8F8F">&quot;median:             &quot;</FONT></B> ++ (showFFloat (Just 6) (median nums n) <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>),
                <B><FONT COLOR="#BC8F8F">&quot;mean:               &quot;</FONT></B> ++ (showFFloat (Just 6) mean <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>),
                <B><FONT COLOR="#BC8F8F">&quot;average_deviation:  &quot;</FONT></B> ++ (showFFloat (Just 6) avg_dev <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>),
                <B><FONT COLOR="#BC8F8F">&quot;standard_deviation: &quot;</FONT></B> ++ (showFFloat (Just 6) std_dev <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>),
                <B><FONT COLOR="#BC8F8F">&quot;variance:           &quot;</FONT></B> ++ (showFFloat (Just 6) var <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>),
                <B><FONT COLOR="#BC8F8F">&quot;skew:               &quot;</FONT></B> ++ (showFFloat (Just 6) skew <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>),
                <B><FONT COLOR="#BC8F8F">&quot;kurtosis:           &quot;</FONT></B> ++ (showFFloat (Just 6) kurt <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>)]
    <B><FONT COLOR="#A020F0">where</FONT></B> n =  fromIntegral (length nums)
          mean = sum nums / n
          deviation = [x-mean | x &lt;- nums]
          avg_dev = sum (map abs deviation) / n
          var = sum [x**2 | x &lt;- deviation] / (n-1)
          std_dev =  sqrt var
          skew = sum [x**3 | x &lt;- deviation] / (n*var*std_dev)
          kurt = sum [x**4 | x &lt;- deviation] / (n*var*var) - 3.0

<I><FONT COLOR="#B22222">-- calculate the median
</FONT></I>median nums n = mid (sort nums)
    <B><FONT COLOR="#A020F0">where</FONT></B> mid x
              | odd (length x) = x!! midpt
              | otherwise       = ((x!!(midpt-1)) + (x!!midpt)) / 2.0
          midpt = floor (n/2)

<I><FONT COLOR="#B22222">--Faster &quot;read&quot; for doubles
</FONT></I>fast_read (<B><FONT COLOR="#BC8F8F">'-'</FONT></B>:xs) = -1 * fast_read(xs)
fast_read      xs  = ip + frac
                <B><FONT COLOR="#A020F0">where</FONT></B>
                    (i,f) = break (== <B><FONT COLOR="#BC8F8F">'.'</FONT></B>) xs
                    ip    = foldl (mult_acc  10) 0 i
                    frac  = foldl (mult_acc 0.1) 0 f
                    mult_acc val x y = x*val + fromIntegral(ord(y)-ord(<B><FONT COLOR="#BC8F8F">'0'</FONT></B>)) </pre></td></tr></table>
