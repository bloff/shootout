<span class="slc">;;; $Id: objinst-chicken.code,v 1.5 2005-04-13 15:29:17 bfulgham Exp $
</span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span>
<span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">))

(</span>require<span class="sym">-</span>extension meroon<span class="sym">)

(</span>define<span class="sym">-</span>generic <span class="sym">(</span>activate<span class="sym">! (</span>t<span class="sym">)))

(</span>define <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>bool b<span class="sym">)
   (</span>display <span class="sym">(</span><span class="kwa">if</span> b <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)))

(</span>define<span class="sym">-</span>class Toggle Object <span class="sym">(</span>state<span class="sym">))

(</span>define<span class="sym">-</span>class Nth<span class="sym">-</span>toggle Toggle <span class="sym">(</span>count<span class="sym">-</span><span class="kwa">max</span> counter<span class="sym">))

(</span>define<span class="sym">-</span>method <span class="sym">(</span>activate<span class="sym">! (</span>t Toggle<span class="sym">))
  (</span>Toggle<span class="sym">-</span>state<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> t <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>Toggle<span class="sym">-</span>state t<span class="sym">)))
</span>  t<span class="sym">)

(</span>define<span class="sym">-</span>method <span class="sym">(</span>activate<span class="sym">! (</span>n<span class="sym">-</span>t Nth<span class="sym">-</span>toggle<span class="sym">))
  (</span>let <span class="sym">((</span>counter <span class="sym">(+</span> <span class="num">1</span> <span class="sym">(</span>Nth<span class="sym">-</span>toggle<span class="sym">-</span>counter n<span class="sym">-</span>t<span class="sym">))))
    (</span>Nth<span class="sym">-</span>toggle<span class="sym">-</span>counter<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> n<span class="sym">-</span>t counter<span class="sym">)
    (</span><span class="kwa">if</span> <span class="sym">(&gt;=</span> counter <span class="sym">(</span>Nth<span class="sym">-</span>toggle<span class="sym">-</span>count<span class="sym">-</span><span class="kwa">max</span> n<span class="sym">-</span>t<span class="sym">))
	(</span>begin <span class="sym">(</span>Toggle<span class="sym">-</span>state<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> n<span class="sym">-</span>t <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>Toggle<span class="sym">-</span>state n<span class="sym">-</span>t<span class="sym">)))
	       (</span>Nth<span class="sym">-</span>toggle<span class="sym">-</span>counter<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> n<span class="sym">-</span>t <span class="num">0</span><span class="sym">)))
</span>    n<span class="sym">-</span>t<span class="sym">))

(</span>define <span class="sym">(</span>main #<span class="sym">!</span>optional <span class="sym">(</span>n <span class="str">&quot;1&quot;</span><span class="sym">))
  (</span>let <span class="sym">((</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number n<span class="sym">)))
    (</span>let <span class="sym">((</span>tog <span class="sym">(</span>make<span class="sym">-</span>Toggle #t<span class="sym">)))
      (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))) ((=</span> i <span class="num">5</span><span class="sym">))
	(</span><span class="kwa">print</span><span class="sym">-</span>bool <span class="sym">(</span>Toggle<span class="sym">-</span>state <span class="sym">(</span>activate<span class="sym">!</span> tog<span class="sym">)))))
    (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))) ((=</span> i n<span class="sym">))
      (</span>make<span class="sym">-</span>Toggle #t<span class="sym">))
    (</span>newline<span class="sym">)
    (</span>let <span class="sym">((</span>ntog <span class="sym">(</span>make<span class="sym">-</span>Nth<span class="sym">-</span>toggle #t <span class="num">3 0</span><span class="sym">)))
      (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))) ((=</span> i <span class="num">8</span><span class="sym">))
	(</span><span class="kwa">print</span><span class="sym">-</span>bool <span class="sym">(</span>Toggle<span class="sym">-</span>state <span class="sym">(</span>activate<span class="sym">!</span> ntog<span class="sym">)))))
    (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))) ((=</span> i n<span class="sym">))
      (</span>make<span class="sym">-</span>Nth<span class="sym">-</span>toggle #t <span class="num">3 0</span><span class="sym">))))

            (</span><span class="kwa">apply</span> main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>
