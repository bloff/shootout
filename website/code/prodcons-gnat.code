<span class="slc">-- $Id: prodcons-gnat.code,v 1.11 2005-09-20 05:16:25 bfulgham Exp $
</span><span class="slc">-- http://dada.perl.it/shootout/
</span><span class="slc">-- Ada 95 code by C.C.
</span>
<span class="kwa">with</span> Ada.Strings.Fixed<span class="sym">,</span> Ada.Command_Line<span class="sym">,</span> Text_IO<span class="sym">;

</span><span class="kwa">procedure</span> ProdCons <span class="kwa">is

   type</span> Data_Type <span class="kwa">is new</span> <span class="kwb">Integer</span><span class="sym">;
</span>   End_Of_Data    <span class="sym">:</span> <span class="kwa">constant</span> Data_Type <span class="sym">:=</span> Data_Type<span class="sym">'</span>First<span class="sym">;

</span>   <span class="kwa">protected</span> Queue <span class="kwa">is
      entry</span> Put <span class="sym">(</span>Data <span class="sym">:</span> Data_Type<span class="sym">);
</span>      <span class="kwa">entry</span> Get <span class="sym">(</span>Data_Out <span class="sym">:</span> <span class="kwa">out</span> Data_Type<span class="sym">);
</span>   <span class="kwa">private
</span>      Count          <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>      Buffer         <span class="sym">:</span> Data_Type<span class="sym">;
</span>   <span class="kwa">end</span> Queue<span class="sym">;

</span>   <span class="kwa">protected body</span> Queue <span class="kwa">is
      entry</span> Put <span class="sym">(</span>Data <span class="sym">:</span> Data_Type<span class="sym">)
</span>         <span class="kwa">when</span> Count <span class="sym">=</span> <span class="num">0</span> <span class="kwa">is
      begin
</span>         Buffer <span class="sym">:=</span> Data<span class="sym">;
</span>         Count <span class="sym">:=</span> Count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>      <span class="kwa">end</span> Put<span class="sym">;

</span>      <span class="kwa">entry</span> Get <span class="sym">(</span>Data_Out <span class="sym">:</span> <span class="kwa">out</span> Data_Type<span class="sym">)
</span>         <span class="kwa">when</span> Count <span class="sym">/=</span> <span class="num">0</span> <span class="kwa">is
      begin
</span>         Data_Out <span class="sym">:=</span> Buffer<span class="sym">;
</span>         Count <span class="sym">:=</span> Count <span class="num">- 1</span><span class="sym">;
</span>      <span class="kwa">end</span> Get<span class="sym">;
</span>   <span class="kwa">end</span> Queue<span class="sym">;

</span>   Produced<span class="sym">,</span> Consumed <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;

</span>   <span class="kwa">task type</span> Producer_Task <span class="sym">(</span>N <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">);
</span>   <span class="kwa">task type</span> Consumer_Task <span class="sym">(</span>N <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">);

</span>   <span class="kwa">task body</span> Producer_Task <span class="kwa">is
   begin
      for</span> Data_K <span class="kwa">in</span> <span class="num">1</span> .. Data_Type <span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">loop
</span>         Queue.Put <span class="sym">(</span>Data <span class="sym">=&gt;</span> Data_K<span class="sym">);
</span>         Produced <span class="sym">:=</span> Produced <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>      Queue.Put <span class="sym">(</span>Data <span class="sym">=&gt;</span> End_Of_Data<span class="sym">);
</span>   <span class="kwa">end</span> Producer_Task<span class="sym">;

</span>   <span class="kwa">task body</span> Consumer_Task <span class="kwa">is
</span>      Data        <span class="sym">:</span> Data_Type<span class="sym">;
</span>   <span class="kwa">begin
      loop
</span>         Queue.Get <span class="sym">(</span>Data_Out <span class="sym">=&gt;</span> Data<span class="sym">);
</span>         <span class="kwa">exit when</span> Data <span class="sym">=</span> End_Of_Data<span class="sym">;
</span>         Consumed <span class="sym">:=</span> Consumed <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>      <span class="kwa">end loop</span><span class="sym">;
</span>   <span class="kwa">end</span> Consumer_Task<span class="sym">;

</span>   <span class="kwa">function</span> L_Trim <span class="sym">(</span>Source <span class="sym">:</span> <span class="kwb">String</span><span class="sym">;</span> Side <span class="sym">:</span> Ada.Strings.Trim_End <span class="sym">:=
</span>               Ada.Strings.Left<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">String</span> <span class="kwa">renames</span> Ada.Strings.Fixed.Trim<span class="sym">;
</span>   N        <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwa">begin
   begin
</span>      N <span class="sym">:=</span> <span class="kwb">Natural</span><span class="sym">'</span>Value <span class="sym">(</span>Ada.Command_Line.Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>   <span class="kwa">exception
      when</span> Constraint_Error <span class="sym">=&gt;</span> <span class="kwa">null</span><span class="sym">;
</span>   <span class="kwa">end</span><span class="sym">;
</span>   <span class="kwa">declare
</span>      Producer    <span class="sym">:</span> Producer_Task <span class="sym">(</span>N <span class="sym">=&gt;</span> N<span class="sym">);
</span>      Consumer    <span class="sym">:</span> Consumer_Task <span class="sym">(</span>N <span class="sym">=&gt;</span> N<span class="sym">);
</span>   <span class="kwa">begin
      null</span><span class="sym">;
</span>   <span class="kwa">end</span><span class="sym">;
</span>   Text_IO.Put_Line <span class="sym">(</span>L_Trim <span class="sym">(</span><span class="kwb">Natural</span><span class="sym">'</span>Image <span class="sym">(</span>Produced<span class="sym">)) &amp;
</span>            <span class="kwb">Natural</span><span class="sym">'</span>Image <span class="sym">(</span>Consumed<span class="sym">));
</span><span class="kwa">end</span> ProdCons<span class="sym">;
</span>
