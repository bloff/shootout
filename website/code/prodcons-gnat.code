<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- $Id: prodcons-gnat.code,v 1.1 2004-11-02 08:52:39 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">-- http://dada.perl.it/shootout/
</FONT></I><I><FONT COLOR="#B22222">-- Ada 95 code by C.C.
</FONT></I>
<B><FONT COLOR="#A020F0">with</FONT></B> Ada.Strings.Fixed, Ada.Command_Line, Text_IO;

<B><FONT COLOR="#A020F0">procedure</FONT></B> ProdCons <B><FONT COLOR="#A020F0">is</FONT></B>

   <B><FONT COLOR="#A020F0">type</FONT></B> Data_Type <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">new</FONT></B> Integer;
   End_Of_Data    : <B><FONT COLOR="#A020F0">constant</FONT></B> Data_Type := Data_Type'First;

   <B><FONT COLOR="#A020F0">protected</FONT></B> Queue <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">entry</FONT></B> Put (Data : Data_Type);
      <B><FONT COLOR="#A020F0">entry</FONT></B> Get (Data_Out : <B><FONT COLOR="#A020F0">out</FONT></B> Data_Type);
   <B><FONT COLOR="#A020F0">private</FONT></B>
      Count          : Natural := 0;
      Buffer         : Data_Type;
   <B><FONT COLOR="#A020F0">end</FONT></B> Queue;

   <B><FONT COLOR="#A020F0">protected</FONT></B> <B><FONT COLOR="#A020F0">body</FONT></B> Queue <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">entry</FONT></B> Put (Data : Data_Type)
         <B><FONT COLOR="#A020F0">when</FONT></B> Count = 0 <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         Buffer := Data;
         Count := Count + 1;
      <B><FONT COLOR="#A020F0">end</FONT></B> Put;

      <B><FONT COLOR="#A020F0">entry</FONT></B> Get (Data_Out : <B><FONT COLOR="#A020F0">out</FONT></B> Data_Type)
         <B><FONT COLOR="#A020F0">when</FONT></B> Count /= 0 <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         Data_Out := Buffer;
         Count := Count - 1;
      <B><FONT COLOR="#A020F0">end</FONT></B> Get;
   <B><FONT COLOR="#A020F0">end</FONT></B> Queue;

   Produced, Consumed : Natural := 0;

   <B><FONT COLOR="#A020F0">task</FONT></B> <B><FONT COLOR="#A020F0">type</FONT></B> Producer_Task (N : Natural);
   <B><FONT COLOR="#A020F0">task</FONT></B> <B><FONT COLOR="#A020F0">type</FONT></B> Consumer_Task (N : Natural);

   <B><FONT COLOR="#A020F0">task</FONT></B> <B><FONT COLOR="#A020F0">body</FONT></B> Producer_Task <B><FONT COLOR="#A020F0">is</FONT></B>
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      <B><FONT COLOR="#A020F0">for</FONT></B> Data_K <B><FONT COLOR="#A020F0">in</FONT></B> 1 .. Data_Type (N) <B><FONT COLOR="#A020F0">loop</FONT></B>
         Queue.Put (Data =&gt; Data_K);
         Produced := Produced + 1;
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
      Queue.Put (Data =&gt; End_Of_Data);
   <B><FONT COLOR="#A020F0">end</FONT></B> Producer_Task;

   <B><FONT COLOR="#A020F0">task</FONT></B> <B><FONT COLOR="#A020F0">body</FONT></B> Consumer_Task <B><FONT COLOR="#A020F0">is</FONT></B>
      Data        : Data_Type;
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      <B><FONT COLOR="#A020F0">loop</FONT></B>
         Queue.Get (Data_Out =&gt; Data);
         <B><FONT COLOR="#A020F0">exit</FONT></B> <B><FONT COLOR="#A020F0">when</FONT></B> Data = End_Of_Data;
         Consumed := Consumed + 1;
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
   <B><FONT COLOR="#A020F0">end</FONT></B> Consumer_Task;

   <B><FONT COLOR="#A020F0">function</FONT></B> L_Trim (Source : String; Side : Ada.Strings.Trim_End :=
               Ada.Strings.Left) <B><FONT COLOR="#A020F0">return</FONT></B> String <B><FONT COLOR="#A020F0">renames</FONT></B> Ada.Strings.Fixed.Trim;
   N        : Natural := 0;
<B><FONT COLOR="#A020F0">begin</FONT></B>
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      N := Natural'Value (Ada.Command_Line.Argument (1));
   <B><FONT COLOR="#A020F0">exception</FONT></B>
      <B><FONT COLOR="#A020F0">when</FONT></B> Constraint_Error =&gt; <B><FONT COLOR="#A020F0">null</FONT></B>;
   <B><FONT COLOR="#A020F0">end</FONT></B>;
   <B><FONT COLOR="#A020F0">declare</FONT></B>
      Producer    : Producer_Task (N =&gt; N);
      Consumer    : Consumer_Task (N =&gt; N);
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      <B><FONT COLOR="#A020F0">null</FONT></B>;
   <B><FONT COLOR="#A020F0">end</FONT></B>;
   Text_IO.Put_Line (L_Trim (Natural'Image (Produced)) &amp;
            Natural'Image (Consumed));
<B><FONT COLOR="#A020F0">end</FONT></B> ProdCons;
</pre></td></tr></table>
