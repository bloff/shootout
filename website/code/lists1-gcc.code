<span class="line">    1 </span><span class="com">/* -*- mode: c -*-
</span><span class="line">    2 </span><span class="com"> * $Id: lists1-gcc.code,v 1.3 2004-11-11 07:13:59 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> */</span>
<span class="line">    5 </span>
<span class="line">    6 </span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="line">    7 </span><span class="dir"></span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="line">    8 </span><span class="dir"></span><span class="dir">#include &lt;string.h&gt;
</span><span class="line">    9 </span><span class="dir"></span><span class="dir">#include &lt;unistd.h&gt;
</span><span class="line">   10 </span><span class="dir"></span>
<span class="line">   11 </span><span class="dir">#define SIZE 10000
</span><span class="line">   12 </span><span class="dir"></span>
<span class="line">   13 </span><span class="slc">// a simple Single Linked List
</span><span class="line">   14 </span><span class="slc"></span><span class="slc">// the head node is special, it's val is length of list
</span><span class="line">   15 </span><span class="slc"></span><span class="kwc">typedef</span> <span class="kwb">struct</span> LL <span class="sym">{
</span><span class="line">   16 </span><span class="sym"></span>    <span class="kwb">int</span> val<span class="sym">;
</span><span class="line">   17 </span><span class="sym"></span>    <span class="kwb">struct</span> LL <span class="sym">*</span>next<span class="sym">;</span>        <span class="com">/* points to next or head (if at tail) */</span>
<span class="line">   18 </span><span class="sym">}</span> LL<span class="sym">;
</span><span class="line">   19 </span><span class="sym">
</span><span class="line">   20 </span><span class="sym"></span><span class="kwc">inline</span> <span class="kwb">int</span> list_length<span class="sym">(</span>LL <span class="sym">*</span>head<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span>head<span class="sym">-&gt;</span>val<span class="sym">); }
</span><span class="line">   21 </span><span class="sym"></span><span class="kwc">inline</span> <span class="kwb">int</span> list_empty<span class="sym">(</span>LL <span class="sym">*</span>head<span class="sym">)  {</span> <span class="kwa">return</span><span class="sym">(</span>list_length<span class="sym">(</span>head<span class="sym">) ==</span> <span class="num">0</span><span class="sym">); }
</span><span class="line">   22 </span><span class="sym"></span><span class="kwc">inline</span> LL<span class="sym">*</span> list_first<span class="sym">(</span>LL <span class="sym">*</span>head<span class="sym">)  {</span> <span class="kwa">return</span><span class="sym">(</span>head<span class="sym">-&gt;</span>next<span class="sym">); }
</span><span class="line">   23 </span><span class="sym">
</span><span class="line">   24 </span><span class="sym"></span><span class="kwb">void</span> list_push_head<span class="sym">(</span>LL <span class="sym">*</span>head<span class="sym">,</span> LL <span class="sym">*</span>item<span class="sym">) {
</span><span class="line">   25 </span><span class="sym"></span>    LL <span class="sym">*</span>next <span class="sym">=</span> head<span class="sym">-&gt;</span>next<span class="sym">;
</span><span class="line">   26 </span><span class="sym"></span>    head<span class="sym">-&gt;</span>next <span class="sym">=</span> item<span class="sym">;
</span><span class="line">   27 </span><span class="sym"></span>    item<span class="sym">-&gt;</span>next <span class="sym">=</span> next<span class="sym">;
</span><span class="line">   28 </span><span class="sym"></span>    head<span class="sym">-&gt;</span>val<span class="sym">++;
</span><span class="line">   29 </span><span class="sym">}
</span><span class="line">   30 </span><span class="sym">
</span><span class="line">   31 </span><span class="sym"></span>LL <span class="sym">*</span>list_pop_head<span class="sym">(</span>LL <span class="sym">*</span>head<span class="sym">) {
</span><span class="line">   32 </span><span class="sym"></span>    LL <span class="sym">*</span>next<span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>list_empty<span class="sym">(</span>head<span class="sym">))</span> <span class="kwa">return</span><span class="sym">(</span>NULL<span class="sym">);
</span><span class="line">   34 </span><span class="sym"></span>    next <span class="sym">=</span> head<span class="sym">-&gt;</span>next<span class="sym">;
</span><span class="line">   35 </span><span class="sym"></span>    head<span class="sym">-&gt;</span>next <span class="sym">=</span> next<span class="sym">-&gt;</span>next<span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span>    head<span class="sym">-&gt;</span>val<span class="sym">--;
</span><span class="line">   37 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span>next<span class="sym">);
</span><span class="line">   38 </span><span class="sym">}
</span><span class="line">   39 </span><span class="sym">
</span><span class="line">   40 </span><span class="sym"></span>LL <span class="sym">*</span>list_new_item<span class="sym">(</span><span class="kwb">int</span> v<span class="sym">) {
</span><span class="line">   41 </span><span class="sym"></span>    LL <span class="sym">*</span>l <span class="sym">= (</span>LL <span class="sym">*)</span>malloc<span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span>LL<span class="sym">));
</span><span class="line">   42 </span><span class="sym"></span>    l<span class="sym">-&gt;</span>next <span class="sym">=</span> NULL<span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>    l<span class="sym">-&gt;</span>val <span class="sym">=</span> v<span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span>l<span class="sym">);
</span><span class="line">   45 </span><span class="sym">}
</span><span class="line">   46 </span><span class="sym">
</span><span class="line">   47 </span><span class="sym"></span><span class="kwc">inline</span> LL<span class="sym">*</span> list_create<span class="sym">()  {</span> <span class="kwa">return</span><span class="sym">(</span>list_new_item<span class="sym">(</span><span class="num">0</span><span class="sym">)); }
</span><span class="line">   48 </span><span class="sym">
</span><span class="line">   49 </span><span class="sym"></span><span class="kwb">void</span> list_free <span class="sym">(</span>LL<span class="sym">*</span> head<span class="sym">) {
</span><span class="line">   50 </span><span class="sym"></span>    LL <span class="sym">*</span>p<span class="sym">, *</span>tmp <span class="sym">=</span> head<span class="sym">;
</span><span class="line">   51 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>head <span class="sym">==</span> NULL<span class="sym">)</span> <span class="kwa">return</span><span class="sym">;
</span><span class="line">   52 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>head<span class="sym">-&gt;</span>next <span class="sym">!=</span> NULL<span class="sym">) {
</span><span class="line">   53 </span><span class="sym"></span>        <span class="kwa">for</span> <span class="sym">(</span>p<span class="sym">=</span>head<span class="sym">-&gt;</span>next<span class="sym">;</span> p<span class="sym">-&gt;</span>next <span class="sym">!=</span> NULL<span class="sym">;</span> p<span class="sym">=</span>p<span class="sym">-&gt;</span>next<span class="sym">) {
</span><span class="line">   54 </span><span class="sym"></span>            free<span class="sym">(</span>tmp<span class="sym">);
</span><span class="line">   55 </span><span class="sym"></span>            tmp <span class="sym">=</span> p<span class="sym">;
</span><span class="line">   56 </span><span class="sym">        }
</span><span class="line">   57 </span><span class="sym">    }
</span><span class="line">   58 </span><span class="sym"></span>    free<span class="sym">(</span>tmp<span class="sym">);
</span><span class="line">   59 </span><span class="sym">}
</span><span class="line">   60 </span><span class="sym">
</span><span class="line">   61 </span><span class="sym"></span><span class="kwb">void</span> list_append <span class="sym">(</span>LL<span class="sym">*</span> head_1<span class="sym">,</span> LL<span class="sym">*</span> head_2<span class="sym">) {
</span><span class="line">   62 </span><span class="sym"></span>    LL <span class="sym">*</span>p<span class="sym">;
</span><span class="line">   63 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>p<span class="sym">=</span>head_1<span class="sym">;</span> p<span class="sym">-&gt;</span>next <span class="sym">!=</span> NULL<span class="sym">;</span> p<span class="sym">=</span>p<span class="sym">-&gt;</span>next<span class="sym">) ;
</span><span class="line">   64 </span><span class="sym"></span>    p<span class="sym">-&gt;</span>next <span class="sym">=</span> head_2<span class="sym">-&gt;</span>next<span class="sym">;
</span><span class="line">   65 </span><span class="sym"></span>    head_2<span class="sym">-&gt;</span>next <span class="sym">=</span> NULL<span class="sym">;
</span><span class="line">   66 </span><span class="sym"></span>    head_1<span class="sym">-&gt;</span>val <span class="sym">+=</span> head_2<span class="sym">-&gt;</span>val<span class="sym">;
</span><span class="line">   67 </span><span class="sym"></span>    head_2<span class="sym">-&gt;</span>val <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   68 </span><span class="sym">}
</span><span class="line">   69 </span><span class="sym">
</span><span class="line">   70 </span><span class="sym"></span><span class="kwb">int</span> list_member<span class="sym">(</span><span class="kwb">int</span> item<span class="sym">,</span> LL<span class="sym">*</span> head<span class="sym">) {
</span><span class="line">   71 </span><span class="sym"></span>    LL<span class="sym">*</span> p <span class="sym">=</span> head<span class="sym">-&gt;</span>next<span class="sym">;
</span><span class="line">   72 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>p<span class="sym">=</span>head<span class="sym">;</span> p <span class="sym">!=</span> NULL<span class="sym">;</span> p<span class="sym">=</span>p<span class="sym">-&gt;</span>next<span class="sym">) {
</span><span class="line">   73 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>p<span class="sym">-&gt;</span>val <span class="sym">==</span> item<span class="sym">)</span> <span class="kwa">return</span><span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   74 </span><span class="sym">    }
</span><span class="line">   75 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">   76 </span><span class="sym">}
</span><span class="line">   77 </span><span class="sym">
</span><span class="line">   78 </span><span class="sym"></span><span class="kwb">void</span> list_reverse <span class="sym">(</span>LL <span class="sym">*</span>head<span class="sym">) {
</span><span class="line">   79 </span><span class="sym"></span>    LL <span class="sym">*</span>prev<span class="sym">, *</span>p<span class="sym">, *</span>tmp<span class="sym">, *</span>first <span class="sym">=</span> list_first<span class="sym">(</span>head<span class="sym">);
</span><span class="line">   80 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>first <span class="sym">!=</span> NULL<span class="sym">) {
</span><span class="line">   81 </span><span class="sym"></span>        prev <span class="sym">=</span> NULL<span class="sym">;
</span><span class="line">   82 </span><span class="sym"></span>        p <span class="sym">=</span> first<span class="sym">;
</span><span class="line">   83 </span><span class="sym"></span>        <span class="kwa">while</span> <span class="sym">((</span>tmp <span class="sym">=</span> p<span class="sym">-&gt;</span>next<span class="sym">) !=</span> NULL<span class="sym">) {
</span><span class="line">   84 </span><span class="sym"></span>            p<span class="sym">-&gt;</span>next <span class="sym">=</span> prev<span class="sym">;
</span><span class="line">   85 </span><span class="sym"></span>            prev <span class="sym">=</span> p<span class="sym">;
</span><span class="line">   86 </span><span class="sym"></span>            p <span class="sym">=</span> tmp<span class="sym">;
</span><span class="line">   87 </span><span class="sym">        }
</span><span class="line">   88 </span><span class="sym"></span>        p<span class="sym">-&gt;</span>next <span class="sym">=</span> prev<span class="sym">;
</span><span class="line">   89 </span><span class="sym"></span>        head<span class="sym">-&gt;</span>next <span class="sym">=</span> p<span class="sym">;
</span><span class="line">   90 </span><span class="sym">    }
</span><span class="line">   91 </span><span class="sym">}
</span><span class="line">   92 </span><span class="sym">
</span><span class="line">   93 </span><span class="sym"></span><span class="kwb">int</span> list_last<span class="sym">(</span>LL <span class="sym">*</span>head<span class="sym">) {
</span><span class="line">   94 </span><span class="sym"></span>    LL<span class="sym">*</span> p<span class="sym">;
</span><span class="line">   95 </span><span class="sym"></span>    <span class="kwa">if</span> <span class="sym">(</span>head <span class="sym">==</span> NULL<span class="sym">)</span> <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">   96 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>p<span class="sym">=</span>head<span class="sym">;</span> p<span class="sym">-&gt;</span>next <span class="sym">!=</span> NULL<span class="sym">;</span> p<span class="sym">=</span>p<span class="sym">-&gt;</span>next<span class="sym">) ;
</span><span class="line">   97 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span>p<span class="sym">-&gt;</span>val<span class="sym">);
</span><span class="line">   98 </span><span class="sym">}
</span><span class="line">   99 </span><span class="sym">
</span><span class="line">  100 </span><span class="sym"></span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span><span class="line">  101 </span><span class="sym"></span>    <span class="kwb">int</span> i<span class="sym">,</span> mid<span class="sym">,</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span><span class="line">  102 </span><span class="sym"></span>    LL <span class="sym">*</span>p<span class="sym">, *</span>tmp<span class="sym">, *</span>A<span class="sym">, *</span>B<span class="sym">;
</span><span class="line">  103 </span><span class="sym">
</span><span class="line">  104 </span><span class="sym"></span>    <span class="slc">// create list (A) of integers from 1 through N
</span><span class="line">  105 </span><span class="slc"></span>    A <span class="sym">=</span> list_create<span class="sym">();
</span><span class="line">  106 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span>n<span class="sym">;</span> i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">--)</span> list_push_head<span class="sym">(</span>A<span class="sym">,</span> list_new_item<span class="sym">(</span>i<span class="sym">));
</span><span class="line">  107 </span><span class="sym">
</span><span class="line">  108 </span><span class="sym"></span>    <span class="slc">// create empty list B
</span><span class="line">  109 </span><span class="slc"></span>    B <span class="sym">=</span> list_create<span class="sym">();
</span><span class="line">  110 </span><span class="sym">
</span><span class="line">  111 </span><span class="sym"></span>    <span class="slc">// move each individual item from A to B, in a loop, reversing order
</span><span class="line">  112 </span><span class="slc"></span>    <span class="kwa">while</span> <span class="sym">(!</span>list_empty<span class="sym">(</span>A<span class="sym">))</span> list_push_head<span class="sym">(</span>B<span class="sym">,</span> list_pop_head<span class="sym">(</span>A<span class="sym">));
</span><span class="line">  113 </span><span class="sym">
</span><span class="line">  114 </span><span class="sym"></span>    <span class="slc">// print first 2 items in B
</span><span class="line">  115 </span><span class="slc"></span>    printf<span class="sym">(</span><span class="str">&quot;%d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> B<span class="sym">-&gt;</span>next<span class="sym">-&gt;</span>val<span class="sym">,</span> B<span class="sym">-&gt;</span>next<span class="sym">-&gt;</span>next<span class="sym">-&gt;</span>val<span class="sym">);
</span><span class="line">  116 </span><span class="sym">
</span><span class="line">  117 </span><span class="sym"></span>    <span class="slc">// reverse B (can be done in place)
</span><span class="line">  118 </span><span class="slc"></span>    list_reverse<span class="sym">(</span>B<span class="sym">);
</span><span class="line">  119 </span><span class="sym">
</span><span class="line">  120 </span><span class="sym"></span>    <span class="slc">// is 0 a member of B?
</span><span class="line">  121 </span><span class="slc"></span>    printf<span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> list_member<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> B<span class="sym">)</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span> <span class="sym">);
</span><span class="line">  122 </span><span class="sym">
</span><span class="line">  123 </span><span class="sym"></span>    <span class="slc">// is N a member of B?
</span><span class="line">  124 </span><span class="slc"></span>    printf<span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> list_member<span class="sym">(</span>n<span class="sym">,</span> B<span class="sym">)</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span> <span class="sym">);
</span><span class="line">  125 </span><span class="sym">
</span><span class="line">  126 </span><span class="sym"></span>    <span class="slc">// filter values from B to A that are less than N/2, preserving order
</span><span class="line">  127 </span><span class="slc"></span>    mid <span class="sym">=</span> n<span class="sym">/</span><span class="num">2</span><span class="sym">;
</span><span class="line">  128 </span><span class="sym"></span>    tmp <span class="sym">=</span> A<span class="sym">;</span> <span class="slc">// tmp points to last item in list A
</span><span class="line">  129 </span><span class="slc"></span>    <span class="kwa">for</span> <span class="sym">(</span>p<span class="sym">=</span>list_first<span class="sym">(</span>B<span class="sym">);</span> p<span class="sym">!=</span>NULL<span class="sym">;</span> p<span class="sym">=</span>p<span class="sym">-&gt;</span>next<span class="sym">) {
</span><span class="line">  130 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>p<span class="sym">-&gt;</span>val <span class="sym">&lt;</span> mid<span class="sym">) {
</span><span class="line">  131 </span><span class="sym"></span>            tmp<span class="sym">-&gt;</span>next <span class="sym">=</span> list_new_item<span class="sym">(</span>p<span class="sym">-&gt;</span>val<span class="sym">);</span> <span class="slc">// copy item
</span><span class="line">  132 </span><span class="slc"></span>            tmp <span class="sym">=</span> tmp<span class="sym">-&gt;</span>next<span class="sym">;
</span><span class="line">  133 </span><span class="sym"></span>            A<span class="sym">-&gt;</span>val<span class="sym">++;
</span><span class="line">  134 </span><span class="sym">        }
</span><span class="line">  135 </span><span class="sym">    }
</span><span class="line">  136 </span><span class="sym">
</span><span class="line">  137 </span><span class="sym"></span>    <span class="slc">// print first ten items of A
</span><span class="line">  138 </span><span class="slc"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> p<span class="sym">=</span>list_first<span class="sym">(</span>A<span class="sym">);</span> p <span class="sym">!=</span> NULL <span class="sym">&amp;&amp;</span> i<span class="sym">&lt;</span><span class="num">10</span><span class="sym">;</span> i<span class="sym">++,</span> p<span class="sym">=</span>p<span class="sym">-&gt;</span>next<span class="sym">)
</span><span class="line">  139 </span><span class="sym"></span>        printf<span class="sym">(</span><span class="str">&quot;%d%s&quot;</span><span class="sym">,</span> p<span class="sym">-&gt;</span>val<span class="sym">, (</span>i<span class="sym">&lt;</span><span class="num">9</span><span class="sym">)</span> ? <span class="str">&quot; &quot;</span> <span class="sym">:</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="line">  140 </span><span class="sym">
</span><span class="line">  141 </span><span class="sym"></span>    <span class="slc">// print sum of items in A that are less than 1000
</span><span class="line">  142 </span><span class="slc"></span>    <span class="kwa">for</span> <span class="sym">(</span>p<span class="sym">=</span>list_first<span class="sym">(</span>A<span class="sym">);</span> p<span class="sym">!=</span>NULL<span class="sym">;</span> p<span class="sym">=</span>p<span class="sym">-&gt;</span>next<span class="sym">)
</span><span class="line">  143 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">((</span>i <span class="sym">=</span> p<span class="sym">-&gt;</span>val<span class="sym">) &lt;</span> <span class="num">1000</span><span class="sym">)</span> sum <span class="sym">+=</span> i<span class="sym">;
</span><span class="line">  144 </span><span class="sym"></span>    printf<span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sum<span class="sym">);
</span><span class="line">  145 </span><span class="sym">
</span><span class="line">  146 </span><span class="sym"></span>    <span class="slc">// append B to end of A (can be done destructively)
</span><span class="line">  147 </span><span class="slc"></span>    list_append<span class="sym">(</span>A<span class="sym">,</span> B<span class="sym">);
</span><span class="line">  148 </span><span class="sym">
</span><span class="line">  149 </span><span class="sym"></span>    <span class="slc">// print length and last element of A
</span><span class="line">  150 </span><span class="slc"></span>    printf<span class="sym">(</span><span class="str">&quot;%d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> list_length<span class="sym">(</span>A<span class="sym">),</span> list_last<span class="sym">(</span>A<span class="sym">));
</span><span class="line">  151 </span><span class="sym">
</span><span class="line">  152 </span><span class="sym"></span>    list_free<span class="sym">(</span>A<span class="sym">);
</span><span class="line">  153 </span><span class="sym"></span>    list_free<span class="sym">(</span>B<span class="sym">);
</span><span class="line">  154 </span><span class="sym"></span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
</span><span class="line">  155 </span><span class="sym">}</span>
