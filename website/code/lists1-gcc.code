<span class="com">/* -*- mode: c -*-
 * $Id: lists1-gcc.code,v 1.6 2004-11-26 01:22:21 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 */</span>

<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;string.h&gt;
</span><span class="dir">#include &lt;unistd.h&gt;
</span>
<span class="dir">#define SIZE 10000
</span>
<span class="slc">// a simple Single Linked List
</span><span class="slc">// the head node is special, it's val is length of list
</span><span class="kwc">typedef</span> <span class="kwb">struct</span> LL <span class="sym">{
</span>    <span class="kwb">int</span> val<span class="sym">;
</span>    <span class="kwb">struct</span> LL <span class="sym">*</span>next<span class="sym">;</span>	<span class="com">/* points to next or head (if at tail) */</span>
<span class="sym">}</span> LL<span class="sym">;

</span><span class="kwc">inline</span> <span class="kwb">int</span> list_length<span class="sym">(</span>LL <span class="sym">*</span>head<span class="sym">) {</span> <span class="kwa">return</span><span class="sym">(</span>head<span class="sym">-&gt;</span>val<span class="sym">); }
</span><span class="kwc">inline</span> <span class="kwb">int</span> list_empty<span class="sym">(</span>LL <span class="sym">*</span>head<span class="sym">)  {</span> <span class="kwa">return</span><span class="sym">(</span>list_length<span class="sym">(</span>head<span class="sym">) ==</span> <span class="num">0</span><span class="sym">); }
</span><span class="kwc">inline</span> LL<span class="sym">*</span> list_first<span class="sym">(</span>LL <span class="sym">*</span>head<span class="sym">)  {</span> <span class="kwa">return</span><span class="sym">(</span>head<span class="sym">-&gt;</span>next<span class="sym">); }

</span><span class="kwb">void</span> list_push_head<span class="sym">(</span>LL <span class="sym">*</span>head<span class="sym">,</span> LL <span class="sym">*</span>item<span class="sym">) {
</span>    LL <span class="sym">*</span>next <span class="sym">=</span> head<span class="sym">-&gt;</span>next<span class="sym">;
</span>    head<span class="sym">-&gt;</span>next <span class="sym">=</span> item<span class="sym">;
</span>    item<span class="sym">-&gt;</span>next <span class="sym">=</span> next<span class="sym">;
</span>    head<span class="sym">-&gt;</span>val<span class="sym">++;
}

</span>LL <span class="sym">*</span>list_pop_head<span class="sym">(</span>LL <span class="sym">*</span>head<span class="sym">) {
</span>    LL <span class="sym">*</span>next<span class="sym">;
</span>    <span class="kwa">if</span> <span class="sym">(</span>list_empty<span class="sym">(</span>head<span class="sym">))</span> <span class="kwa">return</span><span class="sym">(</span>NULL<span class="sym">);
</span>    next <span class="sym">=</span> head<span class="sym">-&gt;</span>next<span class="sym">;
</span>    head<span class="sym">-&gt;</span>next <span class="sym">=</span> next<span class="sym">-&gt;</span>next<span class="sym">;
</span>    head<span class="sym">-&gt;</span>val<span class="sym">--;
</span>    <span class="kwa">return</span><span class="sym">(</span>next<span class="sym">);
}

</span>LL <span class="sym">*</span>list_new_item<span class="sym">(</span><span class="kwb">int</span> v<span class="sym">) {
</span>    LL <span class="sym">*</span>l <span class="sym">= (</span>LL <span class="sym">*)</span>malloc<span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span>LL<span class="sym">));
</span>    l<span class="sym">-&gt;</span>next <span class="sym">=</span> NULL<span class="sym">;
</span>    l<span class="sym">-&gt;</span>val <span class="sym">=</span> v<span class="sym">;
</span>    <span class="kwa">return</span><span class="sym">(</span>l<span class="sym">);
}

</span><span class="kwc">inline</span> LL<span class="sym">*</span> list_create<span class="sym">()  {</span> <span class="kwa">return</span><span class="sym">(</span>list_new_item<span class="sym">(</span><span class="num">0</span><span class="sym">)); }

</span><span class="kwb">void</span> list_free <span class="sym">(</span>LL<span class="sym">*</span> head<span class="sym">) {
</span>    LL <span class="sym">*</span>p<span class="sym">, *</span>tmp <span class="sym">=</span> head<span class="sym">;
</span>    <span class="kwa">if</span> <span class="sym">(</span>head <span class="sym">==</span> NULL<span class="sym">)</span> <span class="kwa">return</span><span class="sym">;
</span>    <span class="kwa">if</span> <span class="sym">(</span>head<span class="sym">-&gt;</span>next <span class="sym">!=</span> NULL<span class="sym">) {
</span>	<span class="kwa">for</span> <span class="sym">(</span>p<span class="sym">=</span>head<span class="sym">-&gt;</span>next<span class="sym">;</span> p<span class="sym">-&gt;</span>next <span class="sym">!=</span> NULL<span class="sym">;</span> p<span class="sym">=</span>p<span class="sym">-&gt;</span>next<span class="sym">) {
</span>	    free<span class="sym">(</span>tmp<span class="sym">);
</span>	    tmp <span class="sym">=</span> p<span class="sym">;
	}
    }
</span>    free<span class="sym">(</span>tmp<span class="sym">);
}

</span><span class="kwb">void</span> list_append <span class="sym">(</span>LL<span class="sym">*</span> head_1<span class="sym">,</span> LL<span class="sym">*</span> head_2<span class="sym">) {
</span>    LL <span class="sym">*</span>p<span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span>p<span class="sym">=</span>head_1<span class="sym">;</span> p<span class="sym">-&gt;</span>next <span class="sym">!=</span> NULL<span class="sym">;</span> p<span class="sym">=</span>p<span class="sym">-&gt;</span>next<span class="sym">) ;
</span>    p<span class="sym">-&gt;</span>next <span class="sym">=</span> head_2<span class="sym">-&gt;</span>next<span class="sym">;
</span>    head_2<span class="sym">-&gt;</span>next <span class="sym">=</span> NULL<span class="sym">;
</span>    head_1<span class="sym">-&gt;</span>val <span class="sym">+=</span> head_2<span class="sym">-&gt;</span>val<span class="sym">;
</span>    head_2<span class="sym">-&gt;</span>val <span class="sym">=</span> <span class="num">0</span><span class="sym">;
}

</span><span class="kwb">int</span> list_member<span class="sym">(</span><span class="kwb">int</span> item<span class="sym">,</span> LL<span class="sym">*</span> head<span class="sym">) {
</span>    LL<span class="sym">*</span> p <span class="sym">=</span> head<span class="sym">-&gt;</span>next<span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span>p<span class="sym">=</span>head<span class="sym">;</span> p <span class="sym">!=</span> NULL<span class="sym">;</span> p<span class="sym">=</span>p<span class="sym">-&gt;</span>next<span class="sym">) {
</span>	<span class="kwa">if</span> <span class="sym">(</span>p<span class="sym">-&gt;</span>val <span class="sym">==</span> item<span class="sym">)</span> <span class="kwa">return</span><span class="sym">(</span><span class="num">1</span><span class="sym">);
    }
</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
}

</span><span class="kwb">void</span> list_reverse <span class="sym">(</span>LL <span class="sym">*</span>head<span class="sym">) {
</span>    LL <span class="sym">*</span>prev<span class="sym">, *</span>p<span class="sym">, *</span>tmp<span class="sym">, *</span>first <span class="sym">=</span> list_first<span class="sym">(</span>head<span class="sym">);
</span>    <span class="kwa">if</span> <span class="sym">(</span>first <span class="sym">!=</span> NULL<span class="sym">) {
</span>	prev <span class="sym">=</span> NULL<span class="sym">;
</span>	p <span class="sym">=</span> first<span class="sym">;
</span>	<span class="kwa">while</span> <span class="sym">((</span>tmp <span class="sym">=</span> p<span class="sym">-&gt;</span>next<span class="sym">) !=</span> NULL<span class="sym">) {
</span>	    p<span class="sym">-&gt;</span>next <span class="sym">=</span> prev<span class="sym">;
</span>	    prev <span class="sym">=</span> p<span class="sym">;
</span>	    p <span class="sym">=</span> tmp<span class="sym">;
	}
</span>	p<span class="sym">-&gt;</span>next <span class="sym">=</span> prev<span class="sym">;
</span>	head<span class="sym">-&gt;</span>next <span class="sym">=</span> p<span class="sym">;
    }
}

</span><span class="kwb">int</span> list_last<span class="sym">(</span>LL <span class="sym">*</span>head<span class="sym">) {
</span>    LL<span class="sym">*</span> p<span class="sym">;
</span>    <span class="kwa">if</span> <span class="sym">(</span>head <span class="sym">==</span> NULL<span class="sym">)</span> <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
</span>    <span class="kwa">for</span> <span class="sym">(</span>p<span class="sym">=</span>head<span class="sym">;</span> p<span class="sym">-&gt;</span>next <span class="sym">!=</span> NULL<span class="sym">;</span> p<span class="sym">=</span>p<span class="sym">-&gt;</span>next<span class="sym">) ;
</span>    <span class="kwa">return</span><span class="sym">(</span>p<span class="sym">-&gt;</span>val<span class="sym">);
}

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span>    <span class="kwb">int</span> i<span class="sym">,</span> mid<span class="sym">,</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span>    LL <span class="sym">*</span>p<span class="sym">, *</span>tmp<span class="sym">, *</span>A<span class="sym">, *</span>B<span class="sym">;

</span>    <span class="slc">// create list (A) of integers from 1 through N
</span>    A <span class="sym">=</span> list_create<span class="sym">();
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span>n<span class="sym">;</span> i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">--)</span> list_push_head<span class="sym">(</span>A<span class="sym">,</span> list_new_item<span class="sym">(</span>i<span class="sym">));

</span>    <span class="slc">// create empty list B
</span>    B <span class="sym">=</span> list_create<span class="sym">();

</span>    <span class="slc">// move each individual item from A to B, in a loop, reversing order
</span>    <span class="kwa">while</span> <span class="sym">(!</span>list_empty<span class="sym">(</span>A<span class="sym">))</span> list_push_head<span class="sym">(</span>B<span class="sym">,</span> list_pop_head<span class="sym">(</span>A<span class="sym">));

</span>    <span class="slc">// print first 2 items in B
</span>    printf<span class="sym">(</span><span class="str">&quot;%d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> B<span class="sym">-&gt;</span>next<span class="sym">-&gt;</span>val<span class="sym">,</span> B<span class="sym">-&gt;</span>next<span class="sym">-&gt;</span>next<span class="sym">-&gt;</span>val<span class="sym">);

</span>    <span class="slc">// reverse B (can be done in place)
</span>    list_reverse<span class="sym">(</span>B<span class="sym">);

</span>    <span class="slc">// is 0 a member of B?
</span>    printf<span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> list_member<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> B<span class="sym">)</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span> <span class="sym">);

</span>    <span class="slc">// is N a member of B?
</span>    printf<span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> list_member<span class="sym">(</span>n<span class="sym">,</span> B<span class="sym">)</span> ? <span class="str">&quot;true&quot;</span> <span class="sym">:</span> <span class="str">&quot;false&quot;</span> <span class="sym">);

</span>    <span class="slc">// filter values from B to A that are less than N/2, preserving order
</span>    mid <span class="sym">=</span> n<span class="sym">/</span><span class="num">2</span><span class="sym">;
</span>    tmp <span class="sym">=</span> A<span class="sym">;</span> <span class="slc">// tmp points to last item in list A
</span>    <span class="kwa">for</span> <span class="sym">(</span>p<span class="sym">=</span>list_first<span class="sym">(</span>B<span class="sym">);</span> p<span class="sym">!=</span>NULL<span class="sym">;</span> p<span class="sym">=</span>p<span class="sym">-&gt;</span>next<span class="sym">) {
</span>	<span class="kwa">if</span> <span class="sym">(</span>p<span class="sym">-&gt;</span>val <span class="sym">&lt;</span> mid<span class="sym">) {
</span>	    tmp<span class="sym">-&gt;</span>next <span class="sym">=</span> list_new_item<span class="sym">(</span>p<span class="sym">-&gt;</span>val<span class="sym">);</span> <span class="slc">// copy item
</span>	    tmp <span class="sym">=</span> tmp<span class="sym">-&gt;</span>next<span class="sym">;
</span>	    A<span class="sym">-&gt;</span>val<span class="sym">++;
	}
    }

</span>    <span class="slc">// print first ten items of A
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span> p<span class="sym">=</span>list_first<span class="sym">(</span>A<span class="sym">);</span> p <span class="sym">!=</span> NULL <span class="sym">&amp;&amp;</span> i<span class="sym">&lt;</span><span class="num">10</span><span class="sym">;</span> i<span class="sym">++,</span> p<span class="sym">=</span>p<span class="sym">-&gt;</span>next<span class="sym">)
</span>	printf<span class="sym">(</span><span class="str">&quot;%d%s&quot;</span><span class="sym">,</span> p<span class="sym">-&gt;</span>val<span class="sym">, (</span>i<span class="sym">&lt;</span><span class="num">9</span><span class="sym">)</span> ? <span class="str">&quot; &quot;</span> <span class="sym">:</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);

</span>    <span class="slc">// print sum of items in A that are less than 1000
</span>    <span class="kwa">for</span> <span class="sym">(</span>p<span class="sym">=</span>list_first<span class="sym">(</span>A<span class="sym">);</span> p<span class="sym">!=</span>NULL<span class="sym">;</span> p<span class="sym">=</span>p<span class="sym">-&gt;</span>next<span class="sym">)
</span>	<span class="kwa">if</span> <span class="sym">((</span>i <span class="sym">=</span> p<span class="sym">-&gt;</span>val<span class="sym">) &lt;</span> <span class="num">1000</span><span class="sym">)</span> sum <span class="sym">+=</span> i<span class="sym">;
</span>    printf<span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> sum<span class="sym">);

</span>    <span class="slc">// append B to end of A (can be done destructively)
</span>    list_append<span class="sym">(</span>A<span class="sym">,</span> B<span class="sym">);

</span>    <span class="slc">// print length and last element of A
</span>    printf<span class="sym">(</span><span class="str">&quot;%d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> list_length<span class="sym">(</span>A<span class="sym">),</span> list_last<span class="sym">(</span>A<span class="sym">));

</span>    list_free<span class="sym">(</span>A<span class="sym">);
</span>    list_free<span class="sym">(</span>B<span class="sym">);
</span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}</span>
