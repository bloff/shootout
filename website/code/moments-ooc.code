<span class="com">(* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy (Oberon-2 novice)</span>
<span class="com">*)</span>


<span class="kwa">MODULE</span> moments<span class="sym">;</span>
<span class="kwa">IMPORT</span> IO<span class="sym">,</span> IO<span class="sym">:</span>StdChannels<span class="sym">,</span> S<span class="sym">:=</span>SYSTEM<span class="sym">,</span> RealConv<span class="sym">,</span> Out<span class="sym">,</span> LRealMath<span class="sym">;</span>

<span class="kwa">CONST</span>
   readSize <span class="sym">=</span> <span class="num">4096</span><span class="sym">;</span>

<span class="kwa">TYPE</span>
   FixedBuffer <span class="sym">=</span> <span class="kwa">ARRAY</span> readSize <span class="kwa">OF</span> <span class="kwb">CHAR</span><span class="sym">;</span>
   FixedBufferProc <span class="sym">=</span> <span class="kwa">PROCEDURE</span> <span class="sym">(</span><span class="kwa">VAR</span> b<span class="sym">:</span> FixedBuffer<span class="sym">;</span> <span class="kwa">VAR</span> pos<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">);</span>
   Reals <span class="sym">=</span> <span class="kwb">POINTER</span> <span class="kwa">TO ARRAY OF</span> <span class="kwb">REAL</span><span class="sym">;</span>

<span class="kwa">VAR</span>
   buffer<span class="sym">:</span> FixedBuffer<span class="sym">;</span>
   x<span class="sym">:</span> Reals<span class="sym">;</span>
   i<span class="sym">,</span> n<span class="sym">,</span> mid<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
   sum<span class="sym">,</span> mean<span class="sym">,</span> dev<span class="sym">,</span> adev<span class="sym">,</span> dev2<span class="sym">,</span> var<span class="sym">,</span> skew<span class="sym">,</span> kurt<span class="sym">,</span> sdev<span class="sym">,</span> median<span class="sym">:</span> <span class="kwb">LONGREAL</span><span class="sym">;</span>


<span class="com">(* Separate special processing in procedure Process so we can use</span>
<span class="com">   FillAndProcess in other Shootout tests *)</span>
<span class="kwa">PROCEDURE</span> <span class="kwd">FillAndProcess</span> <span class="sym">(</span><span class="kwa">VAR</span> buffer<span class="sym">:</span> FixedBuffer<span class="sym">;</span> Process<span class="sym">:</span> FixedBufferProc<span class="sym">);</span>
<span class="kwa">VAR</span>
   channel<span class="sym">:</span> IO<span class="sym">.</span>ByteChannel<span class="sym">;</span>
   partialFill<span class="sym">:</span> <span class="kwb">BOOLEAN</span><span class="sym">;</span>
   size<span class="sym">,</span> pos<span class="sym">,</span> count<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
<span class="kwa">BEGIN</span>
   channel <span class="sym">:=</span> StdChannels<span class="sym">.</span>stdin<span class="sym">;</span>
   pos <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   size <span class="sym">:=</span> readSize<span class="sym">;</span>
   <span class="kwa">LOOP</span>
      TRY
         count <span class="sym">:=</span> channel<span class="sym">.</span><span class="kwd">Read</span><span class="sym">(</span>buffer<span class="sym">,</span> pos<span class="sym">,</span> size <span class="sym">*</span> <span class="kwa">SIZE</span><span class="sym">(</span><span class="kwb">CHAR</span><span class="sym">));</span>
         partialFill <span class="sym">:=</span> count <span class="sym">&lt;</span> size<span class="sym">;</span>
         <span class="kwa">IF</span> partialFill <span class="kwa">THEN</span> size <span class="sym">:=</span> pos <span class="sym">+</span> count<span class="sym">;</span> <span class="kwa">ELSE</span> size <span class="sym">:=</span> readSize<span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span>
         pos <span class="sym">:=</span> size<span class="sym">;</span>

         <span class="kwd">Process</span><span class="sym">(</span>buffer<span class="sym">,</span>pos<span class="sym">);</span>

         <span class="kwa">IF</span> partialFill <span class="kwa">THEN EXIT</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span>

         <span class="kwa">IF</span> pos <span class="sym">=</span> size <span class="kwa">THEN</span>
            pos <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
            size <span class="sym">:=</span> readSize<span class="sym">;</span>
         <span class="kwa">ELSE</span>
            S<span class="sym">.</span><span class="kwa">MOVE</span><span class="sym">(</span>S<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span>buffer<span class="sym">[</span>pos<span class="sym">]),</span> S<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span>buffer<span class="sym">[</span><span class="num">0</span><span class="sym">]), (</span>size<span class="sym">-</span>pos<span class="sym">)*</span><span class="kwa">SIZE</span><span class="sym">(</span><span class="kwb">CHAR</span><span class="sym">));</span>
            pos <span class="sym">:=</span> size <span class="sym">-</span> pos<span class="sym">;</span>
            size <span class="sym">:=</span> readSize <span class="sym">-</span> pos<span class="sym">;</span>
         <span class="kwa">END</span><span class="sym">;</span>

      CATCH IO<span class="sym">.</span>Error<span class="sym">:</span>
         <span class="kwa">EXIT</span><span class="sym">;</span>
      <span class="kwa">END</span><span class="sym">;</span>
   <span class="kwa">END</span><span class="sym">;</span>
<span class="kwa">END</span> FillAndProcess<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">ReadReals</span><span class="sym">(</span><span class="kwa">VAR</span> buffer<span class="sym">:</span> FixedBuffer<span class="sym">;</span> <span class="kwa">VAR</span> pos<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">);</span>
<span class="kwa">TYPE</span>
   Chars <span class="sym">=</span> <span class="kwb">POINTER</span> <span class="kwa">TO ARRAY</span> <span class="num">32</span> <span class="kwa">OF</span> <span class="kwb">CHAR</span><span class="sym">;</span>
<span class="kwa">VAR</span>
   i<span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
   chars<span class="sym">:</span> Chars<span class="sym">;</span>
   tmp<span class="sym">:</span> Reals<span class="sym">;</span>
<span class="kwa">BEGIN</span>
   i <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">WHILE</span> j <span class="sym">&lt;</span> pos <span class="kwa">DO</span>
      <span class="kwa">IF</span> buffer<span class="sym">[</span>j<span class="sym">] =</span> <span class="num">0</span>AX <span class="kwa">THEN</span>

         <span class="kwa">IF</span> n <span class="sym">=</span> <span class="kwa">LEN</span><span class="sym">(</span>x^<span class="sym">)</span> <span class="kwa">THEN</span> <span class="com">(* increase array size *)</span>
            <span class="kwa">NEW</span><span class="sym">(</span>tmp<span class="sym">,</span> <span class="kwa">ASH</span><span class="sym">(</span><span class="kwa">LEN</span><span class="sym">(</span>x^<span class="sym">),</span><span class="num">1</span><span class="sym">));</span>
            S<span class="sym">.</span><span class="kwa">MOVE</span><span class="sym">(</span>S<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span>x<span class="sym">[</span><span class="num">0</span><span class="sym">]),</span> S<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span>tmp<span class="sym">[</span><span class="num">0</span><span class="sym">]),</span> n<span class="sym">*</span><span class="kwa">SIZE</span><span class="sym">(</span><span class="kwb">REAL</span><span class="sym">));</span>
            x <span class="sym">:=</span> tmp<span class="sym">;</span> tmp <span class="sym">:=</span> <span class="kwa">NIL</span><span class="sym">;</span>
         <span class="kwa">END</span><span class="sym">;</span>

         buffer<span class="sym">[</span>j<span class="sym">] :=</span> <span class="num">0</span>X<span class="sym">;</span>
         chars <span class="sym">:=</span> S<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>Chars<span class="sym">,</span> S<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span>buffer<span class="sym">[</span>i<span class="sym">]));</span>
         x<span class="sym">[</span>n<span class="sym">] :=</span> RealConv<span class="sym">.</span><span class="kwd">ValueReal</span><span class="sym">(</span>chars^<span class="sym">);</span>
         sum <span class="sym">:=</span> sum <span class="sym">+</span> x<span class="sym">[</span>n<span class="sym">];</span> <span class="kwa">INC</span><span class="sym">(</span>n<span class="sym">);</span>

         <span class="kwa">INC</span><span class="sym">(</span>j<span class="sym">);</span> i <span class="sym">:=</span> j<span class="sym">;</span>
      <span class="kwa">ELSE</span>
         <span class="kwa">INC</span><span class="sym">(</span>j<span class="sym">);</span>
      <span class="kwa">END</span><span class="sym">;</span>
   <span class="kwa">END</span><span class="sym">;</span>

   <span class="kwa">IF</span> j <span class="sym">&gt;</span> i <span class="kwa">THEN</span> pos <span class="sym">:=</span> i<span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span> <span class="com">(* indicate buffer position *)</span>
<span class="kwa">END</span> ReadReals<span class="sym">;</span>


<span class="kwa">PROCEDURE</span> <span class="kwd">QuickSelect</span><span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span> <span class="kwa">VAR</span> a<span class="sym">:</span> <span class="kwa">ARRAY OF</span> <span class="kwb">REAL</span><span class="sym">):</span> <span class="kwb">REAL</span><span class="sym">;</span>
<span class="kwa">VAR</span>
   lo<span class="sym">,</span> hi<span class="sym">,</span> median<span class="sym">,</span> mid<span class="sym">,</span> l<span class="sym">,</span> h<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
   t<span class="sym">:</span> <span class="kwb">REAL</span><span class="sym">;</span>

<span class="kwa">PROCEDURE</span> <span class="kwd">Swap</span><span class="sym">(</span>i<span class="sym">,</span>j<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">);</span> <span class="kwa">BEGIN</span> t <span class="sym">:=</span> a<span class="sym">[</span>i<span class="sym">];</span> a<span class="sym">[</span>i<span class="sym">] :=</span> a<span class="sym">[</span>j<span class="sym">];</span> a<span class="sym">[</span>j<span class="sym">] :=</span> t<span class="sym">;</span> <span class="kwa">END</span> Swap<span class="sym">;</span>

<span class="kwa">BEGIN</span>
   lo <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span> hi <span class="sym">:=</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span> median <span class="sym">:= (</span>lo <span class="sym">+</span> hi<span class="sym">)</span> <span class="kwa">DIV</span> <span class="num">2</span><span class="sym">;</span>
   <span class="kwa">LOOP</span>
      <span class="kwa">IF</span> hi <span class="sym">&lt;=</span> lo <span class="kwa">THEN RETURN</span> a<span class="sym">[</span>median<span class="sym">];</span> <span class="kwa">END</span><span class="sym">;</span>
      <span class="kwa">IF</span> hi <span class="sym">=</span> lo <span class="sym">+</span> <span class="num">1</span> <span class="kwa">THEN</span>
         <span class="kwa">IF</span> a<span class="sym">[</span>lo<span class="sym">] &gt;</span> a<span class="sym">[</span>hi<span class="sym">]</span> <span class="kwa">THEN</span> <span class="kwd">Swap</span><span class="sym">(</span>lo<span class="sym">,</span>hi<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;</span>
         <span class="kwa">RETURN</span> a<span class="sym">[</span>median<span class="sym">];</span>
      <span class="kwa">END</span><span class="sym">;</span>

      mid <span class="sym">:= (</span>lo <span class="sym">+</span> hi<span class="sym">)</span> <span class="kwa">DIV</span> <span class="num">2</span><span class="sym">;</span>
      <span class="kwa">IF</span> a<span class="sym">[</span>mid<span class="sym">] &gt;</span> a<span class="sym">[</span>hi<span class="sym">]</span> <span class="kwa">THEN</span> <span class="kwd">Swap</span><span class="sym">(</span>mid<span class="sym">,</span>hi<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;</span>
      <span class="kwa">IF</span> a<span class="sym">[</span>lo<span class="sym">] &gt;</span> a<span class="sym">[</span>hi<span class="sym">]</span> <span class="kwa">THEN</span> <span class="kwd">Swap</span><span class="sym">(</span>lo<span class="sym">,</span>hi<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;</span>
      <span class="kwa">IF</span> a<span class="sym">[</span>mid<span class="sym">] &gt;</span> a<span class="sym">[</span>lo<span class="sym">]</span> <span class="kwa">THEN</span> <span class="kwd">Swap</span><span class="sym">(</span>mid<span class="sym">,</span>lo<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;</span>

      <span class="kwd">Swap</span><span class="sym">(</span>mid<span class="sym">,</span>lo<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>

      l <span class="sym">:=</span> lo <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span> h <span class="sym">:=</span> hi<span class="sym">;</span>
      <span class="kwa">LOOP</span>
         <span class="kwa">REPEAT INC</span><span class="sym">(</span>l<span class="sym">);</span> <span class="kwa">UNTIL</span> a<span class="sym">[</span>lo<span class="sym">] &lt;=</span> a<span class="sym">[</span>l<span class="sym">];</span>
         <span class="kwa">REPEAT DEC</span><span class="sym">(</span>h<span class="sym">);</span> <span class="kwa">UNTIL</span> a<span class="sym">[</span>h<span class="sym">] &lt;=</span> a<span class="sym">[</span>lo<span class="sym">];</span>
         <span class="kwa">IF</span> h <span class="sym">&lt;</span> l <span class="kwa">THEN EXIT</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span>
         <span class="kwd">Swap</span><span class="sym">(</span>l<span class="sym">,</span>h<span class="sym">);</span>
      <span class="kwa">END</span><span class="sym">;</span>

      <span class="kwd">Swap</span><span class="sym">(</span>lo<span class="sym">,</span>h<span class="sym">);</span>
      <span class="kwa">IF</span> h <span class="sym">&lt;=</span> median <span class="kwa">THEN</span> lo <span class="sym">:=</span> l<span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span>
      <span class="kwa">IF</span> h <span class="sym">&gt;=</span> median <span class="kwa">THEN</span> hi <span class="sym">:=</span> h <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span>
   <span class="kwa">END</span><span class="sym">;</span>
<span class="kwa">END</span> QuickSelect<span class="sym">;</span>


<span class="kwa">BEGIN</span>
   n <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span> sum <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;</span> <span class="kwa">NEW</span><span class="sym">(</span>x<span class="sym">,</span><span class="num">4096</span><span class="sym">);</span>
   <span class="kwd">FillAndProcess</span><span class="sym">(</span>buffer<span class="sym">,</span> ReadReals<span class="sym">);</span>

   mean <span class="sym">:=</span> sum <span class="sym">/</span> n<span class="sym">;</span>
   FOR i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">TO</span> n<span class="sym">-</span><span class="num">1</span> <span class="kwa">DO</span>
      dev <span class="sym">:=</span> x<span class="sym">[</span>i<span class="sym">] -</span> mean<span class="sym">;</span>
      adev <span class="sym">:=</span> adev <span class="sym">+</span> <span class="kwa">ABS</span><span class="sym">(</span>dev<span class="sym">);</span>
      dev2 <span class="sym">:=</span> dev <span class="sym">*</span> dev<span class="sym">;</span>
      var <span class="sym">:=</span> var <span class="sym">+</span> dev2<span class="sym">;</span>
      skew <span class="sym">:=</span> skew <span class="sym">+</span> dev2 <span class="sym">*</span> dev<span class="sym">;</span>
      kurt <span class="sym">:=</span> kurt <span class="sym">+</span> dev2 <span class="sym">*</span> dev2<span class="sym">;</span>
   <span class="kwa">END</span><span class="sym">;</span>
   adev <span class="sym">:=</span> adev <span class="sym">/</span> n<span class="sym">;</span>
   var <span class="sym">:=</span> var <span class="sym">/ (</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
   sdev <span class="sym">:=</span> LRealMath<span class="sym">.</span><span class="kwd">sqrt</span><span class="sym">(</span>var<span class="sym">);</span>
   <span class="kwa">IF</span> var # <span class="num">0.0</span> <span class="kwa">THEN</span>
      skew <span class="sym">:=</span> skew <span class="sym">/ (</span>n <span class="sym">*</span> var <span class="sym">*</span> sdev<span class="sym">);</span>
      kurt <span class="sym">:=</span> kurt <span class="sym">/ (</span>n <span class="sym">*</span> var <span class="sym">*</span> var<span class="sym">) -</span> <span class="num">3.0</span><span class="sym">;</span>
   <span class="kwa">END</span><span class="sym">;</span>

   median <span class="sym">:=</span> <span class="kwd">QuickSelect</span><span class="sym">(</span>n<span class="sym">,</span> x^<span class="sym">);</span>
   mid <span class="sym">:= (</span>n <span class="kwa">DIV</span> <span class="num">2</span><span class="sym">) -</span> <span class="num">1</span><span class="sym">;</span>
   <span class="kwa">IF ODD</span><span class="sym">(</span>mid<span class="sym">)</span> <span class="kwa">THEN</span> median <span class="sym">:= (</span>x<span class="sym">[</span>mid<span class="sym">] +</span> x<span class="sym">[</span>mid<span class="sym">+</span><span class="num">1</span><span class="sym">]) /</span> <span class="num">2</span><span class="sym">;</span> <span class="kwa">END</span><span class="sym">;</span>

   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;n:                  &quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span>n<span class="sym">,</span><span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;median:             &quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">LongRealFix</span><span class="sym">(</span>median<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">6</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;mean:               &quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">LongRealFix</span><span class="sym">(</span>mean<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">6</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;average_deviation:  &quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">LongRealFix</span><span class="sym">(</span>adev<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">6</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;standard_deviation: &quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">LongRealFix</span><span class="sym">(</span>sdev<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">6</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;variance:           &quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">LongRealFix</span><span class="sym">(</span>var<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">6</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;skew:               &quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">LongRealFix</span><span class="sym">(</span>skew<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">6</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
   Out<span class="sym">.</span><span class="kwd">String</span><span class="sym">(</span><span class="str">&quot;kurtosis:           &quot;</span><span class="sym">);</span> Out<span class="sym">.</span><span class="kwd">LongRealFix</span><span class="sym">(</span>kurt<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">6</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
<span class="kwa">END</span> moments<span class="sym">.</span>


