<span class="slc">#!/usr/bin/ruby</span>
<span class="slc"># -*- mode: ruby -*-</span>
<span class="slc"># $Id: echo-ruby.code,v 1.10 2006-09-20 05:51:10 bfulgham Exp $</span>
<span class="slc"># http://www.bagley.org/~doug/shootout/</span>

require <span class="str">&quot;socket&quot;</span>

<span class="kwc">DATA</span> = <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span>

<span class="kwa">def</span> <span class="kwd">echo_client</span><span class="sym">(</span>n<span class="sym">,</span> port)
    sock = TCPsocket<span class="sym">.</span><span class="kwd">open</span><span class="sym">(</span><span class="str">'127.0.0.1'</span><span class="sym">,</span> port)
    n<span class="sym">.</span>times <span class="kwa">do</span>
	sock<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span><span class="kwc">DATA</span>)
	ans = sock<span class="sym">.</span>readline
	<span class="kwa">if</span> ans <span class="sym">!</span>= <span class="kwc">DATA</span> <span class="kwa">then</span>
	    raise <span class="kwd">sprintf</span><span class="sym">(</span><span class="str">&quot;client:</span> <span class="esc">\&quot;</span><span class="str">%s</span><span class="esc">\&quot; \&quot;</span><span class="str">%s</span><span class="esc">\&quot;</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwc">DATA</span><span class="sym">,</span> ans)
	<span class="kwa">end</span>
    <span class="kwa">end</span>
    sock<span class="sym">.</span>close
<span class="kwa">end</span>


<span class="kwa">def</span> <span class="kwd">echo_server</span><span class="sym">(</span>n)
    ssock = TCPserver<span class="sym">.</span><span class="kwd">open</span><span class="sym">(</span><span class="str">'127.0.0.1'</span><span class="sym">,</span> <span class="num">0</span>)
    port = ssock<span class="sym">.</span>addr<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
    <span class="kwa">if</span> pid = fork <span class="kwa">then</span>
	<span class="slc"># parent is server</span>
	csock = ssock<span class="sym">.</span>accept
	n = <span class="num">0</span>
	<span class="kwa">while</span> str = csock<span class="sym">.</span>gets
	    n <span class="sym">+</span>= csock<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>str)
	<span class="kwa">end</span>
	Process<span class="sym">.</span>wait
        printf <span class="str">&quot;server processed %d bytes</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> n
    <span class="kwa">else</span>
	<span class="slc"># child is client</span>
	<span class="kwd">echo_client</span><span class="sym">(</span>n<span class="sym">,</span> port)
    <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwd">echo_server</span><span class="sym">(</span><span class="kwd">Integer</span><span class="sym">(</span><span class="kwc">ARGV</span><span class="sym">.</span>shift <span class="sym">||</span> <span class="num">1</span>))
