<span class="line">    1 </span><span class="slc">#!/usr/bin/ruby
</span><span class="line">    2 </span><span class="slc"></span><span class="slc"># -*- mode: ruby -*-
</span><span class="line">    3 </span><span class="slc"></span><span class="slc"># $Id: echo-ruby.code,v 1.4 2004-11-13 07:41:30 bfulgham Exp $
</span><span class="line">    4 </span><span class="slc"></span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span>require <span class="str">&quot;socket&quot;</span>
<span class="line">    7 </span>
<span class="line">    8 </span><span class="kwa">DATA</span> = <span class="str">&quot;Hello there sailor\n&quot;</span>
<span class="line">    9 </span>
<span class="line">   10 </span><span class="kwa">def</span> echo_client<span class="sym">(</span>n<span class="sym">,</span> port<span class="sym">)
</span><span class="line">   11 </span><span class="sym"></span>    sock = TCPsocket.open<span class="sym">(</span><span class="str">'127.0.0.1'</span><span class="sym">,</span> port<span class="sym">)
</span><span class="line">   12 </span><span class="sym"></span>    n.times <span class="kwa">do
</span><span class="line">   13 </span><span class="kwa"></span>        sock.write<span class="sym">(</span><span class="kwa">DATA</span><span class="sym">)
</span><span class="line">   14 </span><span class="sym"></span>        ans = sock.readline
<span class="line">   15 </span>        <span class="kwa">if</span> ans <span class="sym">!</span>= <span class="kwa">DATA then
</span><span class="line">   16 </span><span class="kwa"></span>            raise sprintf<span class="sym">(</span><span class="str">&quot;client: \&quot;</span>%s\<span class="str">&quot; \&quot;</span>%s\<span class="str">&quot;&quot;</span><span class="sym">,</span> <span class="kwa">DATA</span><span class="sym">,</span> ans<span class="sym">)
</span><span class="line">   17 </span><span class="sym"></span>        <span class="kwa">end
</span><span class="line">   18 </span><span class="kwa">    end
</span><span class="line">   19 </span><span class="kwa"></span>    sock.close
<span class="line">   20 </span><span class="kwa">end
</span><span class="line">   21 </span><span class="kwa">
</span><span class="line">   22 </span><span class="kwa">
</span><span class="line">   23 </span><span class="kwa">def</span> echo_server<span class="sym">(</span>n<span class="sym">)
</span><span class="line">   24 </span><span class="sym"></span>    ssock = TCPserver.open<span class="sym">(</span><span class="str">'127.0.0.1'</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span><span class="line">   25 </span><span class="sym"></span>    port = ssock.addr<span class="sym">[</span><span class="num">1</span><span class="sym">]
</span><span class="line">   26 </span><span class="sym"></span>    <span class="kwa">if</span> pid = fork <span class="kwa">then
</span><span class="line">   27 </span><span class="kwa"></span>        <span class="slc"># parent is server
</span><span class="line">   28 </span><span class="slc"></span>        csock = ssock.accept
<span class="line">   29 </span>        n = <span class="num">0
</span><span class="line">   30 </span><span class="num"></span>        <span class="kwa">while</span> str = csock.gets
<span class="line">   31 </span>            n <span class="sym">+</span>= csock.write<span class="sym">(</span>str<span class="sym">)
</span><span class="line">   32 </span><span class="sym"></span>        <span class="kwa">end
</span><span class="line">   33 </span><span class="kwa"></span>        Process.wait
<span class="line">   34 </span>        printf <span class="str">&quot;server processed %d bytes\n&quot;</span><span class="sym">,</span> n
<span class="line">   35 </span>    <span class="kwa">else
</span><span class="line">   36 </span><span class="kwa"></span>        <span class="slc"># child is client
</span><span class="line">   37 </span><span class="slc"></span>        echo_client<span class="sym">(</span>n<span class="sym">,</span> port<span class="sym">)
</span><span class="line">   38 </span><span class="sym"></span>    <span class="kwa">end
</span><span class="line">   39 </span><span class="kwa">end
</span><span class="line">   40 </span><span class="kwa">
</span><span class="line">   41 </span><span class="kwa"></span>echo_server<span class="sym">(</span>Integer<span class="sym">(</span><span class="kwa">ARGV</span>.shift <span class="sym">||</span> <span class="num">1</span><span class="sym">))</span>
