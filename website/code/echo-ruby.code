<span class="slc">#!/usr/bin/ruby
</span><span class="slc"># -*- mode: ruby -*-
</span><span class="slc"># $Id: echo-ruby.code,v 1.5 2005-04-04 14:56:39 bfulgham Exp $
</span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span>
require <span class="str">&quot;socket&quot;</span>

<span class="kwa">DATA</span> = <span class="str">&quot;Hello there sailor\n&quot;</span>

<span class="kwa">def</span> echo_client<span class="sym">(</span>n<span class="sym">,</span> port<span class="sym">)
</span>    sock = TCPsocket.open<span class="sym">(</span><span class="str">'127.0.0.1'</span><span class="sym">,</span> port<span class="sym">)
</span>    n.times <span class="kwa">do
</span>	sock.write<span class="sym">(</span><span class="kwa">DATA</span><span class="sym">)
</span>	ans = sock.readline
	<span class="kwa">if</span> ans <span class="sym">!</span>= <span class="kwa">DATA then
</span>	    raise sprintf<span class="sym">(</span><span class="str">&quot;client: \&quot;</span>%s\<span class="str">&quot; \&quot;</span>%s\<span class="str">&quot;&quot;</span><span class="sym">,</span> <span class="kwa">DATA</span><span class="sym">,</span> ans<span class="sym">)
</span>	<span class="kwa">end
    end
</span>    sock.close
<span class="kwa">end


def</span> echo_server<span class="sym">(</span>n<span class="sym">)
</span>    ssock = TCPserver.open<span class="sym">(</span><span class="str">'127.0.0.1'</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span>    port = ssock.addr<span class="sym">[</span><span class="num">1</span><span class="sym">]
</span>    <span class="kwa">if</span> pid = fork <span class="kwa">then
</span>	<span class="slc"># parent is server
</span>	csock = ssock.accept
	n = <span class="num">0
</span>	<span class="kwa">while</span> str = csock.gets
	    n <span class="sym">+</span>= csock.write<span class="sym">(</span>str<span class="sym">)
</span>	<span class="kwa">end
</span>	Process.wait
        printf <span class="str">&quot;server processed %d bytes\n&quot;</span><span class="sym">,</span> n
    <span class="kwa">else
</span>	<span class="slc"># child is client
</span>	echo_client<span class="sym">(</span>n<span class="sym">,</span> port<span class="sym">)
</span>    <span class="kwa">end
end

</span>echo_server<span class="sym">(</span>Integer<span class="sym">(</span><span class="kwa">ARGV</span>.shift <span class="sym">||</span> <span class="num">1</span><span class="sym">))</span>
