<span class="slc">;;; -*- mode: scheme -*-</span>
<span class="slc">;;; $Id: sieve-bigloo.code,v 1.5 2006-02-10 07:03:48 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>module sieve
	<span class="sym">(</span>main main<span class="sym">)</span>
	<span class="sym">(</span>extern <span class="sym">(</span>macro printf<span class="sym">::</span>int <span class="sym">(</span>string int<span class="sym">)</span> <span class="str">&quot;printf&quot;</span><span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">))</span>
	<span class="sym">(</span>count <span class="num">0</span><span class="sym">)</span>
	<span class="sym">(</span>flags <span class="sym">(</span>make<span class="sym">-</span>vector <span class="num">8192</span><span class="sym">)))</span>
    <span class="sym">(</span>let loop <span class="sym">((</span>iter n<span class="sym">))</span>
      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> iter <span class="num">0</span><span class="sym">)</span>
	  <span class="sym">(</span>begin
              <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
		  <span class="sym">((&gt;=</span> i <span class="num">8192</span><span class="sym">))</span>
		<span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> flags i #t<span class="sym">))</span>
	      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> count <span class="num">0</span><span class="sym">)</span>
	      <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">2</span> <span class="sym">(+</span> <span class="num">1</span> i<span class="sym">)))</span>
		  <span class="sym">((&gt;=</span> i <span class="num">8192</span><span class="sym">))</span>
		<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>vector<span class="sym">-</span>ref flags i<span class="sym">)</span>
		    <span class="sym">(</span>begin
		      <span class="sym">(</span>do <span class="sym">((</span>k <span class="sym">(+</span> i i<span class="sym">) (+</span> k i<span class="sym">)))</span>
			  <span class="sym">((&gt;=</span> k <span class="num">8192</span><span class="sym">))</span>
			<span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> flags k #f<span class="sym">))</span>
		      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> count <span class="sym">(+</span> <span class="num">1</span> count<span class="sym">)))))</span>
	    <span class="sym">(</span>loop <span class="sym">(-</span> iter <span class="num">1</span><span class="sym">)))))</span>
    <span class="sym">(</span>display <span class="str">&quot;Count: &quot;</span><span class="sym">) (</span>display count<span class="sym">) (</span>newline<span class="sym">)))</span>

