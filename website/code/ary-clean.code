<span class="sym">/*</span> The Great Computer Language Shootout
    contributed by Isaac Gouy <span class="sym">(</span>Clean novice<span class="sym">)
</span>   Updated by John van Groningen

   http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/

</span>To compile<span class="sym">:
	</span>   cleanIDE.exe <span class="slc">--batch-force-build &quot;e:\shoot\contrib\clean\ary.prj&quot;
</span>
To run<span class="sym">:
</span>   ary.exe <span class="sym">-</span>con <span class="num">7000
</span><span class="sym">*/

      
</span><span class="kwa">module</span> ary
<span class="kwa">import</span> StdEnv<span class="sym">,</span> StdArrayExtensions<span class="sym">,</span> LanguageShootout

Start <span class="sym">=</span> toString y`.<span class="sym">[</span><span class="num">0</span><span class="sym">] +++</span> <span class="str">&quot; &quot;</span> <span class="sym">+++</span> toString y`.<span class="sym">[</span>n<span class="num">-1</span><span class="sym">] +++</span> <span class="str">&quot;\n&quot;</span>
   <span class="kwa">where
</span>   y` <span class="sym">=</span> loop x y <span class="sym">(</span>n<span class="num">-1</span><span class="sym">)</span> <span class="num">1000
       
   </span>   n <span class="sym">=</span> argi
       x <span class="sym">=</span> createX n
     y <span class="sym">=</span> createUnboxedIntArr n <span class="num">0

   </span>   loop <span class="sym">:: !</span>{#<span class="kwb">Int</span>} <span class="sym">!*</span>{#<span class="kwb">Int</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> .{#<span class="kwb">Int</span>}
      loop x y n rep
      <span class="sym">|</span> rep<span class="sym">==</span><span class="num">0</span>   <span class="sym">=</span> y
                 <span class="sym">=</span> loop x <span class="sym">(</span>inc x y n<span class="sym">)</span> n <span class="sym">(</span>rep<span class="num">-1</span><span class="sym">)
            
                     		                     </span>   inc x y j
      <span class="sym">|</span> j <span class="sym">&gt;=</span> <span class="num">0</span>  #<span class="sym">!</span> yj <span class="sym">=</span> y.<span class="sym">[</span>j<span class="sym">]
                =</span> inc x {y <span class="sym">&amp; [</span>j<span class="sym">] =</span> yj <span class="sym">+</span> x.<span class="sym">[</span>j<span class="sym">]</span>} <span class="sym">(</span>j<span class="num">-1</span><span class="sym">)
		=</span> y

      	      		        	createX <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> {#<span class="kwb">Int</span>}
createX n <span class="sym">=</span> {i \\ i <span class="sym">&lt;- [</span><span class="num">1</span>..n<span class="sym">]</span>}                     
