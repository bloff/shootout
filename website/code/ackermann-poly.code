<span class="com">(* -*- mode: sml -*-</span>
<span class="com"> * $Id: ackermann-poly.code,v 1.8 2006-09-20 05:50:59 bfulgham Exp $</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *)</span>

<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig</span>
    <span class="kwa">val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt; {}</span>
<span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct</span>

<span class="kwa">fun</span> ack<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">) =</span> n<span class="sym">+</span><span class="num">1</span>
  <span class="sym">|</span> ack<span class="sym">(</span>m<span class="sym">,</span><span class="num">0</span><span class="sym">) =</span> ack<span class="sym">(</span>m<span class="sym">-</span><span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">)</span>
  <span class="sym">|</span> ack<span class="sym">(</span>m<span class="sym">,</span>n<span class="sym">) =</span> ack<span class="sym">(</span>m<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>ack<span class="sym">(</span>m<span class="sym">,(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)));</span>

<span class="kwa">fun</span> atoi s <span class="sym">=</span> <span class="kwa">case Int</span>.fromString s <span class="kwa">of</span> SOME num <span class="sym">=&gt;</span> num <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">;</span>
<span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">);</span>

<span class="kwa">fun</span> main<span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =</span>
  <span class="kwa">let</span>
    <span class="kwa">val</span> arg <span class="sym">=</span> hd<span class="sym">(</span>args &#64; <span class="sym">[</span><span class="str">&quot;1&quot;</span><span class="sym">]);</span>
    <span class="kwa">val</span> num <span class="sym">=</span> atoi arg<span class="sym">;</span>
    <span class="kwa">val</span> ack <span class="sym">=</span> ack<span class="sym">(</span><span class="num">3</span><span class="sym">,</span> num<span class="sym">);</span>
    <span class="kwa">val</span> result <span class="sym">=</span> <span class="kwa">Int</span>.toString ack<span class="sym">;</span>
  <span class="kwa">in</span>
      print <span class="str">&quot;Ack(3,&quot;</span><span class="sym">;</span> print arg<span class="sym">;</span> print <span class="str">&quot;): &quot;</span><span class="sym">;</span> print result<span class="sym">;</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
      PolyML.quit<span class="sym">()</span>
  <span class="kwa">end</span><span class="sym">;</span>
<span class="kwa">end</span>

<span class="kwa">val</span> _ <span class="sym">=</span> PolyML.print_depth <span class="num">0</span><span class="sym">;</span>
<span class="kwa">val</span> _ <span class="sym">=</span> PolyML.error_depth <span class="num">0</span><span class="sym">;</span>
<span class="kwa">val</span> _ <span class="sym">=</span> PolyML.onEntry<span class="sym">(</span><span class="kwa">fn</span><span class="sym">() =&gt;</span> Test.main<span class="sym">(</span><span class="str">&quot;ackermann&quot;</span><span class="sym">,</span> CommandLine.arguments<span class="sym">()));</span>
<span class="kwa">val</span> _ <span class="sym">=</span> PolyML.commit<span class="sym">();</span>

