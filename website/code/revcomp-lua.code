<span class="slc">-- The Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- contributed by Mike Pall (with ideas from Rici Lake)</span>

<span class="kwa">local</span> sub <span class="sym">=</span> <span class="kwb">string</span>.sub
iubc <span class="sym">=</span> setmetatable<span class="sym">({</span>
  A<span class="sym">=</span><span class="str">&quot;T&quot;</span><span class="sym">,</span> C<span class="sym">=</span><span class="str">&quot;G&quot;</span><span class="sym">,</span> B<span class="sym">=</span><span class="str">&quot;V&quot;</span><span class="sym">,</span> D<span class="sym">=</span><span class="str">&quot;H&quot;</span><span class="sym">,</span> K<span class="sym">=</span><span class="str">&quot;M&quot;</span><span class="sym">,</span> R<span class="sym">=</span><span class="str">&quot;Y&quot;</span><span class="sym">,</span>
  a<span class="sym">=</span><span class="str">&quot;T&quot;</span><span class="sym">,</span> c<span class="sym">=</span><span class="str">&quot;G&quot;</span><span class="sym">,</span> b<span class="sym">=</span><span class="str">&quot;V&quot;</span><span class="sym">,</span> d<span class="sym">=</span><span class="str">&quot;H&quot;</span><span class="sym">,</span> k<span class="sym">=</span><span class="str">&quot;M&quot;</span><span class="sym">,</span> r<span class="sym">=</span><span class="str">&quot;Y&quot;</span><span class="sym">,</span>
  T<span class="sym">=</span><span class="str">&quot;A&quot;</span><span class="sym">,</span> G<span class="sym">=</span><span class="str">&quot;C&quot;</span><span class="sym">,</span> V<span class="sym">=</span><span class="str">&quot;B&quot;</span><span class="sym">,</span> H<span class="sym">=</span><span class="str">&quot;D&quot;</span><span class="sym">,</span> M<span class="sym">=</span><span class="str">&quot;K&quot;</span><span class="sym">,</span> Y<span class="sym">=</span><span class="str">&quot;R&quot;</span><span class="sym">,</span> U<span class="sym">=</span><span class="str">&quot;A&quot;</span><span class="sym">,</span>
  t<span class="sym">=</span><span class="str">&quot;A&quot;</span><span class="sym">,</span> g<span class="sym">=</span><span class="str">&quot;C&quot;</span><span class="sym">,</span> v<span class="sym">=</span><span class="str">&quot;B&quot;</span><span class="sym">,</span> h<span class="sym">=</span><span class="str">&quot;D&quot;</span><span class="sym">,</span> m<span class="sym">=</span><span class="str">&quot;K&quot;</span><span class="sym">,</span> y<span class="sym">=</span><span class="str">&quot;R&quot;</span><span class="sym">,</span> u<span class="sym">=</span><span class="str">&quot;A&quot;</span><span class="sym">,</span>
  N<span class="sym">=</span><span class="str">&quot;N&quot;</span><span class="sym">,</span> S<span class="sym">=</span><span class="str">&quot;S&quot;</span><span class="sym">,</span> W<span class="sym">=</span><span class="str">&quot;W&quot;</span><span class="sym">,</span> n<span class="sym">=</span><span class="str">&quot;N&quot;</span><span class="sym">,</span> s<span class="sym">=</span><span class="str">&quot;S&quot;</span><span class="sym">,</span> w<span class="sym">=</span><span class="str">&quot;W&quot;</span><span class="sym">,</span>
<span class="sym">}, {</span> __index <span class="sym">=</span> <span class="kwa">function</span><span class="sym">(</span>t<span class="sym">,</span> s<span class="sym">)</span>
  <span class="kwa">local</span> r <span class="sym">=</span> t<span class="sym">[</span>sub<span class="sym">(</span>s<span class="sym">,</span> <span class="num">2</span><span class="sym">)]</span>..t<span class="sym">[</span>sub<span class="sym">(</span>s<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)];</span> t<span class="sym">[</span>s<span class="sym">] =</span> r<span class="sym">;</span> <span class="kwa">return</span> r <span class="kwa">end</span> <span class="sym">})</span>

<span class="kwa">local</span> wcode <span class="sym">= [=[</span>
<span class="kwa">return function</span><span class="sym">(</span>t<span class="sym">,</span> n<span class="sym">)</span>
  <span class="kwa">if</span> n <span class="sym">==</span> <span class="num">1</span> <span class="kwa">then return end</span>
  <span class="kwa">local</span> iubc<span class="sym">,</span> sub<span class="sym">,</span> <span class="kwa">write</span> <span class="sym">=</span> iubc<span class="sym">,</span> <span class="kwb">string</span>.sub<span class="sym">,</span> io.<span class="kwa">write</span>
  <span class="kwa">local</span> s <span class="sym">=</span> <span class="kwb">table</span>.concat<span class="sym">(</span>t<span class="sym">,</span> <span class="str">&quot;&quot;</span><span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
  <span class="kwa">for</span> i<span class="sym">=</span>#s<span class="sym">-</span><span class="num">59</span><span class="sym">,</span><span class="num">1</span><span class="sym">,-</span><span class="num">60</span> <span class="kwa">do</span>
    <span class="kwa">write</span><span class="sym">(]=]</span>
<span class="kwa">for</span> i<span class="sym">=</span><span class="num">59</span><span class="sym">,</span><span class="num">3</span><span class="sym">,-</span><span class="num">4</span> <span class="kwa">do</span> wcode <span class="sym">=</span> wcode..<span class="str">&quot;iubc[sub(s, i+&quot;</span>..<span class="sym">(</span>i<span class="sym">-</span><span class="num">3</span><span class="sym">)</span>..<span class="str">&quot;, i+&quot;</span>..i..<span class="str">&quot;)], &quot;</span> <span class="kwa">end</span>
wcode <span class="sym">=</span> wcode..<span class="sym">[=[</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
  <span class="kwa">end</span>
  <span class="kwa">local</span> r <span class="sym">=</span> #s <span class="sym">%</span> <span class="num">60</span>
  <span class="kwa">if</span> r ~<span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span>
    <span class="kwa">for</span> i<span class="sym">=</span>r<span class="sym">,</span><span class="num">1</span><span class="sym">,-</span><span class="num">4</span> <span class="kwa">do write</span><span class="sym">(</span>iubc<span class="sym">[</span>sub<span class="sym">(</span>s<span class="sym">,</span> i<span class="sym">-</span><span class="num">3</span> <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">and</span> <span class="num">1</span> <span class="kwa">or</span> i<span class="sym">-</span><span class="num">3</span><span class="sym">,</span> i<span class="sym">)])</span> <span class="kwa">end</span>
    <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>
<span class="sym">]=]</span>
<span class="kwa">local</span> writerev <span class="sym">=</span> loadstring<span class="sym">(</span>wcode<span class="sym">)()</span>

<span class="kwa">local</span> t<span class="sym">,</span> n <span class="sym">= {},</span> <span class="num">1</span>
<span class="kwa">for</span> line <span class="kwa">in</span> io.lines<span class="sym">()</span> <span class="kwa">do</span>
  <span class="kwa">local</span> c <span class="sym">=</span> sub<span class="sym">(</span>line<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
  <span class="kwa">if</span> c <span class="sym">==</span> <span class="str">&quot;&gt;&quot;</span> <span class="kwa">then</span> writerev<span class="sym">(</span>t<span class="sym">,</span> n<span class="sym">);</span> io.<span class="kwa">write</span><span class="sym">(</span>line<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span> n <span class="sym">=</span> <span class="num">1</span>
  <span class="kwa">elseif</span> c ~<span class="sym">=</span> <span class="str">&quot;;&quot;</span> <span class="kwa">then</span> t<span class="sym">[</span>n<span class="sym">] =</span> line<span class="sym">;</span> n <span class="sym">=</span> n <span class="sym">+</span> <span class="num">1</span> <span class="kwa">end</span>
<span class="kwa">end</span>
writerev<span class="sym">(</span>t<span class="sym">,</span> n<span class="sym">)</span>
