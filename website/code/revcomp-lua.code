<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- contributed by Isaac Gouy</span>


<span class="slc">-- define IUB ambiguity code complements</span>

<span class="kwa">local</span> iubComplement <span class="sym">= {</span>
    A <span class="sym">=</span> <span class="str">&quot;T&quot;</span>
   <span class="sym">,</span>C <span class="sym">=</span> <span class="str">&quot;G&quot;</span>
   <span class="sym">,</span>G <span class="sym">=</span> <span class="str">&quot;C&quot;</span>
   <span class="sym">,</span>T <span class="sym">=</span> <span class="str">&quot;A&quot;</span>

   <span class="sym">,</span>B <span class="sym">=</span> <span class="str">&quot;V&quot;</span>
   <span class="sym">,</span>D <span class="sym">=</span> <span class="str">&quot;H&quot;</span>
   <span class="sym">,</span>H <span class="sym">=</span> <span class="str">&quot;D&quot;</span>
   <span class="sym">,</span>K <span class="sym">=</span> <span class="str">&quot;M&quot;</span>
   <span class="sym">,</span>M <span class="sym">=</span> <span class="str">&quot;K&quot;</span>
   <span class="sym">,</span>R <span class="sym">=</span> <span class="str">&quot;Y&quot;</span>
   <span class="sym">,</span>V <span class="sym">=</span> <span class="str">&quot;B&quot;</span>
   <span class="sym">,</span>Y <span class="sym">=</span> <span class="str">&quot;R&quot;</span>
   <span class="sym">}</span>


<span class="kwa">local function</span> writeFasta<span class="sym">(</span>desc<span class="sym">,</span>a<span class="sym">)</span>
   io.<span class="kwa">write</span><span class="sym">(</span>desc<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>

   <span class="kwa">local</span> n<span class="sym">,</span> m<span class="sym">,</span> length<span class="sym">,</span> i <span class="sym">=</span> <span class="kwb">string</span>.len<span class="sym">(</span>a<span class="sym">),</span> <span class="num">0</span><span class="sym">,</span> <span class="num">60</span><span class="sym">,</span> <span class="num">1</span>
   <span class="kwa">while</span> i <span class="sym">&lt;=</span> n <span class="kwa">do</span>
      m <span class="sym">=</span> m <span class="sym">+</span> length
      <span class="kwa">if</span> n <span class="sym">&lt;</span> m <span class="kwa">then</span> m <span class="sym">=</span> n <span class="kwa">end</span>
      <span class="kwa">while</span> i <span class="sym">&lt;=</span> m <span class="kwa">do</span>
         io.<span class="kwa">write</span><span class="sym">(</span> <span class="kwb">string</span>.sub<span class="sym">(</span>a<span class="sym">,</span>i<span class="sym">,</span>i<span class="sym">) );</span>
         i <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span>
      <span class="kwa">end</span>
      io.<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
   <span class="kwa">end</span>
<span class="kwa">end</span>


<span class="kwa">local function</span> reverseComplement<span class="sym">(</span>a<span class="sym">)</span>
   <span class="kwa">local</span> u <span class="sym">=</span> <span class="kwb">string</span>.upper<span class="sym">(</span>a<span class="sym">)</span>
   <span class="kwa">local</span> t <span class="sym">= {</span><span class="str">&quot;&quot;</span><span class="sym">}</span>
   <span class="kwa">for</span> i <span class="sym">=</span> <span class="kwb">string</span>.len<span class="sym">(</span>u<span class="sym">),</span><span class="num">1</span><span class="sym">,-</span><span class="num">1</span> <span class="kwa">do</span>
      <span class="kwa">local</span> c <span class="sym">=</span> <span class="kwb">string</span>.sub<span class="sym">(</span>u<span class="sym">,</span>i<span class="sym">,</span>i<span class="sym">)</span>
      <span class="kwb">table</span>.insert<span class="sym">(</span>t<span class="sym">, (</span>iubComplement<span class="sym">[</span>c<span class="sym">]</span> <span class="kwa">or</span> c<span class="sym">))</span>
   <span class="kwa">end</span>
   <span class="kwa">return</span> <span class="kwb">table</span>.concat<span class="sym">(</span>t<span class="sym">)</span>
<span class="kwa">end</span>


<span class="slc">-- Read FASTA, extract fragment, write reverse complement</span>

<span class="kwa">local</span> desc <span class="sym">=</span> <span class="str">&quot;&quot;</span>
<span class="kwa">local</span> fragment <span class="sym">= {</span><span class="str">&quot;&quot;</span><span class="sym">}</span>
<span class="kwa">for</span> line <span class="kwa">in</span> io.lines<span class="sym">()</span> <span class="kwa">do</span>
   <span class="kwa">local</span> c <span class="sym">=</span> <span class="kwb">string</span>.sub<span class="sym">(</span>line<span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">)</span>

   <span class="kwa">if</span> c <span class="sym">==</span> <span class="str">&quot;&gt;&quot;</span> <span class="kwa">then</span>
      <span class="kwa">if</span> <span class="kwb">string</span>.len<span class="sym">(</span>desc<span class="sym">) &gt;</span> <span class="num">0</span> <span class="kwa">then</span>
         writeFasta<span class="sym">(</span>desc<span class="sym">,</span> reverseComplement<span class="sym">(</span> <span class="kwb">table</span>.concat<span class="sym">(</span>fragment<span class="sym">) ))</span>
         fragment <span class="sym">= {</span><span class="str">&quot;&quot;</span><span class="sym">}</span>
      <span class="kwa">end</span>
      desc <span class="sym">=</span> line

   <span class="kwa">elseif</span> c ~<span class="sym">=</span> <span class="str">&quot;;&quot;</span> <span class="kwa">then</span>
      <span class="kwb">table</span>.insert<span class="sym">(</span>fragment<span class="sym">,</span>line<span class="sym">)</span>
   <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">if</span> <span class="kwb">string</span>.len<span class="sym">(</span>desc<span class="sym">) &gt;</span> <span class="num">0</span> <span class="kwa">then</span>
   writeFasta<span class="sym">(</span>desc<span class="sym">,</span> reverseComplement<span class="sym">(</span> <span class="kwb">table</span>.concat<span class="sym">(</span>fragment<span class="sym">) ))</span>
<span class="kwa">end</span>
