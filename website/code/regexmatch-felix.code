<span class="line">    1 </span><span class="slc">//
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// Contributed by John Skaller
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">//
</span><span class="line">    4 </span><span class="slc"></span><span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;
</span><span class="line">    5 </span><span class="sym"></span>n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);
</span><span class="line">    6 </span><span class="sym">
</span><span class="line">    7 </span><span class="sym"></span><span class="kwa">open</span> Lexer<span class="sym">;
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym"></span><span class="kwa">regexp</span> digit <span class="sym">= [</span><span class="str">&quot;0123456789&quot;</span><span class="sym">];
</span><span class="line">   10 </span><span class="sym"></span><span class="kwa">regexp</span> digits3 <span class="sym">=</span> digit digit digit<span class="sym">;
</span><span class="line">   11 </span><span class="sym"></span><span class="kwa">regexp</span> digits4 <span class="sym">=</span>  digits3 digit<span class="sym">;
</span><span class="line">   12 </span><span class="sym">
</span><span class="line">   13 </span><span class="sym"></span><span class="kwa">regexp</span> area_code <span class="sym">=</span> digits3 <span class="sym">|</span> <span class="str">&quot;(&quot;</span> digits3 <span class="str">&quot;)&quot;</span><span class="sym">;
</span><span class="line">   14 </span><span class="sym"></span><span class="kwa">regexp</span> exchange <span class="sym">=</span> digits3<span class="sym">;
</span><span class="line">   15 </span><span class="sym">
</span><span class="line">   16 </span><span class="sym"></span><span class="kwa">regexp</span> phone <span class="sym">=</span> area_code <span class="str">&quot; &quot;</span> exchange <span class="sym">(</span><span class="str">&quot; &quot;</span> <span class="sym">|</span> <span class="str">&quot;-&quot;</span><span class="sym">)</span> digits4<span class="sym">;
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym"></span><span class="slc">// Felix, like Python, provides no literals of char type
</span><span class="line">   19 </span><span class="slc"></span>zero <span class="sym">:=</span> ord<span class="sym">(</span><span class="str">&quot;0&quot;</span>.<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span><span class="line">   20 </span><span class="sym"></span>nine <span class="sym">:=</span> ord<span class="sym">(</span><span class="str">&quot;9&quot;</span>.<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span><span class="line">   21 </span><span class="sym">
</span><span class="line">   22 </span><span class="sym"></span><span class="slc">// Felix regular matching currently only supports
</span><span class="line">   23 </span><span class="slc"></span><span class="slc">// actual regular sets of strings -- it does not support
</span><span class="line">   24 </span><span class="slc"></span><span class="slc">// lookback or lookahead because they're not regular
</span><span class="line">   25 </span><span class="slc"></span><span class="slc">//
</span><span class="line">   26 </span><span class="slc"></span><span class="slc">// So we have to hand code the context check.
</span><span class="line">   27 </span><span class="slc"></span><span class="slc">//
</span><span class="line">   28 </span><span class="slc"></span><span class="kwa">fun</span> check_context<span class="sym">(</span>start<span class="sym">:</span> iterator<span class="sym">,</span> finish<span class="sym">:</span> iterator<span class="sym">):</span> <span class="kwb">string</span> <span class="sym">=
</span><span class="line">   29 </span><span class="sym">{
</span><span class="line">   30 </span><span class="sym"></span>  prior <span class="sym">:=</span>  ord<span class="sym">(</span>deref<span class="sym">(</span>start<span class="num">-1</span><span class="sym">));
</span><span class="line">   31 </span><span class="sym"></span>  next <span class="sym">:=</span> ord<span class="sym">(</span>deref<span class="sym">(</span>finish<span class="sym">));
</span><span class="line">   32 </span><span class="sym"></span>  <span class="kwa">return
</span><span class="line">   33 </span><span class="kwa">    if</span> zero <span class="sym">&lt;=</span> prior <span class="sym">&amp;&lt;=</span> nine
<span class="line">   34 </span>    <span class="kwa">or</span> zero <span class="sym">&lt;=</span> next <span class="sym">&amp;&lt;=</span> nine
<span class="line">   35 </span>    <span class="kwa">then</span> <span class="str">&quot;&quot;</span>
<span class="line">   36 </span>    <span class="kwa">else</span> string_between<span class="sym">(</span>start<span class="sym">,</span> finish<span class="sym">)
</span><span class="line">   37 </span><span class="sym"></span>    <span class="kwa">endif
</span><span class="line">   38 </span><span class="kwa"></span>  <span class="sym">;
</span><span class="line">   39 </span><span class="sym">}
</span><span class="line">   40 </span><span class="sym">
</span><span class="line">   41 </span><span class="sym"></span><span class="slc">// this is the actual lexer function
</span><span class="line">   42 </span><span class="slc"></span><span class="kwa">fun</span> lexit <span class="sym">(</span>start<span class="sym">:</span>iterator<span class="sym">,</span> finish<span class="sym">:</span>iterator<span class="sym">):</span> iterator <span class="sym">*</span> <span class="kwb">string</span> <span class="sym">=&gt;
</span><span class="line">   43 </span><span class="sym"></span>  reglex start <span class="kwa">to</span> finish <span class="kwa">with
</span><span class="line">   44 </span><span class="kwa"></span>  <span class="sym">|</span> phone <span class="sym">=&gt;</span> check_context <span class="sym">(</span>lexeme_start<span class="sym">,</span> lexeme_end<span class="sym">)
</span><span class="line">   45 </span><span class="sym">  |</span> _ <span class="sym">=&gt;</span> <span class="str">&quot;&quot;</span>
<span class="line">   46 </span>  <span class="kwa">endmatch
</span><span class="line">   47 </span><span class="kwa"></span><span class="sym">;
</span><span class="line">   48 </span><span class="sym">
</span><span class="line">   49 </span><span class="sym"></span><span class="slc">// hack so context_check won't crash (pre- and append space)
</span><span class="line">   50 </span><span class="slc"></span><span class="slc">//val data = &quot; &quot; + Text_file::load(Text_file::stdin)+&quot; &quot;;
</span><span class="line">   51 </span><span class="slc"></span><span class="kwa">val</span> data <span class="sym">=</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> Text_file<span class="sym">::</span>load<span class="sym">(</span><span class="str">&quot;bagley/data/phone_numbers.data&quot;</span><span class="sym">)+</span><span class="str">&quot; &quot;</span><span class="sym">;
</span><span class="line">   52 </span><span class="sym"></span>first <span class="sym">:=</span> Lexer<span class="sym">::</span>start_iterator data<span class="sym">;
</span><span class="line">   53 </span><span class="sym"></span>finish <span class="sym">:=</span> Lexer<span class="sym">::</span>end_iterator data<span class="sym">;
</span><span class="line">   54 </span><span class="sym">
</span><span class="line">   55 </span><span class="sym">
</span><span class="line">   56 </span><span class="sym"></span><span class="kwa">var</span> i<span class="sym">=</span>n<span class="sym">;
</span><span class="line">   57 </span><span class="sym"></span><span class="kwa">var</span> current<span class="sym">:</span> iterator<span class="sym">;
</span><span class="line">   58 </span><span class="sym"></span><span class="kwa">var</span> s<span class="sym">:</span> <span class="kwb">string</span><span class="sym">;
</span><span class="line">   59 </span><span class="sym"></span>whilst i<span class="sym">&gt;</span><span class="num">1</span> do
<span class="line">   60 </span>  current <span class="sym">=</span> first<span class="sym">;
</span><span class="line">   61 </span><span class="sym"></span>  until current <span class="sym">==</span> finish do
<span class="line">   62 </span>    def current<span class="sym">,</span> s <span class="sym">=</span> lexit<span class="sym">(</span>current<span class="sym">,</span> finish<span class="sym">);
</span><span class="line">   63 </span><span class="sym"></span>  done<span class="sym">;
</span><span class="line">   64 </span><span class="sym">  --</span>i<span class="sym">;
</span><span class="line">   65 </span><span class="sym"></span>done<span class="sym">;
</span><span class="line">   66 </span><span class="sym">
</span><span class="line">   67 </span><span class="sym"></span><span class="kwa">proc</span> print_phone<span class="sym">(</span>x<span class="sym">:</span><span class="kwb">string</span><span class="sym">,</span> j<span class="sym">:</span><span class="kwb">int</span><span class="sym">) {
</span><span class="line">   68 </span><span class="sym"></span>  n <span class="sym">:=</span> len x<span class="sym">;
</span><span class="line">   69 </span><span class="sym"></span>  <span class="kwa">var</span> s <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;
</span><span class="line">   70 </span><span class="sym"></span>  <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   71 </span><span class="sym"></span>  whilst i<span class="sym">&lt;</span>n do
<span class="line">   72 </span>    <span class="kwa">if</span> zero <span class="sym">&lt;=</span> ord<span class="sym">(</span>x.<span class="sym">[</span>i<span class="sym">]) &amp;&lt;=</span> nine do
<span class="line">   73 </span>      s <span class="sym">=</span> s <span class="sym">+</span> ord<span class="sym">(</span>x.<span class="sym">[</span>i<span class="sym">]);
</span><span class="line">   74 </span><span class="sym"></span>    done<span class="sym">;
</span><span class="line">   75 </span><span class="sym">    ++</span>i<span class="sym">;
</span><span class="line">   76 </span><span class="sym"></span>  done<span class="sym">;
</span><span class="line">   77 </span><span class="sym"></span>  <span class="kwa">print</span> j<span class="sym">;</span> <span class="kwa">print</span> <span class="str">&quot;: &quot;</span><span class="sym">;
</span><span class="line">   78 </span><span class="sym"></span>  <span class="kwa">print</span> <span class="sym">(</span><span class="str">&quot;(&quot;</span><span class="sym">+</span>s.<span class="sym">[</span><span class="num">0</span> <span class="kwa">to</span> <span class="num">3</span><span class="sym">]+</span><span class="str">&quot;) &quot;</span><span class="sym">+</span>s.<span class="sym">[</span><span class="num">3</span> <span class="kwa">to</span> <span class="num">6</span><span class="sym">]+</span><span class="str">&quot; &quot;</span><span class="sym">+</span>s.<span class="sym">[</span><span class="num">6</span> <span class="kwa">to</span> <span class="num">10</span><span class="sym">]);</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="line">   79 </span><span class="sym">}
</span><span class="line">   80 </span><span class="sym">
</span><span class="line">   81 </span><span class="sym"></span>current <span class="sym">=</span> first<span class="sym">;
</span><span class="line">   82 </span><span class="sym"></span><span class="kwa">var</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   83 </span><span class="sym"></span>until current <span class="sym">==</span> finish do
<span class="line">   84 </span> def current<span class="sym">,</span> s <span class="sym">=</span> lexit<span class="sym">(</span>current<span class="sym">,</span> finish<span class="sym">);
</span><span class="line">   85 </span><span class="sym"></span> <span class="kwa">if</span> s <span class="sym">!=</span> <span class="str">&quot;&quot;</span> do  <span class="sym">++</span>j<span class="sym">;</span> print_phone <span class="sym">(</span>s<span class="sym">,</span>j<span class="sym">);</span> done<span class="sym">;
</span><span class="line">   86 </span><span class="sym"></span>done<span class="sym">;
</span><span class="line">   87 </span><span class="sym"></span>
