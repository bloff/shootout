<span class="slc">//
</span><span class="slc">// Contributed by John Skaller
</span><span class="slc">//
</span><span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;
</span>n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);

</span><span class="kwa">open</span> Lexer<span class="sym">;

</span><span class="kwa">regexp</span> digit <span class="sym">= [</span><span class="str">&quot;0123456789&quot;</span><span class="sym">];
</span><span class="kwa">regexp</span> digits3 <span class="sym">=</span> digit digit digit<span class="sym">;
</span><span class="kwa">regexp</span> digits4 <span class="sym">=</span>  digits3 digit<span class="sym">;

</span><span class="kwa">regexp</span> area_code <span class="sym">=</span> digits3 <span class="sym">|</span> <span class="str">&quot;(&quot;</span> digits3 <span class="str">&quot;)&quot;</span><span class="sym">;
</span><span class="kwa">regexp</span> exchange <span class="sym">=</span> digits3<span class="sym">;

</span><span class="kwa">regexp</span> phone <span class="sym">=</span> area_code <span class="str">&quot; &quot;</span> exchange <span class="sym">(</span><span class="str">&quot; &quot;</span> <span class="sym">|</span> <span class="str">&quot;-&quot;</span><span class="sym">)</span> digits4<span class="sym">;

</span><span class="slc">// Felix, like Python, provides no literals of char type
</span>zero <span class="sym">:=</span> ord<span class="sym">(</span><span class="str">&quot;0&quot;</span>.<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>nine <span class="sym">:=</span> ord<span class="sym">(</span><span class="str">&quot;9&quot;</span>.<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span><span class="slc">// Felix regular matching currently only supports
</span><span class="slc">// actual regular sets of strings -- it does not support
</span><span class="slc">// lookback or lookahead because they're not regular
</span><span class="slc">//
</span><span class="slc">// So we have to hand code the context check.
</span><span class="slc">//
</span><span class="kwa">fun</span> check_context<span class="sym">(</span>start<span class="sym">:</span> iterator<span class="sym">,</span> finish<span class="sym">:</span> iterator<span class="sym">):</span> <span class="kwb">string</span> <span class="sym">=
{
</span>  prior <span class="sym">:=</span>  ord<span class="sym">(</span>deref<span class="sym">(</span>start<span class="num">-1</span><span class="sym">));
</span>  next <span class="sym">:=</span> ord<span class="sym">(</span>deref<span class="sym">(</span>finish<span class="sym">));
</span>  <span class="kwa">return
    if</span> zero <span class="sym">&lt;=</span> prior <span class="sym">&amp;&lt;=</span> nine
    <span class="kwa">or</span> zero <span class="sym">&lt;=</span> next <span class="sym">&amp;&lt;=</span> nine
    <span class="kwa">then</span> <span class="str">&quot;&quot;</span>
    <span class="kwa">else</span> string_between<span class="sym">(</span>start<span class="sym">,</span> finish<span class="sym">)
</span>    <span class="kwa">endif
</span>  <span class="sym">;
}

</span><span class="slc">// this is the actual lexer function
</span><span class="kwa">fun</span> lexit <span class="sym">(</span>start<span class="sym">:</span>iterator<span class="sym">,</span> finish<span class="sym">:</span>iterator<span class="sym">):</span> iterator <span class="sym">*</span> <span class="kwb">string</span> <span class="sym">=&gt;
</span>  reglex start <span class="kwa">to</span> finish <span class="kwa">with
</span>  <span class="sym">|</span> phone <span class="sym">=&gt;</span> check_context <span class="sym">(</span>lexeme_start<span class="sym">,</span> lexeme_end<span class="sym">)
  |</span> _ <span class="sym">=&gt;</span> <span class="str">&quot;&quot;</span>
  <span class="kwa">endmatch
</span><span class="sym">;

</span><span class="slc">// hack so context_check won't crash (pre- and append space)
</span><span class="kwa">val</span> data <span class="sym">=</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> Text_file<span class="sym">::</span>load<span class="sym">(</span>Text_file<span class="sym">::</span>stdin<span class="sym">)+</span><span class="str">&quot; &quot;</span><span class="sym">;
</span>first <span class="sym">:=</span> Lexer<span class="sym">::</span>start_iterator data<span class="sym">;
</span>finish <span class="sym">:=</span> Lexer<span class="sym">::</span>end_iterator data<span class="sym">;


</span><span class="kwa">var</span> i<span class="sym">=</span>n<span class="sym">;
</span><span class="kwa">var</span> current<span class="sym">:</span> iterator<span class="sym">;
</span><span class="kwa">var</span> s<span class="sym">:</span> <span class="kwb">string</span><span class="sym">;
</span>whilst i<span class="sym">&gt;</span><span class="num">1</span> do
  current <span class="sym">=</span> first<span class="sym">;
</span>  until current <span class="sym">==</span> finish do
    current<span class="sym">,</span> s <span class="sym">=</span> lexit<span class="sym">(</span>current<span class="sym">,</span> finish<span class="sym">);
</span>  done<span class="sym">;
  --</span>i<span class="sym">;
</span>done<span class="sym">;

</span><span class="kwa">proc</span> print_phone<span class="sym">(</span>x<span class="sym">:</span><span class="kwb">string</span><span class="sym">,</span> j<span class="sym">:</span><span class="kwb">int</span><span class="sym">) {
</span>  n <span class="sym">:=</span> len x<span class="sym">;
</span>  <span class="kwa">var</span> s <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;
</span>  <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>  whilst i<span class="sym">&lt;</span>n do
    <span class="kwa">if</span> zero <span class="sym">&lt;=</span> ord<span class="sym">(</span>x.<span class="sym">[</span>i<span class="sym">]) &amp;&lt;=</span> nine do
      s <span class="sym">=</span> s <span class="sym">+</span> ord<span class="sym">(</span>x.<span class="sym">[</span>i<span class="sym">]);
</span>    done<span class="sym">;
    ++</span>i<span class="sym">;
</span>  done<span class="sym">;
</span>  <span class="kwa">print</span> j<span class="sym">;</span> <span class="kwa">print</span> <span class="str">&quot;: &quot;</span><span class="sym">;
</span>  <span class="kwa">print</span> <span class="sym">(</span><span class="str">&quot;(&quot;</span><span class="sym">+</span>s.<span class="sym">[</span><span class="num">0</span> <span class="kwa">to</span> <span class="num">3</span><span class="sym">]+</span><span class="str">&quot;) &quot;</span><span class="sym">+</span>s.<span class="sym">[</span><span class="num">3</span> <span class="kwa">to</span> <span class="num">6</span><span class="sym">]+</span><span class="str">&quot;-&quot;</span><span class="sym">+</span>s.<span class="sym">[</span><span class="num">6</span> <span class="kwa">to</span> <span class="num">10</span><span class="sym">]);</span> <span class="kwa">endl</span><span class="sym">;
}

</span>current <span class="sym">=</span> first<span class="sym">;
</span><span class="kwa">var</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>until current <span class="sym">==</span> finish do
 current<span class="sym">,</span> s <span class="sym">=</span> lexit<span class="sym">(</span>current<span class="sym">,</span> finish<span class="sym">);
</span> <span class="kwa">if</span> s <span class="sym">!=</span> <span class="str">&quot;&quot;</span> do  <span class="sym">++</span>j<span class="sym">;</span> print_phone <span class="sym">(</span>s<span class="sym">,</span>j<span class="sym">);</span> done<span class="sym">;
</span>done<span class="sym">;
</span>
