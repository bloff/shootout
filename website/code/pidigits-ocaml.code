<span class="com">(* pidigits.ml
    Requires the nums library, so compile with something like:
     ocamlopt -o pidigits -noassert -unsafe nums.cmxa pidigits.ml
 *)</span>

  <span class="kwa">open</span> Big_int<span class="sym">;;
 </span><span class="kwa">open</span> Ratio<span class="sym">;;
 
 </span><span class="kwa">external</span> set_byte<span class="sym">:</span> <span class="kwb">string</span> <span class="sym">-&gt;</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> <span class="kwb">int</span> <span class="sym">-&gt;</span> <span class="kwb">unit</span> <span class="sym">=</span> <span class="str">&quot;%string_safe_set&quot;</span><span class="sym">;;
 
 </span><span class="kwa">let</span> extr <span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">)</span> x <span class="sym">=
  </span>  create_ratio
      <span class="sym">(</span>add_big_int <span class="sym">(</span>mult_int_big_int x q<span class="sym">)</span> r<span class="sym">)
     (</span>add_big_int <span class="sym">(</span>mult_int_big_int x s<span class="sym">)</span> t<span class="sym">);;
 
     </span><span class="kwa">let</span> st_comp <span class="sym">(</span>q<span class="sym">,</span>r<span class="sym">,</span>s<span class="sym">,</span>t<span class="sym">) (</span>q<span class="str">',r'</span><span class="sym">,</span>s<span class="str">',t'</span><span class="sym">) =
    (
 </span>  add_big_int <span class="sym">(</span>mult_big_int q q<span class="str">') (mult_big_int r s'</span><span class="sym">),
 </span>  add_big_int <span class="sym">(</span>mult_big_int q r<span class="str">') (mult_big_int r t'</span><span class="sym">),
 </span>  add_big_int <span class="sym">(</span>mult_big_int s q<span class="str">') (mult_big_int t s'</span><span class="sym">),
 </span>  add_big_int <span class="sym">(</span>mult_big_int s r<span class="str">') (mult_big_int t t'</span><span class="sym">)
     );;
 
   </span><span class="kwa">let</span> strMaker <span class="sym">() =
 </span>  <span class="kwa">let</span> safe z n <span class="sym">= (</span>eq_big_int n <span class="sym">(</span>floor_ratio <span class="sym">(</span>extr z <span class="num">4</span><span class="sym">)))
 </span>  <span class="kwa">and</span> next z <span class="sym">=</span> floor_ratio <span class="sym">(</span>extr z <span class="num">3</span><span class="sym">)
 </span>  <span class="kwa">and</span> cons <span class="sym">=</span> st_comp
   <span class="kwa">and</span> prod z n <span class="sym">=
 </span>    st_comp <span class="sym">((</span>big_int_of_int <span class="num">10</span><span class="sym">),</span> mult_int_big_int ~<span class="num">-10</span> n<span class="sym">,</span> zero_big_int<span class="sym">,</span> unit_big_int<span class="sym">)</span> z
   <span class="kwa">and</span> lfts <span class="sym">=
 </span>    Stream.from
      <span class="sym">(</span><span class="kwa">fun</span> i <span class="sym">-&gt;
  </span>      Some <span class="sym">(</span>big_int_of_int i<span class="sym">,</span> big_int_of_int <span class="sym">(</span><span class="num">4</span><span class="sym">*</span>i <span class="sym">+</span> <span class="num">2</span><span class="sym">),</span> zero_big_int<span class="sym">,</span> big_int_of_int <span class="sym">(</span><span class="num">2</span><span class="sym">*</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">)))
 </span>  <span class="kwa">and</span> state <span class="sym">=</span> ref <span class="sym">(</span>unit_big_int<span class="sym">,</span> zero_big_int<span class="sym">,</span> zero_big_int<span class="sym">,</span> unit_big_int<span class="sym">)</span> <span class="kwa">in
 </span>  ignore <span class="sym">(</span>Stream.next lfts<span class="sym">);
 </span>  <span class="kwa">fun</span> <span class="sym">(</span>i <span class="sym">:</span> <span class="kwb">int</span><span class="sym">) -&gt;
 </span>    <span class="kwa">let</span> y <span class="sym">=</span> ref <span class="sym">(</span>next <span class="sym">!</span>state<span class="sym">)</span> <span class="kwa">in
     while</span> not <span class="sym">(</span>safe <span class="sym">!</span>state <span class="sym">!</span>y<span class="sym">)</span> <span class="kwa">do
 </span>      state <span class="sym">:=</span> cons <span class="sym">!</span>state <span class="sym">(</span>Stream.next lfts<span class="sym">);
 </span>      y <span class="sym">:=</span> next <span class="sym">!</span>state
     <span class="kwa">done</span><span class="sym">;
 </span>    state <span class="sym">:=</span> prod <span class="sym">!</span>state <span class="sym">!</span>y<span class="sym">;
 </span>    Some <span class="sym">(</span>int_of_big_int <span class="sym">!</span>y <span class="sym">+</span> <span class="num">0x30</span><span class="sym">);;
 
     </span><span class="kwa">let</span> _ <span class="sym">=
 </span>  <span class="kwa">let</span> n <span class="sym">=</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)
 </span>  <span class="kwa">and</span> piStream <span class="sym">=</span> Stream.from <span class="sym">(</span>strMaker <span class="sym">())</span> <span class="kwa">in
   let</span> pi <span class="sym">=</span> String.create <span class="num">10</span> <span class="kwa">in
   let rec</span> loop i ten <span class="sym">=
 </span>    <span class="kwa">if</span> i <span class="sym">&lt;=</span> n <span class="kwa">then
 </span>      <span class="sym">(</span>set_byte pi ten <span class="sym">(</span>Stream.next piStream<span class="sym">);
 </span>      loop <span class="sym">(</span>succ i<span class="sym">)
            (</span><span class="kwa">if</span> ten <span class="sym">=</span> <span class="num">9</span> <span class="kwa">then</span> <span class="sym">(</span>Printf.printf <span class="str">&quot;%s</span><span class="esc">\t</span><span class="str">:%d</span><span class="esc">\n</span><span class="str">&quot;</span> pi i<span class="sym">;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">else</span> succ ten<span class="sym">))
 </span>    <span class="kwa">else if</span> ten <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">(</span>String.fill pi ten <span class="sym">(</span><span class="num">10</span> <span class="sym">-</span> ten<span class="sym">)</span> <span class="str">' '</span><span class="sym">;
 </span>         Printf.printf <span class="str">&quot;%s</span><span class="esc">\t</span><span class="str">:%d</span><span class="esc">\n</span><span class="str">&quot;</span> pi <span class="sym">(</span>pred i<span class="sym">))</span> <span class="kwa">in
 </span>  loop <span class="num">1 0</span><span class="sym">;;</span>
