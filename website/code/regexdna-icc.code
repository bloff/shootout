<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Josh Goldfoot</span>
<span class="com">*/</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;string.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;regex.h&gt;</span>

<span class="kwb">void</span> <span class="kwd">regsub2</span> <span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>buffer<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>searchFor<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>replaceWith<span class="sym">,</span>
	 <span class="kwb">unsigned long</span> buflen<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">**</span>returnBuf<span class="sym">,</span> <span class="kwb">unsigned long</span><span class="sym">*</span> newLen<span class="sym">)</span>
<span class="sym">{</span>
  regex_t preg<span class="sym">;</span>
  regmatch_t pmatch<span class="sym">;</span>
  <span class="kwb">int</span> result<span class="sym">,</span> replaceLen<span class="sym">;</span>
  <span class="sym">*</span>returnBuf <span class="sym">=</span> <span class="kwd">malloc</span> <span class="sym">(</span>buflen <span class="sym">*</span> <span class="num">14</span> <span class="sym">/</span> <span class="num">10</span><span class="sym">);</span>
  <span class="kwa">if</span> <span class="sym">(!*</span>returnBuf<span class="sym">)</span>
    <span class="kwa">return</span><span class="sym">;</span>
  <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">regcomp</span> <span class="sym">(&amp;</span>preg<span class="sym">,</span> searchFor<span class="sym">,</span> REG_EXTENDED <span class="sym">|</span> REG_NEWLINE<span class="sym">) !=</span> <span class="num">0</span><span class="sym">)</span>
    <span class="kwa">return</span><span class="sym">;</span>
  <span class="kwb">unsigned long</span> start<span class="sym">;</span>
  replaceLen <span class="sym">=</span> <span class="kwd">strlen</span> <span class="sym">(</span>replaceWith<span class="sym">);</span>
  result <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  start <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="sym">*</span>newLen <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">while</span> <span class="sym">(</span>result <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
    <span class="sym">{</span>
      result <span class="sym">=</span> <span class="kwd">regexec</span> <span class="sym">(&amp;</span>preg<span class="sym">, &amp;(</span>buffer<span class="sym">[</span>start<span class="sym">]),</span> <span class="num">1</span><span class="sym">, &amp;</span>pmatch<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
      <span class="kwa">if</span> <span class="sym">(</span>result <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
	<span class="sym">{</span>
	  <span class="kwa">if</span> <span class="sym">(</span>pmatch<span class="sym">.</span>rm_so <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
	    <span class="kwd">memcpy</span><span class="sym">(*</span>returnBuf <span class="sym">+ *</span>newLen<span class="sym">, &amp;(</span>buffer<span class="sym">[</span>start<span class="sym">]),</span> pmatch<span class="sym">.</span>rm_so<span class="sym">);</span>
	    <span class="sym">*</span>newLen <span class="sym">= *</span>newLen <span class="sym">+</span> pmatch<span class="sym">.</span>rm_so<span class="sym">;</span>
	  <span class="sym">}</span>
	  <span class="kwd">memcpy</span><span class="sym">(*</span>returnBuf <span class="sym">+ *</span>newLen<span class="sym">,</span> replaceWith<span class="sym">,</span> replaceLen<span class="sym">);</span>
	  <span class="sym">*</span>newLen <span class="sym">= *</span>newLen <span class="sym">+</span> replaceLen<span class="sym">;</span>
	  start <span class="sym">=</span> start <span class="sym">+</span> pmatch<span class="sym">.</span>rm_eo<span class="sym">;</span>
	<span class="sym">}</span>
      <span class="kwa">else</span>
	<span class="sym">{</span>
	  <span class="kwd">memcpy</span><span class="sym">(*</span>returnBuf <span class="sym">+ *</span>newLen<span class="sym">, &amp;(</span>buffer<span class="sym">[</span>start<span class="sym">]),</span> buflen<span class="sym">-</span>start<span class="sym">);</span>
	  <span class="sym">*</span>newLen <span class="sym">= *</span>newLen <span class="sym">+</span> buflen <span class="sym">-</span> start<span class="sym">;</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">regsub</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">**</span> bufHandle<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> searchFor<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> replaceWith<span class="sym">,</span> <span class="kwb">unsigned long</span> <span class="sym">*</span>buflen<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwb">char</span><span class="sym">*</span> tmp<span class="sym">;</span>
  <span class="kwb">unsigned long</span> newlen<span class="sym">;</span>

  <span class="kwd">regsub2</span><span class="sym">(*</span>bufHandle<span class="sym">,</span> searchFor<span class="sym">,</span> replaceWith<span class="sym">, *</span>buflen<span class="sym">, &amp;</span>tmp<span class="sym">, &amp;</span>newlen<span class="sym">);</span>
  <span class="kwd">free</span><span class="sym">(*</span>bufHandle<span class="sym">);</span>
  <span class="sym">*</span>bufHandle <span class="sym">=</span> tmp<span class="sym">;</span>
  <span class="sym">*</span>buflen <span class="sym">=</span> newlen<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">unsigned long</span>
<span class="kwd">count_matches</span> <span class="sym">(</span><span class="kwb">char</span> <span class="sym">*</span>buffer<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>searchFor<span class="sym">,</span> <span class="kwb">unsigned long</span> buflen<span class="sym">)</span>
<span class="sym">{</span>
  regex_t preg<span class="sym">;</span>
  regmatch_t pmatch<span class="sym">;</span>
  <span class="kwb">int</span> result<span class="sym">;</span>
  <span class="kwb">unsigned long</span> matches<span class="sym">,</span> start<span class="sym">;</span>

  <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">regcomp</span> <span class="sym">(&amp;</span>preg<span class="sym">,</span> searchFor<span class="sym">,</span> REG_EXTENDED<span class="sym">) !=</span> <span class="num">0</span><span class="sym">)</span>
    <span class="kwa">return</span> buflen<span class="sym">;</span>
  <span class="kwd">memset</span> <span class="sym">(&amp;</span>pmatch<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="kwa">sizeof</span> <span class="sym">(</span>pmatch<span class="sym">));</span>
  result <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  matches <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  start <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  <span class="kwa">while</span> <span class="sym">(</span>result <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
    <span class="sym">{</span>
      result <span class="sym">=</span> <span class="kwd">regexec</span> <span class="sym">(&amp;</span>preg<span class="sym">, &amp;(</span>buffer<span class="sym">[</span>start<span class="sym">]),</span> <span class="num">1</span><span class="sym">, &amp;</span>pmatch<span class="sym">,</span> <span class="num">0</span><span class="sym">);</span>
      <span class="kwa">if</span> <span class="sym">(</span>result <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span>
	<span class="sym">{</span>
	  matches<span class="sym">++;</span>
	  start <span class="sym">=</span> start <span class="sym">+</span> pmatch<span class="sym">.</span>rm_eo<span class="sym">;</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
  <span class="kwa">return</span> matches<span class="sym">;</span>
<span class="sym">}</span>


<span class="kwb">int</span> <span class="kwd">main</span> <span class="sym">()</span>
<span class="sym">{</span>
  <span class="kwb">char</span> <span class="sym">*</span>x<span class="sym">, *</span>buffer<span class="sym">, *</span>tmp<span class="sym">;</span>
  <span class="kwb">unsigned long</span> buflen<span class="sym">,</span> seqlen<span class="sym">,</span> clen<span class="sym">,</span> rlen<span class="sym">;</span>
  <span class="kwb">size_t</span> readlen<span class="sym">;</span>
  <span class="kwb">int</span> i<span class="sym">;</span>

  seqlen <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  buflen <span class="sym">=</span> <span class="num">206848</span><span class="sym">;</span>
  buffer <span class="sym">=</span> <span class="kwd">malloc</span> <span class="sym">(</span>buflen <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
  <span class="kwa">if</span> <span class="sym">(!</span>buffer<span class="sym">)</span>
    <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
  x <span class="sym">=</span> buffer<span class="sym">;</span>
  <span class="kwa">while</span> <span class="sym">(</span>readlen <span class="sym">= (</span><span class="kwd">fread</span> <span class="sym">(</span>x<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> buflen <span class="sym">-</span> seqlen <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> stdin<span class="sym">)) )</span>
    <span class="sym">{</span>
      seqlen <span class="sym">=</span> seqlen <span class="sym">+</span> readlen<span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(!</span><span class="kwd">feof</span> <span class="sym">(</span>stdin<span class="sym">))</span>
	<span class="sym">{</span>
	  buflen <span class="sym">=</span> buflen <span class="sym">+</span> <span class="num">40960</span><span class="sym">;</span>
	  tmp <span class="sym">=</span> <span class="kwd">realloc</span> <span class="sym">(</span>buffer<span class="sym">,</span> buflen <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
	  <span class="kwa">if</span> <span class="sym">(</span>tmp <span class="sym">==</span> NULL<span class="sym">)</span>
	    <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
	  buffer <span class="sym">=</span> tmp<span class="sym">;</span>
	  x <span class="sym">= &amp;(</span>buffer<span class="sym">[</span>seqlen<span class="sym">]);</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
  buffer<span class="sym">[</span>seqlen<span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
  clen <span class="sym">=</span> seqlen<span class="sym">;</span>
  <span class="kwd">regsub</span> <span class="sym">(&amp;</span>buffer<span class="sym">,</span> <span class="str">&quot;&gt;.*|</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="str">&quot;&quot;</span><span class="sym">, &amp;</span>clen<span class="sym">);</span>

  <span class="kwb">char</span> variants<span class="sym">[</span><span class="num">9</span><span class="sym">][</span><span class="num">27</span><span class="sym">] = {</span>
     <span class="str">&quot;agggtaaa|tttaccct&quot;</span><span class="sym">,</span> <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="sym">,</span>
     <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="sym">,</span> <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="sym">,</span>
     <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="sym">,</span> <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="sym">,</span>
     <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="sym">,</span> <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="sym">,</span>
     <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
     <span class="sym">};</span>
  <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="num">9</span><span class="sym">;</span> i<span class="sym">++)</span>
     <span class="kwd">printf</span> <span class="sym">(</span><span class="str">&quot;%s %ld</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> variants<span class="sym">[</span>i<span class="sym">],</span> <span class="kwd">count_matches</span> <span class="sym">(</span>buffer<span class="sym">,</span> variants<span class="sym">[</span>i<span class="sym">],</span> clen<span class="sym">));</span>
  rlen <span class="sym">=</span> clen<span class="sym">;</span>
  <span class="kwd">regsub</span> <span class="sym">(&amp;</span>buffer<span class="sym">,</span> <span class="str">&quot;B&quot;</span><span class="sym">,</span> <span class="str">&quot;(c|g|t)&quot;</span><span class="sym">, &amp;</span>rlen<span class="sym">);</span>
  <span class="kwd">regsub</span> <span class="sym">(&amp;</span>buffer<span class="sym">,</span> <span class="str">&quot;D&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|g|t)&quot;</span><span class="sym">, &amp;</span>rlen<span class="sym">);</span>
  <span class="kwd">regsub</span> <span class="sym">(&amp;</span>buffer<span class="sym">,</span> <span class="str">&quot;H&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c|t)&quot;</span><span class="sym">, &amp;</span>rlen<span class="sym">);</span>
  <span class="kwd">regsub</span> <span class="sym">(&amp;</span>buffer<span class="sym">,</span> <span class="str">&quot;K&quot;</span><span class="sym">,</span> <span class="str">&quot;(g|t)&quot;</span><span class="sym">, &amp;</span>rlen<span class="sym">);</span>
  <span class="kwd">regsub</span> <span class="sym">(&amp;</span>buffer<span class="sym">,</span> <span class="str">&quot;M&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c)&quot;</span><span class="sym">, &amp;</span>rlen<span class="sym">);</span>
  <span class="kwd">regsub</span> <span class="sym">(&amp;</span>buffer<span class="sym">,</span> <span class="str">&quot;N&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c|g|t)&quot;</span><span class="sym">, &amp;</span>rlen<span class="sym">);</span>
  <span class="kwd">regsub</span> <span class="sym">(&amp;</span>buffer<span class="sym">,</span> <span class="str">&quot;R&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|g)&quot;</span><span class="sym">, &amp;</span>rlen<span class="sym">);</span>
  <span class="kwd">regsub</span> <span class="sym">(&amp;</span>buffer<span class="sym">,</span> <span class="str">&quot;S&quot;</span><span class="sym">,</span> <span class="str">&quot;(c|g)&quot;</span><span class="sym">, &amp;</span>rlen<span class="sym">);</span>
  <span class="kwd">regsub</span> <span class="sym">(&amp;</span>buffer<span class="sym">,</span> <span class="str">&quot;V&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|c|g)&quot;</span><span class="sym">, &amp;</span>rlen<span class="sym">);</span>
  <span class="kwd">regsub</span> <span class="sym">(&amp;</span>buffer<span class="sym">,</span> <span class="str">&quot;W&quot;</span><span class="sym">,</span> <span class="str">&quot;(a|t)&quot;</span><span class="sym">, &amp;</span>rlen<span class="sym">);</span>
  <span class="kwd">regsub</span> <span class="sym">(&amp;</span>buffer<span class="sym">,</span> <span class="str">&quot;Y&quot;</span><span class="sym">,</span> <span class="str">&quot;(c|t)&quot;</span><span class="sym">, &amp;</span>rlen<span class="sym">);</span>
  <span class="kwd">printf</span> <span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">%ld</span><span class="esc">\n</span><span class="str">%ld</span><span class="esc">\n</span><span class="str">%ld</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> seqlen<span class="sym">,</span> clen<span class="sym">,</span> rlen<span class="sym">);</span>
  <span class="kwd">free</span> <span class="sym">(</span>buffer<span class="sym">);</span>
  <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
