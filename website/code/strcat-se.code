<span class="line">    1 </span><span class="slc">-- -*- mode: eiffel -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- $Id: strcat-se.code,v 1.3 2004-11-11 07:14:19 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">-- from: Friedrich Dominicus
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">-- Modified slightly for current SmartEiffel by Brent Fulgham
</span><span class="line">    6 </span><span class="slc"></span>
<span class="line">    7 </span><span class="kwa">class</span> STRCAT
<span class="line">    8 </span>
<span class="line">    9 </span>creation
<span class="line">   10 </span>    make
<span class="line">   11 </span>
<span class="line">   12 </span><span class="kwa">feature
</span><span class="line">   13 </span><span class="kwa">
</span><span class="line">   14 </span><span class="kwa"></span>    concat_string <span class="sym">:</span> STRING <span class="kwa">is</span> <span class="str">&quot;hello%N&quot;</span><span class="sym">;
</span><span class="line">   15 </span><span class="sym">
</span><span class="line">   16 </span><span class="sym"></span>    make <span class="kwa">is
</span><span class="line">   17 </span><span class="kwa">        local
</span><span class="line">   18 </span><span class="kwa"></span>            i<span class="sym">,</span>n <span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;
</span><span class="line">   19 </span><span class="sym"></span>            str<span class="sym">:</span> STRING<span class="sym">;
</span><span class="line">   20 </span><span class="sym"></span>        <span class="kwa">do
</span><span class="line">   21 </span><span class="kwa">            if</span> argument_count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then
</span><span class="line">   22 </span><span class="kwa"></span>                n <span class="sym">:=</span> argument<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
<span class="line">   23 </span>            <span class="kwa">else
</span><span class="line">   24 </span><span class="kwa"></span>                n <span class="sym">:=</span> <span class="num">1
</span><span class="line">   25 </span><span class="num"></span>            <span class="kwa">end
</span><span class="line">   26 </span><span class="kwa">
</span><span class="line">   27 </span><span class="kwa">            from</span> i <span class="sym">:=</span> <span class="num">1
</span><span class="line">   28 </span><span class="num"></span>                <span class="sym">!!</span>str.make<span class="sym">(</span><span class="num">100</span><span class="sym">);
</span><span class="line">   29 </span><span class="sym"></span>            until i <span class="sym">&gt;</span> n
<span class="line">   30 </span>            <span class="kwa">loop
</span><span class="line">   31 </span><span class="kwa"></span>                str.append<span class="sym">(</span>concat_string<span class="sym">);
</span><span class="line">   32 </span><span class="sym"></span>                i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>            <span class="kwa">end</span><span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span>            io.put_integer<span class="sym">(</span>str.count<span class="sym">);
</span><span class="line">   35 </span><span class="sym"></span>            io.put_character <span class="sym">(</span><span class="str">'%N'</span><span class="sym">);
</span><span class="line">   36 </span><span class="sym"></span>            sleep<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span><span class="line">   37 </span><span class="sym"></span>        <span class="kwa">end</span><span class="sym">;
</span><span class="line">   38 </span><span class="sym">
</span><span class="line">   39 </span><span class="sym"></span><span class="kwa">feature</span> <span class="sym">{</span>NONE<span class="sym">}
</span><span class="line">   40 </span><span class="sym">
</span><span class="line">   41 </span><span class="sym"></span>   <span class="slc">-- helper function to call Unix sleep().
</span><span class="line">   42 </span><span class="slc"></span>   <span class="slc">-- we do this so we can make the process hang around long
</span><span class="line">   43 </span><span class="slc"></span>   <span class="slc">-- enough so the parent can measure its memory size.
</span><span class="line">   44 </span><span class="slc"></span>   sleep<span class="sym">(</span>i<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is
</span><span class="line">   45 </span><span class="kwa">      external</span> <span class="str">&quot;C macro signature (int)&quot;</span>
<span class="line">   46 </span>      <span class="kwa">end</span><span class="sym">;
</span><span class="line">   47 </span><span class="sym">
</span><span class="line">   48 </span><span class="sym"></span><span class="kwa">end</span>
