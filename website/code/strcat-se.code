<span class="slc">-- -*- mode: eiffel -*-</span>
<span class="slc">-- $Id: strcat-se.code,v 1.9 2005-12-08 06:41:30 bfulgham Exp $</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- from: Friedrich Dominicus</span>
<span class="slc">-- Modified slightly for current SmartEiffel by Brent Fulgham</span>

<span class="kwa">class</span> STRCAT

insert
	ARGUMENTS

creation <span class="sym">{</span>ANY<span class="sym">}</span>
    make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}</span>

    concat_string <span class="sym">:</span> STRING <span class="kwa">is</span> <span class="str">&quot;hello%N&quot;</span><span class="sym">;</span>

    make <span class="kwa">is</span>
        <span class="kwa">local</span>
            i<span class="sym">,</span>n <span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span>
            str<span class="sym">:</span> STRING<span class="sym">;</span>
        <span class="kwa">do</span>
            <span class="kwa">if</span> argument_count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span>
                n <span class="sym">:=</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
            <span class="kwa">else</span>
                n <span class="sym">:=</span> <span class="num">1</span>
            <span class="kwa">end</span>

            <span class="kwa">from</span> i <span class="sym">:=</span> <span class="num">1</span>
                <span class="sym">!!</span>str.<span class="kwd">make</span><span class="sym">(</span><span class="num">100</span><span class="sym">);</span>
            until i <span class="sym">&gt;</span> n
            <span class="kwa">loop</span>
                str.<span class="kwd">append</span><span class="sym">(</span>concat_string<span class="sym">);</span>
                i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">end</span><span class="sym">;</span>
            io.<span class="kwd">put_integer</span><span class="sym">(</span>str.count<span class="sym">);</span>
            io.<span class="kwd">put_character</span> <span class="sym">(</span><span class="str">'%N'</span><span class="sym">);</span>
	    <span class="kwd">sleep</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
        <span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">feature</span> <span class="sym">{</span>NONE<span class="sym">}</span>

   <span class="slc">-- helper function to call Unix sleep().</span>
   <span class="slc">-- we do this so we can make the process hang around long</span>
   <span class="slc">-- enough so the parent can measure its memory size.</span>
   <span class="kwd">sleep</span><span class="sym">(</span>i<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is</span>
      <span class="kwa">external</span> <span class="str">&quot;C macro signature (int)&quot;</span>
      <span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">end</span>
