<span class="line">    1 </span><span class="com">(* The Great Computer Language Shootout
</span><span class="line">    2 </span><span class="com">    http://shootout.alioth.debian.org
</span><span class="line">    3 </span><span class="com"> 
</span><span class="line">    4 </span><span class="com">    contributed by Isaac Gouy (Oberon-2 novice)
</span><span class="line">    5 </span><span class="com"> 
</span><span class="line">    6 </span><span class="com">    Do the same low-level stuff as the C implementations.
</span><span class="line">    7 </span><span class="com"> *)</span>
<span class="line">    8 </span>
<span class="line">    9 </span>  <span class="kwa">MODULE</span> Strcat<span class="sym">;
</span><span class="line">   10 </span><span class="sym"> </span><span class="kwa">IMPORT</span> LangShootout<span class="sym">,</span> SYSTEM<span class="sym">,</span> Out<span class="sym">,</span> Strings<span class="sym">;
</span><span class="line">   11 </span><span class="sym"> 
</span><span class="line">   12 </span><span class="sym"> </span><span class="kwa">TYPE
</span><span class="line">   13 </span><span class="kwa"> </span>   CharArray <span class="sym">=</span> <span class="kwa">ARRAY</span> <span class="num">8</span> <span class="kwa">OF</span> <span class="kwb">CHAR</span><span class="sym">;
</span><span class="line">   14 </span><span class="sym">    </span>   String <span class="sym">=</span> <span class="kwb">POINTER</span> <span class="kwa">TO</span> CharArray<span class="sym">;
</span><span class="line">   15 </span><span class="sym"> 
</span><span class="line">   16 </span><span class="sym"> </span><span class="kwa">VAR
</span><span class="line">   17 </span><span class="kwa"> </span>   buffer<span class="sym">,</span> tmp<span class="sym">:</span> <span class="kwb">POINTER</span> <span class="kwa">TO ARRAY OF</span> <span class="kwb">CHAR</span><span class="sym">;
</span><span class="line">   18 </span><span class="sym">  </span>   bufferEnd<span class="sym">:</span> String<span class="sym">;
</span><span class="line">   19 </span><span class="sym"> </span>   stuff<span class="sym">:</span> CharArray<span class="sym">;
</span><span class="line">   20 </span><span class="sym"> </span>   n<span class="sym">,</span> stufflen<span class="sym">,</span> start<span class="sym">,</span> end<span class="sym">,</span> buflen<span class="sym">,</span> newbuflen<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="line">   21 </span><span class="sym"> 
</span><span class="line">   22 </span><span class="sym"> 
</span><span class="line">   23 </span><span class="sym"> </span><span class="com">(* Strings.Length only returns INTEGER, we need LONGINT *)</span>
<span class="line">   24 </span> <span class="kwa">PROCEDURE</span> Length<span class="sym">(</span><span class="kwa">VAR</span> a<span class="sym">:</span> <span class="kwa">ARRAY OF</span> <span class="kwb">CHAR</span><span class="sym">):</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="line">   25 </span><span class="sym"> </span><span class="kwa">VAR</span> i<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span><span class="line">   26 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">   27 </span><span class="kwa"> </span>   i <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   28 </span><span class="sym"> </span>   <span class="kwa">WHILE</span> <span class="sym">(</span>i <span class="sym">&lt;</span> <span class="kwa">LEN</span><span class="sym">(</span>a<span class="sym">)) &amp; (</span>a<span class="sym">[</span>i<span class="sym">]</span> # <span class="num">0X</span><span class="sym">)</span> <span class="kwa">DO INC</span><span class="sym">(</span>i<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;
</span><span class="line">   29 </span><span class="sym">  </span>   <span class="kwa">RETURN</span> i<span class="sym">;
</span><span class="line">   30 </span><span class="sym">    </span><span class="kwa">END</span> Length<span class="sym">;
</span><span class="line">   31 </span><span class="sym">  
</span><span class="line">   32 </span><span class="sym"> 
</span><span class="line">   33 </span><span class="sym"> </span><span class="kwa">BEGIN
</span><span class="line">   34 </span><span class="kwa"> </span>   n <span class="sym">:=</span> LangShootout<span class="sym">.</span>Argi<span class="sym">();
</span><span class="line">   35 </span><span class="sym"> </span>   stuff <span class="sym">:=</span> <span class="str">&quot;hello&quot;</span><span class="sym">;</span> stuff<span class="sym">[</span><span class="num">5</span><span class="sym">] :=</span> <span class="num">0A</span>X<span class="sym">;</span> stuff<span class="sym">[</span><span class="num">6</span><span class="sym">] :=</span> <span class="num">0X</span><span class="sym">;
</span><span class="line">   36 </span><span class="sym"> </span>   stufflen <span class="sym">:=</span> Length<span class="sym">(</span>stuff<span class="sym">);
</span><span class="line">   37 </span><span class="sym">    
</span><span class="line">   38 </span><span class="sym">    </span>   buflen <span class="sym">:=</span> <span class="num">32</span><span class="sym">;</span> <span class="kwa">NEW</span><span class="sym">(</span>buffer<span class="sym">,</span> buflen<span class="sym">);</span> buffer<span class="sym">[</span><span class="num">0</span><span class="sym">] :=</span> <span class="num">0X</span><span class="sym">;
</span><span class="line">   39 </span><span class="sym"> </span>   start <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span>buffer<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span><span class="line">   40 </span><span class="sym"> </span>   end <span class="sym">:=</span> start<span class="sym">;
</span><span class="line">   41 </span><span class="sym"> </span>   <span class="kwa">WHILE</span> n <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">DO
</span><span class="line">   42 </span><span class="kwa">        IF</span> <span class="sym">(</span>start <span class="sym">+</span> buflen<span class="sym">) -</span> end <span class="sym">&lt;</span> stufflen <span class="sym">+</span> <span class="num">1</span> <span class="kwa">THEN
</span><span class="line">   43 </span><span class="kwa"> </span>         newbuflen <span class="sym">:=</span> <span class="kwa">ASH</span><span class="sym">(</span>buflen<span class="sym">,</span><span class="num">1</span><span class="sym">);
</span><span class="line">   44 </span><span class="sym"> </span>         <span class="kwa">NEW</span><span class="sym">(</span>tmp<span class="sym">,</span> newbuflen<span class="sym">);
</span><span class="line">   45 </span><span class="sym"> </span>         <span class="kwa">COPY</span><span class="sym">(</span>buffer^<span class="sym">,</span> tmp^<span class="sym">);
</span><span class="line">   46 </span><span class="sym"> </span>         buffer <span class="sym">:=</span> tmp<span class="sym">;</span> tmp <span class="sym">:=</span> <span class="kwa">NIL</span><span class="sym">;
</span><span class="line">   47 </span><span class="sym"> </span>         <span class="kwa">DEC</span><span class="sym">(</span>end<span class="sym">,</span> start<span class="sym">);
</span><span class="line">   48 </span><span class="sym"> </span>         start <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span>buffer<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span><span class="line">   49 </span><span class="sym"> </span>         <span class="kwa">INC</span><span class="sym">(</span>end<span class="sym">,</span> start<span class="sym">);
</span><span class="line">   50 </span><span class="sym"> </span>         buflen <span class="sym">:=</span> newbuflen<span class="sym">;
</span><span class="line">   51 </span><span class="sym"> </span>      <span class="kwa">END</span><span class="sym">;
</span><span class="line">   52 </span><span class="sym">    </span>         <span class="com">(* much faster to strcat to strend than to strbuf! *)</span>
<span class="line">   53 </span>       bufferEnd <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>String<span class="sym">,</span> end<span class="sym">);
</span><span class="line">   54 </span><span class="sym">         </span>      Strings<span class="sym">.</span>Append<span class="sym">(</span>stuff<span class="sym">,</span> bufferEnd^<span class="sym">);
</span><span class="line">   55 </span><span class="sym">       </span>      <span class="kwa">INC</span><span class="sym">(</span>end<span class="sym">,</span> stufflen<span class="sym">);
</span><span class="line">   56 </span><span class="sym"> 
</span><span class="line">   57 </span><span class="sym"> </span>      <span class="kwa">DEC</span><span class="sym">(</span>n<span class="sym">);
</span><span class="line">   58 </span><span class="sym"> </span>   <span class="kwa">END</span><span class="sym">;
</span><span class="line">   59 </span><span class="sym">    
</span><span class="line">   60 </span><span class="sym">         </span>   Out<span class="sym">.</span>Int<span class="sym">(</span> Length<span class="sym">(</span>buffer^<span class="sym">),</span> <span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="line">   61 </span><span class="sym">  </span><span class="kwa">END</span> Strcat<span class="sym">.</span> 
