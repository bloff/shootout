<span class="slc">%%% $Id: matrix-oz.code,v 1.8 2006-10-02 01:08:42 bfulgham Exp $</span>
<span class="slc">%%% http://dada.perl.it/shootout/</span>
<span class="slc">%%%</span>
<span class="slc">%%% contributed by Isaac Gouy</span>

<span class="slc">%%  Usage: start from command line with</span>
<span class="slc">%%     ozc -x matrix.oz -o matrix.oz.exe</span>
<span class="slc">%%     matrix.oz.exe 300</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> System Application

<span class="kwa">define</span>

   <span class="kwa">proc</span> <span class="sym">{</span>MakeMatrix Rows Cols M<span class="sym">}</span>
      <span class="kwa">local</span> Count <span class="kwa">in</span>
     <span class="sym">{</span>NewArray <span class="num">0</span> Rows<span class="sym">-</span><span class="num">1 0</span> M<span class="sym">}</span>
     Count <span class="sym">={</span>NewCell <span class="num">0</span><span class="sym">}</span>
     <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">0</span><span class="sym">..</span>Rows<span class="sym">-</span><span class="num">1</span> do
        <span class="kwa">local</span> R <span class="kwa">in</span>
           <span class="sym">{</span>NewArray <span class="num">0</span> Cols<span class="sym">-</span><span class="num">1 0</span> R<span class="sym">}</span>
           <span class="sym">{</span>Put M I R<span class="sym">}</span>
           <span class="kwa">for</span> J <span class="kwa">in</span> <span class="num">0</span><span class="sym">..</span>Cols<span class="sym">-</span><span class="num">1</span> do
          <span class="sym">{</span>Assign Count <span class="sym">{</span>Access Count<span class="sym">}+</span><span class="num">1</span><span class="sym">}</span>
          <span class="sym">{</span>Put R J <span class="sym">{</span>Access Count<span class="sym">}}</span>
           <span class="kwa">end</span>
        <span class="kwa">end</span>
     <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>


   <span class="kwa">proc</span> <span class="sym">{</span>MMult M1 M2 MM<span class="sym">}</span>
      <span class="kwa">local</span> S1 N1 Prod S2 N2 <span class="kwa">in</span>
     S1 <span class="sym">= {</span>Array<span class="sym">.</span>low M1<span class="sym">}</span>
     N1 <span class="sym">= {</span>Array<span class="sym">.</span>high M1<span class="sym">}</span>
     S2 <span class="sym">= {</span>Array<span class="sym">.</span>low <span class="sym">{</span>Get M1 S1<span class="sym">}}</span>
     N2 <span class="sym">= {</span>Array<span class="sym">.</span>high <span class="sym">{</span>Get M1 S1<span class="sym">}}</span>
     Prod <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>
     <span class="sym">{</span>NewArray S1 N1 <span class="num">0</span> MM<span class="sym">}</span>
     <span class="kwa">for</span> I <span class="kwa">in</span> S1<span class="sym">..</span>N1 do
        <span class="kwa">local</span> R <span class="kwa">in</span>
           <span class="sym">{</span>NewArray S1 N1 <span class="num">0</span> R<span class="sym">}</span>
           <span class="sym">{</span>Put MM I R<span class="sym">}</span>
           <span class="kwa">for</span> J <span class="kwa">in</span> S1<span class="sym">..</span>N1 do
          <span class="sym">{</span>Assign Prod <span class="num">0</span><span class="sym">}</span>
          <span class="kwa">for</span> K <span class="kwa">in</span> S2<span class="sym">..</span>N2 do
             <span class="sym">{</span>Assign Prod <span class="sym">{</span>Get <span class="sym">{</span>Get M1 I<span class="sym">}</span> K<span class="sym">}*</span>
              <span class="sym">{</span>Get <span class="sym">{</span>Get M2 K<span class="sym">}</span> J<span class="sym">}+{</span>Access Prod<span class="sym">}}</span>
          <span class="kwa">end</span>
          <span class="sym">{</span>Put R J <span class="sym">{</span>Access Prod<span class="sym">}}</span>
           <span class="kwa">end</span>
        <span class="kwa">end</span>
     <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">proc</span> <span class="sym">{</span>RepeatMMult N M1 M2 MM<span class="sym">}</span>
      <span class="kwa">local</span> T <span class="kwa">in</span>
     <span class="kwa">if</span> N <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span>
        <span class="sym">{</span>MMult M1 M2 T<span class="sym">}</span>
        <span class="sym">{</span>RepeatMMult N<span class="sym">-</span><span class="num">1</span> M1 M2 MM<span class="sym">}</span>
     <span class="kwa">else</span> <span class="sym">{</span>MMult M1 M2 T<span class="sym">}</span> MM <span class="sym">=</span> T <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

<span class="kwa">in</span>
   <span class="kwa">local</span> Args Repeat N M1 M2 MM <span class="kwa">in</span>
      <span class="sym">[</span>Args<span class="sym">] = {</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}</span>
      Repeat <span class="sym">= {</span>String<span class="sym">.</span>toInt Args<span class="sym">}</span>
      N <span class="sym">=</span> <span class="num">30</span>
      <span class="sym">{</span>MakeMatrix N N M1<span class="sym">}</span>
      <span class="sym">{</span>MakeMatrix N N M2<span class="sym">}</span>
      <span class="sym">{</span>RepeatMMult Repeat M1 M2 MM<span class="sym">}</span>

      <span class="sym">{</span>System<span class="sym">.</span>printInfo <span class="sym">{</span>Get <span class="sym">{</span>Get MM <span class="num">0</span><span class="sym">}</span> <span class="num">0</span><span class="sym">}}{</span>System<span class="sym">.</span>printInfo <span class="str">' '</span><span class="sym">}</span>
      <span class="sym">{</span>System<span class="sym">.</span>printInfo <span class="sym">{</span>Get <span class="sym">{</span>Get MM <span class="num">2</span><span class="sym">}</span> <span class="num">3</span><span class="sym">}}{</span>System<span class="sym">.</span>printInfo <span class="str">' '</span><span class="sym">}</span> <span class="slc">% get col 3 out of row 2</span>
      <span class="sym">{</span>System<span class="sym">.</span>printInfo <span class="sym">{</span>Get <span class="sym">{</span>Get MM <span class="num">3</span><span class="sym">}</span> <span class="num">2</span><span class="sym">}}{</span>System<span class="sym">.</span>printInfo <span class="str">' '</span><span class="sym">}</span> <span class="slc">% get col 2 out of row 3</span>
      <span class="sym">{</span>System<span class="sym">.</span>showInfo <span class="sym">{</span>Get <span class="sym">{</span>Get MM <span class="num">4</span><span class="sym">}</span> <span class="num">4</span><span class="sym">} }</span>
   <span class="kwa">end</span>
   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>
