<span class="slc">; The Great Computer Language Shootout
</span><span class="slc">; http://shootout.alioth.debian.org
</span><span class="slc">; Word Frequency - counts how many times each word appeared in a text
</span>
<span class="slc">; written by Nicolas Neuss
</span><span class="slc">; bug-fixes by Eric Lavigne
</span>
<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()
  (</span>let <span class="sym">((</span>table <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="sym">:</span>test <span class="str">'eq)) (*print-pretty* nil))
    (let ((*readtable* (copy-readtable)))
      ;; tweak readtable
      (loop for char across &quot;</span><span class="esc">\&quot;</span><span class="str">.;,#:()[]{}'</span><span class="num">1234567890</span><span class="sym">-*</span>?<span class="str">&quot; do
	  (set-syntax-from-char char #</span><span class="esc">\S</span><span class="str">pace))
      ;; count
      (loop for word = (read *standard-input* nil #</span><span class="esc">\.</span><span class="str">) until (eq word #</span><span class="esc">\.</span><span class="str">)
	  do (incf (gethash word table 0))))
    ;; output
    (loop for (word . count) in
	(sort (loop for a being the hash-keys of table using (hash-value b)
		    collect (cons a b))
	      #'(lambda (a b)
		  (or (&gt; (cdr a) (cdr b))
		      (and (= (cdr a) (cdr b))
			   (string&gt;= (car a) (car b))))))
	do (format t &quot;</span>~<span class="num">7d</span> ~A~%<span class="str">&quot; count (string-downcase word)))))
</span>
