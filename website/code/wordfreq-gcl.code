<span class="slc">; The Great Computer Language Shootout</span>
<span class="slc">; http://shootout.alioth.debian.org</span>
<span class="slc">; Word Frequency - counts how many times each word appeared in a text</span>

<span class="slc">; written by Nicolas Neuss</span>
<span class="slc">; bug-fixes by Eric Lavigne</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>let <span class="sym">((</span>table <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="sym">:</span>test <span class="str">'eq)) (*print-pretty* nil))</span>
<span class="str">    (let ((*readtable* (copy-readtable)))</span>
<span class="str">      ;; tweak readtable</span>
<span class="str">      (loop for char across &quot;</span><span class="esc">\&quot;</span><span class="str">.;,#:()[]{}'</span><span class="num">1234567890</span><span class="sym">-*</span>?<span class="str">&quot; do</span>
<span class="str">	  (set-syntax-from-char char #</span><span class="esc">\S</span><span class="str">pace))</span>
<span class="str">      ;; count</span>
<span class="str">      (loop for word = (read *standard-input* nil #</span><span class="esc">\.</span><span class="str">) until (eq word #</span><span class="esc">\.</span><span class="str">)</span>
<span class="str">	  do (incf (gethash word table 0))))</span>
<span class="str">    ;; output</span>
<span class="str">    (loop for (word . count) in</span>
<span class="str">	(sort (loop for a being the hash-keys of table using (hash-value b)</span>
<span class="str">		    collect (cons a b))</span>
<span class="str">	      #'(lambda (a b)</span>
<span class="str">		  (or (&gt; (cdr a) (cdr b))</span>
<span class="str">		      (and (= (cdr a) (cdr b))</span>
<span class="str">			   (string&gt;= (car a) (car b))))))</span>
<span class="str">	do (format t &quot;</span>~<span class="num">7</span>d ~A~%<span class="str">&quot; count (string-downcase word)))))</span>
<span class="str"></span>
