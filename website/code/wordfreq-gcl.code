<span class="slc">;;; -*- mode: lisp -*-
</span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="slc">;;; by Patrick Frankenberger
</span>
<span class="sym">(</span>defparameter <span class="sym">*</span>buffer<span class="sym">* (</span>make<span class="sym">-</span>array <span class="num">4096</span> <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'base-char))
(defparameter *word* (make-array 0 :element-type '</span>base<span class="sym">-</span>char <span class="sym">:</span>adjustable t <span class="sym">:</span>fill<span class="sym">-</span>pointer t<span class="sym">))
(</span>defparameter <span class="sym">*</span>ht<span class="sym">* (</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="sym">:</span>size <span class="num">60000</span> <span class="sym">:</span>test <span class="str">'equal))

(defun add-word ()
  (declare (type (array base-char) *word*))
  (when (/= (length *word*) 0)
    (let ((key (string-downcase *word*)))
      (setf (gethash key *ht*) (1+ (the fixnum (gethash key *ht* 0))))
      (setf (fill-pointer *word*) 0))))

(defun readit ()
  (declare (type (simple-array base-char) *buffer*)
	   (type (array base-char) *word*))
  (do ((num-read (read-sequence *buffer* *standard-input*)
		(read-sequence *buffer* *standard-input*)))
      (nil)
    (loop for i fixnum below num-read do
	  (if (alpha-char-p (aref *buffer* i))
	      (vector-push-extend (aref *buffer* i) *word*)
	      (add-word)))
    (when (/= num-read 4096) (return))))

(defun order (l r)
  (declare (type (cons simple-base-string fixnum) l r))
  (if (/= (cdr l) (cdr r))
      (&gt; (cdr l) (cdr r))
      (string&gt; (car l) (car r))))

(defun printit ()
  (let ((res (make-array (hash-table-count *ht*) :element-type '</span><span class="sym">(</span><span class="kwa">cons</span> simple<span class="sym">-</span>base<span class="sym">-</span>string fixnum<span class="sym">) :</span>fill<span class="sym">-</span>pointer t<span class="sym">)))
    (</span>setf <span class="sym">(</span>fill<span class="sym">-</span>pointer res<span class="sym">)</span> <span class="num">0</span><span class="sym">)
    (</span>maphash #<span class="str">'(lambda (k v) (vector-push (cons k v) res)) *ht*)
    (setf res (sort res #'</span>order<span class="sym">))
    (</span>loop for a across res do
	  <span class="sym">(</span>format t <span class="str">&quot;~7d ~A~%&quot;</span> <span class="sym">(</span><span class="kwa">cdr</span> a<span class="sym">) (</span><span class="kwa">car</span> a<span class="sym">)))))

(</span><span class="kwa">defun</span> main <span class="sym">()
  (</span>readit<span class="sym">)
  (</span>printit<span class="sym">))</span>
