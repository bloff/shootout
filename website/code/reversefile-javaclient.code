<span class="slc">// $Id: reversefile-javaclient.code,v 1.3 2006-01-03 06:05:33 bfulgham Exp $</span>
<span class="slc">// http://www.bagley.org/~doug/shootout/</span>
<span class="slc">// from Stephen Darnell</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>

<span class="kwa">public class</span> reversefile <span class="sym">{</span>
    <span class="kwa">final static</span> <span class="kwb">int</span> BUFF_SIZE <span class="sym">=</span> <span class="num">4096</span><span class="sym">;</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span> <span class="kwc">String</span><span class="sym">[]</span> args <span class="sym">) {</span>
	<span class="kwc">InputStream</span> in <span class="sym">=</span> <span class="kwc">System</span><span class="sym">.</span>in<span class="sym">;</span>

	<span class="kwb">byte</span><span class="sym">[]</span> buff <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>BUFF_SIZE<span class="sym">];</span>
	<span class="kwb">byte</span><span class="sym">[]</span> obuff <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>BUFF_SIZE<span class="sym">];</span>

	<span class="kwa">try</span> <span class="sym">{</span>
	    <span class="kwb">int</span> pos <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> n <span class="sym">; (</span>n <span class="sym">=</span> in<span class="sym">.</span><span class="kwd">read</span><span class="sym">(</span>buff<span class="sym">,</span> pos<span class="sym">,</span> BUFF_SIZE<span class="sym">)) &gt;</span> <span class="num">0</span> <span class="sym">;) {</span>
		pos <span class="sym">+=</span> n<span class="sym">;</span>
		<span class="kwa">if</span> <span class="sym">((</span>pos <span class="sym">+</span> BUFF_SIZE<span class="sym">) &gt;</span> buff<span class="sym">.</span>length<span class="sym">) {</span>
		    <span class="kwb">byte</span><span class="sym">[]</span> new_buff <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>buff<span class="sym">.</span>length <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">];</span>
		    <span class="kwc">System</span><span class="sym">.</span><span class="kwd">arraycopy</span><span class="sym">(</span>buff<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> new_buff<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> buff<span class="sym">.</span>length<span class="sym">);</span>
		    buff <span class="sym">=</span> new_buff<span class="sym">;</span>
		<span class="sym">}</span>
	    <span class="sym">}</span>

	    <span class="kwb">int</span> opos <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

	    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> p <span class="sym">= --</span>pos <span class="sym">; ;) {</span>
		<span class="sym">--</span>p<span class="sym">;</span>
		<span class="kwa">if</span> <span class="sym">(</span>p <span class="sym">&lt;</span> <span class="num">0</span> <span class="sym">||</span> buff<span class="sym">[</span>p<span class="sym">] ==</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">) {</span>
		    <span class="kwa">for</span><span class="sym">(</span> <span class="kwb">int</span> bp <span class="sym">=</span> p <span class="sym">; ++</span>bp <span class="sym">&lt;=</span> pos <span class="sym">; ) {</span>
			obuff<span class="sym">[</span>opos<span class="sym">] =</span> buff<span class="sym">[</span>bp<span class="sym">];</span>
			<span class="kwa">if</span> <span class="sym">(++</span>opos <span class="sym">&gt;=</span> BUFF_SIZE<span class="sym">) {</span>
			    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>obuff<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> opos<span class="sym">);</span>
			    opos <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
			<span class="sym">}</span>
		    <span class="sym">}</span>
		    pos <span class="sym">=</span> p<span class="sym">;</span>

		    <span class="kwa">if</span> <span class="sym">(</span>p <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">)</span>
			<span class="kwa">break</span><span class="sym">;</span>
		<span class="sym">}</span>
	    <span class="sym">}</span>

	    <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>obuff<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> opos<span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwa">catch</span><span class="sym">(</span><span class="kwc">IOException</span> ex<span class="sym">) {</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
