#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="slc">; The Computer Language Shootout</span>
<span class="slc">; http://shootout.alioth.debian.org/</span>
<span class="slc">; Sven Hartrumpf 2005-04-12</span>
<span class="slc">; Implements 'Spigot' algorithm origionally due to Stanly Rabinowitz.</span>
<span class="slc">; This program is based on an implementation for SCM by Aubrey Jaffer and</span>
<span class="slc">; Jerry D. Hedden.</span>
<span class="sym">(</span>module pidigits mzscheme
  <span class="sym">(</span>provide main<span class="sym">)</span>


  <span class="sym">(</span>define <span class="sym">(</span>pi n d<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ((</span>r <span class="sym">(</span>inexact<span class="sym">-&gt;</span>exact <span class="sym">(</span>floor <span class="sym">(</span><span class="kwa">exp</span> <span class="sym">(*</span> d <span class="sym">(</span><span class="kwa">log</span> <span class="num">10</span><span class="sym">))))))</span> <span class="slc">; 10^d</span>
           <span class="sym">(</span>p <span class="sym">(+ (</span>quotient n d<span class="sym">)</span> <span class="num">1</span><span class="sym">))</span>
           <span class="sym">(</span>m <span class="sym">(</span>quotient <span class="sym">(*</span> p d <span class="num">3322</span><span class="sym">)</span> <span class="num">1000</span><span class="sym">))</span>
           <span class="sym">(</span>a <span class="sym">(</span>make<span class="sym">-</span>vector <span class="sym">(+</span> m <span class="num">1</span><span class="sym">)</span> <span class="num">2</span><span class="sym">))</span>
           <span class="sym">(</span>digits <span class="num">0</span><span class="sym">))</span>
      <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> a m <span class="num">4</span><span class="sym">)</span>
      <span class="sym">(</span>do <span class="sym">((</span>j <span class="num">1</span> <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))</span>
           <span class="sym">(</span>q <span class="num">0 0</span><span class="sym">)</span>
           <span class="sym">(</span>b <span class="num">2</span> <span class="sym">(</span>remainder q r<span class="sym">)))</span>
        <span class="sym">((&gt;</span> j p<span class="sym">))</span>
        <span class="sym">(</span>do <span class="sym">((</span>k m <span class="sym">(-</span> k <span class="num">1</span><span class="sym">)))</span>
          <span class="sym">((</span>zero? k<span class="sym">))</span>
          <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> q <span class="sym">(+</span> q <span class="sym">(* (</span>vector<span class="sym">-</span>ref a k<span class="sym">)</span> r<span class="sym">)))</span>
          <span class="sym">(</span>let <span class="sym">((</span>t <span class="sym">(+ (*</span> k <span class="num">2</span><span class="sym">)</span> <span class="num">1</span><span class="sym">)))</span> <span class="slc">; maybe use something like bit-lsh</span>
            <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> a k <span class="sym">(</span>remainder q t<span class="sym">))</span> <span class="slc">; quotient/remainder like in mzscheme would speedup this and the the next line</span>
            <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> q <span class="sym">(*</span> k <span class="sym">(</span>quotient q t<span class="sym">)))))</span>
        <span class="sym">(</span>let<span class="sym">* ((</span>s <span class="sym">(</span>number<span class="sym">-&gt;</span>string <span class="sym">(+</span> b <span class="sym">(</span>quotient q r<span class="sym">))))</span>
               <span class="sym">(</span>l <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> s<span class="sym">)))</span>
          <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&gt;</span> j <span class="num">1</span><span class="sym">)</span>
                 <span class="sym">(</span>do <span class="sym">((</span>l l <span class="sym">(+</span> l <span class="num">1</span><span class="sym">)))</span>
                   <span class="sym">((&gt;=</span> l d<span class="sym">))</span>
                   <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> digits n<span class="sym">)</span>
                          <span class="sym">(</span>write<span class="sym">-</span>char #\0<span class="sym">)</span>
                          <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> digits <span class="sym">(+</span> digits <span class="num">1</span><span class="sym">))</span>
                          <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span>zero? <span class="sym">(</span>modulo digits <span class="num">10</span><span class="sym">))</span>
                                 <span class="sym">(</span>display <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span><span class="sym">) (</span>write digits<span class="sym">) (</span>newline<span class="sym">))))))))</span>
          <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
            <span class="sym">((=</span> i l<span class="sym">))</span>
            <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> digits n<span class="sym">)</span>
                   <span class="sym">(</span>write<span class="sym">-</span>char <span class="sym">(</span>string<span class="sym">-</span>ref s i<span class="sym">))</span>
                   <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> digits <span class="sym">(+</span> digits <span class="num">1</span><span class="sym">))</span>
                   <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span>zero? <span class="sym">(</span>modulo digits <span class="num">10</span><span class="sym">))</span>
                          <span class="sym">(</span>display <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span><span class="sym">) (</span>write digits<span class="sym">) (</span>newline<span class="sym">))))))))))</span>

  <span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(= (</span>vector<span class="sym">-</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">0</span><span class="sym">)</span>
                 <span class="num">1</span>
                 <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref args <span class="num">0</span><span class="sym">)))))</span>
      <span class="sym">(</span>pi n <span class="num">10</span><span class="sym">)))</span>

   <span class="sym">(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)))</span>
