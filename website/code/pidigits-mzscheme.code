<span class="slc">;; The Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;; Based on the MLton version of the benchmark</span>
<span class="slc">;; contributed by Scott Cruzen</span>

<span class="slc">;; Note: as of version 350, this benchmark spends most of</span>
<span class="slc">;;  its time GCing; it runs 3 times as fast in mzscheme3m.</span>

<span class="sym">(</span>module pidigits mzscheme

  <span class="sym">(</span>define <span class="sym">(</span>floor_ev q r s t x<span class="sym">)</span>
    <span class="sym">(</span>quotient <span class="sym">(+ (*</span> q x<span class="sym">)</span> r<span class="sym">) (+ (*</span> s x<span class="sym">)</span> t<span class="sym">)))</span>

  <span class="sym">(</span>define <span class="sym">(</span>comp q r s t  q2 r2 s2 t2<span class="sym">)</span>
    <span class="sym">(</span>values <span class="sym">(+ (*</span> q q2<span class="sym">) (*</span> r s2<span class="sym">))</span>
	    <span class="sym">(+ (*</span> q r2<span class="sym">) (*</span> r t2<span class="sym">))</span>
	    <span class="sym">(+ (*</span> s q2<span class="sym">) (*</span> t s2<span class="sym">))</span>
	    <span class="sym">(+ (*</span> s r2<span class="sym">) (*</span> t t2<span class="sym">))))</span>

  <span class="sym">(</span>define <span class="sym">(</span>next q r s t<span class="sym">) (</span>floor_ev q r s t <span class="num">3</span><span class="sym">))</span>
  <span class="sym">(</span>define <span class="sym">(</span>safe? q r s t n<span class="sym">) (=</span> n <span class="sym">(</span>floor_ev q r s t <span class="num">4</span><span class="sym">)))</span>
  <span class="sym">(</span>define <span class="sym">(</span>prod q r s t n<span class="sym">) (</span>comp <span class="num">10</span> <span class="sym">(* -</span><span class="num">10</span> n<span class="sym">)</span> <span class="num">0 1</span>  q r s t<span class="sym">))</span>
  <span class="sym">(</span>define <span class="sym">(</span>mk q r s t k<span class="sym">) (</span>comp q r s t k <span class="sym">(*</span> <span class="num">2</span> <span class="sym">(</span>add1 <span class="sym">(*</span> <span class="num">2</span> k<span class="sym">)))</span> <span class="num">0</span> <span class="sym">(</span>add1 <span class="sym">(*</span> <span class="num">2</span> k<span class="sym">))))</span>

  <span class="sym">(</span>define <span class="sym">(</span>digit k  q r s t  n row col<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> n <span class="num">0</span><span class="sym">)</span>
	<span class="sym">(</span>let <span class="sym">([</span>y <span class="sym">(</span>next q r s t<span class="sym">)])</span>
	  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>safe? q r s t y<span class="sym">)</span>
	      <span class="sym">(</span>let<span class="sym">-</span>values <span class="sym">([(</span>q r s t<span class="sym">) (</span>prod q r s t y<span class="sym">)])</span>
		<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> col <span class="num">10</span><span class="sym">)</span>
		    <span class="sym">(</span>let <span class="sym">([</span>row <span class="sym">(+</span> row <span class="num">10</span><span class="sym">)])</span>
		      <span class="sym">(</span>printf <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:~a</span><span class="esc">\n</span><span class="str">~a&quot;</span> row y<span class="sym">)</span>
		      <span class="sym">(</span>digit k q r s t <span class="sym">(</span>sub1 n<span class="sym">)</span> row <span class="num">1</span><span class="sym">))</span>
		    <span class="sym">(</span>begin
		      <span class="sym">(</span>printf <span class="str">&quot;~a&quot;</span> y<span class="sym">)</span>
		      <span class="sym">(</span>digit k q r s t<span class="sym">(</span>sub1 n<span class="sym">)</span> row <span class="sym">(</span>add1 col<span class="sym">)))))</span>
	      <span class="sym">(</span>let<span class="sym">-</span>values <span class="sym">([(</span>q r s t<span class="sym">) (</span>mk q r s t k<span class="sym">)])</span>
		<span class="sym">(</span>digit <span class="sym">(</span>add1 k<span class="sym">)</span> q r s t n row col<span class="sym">))))</span>
	<span class="sym">(</span>printf <span class="str">&quot;~a</span><span class="esc">\t</span><span class="str">:~a</span><span class="esc">\n</span><span class="str">&quot;</span>
		<span class="sym">(</span>make<span class="sym">-</span>string <span class="sym">(-</span> <span class="num">10</span> col<span class="sym">)</span> #\space<span class="sym">)</span>
		<span class="sym">(+</span> row col<span class="sym">))))</span>

  <span class="sym">(</span>define <span class="sym">(</span>digits n<span class="sym">)</span>
    <span class="sym">(</span>digit <span class="num">1  1 0 0 1</span>  n <span class="num">0 0</span><span class="sym">))</span>

  <span class="sym">(</span>digits <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)</span> <span class="num">0</span><span class="sym">))))</span>
