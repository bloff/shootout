#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="slc">; $Id: pidigits-mzscheme.code,v 1.1 2005-04-25 04:24:03 bfulgham Exp $
</span><span class="slc">; The Computer Language Shootout
</span><span class="slc">; http://shootout.alioth.debian.org/
</span><span class="slc">;
</span><span class="slc">; Based on Sven Hartrumpf's chicken program, which was (in turn) based
</span><span class="slc">; on an implementation for SCM by Aubrey Jaffer and Jerry D. Hedden.
</span><span class="slc">; Program implements the 'Spigot' algorithm origionally due to
</span><span class="slc">; Stanly Rabinowitz.
</span>
<span class="sym">(</span>define <span class="sym">(</span>pi n d<span class="sym">)
  (</span>let<span class="sym">* ((</span>r <span class="sym">(</span>do <span class="sym">((</span>s <span class="num">1</span> <span class="sym">(*</span> <span class="num">10</span> s<span class="sym">)) (</span>i d <span class="sym">(-</span> i <span class="num">1</span><span class="sym">))) ((</span>zero? i<span class="sym">)</span> s<span class="sym">)))</span> <span class="slc">; chicken: this line is faster
</span>         <span class="sym">(</span>p <span class="sym">(+ (</span>quotient n d<span class="sym">)</span> <span class="num">1</span><span class="sym">))
         (</span>m <span class="sym">(</span>quotient <span class="sym">(*</span> p d <span class="num">3322</span><span class="sym">)</span> <span class="num">1000</span><span class="sym">))
         (</span>a <span class="sym">(</span>make<span class="sym">-</span>vector <span class="sym">(+</span> m <span class="num">1</span><span class="sym">)</span> <span class="num">2</span><span class="sym">))
         (</span>digits <span class="num">0</span><span class="sym">))
    (</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> a m <span class="num">4</span><span class="sym">)
    (</span>do <span class="sym">((</span>j <span class="num">1</span> <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))
         (</span>q <span class="num">0 0</span><span class="sym">)
         (</span>b <span class="num">2</span> <span class="sym">(</span>remainder q r<span class="sym">)))
      ((&gt;</span> j p<span class="sym">))
      (</span>do <span class="sym">((</span>k m <span class="sym">(-</span> k <span class="num">1</span><span class="sym">)))
        ((</span>zero? k<span class="sym">))
        (</span><span class="kwa">set</span><span class="sym">!</span> q <span class="sym">(+</span> q <span class="sym">(* (</span>vector<span class="sym">-</span>ref a k<span class="sym">)</span> r<span class="sym">)))
        (</span>let <span class="sym">((</span>t <span class="sym">(+ (*</span> k <span class="num">2</span><span class="sym">)</span> <span class="num">1</span><span class="sym">)))</span> <span class="slc">; maybe use something like bit-lsh
</span>          <span class="sym">(</span>let<span class="sym">-</span>values <span class="sym">([(</span>qq rr<span class="sym">) (</span>quotient<span class="sym">/</span>remainder q t<span class="sym">)])
            (</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> a k rr<span class="sym">)
            (</span><span class="kwa">set</span><span class="sym">!</span> q <span class="sym">(*</span> k qq<span class="sym">)))))
      (</span>let<span class="sym">* ((</span>s <span class="sym">(</span>number<span class="sym">-&gt;</span>string <span class="sym">(+</span> b <span class="sym">(</span>quotient q r<span class="sym">))))
             (</span>l <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> s<span class="sym">)))
        (</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">and</span> <span class="sym">(&gt;</span> l <span class="num">1</span><span class="sym">)</span> <span class="slc">; chicken: needs this cond because it uses floats for d&gt;5 (leads to appended . or .0), for version after 1.89 use 2, before 1.89 use 1 in this line and the following 2 lines
</span>                    <span class="sym">(</span>char<span class="sym">=</span>? <span class="sym">(</span>string<span class="sym">-</span>ref s <span class="sym">(-</span> l <span class="num">1</span><span class="sym">))</span> #\.<span class="sym">))
               (</span><span class="kwa">set</span><span class="sym">!</span> l <span class="sym">(-</span> l <span class="num">1</span><span class="sym">))))
        (</span><span class="kwa">cond</span> <span class="sym">((&gt;</span> j <span class="num">1</span><span class="sym">)
               (</span>do <span class="sym">((</span>l l <span class="sym">(+</span> l <span class="num">1</span><span class="sym">)))
                 ((&gt;=</span> l d<span class="sym">))
                 (</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> digits n<span class="sym">)
                        (</span>write<span class="sym">-</span>char #\<span class="num">0</span><span class="sym">)
                        (</span><span class="kwa">set</span><span class="sym">!</span> digits <span class="sym">(+</span> digits <span class="num">1</span><span class="sym">))
                        (</span><span class="kwa">cond</span> <span class="sym">((</span>zero? <span class="sym">(</span>modulo digits <span class="num">10</span><span class="sym">))
                               (</span>display <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span><span class="sym">) (</span>write digits<span class="sym">) (</span>newline<span class="sym">))))))))
        (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
          ((=</span> i l<span class="sym">))
          (</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> digits n<span class="sym">)
                 (</span>write<span class="sym">-</span>char <span class="sym">(</span>string<span class="sym">-</span>ref s i<span class="sym">))
                 (</span><span class="kwa">set</span><span class="sym">!</span> digits <span class="sym">(+</span> digits <span class="num">1</span><span class="sym">))
                 (</span><span class="kwa">cond</span> <span class="sym">((</span>zero? <span class="sym">(</span>modulo digits <span class="num">10</span><span class="sym">))
                        (</span>display <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span><span class="sym">) (</span>write digits<span class="sym">) (</span>newline<span class="sym">))))))))))

(</span>define <span class="sym">(</span>main args<span class="sym">)
  (</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(= (</span>vector<span class="sym">-</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">0</span><span class="sym">)
</span>               <span class="num">10
</span>               <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref args <span class="num">0</span><span class="sym">)))))
    (</span>pi n <span class="num">10</span><span class="sym">)))

(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>
