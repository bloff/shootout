<span class="line">    1 </span><span class="com">/* -*- mode: c -*-
</span><span class="line">    2 </span><span class="com"> * $Id: wordfreq-gcc.code,v 1.4 2004-11-13 07:43:33 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="com"> * Changed by Adrian Merrill 2001/08/22
</span><span class="line">    5 </span><span class="com"> */</span>
<span class="line">    6 </span>
<span class="line">    7 </span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="line">    8 </span><span class="dir"></span><span class="dir">#include &lt;ctype.h&gt;
</span><span class="line">    9 </span><span class="dir"></span><span class="dir">#include &lt;malloc.h&gt;
</span><span class="line">   10 </span><span class="dir"></span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="line">   11 </span><span class="dir"></span><span class="dir">#include &lt;string.h&gt;
</span><span class="line">   12 </span><span class="dir"></span><span class="dir">#include</span> <span class="dstr">&quot;../../Include/simple_hash.h&quot;</span><span class="dir">
</span><span class="line">   13 </span><span class="dir"></span>
<span class="line">   14 </span><span class="dir">#define QUICKIE_STRCMP(a, b)  (*(a) != *(b) ? *(a) - *(b) : strcmp((a), (b)))
</span><span class="line">   15 </span><span class="dir"></span>
<span class="line">   16 </span><span class="kwc">typedef</span> <span class="kwb">int</span> <span class="sym">(*</span>comparator<span class="sym">)(</span><span class="kwb">const void</span> <span class="sym">*,</span> <span class="kwb">const void</span> <span class="sym">*);
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym"></span><span class="kwb">int</span> cmp_hash<span class="sym">(</span><span class="kwb">struct</span> ht_node <span class="sym">**</span>a<span class="sym">,</span> <span class="kwb">struct</span> ht_node <span class="sym">**</span>b<span class="sym">) {
</span><span class="line">   19 </span><span class="sym"></span>    <span class="kwb">int</span> val <span class="sym">= (*</span>b<span class="sym">)-&gt;</span>val <span class="sym">- (*</span>a<span class="sym">)-&gt;</span>val<span class="sym">;
</span><span class="line">   20 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">((</span>val <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> ? QUICKIE_STRCMP<span class="sym">((*</span>b<span class="sym">)-&gt;</span>key<span class="sym">, (*</span>a<span class="sym">)-&gt;</span>key<span class="sym">) :</span> val<span class="sym">);
</span><span class="line">   21 </span><span class="sym">}
</span><span class="line">   22 </span><span class="sym">
</span><span class="line">   23 </span><span class="sym"></span><span class="kwb">int</span> main<span class="sym">() {
</span><span class="line">   24 </span><span class="sym"></span>    <span class="kwb">int</span> readbufsize <span class="sym">=</span> <span class="num">4096</span><span class="sym">;
</span><span class="line">   25 </span><span class="sym"></span>    <span class="kwb">int</span> wordbufsize<span class="sym">=</span><span class="num">16</span><span class="sym">;
</span><span class="line">   26 </span><span class="sym"></span>    <span class="kwb">char</span> <span class="sym">*</span>readbuf <span class="sym">= (</span><span class="kwb">char</span> <span class="sym">*)</span>malloc<span class="sym">(</span>readbufsize <span class="sym">+</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   27 </span><span class="sym"></span>    <span class="kwb">char</span> <span class="sym">*</span>wordbuf <span class="sym">= (</span><span class="kwb">char</span> <span class="sym">*)</span>malloc<span class="sym">(</span>wordbufsize <span class="sym">+</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   28 </span><span class="sym"></span>    <span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>    <span class="kwb">struct</span> ht_ht <span class="sym">*</span>ht <span class="sym">=</span> ht_create<span class="sym">(</span><span class="num">2048</span><span class="sym">);
</span><span class="line">   30 </span><span class="sym"></span>    <span class="kwb">struct</span> ht_node <span class="sym">**</span>sort_array<span class="sym">, **</span>sort_tmp<span class="sym">, *</span>node<span class="sym">;
</span><span class="line">   31 </span><span class="sym"></span>    <span class="com">/*new code*/</span>
<span class="line">   32 </span>    <span class="kwb">int</span> nread <span class="sym">=</span><span class="num">0</span><span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>    <span class="kwb">int</span> wordlen<span class="sym">=</span><span class="num">0</span><span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span>    readbuf<span class="sym">[</span><span class="num">0</span><span class="sym">]=</span><span class="num">0</span><span class="sym">;
</span><span class="line">   35 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">(</span>readbuf<span class="sym">[</span>i<span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">||(</span>nread <span class="sym">=</span> fread<span class="sym">(</span>readbuf<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">char</span><span class="sym">),</span> readbufsize<span class="sym">,</span> stdin<span class="sym">),</span>readbuf<span class="sym">[</span>nread<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">,</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>nread <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) ) {
</span><span class="line">   36 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>isalpha<span class="sym">(</span>readbuf<span class="sym">[</span>i<span class="sym">])){
</span><span class="line">   37 </span><span class="sym"></span>            wordbuf<span class="sym">[</span>wordlen<span class="sym">++] =</span> tolower<span class="sym">(</span>readbuf<span class="sym">[</span>i<span class="sym">]);
</span><span class="line">   38 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(</span>wordlen <span class="sym">==</span> wordbufsize<span class="sym">) {
</span><span class="line">   39 </span><span class="sym"></span>                wordbufsize <span class="sym">*=</span> <span class="num">2</span><span class="sym">;
</span><span class="line">   40 </span><span class="sym"></span>                wordbuf <span class="sym">=</span> realloc<span class="sym">(</span>wordbuf<span class="sym">,</span> wordbufsize <span class="sym">+</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   41 </span><span class="sym">            }
</span><span class="line">   42 </span><span class="sym">        }
</span><span class="line">   43 </span><span class="sym"></span>        <span class="kwa">else</span><span class="sym">{
</span><span class="line">   44 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(</span>wordlen <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
</span><span class="line">   45 </span><span class="sym"></span>                wordbuf<span class="sym">[</span>wordlen<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;
</span><span class="line">   46 </span><span class="sym">                ++(</span>ht_find_new<span class="sym">(</span>ht<span class="sym">,</span> wordbuf<span class="sym">)-&gt;</span>val<span class="sym">);
</span><span class="line">   47 </span><span class="sym"></span>                wordlen <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   48 </span><span class="sym">            }
</span><span class="line">   49 </span><span class="sym">        }
</span><span class="line">   50 </span><span class="sym"></span>        i<span class="sym">++;
</span><span class="line">   51 </span><span class="sym">    }
</span><span class="line">   52 </span><span class="sym"></span>    free<span class="sym">(</span>readbuf<span class="sym">);
</span><span class="line">   53 </span><span class="sym"></span>    free<span class="sym">(</span>wordbuf<span class="sym">);
</span><span class="line">   54 </span><span class="sym"></span>    sort_array <span class="sym">=</span> sort_tmp <span class="sym">=
</span><span class="line">   55 </span><span class="sym"></span>        malloc<span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">struct</span> ht_node <span class="sym">*) *</span> ht_count<span class="sym">(</span>ht<span class="sym">));
</span><span class="line">   56 </span><span class="sym">
</span><span class="line">   57 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>node<span class="sym">=</span>ht_first<span class="sym">(</span>ht<span class="sym">); (*</span>sort_tmp<span class="sym">++ =</span> node<span class="sym">) !=</span> <span class="num">0</span><span class="sym">;</span> node<span class="sym">=</span>ht_next<span class="sym">(</span>ht<span class="sym">)) ;
</span><span class="line">   58 </span><span class="sym">
</span><span class="line">   59 </span><span class="sym"></span>    qsort<span class="sym">(</span>sort_array<span class="sym">,</span> ht_count<span class="sym">(</span>ht<span class="sym">),</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">struct</span> ht_node <span class="sym">*),
</span><span class="line">   60 </span><span class="sym">          (</span>comparator<span class="sym">)</span>cmp_hash<span class="sym">);
</span><span class="line">   61 </span><span class="sym">
</span><span class="line">   62 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>ht_count<span class="sym">(</span>ht<span class="sym">);</span> i<span class="sym">++)
</span><span class="line">   63 </span><span class="sym"></span>        printf<span class="sym">(</span><span class="str">&quot;%7d %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> ht_val<span class="sym">(</span>sort_array<span class="sym">[</span>i<span class="sym">]),</span> ht_key<span class="sym">(</span>sort_array<span class="sym">[</span>i<span class="sym">]));
</span><span class="line">   64 </span><span class="sym">
</span><span class="line">   65 </span><span class="sym"></span>    ht_destroy<span class="sym">(</span>ht<span class="sym">);
</span><span class="line">   66 </span><span class="sym"></span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
</span><span class="line">   67 </span><span class="sym">}</span>
