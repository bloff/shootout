<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">/* -*- mode: c -*-
 * $Id: wordfreq-gcc.code,v 1.2 2004-11-08 08:15:54 bfulgham Exp $
 * http://shootout.alioth.debian.org/
 * Changed by Adrian Merrill 2001/08/22
 */</FONT></I>

#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;stdio.h&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;ctype.h&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;malloc.h&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;stdlib.h&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;string.h&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;../../Include/simple_hash.h&quot;</FONT></B>

#<B><FONT COLOR="#5F9EA0">define</FONT></B> <B><FONT COLOR="#0000FF">QUICKIE_STRCMP</FONT></B>(a, b)  (*(a) != *(b) ? *(a) - *(b) : strcmp((a), (b)))

<B><FONT COLOR="#228B22">typedef</FONT></B> <B><FONT COLOR="#0000FF">int</FONT></B> (*comparator)(<B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">void</FONT></B> *, <B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">void</FONT></B> *);

<B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#0000FF">cmp_hash</FONT></B>(<B><FONT COLOR="#228B22">struct</FONT></B> ht_node **a, <B><FONT COLOR="#228B22">struct</FONT></B> ht_node **b) {
    <B><FONT COLOR="#228B22">int</FONT></B> val = (*b)-&gt;val - (*a)-&gt;val;
    <B><FONT COLOR="#A020F0">return</FONT></B>((val == 0) ? QUICKIE_STRCMP((*b)-&gt;key, (*a)-&gt;key) : val);
}

<B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#0000FF">main</FONT></B>() {
    <B><FONT COLOR="#228B22">int</FONT></B> readbufsize = 4096;
    <B><FONT COLOR="#228B22">int</FONT></B> wordbufsize=16;
    <B><FONT COLOR="#228B22">char</FONT></B> *readbuf = (<B><FONT COLOR="#228B22">char</FONT></B> *)malloc(readbufsize + 1);
    <B><FONT COLOR="#228B22">char</FONT></B> *wordbuf = (<B><FONT COLOR="#228B22">char</FONT></B> *)malloc(wordbufsize + 1);
    <B><FONT COLOR="#228B22">int</FONT></B> i = 0;
    <B><FONT COLOR="#228B22">struct</FONT></B> ht_ht *ht = ht_create(2048);
    <B><FONT COLOR="#228B22">struct</FONT></B> ht_node **sort_array, **sort_tmp, *node;
    <I><FONT COLOR="#B22222">/*new code*/</FONT></I>
    <B><FONT COLOR="#228B22">int</FONT></B> nread =0;
    <B><FONT COLOR="#228B22">int</FONT></B> wordlen=0;
    readbuf[0]=0;
    <B><FONT COLOR="#A020F0">while</FONT></B> (readbuf[i] &gt; 0||(nread = fread(readbuf, <B><FONT COLOR="#A020F0">sizeof</FONT></B>(<B><FONT COLOR="#228B22">char</FONT></B>), readbufsize, stdin),readbuf[nread] = <B><FONT COLOR="#BC8F8F">'\0'</FONT></B>,i=0,nread &gt; 0) ) {
	<B><FONT COLOR="#A020F0">if</FONT></B> (isalpha(readbuf[i])){
	    wordbuf[wordlen++] = tolower(readbuf[i]);
	    <B><FONT COLOR="#A020F0">if</FONT></B> (wordlen == wordbufsize) {
		wordbufsize *= 2;
		wordbuf = realloc(wordbuf, wordbufsize + 1);
	    }
	}
	<B><FONT COLOR="#A020F0">else</FONT></B>{
	    <B><FONT COLOR="#A020F0">if</FONT></B> (wordlen &gt; 0) {
		wordbuf[wordlen] = <B><FONT COLOR="#BC8F8F">'\0'</FONT></B>;
		++(ht_find_new(ht, wordbuf)-&gt;val);
		wordlen = 0;
	    } 
	}
	i++;
    }
    free(readbuf);
    free(wordbuf);
    sort_array = sort_tmp =
	malloc(<B><FONT COLOR="#A020F0">sizeof</FONT></B>(<B><FONT COLOR="#228B22">struct</FONT></B> ht_node *) * ht_count(ht));

    <B><FONT COLOR="#A020F0">for</FONT></B> (node=ht_first(ht); (*sort_tmp++ = node) != 0; node=ht_next(ht)) ;

    qsort(sort_array, ht_count(ht), <B><FONT COLOR="#A020F0">sizeof</FONT></B>(<B><FONT COLOR="#228B22">struct</FONT></B> ht_node *),
	  (comparator)cmp_hash);

    <B><FONT COLOR="#A020F0">for</FONT></B> (i=0; i&lt;ht_count(ht); i++)
	printf(<B><FONT COLOR="#BC8F8F">&quot;%7d %s\n&quot;</FONT></B>, ht_val(sort_array[i]), ht_key(sort_array[i])); 

    ht_destroy(ht);
    <B><FONT COLOR="#A020F0">return</FONT></B>(0);
}</pre></td></tr></table>
