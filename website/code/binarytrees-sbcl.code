<span class="slc">;;  The Great Computer Language Shootout
</span><span class="slc">;;  http://shootout.alioth.debian.org/
</span><span class="slc">;;
</span><span class="slc">;;  contributed by Simon Brooke &lt;simon&#64;jasmine.org.uk&gt;
</span><span class="slc">;;  binary tree in lisp
</span>
<span class="slc">;;  I have not written LISP for a living for twenty years;
</span><span class="slc">;;  consequently this is almost certainly not an optimal solution.
</span><span class="slc">;;  The performance of this program is hugely sensitive to GC and to
</span><span class="slc">;;  available memory. See commentary at end of file
</span>
<span class="sym">(</span>defconstant <span class="sym">*</span>mindepth<span class="sym">*</span> <span class="num">4</span><span class="sym">)

(</span><span class="kwa">defun</span> binarytree <span class="sym">(</span>n<span class="sym">)
  (</span>declare <span class="sym">(</span>fixnum n<span class="sym">))
  (</span>let<span class="sym">*
      ((</span>dflt <span class="sym">(+ *</span>mindepth<span class="sym">*</span> <span class="num">2</span><span class="sym">))
       (</span>maxdepth
        <span class="sym">(</span><span class="kwa">cond
</span>         <span class="sym">((&gt;</span> dflt n<span class="sym">)</span> dflt<span class="sym">)
         (</span>t n<span class="sym">)))
       (</span>stretchdepth <span class="sym">(+</span> maxdepth <span class="num">1</span><span class="sym">)))
    (</span>format t <span class="str">&quot;stretch tree of depth ~D~32T check: ~D&quot;</span>
            stretchdepth
            <span class="sym">(</span>itemcheck <span class="sym">(</span>treenode <span class="num">0</span> stretchdepth<span class="sym">)))
    (</span><span class="kwa">terpri</span><span class="sym">)
    (</span>let <span class="sym">((</span>longlife <span class="sym">(</span>treenode <span class="num">0</span> maxdepth<span class="sym">)))
      (</span>dotimes <span class="sym">(</span>i <span class="sym">(+ (-</span> maxdepth <span class="sym">*</span>mindepth<span class="sym">*)</span> <span class="num">2</span><span class="sym">)</span> nil<span class="sym">)
        (</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">zerop</span> <span class="sym">(</span>mod i <span class="num">2</span><span class="sym">))
               (</span>dodepth <span class="sym">(+ *</span>mindepth<span class="sym">*</span> i<span class="sym">)</span> maxdepth<span class="sym">))))
      (</span>format t <span class="str">&quot;long lived tree of depth ~D~32T check: ~D&quot;</span>
              maxdepth
              <span class="sym">(</span>itemcheck longlife<span class="sym">))
      (</span><span class="kwa">terpri</span><span class="sym">))))


(</span><span class="kwa">defun</span> dodepth <span class="sym">(</span>depth maxdepth<span class="sym">)
  (</span>declare <span class="sym">(</span>fixnum depth maxdepth<span class="sym">))
  (</span>let <span class="sym">((</span>check <span class="num">0</span><span class="sym">)
        (</span>iterations <span class="sym">(</span><span class="kwa">expt</span> <span class="num">2</span> <span class="sym">(+ (-</span> maxdepth depth<span class="sym">) *</span>mindepth<span class="sym">*))))
    (</span>declare <span class="sym">(</span>fixnum check iterations<span class="sym">))
    (</span>dotimes <span class="sym">(</span>i iterations nil<span class="sym">)
      (</span>declare <span class="sym">(</span>fixnum i<span class="sym">))
      (</span>let
          <span class="sym">((</span>j <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
</span>        <span class="slc">;; arrgghhh... ugly ugly ugly. Must be some more elegant way...
</span>        <span class="sym">(</span><span class="kwa">setq</span> check <span class="sym">(+</span> check
                       <span class="sym">(</span>itemcheck <span class="sym">(</span>treenode j depth<span class="sym">))
                       (</span>itemcheck <span class="sym">(</span>treenode <span class="sym">(-</span> <span class="num">0</span> j<span class="sym">)</span> depth<span class="sym">))))))
    (</span>format t <span class="str">&quot;~D~9T trees of depth ~D~32T check: ~D&quot;</span> <span class="sym">(*</span> iterations <span class="num">2</span><span class="sym">)</span> depth check<span class="sym">)
    (</span><span class="kwa">terpri</span><span class="sym">)
    ))

</span><span class="slc">;; old skool lisp. I could have defstructed a three-place cell, but am
</span><span class="slc">;; guessing that the GC is optimised to collect conses. Consecuently a
</span><span class="slc">;; node will be a list comprising (item leftsubtree . rightsubtree)
</span><span class="sym">(</span><span class="kwa">defun</span> treenode <span class="sym">(</span>item depth<span class="sym">)
  (</span>declare <span class="sym">(</span>fixnum item depth<span class="sym">))
  (</span><span class="kwa">cond
</span>   <span class="sym">((=</span> depth <span class="num">0</span><span class="sym">)(</span> <span class="kwa">cons</span> <span class="num">0</span> nil<span class="sym">))
   (</span>t <span class="sym">(</span><span class="kwa">cons
</span>       item
       <span class="sym">(</span><span class="kwa">cons
</span>        <span class="sym">(</span>treenode <span class="sym">(- (*</span> <span class="num">2</span> item<span class="sym">)</span> <span class="num">1</span><span class="sym">) (-</span> depth <span class="num">1</span><span class="sym">))
        (</span>treenode <span class="sym">(*</span> <span class="num">2</span> item<span class="sym">) (-</span> depth <span class="num">1</span><span class="sym">)))))))


</span><span class="slc">;; once again pure old skool lisp - recurse down the tree. Assume a LISP
</span><span class="slc">;; compiler can optimise the hell out of recursion!
</span><span class="sym">(</span><span class="kwa">defun</span> itemcheck <span class="sym">(</span>tree<span class="sym">)
  (</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">null</span> <span class="sym">(</span><span class="kwa">cdr</span> tree<span class="sym">))(</span><span class="kwa">car</span> tree<span class="sym">))
        (</span>t <span class="sym">(- (+ (</span><span class="kwa">car</span> tree<span class="sym">) (</span>itemcheck <span class="sym">(</span><span class="kwa">cadr</span> tree<span class="sym">)))
              (</span>itemcheck <span class="sym">(</span><span class="kwa">cddr</span> tree<span class="sym">))))))

</span><span class="slc">;; Shamelessly stolen from Friedrich Dominicus' ackerman implementation
</span><span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()
  (</span>let <span class="sym">((</span>n
         <span class="sym">(</span>parse<span class="sym">-</span>integer
          <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*
</span>                         #<span class="sym">+</span>cmu  extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*
</span>                         #<span class="sym">+</span>gcl  si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">))))
    (</span>binarytree n<span class="sym">)))


</span><span class="slc">;; (extensions:gc-on)
</span><span class="slc">;; (time (binarytree 16))
</span><span class="slc">;; on my machine (dual processor Athlon 1600, 2Gb core) this run (GC
</span><span class="slc">;; switched on) is 7.6 seconds; Java 8.511 seconds; mono 7.35 seconds
</span><span class="slc">;; Both Java and LISP were given 1Gb to play with; I don't know mono
</span><span class="slc">;; well enough to optimise it.
</span>
<span class="slc">;; (extensions:gc-off)
</span><span class="slc">;; (extensions:gc)
</span><span class="slc">;; (time (binarytree 16))
</span><span class="slc">;; on my machine this run (GC switched off) this run takes 5.5 seconds</span>
