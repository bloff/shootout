<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Great Computer Language Shootout                               */</span>
<span class="com">/* http://shootout.alioth.debian.org/                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

<span class="kwa">numeric digits</span> <span class="num">6</span>

KNUCFRM1 <span class="sym">=</span> <span class="str">&quot;A T C G&quot;</span>
KNUCFRM2 <span class="sym">=</span> <span class="str">&quot;AA AT TT TA CA CT AC TC AG GA TG GT CC GC CG GG&quot;</span>
KNUCFRMX <span class="sym">=</span> <span class="str">&quot;GGT GGTA GGTATT GGTATTTTAATT GGTATTTTAATTTATAGT&quot;</span>

THRESHOLD <span class="sym">=</span> <span class="num">32</span> <span class="sym">;</span> NULL <span class="sym">=</span> <span class="str">&quot;&quot;</span> <span class="sym">;</span> <span class="kwb">SPACE</span> <span class="sym">=</span> <span class="str">&quot; &quot;</span> <span class="sym">;</span> TAB <span class="sym">=</span> <span class="kwb">D2C</span><span class="sym">(</span><span class="num">9</span><span class="sym">) ;</span> FSEP <span class="sym">=</span> <span class="str">&quot;:&quot;</span>
DESCENDING <span class="sym">=</span> <span class="str">&quot;DSC&quot;</span>

seq <span class="sym">=</span> NULL <span class="sym">;</span> lineno <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> knucfrm. <span class="sym">=</span> <span class="num">0</span>

<span class="com">/* Skip irrelevant input data */</span>
<span class="kwa">do while</span> <span class="kwb">LINES</span><span class="sym">() &gt;</span> <span class="num">0</span> <span class="sym">&amp;</span> <span class="kwb">SUBSTR</span><span class="sym">(</span><span class="kwb">LINEIN</span><span class="sym">(),</span> <span class="num">1</span><span class="sym">,</span> <span class="num">6</span><span class="sym">)</span> \<span class="sym">=</span> <span class="str">&quot;&gt;THREE&quot;</span>
  <span class="kwa">nop</span>
<span class="kwa">end</span>

<span class="com">/* Assemble 'seq' string in &lt;2K pieces for table loading */</span>
<span class="kwa">do while</span> <span class="kwb">LINES</span><span class="sym">() &gt;</span> <span class="num">0</span>
  lineno <span class="sym">=</span> lineno <span class="sym">+</span> <span class="num">1</span> <span class="sym">;</span> <span class="kwb">line</span> <span class="sym">=</span> <span class="kwb">TRANSLATE</span><span class="sym">(</span><span class="kwb">LINEIN</span><span class="sym">()) ;</span> <span class="kwa">if</span> <span class="kwb">line</span> <span class="sym">==</span> NULL <span class="kwa">then</span> <span class="sym">;</span> <span class="kwa">leave</span>
  seq <span class="sym">=</span> seq <span class="sym">||</span> <span class="kwb">line</span>

  <span class="kwa">if</span> lineno <span class="sym">==</span> THRESHOLD <span class="kwa">then do</span>
    <span class="kwa">call</span> update_knucfrm_count <span class="sym">(</span>KNUCFRM1 KNUCFRM2 KNUCFRMX<span class="sym">)</span>
    lineno <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> seq <span class="sym">=</span> NULL
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">call</span> update_knucfrm_count KNUCFRM1 KNUCFRM2 KNUCFRMX

<span class="com">/* Generate correctly-formatted output strings */</span>
cbexpr <span class="sym">=</span> <span class="str">&quot;FORMAT(ARG(1) * 100 / &quot;</span> <span class="sym">||</span> compute_knucfrm_total<span class="sym">(</span>KNUCFRM1<span class="sym">) ||</span> <span class="str">&quot;,,3)&quot;</span>
frm1_freq <span class="sym">=</span> extract_knucfrm_data<span class="sym">(</span>KNUCFRM1<span class="sym">,</span> DESCENDING<span class="sym">,</span> <span class="str">&quot;VK&quot;</span><span class="sym">,</span> <span class="str">&quot;KV&quot;</span><span class="sym">,</span> cbexpr<span class="sym">)</span>

cbexpr <span class="sym">=</span> <span class="str">&quot;FORMAT(ARG(1) * 100 / &quot;</span> <span class="sym">||</span> compute_knucfrm_total<span class="sym">(</span>KNUCFRM2<span class="sym">) ||</span> <span class="str">&quot;,,3)&quot;</span>
frm2_freq <span class="sym">=</span> extract_knucfrm_data<span class="sym">(</span>KNUCFRM2<span class="sym">,</span> DESCENDING<span class="sym">,</span> <span class="str">&quot;VK&quot;</span><span class="sym">,</span> <span class="str">&quot;KV&quot;</span><span class="sym">,</span> cbexpr<span class="sym">)</span>

frmx_count <span class="sym">=</span> extract_knucfrm_data<span class="sym">(</span>KNUCFRMX<span class="sym">,,</span> <span class="str">&quot;VK&quot;</span><span class="sym">,</span> <span class="str">&quot;VK&quot;</span><span class="sym">)</span>

<span class="com">/* Output data */</span>
<span class="kwa">call</span> print_knucfrm_data frm1_freq<span class="sym">,</span> <span class="kwb">SPACE</span> <span class="sym">;</span> <span class="kwa">say</span> NULL
<span class="kwa">call</span> print_knucfrm_data frm2_freq<span class="sym">,</span> <span class="kwb">SPACE</span> <span class="sym">;</span> <span class="kwa">say</span> NULL
<span class="kwa">call</span> print_knucfrm_data frmx_count<span class="sym">,</span> TAB

<span class="kwa">drop</span> knucfrm. <span class="sym">;</span> <span class="kwa">exit</span> <span class="num">0</span>

<span class="com">/* ----------------------------- */</span>

update_knucfrm_count <span class="sym">:</span> <span class="kwa">procedure expose</span> seq knucfrm. NULL
  knuctbl_ <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>

  <span class="kwa">do while</span> knuctbl_ <span class="sym">&lt;&gt;</span> NULL
    <span class="kwa">parse</span> <span class="kwb">var</span> knuctbl_ knuc knuctbl_

    <span class="com">/*</span>
<span class="com">       Use efficient 'COUNTSTR' BIF where possible, but use custom</span>
<span class="com">       [and much slower], 'COUNTSTRDUP', to count occurrences of</span>
<span class="com">       single-letter-only name [e.g. AA, GG] values</span>
<span class="com">    */</span>

    <span class="kwa">if</span> knuc \<span class="sym">=</span> <span class="kwb">COPIES</span><span class="sym">(</span><span class="kwb">SUBSTR</span><span class="sym">(</span>knuc<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">),</span> <span class="kwb">LENGTH</span><span class="sym">(</span>knuc<span class="sym">))</span> <span class="kwa">then</span>
      knucfrm.knuc <span class="sym">=</span> knucfrm.knuc <span class="sym">+</span> <span class="kwb">COUNTSTR</span><span class="sym">(</span>knuc<span class="sym">,</span> seq<span class="sym">)</span>
    <span class="kwa">else</span>
      knucfrm.knuc <span class="sym">=</span> knucfrm.knuc <span class="sym">+</span> countstrdup<span class="sym">(</span>knuc<span class="sym">,</span> seq<span class="sym">)</span>
  <span class="kwa">end</span>

  <span class="kwa">return</span>

<span class="com">/* ----------------------------- */</span>

compute_knucfrm_total <span class="sym">:</span> <span class="kwa">procedure expose</span> knucfrm. NULL
  knuctbl_ <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> total <span class="sym">=</span> <span class="num">0</span>

  <span class="kwa">do while</span> knuctbl_ <span class="sym">&lt;&gt;</span> NULL
    <span class="kwa">parse</span> <span class="kwb">var</span> knuctbl_ knuc knuctbl_
    total <span class="sym">=</span> total <span class="sym">+</span> knucfrm.knuc
  <span class="kwa">end</span>

  <span class="kwa">return</span> total

<span class="com">/* ----------- */</span>

knucfrm_callback <span class="sym">:</span> <span class="kwa">procedure</span>
  <span class="kwa">interpret</span> <span class="str">&quot;value =&quot;</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">2</span><span class="sym">) ;</span> <span class="kwa">return</span> <span class="kwb">value</span>

<span class="com">/* ----------- */</span>

extract_knucfrm_data <span class="sym">:</span> <span class="kwa">procedure expose</span> knucfrm. NULL FSEP
  knuctbl_ <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>

  <span class="kwa">if ARG</span><span class="sym">(</span><span class="num">2</span><span class="sym">) ==</span> NULL <span class="kwa">then</span> <span class="sym">;</span> unordered <span class="sym">=</span> <span class="num">1</span>
  <span class="kwa">else do</span>
    unordered <span class="sym">=</span> <span class="num">0</span> <span class="sym">;</span> ascending <span class="sym">= (</span><span class="kwa">ARG</span><span class="sym">(</span><span class="num">2</span><span class="sym">) ==</span> <span class="str">&quot;ASC&quot;</span><span class="sym">)</span>
  <span class="kwa">end</span>

  kforder <span class="sym">= (</span><span class="kwa">ARG</span><span class="sym">(</span><span class="num">3</span><span class="sym">) ==</span> <span class="str">&quot;KV&quot;</span><span class="sym">) ;</span> kfout <span class="sym">= (</span><span class="kwa">ARG</span><span class="sym">(</span><span class="num">4</span><span class="sym">) ==</span> <span class="str">&quot;KV&quot;</span><span class="sym">)</span>

  callback <span class="sym">= (</span><span class="kwa">ARG</span><span class="sym">(</span><span class="num">5</span><span class="sym">)</span> \<span class="sym">=</span> NULL<span class="sym">) ;</span> cbarg <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">5</span><span class="sym">)</span>

  knucout <span class="sym">=</span> NULL

  <span class="kwa">do while</span> knuctbl_ <span class="sym">&lt;&gt;</span> NULL
    <span class="kwa">parse</span> <span class="kwb">var</span> knuctbl_ knuc knuctbl_

    <span class="kwa">if</span> \callback <span class="kwa">then</span> <span class="sym">;</span> <span class="kwb">value</span> <span class="sym">=</span> knucfrm.knuc
    <span class="kwa">else</span> <span class="sym">;</span> <span class="kwb">value</span> <span class="sym">=</span> knucfrm_callback<span class="sym">(</span>knucfrm.knuc<span class="sym">,</span> cbarg<span class="sym">)</span>

    <span class="kwa">if</span> kforder <span class="kwa">then</span>
      field <span class="sym">=</span> knuc <span class="sym">||</span> FSEP <span class="sym">||</span> <span class="kwb">value</span>
    <span class="kwa">else</span>
      field <span class="sym">=</span> <span class="kwb">value</span> <span class="sym">||</span> FSEP <span class="sym">||</span> knuc

    <span class="kwa">if</span> unordered <span class="kwa">then</span> <span class="sym">;</span> knucout <span class="sym">=</span> knucout field
    <span class="kwa">else</span> <span class="sym">;</span> knucout <span class="sym">=</span> insertWord<span class="sym">(</span>field<span class="sym">,</span> knucout<span class="sym">,</span> ascending<span class="sym">)</span>
  <span class="kwa">end</span>

  <span class="kwa">if</span> kforder <span class="sym">&amp;</span> \kfout <span class="sym">|</span> \kforder <span class="sym">&amp;</span> kfout <span class="kwa">then do</span>
    <span class="kwa">return</span> swapfields<span class="sym">(</span><span class="kwb">STRIP</span><span class="sym">(</span>knucout<span class="sym">))</span>
  <span class="kwa">end</span>

  <span class="kwa">return</span> <span class="kwb">STRIP</span><span class="sym">(</span>knucout<span class="sym">)</span>

<span class="com">/* ----------- */</span>

swapfields <span class="sym">:</span> <span class="kwa">procedure expose</span> NULL FSEP
  datatbl_ <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> revtbl <span class="sym">=</span> NULL

  <span class="kwa">do while</span> datatbl_ <span class="sym">&lt;&gt;</span> NULL
    <span class="kwa">parse</span> <span class="kwb">var</span> datatbl_ f1 <span class="sym">(</span>FSEP<span class="sym">)</span> f2 datatbl_
    revtbl <span class="sym">=</span> revtbl f2 <span class="sym">||</span> FSEP <span class="sym">||</span> f1
  <span class="kwa">end</span>

  <span class="kwa">return</span> <span class="kwb">STRIP</span><span class="sym">(</span>revtbl<span class="sym">)</span>

<span class="com">/* ----------------------------- */</span>

print_knucfrm_data <span class="sym">:</span> <span class="kwa">procedure expose</span> NULL FSEP
  datatbl_ <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> sep <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">2</span><span class="sym">)</span>

  <span class="kwa">do while</span> datatbl_ <span class="sym">&lt;&gt;</span> NULL
    <span class="kwa">parse</span> <span class="kwb">var</span> datatbl_ f1 <span class="sym">(</span>FSEP<span class="sym">)</span> f2 datatbl_
    <span class="kwa">say</span> f1 <span class="sym">||</span> sep <span class="sym">||</span> f2
  <span class="kwa">end</span>

  <span class="kwa">return</span>

<span class="com">/* ----------------------------- */</span>

countstrdup <span class="sym">:</span> <span class="kwa">procedure</span>
  needle <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> haystack <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">2</span><span class="sym">)</span>

  nlen <span class="sym">=</span> <span class="kwb">LENGTH</span><span class="sym">(</span>needle<span class="sym">) ;</span> hlen <span class="sym">=</span> <span class="kwb">LENGTH</span><span class="sym">(</span>haystack<span class="sym">) ;</span> occurs <span class="sym">=</span> <span class="num">0</span>

  <span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> nlen
    <span class="kwa">do</span> j <span class="sym">=</span> i <span class="kwa">to</span> hlen <span class="kwa">by</span> nlen
      <span class="kwa">if</span> <span class="kwb">SUBSTR</span><span class="sym">(</span>haystack<span class="sym">,</span> j<span class="sym">,</span> nlen<span class="sym">) ==</span> needle <span class="kwa">then</span> <span class="sym">;</span> occurs <span class="sym">=</span> occurs <span class="sym">+</span> <span class="num">1</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">return</span> occurs

<span class="com">/* ----------------------------- */</span>

<span class="kwb">compare</span> <span class="sym">:</span> <span class="kwa">procedure</span>
  <span class="kwa">if ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">then</span> <span class="sym">;</span> <span class="kwa">return ARG</span><span class="sym">(</span><span class="num">2</span><span class="sym">) &lt;</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
  <span class="kwa">return ARG</span><span class="sym">(</span><span class="num">2</span><span class="sym">) &gt;</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">3</span><span class="sym">)</span>

<span class="com">/* ----------- */</span>

insertWord <span class="sym">:</span> <span class="kwa">procedure</span>
  V <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">1</span><span class="sym">) ;</span> S <span class="sym">=</span> <span class="kwb">STRIP</span><span class="sym">(</span><span class="kwa">ARG</span><span class="sym">(</span><span class="num">2</span><span class="sym">)) ;</span> ascending <span class="sym">=</span> <span class="kwa">ARG</span><span class="sym">(</span><span class="num">3</span><span class="sym">)</span>
  R <span class="sym">=</span> <span class="kwb">WORDS</span><span class="sym">(</span>S<span class="sym">) ;</span> <span class="kwa">if</span> R <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> <span class="sym">;</span> <span class="kwa">return</span> V

  L <span class="sym">=</span> <span class="num">1</span>

  <span class="kwa">do while</span> L <span class="sym">&lt;=</span> R
    M <span class="sym">= (</span>L <span class="sym">+</span> R<span class="sym">) %</span> <span class="num">2</span> <span class="sym">;</span> W <span class="sym">=</span> <span class="kwb">WORD</span><span class="sym">(</span>S<span class="sym">,</span> M<span class="sym">)</span>
    <span class="kwa">if</span> V <span class="sym">=</span> W <span class="kwa">then</span> <span class="sym">;</span> <span class="kwa">return</span> S
    <span class="kwa">if</span> <span class="kwb">compare</span><span class="sym">(</span>ascending<span class="sym">,</span> V<span class="sym">,</span> W<span class="sym">)</span> <span class="kwa">then</span> <span class="sym">;</span> R <span class="sym">=</span> M <span class="sym">-</span> <span class="num">1</span> <span class="sym">;</span> <span class="kwa">else</span> L <span class="sym">=</span> M <span class="sym">+</span> <span class="num">1</span>
  <span class="kwa">end</span>

  <span class="com">/* insert [after] item here */</span>
  <span class="kwa">select</span>
    <span class="kwa">when</span> R <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> <span class="sym">;</span> insertAfter <span class="sym">=</span> <span class="num">0</span>
    <span class="kwa">when</span> L <span class="sym">&gt;</span> <span class="kwb">WORDS</span><span class="sym">(</span>S<span class="sym">)</span> <span class="kwa">then</span> <span class="sym">;</span> insertAfter <span class="sym">=</span> <span class="kwb">LENGTH</span><span class="sym">(</span>S<span class="sym">) +</span> <span class="num">1</span>
    <span class="kwa">otherwise</span>
      <span class="kwa">if</span> M <span class="sym">=</span> R <span class="kwa">then</span> <span class="sym">;</span> insertAfter <span class="sym">=</span> <span class="kwb">WORDINDEX</span><span class="sym">(</span>S<span class="sym">,</span> M <span class="sym">+</span> <span class="num">1</span><span class="sym">) -</span> <span class="num">1</span>
      <span class="kwa">else</span> <span class="sym">;</span> insertAfter <span class="sym">=</span> <span class="kwb">WORDINDEX</span><span class="sym">(</span>S<span class="sym">,</span> M<span class="sym">) -</span> <span class="num">1</span>
  <span class="kwa">end</span>

  <span class="kwa">return</span> <span class="kwb">INSERT</span><span class="sym">(</span>V<span class="sym">,</span> S<span class="sym">,</span> insertAfter<span class="sym">,</span> <span class="kwb">LENGTH</span><span class="sym">(</span>V<span class="sym">) +</span> <span class="num">1</span><span class="sym">)</span>

