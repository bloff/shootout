<span class="com">/* The Great Computer Language Shootout
 *  http://shootout.alioth.debian.org/
 *
 * &#64;author Simon Brooke &lt;simon&#64;jasmine.org.uk&gt;
 */</span>


<span class="com">/**
 * A class which implments the binary-trees algorithm for the Great
 * Computer Language Shootout. This implementation based fairly
 * straightforwardly on Isaac Gouy's C# reference implementation. That
 * is to say I haven't analysed the algorithm and come up with my own
 * program design; where this implementation differs from Isaac's it
 * is simply that this was easier to make work at the time. This
 * implementation is not at all optimised - I welcome improvements
 */</span>
<span class="kwa">class</span> binarytrees
<span class="sym">{
</span>   <span class="kwa">static final</span> <span class="kwb">int</span> MINDEPTH <span class="sym">=</span> <span class="num">4</span><span class="sym">;

</span>   <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">)
   {
</span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>      <span class="kwa">new</span> binarytrees<span class="sym">(</span> n<span class="sym">);
   }


</span>    <span class="com">/**
     * Java is fussy about non-static stuff being accessed from static
     * stuff, so the simplest solution was to create an object and do
     * everything in that object. There isn't much to do so it's all
     * done in the Constructor
     */</span>
    <span class="kwa">public</span> binarytrees<span class="sym">(</span> <span class="kwb">int</span> maxDepth<span class="sym">)
    {
</span>	<span class="kwb">int</span> dflt <span class="sym">=</span> MINDEPTH <span class="sym">+</span> <span class="num">2</span><span class="sym">;

</span>	<span class="kwa">if</span> <span class="sym">(</span> dflt <span class="sym">&gt;</span> maxDepth<span class="sym">)</span> maxDepth <span class="sym">=</span> dflt<span class="sym">;

</span>	<span class="kwb">int</span> stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">;

</span>	<span class="kwb">int</span> check <span class="sym">= (</span> <span class="kwa">new</span> <span class="kwc">TreeNode</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>stretchDepth<span class="sym">)).</span>itemCheck<span class="sym">();

</span>	<span class="com">/* allegedly, concatenating String objects in Java is inefficient;
	 * the StringBuffer is used here in a naive attempt to improve
	 * preformance. I haven't verified that it does so */</span>
	<span class="kwc">StringBuffer</span> buff <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">(</span> <span class="str">&quot;stretch tree of depth &quot;</span><span class="sym">);
</span>	buff<span class="sym">.</span>append<span class="sym">(</span> stretchDepth<span class="sym">).</span>append<span class="sym">(</span> <span class="str">&quot;</span><span class="esc">\t </span> <span class="str">check: &quot;</span><span class="sym">).</span>append<span class="sym">(</span> check<span class="sym">);
</span>	<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span> buff<span class="sym">.</span>toString<span class="sym">());

</span>	<span class="kwc">TreeNode</span> longLivedTree <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">TreeNode</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>maxDepth<span class="sym">);

</span>	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> depth<span class="sym">=</span>MINDEPTH<span class="sym">;</span> depth<span class="sym">&lt;=</span>maxDepth<span class="sym">;</span> depth<span class="sym">+=</span><span class="num">2</span><span class="sym">)
	    {
</span>		<span class="kwb">int</span> iterations <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> MINDEPTH<span class="sym">);

</span>		check <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>iterations<span class="sym">;</span> i<span class="sym">++)
		    {
</span>			check <span class="sym">+= (</span> <span class="kwa">new</span> <span class="kwc">TreeNode</span><span class="sym">(</span>i<span class="sym">,</span>depth<span class="sym">)).</span>itemCheck<span class="sym">();
</span>			check <span class="sym">+= (</span> <span class="kwa">new</span> <span class="kwc">TreeNode</span><span class="sym">(-</span>i<span class="sym">,</span>depth<span class="sym">)).</span>itemCheck<span class="sym">();
		    }

</span>		buff <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">(</span> iterations<span class="sym">*</span><span class="num">2</span><span class="sym">);
</span>		buff<span class="sym">.</span>append<span class="sym">(</span> <span class="str">&quot;</span><span class="esc">\t </span> <span class="str">trees of depth &quot;</span><span class="sym">).</span>append<span class="sym">(</span>depth<span class="sym">).</span>append<span class="sym">(</span> <span class="str">&quot;</span><span class="esc">\t </span> <span class="str">check: &quot;</span><span class="sym">).</span>append<span class="sym">(</span> check<span class="sym">);
</span>		<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span> buff<span class="sym">.</span>toString<span class="sym">());
	    }

</span>	buff <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">StringBuffer</span><span class="sym">(</span> <span class="str">&quot;long lived tree of depth &quot;</span><span class="sym">);
</span>	buff<span class="sym">.</span>append<span class="sym">(</span> maxDepth<span class="sym">).</span>append<span class="sym">(</span> <span class="str">&quot;</span><span class="esc">\t </span> <span class="str">check: &quot;</span><span class="sym">).</span>append<span class="sym">(</span> longLivedTree<span class="sym">.</span>itemCheck<span class="sym">());
</span>	<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span> buff<span class="sym">.</span>toString<span class="sym">());
    }

</span>    <span class="com">/* a node in a binary tree */</span>
    <span class="kwa">class</span> <span class="kwc">TreeNode
</span>    <span class="sym">{
</span>	<span class="kwa">private</span> <span class="kwc">TreeNode</span> left <span class="sym">=</span> null<span class="sym">,</span> right <span class="sym">=</span> null<span class="sym">;
</span>	<span class="kwa">private</span> <span class="kwb">int</span> item<span class="sym">;


</span>	<span class="com">/**
	 * construct me with this item; and construct a tree below me of
	 * depth depth, with items suitably offset from this item
	 *
	 * &#64;param item my item value
	 * &#64;param depth the depth of the tree to create beneath me.
	 */</span>
	<span class="kwc">TreeNode</span><span class="sym">(</span> <span class="kwb">int</span> item<span class="sym">,</span> <span class="kwb">int</span> depth<span class="sym">)
	{
</span>	    <span class="kwa">if</span> <span class="sym">(</span> depth <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)
		{
</span>		    left <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">TreeNode</span><span class="sym">(</span> <span class="num">2</span><span class="sym">*</span>item<span class="num">-1</span><span class="sym">,</span> depth<span class="num">-1</span><span class="sym">);
</span>		    right <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">TreeNode</span><span class="sym">(</span> <span class="num">2</span><span class="sym">*</span>item<span class="sym">,</span> depth<span class="num">-1</span><span class="sym">);
		}
</span>	    <span class="kwa">this</span><span class="sym">.</span>item <span class="sym">=</span> item<span class="sym">;
	}


</span>	<span class="kwa">protected</span> <span class="kwb">int</span> itemCheck<span class="sym">()
	{
</span>	    <span class="slc">// if necessary deallocate here
</span>	    <span class="kwa">if</span> <span class="sym">(</span>left<span class="sym">==</span>null<span class="sym">)</span> <span class="kwa">return</span> item<span class="sym">;
</span>	    <span class="kwa">else return</span> item <span class="sym">+</span> left<span class="sym">.</span>itemCheck<span class="sym">() -</span> right<span class="sym">.</span>itemCheck<span class="sym">();
	}
    }
}</span>
