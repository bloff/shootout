<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Vincent Kraeutler</span>
<span class="com">*/</span>
<span class="kwa">import</span> scala<span class="sym">.</span>actors<span class="sym">.</span>Actor
<span class="kwa">import</span> scala<span class="sym">.</span>actors<span class="sym">.</span>Actor<span class="sym">.</span>_

<span class="kwa">object</span> threadring <span class="sym">{</span>

    <span class="kwa">class</span> <span class="kwc">Thread</span><span class="sym">(</span>_label<span class="sym">:</span> <span class="kwb">int</span><span class="sym">)</span> <span class="kwa">extends</span> Actor <span class="sym">{</span>

        <span class="kwa">val</span> label <span class="sym">=</span> _label
        <span class="kwa">var</span> next <span class="sym">:</span> <span class="kwc">Thread</span> <span class="sym">=</span> null

        <span class="kwa">def</span> act<span class="sym">() {</span> loop <span class="sym">{</span> react <span class="sym">{</span>
                        <span class="kwa">case</span> <span class="num">0</span> <span class="sym">=&gt; {</span>
                                println<span class="sym">(</span>label<span class="sym">)</span>
                                <span class="kwc">System</span><span class="sym">.</span>exit<span class="sym">(</span><span class="num">0</span><span class="sym">)</span>
                        <span class="sym">}</span>
                        <span class="kwa">case</span> <span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">int</span><span class="sym">) =&gt; {</span>
                                next <span class="sym">!</span> n <span class="sym">-</span> <span class="num">1</span>
                        <span class="sym">}</span>
                <span class="sym">}}}</span>
    <span class="sym">}</span>

    <span class="slc">// create the threads</span>
    <span class="kwa">var</span> ring <span class="sym">=</span> <span class="kwc">List</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">503</span><span class="sym">).</span>map <span class="sym">{</span> i <span class="sym">=&gt;</span> <span class="kwa">new</span> <span class="kwc">Thread</span><span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">) }.</span>toArray

    <span class="slc">// hook them up</span>
    ring<span class="sym">.</span>foreach<span class="sym">{</span>t <span class="sym">=&gt; {</span>
                    <span class="kwa">val</span> nextIndex <span class="sym">= (</span>t<span class="sym">.</span>label<span class="sym">) %</span> ring<span class="sym">.</span>length
                    t<span class="sym">.</span>next <span class="sym">=</span> ring<span class="sym">(</span>nextIndex<span class="sym">)</span>
                    t<span class="sym">.</span>start
                 <span class="sym">}}</span>

    <span class="kwa">def</span> main<span class="sym">(</span>args <span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) :</span> Unit <span class="sym">= {</span>
           <span class="kwa">val</span> nHops <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">(</span><span class="num">0</span><span class="sym">))</span>
           ring<span class="sym">(</span><span class="num">0</span><span class="sym">) !</span> nHops
    <span class="sym">}</span>
<span class="sym">}</span>
