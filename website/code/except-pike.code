<span class="line">    1 </span><span class="dir">#!/usr/bin/pike
</span><span class="line">    2 </span><span class="dir"></span><span class="slc">// -*- mode: pike -*-
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// $Id: except-pike.code,v 1.3 2004-11-11 07:13:57 bfulgham Exp $
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">// from: Per Hedbor
</span><span class="line">    6 </span><span class="slc"></span>
<span class="line">    7 </span><span class="slc">// this version requires Pike 7.1
</span><span class="line">    8 </span><span class="slc"></span>
<span class="line">    9 </span>class HiException<span class="sym">(</span> <span class="kwb">mixed</span> value <span class="sym">) {</span> <span class="kwb">constant</span> IsHi <span class="sym">=</span> <span class="num">1</span><span class="sym">; }
</span><span class="line">   10 </span><span class="sym"></span>class LoException<span class="sym">(</span> <span class="kwb">mixed</span> value <span class="sym">) {</span> <span class="kwb">constant</span> IsLo <span class="sym">=</span> <span class="num">1</span><span class="sym">; }
</span><span class="line">   11 </span><span class="sym">
</span><span class="line">   12 </span><span class="sym"></span><span class="kwb">void</span> some_function<span class="sym">(</span> <span class="kwb">int</span> num <span class="sym">)
</span><span class="line">   13 </span><span class="sym">{
</span><span class="line">   14 </span><span class="sym"></span>    if<span class="sym">(</span> <span class="kwb">mixed</span> e <span class="sym">=</span> catch<span class="sym">(</span>  hi_function<span class="sym">(</span> num <span class="sym">) ) )
</span><span class="line">   15 </span><span class="sym"></span>        error<span class="sym">(</span> <span class="str">&quot;We shouldn't get here (%s)&quot;</span><span class="sym">,</span> <span class="kwa">describe_error</span><span class="sym">(</span> e <span class="sym">) );
</span><span class="line">   16 </span><span class="sym">}
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym"></span><span class="kwb">int</span> HI<span class="sym">,</span> LO<span class="sym">;
</span><span class="line">   19 </span><span class="sym">
</span><span class="line">   20 </span><span class="sym"></span><span class="kwb">void</span> hi_function<span class="sym">(</span><span class="kwb">int</span> num<span class="sym">)
</span><span class="line">   21 </span><span class="sym">{
</span><span class="line">   22 </span><span class="sym"></span>    if<span class="sym">(</span> <span class="kwb">mixed</span> e <span class="sym">=</span> catch<span class="sym">(</span> lo_function<span class="sym">(</span> num <span class="sym">) ) )
</span><span class="line">   23 </span><span class="sym"></span>        if<span class="sym">(</span> e<span class="sym">-&gt;</span>IsHi <span class="sym">)
</span><span class="line">   24 </span><span class="sym"></span>            HI<span class="sym">++;
</span><span class="line">   25 </span><span class="sym"></span>        else
<span class="line">   26 </span>            <span class="kwa">throw</span><span class="sym">(</span> e <span class="sym">);
</span><span class="line">   27 </span><span class="sym">}
</span><span class="line">   28 </span><span class="sym">
</span><span class="line">   29 </span><span class="sym"></span><span class="kwb">void</span> lo_function<span class="sym">(</span><span class="kwb">int</span> num<span class="sym">)
</span><span class="line">   30 </span><span class="sym">{
</span><span class="line">   31 </span><span class="sym"></span>    if<span class="sym">(</span> <span class="kwb">mixed</span> e <span class="sym">=</span> catch<span class="sym">(</span>  blowup<span class="sym">(</span>num<span class="sym">) ) )
</span><span class="line">   32 </span><span class="sym"></span>        if<span class="sym">(</span> e<span class="sym">-&gt;</span>IsLo <span class="sym">)
</span><span class="line">   33 </span><span class="sym"></span>            LO<span class="sym">++;
</span><span class="line">   34 </span><span class="sym"></span>        else
<span class="line">   35 </span>            <span class="kwa">throw</span><span class="sym">(</span> e <span class="sym">);
</span><span class="line">   36 </span><span class="sym">}
</span><span class="line">   37 </span><span class="sym">
</span><span class="line">   38 </span><span class="sym">
</span><span class="line">   39 </span><span class="sym"></span><span class="kwb">void</span> blowup<span class="sym">(</span><span class="kwb">int</span> num<span class="sym">)
</span><span class="line">   40 </span><span class="sym">{
</span><span class="line">   41 </span><span class="sym"></span>    if<span class="sym">(</span> num <span class="sym">&amp;</span> <span class="num">1</span> <span class="sym">)
</span><span class="line">   42 </span><span class="sym"></span>        <span class="kwa">throw</span><span class="sym">(</span> LoException<span class="sym">(</span>num<span class="sym">) );
</span><span class="line">   43 </span><span class="sym"></span>    else
<span class="line">   44 </span>        <span class="kwa">throw</span><span class="sym">(</span> HiException<span class="sym">(</span>num<span class="sym">) );
</span><span class="line">   45 </span><span class="sym">}
</span><span class="line">   46 </span><span class="sym">
</span><span class="line">   47 </span><span class="sym"></span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span> argv<span class="sym">)
</span><span class="line">   48 </span><span class="sym">{
</span><span class="line">   49 </span><span class="sym"></span>    <span class="kwb">int</span> num <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[-</span><span class="num">1</span><span class="sym">];
</span><span class="line">   50 </span><span class="sym"></span>    if<span class="sym">(</span> num <span class="sym">&lt;</span> <span class="num">1</span> <span class="sym">)
</span><span class="line">   51 </span><span class="sym"></span>        num <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   52 </span><span class="sym"></span>    while<span class="sym">(</span>num<span class="sym">)
</span><span class="line">   53 </span><span class="sym"></span>        some_function<span class="sym">(</span> num<span class="sym">-- );
</span><span class="line">   54 </span><span class="sym"></span>    <span class="kwa">write</span><span class="sym">(</span> <span class="str">&quot;Exceptions: HI=%d / LO=%d</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">,</span> HI<span class="sym">,</span> LO <span class="sym">);
</span><span class="line">   55 </span><span class="sym">}</span>
