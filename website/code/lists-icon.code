<span class="slc"># -*- mode: icon -*-</span>
<span class="slc"># $Id: lists-icon.code,v 1.8 2006-09-20 05:51:45 bfulgham Exp $</span>
<span class="slc"># http://www.bagley.org/~doug/shootout/</span>
<span class="slc"># based on code from Cheyenne Wills</span>

<span class="slc">#  first create a list (L1) of integers from 1 through SIZE (SIZE is</span>
<span class="slc">#  currently defined as 10000).</span>

<span class="slc">#  copy L1 to L2 (can use any builtin list copy function, if</span>
<span class="slc">#  available)</span>

<span class="slc">#  remove each individual item from left side (head) of L2 and append</span>
<span class="slc">#  to right side (tail) of L3 (preserving order). (L2 should be</span>
<span class="slc">#  emptied by one item at a time as that item is appended to L3).</span>

<span class="slc">#  remove each individual item from right side (tail) of L3 and append</span>
<span class="slc">#  to right side (tail) of L2 (reversing list). (L3 should be emptied</span>
<span class="slc">#  by one item at a time as that item is appended to L2).</span>

<span class="slc">#  reverse L1 (preferably in place) (can use any builtin function for</span>
<span class="slc">#  this, if available).</span>

<span class="slc">#  check that first item of L1 is now == SIZE.</span>

<span class="slc">#  and compare L1 and L2 for equality and return length of L1 (which</span>
<span class="slc">#  should be equal to SIZE).</span>

<span class="kwa">procedure</span> main<span class="sym">(</span>argv<span class="sym">)</span>
    n <span class="sym">:=</span> argv<span class="sym">[</span><span class="num">1</span><span class="sym">] |</span> <span class="num">1</span>
    <span class="kwa">every</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do</span> count <span class="sym">:=</span> test_lists<span class="sym">()</span>
    write<span class="sym">(</span>count<span class="sym">)</span>
<span class="kwa">end</span>

<span class="kwa">procedure</span> test_lists<span class="sym">(</span>args<span class="sym">)</span>
	SIZE <span class="sym">:=</span> <span class="num">10000</span>

	L1 <span class="sym">:=</span> <span class="kwb">list</span><span class="sym">()</span>
	<span class="kwa">every</span> put<span class="sym">(</span>L1<span class="sym">,</span><span class="num">1</span> <span class="kwa">to</span> SIZE<span class="sym">)</span>

	L2 <span class="sym">:=</span> copy<span class="sym">(</span>L1<span class="sym">)</span>

	L3 <span class="sym">:=</span> <span class="kwb">list</span><span class="sym">()</span>
	<span class="kwa">while</span> put<span class="sym">(</span>L3<span class="sym">,</span>get<span class="sym">(</span>L2<span class="sym">))</span>

	<span class="kwa">while</span> push<span class="sym">(</span>L2<span class="sym">,</span>pop<span class="sym">(</span>L3<span class="sym">))</span>

	reverseL<span class="sym">(</span>L1<span class="sym">)</span>

	<span class="kwa">if</span> L1<span class="sym">[</span><span class="num">1</span><span class="sym">]</span> ~<span class="sym">=</span> SIZE <span class="kwa">then</span> write<span class="sym">(</span><span class="str">&quot;Failed test&quot;</span><span class="sym">)</span>

	<span class="kwa">every</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> SIZE <span class="kwa">do</span>
		<span class="kwa">if</span> L1<span class="sym">[</span>i<span class="sym">]</span> ~<span class="sym">=</span> L2<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">then</span> write<span class="sym">(</span><span class="str">&quot;L1 ~= L2&quot;</span><span class="sym">)</span>

	<span class="kwa">return</span><span class="sym">(*</span>L1<span class="sym">)</span>
<span class="kwa">end</span>

<span class="slc"># Reverse a list in place</span>
<span class="kwa">procedure</span> reverseL<span class="sym">(</span>l<span class="sym">)</span>
	ender <span class="sym">:= *</span>l <span class="sym">+</span> <span class="num">1</span>
	middle <span class="sym">:=</span> <span class="kwb">integer</span><span class="sym">(*</span>l <span class="sym">/</span> <span class="num">2</span><span class="sym">)</span>
	<span class="kwa">every</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> middle <span class="kwa">do</span>
		l<span class="sym">[</span>i<span class="sym">] :=:</span> l<span class="sym">[</span>ender <span class="sym">-</span> i<span class="sym">]</span>
<span class="kwa">end</span>
