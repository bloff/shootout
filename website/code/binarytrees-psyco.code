<span class="slc">#!/usr/bin/python -OO
</span><span class="slc"># The Computer Language Shootout Benchmarks
</span><span class="slc"># http://shootout.alioth.debian.org/
</span><span class="slc">#
</span><span class="slc"># contributed by Kevin Carson
</span>
<span class="kwc">import</span> sys<span class="sym">,</span> psyco

psyco<span class="sym">.</span>full<span class="sym">()


</span><span class="kwa">class</span> treeNode <span class="sym">:
</span>    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> left<span class="sym">,</span> right<span class="sym">,</span> item<span class="sym">) :
</span>        <span class="kwc">self</span><span class="sym">.</span>left <span class="sym">=</span> left
        <span class="kwc">self</span><span class="sym">.</span>right <span class="sym">=</span> right
        <span class="kwc">self</span><span class="sym">.</span>item <span class="sym">=</span> item


    <span class="kwb">def</span> ItemCheck<span class="sym">(</span><span class="kwc">self</span><span class="sym">) :
</span>        <span class="kwb">if</span> <span class="kwc">self</span><span class="sym">.</span>left <span class="sym">==</span> None <span class="sym">:
</span>            <span class="kwb">return</span> <span class="kwc">self</span><span class="sym">.</span>item
        <span class="kwb">else</span> <span class="sym">:
</span>            <span class="kwb">return</span> <span class="kwc">self</span><span class="sym">.</span>item <span class="sym">+</span> <span class="kwc">self</span><span class="sym">.</span>left<span class="sym">.</span>ItemCheck<span class="sym">() -</span> <span class="kwc">self</span><span class="sym">.</span>right<span class="sym">.</span>ItemCheck<span class="sym">()


</span><span class="kwb">def</span> BottomUpTree<span class="sym">(</span>item<span class="sym">,</span> depth<span class="sym">) :
</span>    <span class="kwb">if</span> depth <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">:
</span>        item_item <span class="sym">=</span> <span class="num">2</span> <span class="sym">*</span> item
        depth <span class="sym">-=</span> <span class="num">1
</span>        <span class="kwb">return</span> treeNode<span class="sym">(
</span>            BottomUpTree<span class="sym">(</span>item_item <span class="num">- 1</span><span class="sym">,</span> depth<span class="sym">),
</span>            BottomUpTree<span class="sym">(</span>item_item<span class="sym">,</span> depth<span class="sym">),
</span>            item
        <span class="sym">)
</span>    <span class="kwb">else</span> <span class="sym">:
</span>        <span class="kwb">return</span> treeNode<span class="sym">(</span>None<span class="sym">,</span> None<span class="sym">,</span> item<span class="sym">)


</span><span class="kwb">def</span> main<span class="sym">() :
</span>    N <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])

</span>    minDepth <span class="sym">=</span> <span class="num">4

</span>    <span class="kwb">if</span> <span class="sym">(</span>minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">) &gt;</span> N <span class="sym">:
</span>        maxDepth <span class="sym">=</span> minDepth <span class="sym">+</span> <span class="num">2
</span>    <span class="kwb">else</span> <span class="sym">:
</span>        maxDepth <span class="sym">=</span> N

    stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1

</span>    stretchTree <span class="sym">=</span> BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretchDepth<span class="sym">)
</span>    <span class="kwb">print</span> <span class="str">&quot;stretch tree of depth %d</span><span class="esc">\t </span> <span class="str">check: %d&quot;</span> \
        <span class="sym">% (</span>stretchDepth<span class="sym">,</span> stretchTree<span class="sym">.</span>ItemCheck<span class="sym">())
</span>    stretchTree <span class="sym">=</span> None

    longLivedTree <span class="sym">=</span> BottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> maxDepth<span class="sym">)

</span>    <span class="kwb">for</span> depth <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>minDepth<span class="sym">,</span> maxDepth <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="num">2</span><span class="sym">) :
</span>        iterations <span class="sym">=</span> <span class="num">2</span><span class="sym">**(</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">)
</span>        check <span class="sym">=</span> <span class="num">0

</span>        <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> iterations <span class="sym">+</span> <span class="num">1</span><span class="sym">) :
</span>            tempTree <span class="sym">=</span> BottomUpTree<span class="sym">(</span>i<span class="sym">,</span> depth<span class="sym">)
</span>            check <span class="sym">+=</span> tempTree<span class="sym">.</span>ItemCheck<span class="sym">()

</span>            tempTree <span class="sym">=</span> BottomUpTree<span class="sym">(-</span>i<span class="sym">,</span> depth<span class="sym">)
</span>            check <span class="sym">+=</span> tempTree<span class="sym">.</span>ItemCheck<span class="sym">()

</span>        <span class="kwb">print</span> <span class="str">&quot;%d</span><span class="esc">\t </span> <span class="str">trees of depth %d</span><span class="esc">\t </span> <span class="str">check: %d&quot;</span> \
            <span class="sym">% (</span>iterations <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> depth<span class="sym">,</span> check<span class="sym">)

</span>    <span class="kwb">print</span> <span class="str">&quot;long lived tree of depth %d</span><span class="esc">\t </span> <span class="str">check: %d&quot;</span> \
        <span class="sym">% (</span>maxDepth<span class="sym">,</span> longLivedTree<span class="sym">.</span>ItemCheck<span class="sym">())


</span>main<span class="sym">()</span>
