BUILD COMMANDS FOR: heapsort.sbcl

Tue Nov  1 00:44:08 PST 2005

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "heapsort.sbcl_compile")'
### START heapsort.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "heapsort.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END heapsort.sbcl_compile


; compiling file "/opt/shootout/shootout/bench/heapsort/tmp/heapsort.sbcl" (written 01 NOV 2005 12:44:08 AM):
; compiling (DEFCONSTANT +IM+ ...)
; compiling (DEFCONSTANT +IA+ ...)
; compiling (DEFCONSTANT +IC+ ...)
; compiling (DEFVAR *LAST* ...)
; compiling (DEFUN GEN_RANDOM ...)
; file: /opt/shootout/shootout/bench/heapsort/tmp/heapsort.sbcl
; in: DEFUN GEN_RANDOM
;     (* *LAST* +IA+)
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a (SIGNED-BYTE 32), not a (UNSIGNED-BYTE 32).
;   The result is a (VALUES (INTEGER -8325794103296 8325794099419)
;                           &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 32) &REST T).
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a (SIGNED-BYTE 32), not a FIXNUM.
;   The result is a (VALUES (INTEGER -8325794103296 8325794099419)
;                           &OPTIONAL), not a (VALUES FIXNUM &REST T).
; 
; note: forced to do GENERIC-* (cost 30)
;       unable to do inline fixnum arithmetic (cost 3) because:
;       The first argument is a (SIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (INTEGER -8325794103296 8325794099419)
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 4) because:
;       The first argument is a (SIGNED-BYTE 32), not a FIXNUM.
;       The result is a (VALUES (INTEGER -8325794103296 8325794099419)
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (+ (* *LAST* +IA+) +IC+)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER -8325794103296
;                                        8325794099419), not a FIXNUM.
;       The result is a (VALUES (INTEGER -8325794073723 8325794128992)
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER -8325794103296
;                                        8325794099419), not a FIXNUM.
;       The result is a (VALUES (INTEGER -8325794073723 8325794128992)
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (MOD (+ (* *LAST* +IA+) +IC+) +IM+)
; --> BLOCK LET IF AND IF AND IF MINUSP 
; ==>
;   (< NUMBER 0)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a (INTEGER -8325794073723
;                                        8325794128992), not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER -8325794073723
;                                        8325794128992), not a FIXNUM.
;       etc.

;     (DEFUN GEN_RANDOM (MAX)
;     (DECLARE (TYPE (SIGNED-BYTE 32) *LAST*))
;     (DECLARE (TYPE (SIGNED-BYTE 32) IM IA IC))
;     (DECLARE (DOUBLE-FLOAT MAX))
;     (SETQ *LAST* (MOD (+ (* *LAST* +IA+) +IC+) +IM+))
;     (/ (* MAX *LAST*) +IM+))
; --> PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA GEN_RANDOM
;                          (MAX)
;                          (DECLARE (TYPE (SIGNED-BYTE 32) *LAST*))
;                          (DECLARE (TYPE (SIGNED-BYTE 32) IM IA IC))
;                          (DECLARE (DOUBLE-FLOAT MAX))
;                          (BLOCK GEN_RANDOM
;                            (SETQ *LAST* (MOD (+ # +IC+) +IM+))
;                            (/ (* MAX *LAST*) +IM+)))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; compiling (DEFUN HEAPSORT ...)
; compiling (DEFUN MAIN ...)
; file: /opt/shootout/shootout/bench/heapsort/tmp/heapsort.sbcl
; in: DEFUN MAIN
;     (FORMAT T "~,10F~%" (AREF ARY N))
; --> FORMAT FORMATTER FUNCTION BLOCK LET 
; ==>
;   (SB-FORMAT::FORMAT-FIXED STREAM
;                            #:FORMAT-ARG-83
;                            #:G682
;                            #:G683
;                            #:G684
;                            #:G685
;                            #:G686
;                            NIL)
; 
; note: doing float to pointer coercion (cost 13)

; in: DEFUN GEN_RANDOM
;     (DEFUN GEN_RANDOM (MAX)
;     (DECLARE (TYPE (SIGNED-BYTE 32) *LAST*))
;     (DECLARE (TYPE (SIGNED-BYTE 32) IM IA IC))
;     (DECLARE (DOUBLE-FLOAT MAX))
;     (SETQ *LAST* (MOD (+ (* *LAST* +IA+) +IC+) +IM+))
;     (/ (* MAX *LAST*) +IM+))
; --> PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA GEN_RANDOM
;                          (MAX)
;                          (DECLARE (TYPE (SIGNED-BYTE 32) *LAST*))
;                          (DECLARE (TYPE (SIGNED-BYTE 32) IM IA IC))
;                          (DECLARE (DOUBLE-FLOAT MAX))
;                          (BLOCK GEN_RANDOM
;                            (SETQ *LAST* (MOD (+ # +IC+) +IM+))
;                            (/ (* MAX *LAST*) +IM+)))
; 
; caught WARNING:
;   undefined variable: IA
; 
; caught WARNING:
;   undefined variable: IC
; 
; caught WARNING:
;   undefined variable: IM

; 
; caught WARNING:
;   These variables are undefined:
;     IA IC IM
; 
; compilation unit finished
;   caught 4 WARNING conditions
;   printed 7 notes


; /opt/shootout/shootout/bench/heapsort/tmp/heapsort.fasl written
; compilation finished in 0:00:01
[doing purification: roots handlers stack bindings static cleanup done]
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /opt/shootout/shootout/bench/heapsort/tmp/sbcl.core:
writing 20108688 bytes from the read-only space at 0x01000000
writing 6713768 bytes from the static space at 0x05000000
writing 4096 bytes from the dynamic space at 0x09000000
done]
### START heapsort.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END heapsort.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load heapsort.sbcl_run %A


PROGRAM OUTPUT
==============
0.9999928555
