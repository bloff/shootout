<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> Application System

<span class="kwb">define</span>
   <span class="kwb">fun</span> <span class="sym">{</span>NewIncrementer Next<span class="sym">}</span>
      MessageList
      MessagePort <span class="sym">= {</span>Port.new MessageList<span class="sym">}</span>

      <span class="kwb">proc</span> <span class="sym">{</span>Loop J<span class="sym">|</span>Js S<span class="sym">}</span>
         <span class="kwb">if</span> Next \= <span class="kwa">nil</span> <span class="kwb">then</span>
            <span class="sym">{</span>Next.take J<span class="sym">}</span>
            <span class="sym">{</span>Loop Js <span class="num">0</span><span class="sym">}</span>

         <span class="kwb">else</span>
            Sum <span class="sym">=</span> S<span class="sym">+</span>J
         <span class="kwb">in</span>
            <span class="kwb">if</span> Sum <span class="sym">&lt;</span> Final <span class="kwb">then</span>
               <span class="sym">{</span>Loop Js Sum<span class="sym">}</span>
            <span class="kwb">else</span>
               <span class="sym">{</span>System.show Sum<span class="sym">}</span>
               <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>   <span class="slc">% exit without cleaning up</span>
            <span class="kwb">end</span>
         <span class="kwb">end</span>
      <span class="kwb">end</span>

      <span class="kwb">proc</span> <span class="sym">{</span>Take J<span class="sym">}</span>
         <span class="sym">{</span>Port.send MessagePort J<span class="sym">+</span><span class="num">1</span><span class="sym">}</span>
      <span class="kwb">end</span>
   <span class="kwb">in</span>
      <span class="kwb">thread</span> <span class="sym">{</span>Loop MessageList <span class="num">0</span><span class="sym">}</span> <span class="kwb">end</span>
      incrementer<span class="sym">(</span>take<span class="sym">:</span> Take<span class="sym">)</span>
   <span class="kwb">end</span>


   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application.getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String.toInt Arg<span class="sym">}</span>

   NThreads <span class="sym">=</span> <span class="num">500</span>
   Final <span class="sym">=</span> NThreads <span class="sym">*</span> N

   <span class="kwb">fun</span> <span class="sym">{</span>ThreadChain N NextThread<span class="sym">}</span>
      <span class="kwb">if</span> N <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwb">then</span>
         <span class="sym">{</span>ThreadChain N<span class="sym">-</span><span class="num">1</span> <span class="sym">{</span>NewIncrementer NextThread<span class="sym">}}</span>
      <span class="kwb">else</span>
         NextThread
      <span class="kwb">end</span>
   <span class="kwb">end</span>

   FirstThread <span class="sym">= {</span>ThreadChain NThreads <span class="kwa">nil</span><span class="sym">}</span>

<span class="kwb">in</span>
   <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">1</span>..N <span class="kwb">do</span> <span class="sym">{</span>FirstThread.take <span class="num">0</span><span class="sym">}</span> <span class="kwb">end</span>
<span class="kwb">end</span>
