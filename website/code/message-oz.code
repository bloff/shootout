<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% I still don't quite completely grok dataflow variables [or streams and</span>
<span class="slc">% ports for that matter :)], so have opted for a 'Java'ish ? approach.</span>
<span class="slc">% Whilst I think it's somewhat clunky, it seems fairly fast and</span>
<span class="slc">% reasonably efficient. I look forward to any constructive feedback.</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo<span class="sym">)</span> Application<span class="sym">(</span>exit getArgs<span class="sym">)</span>

<span class="kwb">define</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>NewBLT Counter IsLast Next<span class="sym">}</span>

    EXIT <span class="sym">=</span> ~<span class="num">1</span>  MailBox <span class="sym">= {</span>NewQueue<span class="sym">}</span>  Total <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>

    <span class="slc">% ------------- %</span>

    <span class="kwb">fun</span> <span class="sym">{</span>Get<span class="sym">}</span>
      <span class="sym">{</span>MailBox.delete<span class="sym">}</span>
    <span class="kwb">end</span>

    <span class="kwb">proc</span> <span class="sym">{</span>Put Message<span class="sym">}</span>
      <span class="sym">{</span>MailBox.insert Message<span class="sym">}</span>
    <span class="kwb">end</span>

    <span class="kwb">proc</span> <span class="sym">{</span>Flush<span class="sym">}</span>
      <span class="sym">{</span>MailBox.insert EXIT<span class="sym">}</span>
    <span class="kwb">end</span>

    <span class="slc">% ------------- %</span>

    <span class="kwb">proc</span> <span class="sym">{</span>WaitForThreadExit Parent<span class="sym">}</span>
      <span class="kwb">fun</span> <span class="sym">{</span>Skip<span class="sym">}</span> <span class="kwa">nil</span> <span class="kwb">end</span>
    <span class="kwb">in</span>
      <span class="slc">% A 'not-so-busy' wait by parent thread for subordinate threads to terminate. Could</span>
      <span class="slc">% have used the 'Time.repeat' class to do this [perhaps more efficiently], but this</span>
      <span class="slc">% approach was deemed quite straightforward</span>
      <span class="kwb">for</span> _ <span class="kwb">in</span> <span class="sym">{</span>Skip<span class="sym">};({</span>Counter.current<span class="sym">} &gt;</span> <span class="num">0</span><span class="sym">);{</span>Skip<span class="sym">}</span> <span class="kwb">do</span>
        <span class="sym">{</span>Thread.preempt Parent<span class="sym">}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    <span class="slc">% ------------- %</span>

    <span class="kwb">proc</span> <span class="sym">{</span>Run<span class="sym">}</span>
      <span class="kwb">for</span> Message <span class="kwb">in</span> <span class="sym">{</span>Get<span class="sym">};{</span>Get<span class="sym">}</span> break<span class="sym">:</span>BREAK <span class="kwb">do</span>
        <span class="kwb">if</span> Message <span class="sym">==</span> EXIT <span class="kwb">then</span>
          <span class="slc">% Decrement 'counter' cell to indicate thread creation</span>
          <span class="sym">{</span>Counter.decrement<span class="sym">}</span>

          <span class="slc">% Propogate 'exit' message so other threads terminate</span>
          <span class="sym">{</span>Next.put Message<span class="sym">}</span>

          <span class="slc">% Leave loop, so terminating thread</span>
          <span class="sym">{</span>BREAK<span class="sym">}</span>
        <span class="kwb">else</span>
          <span class="kwb">if</span> IsLast <span class="kwb">then</span>
            Total <span class="sym">:=</span> &#64;Total <span class="sym">+</span> Message
          <span class="kwb">else</span>
            <span class="sym">{</span>Next.put <span class="sym">(</span>Message <span class="sym">+</span> <span class="num">1</span><span class="sym">)}</span>
          <span class="kwb">end</span>
        <span class="kwb">end</span>
      <span class="kwb">end</span>

      <span class="slc">% All done, show sum</span>
      <span class="kwb">if</span> IsLast <span class="kwb">then</span>
        <span class="sym">{</span>System.showInfo &#64;Total<span class="sym">}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    <span class="slc">% ------------- %</span>

  <span class="kwb">in</span>
    <span class="slc">% Incement 'counter' cell to indicate thread creation</span>
    <span class="sym">{</span>Counter.increment<span class="sym">}</span>

    <span class="slc">% Start the thread</span>
    <span class="kwb">thread</span> <span class="sym">{</span>Run<span class="sym">}</span> <span class="kwb">end</span>

    <span class="slc">% Return set of thread management operations</span>
    ops<span class="sym">(</span>get<span class="sym">:</span>Get put<span class="sym">:</span>Put flush<span class="sym">:</span>Flush waitForThreadExit<span class="sym">:</span>WaitForThreadExit<span class="sym">)</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>MakeBLTS N Counter<span class="sym">}</span>
    First

    <span class="kwb">fun</span> <span class="sym">{</span>MakeBLTS_ N BLT<span class="sym">}</span>
      <span class="kwb">if</span> N <span class="sym">==</span> <span class="num">0</span> <span class="kwb">then</span>
        First <span class="sym">=</span> BLT
        BLT
      <span class="kwb">else</span>
        <span class="sym">{</span>MakeBLTS_ <span class="sym">(</span>N <span class="sym">-</span> <span class="num">1</span><span class="sym">) {</span>NewBLT Counter false BLT<span class="sym">}}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

  <span class="kwb">in</span>
    <span class="sym">{</span>MakeBLTS_ N <span class="sym">{</span>NewBLT Counter true First<span class="sym">}}</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>NewCounter<span class="sym">}</span>
    Count <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>  Lock <span class="sym">= {</span>NewLock<span class="sym">}</span>

    <span class="kwb">proc</span> <span class="sym">{</span>Increment<span class="sym">}</span> <span class="kwb">lock</span> Lock <span class="kwb">then</span> Count <span class="sym">:=</span> &#64;Count <span class="sym">+</span> <span class="num">1</span> <span class="kwb">end end</span>
    <span class="kwb">proc</span> <span class="sym">{</span>Decrement<span class="sym">}</span> <span class="kwb">lock</span> Lock <span class="kwb">then</span> Count <span class="sym">:=</span> &#64;Count <span class="sym">-</span> <span class="num">1</span> <span class="kwb">end end</span>
    <span class="kwb">fun</span> <span class="sym">{</span>Current<span class="sym">}</span> <span class="kwb">lock</span> Lock <span class="kwb">then</span> &#64;Count <span class="kwb">end end</span>

  <span class="kwb">in</span>
    ops<span class="sym">(</span>increment<span class="sym">:</span>Increment decrement<span class="sym">:</span>Decrement current<span class="sym">:</span>Current<span class="sym">)</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>CmdlNArg Nth Default<span class="sym">}</span>
    N Nt <span class="kwb">in</span>
    <span class="kwa">try</span>
      Nt <span class="sym">= {</span>String.toInt <span class="sym">{</span>Application.getArgs plain<span class="sym">}</span>.Nth<span class="sym">}</span>
      N <span class="sym">=</span> <span class="kwb">if</span> Nt <span class="sym">&lt;</span> Default <span class="kwb">then</span> Default <span class="kwb">else</span> Nt <span class="kwb">end</span>
    <span class="kwa">catch</span> error<span class="sym">(</span>...<span class="sym">)</span> <span class="kwb">then</span>
      N <span class="sym">=</span> Default
    <span class="kwb">end</span>
    N
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="slc">%% General Purpose Concurrent Queue [CTM implementation]</span>

  <span class="kwb">fun</span> <span class="sym">{</span>NewQueue<span class="sym">}</span>
    X C <span class="sym">= {</span>NewCell q<span class="sym">(</span><span class="num">0</span> X X<span class="sym">)}</span>

    <span class="kwb">proc</span> <span class="sym">{</span>Insert X<span class="sym">}</span>
      N S E1 N1
    <span class="kwb">in</span>
      <span class="sym">{</span>Exchange C q<span class="sym">(</span>N S X<span class="sym">|</span>E1<span class="sym">)</span> q<span class="sym">(</span>N1 S E1<span class="sym">)}</span>
      N1 <span class="sym">=</span> N <span class="sym">+</span> <span class="num">1</span>
    <span class="kwb">end</span>

    <span class="kwb">fun</span> <span class="sym">{</span>Delete<span class="sym">}</span>
      N S1 E N1 X
    <span class="kwb">in</span>
      <span class="sym">{</span>Exchange C q<span class="sym">(</span>N X<span class="sym">|</span>S1 E<span class="sym">)</span> q<span class="sym">(</span>N1 S1 E<span class="sym">)}</span>
      N1 <span class="sym">=</span> N <span class="sym">-</span> <span class="num">1</span>
      X
    <span class="kwb">end</span>
  <span class="kwb">in</span>
    queue<span class="sym">(</span>insert<span class="sym">:</span>Insert delete<span class="sym">:</span>Delete<span class="sym">)</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  N BLTS

<span class="slc">% ------------- %</span>

<span class="kwb">in</span>
  N <span class="sym">= {</span>CmdlNArg <span class="num">1 1</span><span class="sym">}</span>

  <span class="slc">% Create set of 'bounded linked thread's [hence, BLTS :)]</span>
  BLTS <span class="sym">= {</span>MakeBLTS <span class="num">500</span> <span class="sym">{</span>NewCounter<span class="sym">}}</span>

  <span class="slc">% Enque requisite number of messages on first thread</span>
  <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">1</span>..N <span class="kwb">do</span>
    <span class="sym">{</span>BLTS.put <span class="num">0</span><span class="sym">}</span>
  <span class="kwb">end</span>

  <span class="slc">% Enque 'exit' message so thread termination process commences</span>
  <span class="sym">{</span>BLTS.flush<span class="sym">}</span>

  <span class="slc">% Wait here until all subordinate threads terminate</span>
  <span class="sym">{</span>BLTS.waitForThreadExit <span class="sym">{</span>Thread.this<span class="sym">}}</span>

  <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>

