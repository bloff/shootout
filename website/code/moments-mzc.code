#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="slc">;; Moments.scm
</span>
<span class="sym">(</span>require <span class="sym">(</span>lib <span class="str">&quot;list.ss&quot;</span><span class="sym">))</span>  <span class="slc">; quiksort and mergesort
</span>
<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)
  (</span>let<span class="sym">* ((</span>sum <span class="num">0.0</span><span class="sym">)
  (</span>numlist <span class="sym">(</span>let loop <span class="sym">((</span><span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)) (</span>numlist <span class="str">'()))
      (cond ((eof-object? line) numlist)
     (else
      (let ((num (string-&gt;number line)))
        (set! sum (+ num sum))
        (loop (read-line) (cons num numlist))))))))
    (let ((n (length numlist)))
      (let ((mean (/ sum n))
     (average_deviation 0.0)
     (standard_deviation 0.0)
     (variance 0.0)
     (skew 0.0)
     (kurtosis 0.0)
     (median 0.0)
     (deviation 0.0))
 (let loop ((nums numlist))
      (if (not (null? nums))
   (begin
     (set! deviation (- (car nums) mean))
     (set! average_deviation (+ average_deviation (abs deviation)))
     (set! variance (+ variance (expt deviation 2.0)))
     (set! skew (+ skew (expt deviation 3.0)))
     (set! kurtosis (+ kurtosis (expt deviation 4)))
     (loop (cdr nums)))))

 (set! average_deviation (/ average_deviation (exact-&gt;inexact n)))
 (set! variance (/ variance (- n 1)))
 (set! standard_deviation (sqrt variance))

 (cond ((&gt; variance 0.0)
        (set! skew (/ skew (* n variance standard_deviation)))
        (set! kurtosis (- (/ kurtosis (* n variance variance))
     3.0))))

 (set! numlist (quicksort numlist (lambda (x y) (&lt; x y))))

 (let ((mid (quotient n 2)))
   (if (zero? (modulo n 2))
       (set! median (/ (+ (car (list-tail numlist mid))
     (car (list-tail numlist (- mid 1))))
         2.0))
     (set! median (car (list-tail numlist mid)))))


 (set! standard_deviation (/ (round (* standard_deviation 1000000))
1000000))

 (for-each display
                  `(&quot;n:                  &quot; ,n                   &quot;</span><span class="esc">\n</span><span class="str">&quot;
                    &quot;median:             &quot; ,median              &quot;</span><span class="esc">\n</span><span class="str">&quot;
                    &quot;mean:               &quot; ,mean                &quot;</span><span class="esc">\n</span><span class="str">&quot;
                    &quot;average_deviation:  &quot; ,average_deviation   &quot;</span><span class="esc">\n</span><span class="str">&quot;
                    &quot;standard_deviation: &quot; ,standard_deviation  &quot;</span><span class="esc">\n</span><span class="str">&quot;
                    &quot;variance:           &quot; ,variance            &quot;</span><span class="esc">\n</span><span class="str">&quot;
                    &quot;skew:               &quot; ,skew                &quot;</span><span class="esc">\n</span><span class="str">&quot;
                    &quot;kurtosis:           &quot; ,kurtosis            &quot;</span><span class="esc">\n</span><span class="str">&quot; ))))))


</span>
