<span class="com">/*</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * Author: Waldemar Hebisch (hebisch&#64;math.uni.wroc.pl)</span>
<span class="com"> * Optimizations: Michael Herf (mike&#64;herfconsulting.com)</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;unistd.h&gt;</span>
<span class="dir">#include &lt;assert.h&gt;</span>

<span class="dir">#define CHAR int</span>
<span class="dir">#define BSIZ 4096</span>

<span class="kwb">unsigned long</span> ws<span class="sym">[</span><span class="num">256</span><span class="sym">];</span>
<span class="kwb">char</span> buff<span class="sym">[</span>BSIZ<span class="sym">+</span><span class="num">1</span><span class="sym">]</span>&#64;zeroterm<span class="sym">;</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">() {</span>

    <span class="kwb">int</span> w_cnt<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>l_cnt<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>b_cnt<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>cnt<span class="sym">;</span>
    <span class="kwb">unsigned long</span> was_sp <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwb">unsigned char</span> ?pp<span class="sym">,</span> ?pe<span class="sym">;</span>
    <span class="com">/* Fill tables */</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned</span> c <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> c <span class="sym">&lt;</span> <span class="num">256</span><span class="sym">;</span> c<span class="sym">++)</span> ws<span class="sym">[</span>c<span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>

    <span class="com">/* also: ws['\r']=ws['\v']=ws['\f']= */</span>
    ws<span class="sym">[</span><span class="str">' '</span><span class="sym">]=</span>ws<span class="sym">[</span><span class="str">'</span><span class="esc">\t</span><span class="str">'</span><span class="sym">]=</span>ws<span class="sym">[</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">]=</span><span class="num">1</span><span class="sym">;</span>
    ws<span class="sym">[</span><span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">]=</span><span class="num">65536</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

    <span class="com">/* Main loop */</span>
    <span class="kwa">while</span><span class="sym">((</span>cnt<span class="sym">=</span><span class="kwd">read</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>buff<span class="sym">,</span>BSIZ<span class="sym">))) {</span>
        <span class="kwb">unsigned long</span> tcnt <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    b_cnt <span class="sym">+=</span> cnt<span class="sym">;</span>
        <span class="kwb">char</span> ?&#64;nozeroterm mybuf <span class="sym">= (</span><span class="kwb">char</span> ?&#64;nozeroterm<span class="sym">)</span>buff<span class="sym">;</span>
        <span class="kwd">assert</span><span class="sym">(</span>cnt <span class="sym">&lt;=</span> <span class="kwd">numelts</span><span class="sym">(</span>mybuf<span class="sym">));</span>
        <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">unsigned</span> ppi<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> ppi <span class="sym">&lt;</span> cnt<span class="sym">;</span> ppi<span class="sym">++) {</span>
            <span class="kwb">long</span> x <span class="sym">=</span> ws<span class="sym">[</span>mybuf<span class="sym">[</span>ppi<span class="sym">]];</span>
        tcnt <span class="sym">+=</span> x ^ was_sp<span class="sym">;</span>
        was_sp <span class="sym">=</span> x <span class="sym">&amp;</span> <span class="num">0xFFFF</span><span class="sym">;</span>
    <span class="sym">}</span>
    w_cnt <span class="sym">+=</span> tcnt  <span class="sym">&amp;</span> <span class="num">0xFFFF</span><span class="sym">;</span>
    l_cnt <span class="sym">+=</span> tcnt <span class="sym">&gt;&gt;</span> <span class="num">16</span><span class="sym">;</span>
    <span class="sym">}</span>

    w_cnt <span class="sym">+= (</span>ws<span class="sym">[</span> buff<span class="sym">[</span>b_cnt<span class="sym">&amp;(</span>BSIZ<span class="sym">-</span><span class="num">1</span><span class="sym">)-</span><span class="num">1</span><span class="sym">] ]</span>^<span class="num">1</span><span class="sym">)&amp;</span><span class="num">1</span><span class="sym">;</span>
    w_cnt<span class="sym">&gt;&gt;=</span><span class="num">1</span><span class="sym">;</span>

    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%d %d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> l_cnt<span class="sym">,</span> w_cnt<span class="sym">,</span> b_cnt<span class="sym">);</span>
    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
