<span class="sym">/*</span> The Great Computer Language Shootout
   http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/

</span>   contributed by Isaac Gouy <span class="sym">(</span>Clean novice<span class="sym">)
*/

</span><span class="kwa">module</span> heapsort
<span class="kwa">import</span> StdEnv<span class="sym">,</span> StdArrayExtensions<span class="sym">,</span> ArgEnv<span class="sym">,</span> LanguageShootout

Start <span class="sym">= (</span>toStringWith <span class="num">10</span> sortedValues.<span class="sym">[</span>n<span class="num">-1</span><span class="sym">]) +++</span> <span class="str">&quot;\n&quot;</span>
   <span class="kwa">where
</span>      n <span class="sym">=</span> argi
      randomValues <span class="sym">=</span> nran <span class="sym">(</span>n<span class="num">-1</span><span class="sym">)</span> <span class="num">1.0 42</span> <span class="sym">(</span>createUnboxedRealArr n <span class="num">0.0</span><span class="sym">)
</span>      sortedValues <span class="sym">=</span> heapsort randomValues

<span class="sym">//</span> Heapsort implementation adapted from<span class="sym">:
//
//</span> <span class="str">&quot;The Implementation and Efficiency of Arrays in Clean 1.1&quot;</span>
<span class="sym">//</span> John H. G. van Groningen
<span class="sym">//</span> volume <span class="num">1268</span> <span class="kwa">of</span> Lecture Notes <span class="kwa">in</span> Computer Science<span class="sym">,
//</span> pages <span class="num">105</span><span class="slc">--124. Springer-Verlag, 1997
</span><span class="sym">//</span> http<span class="sym">://</span>www.cs.kun.nl<span class="sym">/</span>~clean<span class="sym">/</span>publications.html#<span class="num">1997

</span><span class="sym">::</span> SortElement <span class="sym">:==</span> Real
<span class="sym">::</span> SortArray <span class="sym">:==</span> {#SortElement}

heapsort <span class="sym">:: !*</span>SortArray <span class="sym">-&gt;</span> .SortArray
heapsort a0
   <span class="sym">|</span> n<span class="sym">&lt;</span><span class="num">2</span> <span class="sym">=</span> a
   <span class="sym">=</span> sort_heap <span class="sym">(</span>n<span class="num">-1</span><span class="sym">) (</span>mkheap <span class="sym">(</span>n<span class="sym">&gt;&gt;</span><span class="num">1</span><span class="sym">) (</span>n<span class="num">-1</span><span class="sym">)</span> a<span class="sym">)

</span>   <span class="kwa">where
</span>   <span class="sym">(</span>n<span class="sym">,</span>a<span class="sym">) =</span> usize a0

   mkheap <span class="sym">(-</span><span class="num">1</span><span class="sym">)</span> m a <span class="sym">=</span> a
   mkheap i m a<span class="sym">=:</span>{<span class="sym">[</span>i<span class="sym">]=</span>ai}
      <span class="sym">=</span> mkheap <span class="sym">(</span>i<span class="num">-1</span><span class="sym">)</span> m <span class="sym">(</span>add_to_heap i <span class="sym">((</span>i<span class="sym">&lt;&lt;</span><span class="num">1</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)</span> m ai a<span class="sym">)

</span>   sort_heap i a<span class="sym">=:</span>{<span class="sym">[</span>i<span class="sym">]=</span>ai<span class="sym">, [</span><span class="num">0</span><span class="sym">]=</span>a0}
      <span class="sym">|</span> i<span class="sym">==</span><span class="num">1</span> <span class="sym">=</span> {a <span class="sym">&amp; [</span><span class="num">0</span><span class="sym">]=</span>ai<span class="sym">, [</span>i<span class="sym">]=</span>a0}
      # b <span class="sym">= (</span>add_to_heap <span class="num">0 1</span> deci ai {a <span class="sym">&amp; [</span>i<span class="sym">]=</span>a0}<span class="sym">)
      =</span> sort_heap deci <span class="sym">(</span> b<span class="sym">)
</span>      with deci <span class="sym">=</span> i<span class="num">-1

</span>   add_to_heap i j m ai a
      <span class="sym">|</span> j <span class="sym">&gt;=</span> m
         <span class="sym">=</span> if <span class="sym">(</span>j<span class="sym">&gt;</span>m<span class="sym">)
</span>            {a <span class="sym">&amp; [</span>i<span class="sym">] =</span> ai}
            <span class="sym">(</span>if <span class="sym">(</span>ai<span class="sym">&lt;</span>aj<span class="sym">)
</span>               {a` <span class="sym">&amp; [</span>i<span class="sym">] =</span> aj<span class="sym">, [</span>j<span class="sym">]=</span>ai}
               {a` <span class="sym">&amp; [</span>i<span class="sym">] =</span> ai}
            <span class="sym">)
</span>      with <span class="sym">(</span>aj<span class="sym">,</span> a`<span class="sym">) =</span> uselect a j

   add_to_heap i j m ai a<span class="sym">=:</span>{<span class="sym">[</span>j<span class="sym">]=</span>aj}
      # j1 <span class="sym">=</span> j<span class="sym">+</span><span class="num">1
</span>      #<span class="sym">!</span> aj1 <span class="sym">=</span> a.<span class="sym">[</span>j1<span class="sym">]
      |</span> aj<span class="sym">&lt;</span>aj1
         <span class="sym">=</span> if <span class="sym">(</span>ai<span class="sym">&lt;</span>aj1<span class="sym">)
            (</span>add_to_heap j1 <span class="sym">((</span>j1<span class="sym">&lt;&lt;</span><span class="num">1</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)</span> m ai {a <span class="sym">&amp; [</span>i<span class="sym">]=</span>aj1}<span class="sym">)
</span>            {a <span class="sym">&amp; [</span>i<span class="sym">]=</span>ai}
      <span class="sym">=</span> if <span class="sym">(</span>ai<span class="sym">&lt;</span>aj<span class="sym">)
         (</span>add_to_heap j <span class="sym">((</span>j<span class="sym">&lt;&lt;</span><span class="num">1</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)</span> m ai {a <span class="sym">&amp; [</span>i<span class="sym">]=</span>aj}<span class="sym">)
</span>         {a <span class="sym">&amp; [</span>i<span class="sym">]=</span>ai}

<span class="sym">//</span> Random number generator
im <span class="sym">:==</span> <span class="num">139968
</span>ia <span class="sym">:==</span> <span class="num">3877
</span>ic <span class="sym">:==</span> <span class="num">29573
</span>imd <span class="sym">:==</span> toReal im

nran <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span>Real <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>{#u<span class="sym">:</span>Real} <span class="sym">-&gt;</span> {#v<span class="sym">:</span>Real}<span class="sym">, [</span>u <span class="sym">&lt;=</span> v<span class="sym">]
</span>nran i max seed numbers
   <span class="sym">|</span> i<span class="sym">&lt;</span><span class="num">0</span>   <span class="sym">=</span> numbers
   <span class="sym">=</span> nran <span class="sym">(</span>i<span class="num">-1</span><span class="sym">)</span> max newseed {numbers <span class="sym">&amp; [</span>i<span class="sym">] =</span> newran}
   <span class="kwa">where
</span>      newseed <span class="sym">= (</span>seed <span class="sym">*</span> ia <span class="sym">+</span> ic<span class="sym">)</span> rem im
      newran <span class="sym">=</span>  max <span class="sym">*</span> toReal newseed <span class="sym">/</span> imd
