<span class="line">    1 </span><span class="sym">/*</span> The Great Computer Language Shootout
<span class="line">    2 </span>
<span class="line">    3 </span>      http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/
</span><span class="line">    4 </span><span class="sym"> 
</span><span class="line">    5 </span><span class="sym"> </span>   contributed by Isaac Gouy <span class="sym">(</span>Clean novice<span class="sym">)
</span><span class="line">    6 </span><span class="sym"> 
</span><span class="line">    7 </span><span class="sym"> </span>To compile<span class="sym">:
</span><span class="line">    8 </span><span class="sym">         </span>   cleanIDE.exe <span class="slc">--batch-force-build &quot;e:\shoot\contrib\clean\heapsort.prj&quot; 
</span><span class="line">    9 </span><span class="slc"></span>
<span class="line">   10 </span> To run<span class="sym">:
</span><span class="line">   11 </span><span class="sym"> </span>   heapsort.exe <span class="sym">-</span>con <span class="num">80000
</span><span class="line">   12 </span><span class="num"> </span><span class="sym">*/
</span><span class="line">   13 </span><span class="sym"> 
</span><span class="line">   14 </span><span class="sym"> 
</span><span class="line">   15 </span><span class="sym"> </span><span class="kwa">module</span> heapsort
<span class="line">   16 </span> <span class="kwa">import</span> StdEnv<span class="sym">,</span> StdArrayExtensions<span class="sym">,</span> ArgEnv<span class="sym">,</span> LanguageShootout
<span class="line">   17 </span>
<span class="line">   18 </span>  Start <span class="sym">= (</span>toStringWith <span class="num">10</span> sortedValues.<span class="sym">[</span>n<span class="num">-1</span><span class="sym">]) +++</span> <span class="str">&quot;\n&quot;</span>
<span class="line">   19 </span>    <span class="kwa">where
</span><span class="line">   20 </span><span class="kwa"> </span>      n <span class="sym">=</span> argi
<span class="line">   21 </span>       randomValues <span class="sym">=</span> nran <span class="sym">(</span>n<span class="num">-1</span><span class="sym">)</span> <span class="num">1.0 42</span> <span class="sym">(</span>createUnboxedRealArr n <span class="num">0.0</span><span class="sym">)
</span><span class="line">   22 </span><span class="sym"> </span>      sortedValues <span class="sym">=</span> heapsort randomValues
<span class="line">   23 </span>
<span class="line">   24 </span>
<span class="line">   25 </span>   <span class="sym">//</span> Heapsort implementation adapted from<span class="sym">:
</span><span class="line">   26 </span><span class="sym"> //
</span><span class="line">   27 </span><span class="sym"> //</span> <span class="str">&quot;The Implementation and Efficiency of Arrays in Clean 1.1&quot;</span>
<span class="line">   28 </span> <span class="sym">//</span> John H. G. van Groningen
<span class="line">   29 </span> <span class="sym">//</span> volume <span class="num">1268</span> <span class="kwa">of</span> Lecture Notes <span class="kwa">in</span> Computer Science<span class="sym">,
</span><span class="line">   30 </span><span class="sym">  //</span> pages <span class="num">105</span><span class="slc">--124. Springer-Verlag, 1997 
</span><span class="line">   31 </span><span class="slc"></span><span class="sym">//</span> http<span class="sym">://</span>www.cs.kun.nl<span class="sym">/</span>~clean<span class="sym">/</span>publications.html#<span class="num">1997
</span><span class="line">   32 </span><span class="num"> 
</span><span class="line">   33 </span><span class="num"> </span><span class="sym">::</span> SortElement <span class="sym">:==</span> Real
<span class="line">   34 </span> <span class="sym">::</span> SortArray <span class="sym">:==</span> {#SortElement}
<span class="line">   35 </span>
<span class="line">   36 </span>  heapsort <span class="sym">:: !*</span>SortArray <span class="sym">-&gt;</span> .SortArray
<span class="line">   37 </span> heapsort a0
<span class="line">   38 </span>    <span class="sym">|</span> n<span class="sym">&lt;</span><span class="num">2</span> <span class="sym">=</span> a
<span class="line">   39 </span>    <span class="sym">=</span> sort_heap <span class="sym">(</span>n<span class="num">-1</span><span class="sym">) (</span>mkheap <span class="sym">(</span>n<span class="sym">&gt;&gt;</span><span class="num">1</span><span class="sym">) (</span>n<span class="num">-1</span><span class="sym">)</span> a<span class="sym">)
</span><span class="line">   40 </span><span class="sym"> 
</span><span class="line">   41 </span><span class="sym">    </span>   <span class="kwa">where
</span><span class="line">   42 </span><span class="kwa"> </span>   <span class="sym">(</span>n<span class="sym">,</span>a<span class="sym">) =</span> usize a0
<span class="line">   43 </span>
<span class="line">   44 </span>           mkheap <span class="sym">(-</span><span class="num">1</span><span class="sym">)</span> m a <span class="sym">=</span> a
<span class="line">   45 </span>    mkheap i m a<span class="sym">=:</span>{<span class="sym">[</span>i<span class="sym">]=</span>ai}
<span class="line">   46 </span>        <span class="sym">=</span> mkheap <span class="sym">(</span>i<span class="num">-1</span><span class="sym">)</span> m <span class="sym">(</span>add_to_heap i <span class="sym">((</span>i<span class="sym">&lt;&lt;</span><span class="num">1</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)</span> m ai a<span class="sym">)
</span><span class="line">   47 </span><span class="sym"> 
</span><span class="line">   48 </span><span class="sym">       </span>   sort_heap i a<span class="sym">=:</span>{<span class="sym">[</span>i<span class="sym">]=</span>ai<span class="sym">, [</span><span class="num">0</span><span class="sym">]=</span>a0}
<span class="line">   49 </span>       <span class="sym">|</span> i<span class="sym">==</span><span class="num">1</span> <span class="sym">=</span> {a <span class="sym">&amp; [</span><span class="num">0</span><span class="sym">]=</span>ai<span class="sym">, [</span>i<span class="sym">]=</span>a0}
<span class="line">   50 </span>       # b <span class="sym">= (</span>add_to_heap <span class="num">0 1</span> deci ai {a <span class="sym">&amp; [</span>i<span class="sym">]=</span>a0}<span class="sym">)
</span><span class="line">   51 </span><span class="sym">       =</span> sort_heap deci <span class="sym">(</span> b<span class="sym">)
</span><span class="line">   52 </span><span class="sym"> </span>      with deci <span class="sym">=</span> i<span class="num">-1
</span><span class="line">   53 </span><span class="num"> 
</span><span class="line">   54 </span><span class="num"> </span>   add_to_heap i j m ai a
<span class="line">   55 </span>       <span class="sym">|</span> j <span class="sym">&gt;=</span> m
<span class="line">   56 </span>           <span class="sym">=</span> if <span class="sym">(</span>j<span class="sym">&gt;</span>m<span class="sym">)
</span><span class="line">   57 </span><span class="sym"> </span>            {a <span class="sym">&amp; [</span>i<span class="sym">] =</span> ai}
<span class="line">   58 </span>             <span class="sym">(</span>if <span class="sym">(</span>ai<span class="sym">&lt;</span>aj<span class="sym">)
</span><span class="line">   59 </span><span class="sym"> </span>               {a` <span class="sym">&amp; [</span>i<span class="sym">] =</span> aj<span class="sym">, [</span>j<span class="sym">]=</span>ai}
<span class="line">   60 </span>                {a` <span class="sym">&amp; [</span>i<span class="sym">] =</span> ai}
<span class="line">   61 </span>             <span class="sym">)
</span><span class="line">   62 </span><span class="sym"> </span>      with <span class="sym">(</span>aj<span class="sym">,</span> a`<span class="sym">) =</span> uselect a j
<span class="line">   63 </span>
<span class="line">   64 </span>           add_to_heap i j m ai a<span class="sym">=:</span>{<span class="sym">[</span>j<span class="sym">]=</span>aj}
<span class="line">   65 </span>       # j1 <span class="sym">=</span> j<span class="sym">+</span><span class="num">1
</span><span class="line">   66 </span><span class="num"> </span>      #<span class="sym">!</span> aj1 <span class="sym">=</span> a.<span class="sym">[</span>j1<span class="sym">]
</span><span class="line">   67 </span><span class="sym">       |</span> aj<span class="sym">&lt;</span>aj1
<span class="line">   68 </span>          <span class="sym">=</span> if <span class="sym">(</span>ai<span class="sym">&lt;</span>aj1<span class="sym">)
</span><span class="line">   69 </span><span class="sym">             (</span>add_to_heap j1 <span class="sym">((</span>j1<span class="sym">&lt;&lt;</span><span class="num">1</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)</span> m ai {a <span class="sym">&amp; [</span>i<span class="sym">]=</span>aj1}<span class="sym">)
</span><span class="line">   70 </span><span class="sym"> </span>            {a <span class="sym">&amp; [</span>i<span class="sym">]=</span>ai}
<span class="line">   71 </span>       <span class="sym">=</span> if <span class="sym">(</span>ai<span class="sym">&lt;</span>aj<span class="sym">)
</span><span class="line">   72 </span><span class="sym">          (</span>add_to_heap j <span class="sym">((</span>j<span class="sym">&lt;&lt;</span><span class="num">1</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)</span> m ai {a <span class="sym">&amp; [</span>i<span class="sym">]=</span>aj}<span class="sym">)
</span><span class="line">   73 </span><span class="sym"> </span>         {a <span class="sym">&amp; [</span>i<span class="sym">]=</span>ai}
<span class="line">   74 </span>
<span class="line">   75 </span>
<span class="line">   76 </span>                        <span class="sym">//</span> Random number generator
<span class="line">   77 </span>          im <span class="sym">:==</span> <span class="num">139968
</span><span class="line">   78 </span><span class="num"> </span>ia <span class="sym">:==</span> <span class="num">3877
</span><span class="line">   79 </span><span class="num"> </span>ic <span class="sym">:==</span> <span class="num">29573
</span><span class="line">   80 </span><span class="num"> </span>imd <span class="sym">:==</span> toReal im
<span class="line">   81 </span>
<span class="line">   82 </span>  nran <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span>Real <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>{#u<span class="sym">:</span>Real} <span class="sym">-&gt;</span> {#v<span class="sym">:</span>Real}<span class="sym">, [</span>u <span class="sym">&lt;=</span> v<span class="sym">]
</span><span class="line">   83 </span><span class="sym"> </span>nran i max seed numbers
<span class="line">   84 </span>    <span class="sym">|</span> i<span class="sym">&lt;</span><span class="num">0</span>   <span class="sym">=</span> numbers
<span class="line">   85 </span>    <span class="sym">=</span> nran <span class="sym">(</span>i<span class="num">-1</span><span class="sym">)</span> max newseed {numbers <span class="sym">&amp; [</span>i<span class="sym">] =</span> newran}
<span class="line">   86 </span>    <span class="kwa">where
</span><span class="line">   87 </span><span class="kwa"> </span>      newseed <span class="sym">= (</span>seed <span class="sym">*</span> ia <span class="sym">+</span> ic<span class="sym">)</span> rem im
<span class="line">   88 </span>       newran <span class="sym">=</span>  max <span class="sym">*</span> toReal newseed <span class="sym">/</span> imd
<span class="line">   89 </span>
<span class="line">   90 </span>
<span class="line">   91 </span>                                  
