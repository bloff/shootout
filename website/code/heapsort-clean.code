<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
/* The Great Computer Language Shootout 

   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy (Clean novice)

To compile:	
   cleanIDE.exe <I><FONT COLOR="#B22222">--batch-force-build &quot;e:\shoot\contrib\clean\heapsort.prj&quot;
</FONT></I>
To run:
   heapsort.exe -con 80000
*/


<B><FONT COLOR="#A020F0">module</FONT></B> heapsort
<B><FONT COLOR="#A020F0">import</FONT></B> StdEnv, StdArrayExtensions, ArgEnv, LanguageShootout

Start = (toStringWith 10 sortedValues.[n-1]) +++ <B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>
   <B><FONT COLOR="#A020F0">where</FONT></B>
      n = argi
      randomValues = nran (n-1) 1.0 42 (createUnboxedRealArr n 0.0)
      sortedValues = heapsort randomValues


// Heapsort implementation adapted from:
//
// <B><FONT COLOR="#BC8F8F">&quot;The Implementation and Efficiency of Arrays in Clean 1.1&quot;</FONT></B>
// John H. G. van Groningen
// volume 1268 <B><FONT COLOR="#A020F0">of</FONT></B> Lecture Notes <B><FONT COLOR="#A020F0">in</FONT></B> Computer Science, 
// pages 105<I><FONT COLOR="#B22222">--124. Springer-Verlag, 1997
</FONT></I>// http://www.cs.kun.nl/~clean/publications.html#1997

<B><FONT COLOR="#228B22">:: SortElement :== Real
</FONT></B><B><FONT COLOR="#228B22">:: SortArray :== {#SortElement}
</FONT></B>
heapsort <B><FONT COLOR="#228B22">:: !*SortArray -&gt; .SortArray
</FONT></B>heapsort a0
   | n&lt;2 = a
   = sort_heap (n-1) (mkheap (n&gt;&gt;1) (n-1) a)
   
   <B><FONT COLOR="#A020F0">where</FONT></B>
   (n,a) = usize a0
      
   mkheap (-1) m a = a
   mkheap i m a=:{[i]=ai} 
      = mkheap (i-1) m (add_to_heap i ((i&lt;&lt;1)+1) m ai a)
      
   sort_heap i a=:{[i]=ai, [0]=a0}
      | i==1 = {a &amp; [0]=ai, [i]=a0}
      # b = (add_to_heap 0 1 deci ai {a &amp; [i]=a0})
      = sort_heap deci ( b)
      with deci = i-1

   add_to_heap i j m ai a
      | j &gt;= m 
         = <B><FONT COLOR="#A020F0">if</FONT></B> (j&gt;m)
            {a &amp; [i] = ai}
            (<B><FONT COLOR="#A020F0">if</FONT></B> (ai&lt;aj)
               {a` &amp; [i] = aj, [j]=ai}
               {a` &amp; [i] = ai}
            )
      with (aj, a`) = uselect a j
      
   add_to_heap i j m ai a=:{[j]=aj}
      # j1 = j+1
      #! aj1 = a.[j1]
      | aj&lt;aj1
         = <B><FONT COLOR="#A020F0">if</FONT></B> (ai&lt;aj1)
            (add_to_heap j1 ((j1&lt;&lt;1)+1) m ai {a &amp; [i]=aj1})
            {a &amp; [i]=ai}
      = <B><FONT COLOR="#A020F0">if</FONT></B> (ai&lt;aj)
         (add_to_heap j ((j&lt;&lt;1)+1) m ai {a &amp; [i]=aj})
         {a &amp; [i]=ai}   
         
         
// Random number generator         
im :== 139968
ia :== 3877
ic :== 29573
imd :== toReal im

nran <B><FONT COLOR="#228B22">:: !Int !Real !Int !*{#u:Real} -&gt; {#v:Real}, [u &lt;= v]
</FONT></B>nran i max seed numbers
   | i&lt;0   = numbers
   = nran (i-1) max newseed {numbers &amp; [i] = newran}
   <B><FONT COLOR="#A020F0">where</FONT></B>
      newseed = (seed * ia + ic) rem im
      newran =  max * toReal newseed / imd   
         
         
         </pre></td></tr></table>
