<span class="sym">;;; -*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-</span>
<span class="sym">;;;</span> $Id<span class="sym">:</span> ackermann<span class="sym">.</span>pop11<span class="sym">,</span>v <span class="num">1.1 2004</span><span class="sym">/</span><span class="num">10</span><span class="sym">/</span><span class="num">13 04</span><span class="sym">:</span><span class="num">47</span><span class="sym">:</span><span class="num">56</span> bfulgham Exp $
<span class="com">/*</span>
<span class="com"> Trivial Ackermann implementation.  Does not attempt to force</span>
<span class="com"> Poplog to use tail-recursive calls.</span>
<span class="com"> */</span>
vars n<span class="sym">;</span>

define constant procedure <span class="kwd">fast_ack</span> <span class="sym">(</span>m<span class="sym">,</span> n<span class="sym">);</span>
   <span class="kwa">if</span> m <span class="sym">==</span> <span class="num">0</span> then
      n fi_<span class="sym">+</span> <span class="num">1</span>
   elseif n <span class="sym">==</span> <span class="num">0</span> then
      <span class="kwd">fast_ack</span><span class="sym">(</span>m fi_<span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
   <span class="kwa">else</span>
      <span class="kwd">fast_ack</span><span class="sym">(</span>m fi_<span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="kwd">fast_ack</span><span class="sym">(</span>m<span class="sym">,</span> n fi_<span class="sym">-</span> <span class="num">1</span><span class="sym">))</span>
   endif
enddefine<span class="sym">;</span>

define constant procedure <span class="kwd">get_args</span><span class="sym">();</span>
   <span class="kwa">if</span> <span class="kwd">null</span><span class="sym">(</span>poparglist<span class="sym">)</span> then <span class="num">1</span> <span class="kwa">else</span>
      <span class="kwd">strnumber</span><span class="sym">(</span> <span class="kwd">hd</span><span class="sym">(</span>poparglist<span class="sym">) )</span>
   endif
enddefine<span class="sym">;</span>

<span class="kwd">get_args</span><span class="sym">() -&gt;</span> n<span class="sym">;</span>

<span class="kwd">format_print</span><span class="sym">(</span><span class="str">'Ack(3,~D): ~D</span><span class="esc">\n</span><span class="str">'</span><span class="sym">, [</span>^n ^<span class="sym">(</span><span class="kwd">fast_ack</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> n<span class="sym">))]);</span>
