<span class="kwa">program</span> heapsort<span class="sym">;
</span><span class="kwa">uses</span> SysUtils<span class="sym">,</span> Classes<span class="sym">;

</span><span class="kwa">const
</span>	IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;
</span>	IA <span class="sym">=</span>   <span class="num">3877</span><span class="sym">;
</span>	IC <span class="sym">=</span>  <span class="num">29573</span><span class="sym">;

</span><span class="kwa">var
</span>	ary<span class="sym">:</span> TList<span class="sym">;
</span>	r <span class="sym">:</span> <span class="kwb">real</span><span class="sym">;
</span>	rr <span class="sym">:</span> ^<span class="kwb">real</span><span class="sym">;
</span>	N<span class="sym">,</span> i<span class="sym">,</span> LAST <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;

</span><span class="kwa">function</span> gen_random<span class="sym">(</span>n <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">) :</span> <span class="kwb">real</span><span class="sym">;
</span><span class="kwa">begin
</span>	LAST <span class="sym">:= (</span>LAST <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> <span class="kwa">mod</span> IM<span class="sym">;
</span>	gen_random <span class="sym">:=</span> n <span class="sym">*</span> LAST <span class="sym">/</span> IM<span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> myheapsort<span class="sym">(</span>n <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span> <span class="kwa">var</span> ra <span class="sym">:</span> TList<span class="sym">);
</span><span class="kwa">var
</span>	rr <span class="sym">:</span> ^<span class="kwb">real</span><span class="sym">;
</span>	rra <span class="sym">:</span> <span class="kwb">real</span><span class="sym">;
</span>	i<span class="sym">,</span> j<span class="sym">,</span> l<span class="sym">,</span> ir <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;
</span><span class="kwa">begin
</span>	rra <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>	i <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>	j <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>	l <span class="sym">:=</span> n <span class="kwa">shr</span> <span class="num">1</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>	ir <span class="sym">:=</span> n<span class="sym">;

</span>	<span class="kwa">while</span> <span class="num">1</span> <span class="sym">=</span> <span class="num">1</span> <span class="kwa">do
	begin
		if</span> l <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then begin
</span>			Dec<span class="sym">(</span>l<span class="sym">);
</span>			rra <span class="sym">:=</span> <span class="kwb">real</span><span class="sym">(</span>ra.Items<span class="sym">[</span>l<span class="sym">]</span>^<span class="sym">);
</span>		<span class="kwa">end
		else begin
</span>			rra <span class="sym">:=</span> <span class="kwb">real</span><span class="sym">(</span>ra.Items<span class="sym">[</span>ir<span class="sym">]</span>^<span class="sym">);

</span>			<span class="com">{ WriteLn('ir=1  ', IntToStr(ir), ' &lt;- ', IntToStr(1), ' (', real(ra.items[1]^):10:10, ')' ); }</span>

			GetMem<span class="sym">(</span>rr<span class="sym">,</span> SizeOf<span class="sym">(</span><span class="kwb">real</span><span class="sym">));
</span>			rr^ <span class="sym">:=</span> <span class="kwb">real</span><span class="sym">(</span>ra.Items<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>^<span class="sym">);
</span>			ra.items<span class="sym">[</span>ir<span class="sym">] :=</span> rr<span class="sym">;
</span>			<span class="com">{ *** ra.items[ir] := ra.Items[1]; }</span>

			Dec<span class="sym">(</span>ir<span class="sym">);
</span>			<span class="kwa">if</span> ir <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then
			begin
</span>				<span class="com">{ WriteLn('1=rra ', IntToStr(1), ' &lt;- ', rra:10:10 ); }</span>

				GetMem<span class="sym">(</span>rr<span class="sym">,</span> SizeOf<span class="sym">(</span><span class="kwb">real</span><span class="sym">));
</span>				rr^ <span class="sym">:=</span> rra<span class="sym">;
</span>				ra.items<span class="sym">[</span><span class="num">1</span><span class="sym">] :=</span> rr<span class="sym">;
</span>				<span class="com">{ *** ra.items[1] := &#64;rra; }</span>
				exit<span class="sym">;
</span>			<span class="kwa">end</span><span class="sym">;
</span>		<span class="kwa">end</span><span class="sym">;

</span>		i <span class="sym">:=</span> l<span class="sym">;
</span>		j <span class="sym">:=</span> l <span class="kwa">shl</span> <span class="num">1</span><span class="sym">;

</span>		<span class="com">{ WriteLn( '      l=', IntToStr(l), ' i=', IntToStr(i), ' j=', IntToStr(j), ' ir=', IntToStr(ir)); }</span>

		<span class="kwa">while</span> j <span class="sym">&lt;=</span> ir <span class="kwa">do begin
			if</span> <span class="sym">(</span>j <span class="sym">&lt;</span> ir<span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span><span class="kwb">real</span><span class="sym">(</span>ra.items<span class="sym">[</span>j<span class="sym">]</span>^<span class="sym">) &lt;</span> <span class="kwb">real</span><span class="sym">(</span>ra.items<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]</span>^<span class="sym">))</span> <span class="kwa">then</span> Inc<span class="sym">(</span>j<span class="sym">);

</span>			<span class="com">{ WriteLn('      in2while, j=', IntToStr(j), ' rra=', rra:10:10, ' ra(j)=', real(ra.items[j]^):10:10); }</span>


			<span class="kwa">if</span> rra <span class="sym">&lt;</span> <span class="kwb">real</span><span class="sym">(</span>ra.items<span class="sym">[</span>j<span class="sym">]</span>^<span class="sym">)</span> <span class="kwa">then begin
</span>				<span class="com">{ WriteLn('i=j   ', IntToStr(i), ' &lt;- ', IntToStr(j), ' (', real(ra.items[j]^):10:10, ')' ); }</span>

				GetMem<span class="sym">(</span>rr<span class="sym">,</span> SizeOf<span class="sym">(</span><span class="kwb">real</span><span class="sym">));
</span>				rr^ <span class="sym">:=</span> <span class="kwb">real</span><span class="sym">(</span>ra.items<span class="sym">[</span>j<span class="sym">]</span>^<span class="sym">);
</span>				ra.items<span class="sym">[</span>i<span class="sym">] :=</span> rr<span class="sym">;
</span>				<span class="com">{ *** ra.items[i] := ra.items[j]; }</span>
				i <span class="sym">:=</span> j<span class="sym">;
</span>				Inc<span class="sym">(</span>j<span class="sym">,</span> i<span class="sym">);
</span>			<span class="kwa">end
			else begin
</span>				j <span class="sym">:=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>			<span class="kwa">end</span><span class="sym">;
</span>		<span class="kwa">end</span><span class="sym">;
</span>		<span class="com">{ WriteLn('i=rra ', IntToStr(i), ' &lt;- ', rra:10:10 ); }</span>
		GetMem<span class="sym">(</span>rr<span class="sym">,</span> SizeOf<span class="sym">(</span><span class="kwb">real</span><span class="sym">));
</span>		rr^ <span class="sym">:=</span> rra<span class="sym">;
</span>		ra.items<span class="sym">[</span>i<span class="sym">] :=</span> rr<span class="sym">;
</span>		<span class="com">{ *** ra.items[i] := &#64;rra; }</span>
	<span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">begin
	if</span> ParamCount <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then
</span>		N <span class="sym">:=</span> <span class="num">1
</span>	<span class="kwa">else
</span>		N <span class="sym">:=</span> StrToInt<span class="sym">(</span>ParamStr<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>	<span class="kwa">if</span> N <span class="sym">&lt;</span> <span class="num">1</span> <span class="kwa">then</span> N <span class="sym">:=</span> <span class="num">1</span><span class="sym">;
</span>	LAST <span class="sym">:=</span> <span class="num">42</span><span class="sym">;
</span>	ary <span class="sym">:=</span> TList.Create<span class="sym">;
</span>	ary.Capacity <span class="sym">:=</span> N<span class="sym">;
</span>	r <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span>	GetMem<span class="sym">(</span> rr<span class="sym">,</span> SizeOf<span class="sym">(</span><span class="kwb">real</span><span class="sym">) );
</span>	rr^ <span class="sym">:=</span> r<span class="sym">;
</span>	ary.Add<span class="sym">(</span> rr <span class="sym">);
</span>	<span class="kwa">for</span> i<span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> N <span class="kwa">do begin
</span>		r <span class="sym">:=</span> gen_random<span class="sym">(</span><span class="num">1</span><span class="sym">);
</span>		GetMem<span class="sym">(</span> rr<span class="sym">,</span> SizeOf<span class="sym">(</span><span class="kwb">real</span><span class="sym">) );
</span>		rr^ <span class="sym">:=</span> r<span class="sym">;
</span>		<span class="com">{ WriteLn( 'init:  ', IntToStr(i), '=', r:10:10); }</span>
		ary.Add<span class="sym">(</span> rr <span class="sym">);
</span>	<span class="kwa">end</span><span class="sym">;
</span>	<span class="kwa">for</span> i<span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> N <span class="kwa">do begin
</span>		r <span class="sym">:=</span> <span class="kwb">real</span><span class="sym">(</span>ary.items<span class="sym">[</span>i<span class="sym">]</span>^<span class="sym">);
</span>		<span class="com">{ WriteLn( 'check: ', IntToStr(i), '=', r:10:10); }</span>
	<span class="kwa">end</span><span class="sym">;
</span>	myheapsort<span class="sym">(</span>N<span class="sym">,</span> ary<span class="sym">);
</span>	r <span class="sym">:=</span> <span class="kwb">real</span><span class="sym">(</span>ary.items<span class="sym">[</span>N<span class="sym">]</span>^<span class="sym">);
</span>	WriteLn<span class="sym">(</span> r<span class="sym">:</span><span class="num">10</span><span class="sym">:</span><span class="num">10</span> <span class="sym">);
</span>	ary.Free<span class="sym">;
</span><span class="kwa">end</span>.

