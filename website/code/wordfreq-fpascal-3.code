<span class="com">{  The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Micha Nelissen
}</span>

<span class="kwa">program</span> wordfreq<span class="sym">;

</span><span class="com">{$mode objfpc}</span><span class="com">{$H+}</span>

<span class="kwa">uses
</span>  simple_hash<span class="sym">,</span> strings<span class="sym">;

</span><span class="kwa">procedure</span> readwords<span class="sym">(</span>dict<span class="sym">:</span> ht_pht<span class="sym">);
</span><span class="kwa">var
</span>  i<span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span>  wordbuf<span class="sym">:</span> <span class="kwa">array of</span> <span class="kwb">char</span><span class="sym">;
</span>  wordbuflen<span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span><span class="kwa">begin
</span>  i <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>  wordbuflen <span class="sym">:=</span> <span class="num">128</span><span class="sym">;
</span>  setlength<span class="sym">(</span>wordbuf<span class="sym">,</span> wordbuflen<span class="sym">);
</span>  <span class="kwa">while not</span> eof <span class="kwa">do
  begin
</span>    read<span class="sym">(</span>wordbuf<span class="sym">[</span>i<span class="sym">]);
</span>    <span class="kwa">if</span> wordbuf<span class="sym">[</span>i<span class="sym">]</span> <span class="kwa">in</span> <span class="sym">[</span><span class="str">'a'</span>..<span class="str">'z'</span><span class="sym">,</span> <span class="str">'A'</span>..<span class="str">'Z'</span><span class="sym">]</span> <span class="kwa">then
    begin
</span>      wordbuf<span class="sym">[</span>i<span class="sym">] :=</span> lowercase<span class="sym">(</span>wordbuf<span class="sym">[</span>i<span class="sym">]);
</span>      inc<span class="sym">(</span>i<span class="sym">);
</span>      <span class="kwa">if</span> i <span class="sym">=</span> wordbuflen <span class="kwa">then
      begin
</span>        wordbuflen <span class="sym">*=</span> <span class="num">2</span><span class="sym">;
</span>        setlength<span class="sym">(</span>wordbuf<span class="sym">,</span> wordbuflen<span class="sym">);
</span>      <span class="kwa">end</span><span class="sym">;
</span>    <span class="kwa">end else begin
      if</span> i <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="kwa">then
      begin
</span>        wordbuf<span class="sym">[</span>i<span class="sym">] :=</span> <span class="esc">#0</span><span class="sym">;
</span>        inc<span class="sym">(</span>ht_find_new<span class="sym">(</span>dict<span class="sym">, &#64;</span>wordbuf<span class="sym">[</span><span class="num">0</span><span class="sym">])</span>^.val<span class="sym">);
</span>        i <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwa">end</span><span class="sym">;
</span>    <span class="kwa">end</span><span class="sym">;
</span>  <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">function</span> compare<span class="sym">(</span>a<span class="sym">,</span> b<span class="sym">:</span> ht_pnode<span class="sym">):</span> <span class="kwb">longint</span><span class="sym">;</span> <span class="kwa">inline</span><span class="sym">;
</span><span class="kwa">begin
</span>  result <span class="sym">:=</span> ht_val<span class="sym">(</span>b<span class="sym">) -</span> ht_val<span class="sym">(</span>a<span class="sym">);
</span>  <span class="kwa">if</span> result <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="kwa">then
</span>    exit<span class="sym">;
</span>  result <span class="sym">:=</span> <span class="kwb">byte</span><span class="sym">(</span>ht_key<span class="sym">(</span>b<span class="sym">)</span>^<span class="sym">) -</span> <span class="kwb">byte</span><span class="sym">(</span>ht_key<span class="sym">(</span>a<span class="sym">)</span>^<span class="sym">);
</span>  <span class="kwa">if</span> result <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="kwa">then
</span>    exit<span class="sym">;
</span>  result <span class="sym">:=</span> strcomp<span class="sym">(</span>ht_key<span class="sym">(</span>b<span class="sym">),</span> ht_key<span class="sym">(</span>a<span class="sym">));
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> quicksort<span class="sym">(</span><span class="kwa">var</span> list<span class="sym">:</span> <span class="kwa">array of</span> ht_pnode<span class="sym">;</span> l<span class="sym">,</span> r <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">);
</span><span class="kwa">var
</span>  i<span class="sym">,</span> j <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;
</span>  p<span class="sym">,</span> q <span class="sym">:</span> ht_pnode<span class="sym">;
</span><span class="kwa">begin
 repeat
</span>   i <span class="sym">:=</span> l<span class="sym">;
</span>   j <span class="sym">:=</span> r<span class="sym">;
</span>   p <span class="sym">:=</span> list<span class="sym">[ (</span>l <span class="sym">+</span> r<span class="sym">)</span> <span class="kwa">div</span> <span class="num">2</span> <span class="sym">];
</span>   <span class="kwa">repeat
     while</span> compare<span class="sym">(</span>p<span class="sym">,</span> list<span class="sym">[</span>i<span class="sym">]) &gt;</span> <span class="num">0</span> <span class="kwa">do
</span>       i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>     <span class="kwa">while</span> compare<span class="sym">(</span>p<span class="sym">,</span> list<span class="sym">[</span>j<span class="sym">]) &lt;</span> <span class="num">0</span> <span class="kwa">do
</span>       j <span class="sym">:=</span> j <span class="num">- 1</span><span class="sym">;
</span>     <span class="kwa">If</span> i <span class="sym">&lt;=</span> j <span class="kwa">then
     begin
</span>       q <span class="sym">:=</span> list<span class="sym">[</span>i<span class="sym">];
</span>       list<span class="sym">[</span>i<span class="sym">] :=</span> list<span class="sym">[</span>j<span class="sym">];
</span>       list<span class="sym">[</span>j<span class="sym">] :=</span> q<span class="sym">;
</span>       i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>       j <span class="sym">:=</span> j <span class="num">- 1</span><span class="sym">;
</span>     <span class="kwa">end</span><span class="sym">;
</span>   <span class="kwa">until</span> i <span class="sym">&gt;</span> j<span class="sym">;
</span>   <span class="kwa">if</span> l <span class="sym">&lt;</span> j <span class="kwa">then
</span>     quicksort<span class="sym">(</span>list<span class="sym">,</span> l<span class="sym">,</span> j<span class="sym">);
</span>   l <span class="sym">:=</span> i<span class="sym">;
</span> <span class="kwa">until</span> i <span class="sym">&gt;=</span> r<span class="sym">;
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">procedure</span> printwords<span class="sym">(</span>dict<span class="sym">:</span> ht_pht<span class="sym">);
</span><span class="kwa">var
</span>  sortarr<span class="sym">:</span> <span class="kwa">array of</span> ht_pnode<span class="sym">;
</span>  node<span class="sym">:</span> ht_pnode<span class="sym">;
</span>  i<span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;
</span><span class="kwa">begin
</span>  setlength<span class="sym">(</span>sortarr<span class="sym">,</span> ht_count<span class="sym">(</span>dict<span class="sym">));
</span>  node <span class="sym">:=</span> ht_first<span class="sym">(</span>dict<span class="sym">);
</span>  i <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>  <span class="kwa">while</span> node <span class="sym">&lt;&gt;</span> <span class="kwa">nil do
  begin
</span>    sortarr<span class="sym">[</span>i<span class="sym">] :=</span> node<span class="sym">;
</span>    inc<span class="sym">(</span>i<span class="sym">);
</span>    node <span class="sym">:=</span> ht_next<span class="sym">(</span>dict<span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;
</span>  quicksort<span class="sym">(</span>sortarr<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> ht_count<span class="sym">(</span>dict<span class="sym">)-</span><span class="num">1</span><span class="sym">);

</span>  <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> ht_count<span class="sym">(</span>dict<span class="sym">)-</span><span class="num">1</span> <span class="kwa">do
</span>    writeln<span class="sym">(</span>ht_val<span class="sym">(</span>sortarr<span class="sym">[</span>i<span class="sym">]):</span><span class="num">7</span><span class="sym">,</span> <span class="str">' '</span><span class="sym">,</span> ht_key<span class="sym">(</span>sortarr<span class="sym">[</span>i<span class="sym">]));
</span><span class="kwa">end</span><span class="sym">;

</span><span class="kwa">var
</span>  dict<span class="sym">:</span> ht_pht<span class="sym">;
</span><span class="kwa">begin
</span>  dict <span class="sym">:=</span> ht_create<span class="sym">(</span><span class="num">2048</span><span class="sym">);
</span>  readwords<span class="sym">(</span>dict<span class="sym">);
</span>  printwords<span class="sym">(</span>dict<span class="sym">);
</span>  ht_destroy<span class="sym">(</span>dict<span class="sym">);
</span><span class="kwa">end</span>.
