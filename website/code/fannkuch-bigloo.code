<span class="slc">;; fannkuch benchmark for The Computer Language Shootout
</span><span class="slc">;; Written by Dima Dorfman, 2004
</span><span class="slc">;; Compile with bigloo: bigloo -Obench -unsafe -o fannkuch_bigloo fannkuch.scm
</span>
<span class="sym">(</span>module nsieve <span class="sym">(</span>main main<span class="sym">))

(</span>define <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">) (+</span> i <span class="num">1</span><span class="sym">))
(</span>define <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> i<span class="sym">) (-</span> i <span class="num">1</span><span class="sym">))

(</span>define <span class="sym">(</span>vector<span class="sym">-</span>swap<span class="sym">!</span> v i j<span class="sym">)
  (</span>let <span class="sym">((</span>t <span class="sym">(</span>vector<span class="sym">-</span>ref v i<span class="sym">)))
    (</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> v i <span class="sym">(</span>vector<span class="sym">-</span>ref v j<span class="sym">))
    (</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> v j t<span class="sym">)))

(</span>define <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">reverse</span><span class="sym">-</span>slice<span class="sym">!</span> v i j<span class="sym">)
  (</span>do <span class="sym">((</span>i i <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">))
       (</span>j j <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> j<span class="sym">)))
      ((&lt;= (-</span> j i<span class="sym">)</span> <span class="num">1</span><span class="sym">))
    (</span>vector<span class="sym">-</span>swap<span class="sym">!</span> v i <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> j<span class="sym">))))

(</span>define <span class="sym">(</span>count<span class="sym">-</span>flips pi<span class="sym">)
  (</span>do <span class="sym">((</span>rho <span class="sym">(</span>vector<span class="sym">-</span>copy pi<span class="sym">))
       (</span>i <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">)))
      ((= (</span>vector<span class="sym">-</span>ref rho <span class="num">0</span><span class="sym">)</span> <span class="num">1</span><span class="sym">)</span> i<span class="sym">)
    (</span>vector<span class="sym">-</span><span class="kwa">reverse</span><span class="sym">-</span>slice<span class="sym">!</span> rho <span class="num">0</span> <span class="sym">(</span>vector<span class="sym">-</span>ref rho <span class="num">0</span><span class="sym">))))

(</span>define <span class="sym">(</span>successor<span class="sym">!</span> pi<span class="sym">)
  (</span>let <span class="sym">((</span>i <span class="sym">(</span>let loop <span class="sym">((</span>i <span class="sym">(- (</span>vector<span class="sym">-</span><span class="kwa">length</span> pi<span class="sym">)</span> <span class="num">2</span><span class="sym">)))
	     (</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> i <span class="num">0</span><span class="sym">)</span> #f<span class="sym">)
		   ((&gt; (</span>vector<span class="sym">-</span>ref pi <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">)) (</span>vector<span class="sym">-</span>ref pi i<span class="sym">))</span> i<span class="sym">)
		   (</span>else <span class="sym">(</span>loop <span class="sym">(</span><span class="num">1</span><span class="sym">-</span> i<span class="sym">)))))))
    (</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> i<span class="sym">)</span> #f
	<span class="sym">(</span>let<span class="sym">* ((</span>ith <span class="sym">(</span>vector<span class="sym">-</span>ref pi i<span class="sym">))
	       (</span>j <span class="sym">(</span>do <span class="sym">((</span>j <span class="sym">(</span><span class="num">1</span><span class="sym">- (</span>vector<span class="sym">-</span><span class="kwa">length</span> pi<span class="sym">)) (</span><span class="num">1</span><span class="sym">-</span> j<span class="sym">)))
		      ((&gt; (</span>vector<span class="sym">-</span>ref pi j<span class="sym">)</span> ith<span class="sym">)</span> j<span class="sym">))))
	  (</span>vector<span class="sym">-</span>swap<span class="sym">!</span> pi i j<span class="sym">)
	  (</span>vector<span class="sym">-</span><span class="kwa">reverse</span><span class="sym">-</span>slice<span class="sym">!</span> pi <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">) (</span>vector<span class="sym">-</span><span class="kwa">length</span> pi<span class="sym">))
</span>	  #t<span class="sym">))))

(</span>define <span class="sym">(</span>fannkuch n<span class="sym">)
  (</span>let <span class="sym">((</span>pi <span class="sym">(</span>do <span class="sym">((</span>pi <span class="sym">(</span>make<span class="sym">-</span>vector n<span class="sym">))
		 (</span>i <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">)))
		((=</span> i <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">length</span> pi<span class="sym">))</span> pi<span class="sym">)
	      (</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> pi i <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">)))))
    (</span>let loop <span class="sym">((</span>flips <span class="num">0</span><span class="sym">))
      (</span>let <span class="sym">((</span>flips <span class="sym">(</span><span class="kwa">max</span> <span class="sym">(</span>count<span class="sym">-</span>flips pi<span class="sym">)</span> flips<span class="sym">)))
	(</span><span class="kwa">if</span> <span class="sym">(</span>successor<span class="sym">!</span> pi<span class="sym">)
	    (</span>loop flips<span class="sym">)
</span>	    flips<span class="sym">)))))

(</span>define <span class="sym">(</span>main args<span class="sym">)
  (</span><span class="kwa">if</span> <span class="sym">(&lt; (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">)
      (</span>begin <span class="sym">(</span>display <span class="str">&quot;An argument is required&quot;</span><span class="sym">) (</span>newline<span class="sym">)</span> <span class="num">2</span><span class="sym">)
      (</span>let <span class="sym">((</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">))))
	(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> n<span class="sym">)
	    (</span>begin <span class="sym">(</span>display <span class="str">&quot;An integer is required&quot;</span><span class="sym">) (</span>newline<span class="sym">)</span> <span class="num">2</span><span class="sym">)
	    (</span>let <span class="sym">((</span>f <span class="sym">(</span>fannkuch n<span class="sym">)))
	      (</span>begin
		<span class="sym">(</span>display <span class="str">&quot;Pfannkuchen(&quot;</span><span class="sym">)
		(</span>display n<span class="sym">)
		(</span>display <span class="str">&quot;) = &quot;</span><span class="sym">)
		(</span>display f<span class="sym">)
		(</span>newline<span class="sym">))
</span>	      <span class="num">0</span><span class="sym">)))))</span>
