<span class="dir">#!/bin/env groovy
</span><span class="com">/*
	$Id: revcomp-groovy.code,v 1.1 2005-09-21 05:17:34 bfulgham Exp $

	The Great Computer Language Shootout
	http://shootout.alioth.debian.org/

	contributed by Jochen Hinrichsen
	modified by

        Each program should

            * read line-by-line a redirected FASTA format file from stdin
            * for each sequence:
                  o write the id, description, and the reverse-complement sequence in FASTA format to stdout

        We use the FASTA file generated by the fasta benchmark as input for this benchmark. Note: the file may include both lowercase and uppercase codes.

        Correct output for this 10KB input file (generated with the fasta program N = 1000) is in this 10KB output file.

        We use these code complements:

        code  meaning   complement
        A    A                   T
        C    C                   G
        G    G                   C
        T/U  T                   A
        M    A or C              K
        R    A or G              Y
        W    A or T              W
        S    C or G              S
        Y    C or T              R
        K    G or T              M
        V    A or C or G         B
        H    A or C or T         D
        D    A or G or T         H
        B    C or G or T         V
        N    G or A or T or C    N

        &quot;by knowing the sequence of bases of one strand of DNA we immediately know the sequence of the DNA strand which will bind to it, this strand is called the reverse complement&quot;

*/</span>

def complements <span class="sym">= [</span><span class="str">'A'</span><span class="sym">:</span><span class="str">'T'</span><span class="sym">,</span> <span class="str">'C'</span><span class="sym">:</span><span class="str">'G'</span><span class="sym">,</span> <span class="str">'G'</span><span class="sym">:</span><span class="str">'C'</span><span class="sym">,</span> <span class="str">'T'</span><span class="sym">:</span><span class="str">'A'</span><span class="sym">,</span> <span class="str">'M'</span><span class="sym">:</span><span class="str">'K'</span><span class="sym">,</span> <span class="str">'R'</span><span class="sym">:</span><span class="str">'Y'</span><span class="sym">,</span> <span class="str">'W'</span><span class="sym">:</span><span class="str">'W'</span><span class="sym">,</span> <span class="str">'S'</span><span class="sym">:</span><span class="str">'S'</span><span class="sym">,</span> <span class="str">'Y'</span><span class="sym">:</span><span class="str">'R'</span><span class="sym">,</span> <span class="str">'K'</span><span class="sym">:</span><span class="str">'M'</span><span class="sym">,</span> <span class="str">'V'</span><span class="sym">:</span><span class="str">'B'</span><span class="sym">,</span> <span class="str">'H'</span><span class="sym">:</span><span class="str">'D'</span><span class="sym">,</span> <span class="str">'D'</span><span class="sym">:</span><span class="str">'H'</span><span class="sym">,</span> <span class="str">'B'</span><span class="sym">:</span><span class="str">'V'</span><span class="sym">,</span> <span class="str">'N'</span><span class="sym">:</span><span class="str">'N'</span><span class="sym">]

</span>def revComp<span class="sym">(</span>s<span class="sym">) {
</span>    def rev <span class="sym">=</span> <span class="str">&quot;&quot;</span>
    s<span class="sym">.</span>toUpperCase<span class="sym">().</span>each<span class="sym">() {
</span>        def ch <span class="sym">=</span> complements<span class="sym">[</span>it<span class="sym">]
</span>        <span class="kwa">if</span> <span class="sym">(</span>ch <span class="sym">==</span> null<span class="sym">) {
</span>            println <span class="str">&quot;&quot;</span>
            println <span class="sym">(</span>it<span class="sym">)
        }
</span>        rev <span class="sym">+=</span> ch
    <span class="sym">}
</span>    rev
<span class="sym">}

</span>System<span class="sym">.</span>in<span class="sym">.</span>newReader<span class="sym">().</span>eachLine<span class="sym">() {</span> line <span class="sym">-&gt;
</span>    println <span class="sym">(</span>line<span class="sym">.</span>startsWith<span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">)</span> ? line <span class="sym">:</span> revComp<span class="sym">(</span>line<span class="sym">))
}

</span><span class="slc">// EOF</span>
