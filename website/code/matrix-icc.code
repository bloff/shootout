<span class="com">/* -*- mode: c -*-</span>
<span class="com"> * $Id: matrix-icc.code,v 1.13 2006-06-08 12:22:34 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;unistd.h&gt;</span>

<span class="dir">#define SIZE 30</span>

<span class="kwb">int</span> <span class="sym">**</span><span class="kwd">mkmatrix</span><span class="sym">(</span><span class="kwb">int</span> rows<span class="sym">,</span> <span class="kwb">int</span> cols<span class="sym">) {</span>
    <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">,</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwb">int</span> <span class="sym">**</span>m <span class="sym">= (</span><span class="kwb">int</span> <span class="sym">**)</span> <span class="kwd">malloc</span><span class="sym">(</span>rows <span class="sym">*</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span> <span class="sym">*));</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>rows<span class="sym">;</span> i<span class="sym">++) {</span>
	m<span class="sym">[</span>i<span class="sym">] = (</span><span class="kwb">int</span> <span class="sym">*)</span> <span class="kwd">malloc</span><span class="sym">(</span>cols <span class="sym">*</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">));</span>
	<span class="kwa">for</span> <span class="sym">(</span>j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>cols<span class="sym">;</span> j<span class="sym">++) {</span>
	    m<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> count<span class="sym">++;</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwa">return</span><span class="sym">(</span>m<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">zeromatrix</span><span class="sym">(</span><span class="kwb">int</span> rows<span class="sym">,</span> <span class="kwb">int</span> cols<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">**</span>m<span class="sym">) {</span>
    <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>rows<span class="sym">;</span> i<span class="sym">++)</span>
	<span class="kwa">for</span> <span class="sym">(</span>j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>cols<span class="sym">;</span> j<span class="sym">++)</span>
	    m<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">freematrix</span><span class="sym">(</span><span class="kwb">int</span> rows<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">**</span>m<span class="sym">) {</span>
    <span class="kwa">while</span> <span class="sym">(--</span>rows <span class="sym">&gt; -</span><span class="num">1</span><span class="sym">) {</span> <span class="kwd">free</span><span class="sym">(</span>m<span class="sym">[</span>rows<span class="sym">]); }</span>
    <span class="kwd">free</span><span class="sym">(</span>m<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="sym">**</span><span class="kwd">mmult</span><span class="sym">(</span><span class="kwb">int</span> rows<span class="sym">,</span> <span class="kwb">int</span> cols<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">**</span>m1<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">**</span>m2<span class="sym">,</span> <span class="kwb">int</span> <span class="sym">**</span>m3<span class="sym">) {</span>
    <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> val<span class="sym">;</span>
    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>rows<span class="sym">;</span> i<span class="sym">++) {</span>
	<span class="kwa">for</span> <span class="sym">(</span>j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>cols<span class="sym">;</span> j<span class="sym">++) {</span>
	    val <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	    <span class="kwa">for</span> <span class="sym">(</span>k<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> k<span class="sym">&lt;</span>cols<span class="sym">;</span> k<span class="sym">++) {</span>
		val <span class="sym">+=</span> m1<span class="sym">[</span>i<span class="sym">][</span>k<span class="sym">] *</span> m2<span class="sym">[</span>k<span class="sym">][</span>j<span class="sym">];</span>
	    <span class="sym">}</span>
	    m3<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> val<span class="sym">;</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
    <span class="kwa">return</span><span class="sym">(</span>m3<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>
    <span class="kwb">int</span> i<span class="sym">,</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>

    <span class="kwb">int</span> <span class="sym">**</span>m1 <span class="sym">=</span> <span class="kwd">mkmatrix</span><span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);</span>
    <span class="kwb">int</span> <span class="sym">**</span>m2 <span class="sym">=</span> <span class="kwd">mkmatrix</span><span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);</span>
    <span class="kwb">int</span> <span class="sym">**</span>mm <span class="sym">=</span> <span class="kwd">mkmatrix</span><span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);</span>

    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
	mm <span class="sym">=</span> <span class="kwd">mmult</span><span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">,</span> mm<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%d %d %d %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> mm<span class="sym">[</span><span class="num">0</span><span class="sym">][</span><span class="num">0</span><span class="sym">],</span> mm<span class="sym">[</span><span class="num">2</span><span class="sym">][</span><span class="num">3</span><span class="sym">],</span> mm<span class="sym">[</span><span class="num">3</span><span class="sym">][</span><span class="num">2</span><span class="sym">],</span> mm<span class="sym">[</span><span class="num">4</span><span class="sym">][</span><span class="num">4</span><span class="sym">]);</span>

    <span class="kwd">freematrix</span><span class="sym">(</span>SIZE<span class="sym">,</span> m1<span class="sym">);</span>
    <span class="kwd">freematrix</span><span class="sym">(</span>SIZE<span class="sym">,</span> m2<span class="sym">);</span>
    <span class="kwd">freematrix</span><span class="sym">(</span>SIZE<span class="sym">,</span> mm<span class="sym">);</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>
