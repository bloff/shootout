<span class="slc">;; ---------------------------------------------------------------------</span>
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; A buffered version of the 'revcomp' benchmark. Although this benchmark</span>
<span class="slc">;; can more straightforwardly be implemented by replacing the procedures</span>
<span class="slc">;; below with the following:</span>
<span class="slc">;;</span>
<span class="slc">;;  (define (add-to-segment segment sequence)</span>
<span class="slc">;;    (string-upcase! sequence)</span>
<span class="slc">;;    (string-reverse! sequence)</span>
<span class="slc">;;    (string-replace segment (string-translate* sequence +codes+) 0 0))</span>
<span class="slc">;;</span>
<span class="slc">;;  ; -------------</span>
<span class="slc">;;</span>
<span class="slc">;;  (define (dump-segment segment line-size)</span>
<span class="slc">;;    (if (not (string-null? segment))</span>
<span class="slc">;;      (for-each</span>
<span class="slc">;;        (lambda (line) (print line))</span>
<span class="slc">;;        (string-chop segment line-size)))</span>
<span class="slc">;;    (make-string 0))</span>
<span class="slc">;;</span>
<span class="slc">;; the buffered approach is needed to keep strings at an optimal size</span>
<span class="slc">;; so as to maintain acceptable performance for all input ranges.</span>
<span class="slc">;; Unfortunately it seems that a close eye has to be kept on the sizes</span>
<span class="slc">;; of strings when using the native string implementation: let them grow</span>
<span class="slc">;; too much, and performance quickly degrades. For example, using an</span>
<span class="slc">;; input file size of approximately 1.5MB, the buffered version clocked</span>
<span class="slc">;; in at just on 9 sec, whilst the unbuffered version clocked in at</span>
<span class="slc">;; about 29 min; the relative performance difference is undeniably</span>
<span class="slc">;; considerable.</span>
<span class="slc">;;</span>
<span class="slc">;; Of course, alternate string implementations could have been used, but</span>
<span class="slc">;; it was thought appropriate to stick to using out-of-the-box</span>
<span class="slc">;; facilities, in this case, SRFI-1 strings, so as to better gauge</span>
<span class="slc">;; language performance.</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Anthony Borla</span>
<span class="slc">;; ---------------------------------------------------------------------</span>

<span class="sym">(</span>declare <span class="sym">(</span>inline end<span class="sym">-</span>of<span class="sym">-</span>segment?<span class="sym">)</span>
         <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>unsafe<span class="sym">) (</span>block<span class="sym">) (</span><span class="kwa">lambda</span><span class="sym">-</span>lift<span class="sym">)</span>
         <span class="sym">(</span>uses srfi<span class="sym">-</span><span class="num">1</span> srfi<span class="sym">-</span><span class="num">13</span><span class="sym">))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define<span class="sym">-</span>constant <span class="sym">+</span>segment<span class="sym">-</span>limit<span class="sym">+</span> <span class="num">120</span><span class="sym">)</span>
<span class="sym">(</span>define<span class="sym">-</span>constant <span class="sym">+</span><span class="kwa">line</span><span class="sym">-</span>size<span class="sym">+</span> <span class="num">60</span><span class="sym">)</span>

<span class="sym">(</span>define<span class="sym">-</span>constant <span class="sym">+</span>codes<span class="sym">+</span>
  <span class="sym">(</span><span class="kwa">list</span>
    <span class="str">'(&quot;A&quot; . &quot;T&quot;) '</span><span class="sym">(</span><span class="str">&quot;B&quot;</span> . <span class="str">&quot;V&quot;</span><span class="sym">)</span> <span class="str">'(&quot;C&quot; . &quot;G&quot;) '</span><span class="sym">(</span><span class="str">&quot;D&quot;</span> . <span class="str">&quot;H&quot;</span><span class="sym">)</span> <span class="str">'(&quot;G&quot; . &quot;C&quot;)</span>
<span class="str">    '</span><span class="sym">(</span><span class="str">&quot;H&quot;</span> . <span class="str">&quot;D&quot;</span><span class="sym">)</span> <span class="str">'(&quot;K&quot; . &quot;M&quot;) '</span><span class="sym">(</span><span class="str">&quot;M&quot;</span> . <span class="str">&quot;K&quot;</span><span class="sym">)</span> <span class="str">'(&quot;N&quot; . &quot;N&quot;) '</span><span class="sym">(</span><span class="str">&quot;R&quot;</span> . <span class="str">&quot;Y&quot;</span><span class="sym">)</span>
    <span class="str">'(&quot;S&quot; . &quot;S&quot;) '</span><span class="sym">(</span><span class="str">&quot;T&quot;</span> . <span class="str">&quot;A&quot;</span><span class="sym">)</span> <span class="str">'(&quot;V&quot; . &quot;B&quot;) '</span><span class="sym">(</span><span class="str">&quot;W&quot;</span> . <span class="str">&quot;W&quot;</span><span class="sym">)</span> <span class="str">'(&quot;Y&quot; . &quot;R&quot;)))</span>
<span class="str"></span>
<span class="str">; -------------------------------</span>
<span class="str"></span>
<span class="str">(define (add-to-segment segment sequence)</span>
<span class="str">  (let* ((segment-list (car segment))</span>
<span class="str">         (current-segment (cdr segment))</span>
<span class="str">         (segment-size (string-length current-segment))</span>
<span class="str">         (t-sequence (string-translate* (string-reverse (string-upcase sequence)) +codes+)))</span>
<span class="str">    (if (&gt;= segment-size +segment-limit+)</span>
<span class="str">    (begin</span>
<span class="str">      (set! segment-list (append (list current-segment) segment-list))</span>
<span class="str">      (set! current-segment (make-string 0))))</span>
<span class="str">    (cons segment-list (string-replace current-segment t-sequence 0 0))))</span>
<span class="str"></span>
<span class="str">; -------------</span>
<span class="str"></span>
<span class="str">(define (dump-segment segment line-size)</span>
<span class="str">  (if (not (segment-null? segment))</span>
<span class="str">    (let ((segment-list (car segment)) (seg-lines nil) (spill (make-string 0)))</span>
<span class="str">      (if (segment-has-list? segment)</span>
<span class="str">        (set-car! segment-list (string-replace (caar segment) (cdr segment) 0 0))</span>
<span class="str">      ; else</span>
<span class="str">        (set! segment-list (list (cdr segment))))</span>
<span class="str">      (for-each</span>
<span class="str">        (lambda (segment)</span>
<span class="str">          (set! seg-lines (string-chop (string-append spill segment) line-size))</span>
<span class="str">          (set! spill (last seg-lines))</span>
<span class="str">          (if (&lt;= (string-length spill) line-size) (set! seg-lines (butlast seg-lines)))</span>
<span class="str">          (for-each</span>
<span class="str">            (lambda (line) (print line))</span>
<span class="str">            seg-lines))</span>
<span class="str">      segment-list)</span>
<span class="str">      (if (not (string-null? spill)) (print spill))))</span>
<span class="str">  (make-segment))</span>
<span class="str"></span>
<span class="str">; -------------</span>
<span class="str"></span>
<span class="str">(define (make-segment) (cons '</span><span class="sym">()</span> <span class="str">&quot;&quot;</span><span class="sym">))</span>

<span class="slc">; -------------</span>

<span class="sym">(</span>define <span class="sym">(</span>segment<span class="sym">-</span><span class="kwa">null</span>? segment<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(</span>pair? segment<span class="sym">) (</span><span class="kwa">and</span> <span class="sym">(</span><span class="kwa">null</span>? <span class="sym">(</span><span class="kwa">car</span> segment<span class="sym">)) (</span>string<span class="sym">-</span><span class="kwa">null</span>? <span class="sym">(</span><span class="kwa">cdr</span> segment<span class="sym">)))))</span>

<span class="slc">; -------------</span>

<span class="sym">(</span>define <span class="sym">(</span>segment<span class="sym">-</span>has<span class="sym">-</span><span class="kwa">list</span>? segment<span class="sym">) (</span><span class="kwa">and</span> <span class="sym">(</span>pair? segment<span class="sym">) (</span><span class="kwa">not</span> <span class="sym">(</span><span class="kwa">null</span>? <span class="sym">(</span><span class="kwa">car</span> segment<span class="sym">)))))</span>

<span class="slc">; -------------</span>

<span class="sym">(</span>define <span class="sym">(</span>end<span class="sym">-</span>of<span class="sym">-</span>segment? sequence<span class="sym">) (</span>char<span class="sym">=</span>? <span class="sym">(</span>string<span class="sym">-</span>ref sequence <span class="num">0</span><span class="sym">)</span> #\&gt;<span class="sym">))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>main<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>segment <span class="sym">(</span>make<span class="sym">-</span>segment<span class="sym">)))</span>

    <span class="sym">(</span>let loop <span class="sym">((</span>sequence <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))</span>
      <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span>eof<span class="sym">-</span>object? sequence<span class="sym">)</span>
        <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> segment <span class="sym">(</span>dump<span class="sym">-</span>segment segment <span class="sym">+</span><span class="kwa">line</span><span class="sym">-</span>size<span class="sym">+)))</span>
      <span class="sym">(</span>else
        <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span>end<span class="sym">-</span>of<span class="sym">-</span>segment? sequence<span class="sym">)</span>
          <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> segment <span class="sym">(</span>dump<span class="sym">-</span>segment segment <span class="sym">+</span><span class="kwa">line</span><span class="sym">-</span>size<span class="sym">+))</span>
          <span class="sym">(</span><span class="kwa">print</span> sequence<span class="sym">))</span>
        <span class="sym">(</span>else
          <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> segment <span class="sym">(</span>add<span class="sym">-</span>to<span class="sym">-</span>segment segment sequence<span class="sym">))))</span>
      <span class="sym">(</span>loop <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))))))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>main<span class="sym">)</span>

