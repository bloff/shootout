<span class="com">(* wc.sml
 *
 *   Word count. (Optimized for machine with few registers.)
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume&#64;tti-c.org)
 *)</span>
<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig
    val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct

    structure</span> A <span class="sym">=</span> Word8Array
    <span class="kwa">structure</span> AS <span class="sym">=</span> Word8ArraySlice
    <span class="kwa">structure</span> VS <span class="sym">=</span> Word8VectorSlice
    <span class="kwa">structure</span> IO <span class="sym">=</span> Posix.IO
    <span class="kwa">structure</span> FS <span class="sym">=</span> Posix.FileSys

    <span class="kwa">val</span> max <span class="sym">=</span> <span class="num">4096
</span>    <span class="kwa">val</span> buf <span class="sym">=</span> A.array <span class="sym">(</span>max<span class="sym">,</span> <span class="num">0w0</span><span class="sym">)
</span>    <span class="kwa">val</span> sub <span class="sym">=</span> Byte.byteToChar <span class="kwa">o</span> Unsafe.Word8Array.sub
    <span class="kwa">infix</span> <span class="sym">++
</span>    <span class="kwa">fun</span> x <span class="sym">++</span> y <span class="sym">=</span> <span class="kwa">Word</span>.toIntX <span class="sym">(</span><span class="kwa">Word</span>.fromInt x <span class="sym">+</span> <span class="kwa">Word</span>.fromInt y<span class="sym">)

</span>    <span class="kwa">val</span> c <span class="sym">=</span> ref <span class="num">0
</span>    <span class="kwa">val</span> l <span class="sym">=</span> ref <span class="num">0

</span>    <span class="kwa">fun</span> newblock <span class="sym">(</span>w<span class="sym">,</span> ow<span class="sym">) =
</span>	<span class="kwa">let val</span> n <span class="sym">=</span> IO.readArr <span class="sym">(</span>FS.stdin<span class="sym">,</span> AS.full buf<span class="sym">)
</span>	<span class="kwa">in if</span> n <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> w
	   <span class="kwa">else</span> <span class="sym">(</span>c <span class="sym">:= (</span>n <span class="sym">++ !</span>c<span class="sym">);</span> scan <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">,</span> w<span class="sym">,</span> ow<span class="sym">))
</span>	<span class="kwa">end

    and</span> scan <span class="sym">(</span>i<span class="sym">,</span> n<span class="sym">,</span> w<span class="sym">,</span> ow<span class="sym">) =
</span>	<span class="kwa">if</span> i <span class="sym">&gt;=</span> n <span class="kwa">then</span> newblock <span class="sym">(</span>w<span class="sym">,</span> ow<span class="sym">)
</span>	<span class="kwa">else let val</span> i' <span class="sym">=</span> i <span class="sym">++</span> <span class="num">1
</span>	     <span class="kwa">in case</span> sub <span class="sym">(</span>buf<span class="sym">,</span> i<span class="sym">)</span> <span class="kwa">of
</span>		    #<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">=&gt; (</span>l <span class="sym">:= (</span><span class="num">1</span> <span class="sym">++ !</span>l<span class="sym">);</span> scan <span class="sym">(</span>i'<span class="sym">,</span> n<span class="sym">,</span> w<span class="sym">,</span> <span class="num">1</span><span class="sym">))
		  | (</span>#<span class="str">&quot; &quot;</span> <span class="sym">|</span> #<span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span> <span class="sym">|</span> #<span class="str">&quot;</span><span class="esc">\r</span><span class="str">&quot;</span><span class="sym">) =&gt;</span> scan <span class="sym">(</span>i'<span class="sym">,</span> n<span class="sym">,</span> w<span class="sym">,</span> <span class="num">1</span><span class="sym">)
		  |</span> _ <span class="sym">=&gt;</span> scan <span class="sym">(</span>i'<span class="sym">,</span> n<span class="sym">,</span> w <span class="sym">++</span> ow<span class="sym">,</span> <span class="num">0</span><span class="sym">)
</span>	     <span class="kwa">end

    fun</span> main _ <span class="sym">=</span> <span class="kwa">let
	val</span> i2s <span class="sym">=</span> <span class="kwa">Int</span>.toString
	<span class="kwa">fun</span> p s <span class="sym">=</span> ignore <span class="sym">(</span>Posix.IO.writeVec <span class="sym">(</span>Posix.FileSys.stdout<span class="sym">,
</span>					     VS.full <span class="sym">(</span>Byte.stringToBytes s<span class="sym">)))
</span>	<span class="kwa">val</span> w <span class="sym">=</span> newblock <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)
</span>    <span class="kwa">in
</span>	app p <span class="sym">[</span>i2s <span class="sym">(!</span>l<span class="sym">),</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> i2s w<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> i2s <span class="sym">(!</span>c<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">];
</span>	OS.Process.success
    <span class="kwa">end
end</span>
