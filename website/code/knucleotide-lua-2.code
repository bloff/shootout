<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- contributed by Mike Pall</span>

<span class="kwa">local function</span> kfrequency<span class="sym">(</span>seq<span class="sym">,</span> freq<span class="sym">,</span> k<span class="sym">,</span> frame<span class="sym">)</span>
  <span class="kwa">local</span> sub <span class="sym">=</span> <span class="kwb">string</span>.sub
  <span class="kwa">local</span> k1 <span class="sym">=</span> k <span class="sym">-</span> <span class="num">1</span>
  <span class="kwa">for</span> i<span class="sym">=</span>frame<span class="sym">,</span><span class="kwb">string</span>.len<span class="sym">(</span>seq<span class="sym">)-</span>k1<span class="sym">,</span>k <span class="kwa">do</span>
    <span class="kwa">local</span> c <span class="sym">=</span> sub<span class="sym">(</span>seq<span class="sym">,</span> i<span class="sym">,</span> i<span class="sym">+</span>k1<span class="sym">)</span>
    freq<span class="sym">[</span>c<span class="sym">] =</span> freq<span class="sym">[</span>c<span class="sym">] +</span> <span class="num">1</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">local function</span> freqdefault<span class="sym">()</span>
  <span class="kwa">return</span> <span class="num">0</span>
<span class="kwa">end</span>

<span class="kwa">local function</span> count<span class="sym">(</span>seq<span class="sym">,</span> frag<span class="sym">)</span>
  <span class="kwa">local</span> k <span class="sym">=</span> <span class="kwb">string</span>.len<span class="sym">(</span>frag<span class="sym">)</span>
  <span class="kwa">local</span> freq <span class="sym">=</span> setmetatable<span class="sym">({}, {</span> __index <span class="sym">=</span> freqdefault <span class="sym">})</span>
  <span class="kwa">for</span> frame<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>k <span class="kwa">do</span> kfrequency<span class="sym">(</span>seq<span class="sym">,</span> freq<span class="sym">,</span> k<span class="sym">,</span> frame<span class="sym">)</span> <span class="kwa">end</span>
  io.<span class="kwa">write</span><span class="sym">(</span>freq<span class="sym">[</span>frag<span class="sym">]</span> <span class="kwa">or</span> <span class="num">0</span><span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span><span class="sym">,</span> frag<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
<span class="kwa">end</span>

<span class="kwa">local function</span> frequency<span class="sym">(</span>seq<span class="sym">,</span> k<span class="sym">)</span>
  <span class="kwa">local</span> freq <span class="sym">=</span> setmetatable<span class="sym">({}, {</span> __index <span class="sym">=</span> freqdefault <span class="sym">})</span>
  <span class="kwa">for</span> frame<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>k <span class="kwa">do</span> kfrequency<span class="sym">(</span>seq<span class="sym">,</span> freq<span class="sym">,</span> k<span class="sym">,</span> frame<span class="sym">)</span> <span class="kwa">end</span>
  <span class="kwa">local</span> sfreq<span class="sym">,</span> sn <span class="sym">= {},</span> <span class="num">1</span>
  <span class="kwa">for</span> c<span class="sym">,</span>v <span class="kwa">in</span> pairs<span class="sym">(</span>freq<span class="sym">)</span> <span class="kwa">do</span> sfreq<span class="sym">[</span>sn<span class="sym">] =</span> c<span class="sym">;</span> sn <span class="sym">=</span> sn <span class="sym">+</span> <span class="num">1</span> <span class="kwa">end</span>
  <span class="kwb">table</span>.<span class="kwa">sort</span><span class="sym">(</span>sfreq<span class="sym">,</span> <span class="kwa">function</span><span class="sym">(</span>a<span class="sym">,</span> b<span class="sym">)</span>
    <span class="kwa">local</span> fa<span class="sym">,</span> fb <span class="sym">=</span> freq<span class="sym">[</span>a<span class="sym">],</span> freq<span class="sym">[</span>b<span class="sym">]</span>
    <span class="kwa">return</span> fa <span class="sym">==</span> fb <span class="kwa">and</span> a <span class="sym">&gt;</span> b <span class="kwa">or</span> fa <span class="sym">&gt;</span> fb
  <span class="kwa">end</span><span class="sym">)</span>
  sum <span class="sym">=</span> <span class="kwb">string</span>.len<span class="sym">(</span>seq<span class="sym">)-</span>k<span class="sym">+</span><span class="num">1</span>
  <span class="kwa">for</span> _<span class="sym">,</span>c <span class="kwa">in</span> ipairs<span class="sym">(</span>sfreq<span class="sym">)</span> <span class="kwa">do</span>
    io.<span class="kwa">write</span><span class="sym">(</span><span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;%s %0.3f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> c<span class="sym">, (</span>freq<span class="sym">[</span>c<span class="sym">]*</span><span class="num">100</span><span class="sym">)/</span>sum<span class="sym">))</span>
  <span class="kwa">end</span>
  io.<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
<span class="kwa">end</span>

<span class="kwa">local function</span> readseq<span class="sym">()</span>
  <span class="kwa">local</span> sub <span class="sym">=</span> <span class="kwb">string</span>.sub
  <span class="kwa">for</span> line <span class="kwa">in</span> io.lines<span class="sym">()</span> <span class="kwa">do</span>
    <span class="kwa">if</span> sub<span class="sym">(</span>line<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">) ==</span> <span class="str">&quot;&gt;&quot;</span> <span class="kwa">and</span> sub<span class="sym">(</span>line<span class="sym">,</span> <span class="num">2</span><span class="sym">,</span> <span class="num">6</span><span class="sym">) ==</span> <span class="str">&quot;THREE&quot;</span> <span class="kwa">then break end</span>
  <span class="kwa">end</span>
  <span class="kwa">local</span> lines<span class="sym">,</span> ln <span class="sym">= {},</span> <span class="num">0</span>
  <span class="kwa">for</span> line <span class="kwa">in</span> io.lines<span class="sym">()</span> <span class="kwa">do</span>
    <span class="kwa">local</span> c <span class="sym">=</span> sub<span class="sym">(</span>line<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
    <span class="kwa">if</span> c <span class="sym">==</span> <span class="str">&quot;&gt;&quot;</span> <span class="kwa">then</span>
      <span class="kwa">break</span>
    <span class="kwa">elseif</span> c ~<span class="sym">=</span> <span class="str">&quot;;&quot;</span> <span class="kwa">then</span>
      ln <span class="sym">=</span> ln <span class="sym">+</span> <span class="num">1</span>
      lines<span class="sym">[</span>ln<span class="sym">] =</span> line
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  <span class="kwa">return</span> <span class="kwb">string</span>.upper<span class="sym">(</span><span class="kwb">table</span>.concat<span class="sym">(</span>lines<span class="sym">,</span> <span class="str">&quot;&quot;</span><span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> ln<span class="sym">))</span>
<span class="kwa">end</span>

<span class="kwa">local</span> seq <span class="sym">=</span> readseq<span class="sym">()</span>
frequency<span class="sym">(</span>seq<span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
frequency<span class="sym">(</span>seq<span class="sym">,</span> <span class="num">2</span><span class="sym">)</span>
count<span class="sym">(</span>seq<span class="sym">,</span> <span class="str">&quot;GGT&quot;</span><span class="sym">)</span>
count<span class="sym">(</span>seq<span class="sym">,</span> <span class="str">&quot;GGTA&quot;</span><span class="sym">)</span>
count<span class="sym">(</span>seq<span class="sym">,</span> <span class="str">&quot;GGTATT&quot;</span><span class="sym">)</span>
count<span class="sym">(</span>seq<span class="sym">,</span> <span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">)</span>
count<span class="sym">(</span>seq<span class="sym">,</span> <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">)</span>
