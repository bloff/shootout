<span class="line">    1 </span><span class="slc">-- $Id: heapsort-ghc.code,v 1.4 2004-11-13 07:41:40 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://www.bagley.org/~doug/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- from Julian Assange, improved by Karl-Filip Faxen
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="kwa">module</span> Main<span class="sym">(</span>main<span class="sym">)</span> <span class="kwa">where
</span><span class="line">    6 </span><span class="kwa">import</span> System<span class="sym">(</span>getArgs<span class="sym">,</span> exitWith<span class="sym">,</span> ExitCode<span class="sym">(</span>..<span class="sym">))
</span><span class="line">    7 </span><span class="sym"></span><span class="kwa">import</span> Numeric<span class="sym">(</span>showFFloat<span class="sym">)
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym"></span>main <span class="sym">=</span> <span class="kwa">do
</span><span class="line">   10 </span><span class="kwa"></span>         arg <span class="sym">&lt;-</span> getArgs
<span class="line">   11 </span>         <span class="kwa">case</span> arg <span class="kwa">of
</span><span class="line">   12 </span><span class="kwa"></span>              <span class="sym">[</span>num<span class="sym">] -&gt;</span> putStrLn <span class="sym">(</span>showFFloat <span class="sym">(</span>Just <span class="num">10</span><span class="sym">)</span> answer <span class="str">&quot;&quot;</span><span class="sym">)
</span><span class="line">   13 </span><span class="sym"></span>                       <span class="kwa">where
</span><span class="line">   14 </span><span class="kwa"></span>                             answer <span class="sym">=</span> last . heapsort .
<span class="line">   15 </span>                                      take <span class="sym">(</span>read num<span class="sym">)</span> . random $ <span class="num">1.0
</span><span class="line">   16 </span><span class="num"></span>              _     <span class="sym">-&gt;</span> exitWith <span class="sym">(</span>ExitFailure <span class="num">1</span><span class="sym">)
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym"></span><span class="slc">-- construct an infinite list of random numbers
</span><span class="line">   19 </span><span class="slc"></span>random <span class="sym">::</span> <span class="kwb">Double</span> <span class="sym">-&gt; [</span><span class="kwb">Double</span><span class="sym">]
</span><span class="line">   20 </span><span class="sym"></span>random max <span class="sym">=</span> map norm . rand $ <span class="num">42
</span><span class="line">   21 </span><span class="num"></span>           <span class="kwa">where</span> norm x <span class="sym">= (</span>fromIntegral x<span class="sym">) * (</span>max <span class="sym">/ (</span>fromIntegral im<span class="sym">))
</span><span class="line">   22 </span><span class="sym"></span>                 rand x <span class="sym">= (</span>x<span class="str">' : (rand x'</span><span class="sym">))
</span><span class="line">   23 </span><span class="sym"></span>                    <span class="kwa">where</span> x<span class="str">' = (x * ia + ic) `mod` im
</span><span class="line">   24 </span><span class="str">                 im     = 139968
</span><span class="line">   25 </span><span class="str">                 ia     = 3877
</span><span class="line">   26 </span><span class="str">                 ic     = 29573 :: Int
</span><span class="line">   27 </span><span class="str">
</span><span class="line">   28 </span><span class="str">-- fold up a list like a tree
</span><span class="line">   29 </span><span class="str">treefold f z []      = z
</span><span class="line">   30 </span><span class="str">treefold f z [x]     = x
</span><span class="line">   31 </span><span class="str">treefold f z (a:b:l) = w `seq` treefold f z (w : pairfold l)
</span><span class="line">   32 </span><span class="str">                 where pairfold (x:y:rest) = v `seq` v : pairfold rest
</span><span class="line">   33 </span><span class="str">                           where v = f x y
</span><span class="line">   34 </span><span class="str">                       pairfold l          = l
</span><span class="line">   35 </span><span class="str">                       w = f a b
</span><span class="line">   36 </span><span class="str">
</span><span class="line">   37 </span><span class="str">-- heapfold using linked lists
</span><span class="line">   38 </span><span class="str">data Heap a = Nil | Node !a !(Heap a) !(Heap a)
</span><span class="line">   39 </span><span class="str">heapsort :: Ord a =&gt; [a] -&gt; [a]
</span><span class="line">   40 </span><span class="str">heapsort = flatten_heap . merge_heaps . map heapify
</span><span class="line">   41 </span><span class="str">
</span><span class="line">   42 </span><span class="str">    where heapify x   = Node x Nil Nil
</span><span class="line">   43 </span><span class="str">
</span><span class="line">   44 </span><span class="str">          merge_heaps :: Ord a =&gt; [Heap a] -&gt; Heap a
</span><span class="line">   45 </span><span class="str">          merge_heaps = treefold merge_heap Nil
</span><span class="line">   46 </span><span class="str">
</span><span class="line">   47 </span><span class="str">          flatten_heap Nil            = []
</span><span class="line">   48 </span><span class="str">          flatten_heap (Node x h1 h2) = x:flatten_heap (merge_heap h1 h2)
</span><span class="line">   49 </span><span class="str">
</span><span class="line">   50 </span><span class="str">          merge_heap Nil                     heap = heap
</span><span class="line">   51 </span><span class="str">          merge_heap heap&#64;(Node _ _ _)        Nil = heap
</span><span class="line">   52 </span><span class="str">          merge_heap node_a&#64;(Node l l1 l2) node_b&#64;(Node r r1 r2)
</span><span class="line">   53 </span><span class="str">                     | l &lt; r     = Node l (merge_heap l1 l2) node_b
</span><span class="line">   54 </span><span class="str">                     | otherwise = Node r node_a (merge_heap r1 r2)</span>
