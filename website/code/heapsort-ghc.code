<span class="slc">-- $Id: heapsort-ghc.code,v 1.11 2006-01-16 01:23:05 bfulgham Exp $</span>
<span class="slc">-- http://www.bagley.org/~doug/shootout/</span>
<span class="slc">-- from Julian Assange, improved by Karl-Filip Faxen</span>

<span class="kwa">module</span> Main<span class="sym">(</span>main<span class="sym">)</span> <span class="kwa">where</span>
<span class="kwa">import</span> System<span class="sym">(</span>getArgs<span class="sym">,</span> exitWith<span class="sym">,</span> ExitCode<span class="sym">(</span>..<span class="sym">))</span>
<span class="kwa">import</span> Numeric<span class="sym">(</span>showFFloat<span class="sym">)</span>

main <span class="sym">=</span> <span class="kwa">do</span>
         arg <span class="sym">&lt;-</span> getArgs
	 <span class="kwa">case</span> arg <span class="kwa">of</span>
              <span class="sym">[</span>num<span class="sym">] -&gt;</span> putStrLn <span class="sym">(</span>showFFloat <span class="sym">(</span>Just <span class="num">10</span><span class="sym">)</span> answer <span class="str">&quot;&quot;</span><span class="sym">)</span>
	               <span class="kwa">where</span>
		             answer <span class="sym">=</span> last . heapsort .
                                      take <span class="sym">(</span>read num<span class="sym">)</span> . random $ <span class="num">1.0</span>
	      _     <span class="sym">-&gt;</span> exitWith <span class="sym">(</span>ExitFailure <span class="num">1</span><span class="sym">)</span>

<span class="slc">-- construct an infinite list of random numbers</span>
random <span class="sym">::</span> <span class="kwb">Double</span> <span class="sym">-&gt; [</span><span class="kwb">Double</span><span class="sym">]</span>
random max <span class="sym">=</span> map norm . rand $ <span class="num">42</span>
           <span class="kwa">where</span> norm x <span class="sym">= (</span>fromIntegral x<span class="sym">) * (</span>max <span class="sym">/ (</span>fromIntegral im<span class="sym">))</span>
                 rand x <span class="sym">= (</span>x<span class="str">' : (rand x'</span><span class="sym">))</span>
	            <span class="kwa">where</span> x<span class="str">' = (x * ia + ic) `mod` im</span>
<span class="str">	         im     = 139968</span>
<span class="str">                 ia     = 3877</span>
<span class="str">                 ic     = 29573 :: Int</span>
<span class="str"></span>
<span class="str">-- fold up a list like a tree</span>
<span class="str">treefold f z []      = z</span>
<span class="str">treefold f z [x]     = x</span>
<span class="str">treefold f z (a:b:l) = w `seq` treefold f z (w : pairfold l)</span>
<span class="str">                 where pairfold (x:y:rest) = v `seq` v : pairfold rest</span>
<span class="str">                           where v = f x y</span>
<span class="str">	               pairfold l          = l</span>
<span class="str">                       w = f a b</span>
<span class="str"></span>
<span class="str">-- heapfold using linked lists</span>
<span class="str">data Heap a = Nil | Node !a !(Heap a) !(Heap a)</span>
<span class="str">heapsort :: Ord a =&gt; [a] -&gt; [a]</span>
<span class="str">heapsort = flatten_heap . merge_heaps . map heapify</span>
<span class="str"></span>
<span class="str">    where heapify x   = Node x Nil Nil</span>
<span class="str"></span>
<span class="str">	  merge_heaps :: Ord a =&gt; [Heap a] -&gt; Heap a</span>
<span class="str">          merge_heaps = treefold merge_heap Nil</span>
<span class="str"></span>
<span class="str">          flatten_heap Nil            = []</span>
<span class="str">          flatten_heap (Node x h1 h2) = x:flatten_heap (merge_heap h1 h2)</span>
<span class="str"></span>
<span class="str">          merge_heap Nil                     heap = heap</span>
<span class="str">          merge_heap heap&#64;(Node _ _ _)        Nil = heap</span>
<span class="str">          merge_heap node_a&#64;(Node l l1 l2) node_b&#64;(Node r r1 r2)</span>
<span class="str">                     | l &lt; r     = Node l (merge_heap l1 l2) node_b</span>
<span class="str">                     | otherwise = Node r node_a (merge_heap r1 r2)</span>
