\ The Computer Language Shootout
\ http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/</span>
\ Contributed by Ian Osgood

<span class="sym">:</span> <span class="kwb">enum</span> <span class="sym">(</span> n <span class="sym">-- )</span> <span class="num">0</span> <span class="kwa">do</span> I constant loop <span class="sym">;</span>
<span class="sym">:</span> table create does<span class="sym">&gt; (</span> i <span class="sym">--</span> t<span class="sym">[</span>i<span class="sym">] )</span> swap cells <span class="sym">+</span> &#64; <span class="sym">;</span>

<span class="num">7</span> <span class="kwb">enum</span>         E   SE   SW    W   NW   NE   STOP
table offset   <span class="num">1</span> <span class="sym">,</span>  <span class="num">7</span> <span class="sym">,</span>  <span class="num">6</span> <span class="sym">, -</span><span class="num">1</span> <span class="sym">, -</span><span class="num">7</span> <span class="sym">, -</span><span class="num">6</span> <span class="sym">,</span>    <span class="num">0</span> <span class="sym">,</span>
table rotate  SE <span class="sym">,</span> SW <span class="sym">,</span>  W <span class="sym">,</span> NW <span class="sym">,</span> NE <span class="sym">,</span>  E <span class="sym">,</span> STOP <span class="sym">,</span>
table reflect  E <span class="sym">,</span> NE <span class="sym">,</span> NW <span class="sym">,</span>  W <span class="sym">,</span> SW <span class="sym">,</span> SE <span class="sym">,</span> STOP <span class="sym">,</span>

\ paths are more easily transformable than bit masks

create path <span class="num">5</span> cells allot

<span class="sym">:</span> init<span class="sym">-</span><span class="kwd">path</span> <span class="sym">(</span> <span class="num">4</span><span class="sym">*</span>dirs <span class="sym">-- )</span>
  E path <span class="num">5 0</span> <span class="kwa">do</span> tuck <span class="sym">!</span> cell<span class="sym">+</span> loop drop <span class="sym">;</span>
<span class="sym">:</span> rotate<span class="sym">-</span>path
  path <span class="num">5 0</span> <span class="kwa">do</span> dup &#64; rotate  over <span class="sym">!</span> cell<span class="sym">+</span> loop drop <span class="sym">;</span>
<span class="sym">:</span> reflect<span class="sym">-</span>path
  path <span class="num">5 0</span> <span class="kwa">do</span> dup &#64; reflect over <span class="sym">!</span> cell<span class="sym">+</span> loop drop <span class="sym">;</span>

create offsets <span class="num">6</span> cells allot

<span class="sym">:</span> path<span class="sym">-</span>offsets
  <span class="num">0</span> offsets <span class="sym">!</span>
  path offsets
  <span class="num">5 0</span> <span class="kwa">do</span>
    over &#64; offset
    over &#64; <span class="sym">+</span>
    over cell<span class="sym">+ !</span>
    swap cell<span class="sym">+</span> swap cell<span class="sym">+</span>
  loop <span class="num">2</span>drop <span class="sym">;</span>
<span class="sym">:</span> minimum<span class="sym">-</span><span class="kwd">offset</span> <span class="sym">( --</span> n <span class="sym">)</span>
  offsets &#64;
  <span class="num">6 1</span> <span class="kwa">do</span> offsets I cells <span class="sym">+</span> &#64; min loop <span class="sym">;</span>
<span class="sym">:</span> normalize<span class="sym">-</span>offsets
  minimum<span class="sym">-</span>offset negate
  <span class="num">6 0</span> <span class="kwa">do</span> dup offsets I cells <span class="sym">+ +!</span> loop drop <span class="sym">;</span>
<span class="sym">:</span> offsets<span class="sym">-</span><span class="kwd">mask</span> <span class="sym">( --</span> mask <span class="sym">)</span>
  <span class="num">0</span>
  <span class="num">6 0</span> <span class="kwa">do</span>
    offsets I cells <span class="sym">+</span> &#64;
    <span class="num">1</span> swap lshift <span class="kwa">or</span>
  loop <span class="sym">;</span>

\ make <span class="kwa">and</span> store the twelve transformations of the path

<span class="sym">:</span> path<span class="sym">-</span><span class="kwd">mask</span> <span class="sym">( --</span> mask <span class="sym">)</span>
  path<span class="sym">-</span>offsets normalize<span class="sym">-</span>offsets offsets<span class="sym">-</span>mask <span class="sym">;</span>
<span class="sym">:</span> path<span class="sym">-</span><span class="kwd">masks</span> <span class="sym">(</span> <span class="num">4</span><span class="sym">*</span>dirs <span class="sym">-- )</span>
           init<span class="sym">-</span>path path<span class="sym">-</span>mask <span class="sym">,</span>
  <span class="num">5 0</span> <span class="kwa">do</span> rotate<span class="sym">-</span>path path<span class="sym">-</span>mask <span class="sym">,</span> loop
        reflect<span class="sym">-</span>path path<span class="sym">-</span>mask <span class="sym">,</span>
  <span class="num">5 0</span> <span class="kwa">do</span> rotate<span class="sym">-</span>path path<span class="sym">-</span>mask <span class="sym">,</span> loop <span class="sym">;</span>

\  all paths start with an implicit E

create pieces
 STOP SE  E  E path<span class="sym">-</span>masks
 STOP NE  E SE path<span class="sym">-</span>masks
 STOP SW SE  E path<span class="sym">-</span>masks
 STOP SE SW  E path<span class="sym">-</span>masks
   SW  W  E SE path<span class="sym">-</span>masks \ one backtrack<span class="sym">,</span> since <span class="kwa">this</span> shape branches
 STOP SE NE SE path<span class="sym">-</span>masks
 STOP NE SE SE path<span class="sym">-</span>masks
 STOP  E SW SE path<span class="sym">-</span>masks
 STOP  E SE  E path<span class="sym">-</span>masks
 STOP NE SE  E path<span class="sym">-</span>masks

\ <span class="num">64</span><span class="sym">-</span>bit support

\ a <span class="kwb">double</span> cell result lshift
<span class="sym">:</span> <span class="kwd">dlshift</span> <span class="sym">(</span> u s <span class="sym">--</span> l h <span class="sym">)</span>
  dup <span class="num">32</span> <span class="sym">&lt;</span> <span class="kwa">if</span>
    dup <span class="kwa">if</span>  \ <span class="num">32</span> rshift is <span class="kwa">not</span> portable
      <span class="num">2</span>dup lshift <span class="sym">-</span><span class="kwd">rot</span> <span class="sym">(</span> l u s <span class="sym">)</span>
      negate <span class="num">32</span> <span class="sym">+</span> rshift
    then
  <span class="kwa">else</span>
    <span class="num">32</span> <span class="sym">-</span> lshift <span class="num">0</span> swap
  then <span class="sym">;</span>

<span class="sym">:</span> <span class="num">2</span><span class="kwa">and</span>   ROT AND <span class="sym">&gt;</span>R AND R<span class="sym">&gt; ;</span>
<span class="sym">:</span> <span class="num">2</span><span class="kwa">xor</span>   ROT XOR <span class="sym">&gt;</span>R XOR R<span class="sym">&gt; ;</span>

variable found<span class="sym">-</span>solutions

create smallest <span class="num">64</span> chars allot
create largest  <span class="num">64</span> chars allot

<span class="sym">:</span> put<span class="sym">-</span><span class="kwd">piece</span> <span class="sym">(</span> shift piece <span class="sym">-- )</span>
  dup pieces <span class="sym">-</span> <span class="num">12</span> cells <span class="sym">/ [</span><span class="kwb">char</span><span class="sym">]</span> <span class="num">0</span> <span class="sym">+ &gt;</span><span class="kwd">r</span> <span class="sym">(</span> R<span class="sym">:</span> piece<span class="sym">-</span><span class="kwb">char</span> <span class="sym">)</span>
  swap chars here <span class="sym">+</span> swap &#64; <span class="sym">(</span> buf mask <span class="sym">)</span>
  begin
   dup <span class="num">1</span> <span class="kwa">and if</span>
     over r&#64; swap c<span class="sym">!</span>
   then
   swap <span class="kwb">char</span><span class="sym">+</span>  dup here <span class="num">64</span> chars <span class="sym">+ &lt;</span>
  <span class="kwa">while</span>
   swap <span class="num">2</span><span class="sym">/</span>  dup <span class="num">0</span><span class="sym">=</span>
  until then <span class="num">2</span>drop r<span class="sym">&gt;</span> drop <span class="sym">;</span>

\ extract solution from stack <span class="kwd">of</span> <span class="sym">(</span>shift<span class="sym">,</span> piece addr<span class="sym">)</span>
<span class="sym">:</span> store<span class="sym">-</span>solution
  here <span class="num">64</span> chars <span class="sym">[</span><span class="kwb">char</span><span class="sym">] *</span> fill
  depth <span class="num">1</span> <span class="kwa">do</span>
    i pick i pick put<span class="sym">-</span>piece
  <span class="num">2</span> <span class="sym">+</span>loop <span class="sym">;</span>

<span class="sym">: .</span><span class="kwd">line</span> <span class="sym">(</span> line <span class="sym">--</span> line<span class="sym">+</span><span class="num">6</span> <span class="sym">)</span>
  <span class="num">5 0</span> <span class="kwa">do</span> dup c&#64; emit space <span class="kwb">char</span><span class="sym">+</span> loop cr <span class="kwb">char</span><span class="sym">+ ;</span>
<span class="sym">: .</span><span class="kwd">solution</span> <span class="sym">(</span> buffer <span class="sym">-- )</span>
  <span class="num">5 0</span> <span class="kwa">do</span> <span class="sym">.</span>line <span class="kwb">char</span><span class="sym">+</span>  space <span class="sym">.</span>line loop drop cr <span class="sym">;</span>

<span class="sym">:</span> check<span class="sym">-</span><span class="kwd">solution</span> <span class="sym">( [</span>st<span class="sym">] -- [</span>st<span class="sym">] )</span>
  store<span class="sym">-</span>solution  \ here <span class="sym">.</span>solution
  here <span class="num">64</span> smallest <span class="num">64</span> compare <span class="num">0</span><span class="sym">&lt;</span> <span class="kwa">if</span>
    here smallest <span class="num">64</span> move
  then
  largest <span class="num">64</span> here <span class="num">64</span> compare <span class="num">0</span><span class="sym">&lt;</span> <span class="kwa">if</span>
    here largest <span class="num">64</span> move
  then
  <span class="num">1</span> found<span class="sym">-</span>solutions <span class="sym">+! ;</span>  \ <span class="kwa">throw if</span> found<span class="sym">-</span>solutions <span class="sym">==</span> NUM

<span class="num">2</span> base <span class="sym">!</span>

\ initial board<span class="sym">,</span> with edges filled in
<span class="num">0000011.000001.0000011.000001.0000011.000001.0000011.000001.0000011.00000</span>
<span class="num">2</span>constant init<span class="sym">-</span>board

decimal

<span class="num">2</span>variable board
create used <span class="num">10</span> cells allot

\ check whether piece sticks off bottom of the board
<span class="sym">:</span> fits? <span class="sym">(</span> shift piece <span class="sym">--</span> shift piece ? <span class="sym">)</span>
  over <span class="num">39</span> <span class="sym">&lt;</span> <span class="kwa">if true</span> exit then
  over negate <span class="num">64</span> <span class="sym">+</span> <span class="num">1</span> swap lshift <span class="num">1</span><span class="sym">-</span>
  over &#64; U<span class="sym">&lt;</span> <span class="num">0</span><span class="sym">= ;</span>

\ add<span class="sym">/</span>remove piece to the board
<span class="sym">:</span> <span class="kwd">mark</span> <span class="sym">(</span> shift piece <span class="sym">-- )</span>
  &#64; swap dlshift board <span class="num">2</span>&#64; <span class="num">2</span><span class="kwa">xor</span> board <span class="num">2</span><span class="sym">! ;</span>

\ find next free <span class="kwd">cell</span> <span class="sym">(</span><span class="num">64</span> <span class="kwa">if</span> completely full<span class="sym">)</span>
<span class="sym">:</span> next<span class="sym">-</span><span class="kwd">shift</span> <span class="sym">(</span> shift <span class="sym">--</span> shift<span class="sym">+</span>n <span class="sym">)</span>
  begin
    <span class="num">1</span><span class="sym">+</span> dup <span class="num">64</span> <span class="sym">=</span> <span class="kwa">if</span> exit then
    <span class="num">1</span> over dlshift board <span class="num">2</span>&#64; <span class="num">2</span><span class="kwa">and or</span> <span class="num">0</span><span class="sym">=</span>
  until <span class="sym">;</span>

\ variable nodes

<span class="sym">:</span> <span class="kwd">solve</span> <span class="sym">(</span> shift <span class="sym">-- )</span>
  dup <span class="num">64</span> <span class="sym">=</span> <span class="kwa">if</span> drop check<span class="sym">-</span>solution exit then
\  <span class="num">1</span> nodes <span class="sym">+!</span>
  pieces
  <span class="num">10 0</span> <span class="kwa">do</span>
    used I cells <span class="sym">+</span> &#64; <span class="kwa">if</span>
      <span class="num">12</span> cells <span class="sym">+</span>
    <span class="kwa">else</span>
      <span class="kwa">true</span> used I cells <span class="sym">+ !</span>
      <span class="num">12 0</span> <span class="kwa">do</span>
        <span class="num">2</span>dup &#64; swap dlshift board <span class="num">2</span>&#64; <span class="num">2</span><span class="kwa">and or</span> <span class="num">0</span><span class="sym">=</span> <span class="kwa">if</span> fits? <span class="kwa">if</span>
          <span class="num">2</span>dup mark
\ <span class="sym">.</span>s cr store<span class="sym">-</span>solution here <span class="sym">.</span>solution key <span class="str">'q = if abort then</span>
<span class="str">          over next-shift recurse</span>
<span class="str">          2dup mark</span>
<span class="str">        then then</span>
<span class="str">        cell+</span>
<span class="str">      loop</span>
<span class="str">      false used I cells + !</span>
<span class="str">    then</span>
<span class="str">  loop 2drop ;</span>
<span class="str"></span>
<span class="str">: main</span>
<span class="str">  0 found-solutions !</span>
<span class="str">  smallest 64 chars [char] 9 fill</span>
<span class="str">  largest  64 chars [char] 0 fill</span>
<span class="str">  init-board board 2!</span>
<span class="str">  used 10 cells erase</span>
<span class="str">  0 solve</span>   <span class="esc">\ </span><span class="str">nodes ?</span>
<span class="str">  found-solutions &#64; . .&quot; solutions found&quot; cr cr</span>
<span class="str">  smallest .solution</span>
<span class="str">  largest  .solution ;</span>
<span class="str"></span>
<span class="str">main bye</span>
