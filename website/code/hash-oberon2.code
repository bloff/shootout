<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">(* The Great Computer Language Shootout
   http://shootout.alioth.debian.org

   contributed by Isaac Gouy (Oberon-2 novice)
*)</FONT></I>

<B><FONT COLOR="#228B22">MODULE</FONT></B> Hash;
<B><FONT COLOR="#5F9EA0">IMPORT</FONT></B> LangShootout, SimpleHash, Strings, IntStr, Out, S<B><FONT COLOR="#5F9EA0">:=</FONT></B>SYSTEM;

<B><FONT COLOR="#5F9EA0">CONST</FONT></B>
   maxLength <B><FONT COLOR="#5F9EA0">=</FONT></B> 11; 

<B><FONT COLOR="#A020F0">VAR</FONT></B>
   buffer: <B><FONT COLOR="#228B22">ARRAY</FONT></B> maxLength <B><FONT COLOR="#A020F0">OF</FONT></B> <B><FONT COLOR="#228B22">CHAR</FONT></B>;
   n, i, count: <B><FONT COLOR="#228B22">LONGINT</FONT></B>;
   table: SimpleHash.Hashtable;
   item: SimpleHash.Item;
   key: SimpleHash.ItemKey;

<B><FONT COLOR="#A020F0">PROCEDURE </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">HexToItemKey</FONT></I></B></FONT></B>(n: <B><FONT COLOR="#228B22">LONGINT</FONT></B>): SimpleHash.ItemKey;
<B><FONT COLOR="#A020F0">VAR</FONT></B>
   i, m, digits: <B><FONT COLOR="#228B22">LONGINT</FONT></B>;
   key: SimpleHash.ItemKey;
<B><FONT COLOR="#A020F0">BEGIN</FONT></B>
   i <B><FONT COLOR="#5F9EA0">:=</FONT></B> maxLength <B><FONT COLOR="#5F9EA0">-</FONT></B> 1;
   <B><FONT COLOR="#A020F0">WHILE</FONT></B> n <B><FONT COLOR="#5F9EA0">&gt;</FONT></B> 0 <B><FONT COLOR="#A020F0">DO</FONT></B>
      m <B><FONT COLOR="#5F9EA0">:=</FONT></B> S.VAL(<B><FONT COLOR="#228B22">LONGINT</FONT></B>, S.VAL(<B><FONT COLOR="#A020F0">SET</FONT></B>, n) <B><FONT COLOR="#5F9EA0">*</FONT></B> {0..3}); 
      <B><FONT COLOR="#A020F0">CASE</FONT></B> m <B><FONT COLOR="#A020F0">OF</FONT></B>
         <B><FONT COLOR="#5F9EA0">|</FONT></B> 0..9 : buffer[i] <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#A020F0">CHR</FONT></B>(<B><FONT COLOR="#A020F0">ORD</FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;0&quot;</FONT></B>) <B><FONT COLOR="#5F9EA0">+</FONT></B> m);
      <B><FONT COLOR="#A020F0">ELSE</FONT></B>
                  buffer[i] <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#A020F0">CHR</FONT></B>(<B><FONT COLOR="#A020F0">ORD</FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;A&quot;</FONT></B>) <B><FONT COLOR="#5F9EA0">-</FONT></B> 10 <B><FONT COLOR="#5F9EA0">+</FONT></B> m);   
      <B><FONT COLOR="#A020F0">END</FONT></B>;      
      n <B><FONT COLOR="#5F9EA0">:=</FONT></B> <B><FONT COLOR="#A020F0">ASH</FONT></B>(n,<B><FONT COLOR="#5F9EA0">-</FONT></B>4); <B><FONT COLOR="#A020F0">DEC</FONT></B>(i);                  
   <B><FONT COLOR="#A020F0">END</FONT></B>;
   
   <B><FONT COLOR="#A020F0">INC</FONT></B>(i); digits <B><FONT COLOR="#5F9EA0">:=</FONT></B> maxLength <B><FONT COLOR="#5F9EA0">-</FONT></B> i; 
   <B><FONT COLOR="#A020F0">NEW</FONT></B>(key, digits);
   S.MOVE(S.ADR(buffer[i]), S.VAL(<B><FONT COLOR="#228B22">LONGINT</FONT></B>,key), digits);
   <B><FONT COLOR="#A020F0">RETURN</FONT></B> key;
<B><FONT COLOR="#A020F0">END </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">HexToItemKey</FONT></I></B></FONT></B>;


<B><FONT COLOR="#A020F0">PROCEDURE </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">IntToItemKey</FONT></I></B></FONT></B>(n: <B><FONT COLOR="#228B22">LONGINT</FONT></B>): SimpleHash.ItemKey;
<B><FONT COLOR="#A020F0">VAR</FONT></B>
   digits: <B><FONT COLOR="#228B22">LONGINT</FONT></B>;
   key: SimpleHash.ItemKey;
<B><FONT COLOR="#A020F0">BEGIN</FONT></B>
   IntStr.IntToStr(n,buffer);
   digits <B><FONT COLOR="#5F9EA0">:=</FONT></B> Strings.Length(buffer);
   <B><FONT COLOR="#A020F0">NEW</FONT></B>(key, digits);
   S.MOVE(S.ADR(buffer[0]), S.VAL(<B><FONT COLOR="#228B22">LONGINT</FONT></B>,key), digits); 
   <B><FONT COLOR="#A020F0">RETURN</FONT></B> key;
<B><FONT COLOR="#A020F0">END </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">IntToItemKey</FONT></I></B></FONT></B>;


<B><FONT COLOR="#A020F0">BEGIN</FONT></B>
   n <B><FONT COLOR="#5F9EA0">:=</FONT></B> LangShootout.Argi();
   table <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.New(n);

   <B><FONT COLOR="#A020F0">FOR</FONT></B> i <B><FONT COLOR="#5F9EA0">:=</FONT></B> 1 <B><FONT COLOR="#A020F0">TO</FONT></B> n <B><FONT COLOR="#A020F0">DO</FONT></B>
      key <B><FONT COLOR="#5F9EA0">:=</FONT></B> HexToItemKey(i);
      item <B><FONT COLOR="#5F9EA0">:=</FONT></B> SimpleHash.AddKey(table, key);
      item.value <B><FONT COLOR="#5F9EA0">:=</FONT></B> i; 	
   <B><FONT COLOR="#A020F0">END</FONT></B>;

   count <B><FONT COLOR="#5F9EA0">:=</FONT></B> 0;
   <B><FONT COLOR="#A020F0">FOR</FONT></B> i <B><FONT COLOR="#5F9EA0">:=</FONT></B> n <B><FONT COLOR="#A020F0">TO</FONT></B> 1 BY <B><FONT COLOR="#5F9EA0">-</FONT></B>1 <B><FONT COLOR="#A020F0">DO</FONT></B>
      key <B><FONT COLOR="#5F9EA0">:=</FONT></B> IntToItemKey(i);
      <B><FONT COLOR="#A020F0">IF</FONT></B> SimpleHash.Find(table, key) <B><FONT COLOR="#5F9EA0">#</FONT></B> <B><FONT COLOR="#228B22">NIL</FONT></B> <B><FONT COLOR="#A020F0">THEN</FONT></B> <B><FONT COLOR="#A020F0">INC</FONT></B>(count); <B><FONT COLOR="#A020F0">END</FONT></B>;
   <B><FONT COLOR="#A020F0">END</FONT></B>;
   Out.Int(count, 1); Out.Ln; 
<B><FONT COLOR="#A020F0">END </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Hash</FONT></I></B></FONT></B>.</pre></td></tr></table>
