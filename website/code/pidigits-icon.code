<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># by Charles Evans  2005/12/24</span>
<span class="slc"># based on pidigits.pike by Marcus Comstedt</span>

<span class="kwa">link</span> printf

<span class="kwa">global</span> k<span class="sym">,</span>z

<span class="kwa">record</span> rec<span class="sym">(</span>a<span class="sym">,</span>b<span class="sym">,</span>c<span class="sym">,</span>d<span class="sym">)</span>

<span class="kwa">procedure</span> compose<span class="sym">(</span>a<span class="sym">,</span> b<span class="sym">)</span><span class="slc">#{</span>
  <span class="kwa">return</span> rec<span class="sym">(</span> a.a<span class="sym">*</span>b.a<span class="sym">,</span> a.a<span class="sym">*</span>b.b<span class="sym">+</span>a.b<span class="sym">*</span>b.d<span class="sym">,</span> a.c<span class="sym">*</span>b.a<span class="sym">+</span>a.d<span class="sym">*</span>b.c<span class="sym">,</span> a.c<span class="sym">*</span>b.b<span class="sym">+</span>a.d<span class="sym">*</span>b.d <span class="sym">)</span>
<span class="kwa">end</span> <span class="slc">#}</span>

<span class="kwa">procedure</span> extract<span class="sym">(</span>a<span class="sym">,</span> j<span class="sym">)</span><span class="slc">#{</span>
  <span class="kwa">return</span> <span class="sym">(</span>a.a<span class="sym">*</span>j<span class="sym">+</span>a.b<span class="sym">) / (</span>a.c<span class="sym">*</span>j<span class="sym">+</span>a.d<span class="sym">)</span>
<span class="kwa">end</span> <span class="slc">#}</span>

<span class="kwa">procedure</span> pi_digits<span class="sym">(</span>c<span class="sym">)</span>
<span class="kwa">local</span> r<span class="sym">,</span>i<span class="sym">,</span>y<span class="slc">#{</span>
  r<span class="sym">:=</span><span class="str">&quot;&quot;</span>
  <span class="kwa">every</span> i<span class="sym">:=</span><span class="num">1</span> <span class="kwa">to</span> c <span class="kwa">do</span> <span class="sym">{</span>
    <span class="kwa">while</span><span class="sym">((</span>y <span class="sym">:=</span> extract<span class="sym">(</span>z<span class="sym">,</span> <span class="num">3</span><span class="sym">))</span> ~<span class="sym">=</span> extract<span class="sym">(</span>z<span class="sym">,</span> <span class="num">4</span><span class="sym">))</span> <span class="kwa">do</span> <span class="sym">{</span>
      k<span class="sym">+:=</span><span class="num">1</span>
      z <span class="sym">:=</span> compose<span class="sym">(</span>z<span class="sym">,</span> rec<span class="sym">(</span>k<span class="sym">,</span> <span class="num">4</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">))</span>
    <span class="sym">}</span>
    z <span class="sym">:=</span> compose<span class="sym">(</span>rec<span class="sym">(</span><span class="num">10</span><span class="sym">, -</span><span class="num">10</span><span class="sym">*</span>y<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span><span class="sym">),</span> z<span class="sym">)</span>
    r <span class="sym">||:=</span> y
  <span class="sym">}</span>
  <span class="kwa">return</span> r
<span class="kwa">end</span> <span class="slc">#} pi_digits</span>


<span class="kwa">procedure</span> main<span class="sym">(</span>argv<span class="sym">)</span><span class="slc">#{</span>
  k <span class="sym">:=</span> <span class="num">0</span>
  z <span class="sym">:=</span> rec<span class="sym">(</span> <span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">1</span> <span class="sym">)</span>
  n <span class="sym">:=</span> argv<span class="sym">[</span><span class="num">1</span><span class="sym">]|</span><span class="num">10</span>
  <span class="kwa">every</span> i<span class="sym">:=</span><span class="num">10</span> <span class="kwa">to</span> n <span class="kwa">by</span> <span class="num">10</span> <span class="kwa">do</span>
	write<span class="sym">(</span>pi_digits<span class="sym">(</span><span class="num">10</span><span class="sym">),</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span><span class="sym">,</span> i<span class="sym">)</span>
  <span class="kwa">if</span><span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">)</span><span class="kwa">then</span>
    printf<span class="sym">(</span><span class="str">&quot;%-10s</span><span class="esc">\t</span><span class="str">:%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> pi_digits<span class="sym">(</span>n<span class="sym">-</span>i<span class="sym">),</span> n<span class="sym">)</span>
write<span class="sym">(</span><span class="kwa">&amp;errout</span><span class="sym">,</span> <span class="kwa">&amp;time</span><span class="sym">)</span>
<span class="kwa">end</span> <span class="slc">#} main</span>

