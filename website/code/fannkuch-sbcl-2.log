BUILD COMMANDS FOR: fannkuch.sbcl-2.sbcl

Sat Nov  5 20:34:22 PST 2005

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "fannkuch.sbcl-2.sbcl_compile")'
### START fannkuch.sbcl-2.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "fannkuch.sbcl-2.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END fannkuch.sbcl-2.sbcl_compile


; compiling file "/opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.sbcl" (written 05 NOV 2005 08:34:22 PM):
; compiling (DEFUN SWAP! ...)
; file: /opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.sbcl
; in: DEFUN SWAP!
;     (AREF A I)
; --> LET* 
; ==>
;   (SB-KERNEL:HAIRY-DATA-VECTOR-REF ARRAY SB-INT:INDEX)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a VECTOR, not a SIMPLE-STRING.
; 
; note: unable to
;   avoid runtime dispatch on array element type
; because:
;   Upgraded element type of array is not known at compile time.

; compiling (DEFUN REVERSE-SLICE! ...)
; file: /opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.sbcl
; in: DEFUN REVERSE-SLICE!
;     (DEFUN REVERSE-SLICE! (A I J)
;     (DECLARE (TYPE (SIMPLE-VECTOR (UNSIGNED-BYTE 8)) A) (TYPE FIXNUM I J))
;     (WHEN (< I J) (SWAP! A I (1- J)) (REVERSE-SLICE! A (1+ I) (1- J))))
; --> PROGN EVAL-WHEN SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA REVERSE-SLICE!
;                          (A I J)
;                          (DECLARE (TYPE (SIMPLE-VECTOR (UNSIGNED-BYTE 8)) A)
;                                   (TYPE FIXNUM I J))
;                          (BLOCK REVERSE-SLICE!
;                            (WHEN (< I J)
;                              (SWAP! A I (1- J))
;                              (REVERSE-SLICE! A (1+ I) (1- J)))))
; 
; caught ERROR:
;   bad dimension in array type: (UNSIGNED-BYTE 8)

; compiling (DEFUN COUNT-FLIPS ...)
; file: /opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.sbcl
; in: DEFUN COUNT-FLIPS
;     (COPY-SEQ P)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a SIMPLE-BASE-STRING.
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES SIMPLE-BASE-STRING &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY CHARACTER (*)).
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES
;                                              (SIMPLE-ARRAY CHARACTER (*))
;                                              &REST
;                                              T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY SINGLE-FLOAT (*)).
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES
;                                              (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                              &REST
;                                              T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a SIMPLE-BIT-VECTOR.
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES SIMPLE-BIT-VECTOR &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*)).
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES
;                                              (SIMPLE-ARRAY (UNSIGNED-BYTE 2)
;                                                            (*))
;                                              &REST
;                                              T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*)).
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES
;                                              (SIMPLE-ARRAY (UNSIGNED-BYTE 4)
;                                                            (*))
;                                              &REST
;                                              T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*)).
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES
;                                              (SIMPLE-ARRAY (UNSIGNED-BYTE 7)
;                                                            (*))
;                                              &REST
;                                              T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*)).
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES
;                                              (SIMPLE-ARRAY (UNSIGNED-BYTE 8)
;                                                            (*))
;                                              &REST
;                                              T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*)).
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES
;                                              (SIMPLE-ARRAY (UNSIGNED-BYTE 15)
;                                                            (*))
;                                              &REST
;                                              T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*)).
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES
;                                              (SIMPLE-ARRAY (UNSIGNED-BYTE 16)
;                                                            (*))
;                                              &REST
;                                              T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 29) (*)).
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES
;                                              (SIMPLE-ARRAY (UNSIGNED-BYTE 29)
;                                                            (*))
;                                              &REST
;                                              T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*)).
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES
;                                              (SIMPLE-ARRAY (UNSIGNED-BYTE 31)
;                                                            (*))
;                                              &REST
;                                              T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*)).
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES
;                                              (SIMPLE-ARRAY (UNSIGNED-BYTE 32)
;                                                            (*))
;                                              &REST
;                                              T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 8) (*)).
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES
;                                              (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                              &REST
;                                              T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 16) (*)).
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES
;                                              (SIMPLE-ARRAY (SIGNED-BYTE 16)
;                                                            (*))
;                                              &REST
;                                              T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY FIXNUM (*)).
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES (SIMPLE-ARRAY FIXNUM (*))
;                                                     &REST
;                                                     T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 32) (*)).
;   The result is a (VALUES (OR CONS NULL (SIMPLE-ARRAY * (*)))
;                           &OPTIONAL), not a (VALUES
;                                              (SIMPLE-ARRAY (SIGNED-BYTE 32)
;                                                            (*))
;                                              &REST
;                                              T).

;     (AREF P 0)
; --> LET* 
; ==>
;   (SB-KERNEL:HAIRY-DATA-VECTOR-REF ARRAY SB-INT:INDEX)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (SIMPLE-ARRAY * (*)), not a SIMPLE-STRING.
; 
; note: unable to
;   avoid runtime dispatch on array element type
; because:
;   Upgraded element type of array is not known at compile time.

;     (= (AREF P 0) 1)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to open code because: The operands might not be the same type.

;     (AREF P 0)
; --> LET* 
; ==>
;   (SB-KERNEL:HAIRY-DATA-VECTOR-REF ARRAY SB-INT:INDEX)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (SIMPLE-ARRAY * (*)), not a SIMPLE-STRING.
; 
; note: unable to
;   avoid runtime dispatch on array element type
; because:
;   Upgraded element type of array is not known at compile time.

; compiling (DEFUN REORDER-NEXT ...)
; file: /opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.sbcl
; in: DEFUN REORDER-NEXT
;     (1+ LOW)
; ==>
;   (+ LOW 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; compiling (DEFUN NEXT-PERMUTATION ...)
; file: /opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.sbcl
; in: DEFUN NEXT-PERMUTATION
;     (1- N)
; ==>
;   (- N 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

;     (< (SVREF P I) (SVREF P (1+ I)))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a SINGLE-FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.

;     (< (SVREF P LOW) (SVREF P (1+ I)))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a SINGLE-FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.

;     (1- N)
; ==>
;   (- N 1)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (LOOP FOR
;         I
;         BELOW
;         (1- N)
;         WHEN
;         (< (SVREF P I) (SVREF P (1+ I)))
;         DO
;         (SETQ LOW I)
;         WHEN
;         (AND LOW (< (SVREF P LOW) (SVREF P (1+ I))))
;         DO
;         ...)
; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY WHEN COND IF >= IF 
; ==>
;   (< I #:LOOP-LIMIT-27)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The second argument is a REAL, not a FIXNUM.

;     (< (SVREF P I) (SVREF P (1+ I)))
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The second argument is a REAL, not a DOUBLE-FLOAT.
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The second argument is a REAL, not a SINGLE-FLOAT.
;       etc.

;     (< (SVREF P LOW) (SVREF P (1+ I)))
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The second argument is a REAL, not a DOUBLE-FLOAT.
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The second argument is a REAL, not a SINGLE-FLOAT.
;       etc.

; compiling (DEFUN FANNKUCH ...)
; compiling (DEFUN MAIN ...); 
; compilation unit finished
;   caught 1 ERROR condition
;   printed 44 notes


; /opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.fasl written
; compilation finished in 0:00:01
unhandled SIMPLE-ERROR in thread #<SB-THREAD:THREAD "initial thread" {90034F1}>:
  Error during processing of --eval option "(|LOAD| \"fannkuch.sbcl-2.sbcl_compile\")":

  Execution of a form compiled with errors.
Form:
  #'(NAMED-LAMBDA REVERSE-SLICE!
                (A I J)
                (DECLARE (TYPE (SIMPLE-VECTOR (UNSIGNED-BYTE 8)) A)
                         (TYPE FIXNUM I J))
                (BLOCK REVERSE-SLICE!
                  (WHEN (< I J)
                    (SWAP! A I (1- J))
                    (REVERSE-SLICE! A (1+ I) (1- J)))))
Compile-time-error:
  bad dimension in array type: (UNSIGNED-BYTE 8)

0: (BACKTRACE 128 #<SYNONYM-STREAM :SYMBOL SB-SYS:*STDERR* {50AF449}>)
1: (SB-DEBUG::DEBUGGER-DISABLED-HOOK
    #<SIMPLE-ERROR {929FFC9}>
    #<unavailable argument>)
2: (INVOKE-DEBUGGER #<SIMPLE-ERROR {929FFC9}>)
3: (ERROR
    "Error during processing of --eval ~
                                              option ~S:~%~%  ~A")
4: ((LAMBDA (SB-IMPL::E)) #<SB-INT:COMPILED-PROGRAM-ERROR {929FD69}>)
5: ((LAMBDA (SB-IMPL::E)) #<SB-INT:COMPILED-PROGRAM-ERROR {929FD69}>)
6: (SIGNAL #<SB-INT:COMPILED-PROGRAM-ERROR {929FD69}>)
7: (ERROR SB-INT:COMPILED-PROGRAM-ERROR)
8: ((SB-C::TOP-LEVEL-FORM
     (SB-IMPL::%DEFUN 'REVERSE-SLICE!
                      (SB-INT:NAMED-LAMBDA "#<...>" . "#<...>")
                      NIL
                      "#<...>"
                      . "#<...>")) #<unavailable lambda list>)
9: (SB-FASL::LOAD-FASL-GROUP
    #<SB-SYS:FD-STREAM for "file /opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.fasl" {929E751}>)
10: (SB-FASL::LOAD-AS-FASL
     #<SB-SYS:FD-STREAM for "file /opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.fasl" {929E751}>
     NIL
     #<unavailable argument>)
11: (SB-FASL::INTERNAL-LOAD
     #P"/opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.fasl"
     #P"/opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.fasl"
     :ERROR
     NIL
     NIL
     :BINARY
     NIL)
12: (SB-FASL::INTERNAL-LOAD
     #P"/opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.fasl"
     #P"/opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.fasl"
     :ERROR
     NIL
     NIL
     NIL
     :DEFAULT)
13: (LOAD #P"/opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.fasl")
14: (NIL #<unavailable lambda list>)
15: (SB-INT:EVAL-IN-LEXENV
     (HANDLER-BIND ((DEFCONSTANT-UNEQL (LAMBDA (C) (ABORT C))))
                   (LOAD (COMPILE-FILE "fannkuch.sbcl-2.sbcl")))
     #<NULL-LEXENV>)
16: (SB-FASL::LOAD-AS-SOURCE
     #<SB-SYS:FD-STREAM for "file /opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.sbcl_compile" {900FBF9}>
     NIL
     NIL)
17: (SB-FASL::INTERNAL-LOAD
     #P"fannkuch.sbcl-2.sbcl_compile"
     #P"/opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.sbcl_compile"
     :ERROR
     NIL
     NIL
     :SOURCE
     :DEFAULT)
18: (SB-FASL::INTERNAL-LOAD
     #P"fannkuch.sbcl-2.sbcl_compile"
     #P"/opt/shootout/shootout/bench/fannkuch/tmp/fannkuch.sbcl-2.sbcl_compile"
     :ERROR
     NIL
     NIL
     NIL
     :DEFAULT)
19: (LOAD "fannkuch.sbcl-2.sbcl_compile")
20: (SB-INT:EVAL-IN-LEXENV
     (LOAD "fannkuch.sbcl-2.sbcl_compile")
     #S(SB-KERNEL:LEXENV
        :FUNS NIL
        :VARS NIL
        :BLOCKS NIL
        :TAGS NIL
        :TYPE-RESTRICTIONS NIL
        :LAMBDA NIL
        :CLEANUP NIL
        :HANDLED-CONDITIONS NIL
        :DISABLED-PACKAGE-LOCKS NIL
        :POLICY ((SPEED . 1) (SPACE . 1) (SAFETY . 1) (INHIBIT-WARNINGS . 1)
                 (DEBUG . 1) (COMPILATION-SPEED . 1))))
21: (SB-IMPL::PROCESS-EVAL-OPTIONS
     ("(|DISABLE-DEBUGGER|)" "(|LOAD| \"fannkuch.sbcl-2.sbcl_compile\")"))
22: (SB-IMPL::TOPLEVEL-INIT)
23: ((LABELS SB-IMPL::RESTART-LISP))

unhandled condition in --disable-debugger mode, quitting
### START fannkuch.sbcl-2.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END fannkuch.sbcl-2.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load fannkuch.sbcl-2.sbcl_run %A


PROGRAM OUTPUT
==============
Pfannkuchen(9) = 30
