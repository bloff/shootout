<span class="slc">#   The Computer Language Shootout</span>
<span class="slc">#   http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc">#   contributed by: Olof Kraigher</span>

<span class="kwc">from</span> sys <span class="kwc">import</span> argv

width <span class="sym">=</span> <span class="num">5</span>
height <span class="sym">=</span> <span class="num">10</span>

directions  <span class="sym">= {</span> <span class="str">&quot;E&quot;</span> <span class="sym">:</span> <span class="num">0</span><span class="sym">,</span> <span class="str">&quot;NE&quot;</span> <span class="sym">:</span> <span class="num">1</span><span class="sym">,</span> <span class="str">&quot;NW&quot;</span> <span class="sym">:</span> <span class="num">2</span><span class="sym">,</span> <span class="str">&quot;W&quot;</span> <span class="sym">:</span> <span class="num">3</span><span class="sym">,</span> <span class="str">&quot;SW&quot;</span> <span class="sym">:</span> <span class="num">4</span><span class="sym">,</span> <span class="str">&quot;SE&quot;</span> <span class="sym">:</span> <span class="num">5</span><span class="sym">}</span>
rotate      <span class="sym">= {</span> <span class="str">&quot;E&quot;</span> <span class="sym">:</span> <span class="str">&quot;NE&quot;</span><span class="sym">,</span> <span class="str">&quot;NE&quot;</span> <span class="sym">:</span> <span class="str">&quot;NW&quot;</span><span class="sym">,</span> <span class="str">&quot;NW&quot;</span> <span class="sym">:</span> <span class="str">&quot;W&quot;</span><span class="sym">,</span> <span class="str">&quot;W&quot;</span> <span class="sym">:</span> <span class="str">&quot;SW&quot;</span><span class="sym">,</span> <span class="str">&quot;SW&quot;</span> <span class="sym">:</span> <span class="str">&quot;SE&quot;</span><span class="sym">,</span> <span class="str">&quot;SE&quot;</span> <span class="sym">:</span> <span class="str">&quot;E&quot;</span><span class="sym">}</span>
flip        <span class="sym">= {</span> <span class="str">&quot;E&quot;</span> <span class="sym">:</span> <span class="str">&quot;W&quot;</span><span class="sym">,</span> <span class="str">&quot;NE&quot;</span> <span class="sym">:</span> <span class="str">&quot;NW&quot;</span><span class="sym">,</span> <span class="str">&quot;NW&quot;</span> <span class="sym">:</span> <span class="str">&quot;NE&quot;</span><span class="sym">,</span> <span class="str">&quot;W&quot;</span> <span class="sym">:</span> <span class="str">&quot;E&quot;</span><span class="sym">,</span> <span class="str">&quot;SW&quot;</span> <span class="sym">:</span> <span class="str">&quot;SE&quot;</span><span class="sym">,</span> <span class="str">&quot;SE&quot;</span> <span class="sym">:</span> <span class="str">&quot;SW&quot;</span><span class="sym">}</span>
move        <span class="sym">= {</span> <span class="str">&quot;E&quot;</span> <span class="sym">:</span> <span class="kwa">lambda</span> x<span class="sym">,</span>y<span class="sym">: (</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">),</span>
                <span class="str">&quot;W&quot;</span> <span class="sym">:</span> <span class="kwa">lambda</span> x<span class="sym">,</span>y<span class="sym">: (</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">),</span>
                <span class="str">&quot;NE&quot;</span> <span class="sym">:</span> <span class="kwa">lambda</span> x<span class="sym">,</span>y<span class="sym">: (</span>x<span class="sym">+(</span>y<span class="sym">%</span><span class="num">2</span><span class="sym">),</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">),</span>
                <span class="str">&quot;NW&quot;</span> <span class="sym">:</span> <span class="kwa">lambda</span> x<span class="sym">,</span>y<span class="sym">: (</span>x<span class="sym">+(</span>y<span class="sym">%</span><span class="num">2</span><span class="sym">)-</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">),</span>
                <span class="str">&quot;SE&quot;</span> <span class="sym">:</span> <span class="kwa">lambda</span> x<span class="sym">,</span>y<span class="sym">: (</span>x<span class="sym">+(</span>y<span class="sym">%</span><span class="num">2</span><span class="sym">),</span>y<span class="sym">+</span><span class="num">1</span><span class="sym">),</span>
                <span class="str">&quot;SW&quot;</span> <span class="sym">:</span> <span class="kwa">lambda</span> x<span class="sym">,</span>y<span class="sym">: (</span>x<span class="sym">+(</span>y<span class="sym">%</span><span class="num">2</span><span class="sym">)-</span><span class="num">1</span><span class="sym">,</span>y<span class="sym">+</span><span class="num">1</span><span class="sym">)}</span>

pieces <span class="sym">=   [    [</span><span class="str">&quot;E&quot;</span><span class="sym">,</span> <span class="str">&quot;E&quot;</span><span class="sym">,</span> <span class="str">&quot;E&quot;</span><span class="sym">,</span> <span class="str">&quot;SE&quot;</span><span class="sym">],</span>
                <span class="sym">[</span><span class="str">&quot;SE&quot;</span><span class="sym">,</span> <span class="str">&quot;SW&quot;</span><span class="sym">,</span> <span class="str">&quot;W&quot;</span><span class="sym">,</span> <span class="str">&quot;SW&quot;</span><span class="sym">],</span>
                <span class="sym">[</span><span class="str">&quot;W&quot;</span><span class="sym">,</span> <span class="str">&quot;W&quot;</span><span class="sym">,</span> <span class="str">&quot;SW&quot;</span><span class="sym">,</span> <span class="str">&quot;SE&quot;</span><span class="sym">],</span>
                <span class="sym">[</span><span class="str">&quot;E&quot;</span><span class="sym">,</span>  <span class="str">&quot;E&quot;</span><span class="sym">,</span> <span class="str">&quot;SW&quot;</span><span class="sym">,</span> <span class="str">&quot;SE&quot;</span><span class="sym">],</span>
                <span class="sym">[</span><span class="str">&quot;NW&quot;</span><span class="sym">,</span> <span class="str">&quot;W&quot;</span><span class="sym">,</span> <span class="str">&quot;NW&quot;</span><span class="sym">,</span> <span class="str">&quot;SE&quot;</span><span class="sym">,</span> <span class="str">&quot;SW&quot;</span><span class="sym">],</span>
                <span class="sym">[</span><span class="str">&quot;E&quot;</span><span class="sym">,</span>  <span class="str">&quot;E&quot;</span><span class="sym">,</span> <span class="str">&quot;NE&quot;</span><span class="sym">,</span> <span class="str">&quot;W&quot;</span><span class="sym">],</span>
                <span class="sym">[</span><span class="str">&quot;NW&quot;</span><span class="sym">,</span> <span class="str">&quot;NE&quot;</span><span class="sym">,</span> <span class="str">&quot;NE&quot;</span><span class="sym">,</span> <span class="str">&quot;W&quot;</span><span class="sym">],</span>
                <span class="sym">[</span><span class="str">&quot;NE&quot;</span><span class="sym">,</span> <span class="str">&quot;SE&quot;</span><span class="sym">,</span> <span class="str">&quot;E&quot;</span><span class="sym">,</span> <span class="str">&quot;NE&quot;</span><span class="sym">],</span>
                <span class="sym">[</span><span class="str">&quot;SE&quot;</span><span class="sym">,</span> <span class="str">&quot;SE&quot;</span><span class="sym">,</span> <span class="str">&quot;E&quot;</span><span class="sym">,</span> <span class="str">&quot;SE&quot;</span><span class="sym">],</span>
                <span class="sym">[</span><span class="str">&quot;E&quot;</span><span class="sym">,</span> <span class="str">&quot;NW&quot;</span><span class="sym">,</span> <span class="str">&quot;NW&quot;</span><span class="sym">,</span> <span class="str">&quot;NW&quot;</span><span class="sym">]]</span>

solutions <span class="sym">= []</span>
masks <span class="sym">= [</span><span class="num">0</span> <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span><span class="num">10</span><span class="sym">)]</span>

valid <span class="sym">=</span> <span class="kwa">lambda</span> x<span class="sym">,</span>y<span class="sym">: (</span><span class="num">0</span> <span class="sym">&lt;=</span> x<span class="sym">)</span> <span class="kwb">and</span> <span class="sym">(</span>x <span class="sym">&lt;</span> width<span class="sym">)</span> <span class="kwb">and</span> <span class="sym">(</span><span class="num">0</span> <span class="sym">&lt;=</span> y<span class="sym">)</span> <span class="kwb">and</span> <span class="sym">(</span>y <span class="sym">&lt;</span> height<span class="sym">)</span>
legal <span class="sym">=</span> <span class="kwa">lambda</span> mask<span class="sym">,</span>board<span class="sym">: (</span>mask <span class="sym">&amp;</span> board<span class="sym">) ==</span> <span class="num">0</span>
zerocount <span class="sym">=</span> <span class="kwa">lambda</span> mask<span class="sym">:</span> <span class="kwd">sum</span><span class="sym">(</span><span class="kwa">map</span><span class="sym">(</span><span class="kwa">lambda</span> x<span class="sym">: ((</span><span class="num">1</span><span class="sym">&lt;&lt;</span>x<span class="sym">) &amp;</span> mask<span class="sym">) ==</span> <span class="num">0</span><span class="sym">,</span> <span class="kwa">xrange</span><span class="sym">(</span><span class="num">50</span><span class="sym">)))</span>

<span class="kwb">def</span> <span class="kwd">findFreeCell</span><span class="sym">(</span>board<span class="sym">):</span>
    <span class="kwb">for</span> y <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>height<span class="sym">):</span>
        <span class="kwb">for</span> x <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>width<span class="sym">):</span>
            <span class="kwb">if</span> board <span class="sym">&amp; (</span><span class="num">1</span> <span class="sym">&lt;&lt; (</span>x <span class="sym">+</span> width<span class="sym">*</span>y<span class="sym">)) ==</span> <span class="num">0</span><span class="sym">:</span>
                <span class="kwb">return</span> x<span class="sym">,</span>y


<span class="kwb">def</span> <span class="kwd">floodFill</span><span class="sym">(</span>board<span class="sym">, (</span>x<span class="sym">,</span> y<span class="sym">)):</span>
    <span class="kwb">if not</span> <span class="kwd">valid</span><span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">):</span>
        <span class="kwb">return</span> board
    <span class="kwb">if</span> board <span class="sym">&amp; (</span><span class="num">1</span> <span class="sym">&lt;&lt; (</span>x <span class="sym">+</span> width<span class="sym">*</span>y<span class="sym">)) !=</span> <span class="num">0</span><span class="sym">:</span>
        <span class="kwb">return</span> board

    board <span class="sym">=</span> board <span class="sym">| (</span><span class="num">1</span> <span class="sym">&lt;&lt; (</span>x <span class="sym">+</span> width<span class="sym">*</span>y<span class="sym">))</span>

    <span class="kwb">for</span> f <span class="kwb">in</span> move<span class="sym">.</span><span class="kwd">values</span><span class="sym">():</span>
        board <span class="sym">=</span> board <span class="sym">|</span> <span class="kwd">floodFill</span><span class="sym">(</span>board<span class="sym">,</span> <span class="kwd">f</span><span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">))</span>

    <span class="kwb">return</span> board

<span class="kwb">def</span> <span class="kwd">noIslands</span><span class="sym">(</span>mask<span class="sym">):</span>
    zeroes <span class="sym">=</span> <span class="kwd">zerocount</span><span class="sym">(</span>mask<span class="sym">)</span>

    <span class="kwb">if</span> zeroes <span class="sym">&lt;</span> <span class="num">5</span><span class="sym">:</span>
        <span class="kwb">return</span> False

    <span class="kwb">while</span> mask <span class="sym">!=</span> <span class="num">0x3FFFFFFFFFFFF</span><span class="sym">:</span>
        mask <span class="sym">=</span> <span class="kwd">floodFill</span><span class="sym">(</span>mask<span class="sym">,</span> <span class="kwd">findFreeCell</span><span class="sym">(</span>mask<span class="sym">))</span>
        new_zeroes <span class="sym">=</span> <span class="kwd">zerocount</span><span class="sym">(</span>mask<span class="sym">)</span>

        <span class="kwb">if</span> zeroes <span class="sym">-</span> new_zeroes <span class="sym">&lt;</span> <span class="num">5</span><span class="sym">:</span>
            <span class="kwb">return</span> False

        zeroes <span class="sym">=</span> new_zeroes

    <span class="kwb">return</span> True

<span class="kwb">def</span> <span class="kwd">getBitmask</span><span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>piece<span class="sym">):</span>
    mask <span class="sym">= (</span><span class="num">1</span> <span class="sym">&lt;&lt; (</span>x <span class="sym">+</span> width<span class="sym">*</span>y<span class="sym">))</span>

    <span class="kwb">for</span> cell <span class="kwb">in</span> piece<span class="sym">:</span>
        x<span class="sym">,</span>y <span class="sym">=</span> move<span class="sym">[</span>cell<span class="sym">](</span>x<span class="sym">,</span>y<span class="sym">)</span>
        <span class="kwb">if</span> <span class="kwd">valid</span><span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">):</span>
            mask <span class="sym">=</span> mask <span class="sym">| (</span><span class="num">1</span> <span class="sym">&lt;&lt; (</span>x <span class="sym">+</span> width<span class="sym">*</span>y<span class="sym">))</span>
        <span class="kwb">else</span><span class="sym">:</span>
            <span class="kwb">return</span> False<span class="sym">,</span> <span class="num">0</span>

    <span class="kwb">return</span> True<span class="sym">,</span> mask

<span class="kwb">def</span> <span class="kwd">allBitmasks</span><span class="sym">(</span>piece<span class="sym">,</span> color<span class="sym">):</span>
    bitmasks <span class="sym">= []</span>
    <span class="kwb">for</span> orientations <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span><span class="num">2</span><span class="sym">):</span>
        <span class="kwb">for</span> rotations <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span><span class="num">6</span> <span class="sym">-</span> <span class="num">3</span><span class="sym">*(</span>color <span class="sym">==</span> <span class="num">4</span><span class="sym">)):</span>
            <span class="kwb">for</span> y <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>height<span class="sym">):</span>
                <span class="kwb">for</span> x <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>width<span class="sym">):</span>
                    isValid<span class="sym">,</span> mask <span class="sym">=</span> <span class="kwd">getBitmask</span><span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>piece<span class="sym">)</span>
                    <span class="kwb">if</span> isValid <span class="kwb">and</span> <span class="kwd">noIslands</span><span class="sym">(</span>mask<span class="sym">):</span>
                        bitmasks<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>mask<span class="sym">)</span>

            piece <span class="sym">=</span> <span class="kwa">map</span><span class="sym">(</span><span class="kwa">lambda</span> cell<span class="sym">:</span> rotate<span class="sym">[</span>cell<span class="sym">],</span> piece<span class="sym">)</span>
        piece <span class="sym">=</span> <span class="kwa">map</span><span class="sym">(</span><span class="kwa">lambda</span> cell<span class="sym">:</span> flip<span class="sym">[</span>cell<span class="sym">],</span> piece<span class="sym">)</span>


    <span class="kwb">return</span> bitmasks

<span class="kwb">def</span> <span class="kwd">generateBitmasks</span><span class="sym">():</span>

    <span class="kwa">global</span> masksAtCell

    masksAtCell <span class="sym">= [[[]</span> <span class="kwb">for</span> j <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span><span class="num">10</span><span class="sym">)]</span> <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>width<span class="sym">*</span>height<span class="sym">)]</span>

    color <span class="sym">=</span> <span class="num">0</span>
    <span class="kwb">for</span> piece <span class="kwb">in</span> pieces<span class="sym">:</span>
        masks <span class="sym">=</span> <span class="kwd">allBitmasks</span><span class="sym">(</span>piece<span class="sym">,</span> color<span class="sym">)</span>
        masks<span class="sym">.</span><span class="kwd">sort</span><span class="sym">()</span>
        cellMask <span class="sym">=</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>width<span class="sym">*</span>height<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
        cellCounter <span class="sym">=</span> width<span class="sym">*</span>height<span class="sym">-</span><span class="num">1</span>

        j <span class="sym">=</span> <span class="kwa">len</span><span class="sym">(</span>masks<span class="sym">)-</span><span class="num">1</span>

        <span class="kwb">while</span> <span class="sym">(</span>j <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">):</span>
            <span class="kwb">if</span> <span class="sym">(</span>masks<span class="sym">[</span>j<span class="sym">] &amp;</span> cellMask<span class="sym">) ==</span> cellMask<span class="sym">:</span>
                masksAtCell<span class="sym">[</span>cellCounter<span class="sym">][</span>color<span class="sym">].</span><span class="kwd">append</span><span class="sym">(</span>masks<span class="sym">[</span>j<span class="sym">])</span>
                j <span class="sym">=</span> j<span class="sym">-</span><span class="num">1</span>
            <span class="kwb">else</span><span class="sym">:</span>
                cellMask <span class="sym">=</span> cellMask <span class="sym">&gt;&gt;</span> <span class="num">1</span>
                cellCounter <span class="sym">-=</span> <span class="num">1</span>
        color <span class="sym">+=</span> <span class="num">1</span>


<span class="kwb">def</span> <span class="kwd">solveCell</span><span class="sym">(</span>cell<span class="sym">,</span> board<span class="sym">,</span> n<span class="sym">):</span>

    <span class="kwa">global</span> solutions<span class="sym">,</span> masks<span class="sym">,</span> masksAtCell

    <span class="kwb">if</span> <span class="kwa">len</span><span class="sym">(</span>solutions<span class="sym">) &gt;=</span> n<span class="sym">:</span>
    	<span class="kwb">return</span>

    <span class="kwb">if</span> board <span class="sym">==</span> <span class="num">0x3FFFFFFFFFFFF</span><span class="sym">:</span>
        <span class="slc"># Solved</span>
        s <span class="sym">=</span> <span class="kwd">stringOfMasks</span><span class="sym">(</span>masks<span class="sym">)</span>
    	solutions<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span>s<span class="sym">);</span>
    	solutions<span class="sym">.</span><span class="kwd">append</span><span class="sym">(</span><span class="kwd">inverse</span><span class="sym">(</span>s<span class="sym">));</span>
    	<span class="kwb">return</span>

    <span class="kwb">if</span> board <span class="sym">&amp; (</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> cell<span class="sym">) !=</span> <span class="num">0</span><span class="sym">:</span>
        <span class="slc"># Cell full</span>
    	<span class="kwd">solveCell</span><span class="sym">(</span>cell<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> board<span class="sym">,</span> n<span class="sym">)</span>
    	<span class="kwb">return</span>

    <span class="kwb">if</span> cell <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">:</span>
    	<span class="slc"># Out of board</span>
    	<span class="kwb">return</span>

    <span class="kwb">for</span> color <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span><span class="num">10</span><span class="sym">):</span>
    	<span class="kwb">if</span> masks<span class="sym">[</span>color<span class="sym">] ==</span> <span class="num">0</span><span class="sym">:</span>
            <span class="kwb">for</span> mask <span class="kwb">in</span> masksAtCell<span class="sym">[</span>cell<span class="sym">][</span>color<span class="sym">]:</span>
                <span class="kwb">if</span> <span class="kwd">legal</span><span class="sym">(</span>mask<span class="sym">,</span> board<span class="sym">):</span>
                    masks<span class="sym">[</span>color<span class="sym">] =</span> mask
                    <span class="kwd">solveCell</span><span class="sym">(</span>cell<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> board <span class="sym">|</span> mask<span class="sym">,</span> n<span class="sym">);</span>
                    masks<span class="sym">[</span>color<span class="sym">] =</span> <span class="num">0</span>

<span class="kwb">def</span> <span class="kwd">solve</span><span class="sym">(</span>n<span class="sym">):</span>
    <span class="kwd">generateBitmasks</span><span class="sym">()</span>
    <span class="kwd">solveCell</span><span class="sym">(</span>width<span class="sym">*</span>height<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> n<span class="sym">)</span>


<span class="kwb">def</span> <span class="kwd">stringOfMasks</span><span class="sym">(</span>masks<span class="sym">):</span>
    s <span class="sym">=</span> <span class="str">&quot;&quot;</span>
    mask <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwb">for</span> y <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>height<span class="sym">):</span>
        <span class="kwb">for</span> x <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>width<span class="sym">):</span>
            <span class="kwb">for</span> color <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span><span class="num">10</span><span class="sym">):</span>
                <span class="kwb">if</span> <span class="sym">(</span>masks<span class="sym">[</span>color<span class="sym">] &amp;</span> mask<span class="sym">) !=</span> <span class="num">0</span><span class="sym">:</span>
                    s <span class="sym">+=</span> <span class="kwa">str</span><span class="sym">(</span>color<span class="sym">)</span>
                    <span class="kwb">break</span>
                <span class="kwb">elif</span> color <span class="sym">==</span> <span class="num">9</span><span class="sym">:</span>
                    s <span class="sym">+=</span> <span class="str">&quot;.&quot;</span>
            mask <span class="sym">=</span> mask <span class="sym">&lt;&lt;</span> <span class="num">1</span>
    <span class="kwb">return</span> s

<span class="kwb">def</span> <span class="kwd">inverse</span><span class="sym">(</span>s<span class="sym">):</span>
    ns <span class="sym">=</span> <span class="kwa">map</span><span class="sym">(</span><span class="kwa">lambda</span> x<span class="sym">:</span>x<span class="sym">,</span>s<span class="sym">)</span>

    <span class="kwb">for</span> x <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>width<span class="sym">):</span>
        <span class="kwb">for</span> y <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>height<span class="sym">):</span>
            ns<span class="sym">[</span>x <span class="sym">+</span> y<span class="sym">*</span>width<span class="sym">] =</span> s<span class="sym">[</span>width<span class="sym">-</span>x<span class="sym">-</span><span class="num">1</span> <span class="sym">+ (</span>width <span class="sym">-</span> y <span class="sym">-</span> <span class="num">1</span><span class="sym">)*</span>width<span class="sym">]</span>

    <span class="kwb">return</span> s

<span class="kwb">def</span> <span class="kwd">printSolution</span><span class="sym">(</span>solution<span class="sym">):</span>
    <span class="kwb">for</span> y <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>height<span class="sym">):</span>
        <span class="kwb">for</span> x <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>width<span class="sym">):</span>
            <span class="kwb">print</span> solution<span class="sym">[</span>x <span class="sym">+</span> y<span class="sym">*</span>width<span class="sym">],</span>

        <span class="kwb">if</span> <span class="sym">(</span>y<span class="sym">%</span><span class="num">2</span><span class="sym">) ==</span> <span class="num">0</span><span class="sym">:</span>
            <span class="kwb">print</span> <span class="str">&quot;&quot;</span>
            <span class="kwb">print</span> <span class="str">&quot;&quot;</span><span class="sym">,</span>
        <span class="kwb">else</span><span class="sym">:</span>
            <span class="kwb">print</span> <span class="str">&quot;&quot;</span>

<span class="kwb">if</span> __name__ <span class="sym">==</span> <span class="str">&quot;__main__&quot;</span><span class="sym">:</span>

    <span class="kwb">if not</span> <span class="kwa">len</span><span class="sym">(</span>argv<span class="sym">) &gt;</span> <span class="num">1</span><span class="sym">:</span>
        <span class="kwd">exit</span><span class="sym">()</span>

    <span class="kwd">solve</span><span class="sym">(</span><span class="kwa">int</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]))</span>
    <span class="kwb">print</span> <span class="kwa">len</span><span class="sym">(</span>solutions<span class="sym">),</span> <span class="str">&quot;solutions found&quot;</span>
    <span class="kwb">print</span>
    <span class="kwd">printSolution</span><span class="sym">(</span><span class="kwa">min</span><span class="sym">(</span>solutions<span class="sym">))</span>
    <span class="kwb">print</span>
    <span class="kwd">printSolution</span><span class="sym">(</span><span class="kwa">max</span><span class="sym">(</span>solutions<span class="sym">))</span>
    <span class="kwb">print</span>
