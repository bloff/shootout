<span class="slc">%% $Id: methcall-mercury.code,v 1.5 2005-05-15 05:34:03 bfulgham Exp $
</span><span class="slc">%% http://www.bagley.org/~doug/shootout/
</span><span class="slc">%% from Fergus Henderson
</span>
<span class="slc">% &quot;This test uses a base class Toggle, which implements a simple boolean
</span><span class="slc">% flip-flop device and a derived class NthToggle, which only flips every
</span><span class="slc">% Nth time it is activated.&quot;
</span>
<span class="sym">:-</span> module mytest.
<span class="sym">:-</span> interface.
<span class="sym">:-</span> import_module io.

<span class="sym">:-</span> pred main<span class="sym">(</span>io__state<span class="sym">::</span>di<span class="sym">,</span> io__state<span class="sym">::</span>uo<span class="sym">)</span> <span class="kwa">is</span> det.

<span class="sym">:-</span> implementation.
<span class="sym">:-</span> import_module bool<span class="sym">,</span> int<span class="sym">,</span> string<span class="sym">,</span> list.

<span class="slc">% &quot;The base Toggle class should define a boolean
</span><span class="slc">% (or integer) field to hold a true/false value. It should define methods
</span><span class="slc">% to access the value, and to activate the toggle (flip it's value).&quot;
</span>
<span class="sym">:-</span> type toggle <span class="sym">---&gt;</span> toggle<span class="sym">(</span>toggle_value<span class="sym">::</span>bool<span class="sym">)</span>.

<span class="sym">:-</span> typeclass toggle<span class="sym">(</span>T<span class="sym">)</span> where <span class="sym">[
</span>	func value<span class="sym">(</span>T<span class="sym">) =</span> bool<span class="sym">,
</span>	func <span class="str">'value :='</span><span class="sym">(</span>T<span class="sym">,</span> bool<span class="sym">) =</span> T<span class="sym">,
</span>	func activate<span class="sym">(</span>T<span class="sym">) =</span> T
<span class="sym">]</span>.

<span class="sym">:-</span> instance toggle<span class="sym">(</span>toggle<span class="sym">)</span> where <span class="sym">[
</span>	func<span class="sym">(</span>value<span class="sym">/</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">is</span> toggle_value<span class="sym">,
</span>	func<span class="sym">(</span><span class="str">'value :='</span><span class="sym">/</span><span class="num">2</span><span class="sym">)</span> <span class="kwa">is</span> <span class="str">'toggle_value :='</span><span class="sym">,
</span>	activate<span class="sym">(</span>toggle<span class="sym">(</span>yes<span class="sym">)) =</span> toggle<span class="sym">(</span>no<span class="sym">),
</span>	activate<span class="sym">(</span>toggle<span class="sym">(</span>no<span class="sym">)) =</span> toggle<span class="sym">(</span>yes<span class="sym">)
]</span>.

<span class="slc">% &quot;The derived NthToggle class should inherit the boolean field, and add a
</span><span class="slc">% counter and limit field. It should override the activate method so that
</span><span class="slc">% the boolean state is flipped after the activate method is called count
</span><span class="slc">% times. The constructor for NthToggle should use the constructor for
</span><span class="slc">% Toggle to inherit the boolean field and value() method.&quot;
</span>
<span class="slc">% Mercury doesn't have any direct support for inheritence of fields,
</span><span class="slc">% so we need to use composition instead.
</span>
<span class="sym">:-</span> type nth_toggle <span class="sym">---&gt;</span> nth_toggle<span class="sym">(</span>base<span class="sym">::</span>toggle<span class="sym">,</span> counter<span class="sym">::</span>int<span class="sym">,</span> limit<span class="sym">::</span>int<span class="sym">)</span>.

<span class="sym">:-</span> func make_nth_toggle<span class="sym">(</span>bool<span class="sym">,</span> int<span class="sym">) =</span> nth_toggle.
make_nth_toggle<span class="sym">(</span>Val<span class="sym">,</span> Max<span class="sym">) =</span> nth_toggle<span class="sym">(</span>toggle<span class="sym">(</span>Val<span class="sym">),</span> <span class="num">0</span><span class="sym">,</span> Max<span class="sym">)</span>.

<span class="slc">% If the nth_toggle class added its own methods, then we'd want to
</span><span class="slc">% create a derived typeclass like this:
</span><span class="slc">%
</span><span class="slc">% :- typeclass nth_toggle(T) &lt;= toggle(T) where [ ... ].
</span><span class="slc">% :- instance nth_toggle(nth_toggle) where [ ... ].
</span><span class="slc">%
</span><span class="slc">% But nth_toggle doesn't add any new methods, so we don't need that.
</span><span class="slc">% We just need to make it an instance of the base class,
</span><span class="slc">% delegating the field accessors.
</span>
<span class="sym">:-</span> instance toggle<span class="sym">(</span>nth_toggle<span class="sym">)</span> where <span class="sym">[
</span>	value<span class="sym">(</span>T<span class="sym">) =</span> T^base^value<span class="sym">,
</span>	<span class="str">'value :='</span><span class="sym">(</span>T<span class="sym">,</span> V<span class="sym">) =</span> T^base^value <span class="sym">:=</span> V<span class="sym">,
	(</span>activate<span class="sym">(</span>T<span class="sym">) =</span> NewT <span class="sym">:-
</span>		C <span class="sym">=</span> T^counter <span class="sym">+</span> <span class="num">1</span><span class="sym">,
		(</span>if C <span class="sym">&gt;=</span> T^limit then
			NewT <span class="sym">= (</span>T^counter <span class="sym">:=</span> <span class="num">0</span><span class="sym">)</span>^base <span class="sym">:=</span> activate<span class="sym">(</span>T^base<span class="sym">)
</span>		else
			NewT <span class="sym">=</span> T^counter <span class="sym">:=</span> C
		<span class="sym">))
]</span>.

main <span class="sym">--&gt;
</span>	io__command_line_arguments<span class="sym">(</span>Args<span class="sym">),
	{</span> N <span class="sym">= (</span>if Args <span class="sym">= [</span>Arg<span class="sym">],</span> to_int<span class="sym">(</span>Arg<span class="sym">,</span> N0<span class="sym">)</span> then N0 else <span class="num">1</span><span class="sym">) },

	{</span> loop<span class="sym">(</span>N<span class="sym">,</span> yes<span class="sym">,</span> toggle<span class="sym">(</span>yes<span class="sym">),
		(</span>pred<span class="sym">(</span>_V0<span class="sym">::</span>in<span class="sym">,</span> T0<span class="sym">::</span>in<span class="sym">,</span> V<span class="sym">::</span>out<span class="sym">,</span> T<span class="sym">::</span>out<span class="sym">)</span> <span class="kwa">is</span> det <span class="sym">:-
</span>			T <span class="sym">=</span> T0^activate<span class="sym">,</span> V <span class="sym">=</span> T^value<span class="sym">),
</span>		Value1<span class="sym">,</span> _Toggle1<span class="sym">) },
</span>	write_string<span class="sym">(</span>if Value1 <span class="sym">=</span> yes then <span class="str">&quot;true&quot;</span> else <span class="str">&quot;false&quot;</span><span class="sym">),</span> <span class="kwa">nl</span><span class="sym">,

	{</span> loop<span class="sym">(</span>N<span class="sym">,</span> yes<span class="sym">,</span> make_nth_toggle<span class="sym">(</span>yes<span class="sym">,</span> <span class="num">3</span><span class="sym">),
		(</span>pred<span class="sym">(</span>_V0<span class="sym">::</span>in<span class="sym">,</span> T0<span class="sym">::</span>in<span class="sym">,</span> V<span class="sym">::</span>out<span class="sym">,</span> T<span class="sym">::</span>out<span class="sym">)</span> <span class="kwa">is</span> det <span class="sym">:-
</span>			T <span class="sym">=</span> T0^activate<span class="sym">,</span> V <span class="sym">=</span> T^value<span class="sym">),
</span>		Value2<span class="sym">,</span> _Toggle2<span class="sym">) },
</span>	write_string<span class="sym">(</span>if Value2 <span class="sym">=</span> yes then <span class="str">&quot;true&quot;</span> else <span class="str">&quot;false&quot;</span><span class="sym">),</span> <span class="kwa">nl</span>.

<span class="sym">:-</span> pred loop<span class="sym">(</span>int<span class="sym">,</span> T1<span class="sym">,</span> T2<span class="sym">,</span> pred<span class="sym">(</span>T1<span class="sym">,</span> T2<span class="sym">,</span> T1<span class="sym">,</span> T2<span class="sym">),</span> T1<span class="sym">,</span> T2<span class="sym">)</span>.
<span class="sym">:-</span> mode loop<span class="sym">(</span>in<span class="sym">,</span> in<span class="sym">,</span> in<span class="sym">,</span> pred<span class="sym">(</span>in<span class="sym">,</span> in<span class="sym">,</span> out<span class="sym">,</span> out<span class="sym">)</span> <span class="kwa">is</span> det<span class="sym">,</span> out<span class="sym">,</span> out<span class="sym">)</span> <span class="kwa">is</span> det.
loop<span class="sym">(</span>N<span class="sym">,</span> V0<span class="sym">,</span> T0<span class="sym">,</span> P<span class="sym">,</span> V<span class="sym">,</span> T<span class="sym">) :-
	(</span>if N <span class="sym">=</span> <span class="num">0</span> then
		V <span class="sym">=</span> V0<span class="sym">,</span> T <span class="sym">=</span> T0
	else
		P<span class="sym">(</span>V0<span class="sym">,</span> T0<span class="sym">,</span> V1<span class="sym">,</span> T1<span class="sym">),
</span>		loop<span class="sym">(</span>N <span class="num">- 1</span><span class="sym">,</span> V1<span class="sym">,</span> T1<span class="sym">,</span> P<span class="sym">,</span> V<span class="sym">,</span> T<span class="sym">)
	)</span>.

<span class="slc">% Alternatively, it can be written a little more elegantly as
</span><span class="slc">%
</span><span class="slc">% main --&gt;
</span><span class="slc">% 	io__command_line_arguments(Args),
</span><span class="slc">% 	{ N = (if Args = [Arg], to_int(Arg, N0) then N0 else 1) },
</span><span class="slc">%
</span><span class="slc">% 	{ {Value1, _Toggle1} = repeat_n(N, {yes, toggle(yes)},
</span><span class="slc">% 		(func({_V0, T0}) = {V, T} :- T = T0^activate, V = T^value)) },
</span><span class="slc">% 	write_string(if Value1 = yes then &quot;true&quot; else &quot;false&quot;), nl,
</span><span class="slc">%
</span><span class="slc">% 	{ {Value2, _Toggle2} = repeat_n(N, {yes, make_nth_toggle(yes, 3)},
</span><span class="slc">% 		(func({_V0, T0}) = {V, T} :- T = T0^activate, V = T^value)) },
</span><span class="slc">% 	write_string(if Value2 = yes then &quot;true&quot; else &quot;false&quot;), nl.
</span><span class="slc">%
</span><span class="slc">% :- func repeat_n(int, T, func(T) = T) = T.
</span><span class="slc">% repeat_n(N, X, F) =
</span><span class="slc">% 	(if N = 0 then X
</span><span class="slc">% 	else repeat_n(N - 1, F(X), F)).
</span><span class="slc">%
</span><span class="slc">% but the earlier code above is a little more efficient.</span>
