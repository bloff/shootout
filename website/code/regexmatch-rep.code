#<span class="sym">!/</span>bin<span class="sym">/</span>bash
# <span class="sym">-*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-</span>
PROG<span class="sym">=</span>$<span class="sym">{</span><span class="num">0</span>%.jl<span class="sym">}</span>
<span class="sym">[</span> \! <span class="sym">-</span>f $PROG.jlc <span class="sym">-</span>o $<span class="num">0</span> <span class="sym">-</span>nt $PROG.jlc <span class="sym">] &amp;&amp;</span>
    rep <span class="sym">--</span>batch <span class="sym">--</span>no<span class="sym">-</span>rc <span class="sym">-</span>l compiler <span class="sym">-</span>f compile<span class="sym">-</span>batch $<span class="num">0</span>
exec rep <span class="str">&quot;$PROG.jlc&quot;</span> <span class="str">&quot;$&#64;&quot;</span>
<span class="sym">!</span>#

<span class="slc">;;; $Id: regexmatch-rep.code,v 1.6 2006-09-20 05:52:30 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>define<span class="sym">-</span>structure main <span class="sym">()</span>
  <span class="sym">(</span><span class="kwa">open</span> rep rep.system rep.regexp<span class="sym">)</span>

  <span class="sym">(</span>defvar regexp <span class="sym">(</span>concat
		  <span class="str">&quot;(^|[^0-9</span><span class="esc">\\</span><span class="str">(])&quot;</span>	<span class="slc">; preceeding non-digit or bol</span>
		  <span class="str">&quot;(&quot;</span>			<span class="slc">; area code</span>
		  <span class="str">&quot;</span><span class="esc">\\</span><span class="str">(([0-9][0-9][0-9])</span><span class="esc">\\</span><span class="str">)&quot;</span> <span class="slc">; is either 3 digits in parens</span>
		  <span class="str">&quot;|&quot;</span>			<span class="slc">; or</span>
		  <span class="str">&quot;([0-9][0-9][0-9])&quot;</span>	<span class="slc">; just 3 digits</span>
		  <span class="str">&quot;)&quot;</span>			<span class="slc">; end of area code</span>
		  <span class="str">&quot; &quot;</span>			<span class="slc">; area code is followed by one space</span>
		  <span class="str">&quot;([0-9][0-9][0-9])&quot;</span>	<span class="slc">; exchange is 3 digits</span>
		  <span class="str">&quot;[ -]&quot;</span>		<span class="slc">; separator is either space or dash</span>
		  <span class="str">&quot;([0-9][0-9][0-9][0-9])&quot;</span> <span class="slc">; last 4 digits</span>
		  <span class="str">&quot;[^0-9]&quot;</span>		<span class="slc">; must be followed by a non-digit</span>
		  <span class="sym">))</span>

  <span class="sym">(</span>let<span class="sym">* ((</span>arg <span class="sym">(</span>get<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>option <span class="str">&quot;--num&quot;</span> t<span class="sym">))</span>
	 <span class="sym">(</span>n <span class="sym">(</span><span class="kwa">if</span> arg <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>from<span class="sym">-</span>string arg<span class="sym">)</span> <span class="num">1</span><span class="sym">))</span>
	 <span class="sym">(</span>phones <span class="str">'()))</span>
<span class="str">    (let ((line))</span>
<span class="str">      (while (setq line (read-line))</span>
<span class="str">	(setq phones (append phones (list line)))))</span>
<span class="str">    (while (&gt; n 0)</span>
<span class="str">      (setq n (1- n))</span>
<span class="str">      (let ((count 0))</span>
<span class="str">	(mapc (lambda (line)</span>
<span class="str">		(if (string-match regexp line)</span>
<span class="str">		    (let ((num (expand-last-match &quot;(</span><span class="esc">\\</span><span class="str">3</span><span class="esc">\\</span><span class="str">4)</span> <span class="esc">\\</span><span class="str">5-</span><span class="esc">\\</span><span class="str">6&quot;)))</span>
<span class="str">		      (setq count (1+ count))</span>
<span class="str">		      (if (= 0 n)</span>
<span class="str">			  (format standard-output &quot;%d: %s</span><span class="esc">\n</span><span class="str">&quot; count num)))))</span>
<span class="str">	      phones)))))</span>
