<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &amp;&amp;
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep <B><FONT COLOR="#BC8F8F">&quot;$PROG.jlc&quot;</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;$@&quot;</FONT></B>
!#

<I><FONT COLOR="#B22222">;;; $Id: regexmatch-rep.code,v 1.2 2004-11-08 08:15:19 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://www.bagley.org/~doug/shootout/
</FONT></I>
(define-structure main ()
  (open rep rep.system rep.regexp)

  (defvar regexp (concat
		  <B><FONT COLOR="#BC8F8F">&quot;(^|[^0-9\\(])&quot;</FONT></B>	<I><FONT COLOR="#B22222">; preceeding non-digit or bol
</FONT></I>		  <B><FONT COLOR="#BC8F8F">&quot;(&quot;</FONT></B>			<I><FONT COLOR="#B22222">; area code
</FONT></I>		  <B><FONT COLOR="#BC8F8F">&quot;\\(([0-9][0-9][0-9])\\)&quot;</FONT></B> <I><FONT COLOR="#B22222">; is either 3 digits in parens
</FONT></I>		  <B><FONT COLOR="#BC8F8F">&quot;|&quot;</FONT></B>			<I><FONT COLOR="#B22222">; or
</FONT></I>		  <B><FONT COLOR="#BC8F8F">&quot;([0-9][0-9][0-9])&quot;</FONT></B>	<I><FONT COLOR="#B22222">; just 3 digits
</FONT></I>		  <B><FONT COLOR="#BC8F8F">&quot;)&quot;</FONT></B>			<I><FONT COLOR="#B22222">; end of area code
</FONT></I>		  <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>			<I><FONT COLOR="#B22222">; area code is followed by one space
</FONT></I>		  <B><FONT COLOR="#BC8F8F">&quot;([0-9][0-9][0-9])&quot;</FONT></B>	<I><FONT COLOR="#B22222">; exchange is 3 digits
</FONT></I>		  <B><FONT COLOR="#BC8F8F">&quot;[ -]&quot;</FONT></B>		<I><FONT COLOR="#B22222">; separator is either space or dash
</FONT></I>		  <B><FONT COLOR="#BC8F8F">&quot;([0-9][0-9][0-9][0-9])&quot;</FONT></B> <I><FONT COLOR="#B22222">; last 4 digits
</FONT></I>		  <B><FONT COLOR="#BC8F8F">&quot;[^0-9]&quot;</FONT></B>		<I><FONT COLOR="#B22222">; must be followed by a non-digit
</FONT></I>		  ))

  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((arg (get-command-line-option <B><FONT COLOR="#BC8F8F">&quot;--num&quot;</FONT></B> t))
	 (n (<B><FONT COLOR="#A020F0">if</FONT></B> arg (read-from-string arg) 1))
	 (phones '()))
    (<B><FONT COLOR="#A020F0">let</FONT></B> ((line))
      (while (setq line (read-line))
	(setq phones (append phones (list line)))))
    (while (&gt; n 0)
      (setq n (1- n))
      (<B><FONT COLOR="#A020F0">let</FONT></B> ((count 0))
	(mapc (<B><FONT COLOR="#A020F0">lambda</FONT></B> (line)
		(<B><FONT COLOR="#A020F0">if</FONT></B> (string-match regexp line)
		    (<B><FONT COLOR="#A020F0">let</FONT></B> ((num (expand-last-match <B><FONT COLOR="#BC8F8F">&quot;(\\3\\4) \\5-\\6&quot;</FONT></B>)))
		      (setq count (1+ count))
		      (<B><FONT COLOR="#A020F0">if</FONT></B> (= 0 n)
			  (format standard-output <B><FONT COLOR="#BC8F8F">&quot;%d: %s\n&quot;</FONT></B> count num)))))
	      phones)))))</pre></td></tr></table>
