<span class="line">    1 </span>#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="line">    2 </span><span class="sym">-</span>e main <span class="sym">-</span>s
<span class="line">    3 </span><span class="sym">!</span>#
<span class="line">    4 </span><span class="slc">;;; $Id: ackermann-guile.code,v 1.3 2004-11-11 07:13:56 bfulgham Exp $
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="line">    6 </span><span class="slc"></span>
<span class="line">    7 </span><span class="sym">(</span>debug<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> stack <span class="num">0</span><span class="sym">)
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)
</span><span class="line">   10 </span><span class="sym">  (</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">)))
</span><span class="line">   11 </span><span class="sym">    (</span><span class="kwa">print</span><span class="sym">-</span><span class="kwa">list</span> <span class="str">&quot;Ack(3,&quot;</span> n <span class="str">&quot;): &quot;</span> <span class="sym">(</span>ack <span class="num">3</span> n<span class="sym">))))
</span><span class="line">   12 </span><span class="sym">
</span><span class="line">   13 </span><span class="sym">(</span>define <span class="sym">(</span>ack m n<span class="sym">)
</span><span class="line">   14 </span><span class="sym">  (</span><span class="kwa">cond</span> <span class="sym">((</span>zero? m<span class="sym">) (+</span> n <span class="num">1</span><span class="sym">))
</span><span class="line">   15 </span><span class="sym">        ((</span>zero? n<span class="sym">) (</span>ack <span class="sym">(-</span> m <span class="num">1</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   16 </span><span class="sym">        (</span>else      <span class="sym">(</span>ack <span class="sym">(-</span> m <span class="num">1</span><span class="sym">) (</span>ack m <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))))))
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym">(</span>define <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span><span class="kwa">list</span> . items<span class="sym">) (</span>for<span class="sym">-</span>each display items<span class="sym">) (</span>newline<span class="sym">))</span>
