<span class="line">    1 </span><span class="com">(*
</span><span class="line">    2 </span><span class="com"> * $Id: echo-ocaml.code,v 1.4 2004-11-13 07:41:30 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> * with help from Markus Mottl
</span><span class="line">    5 </span><span class="com"> *)</span>
<span class="line">    6 </span>
<span class="line">    7 </span><span class="kwa">open</span> Unix
<span class="line">    8 </span>
<span class="line">    9 </span><span class="kwa">let</span> data <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   10 </span>
<span class="line">   11 </span><span class="kwa">let rec</span> sock_write sock buf offset <span class="sym">=</span> <span class="kwa">function
</span><span class="line">   12 </span><span class="kwa"></span>  <span class="sym">|</span> <span class="num">0</span> <span class="sym">-&gt; ()
</span><span class="line">   13 </span><span class="sym">  |</span> len <span class="sym">-&gt;
</span><span class="line">   14 </span><span class="sym"></span>      <span class="kwa">let</span> nwritten <span class="sym">=</span> write sock buf offset len <span class="kwa">in
</span><span class="line">   15 </span><span class="kwa"></span>      sock_write sock buf <span class="sym">(</span>offset <span class="sym">+</span> nwritten<span class="sym">) (</span>len <span class="sym">-</span> nwritten<span class="sym">)
</span><span class="line">   16 </span><span class="sym">
</span><span class="line">   17 </span><span class="sym"></span><span class="kwa">let</span> sock_readline buf sock <span class="sym">=
</span><span class="line">   18 </span><span class="sym"></span>  <span class="kwa">let</span> offset <span class="sym">=</span> ref <span class="sym">(</span>read sock buf <span class="num">0 64</span><span class="sym">)</span> <span class="kwa">in
</span><span class="line">   19 </span><span class="kwa">  while</span> buf.<span class="sym">[!</span>offset <span class="num">- 1</span><span class="sym">] &lt;&gt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span> <span class="kwa">do
</span><span class="line">   20 </span><span class="kwa"></span>    offset <span class="sym">:= !</span>offset <span class="sym">+</span> read sock buf <span class="sym">!</span>offset <span class="num">64
</span><span class="line">   21 </span><span class="num"></span>  <span class="kwa">done</span><span class="sym">;
</span><span class="line">   22 </span><span class="sym">  !</span>offset
<span class="line">   23 </span>
<span class="line">   24 </span><span class="kwa">let rec</span> buf_ok buf n <span class="sym">=</span> n <span class="sym">&lt;=</span> <span class="num">0</span> <span class="sym">||</span> buf.<span class="sym">[</span>n<span class="sym">] =</span> data.<span class="sym">[</span>n<span class="sym">] &amp;&amp;</span> buf_ok buf <span class="sym">(</span>n <span class="num">- 1</span><span class="sym">)
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym"></span><span class="kwa">let</span> echo_client n port <span class="sym">=
</span><span class="line">   27 </span><span class="sym"></span>  <span class="kwa">let</span> sock <span class="sym">=</span> socket PF_INET SOCK_STREAM <span class="num">0</span> <span class="kwa">in
</span><span class="line">   28 </span><span class="kwa"></span>  connect sock <span class="sym">(</span>ADDR_INET <span class="sym">(</span>inet_addr_of_string <span class="str">&quot;127.0.0.1&quot;</span><span class="sym">,</span> port<span class="sym">));
</span><span class="line">   29 </span><span class="sym"></span>  <span class="kwa">let</span> len <span class="sym">=</span> String.length data <span class="kwa">and</span> buf <span class="sym">=</span> String.create <span class="num">64</span> <span class="kwa">in
</span><span class="line">   30 </span><span class="kwa">  for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do
</span><span class="line">   31 </span><span class="kwa"></span>    sock_write sock data <span class="num">0</span> len<span class="sym">;
</span><span class="line">   32 </span><span class="sym"></span>    <span class="kwa">let</span> ans_len <span class="sym">=</span> sock_readline buf sock <span class="kwa">in
</span><span class="line">   33 </span><span class="kwa">    if</span> ans_len <span class="sym">&lt;&gt;</span> len <span class="sym">||</span> not <span class="sym">(</span>buf_ok buf <span class="sym">(</span>len <span class="num">- 1</span><span class="sym">))</span> <span class="kwa">then
</span><span class="line">   34 </span><span class="kwa"></span>      failwith <span class="sym">(</span><span class="str">&quot;client got bad data: &quot;</span> ^ String.sub buf <span class="num">0</span> ans_len<span class="sym">)
</span><span class="line">   35 </span><span class="sym"></span>  <span class="kwa">done</span><span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span>  close sock
<span class="line">   37 </span>
<span class="line">   38 </span><span class="kwa">let</span> ssock <span class="sym">=
</span><span class="line">   39 </span><span class="sym"></span>  <span class="kwa">let</span> ssock <span class="sym">=</span> socket PF_INET SOCK_STREAM <span class="num">0
</span><span class="line">   40 </span><span class="num"></span>  <span class="kwa">and</span> addr <span class="sym">=</span> inet_addr_of_string <span class="str">&quot;127.0.0.1&quot;</span> <span class="kwa">in
</span><span class="line">   41 </span><span class="kwa"></span>  bind ssock <span class="sym">(</span>ADDR_INET <span class="sym">(</span>addr<span class="sym">,</span> <span class="num">0</span><span class="sym">));
</span><span class="line">   42 </span><span class="sym"></span>  setsockopt ssock SO_REUSEADDR <span class="kwa">true</span><span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>  listen ssock <span class="num">2</span><span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>  ssock
<span class="line">   45 </span>
<span class="line">   46 </span><span class="kwa">let</span> get_port sock <span class="sym">=
</span><span class="line">   47 </span><span class="sym"></span>  <span class="kwa">match</span> getsockname sock <span class="kwa">with
</span><span class="line">   48 </span><span class="kwa"></span>  <span class="sym">|</span> ADDR_INET <span class="sym">(</span>_<span class="sym">,</span> port<span class="sym">) -&gt;</span> port
<span class="line">   49 </span>  <span class="sym">|</span> ADDR_UNIX _ <span class="sym">-&gt;</span> failwith <span class="str">&quot;getsockname&quot;</span>
<span class="line">   50 </span>
<span class="line">   51 </span><span class="kwa">let</span> echo_server n <span class="sym">=
</span><span class="line">   52 </span><span class="sym"></span>  <span class="kwa">let</span> port <span class="sym">=</span> get_port ssock <span class="kwa">and</span> pid <span class="sym">=</span> fork<span class="sym">()</span> <span class="kwa">in
</span><span class="line">   53 </span><span class="kwa">  if</span> pid <span class="sym">&lt;&gt;</span> <span class="num">0</span> <span class="kwa">then begin
</span><span class="line">   54 </span><span class="kwa">    let</span> csock<span class="sym">,</span> addr <span class="sym">=</span> accept ssock
<span class="line">   55 </span>    <span class="kwa">and</span> buf <span class="sym">=</span> String.create <span class="num">64</span> <span class="kwa">and</span> len <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">and</span> nread <span class="sym">=</span> ref <span class="num">1</span> <span class="kwa">in
</span><span class="line">   56 </span><span class="kwa">    while</span> <span class="sym">!</span>nread <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">do
</span><span class="line">   57 </span><span class="kwa"></span>      nread <span class="sym">:=</span> read csock buf <span class="num">0 64</span><span class="sym">;
</span><span class="line">   58 </span><span class="sym"></span>      sock_write csock buf <span class="num">0</span> <span class="sym">!</span>nread<span class="sym">;
</span><span class="line">   59 </span><span class="sym"></span>      len <span class="sym">:= !</span>len <span class="sym">+ !</span>nread
<span class="line">   60 </span>    <span class="kwa">done</span><span class="sym">;
</span><span class="line">   61 </span><span class="sym"></span>    ignore <span class="sym">(</span>wait <span class="sym">());
</span><span class="line">   62 </span><span class="sym"></span>    Printf.printf <span class="str">&quot;server processed %d bytes</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">!</span>len <span class="kwa">end
</span><span class="line">   63 </span><span class="kwa">  else</span> echo_client n port
<span class="line">   64 </span>
<span class="line">   65 </span><span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">if</span> Array.length Sys.argv <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">else</span> <span class="num">1</span><span class="sym">;;
</span><span class="line">   66 </span><span class="sym"></span>echo_server n
