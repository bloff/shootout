<span class="line">    1 </span>#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="line">    2 </span>
<span class="line">    3 </span><span class="sym">(</span>define PORT <span class="num">8888</span><span class="sym">)
</span><span class="line">    4 </span><span class="sym">(</span>define DATA <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)
</span><span class="line">    5 </span><span class="sym">(</span>define n <span class="num">10</span><span class="sym">)
</span><span class="line">    6 </span><span class="sym">
</span><span class="line">    7 </span><span class="sym">(</span>define <span class="sym">(</span>server<span class="sym">)
</span><span class="line">    8 </span><span class="sym">  (</span>thread client<span class="sym">)
</span><span class="line">    9 </span><span class="sym">  (</span>let<span class="sym">-</span>values <span class="sym">([(</span>in out<span class="sym">) (</span>tcp<span class="sym">-</span>accept <span class="sym">(</span>tcp<span class="sym">-</span>listen PORT<span class="sym">))])
</span><span class="line">   10 </span><span class="sym">    (</span>let loop <span class="sym">([</span>i <span class="sym">(</span><span class="kwa">read</span> in<span class="sym">)]
</span><span class="line">   11 </span><span class="sym">               [</span>bytes <span class="num">0</span><span class="sym">])
</span><span class="line">   12 </span><span class="sym">      (</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>eof<span class="sym">-</span>object? i<span class="sym">))
</span><span class="line">   13 </span><span class="sym">          (</span>begin
<span class="line">   14 </span>            <span class="sym">(</span>write i out<span class="sym">)
</span><span class="line">   15 </span><span class="sym">            (</span>loop <span class="sym">(</span><span class="kwa">read</span> in<span class="sym">)
</span><span class="line">   16 </span><span class="sym">                  (+</span> bytes <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> i<span class="sym">))))
</span><span class="line">   17 </span><span class="sym">          (</span>begin
<span class="line">   18 </span>            <span class="sym">(</span>display <span class="str">&quot;server processed &quot;</span><span class="sym">)
</span><span class="line">   19 </span><span class="sym">            (</span>display bytes<span class="sym">)
</span><span class="line">   20 </span><span class="sym">            (</span>display <span class="str">&quot; bytes</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">))))))
</span><span class="line">   21 </span><span class="sym">
</span><span class="line">   22 </span><span class="sym">(</span>define <span class="sym">(</span>client<span class="sym">)
</span><span class="line">   23 </span><span class="sym">  (</span>let<span class="sym">-</span>values <span class="sym">([(</span>in out<span class="sym">) (</span>tcp<span class="sym">-</span>connect <span class="str">&quot;127.0.0.1&quot;</span> PORT<span class="sym">)])
</span><span class="line">   24 </span><span class="sym">    (</span>let loop <span class="sym">([</span>n n<span class="sym">])
</span><span class="line">   25 </span><span class="sym">      (</span><span class="kwa">if</span> <span class="sym">(&gt;</span> n <span class="num">0</span><span class="sym">)
</span><span class="line">   26 </span><span class="sym">          (</span>begin
<span class="line">   27 </span>            <span class="sym">(</span>write DATA out<span class="sym">)
</span><span class="line">   28 </span><span class="sym">            (</span>let <span class="sym">([</span>i <span class="sym">(</span><span class="kwa">read</span> in<span class="sym">)])
</span><span class="line">   29 </span><span class="sym">              (</span>begin
<span class="line">   30 </span>                <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">equal</span>? DATA i<span class="sym">)
</span><span class="line">   31 </span><span class="sym">                    (</span>loop <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))
</span><span class="line">   32 </span><span class="sym"></span>                    <span class="str">'error))))
</span><span class="line">   33 </span><span class="str">          (close-output-port out)))))
</span><span class="line">   34 </span><span class="str">
</span><span class="line">   35 </span><span class="str">(define (main args)
</span><span class="line">   36 </span><span class="str">  (set! n
</span><span class="line">   37 </span><span class="str">    (if (= (vector-length args) 0)
</span><span class="line">   38 </span><span class="str">        1
</span><span class="line">   39 </span><span class="str">        (string-&gt;number (vector-ref  args 0))))
</span><span class="line">   40 </span><span class="str">  (server))
</span><span class="line">   41 </span><span class="str">
</span><span class="line">   42 </span><span class="str">(main (current-command-line-arguments))</span>
