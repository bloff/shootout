#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>qu

<span class="sym">(</span>module echo mzscheme
  <span class="sym">(</span>define PORT <span class="num">8888</span><span class="sym">)</span>
  <span class="sym">(</span>define DATA <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
  <span class="sym">(</span>define n <span class="num">10</span><span class="sym">)</span>

  <span class="sym">(</span>define <span class="sym">(</span>server<span class="sym">)</span>
    <span class="sym">(</span>thread client<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">-</span>values <span class="sym">([(</span>in out<span class="sym">) (</span>tcp<span class="sym">-</span>accept <span class="sym">(</span>tcp<span class="sym">-</span>listen PORT <span class="num">5</span> #t<span class="sym">))]</span>
		 <span class="sym">[(</span>buffer<span class="sym">) (</span>make<span class="sym">-</span>string <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> DATA<span class="sym">))])</span>
      <span class="sym">(</span>file<span class="sym">-</span>stream<span class="sym">-</span>buffer<span class="sym">-</span>mode out <span class="str">'none)</span>
<span class="str">      (let loop ([i (read-string! buffer in)]</span>
<span class="str">		 [bytes 0])</span>
<span class="str">	(if (not (eof-object? i))</span>
<span class="str">	    (begin</span>
<span class="str">	      (display buffer out)</span>
<span class="str">	      (loop (read-string! buffer in)</span>
<span class="str">		    (+ bytes (string-length buffer))))</span>
<span class="str">	    (begin</span>
<span class="str">	      (display &quot;server processed &quot;)</span>
<span class="str">	      (display bytes)</span>
<span class="str">	      (display &quot; bytes</span><span class="esc">\n</span><span class="str">&quot;))))))</span>
<span class="str"></span>
<span class="str">  (define (client)</span>
<span class="str">    (let-values ([(in out) (tcp-connect &quot;127.0.0.1&quot; PORT)]</span>
<span class="str">		 [(buffer) (make-string (string-length DATA))])</span>
<span class="str">      (file-stream-buffer-mode out '</span>none<span class="sym">)</span>
      <span class="sym">(</span>let loop <span class="sym">([</span>n n<span class="sym">])</span>
	<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> n <span class="num">0</span><span class="sym">)</span>
	    <span class="sym">(</span>begin
	      <span class="sym">(</span>display DATA out<span class="sym">)</span>
	      <span class="sym">(</span>let <span class="sym">([</span>i <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>string<span class="sym">!</span> buffer in<span class="sym">)])</span>
		<span class="sym">(</span>begin
		  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">equal</span>? DATA buffer<span class="sym">)</span>
		      <span class="sym">(</span>loop <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))</span>
		      <span class="str">'error))))</span>
<span class="str">	    (close-output-port out)))))</span>
<span class="str"></span>
<span class="str">  (define (main args)</span>
<span class="str">    (set! n</span>
<span class="str">	  (if (= (vector-length args) 0)</span>
<span class="str">	      1</span>
<span class="str">	      (string-&gt;number (vector-ref  args 0))))</span>
<span class="str">    (server))</span>
<span class="str"></span>
<span class="str">  (main (current-command-line-arguments)))</span>
