#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>qu

<span class="sym">(</span>module echo mzscheme
  <span class="sym">(</span>define PORT <span class="num">8888</span><span class="sym">)</span>
  <span class="sym">(</span>define DATA <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
  <span class="sym">(</span>define n <span class="num">10</span><span class="sym">)</span>

  <span class="sym">(</span>define <span class="sym">(</span>server<span class="sym">)</span>
    <span class="sym">(</span>thread client<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">-</span>values <span class="sym">([(</span>in out<span class="sym">) (</span>tcp<span class="sym">-</span>accept <span class="sym">(</span>tcp<span class="sym">-</span>listen PORT <span class="num">5</span> #t<span class="sym">))]</span>
		 <span class="sym">[(</span>buffer<span class="sym">) (</span>make<span class="sym">-</span>string <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> DATA<span class="sym">))])</span>
      <span class="sym">(</span>file<span class="sym">-</span>stream<span class="sym">-</span>buffer<span class="sym">-</span>mode out <span class="sym">'</span>none<span class="sym">)</span>
      <span class="sym">(</span>let loop <span class="sym">([</span>i <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>string<span class="sym">!</span> buffer in<span class="sym">)]</span>
		 <span class="sym">[</span>bytes <span class="num">0</span><span class="sym">])</span>
	<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>eof<span class="sym">-</span>object? i<span class="sym">))</span>
	    <span class="sym">(</span>begin
	      <span class="sym">(</span>display buffer out<span class="sym">)</span>
	      <span class="sym">(</span>loop <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>string<span class="sym">!</span> buffer in<span class="sym">)</span>
		    <span class="sym">(+</span> bytes <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> buffer<span class="sym">))))</span>
	    <span class="sym">(</span>begin
	      <span class="sym">(</span>display <span class="str">&quot;server processed &quot;</span><span class="sym">)</span>
	      <span class="sym">(</span>display bytes<span class="sym">)</span>
	      <span class="sym">(</span>display <span class="str">&quot; bytes</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">))))))</span>

  <span class="sym">(</span>define <span class="sym">(</span>client<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">-</span>values <span class="sym">([(</span>in out<span class="sym">) (</span>tcp<span class="sym">-</span>connect <span class="str">&quot;127.0.0.1&quot;</span> PORT<span class="sym">)]</span>
		 <span class="sym">[(</span>buffer<span class="sym">) (</span>make<span class="sym">-</span>string <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> DATA<span class="sym">))])</span>
      <span class="sym">(</span>file<span class="sym">-</span>stream<span class="sym">-</span>buffer<span class="sym">-</span>mode out <span class="sym">'</span>none<span class="sym">)</span>
      <span class="sym">(</span>let loop <span class="sym">([</span>n n<span class="sym">])</span>
	<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> n <span class="num">0</span><span class="sym">)</span>
	    <span class="sym">(</span>begin
	      <span class="sym">(</span>display DATA out<span class="sym">)</span>
	      <span class="sym">(</span>let <span class="sym">([</span>i <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>string<span class="sym">!</span> buffer in<span class="sym">)])</span>
		<span class="sym">(</span>begin
		  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">equal</span>? DATA buffer<span class="sym">)</span>
		      <span class="sym">(</span>loop <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))</span>
		      <span class="sym">'</span>error<span class="sym">))))</span>
	    <span class="sym">(</span><span class="kwa">close</span><span class="sym">-</span>output<span class="sym">-</span>port out<span class="sym">)))))</span>

  <span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> n
	  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(= (</span>vector<span class="sym">-</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">0</span><span class="sym">)</span>
	      <span class="num">1</span>
	      <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref  args <span class="num">0</span><span class="sym">))))</span>
    <span class="sym">(</span>server<span class="sym">))</span>

  <span class="sym">(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)))</span>
