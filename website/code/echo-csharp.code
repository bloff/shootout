<span class="com">/* The Great Computer Language Shootout
    Based on the Synchronous Socket Examples in MSDN library.
   contributed by Isaac Gouy */</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Net<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Net<span class="sym">.</span>Sockets<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Text<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Threading<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Diagnostics<span class="sym">;

</span><span class="kwc">class</span> Echo
<span class="sym">{
</span>   <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)
   {
</span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">){
</span>         <span class="slc">// we are the client process
</span>         n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]);
</span>         EchoClient<span class="sym">.</span>Start<span class="sym">(</span>n<span class="sym">);
      }
</span>      <span class="kwa">else</span> <span class="sym">{
</span>         <span class="slc">// we are the listener process
</span>         <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>         <span class="slc">// start the listener
</span>         Thread serverThread <span class="sym">=</span> <span class="kwa">new</span> Thread<span class="sym">(</span><span class="kwa">new</span> ThreadStart<span class="sym">(</span> EchoListener<span class="sym">.</span>Start <span class="sym">));
</span>         serverThread<span class="sym">.</span>Start<span class="sym">();
</span>         <span class="slc">// create a client process
</span>         Process p <span class="sym">=</span> <span class="kwa">new</span> Process<span class="sym">();
</span>         ProcessStartInfo i <span class="sym">=</span> p<span class="sym">.</span>StartInfo<span class="sym">;
</span>         i<span class="sym">.</span>FileName <span class="sym">=</span> <span class="str">&quot;echo.exe&quot;</span><span class="sym">;
</span>         i<span class="sym">.</span>Arguments <span class="sym">=</span> <span class="str">&quot;echoclient &quot;</span> <span class="sym">+</span> n<span class="sym">;
</span>         i<span class="sym">.</span>UseShellExecute <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;
</span>         p<span class="sym">.</span>Start<span class="sym">();
      }
   }
}


</span><span class="kwc">public class</span> EchoListener
 <span class="sym">{
</span>   <span class="kwc">public</span> <span class="kwb">static void</span> Start<span class="sym">()
    {
</span>      <span class="slc">// Establish the local endpoint for the  socket.
</span>      IPHostEntry ipHostInfo <span class="sym">=</span> Dns<span class="sym">.</span>Resolve<span class="sym">(</span>Dns<span class="sym">.</span>GetHostName<span class="sym">());
</span>      IPAddress ipAddress <span class="sym">=</span> ipHostInfo<span class="sym">.</span>AddressList<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span>      IPEndPoint localEndPoint <span class="sym">=</span> <span class="kwa">new</span> IPEndPoint<span class="sym">(</span>ipAddress<span class="sym">,</span> <span class="num">11000</span><span class="sym">);

</span>      <span class="slc">// Create a TCP/IP socket.
</span>      Socket listener <span class="sym">=</span> <span class="kwa">new</span> Socket<span class="sym">(</span>AddressFamily<span class="sym">.</span>InterNetwork<span class="sym">,
</span>         SocketType<span class="sym">.</span>Stream<span class="sym">,</span> ProtocolType<span class="sym">.</span>Tcp <span class="sym">);

</span>      <span class="slc">// Bind the socket to the local endpoint and 
</span>      <span class="slc">// listen for incoming connections.
</span>      <span class="kwa">try
 </span>      <span class="sym">{
</span>         listener<span class="sym">.</span>Bind<span class="sym">(</span>localEndPoint<span class="sym">);
</span>         listener<span class="sym">.</span>Listen<span class="sym">(</span><span class="num">10</span><span class="sym">);

</span>         <span class="slc">// Program is suspended while waiting for an incoming connection.
</span>         Socket handler <span class="sym">=</span> listener<span class="sym">.</span>Accept<span class="sym">();

</span>         byte<span class="sym">[]</span> buffer <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span><span class="num">32</span><span class="sym">];
</span>         <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>         <span class="slc">// An incoming connection needs to be processed.
</span>         <span class="kwb">int</span> bytesRec<span class="sym">;
</span>         <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">) {
</span>            bytesRec <span class="sym">=</span> handler<span class="sym">.</span>Receive<span class="sym">(</span>buffer<span class="sym">);
</span>            <span class="kwa">if</span> <span class="sym">(</span>bytesRec <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
</span>               handler<span class="sym">.</span>Send<span class="sym">(</span>buffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> bytesRec<span class="sym">,</span> SocketFlags<span class="sym">.</span>None<span class="sym">);
</span>               count <span class="sym">+=</span> bytesRec<span class="sym">;
            }
</span>            <span class="kwa">else break</span><span class="sym">;</span> <span class="slc">// client released socket
</span>         <span class="sym">}
</span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;server processed {0} bytes&quot;</span><span class="sym">,</span> count<span class="sym">);

</span>         handler<span class="sym">.</span>Shutdown<span class="sym">(</span>SocketShutdown<span class="sym">.</span>Both<span class="sym">);
</span>         handler<span class="sym">.</span>Close<span class="sym">();
      }
 </span>      <span class="kwa">catch</span> <span class="sym">(</span>Exception e<span class="sym">){
</span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span>e<span class="sym">.</span>ToString<span class="sym">());
      }
   }
}


</span><span class="kwc">public class</span> EchoClient
 <span class="sym">{
</span>   <span class="kwc">private</span> <span class="kwb">const</span> string data <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;

</span>   <span class="kwc">public</span> <span class="kwb">static void</span> Start<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">)
    {
</span>      <span class="slc">// Data buffer for incoming data.
</span>      byte<span class="sym">[]</span> bytes <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span><span class="num">32</span><span class="sym">];

</span>      <span class="slc">// Connect to localhost.
</span>      <span class="kwa">try
 </span>      <span class="sym">{
</span>         IPHostEntry ipHostInfo <span class="sym">=</span> Dns<span class="sym">.</span>Resolve<span class="sym">(</span>Dns<span class="sym">.</span>GetHostName<span class="sym">());
</span>         IPAddress ipAddress <span class="sym">=</span> ipHostInfo<span class="sym">.</span>AddressList<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span>         IPEndPoint remoteEP <span class="sym">=</span> <span class="kwa">new</span> IPEndPoint<span class="sym">(</span>ipAddress<span class="sym">,</span> <span class="num">11000</span><span class="sym">);

</span>         <span class="slc">// Create a TCP/IP  socket.
</span>         Socket sender <span class="sym">=</span> <span class="kwa">new</span> Socket<span class="sym">(</span>AddressFamily<span class="sym">.</span>InterNetwork<span class="sym">,
 </span>            SocketType<span class="sym">.</span>Stream<span class="sym">,</span> ProtocolType<span class="sym">.</span>Tcp <span class="sym">);

</span>         <span class="slc">// Connect the socket to the remote endpoint. Catch any errors.
</span>         <span class="kwa">try
 </span>         <span class="sym">{
</span>            sender<span class="sym">.</span>Connect<span class="sym">(</span>remoteEP<span class="sym">);
</span>            <span class="slc">// Encode the data string into a byte array.
</span>            byte<span class="sym">[]</span> msg <span class="sym">=</span> Encoding<span class="sym">.</span>ASCII<span class="sym">.</span>GetBytes<span class="sym">(</span>data<span class="sym">);
</span>            <span class="kwb">int</span> bytesSent<span class="sym">,</span> bytesRec<span class="sym">;
</span>            <span class="kwb">bool</span> responseOK<span class="sym">;
</span>            <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">){
</span>               <span class="slc">// Send the data through the  socket.
</span>               bytesSent <span class="sym">=</span> sender<span class="sym">.</span>Send<span class="sym">(</span>msg<span class="sym">);

</span>               <span class="slc">// Receive the response
</span>               bytesRec <span class="sym">=</span> sender<span class="sym">.</span>Receive<span class="sym">(</span>bytes<span class="sym">);

</span>               <span class="slc">// Check the response
</span>               responseOK <span class="sym">=</span> msg<span class="sym">.</span>Length <span class="sym">==</span> bytesRec<span class="sym">;
</span>               <span class="kwa">if</span> <span class="sym">(</span>responseOK<span class="sym">)
</span>                  <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> bytesRec<span class="sym">;</span> i<span class="sym">++)
</span>                     <span class="kwa">if</span> <span class="sym">( !(</span>responseOK <span class="sym">=</span> msg<span class="sym">[</span>i<span class="sym">] ==</span> bytes<span class="sym">[</span>i<span class="sym">]) )
</span>                        <span class="kwa">break</span><span class="sym">;
</span>               <span class="kwa">if</span> <span class="sym">(!</span>responseOK<span class="sym">)</span> Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;Response doesn't match message.&quot;</span><span class="sym">);
            }
</span>            <span class="slc">// Release the socket.
</span>            sender<span class="sym">.</span>Shutdown<span class="sym">(</span>SocketShutdown<span class="sym">.</span>Both<span class="sym">);
</span>            sender<span class="sym">.</span>Close<span class="sym">();
         }
 </span>         <span class="kwa">catch</span> <span class="sym">(</span>ArgumentNullException ane<span class="sym">){
</span>            Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;ArgumentNullException : {0}&quot;</span><span class="sym">,</span>ane<span class="sym">.</span>ToString<span class="sym">());
         }
 </span>         <span class="kwa">catch</span> <span class="sym">(</span>SocketException se<span class="sym">){
</span>            Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;SocketException : {0}&quot;</span><span class="sym">,</span>se<span class="sym">.</span>ToString<span class="sym">());
         }
 </span>         <span class="kwa">catch</span> <span class="sym">(</span>Exception e<span class="sym">){
</span>            Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;Unexpected exception : {0}&quot;</span><span class="sym">,</span> e<span class="sym">.</span>ToString<span class="sym">());
         }
      }
 </span>      <span class="kwa">catch</span> <span class="sym">(</span>Exception e<span class="sym">){
</span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span> e<span class="sym">.</span>ToString<span class="sym">());
      }
   }
}</span>
