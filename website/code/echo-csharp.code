<span class="line">    1 </span><span class="com">/* The Great Computer Language Shootout
</span><span class="line">    2 </span><span class="com">     Based on the Synchronous Socket Examples in MSDN library.
</span><span class="line">    3 </span><span class="com">    contributed by Isaac Gouy */</span>
<span class="line">    4 </span>
<span class="line">    5 </span>  <span class="kwa">using</span> System<span class="sym">;
</span><span class="line">    6 </span><span class="sym"> </span><span class="kwa">using</span> System<span class="sym">.</span>Net<span class="sym">;
</span><span class="line">    7 </span><span class="sym"> </span><span class="kwa">using</span> System<span class="sym">.</span>Net<span class="sym">.</span>Sockets<span class="sym">;
</span><span class="line">    8 </span><span class="sym"> </span><span class="kwa">using</span> System<span class="sym">.</span>Text<span class="sym">;
</span><span class="line">    9 </span><span class="sym"> </span><span class="kwa">using</span> System<span class="sym">.</span>Threading<span class="sym">;
</span><span class="line">   10 </span><span class="sym"> </span><span class="kwa">using</span> System<span class="sym">.</span>Diagnostics<span class="sym">;
</span><span class="line">   11 </span><span class="sym"> 
</span><span class="line">   12 </span><span class="sym"> </span><span class="kwc">class</span> Echo
<span class="line">   13 </span> <span class="sym">{
</span><span class="line">   14 </span><span class="sym"> </span>   <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)
</span><span class="line">   15 </span><span class="sym">    {
</span><span class="line">   16 </span><span class="sym"> </span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   17 </span><span class="sym"> </span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">){
</span><span class="line">   18 </span><span class="sym"> </span>         <span class="slc">// we are the client process 
</span><span class="line">   19 </span><span class="slc"></span>         n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]);
</span><span class="line">   20 </span><span class="sym"> </span>         EchoClient<span class="sym">.</span>Start<span class="sym">(</span>n<span class="sym">);
</span><span class="line">   21 </span><span class="sym">       }
</span><span class="line">   22 </span><span class="sym"> </span>      <span class="kwa">else</span> <span class="sym">{
</span><span class="line">   23 </span><span class="sym"> </span>         <span class="slc">// we are the listener process 
</span><span class="line">   24 </span><span class="slc"></span>         <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span><span class="line">   25 </span><span class="sym"> </span>         <span class="slc">// start the listener 
</span><span class="line">   26 </span><span class="slc"></span>         Thread serverThread <span class="sym">=</span> <span class="kwa">new</span> Thread<span class="sym">(</span><span class="kwa">new</span> ThreadStart<span class="sym">(</span> EchoListener<span class="sym">.</span>Start <span class="sym">));
</span><span class="line">   27 </span><span class="sym"> </span>         serverThread<span class="sym">.</span>Start<span class="sym">();
</span><span class="line">   28 </span><span class="sym"> </span>         <span class="slc">// create a client process 
</span><span class="line">   29 </span><span class="slc"></span>         Process p <span class="sym">=</span> <span class="kwa">new</span> Process<span class="sym">();
</span><span class="line">   30 </span><span class="sym"> </span>         ProcessStartInfo i <span class="sym">=</span> p<span class="sym">.</span>StartInfo<span class="sym">;
</span><span class="line">   31 </span><span class="sym"> </span>         i<span class="sym">.</span>FileName <span class="sym">=</span> <span class="str">&quot;echo.exe&quot;</span><span class="sym">;
</span><span class="line">   32 </span><span class="sym"> </span>         i<span class="sym">.</span>Arguments <span class="sym">=</span> <span class="str">&quot;echoclient &quot;</span> <span class="sym">+</span> n<span class="sym">;
</span><span class="line">   33 </span><span class="sym"> </span>         i<span class="sym">.</span>UseShellExecute <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;
</span><span class="line">   34 </span><span class="sym"> </span>         p<span class="sym">.</span>Start<span class="sym">();
</span><span class="line">   35 </span><span class="sym">       }
</span><span class="line">   36 </span><span class="sym">    }
</span><span class="line">   37 </span><span class="sym"> }
</span><span class="line">   38 </span><span class="sym"> 
</span><span class="line">   39 </span><span class="sym"> 
</span><span class="line">   40 </span><span class="sym"> </span><span class="kwc">public class</span> EchoListener
<span class="line">   41 </span>  <span class="sym">{
</span><span class="line">   42 </span><span class="sym"> </span>   <span class="kwc">public</span> <span class="kwb">static void</span> Start<span class="sym">()
</span><span class="line">   43 </span><span class="sym">     {
</span><span class="line">   44 </span><span class="sym"> </span>      <span class="slc">// Establish the local endpoint for the  socket. 
</span><span class="line">   45 </span><span class="slc"></span>      IPHostEntry ipHostInfo <span class="sym">=</span> Dns<span class="sym">.</span>Resolve<span class="sym">(</span>Dns<span class="sym">.</span>GetHostName<span class="sym">());
</span><span class="line">   46 </span><span class="sym"> </span>      IPAddress ipAddress <span class="sym">=</span> ipHostInfo<span class="sym">.</span>AddressList<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="line">   47 </span><span class="sym"> </span>      IPEndPoint localEndPoint <span class="sym">=</span> <span class="kwa">new</span> IPEndPoint<span class="sym">(</span>ipAddress<span class="sym">,</span> <span class="num">11000</span><span class="sym">);
</span><span class="line">   48 </span><span class="sym"> 
</span><span class="line">   49 </span><span class="sym"> </span>      <span class="slc">// Create a TCP/IP socket. 
</span><span class="line">   50 </span><span class="slc"></span>      Socket listener <span class="sym">=</span> <span class="kwa">new</span> Socket<span class="sym">(</span>AddressFamily<span class="sym">.</span>InterNetwork<span class="sym">,
</span><span class="line">   51 </span><span class="sym"> </span>         SocketType<span class="sym">.</span>Stream<span class="sym">,</span> ProtocolType<span class="sym">.</span>Tcp <span class="sym">);
</span><span class="line">   52 </span><span class="sym"> 
</span><span class="line">   53 </span><span class="sym"> </span>      <span class="slc">// Bind the socket to the local endpoint and  
</span><span class="line">   54 </span><span class="slc"></span>      <span class="slc">// listen for incoming connections. 
</span><span class="line">   55 </span><span class="slc"></span>      <span class="kwa">try
</span><span class="line">   56 </span><span class="kwa">  </span>      <span class="sym">{
</span><span class="line">   57 </span><span class="sym"> </span>         listener<span class="sym">.</span>Bind<span class="sym">(</span>localEndPoint<span class="sym">);
</span><span class="line">   58 </span><span class="sym"> </span>         listener<span class="sym">.</span>Listen<span class="sym">(</span><span class="num">10</span><span class="sym">);
</span><span class="line">   59 </span><span class="sym"> 
</span><span class="line">   60 </span><span class="sym"> </span>         <span class="slc">// Program is suspended while waiting for an incoming connection. 
</span><span class="line">   61 </span><span class="slc"></span>         Socket handler <span class="sym">=</span> listener<span class="sym">.</span>Accept<span class="sym">();
</span><span class="line">   62 </span><span class="sym"> 
</span><span class="line">   63 </span><span class="sym"> </span>         byte<span class="sym">[]</span> buffer <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span><span class="num">32</span><span class="sym">];
</span><span class="line">   64 </span><span class="sym"> </span>         <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   65 </span><span class="sym"> </span>         <span class="slc">// An incoming connection needs to be processed. 
</span><span class="line">   66 </span><span class="slc"></span>         <span class="kwb">int</span> bytesRec<span class="sym">;
</span><span class="line">   67 </span><span class="sym"> </span>         <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">) {
</span><span class="line">   68 </span><span class="sym"> </span>            bytesRec <span class="sym">=</span> handler<span class="sym">.</span>Receive<span class="sym">(</span>buffer<span class="sym">);
</span><span class="line">   69 </span><span class="sym"> </span>            <span class="kwa">if</span> <span class="sym">(</span>bytesRec <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
</span><span class="line">   70 </span><span class="sym"> </span>               handler<span class="sym">.</span>Send<span class="sym">(</span>buffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> bytesRec<span class="sym">,</span> SocketFlags<span class="sym">.</span>None<span class="sym">);
</span><span class="line">   71 </span><span class="sym"> </span>               count <span class="sym">+=</span> bytesRec<span class="sym">;
</span><span class="line">   72 </span><span class="sym">             }
</span><span class="line">   73 </span><span class="sym"> </span>            <span class="kwa">else break</span><span class="sym">;</span> <span class="slc">// client released socket 
</span><span class="line">   74 </span><span class="slc"></span>         <span class="sym">}
</span><span class="line">   75 </span><span class="sym"> </span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;server processed {0} bytes&quot;</span><span class="sym">,</span> count<span class="sym">);
</span><span class="line">   76 </span><span class="sym"> 
</span><span class="line">   77 </span><span class="sym"> </span>         handler<span class="sym">.</span>Shutdown<span class="sym">(</span>SocketShutdown<span class="sym">.</span>Both<span class="sym">);
</span><span class="line">   78 </span><span class="sym"> </span>         handler<span class="sym">.</span>Close<span class="sym">();
</span><span class="line">   79 </span><span class="sym">       }
</span><span class="line">   80 </span><span class="sym">  </span>      <span class="kwa">catch</span> <span class="sym">(</span>Exception e<span class="sym">){
</span><span class="line">   81 </span><span class="sym"> </span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span>e<span class="sym">.</span>ToString<span class="sym">());
</span><span class="line">   82 </span><span class="sym">       }
</span><span class="line">   83 </span><span class="sym">    }
</span><span class="line">   84 </span><span class="sym"> }
</span><span class="line">   85 </span><span class="sym"> 
</span><span class="line">   86 </span><span class="sym"> 
</span><span class="line">   87 </span><span class="sym"> </span><span class="kwc">public class</span> EchoClient
<span class="line">   88 </span>  <span class="sym">{
</span><span class="line">   89 </span><span class="sym"> </span>   <span class="kwc">private</span> <span class="kwb">const</span> string data <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
</span><span class="line">   90 </span><span class="sym"> 
</span><span class="line">   91 </span><span class="sym"> </span>   <span class="kwc">public</span> <span class="kwb">static void</span> Start<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">)
</span><span class="line">   92 </span><span class="sym">     {
</span><span class="line">   93 </span><span class="sym"> </span>      <span class="slc">// Data buffer for incoming data. 
</span><span class="line">   94 </span><span class="slc"></span>      byte<span class="sym">[]</span> bytes <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span><span class="num">32</span><span class="sym">];
</span><span class="line">   95 </span><span class="sym"> 
</span><span class="line">   96 </span><span class="sym"> </span>      <span class="slc">// Connect to localhost. 
</span><span class="line">   97 </span><span class="slc"></span>      <span class="kwa">try
</span><span class="line">   98 </span><span class="kwa">  </span>      <span class="sym">{
</span><span class="line">   99 </span><span class="sym"> </span>         IPHostEntry ipHostInfo <span class="sym">=</span> Dns<span class="sym">.</span>Resolve<span class="sym">(</span>Dns<span class="sym">.</span>GetHostName<span class="sym">());
</span><span class="line">  100 </span><span class="sym"> </span>         IPAddress ipAddress <span class="sym">=</span> ipHostInfo<span class="sym">.</span>AddressList<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="line">  101 </span><span class="sym"> </span>         IPEndPoint remoteEP <span class="sym">=</span> <span class="kwa">new</span> IPEndPoint<span class="sym">(</span>ipAddress<span class="sym">,</span> <span class="num">11000</span><span class="sym">);
</span><span class="line">  102 </span><span class="sym"> 
</span><span class="line">  103 </span><span class="sym"> </span>         <span class="slc">// Create a TCP/IP  socket. 
</span><span class="line">  104 </span><span class="slc"></span>         Socket sender <span class="sym">=</span> <span class="kwa">new</span> Socket<span class="sym">(</span>AddressFamily<span class="sym">.</span>InterNetwork<span class="sym">,
</span><span class="line">  105 </span><span class="sym">  </span>            SocketType<span class="sym">.</span>Stream<span class="sym">,</span> ProtocolType<span class="sym">.</span>Tcp <span class="sym">);
</span><span class="line">  106 </span><span class="sym"> 
</span><span class="line">  107 </span><span class="sym"> </span>         <span class="slc">// Connect the socket to the remote endpoint. Catch any errors. 
</span><span class="line">  108 </span><span class="slc"></span>         <span class="kwa">try
</span><span class="line">  109 </span><span class="kwa">  </span>         <span class="sym">{
</span><span class="line">  110 </span><span class="sym"> </span>            sender<span class="sym">.</span>Connect<span class="sym">(</span>remoteEP<span class="sym">);
</span><span class="line">  111 </span><span class="sym"> </span>            <span class="slc">// Encode the data string into a byte array. 
</span><span class="line">  112 </span><span class="slc"></span>            byte<span class="sym">[]</span> msg <span class="sym">=</span> Encoding<span class="sym">.</span>ASCII<span class="sym">.</span>GetBytes<span class="sym">(</span>data<span class="sym">);
</span><span class="line">  113 </span><span class="sym"> </span>            <span class="kwb">int</span> bytesSent<span class="sym">,</span> bytesRec<span class="sym">;
</span><span class="line">  114 </span><span class="sym"> </span>            <span class="kwb">bool</span> responseOK<span class="sym">;
</span><span class="line">  115 </span><span class="sym"> </span>            <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">){
</span><span class="line">  116 </span><span class="sym"> </span>               <span class="slc">// Send the data through the  socket. 
</span><span class="line">  117 </span><span class="slc"></span>               bytesSent <span class="sym">=</span> sender<span class="sym">.</span>Send<span class="sym">(</span>msg<span class="sym">);
</span><span class="line">  118 </span><span class="sym"> 
</span><span class="line">  119 </span><span class="sym"> </span>               <span class="slc">// Receive the response 
</span><span class="line">  120 </span><span class="slc"></span>               bytesRec <span class="sym">=</span> sender<span class="sym">.</span>Receive<span class="sym">(</span>bytes<span class="sym">);
</span><span class="line">  121 </span><span class="sym"> 
</span><span class="line">  122 </span><span class="sym"> </span>               <span class="slc">// Check the response 
</span><span class="line">  123 </span><span class="slc"></span>               responseOK <span class="sym">=</span> msg<span class="sym">.</span>Length <span class="sym">==</span> bytesRec<span class="sym">;
</span><span class="line">  124 </span><span class="sym"> </span>               <span class="kwa">if</span> <span class="sym">(</span>responseOK<span class="sym">)
</span><span class="line">  125 </span><span class="sym"> </span>                  <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> bytesRec<span class="sym">;</span> i<span class="sym">++)
</span><span class="line">  126 </span><span class="sym"> </span>                     <span class="kwa">if</span> <span class="sym">( !(</span>responseOK <span class="sym">=</span> msg<span class="sym">[</span>i<span class="sym">] ==</span> bytes<span class="sym">[</span>i<span class="sym">]) )
</span><span class="line">  127 </span><span class="sym"> </span>                        <span class="kwa">break</span><span class="sym">;
</span><span class="line">  128 </span><span class="sym"> </span>               <span class="kwa">if</span> <span class="sym">(!</span>responseOK<span class="sym">)</span> Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;Response doesn't match message.&quot;</span><span class="sym">);
</span><span class="line">  129 </span><span class="sym">             }
</span><span class="line">  130 </span><span class="sym"> </span>            <span class="slc">// Release the socket. 
</span><span class="line">  131 </span><span class="slc"></span>            sender<span class="sym">.</span>Shutdown<span class="sym">(</span>SocketShutdown<span class="sym">.</span>Both<span class="sym">);
</span><span class="line">  132 </span><span class="sym"> </span>            sender<span class="sym">.</span>Close<span class="sym">();
</span><span class="line">  133 </span><span class="sym">          }
</span><span class="line">  134 </span><span class="sym">  </span>         <span class="kwa">catch</span> <span class="sym">(</span>ArgumentNullException ane<span class="sym">){
</span><span class="line">  135 </span><span class="sym"> </span>            Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;ArgumentNullException : {0}&quot;</span><span class="sym">,</span>ane<span class="sym">.</span>ToString<span class="sym">());
</span><span class="line">  136 </span><span class="sym">          }
</span><span class="line">  137 </span><span class="sym">  </span>         <span class="kwa">catch</span> <span class="sym">(</span>SocketException se<span class="sym">){
</span><span class="line">  138 </span><span class="sym"> </span>            Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;SocketException : {0}&quot;</span><span class="sym">,</span>se<span class="sym">.</span>ToString<span class="sym">());
</span><span class="line">  139 </span><span class="sym">          }
</span><span class="line">  140 </span><span class="sym">  </span>         <span class="kwa">catch</span> <span class="sym">(</span>Exception e<span class="sym">){
</span><span class="line">  141 </span><span class="sym"> </span>            Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;Unexpected exception : {0}&quot;</span><span class="sym">,</span> e<span class="sym">.</span>ToString<span class="sym">());
</span><span class="line">  142 </span><span class="sym">          }
</span><span class="line">  143 </span><span class="sym">       }
</span><span class="line">  144 </span><span class="sym">  </span>      <span class="kwa">catch</span> <span class="sym">(</span>Exception e<span class="sym">){
</span><span class="line">  145 </span><span class="sym"> </span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span> e<span class="sym">.</span>ToString<span class="sym">());
</span><span class="line">  146 </span><span class="sym">       }
</span><span class="line">  147 </span><span class="sym">    }
</span><span class="line">  148 </span><span class="sym"> }</span> 
