<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org

   contributed by Isaac Gouy */</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Net<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Net<span class="sym">.</span>Sockets<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Text<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Threading<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Diagnostics<span class="sym">;

</span><span class="kwc">class</span> Echo
<span class="sym">{
</span>   <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)
   {
</span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">){
</span>         n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>         Process p <span class="sym">=</span> <span class="kwa">new</span> Process<span class="sym">();
</span>         ProcessStartInfo i <span class="sym">=</span> p<span class="sym">.</span>StartInfo<span class="sym">;
</span>         i<span class="sym">.</span>FileName <span class="sym">=</span> <span class="str">&quot;mono&quot;</span><span class="sym">;
</span>         i<span class="sym">.</span>Arguments <span class="sym">=</span> <span class="str">&quot;echo.csharp_run&quot;</span><span class="sym">;
</span>         i<span class="sym">.</span>UseShellExecute <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;
</span>         p<span class="sym">.</span>Start<span class="sym">();

</span>         Client<span class="sym">.</span>Start<span class="sym">(</span>n<span class="sym">);
      }
</span>      <span class="kwa">else</span> <span class="sym">{
</span>         Listener<span class="sym">.</span>Start<span class="sym">();
      }
   }
}


</span><span class="kwc">public class</span> Listener
<span class="sym">{
</span>   <span class="kwc">public</span> <span class="kwb">static void</span> Start<span class="sym">()
   {
</span>      TcpListener listener <span class="sym">=</span> <span class="kwa">new</span> TcpListener<span class="sym">(</span><span class="num">11000</span><span class="sym">);
</span>      listener<span class="sym">.</span>Start<span class="sym">();

</span>      <span class="kwa">using</span> <span class="sym">(</span>TcpClient client <span class="sym">=</span> listener<span class="sym">.</span>AcceptTcpClient<span class="sym">()){
</span>         NetworkStream s <span class="sym">=</span> client<span class="sym">.</span>GetStream<span class="sym">();

</span>         byte<span class="sym">[]</span> buffer <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span><span class="num">32</span><span class="sym">];
</span>         <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>         <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">) {
</span>            <span class="kwb">int</span> bytesRec <span class="sym">=</span> s<span class="sym">.</span>Read<span class="sym">(</span>buffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> buffer<span class="sym">.</span>Length<span class="sym">);

</span>            <span class="kwa">if</span> <span class="sym">(</span>bytesRec <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
</span>               s<span class="sym">.</span>Write<span class="sym">(</span>buffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> bytesRec<span class="sym">);
</span>               count <span class="sym">+=</span> bytesRec<span class="sym">;
            }
</span>            <span class="kwa">else break</span><span class="sym">;
         }
</span>         Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;server processed {0} bytes&quot;</span><span class="sym">,</span> count<span class="sym">);
</span>         listener<span class="sym">.</span>Stop<span class="sym">();
      }
   }
}


</span><span class="kwc">public class</span> Client
<span class="sym">{
</span>   <span class="kwc">private</span> <span class="kwb">const</span> string data <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;

</span>   <span class="kwc">public</span> <span class="kwb">static void</span> Start<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">)
   {
</span>      byte<span class="sym">[]</span> msg <span class="sym">=</span> Encoding<span class="sym">.</span>ASCII<span class="sym">.</span>GetBytes<span class="sym">(</span>data<span class="sym">);
</span>      byte<span class="sym">[]</span> buffer <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span><span class="num">32</span><span class="sym">];

</span>      <span class="kwa">using</span> <span class="sym">(</span>TcpClient client <span class="sym">=</span> <span class="kwa">new</span> TcpClient<span class="sym">(</span><span class="str">&quot;127.0.0.1&quot;</span><span class="sym">,</span><span class="num">11000</span><span class="sym">)){
</span>         NetworkStream s <span class="sym">=</span> client<span class="sym">.</span>GetStream<span class="sym">();

</span>         <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">){
</span>            s<span class="sym">.</span>Write<span class="sym">(</span>msg<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> msg<span class="sym">.</span>Length<span class="sym">);
</span>            <span class="kwb">int</span> bytesRec <span class="sym">=</span> s<span class="sym">.</span>Read<span class="sym">(</span>buffer<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> buffer<span class="sym">.</span>Length<span class="sym">);
</span>            <span class="kwb">bool</span> responseOK <span class="sym">=</span> msg<span class="sym">.</span>Length <span class="sym">==</span> bytesRec<span class="sym">;
</span>            <span class="kwa">if</span> <span class="sym">(</span>responseOK<span class="sym">)
</span>               <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> bytesRec<span class="sym">;</span> i<span class="sym">++)
</span>                  <span class="kwa">if</span> <span class="sym">( !(</span>responseOK <span class="sym">=</span> msg<span class="sym">[</span>i<span class="sym">] ==</span> buffer<span class="sym">[</span>i<span class="sym">]) )
</span>                     <span class="kwa">break</span><span class="sym">;

</span>            <span class="kwa">if</span> <span class="sym">(!</span>responseOK<span class="sym">)</span> Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;Response doesn't match message.&quot;</span><span class="sym">);
         }
      }
   }
}</span>
