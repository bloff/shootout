<span class="slc">;; ---------------------------------------------------------------------</span>
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Anthony Borla</span>
<span class="slc">;; ---------------------------------------------------------------------</span>

<span class="sym">(</span>declare <span class="sym">(</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>unsafe<span class="sym">) (</span>block<span class="sym">) (</span><span class="kwa">lambda</span><span class="sym">-</span>lift<span class="sym">)</span>
         <span class="sym">(</span>uses srfi<span class="sym">-</span><span class="num">1</span> lolevel<span class="sym">))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">+</span>alu<span class="sym">+</span>
  <span class="sym">(</span>string<span class="sym">-&gt;</span>byte<span class="sym">-</span>vector
    <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span>
      <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
      <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
      <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
      <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
      <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
      <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
      <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">)))</span>

<span class="slc">; -------------</span>

<span class="sym">(</span>define<span class="sym">-</span>constant <span class="sym">+</span>iub<span class="sym">+</span>
  <span class="sym">(</span><span class="kwa">list</span>
    <span class="sym">'(</span>#\a . <span class="num">0.27</span><span class="sym">) '(</span>#\c . <span class="num">0.12</span><span class="sym">) '(</span>#\g . <span class="num">0.12</span><span class="sym">) '(</span>#\t . <span class="num">0.27</span><span class="sym">) '(</span>#\B . <span class="num">0.02</span><span class="sym">)</span>
    <span class="sym">'(</span>#\D . <span class="num">0.02</span><span class="sym">) '(</span>#\H . <span class="num">0.02</span><span class="sym">) '(</span>#\K . <span class="num">0.02</span><span class="sym">) '(</span>#\M . <span class="num">0.02</span><span class="sym">) '(</span>#\N . <span class="num">0.02</span><span class="sym">)</span>
    <span class="sym">'(</span>#\R . <span class="num">0.02</span><span class="sym">) '(</span>#\S . <span class="num">0.02</span><span class="sym">) '(</span>#\V . <span class="num">0.02</span><span class="sym">) '(</span>#\W . <span class="num">0.02</span><span class="sym">) '(</span>#\Y . <span class="num">0.02</span><span class="sym">)))</span>

<span class="sym">(</span>define<span class="sym">-</span>constant <span class="sym">+</span>homosapien<span class="sym">+</span>
  <span class="sym">(</span><span class="kwa">list</span>
    <span class="sym">'(</span>#\a . <span class="num">0.3029549426680</span><span class="sym">) '(</span>#\c . <span class="num">0.1979883004921</span><span class="sym">)</span>
    <span class="sym">'(</span>#\g . <span class="num">0.1975473066391</span><span class="sym">) '(</span>#\t . <span class="num">0.3015094502008</span><span class="sym">)))</span>

<span class="slc">; -------------</span>

<span class="sym">(</span>define<span class="sym">-</span>constant <span class="sym">+</span><span class="kwa">line</span><span class="sym">-</span>size<span class="sym">+</span> <span class="num">60</span><span class="sym">)</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>make<span class="sym">-</span>random seed<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>ia <span class="num">3877</span><span class="sym">) (</span>ic <span class="num">29573</span><span class="sym">) (</span>im <span class="num">139968</span><span class="sym">) (</span><span class="kwa">last</span> seed<span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span><span class="kwa">max</span><span class="sym">)</span>
      <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> <span class="kwa">last</span> <span class="sym">(</span>modulo <span class="sym">(+</span> ic <span class="sym">(*</span> <span class="kwa">last</span> ia<span class="sym">))</span> im<span class="sym">))</span>
      <span class="sym">(/ (*</span> <span class="kwa">max last</span><span class="sym">)</span> im<span class="sym">) )))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>make<span class="sym">-</span>cumulative<span class="sym">-</span>table frequency<span class="sym">-</span>table<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>cumulative <span class="num">0.0</span><span class="sym">))</span>
    <span class="sym">(</span>map<span class="sym">-</span>in<span class="sym">-</span>order
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>x<span class="sym">) (</span><span class="kwa">set</span><span class="sym">!</span> cumulative <span class="sym">(+</span> cumulative <span class="sym">(</span><span class="kwa">cdr</span> x<span class="sym">))) (</span><span class="kwa">cons</span> <span class="sym">(</span><span class="kwa">car</span> x<span class="sym">)</span> cumulative<span class="sym">))</span>
      frequency<span class="sym">-</span>table<span class="sym">)))</span>

<span class="slc">; -------------</span>

<span class="sym">(</span>define <span class="sym">(</span>make<span class="sym">-</span>fasta<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>random<span class="sym">-</span>next <span class="sym">(</span>make<span class="sym">-</span>random <span class="num">42</span><span class="sym">)) (+</span>segmarker<span class="sym">+</span> <span class="str">&quot;&gt;&quot;</span><span class="sym">)</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span>select<span class="sym">-</span>random
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>cumulative<span class="sym">-</span>table<span class="sym">)</span>
        <span class="sym">(</span>let <span class="sym">((</span>rvalue <span class="sym">(</span>random<span class="sym">-</span>next <span class="num">1.0</span><span class="sym">)))</span>
          <span class="sym">(</span>let loop <span class="sym">((</span>table cumulative<span class="sym">-</span>table<span class="sym">))</span>
            <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;=</span> rvalue <span class="sym">(</span>cdar table<span class="sym">)) (</span><span class="kwa">caar</span> table<span class="sym">)</span>
            <span class="slc">; else</span>
            <span class="sym">(</span>loop <span class="sym">(</span><span class="kwa">cdr</span> table<span class="sym">)) )))))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span><span class="kwa">repeat</span><span class="sym">-</span>fasta
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>id desc n_ sequence <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
        <span class="sym">(</span>let <span class="sym">((</span>seqlen <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> sequence<span class="sym">)) (</span>k <span class="num">0</span><span class="sym">))</span>
          <span class="sym">(</span>display <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span> <span class="sym">+</span>segmarker<span class="sym">+</span> id <span class="str">&quot; &quot;</span> desc <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">))</span>
          <span class="sym">(</span>let loop<span class="sym">-</span>o <span class="sym">((</span>n n_<span class="sym">))</span>
            <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;=</span> n <span class="num">0</span><span class="sym">) '()</span>
            <span class="slc">; else</span>
            <span class="sym">(</span>let <span class="sym">((</span>m <span class="sym">(</span><span class="kwa">min</span> n <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)))</span>
              <span class="sym">(</span>let loop<span class="sym">-</span>i <span class="sym">((</span>i <span class="num">0</span><span class="sym">))</span>
                <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;=</span> i m<span class="sym">) '()</span>
                <span class="slc">; else</span>
                <span class="sym">(</span>begin
                  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> k seqlen<span class="sym">) (</span><span class="kwa">set</span><span class="sym">!</span> k <span class="num">0</span><span class="sym">))</span>
                  <span class="sym">(</span>display <span class="sym">(</span>integer<span class="sym">-&gt;</span>char <span class="sym">(</span>byte<span class="sym">-</span>vector<span class="sym">-</span>ref sequence k<span class="sym">)))</span>
                  <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> k <span class="sym">(</span>add1 k<span class="sym">))</span>
                  <span class="sym">(</span>loop<span class="sym">-</span>i <span class="sym">(</span>add1 i<span class="sym">)) )))</span>
                <span class="sym">(</span>newline<span class="sym">)</span>
                <span class="sym">(</span>loop<span class="sym">-</span>o <span class="sym">(-</span> n <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)) ))) )))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span>random<span class="sym">-</span>fasta
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>id desc n_ cumulative<span class="sym">-</span>table <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
        <span class="sym">(</span>display <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span> <span class="sym">+</span>segmarker<span class="sym">+</span> id <span class="str">&quot; &quot;</span> desc <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">))</span>
        <span class="sym">(</span>let loop<span class="sym">-</span>o <span class="sym">((</span>n n_<span class="sym">))</span>
          <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;=</span> n <span class="num">0</span><span class="sym">) '()</span>
          <span class="slc">; else</span>
          <span class="sym">(</span>let <span class="sym">((</span>m <span class="sym">(</span><span class="kwa">min</span> n <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)))</span>
            <span class="sym">(</span>let loop<span class="sym">-</span>i <span class="sym">((</span>i <span class="num">0</span><span class="sym">))</span>
              <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;=</span> i m<span class="sym">) '()</span>
              <span class="slc">; else</span>
              <span class="sym">(</span>begin
                <span class="sym">(</span>display <span class="sym">(</span>select<span class="sym">-</span>random cumulative<span class="sym">-</span>table<span class="sym">))</span>
                <span class="sym">(</span>loop<span class="sym">-</span>i <span class="sym">(</span>add1 i<span class="sym">)) )))</span>
              <span class="sym">(</span>newline<span class="sym">)</span>
              <span class="sym">(</span>loop<span class="sym">-</span>o <span class="sym">(-</span> n <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)) ))) )))</span>

    <span class="slc">; -------------</span>

    <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>op<span class="sym">)</span>
      <span class="sym">(</span><span class="kwa">cond</span>
        <span class="sym">((</span><span class="kwa">eq</span>? op <span class="sym">'</span><span class="kwa">repeat</span><span class="sym">)</span> <span class="kwa">repeat</span><span class="sym">-</span>fasta<span class="sym">)</span>
        <span class="sym">((</span><span class="kwa">eq</span>? op <span class="sym">'</span>random<span class="sym">)</span> random<span class="sym">-</span>fasta<span class="sym">)</span>
        <span class="sym">(</span>else <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">() (</span>display <span class="str">&quot;*** make-fasta:invalid operation ***</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">))))) ))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span><span class="kwa">repeat</span><span class="sym">-</span>fasta fasta id desc n sequence <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">apply</span> <span class="sym">(</span>fasta <span class="sym">'</span><span class="kwa">repeat</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">list</span> id desc n sequence <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)))</span>

<span class="slc">; -------------</span>

<span class="sym">(</span>define <span class="sym">(</span>random<span class="sym">-</span>fasta fasta id desc n cumulative<span class="sym">-</span>table <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">apply</span> <span class="sym">(</span>fasta <span class="sym">'</span>random<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">list</span> id desc n cumulative<span class="sym">-</span>table <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? args<span class="sym">)</span>
               <span class="num">1</span>
               <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">car</span> args<span class="sym">))))</span>

    <span class="sym">(</span>fasta <span class="sym">(</span>make<span class="sym">-</span>fasta<span class="sym">)))</span>

    <span class="sym">(</span><span class="kwa">repeat</span><span class="sym">-</span>fasta fasta
      <span class="str">&quot;ONE&quot;</span> <span class="str">&quot;Homo sapiens alu&quot;</span> <span class="sym">(*</span> n <span class="num">2</span><span class="sym">) +</span>alu<span class="sym">+ +</span><span class="kwa">line</span><span class="sym">-</span>size<span class="sym">+)</span>

    <span class="sym">(</span>random<span class="sym">-</span>fasta fasta
      <span class="str">&quot;TWO&quot;</span> <span class="str">&quot;IUB ambiguity codes&quot;</span> <span class="sym">(*</span> n <span class="num">3</span><span class="sym">)</span>
      <span class="sym">(</span>make<span class="sym">-</span>cumulative<span class="sym">-</span>table <span class="sym">+</span>iub<span class="sym">+) +</span><span class="kwa">line</span><span class="sym">-</span>size<span class="sym">+)</span>

    <span class="sym">(</span>random<span class="sym">-</span>fasta fasta
      <span class="str">&quot;THREE&quot;</span> <span class="str">&quot;Homo sapiens frequency&quot;</span> <span class="sym">(*</span> n <span class="num">5</span><span class="sym">)</span>
      <span class="sym">(</span>make<span class="sym">-</span>cumulative<span class="sym">-</span>table <span class="sym">+</span>homosapien<span class="sym">+) +</span><span class="kwa">line</span><span class="sym">-</span>size<span class="sym">+) ))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>

