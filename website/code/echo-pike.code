<span class="dir">#!/usr/bin/pike</span>
<span class="slc">// -*- mode: pike -*-</span>
<span class="slc">// $Id: echo-pike.code,v 1.7 2005-12-31 16:45:33 bfulgham Exp $</span>
<span class="slc">// http://www.bagley.org/~doug/shootout/</span>
<span class="slc">// based on code from: Per Hedbor</span>

<span class="dir">#define DATA</span> <span class="dstr">&quot;Hello there sailor</span><span class="esc">\n</span><span class="dstr">&quot;</span><span class="dir"></span>

<span class="kwb">void</span> <span class="kwd">echo_server</span><span class="sym">(</span>Stdio.Port p<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">) {</span>
    Stdio.File f <span class="sym">=</span> p<span class="sym">-&gt;</span><span class="kwd">accept</span><span class="sym">();</span>
    <span class="kwb">int</span> tbytes<span class="sym">;</span>
    <span class="kwb">string</span> q<span class="sym">;</span>
    <span class="kwd">while</span><span class="sym">( (</span>q <span class="sym">=</span> f<span class="sym">-&gt;</span><span class="kwd">read</span><span class="sym">(</span> <span class="num">8192</span><span class="sym">,</span><span class="num">1</span>  <span class="sym">)) &amp;&amp;</span> <span class="kwa">strlen</span><span class="sym">(</span> q <span class="sym">) ) {</span>
	tbytes <span class="sym">+=</span> <span class="kwa">strlen</span><span class="sym">(</span>q<span class="sym">);</span>
	f<span class="sym">-&gt;</span><span class="kwa">write</span><span class="sym">(</span> q <span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwa">write</span><span class="sym">(</span> <span class="str">&quot;server processed %d bytes</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> tbytes <span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">echo_client</span><span class="sym">(</span><span class="kwb">int</span> p<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">) {</span>
    <span class="kwb">int</span> i<span class="sym">;</span>
    Stdio.File f <span class="sym">=</span> Stdio.<span class="kwd">File</span><span class="sym">();</span>

    f<span class="sym">-&gt;</span><span class="kwd">connect</span><span class="sym">(</span> <span class="str">&quot;localhost&quot;</span><span class="sym">,</span> p <span class="sym">);</span>
    <span class="kwb">int</span> s <span class="sym">=</span> <span class="kwa">strlen</span><span class="sym">(</span>DATA<span class="sym">);</span>
    <span class="kwd">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
	f<span class="sym">-&gt;</span><span class="kwa">write</span><span class="sym">(</span> DATA <span class="sym">);</span>
	<span class="kwd">if</span><span class="sym">(</span>  f<span class="sym">-&gt;</span><span class="kwd">read</span><span class="sym">(</span> s <span class="sym">) !=</span> DATA <span class="sym">) {</span>
	    <span class="kwa">werror</span><span class="sym">(</span> <span class="str">&quot;Transfer error at repetition &quot;</span><span class="sym">+</span>i<span class="sym">+</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>
	    <span class="kwa">_exit</span><span class="sym">(</span> <span class="num">1</span> <span class="sym">);</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
    f<span class="sym">-&gt;</span><span class="kwd">close</span><span class="sym">();</span>
    <span class="kwa">_exit</span><span class="sym">(</span> <span class="num">0</span> <span class="sym">);</span>
<span class="sym">}</span>

<span class="com">/* Fork is not really available in a threaded pike. Thus this hack. It</span>
<span class="com"> * assumes the pike binary can be found in your path, and that you have</span>
<span class="com"> * a /usr/bin/env</span>
<span class="com"> */</span>
<span class="kwb">void</span> <span class="kwd">start_client</span><span class="sym">(</span> <span class="kwb">int</span> p<span class="sym">,</span> <span class="kwb">int</span> n <span class="sym">)</span>
<span class="sym">{</span>
    Process.<span class="kwd">create_process</span><span class="sym">( ({</span> <span class="str">&quot;/usr/bin/env&quot;</span><span class="sym">,</span> <span class="str">&quot;pike&quot;</span><span class="sym">,</span> __FILE__<span class="sym">,</span>
			       <span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span>p<span class="sym">, (</span><span class="kwb">string</span><span class="sym">)</span>n <span class="sym">}) );</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span> argv<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwd">if</span><span class="sym">(</span> argc <span class="sym">&lt;</span> <span class="num">3</span> <span class="sym">)</span>
    <span class="sym">{</span>
	<span class="kwb">int</span> n <span class="sym">=</span> <span class="kwa">max</span><span class="sym">((</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[-</span><span class="num">1</span><span class="sym">],</span><span class="num">1</span><span class="sym">);</span>
	Stdio.Port p <span class="sym">=</span> Stdio.<span class="kwd">Port</span><span class="sym">(</span> <span class="num">0</span> <span class="sym">);</span>
	<span class="kwb">int</span> pno <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)((</span>p<span class="sym">-&gt;</span><span class="kwd">query_address</span><span class="sym">( )/</span><span class="str">&quot; &quot;</span><span class="sym">)[</span><span class="num">1</span><span class="sym">]);</span>
	<span class="kwd">start_client</span><span class="sym">(</span> pno<span class="sym">,</span> n <span class="sym">);</span>
	<span class="kwd">echo_server</span><span class="sym">(</span> p<span class="sym">,</span> n <span class="sym">);</span>
    <span class="sym">}</span> else <span class="sym">{</span>
	<span class="kwd">echo_client</span><span class="sym">( (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">], (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[</span><span class="num">2</span><span class="sym">] );</span>
    <span class="sym">}</span>
    <span class="kwa">sleep</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
<span class="sym">}</span>
