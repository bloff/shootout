<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/<B><FONT COLOR="#5F9EA0">usr/bin/pike</FONT></B>
<I><FONT COLOR="#B22222">// -*- mode: pike -*-
</FONT></I><I><FONT COLOR="#B22222">// $Id: echo-pike.code,v 1.1 2004-11-02 08:52:30 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">// based on code from: Per Hedbor
</FONT></I>
#<B><FONT COLOR="#5F9EA0">define</FONT></B> <FONT COLOR="#B8860B">DATA</FONT> <B><FONT COLOR="#BC8F8F">&quot;Hello there sailor\n&quot;</FONT></B>

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">echo_server</FONT></B>(Stdio.Port p, <B><FONT COLOR="#228B22">int</FONT></B> n) {
    Stdio.File f = p-&gt;accept();
    <B><FONT COLOR="#228B22">int</FONT></B> tbytes;
    string q;
    <B><FONT COLOR="#A020F0">while</FONT></B>( (q = f-&gt;read( 8192,1  )) &amp;&amp; strlen( q ) ) {
	tbytes += strlen(q);
	f-&gt;write( q );
    }
    write( <B><FONT COLOR="#BC8F8F">&quot;server processed %d bytes\n&quot;</FONT></B>, tbytes );
}

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">echo_client</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> p, <B><FONT COLOR="#228B22">int</FONT></B> n) {
    <B><FONT COLOR="#228B22">int</FONT></B> i;
    Stdio.File f = Stdio.File();

    f-&gt;connect( <B><FONT COLOR="#BC8F8F">&quot;localhost&quot;</FONT></B>, p );
    <B><FONT COLOR="#228B22">int</FONT></B> s = strlen(DATA);
    <B><FONT COLOR="#A020F0">for</FONT></B> (i=0; i&lt;n; i++) {
	f-&gt;write( DATA );
	<B><FONT COLOR="#A020F0">if</FONT></B>(  f-&gt;read( s ) != DATA ) {
	    werror( <B><FONT COLOR="#BC8F8F">&quot;Transfer error at repetition &quot;</FONT></B>+i+<B><FONT COLOR="#BC8F8F">&quot;\n&quot;</FONT></B>);
	    _exit( 1 );
	}
    }
    f-&gt;close();
    _exit( 0 );
}

<I><FONT COLOR="#B22222">/* Fork is not really available in a threaded pike. Thus this hack. It
 * assumes the pike binary can be found in your path, and that you have
 * a /usr/bin/env
 */</FONT></I>
<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">start_client</FONT></B>( <B><FONT COLOR="#228B22">int</FONT></B> p, <B><FONT COLOR="#228B22">int</FONT></B> n )
{
    Process.create_process( ({ <B><FONT COLOR="#BC8F8F">&quot;/usr/bin/env&quot;</FONT></B>, <B><FONT COLOR="#BC8F8F">&quot;pike&quot;</FONT></B>, __FILE__,
			       (string)p, (string)n }) );
}

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">main</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> argc, array argv)
{
    <B><FONT COLOR="#A020F0">if</FONT></B>( argc &lt; 3 )
    {
	<B><FONT COLOR="#228B22">int</FONT></B> n = max((<B><FONT COLOR="#228B22">int</FONT></B>)argv[-1],1);
	Stdio.Port p = Stdio.Port( 0 );
	<B><FONT COLOR="#228B22">int</FONT></B> pno = (<B><FONT COLOR="#228B22">int</FONT></B>)((p-&gt;query_address( )/<B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>)[1]);
	start_client( pno, n );
	echo_server( p, n );
    } <B><FONT COLOR="#A020F0">else</FONT></B> {
	echo_client( (<B><FONT COLOR="#228B22">int</FONT></B>)argv[1], (<B><FONT COLOR="#228B22">int</FONT></B>)argv[2] );
    }
    sleep(1);
}</pre></td></tr></table>
