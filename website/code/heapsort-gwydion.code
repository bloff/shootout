<span class="kwb">module</span><span class="sym">:</span>    heapsort
<span class="kwb">synopsis</span><span class="sym">:</span>  implementation of <span class="str">&quot;Heapsort&quot;</span> benchmark
<span class="kwb">author</span><span class="sym">:</span>    Peter Hinely
<span class="kwb">copyright</span><span class="sym">:</span> public <span class="kwa">domain</span>


<span class="kwa">define constant</span> $IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;</span>
<span class="kwa">define constant</span> $IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;</span>
<span class="kwa">define constant</span> $IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;</span>


<span class="slc">// utilize Dylan's cool closure functionality to keep the state of the &quot;last&quot; variable</span>
<span class="kwa">define function</span> random<span class="sym">-</span><span class="kwd">generator</span> <span class="sym">(</span>seed <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; random<span class="sym">-</span>generator <span class="sym">::</span> <span class="kwa">&lt;method&gt;</span><span class="sym">;</span>
  <span class="kwa">let</span> last <span class="sym">=</span> seed<span class="sym">;</span>

  <span class="kwa">method</span> <span class="sym">(</span>maximum <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">) =</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">;</span>
    last <span class="sym">:=</span> <span class="kwd">modulo</span><span class="sym">((</span>last <span class="sym">*</span> $IA <span class="sym">+</span> $IC<span class="sym">),</span> $IM<span class="sym">);</span>
    maximum <span class="sym">*</span> last <span class="sym">/</span> $IM<span class="sym">;</span>
  <span class="kwa">end</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>


<span class="kwa">define constant</span> <span class="kwa">&lt;vector-of-doubles&gt;</span> <span class="sym">=</span> <span class="kwd">limited</span><span class="sym">(</span><span class="kwa">&lt;simple-vector&gt;</span><span class="sym">,</span> of<span class="sym">:</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">);</span>


<span class="kwa">define function</span> <span class="kwd">heapsort</span> <span class="sym">(</span>n <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> ra <span class="sym">::</span> <span class="kwa">&lt;vector-of-doubles&gt;</span><span class="sym">) =</span>&gt; <span class="sym">()</span>
  <span class="kwa">block</span> <span class="sym">(</span>return<span class="sym">)</span>
    <span class="kwa">let</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">let</span> ir <span class="sym">=</span> n<span class="sym">;</span>
    <span class="kwa">let</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">let</span> l <span class="sym">=</span> <span class="kwd">ash</span><span class="sym">(</span>n<span class="sym">, -</span><span class="num">1</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwa">let</span> rra <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(</span>#t<span class="sym">)</span>
      <span class="kwa">if</span> <span class="sym">(</span>l &gt; <span class="num">1</span><span class="sym">)</span>
        l <span class="sym">:=</span> l <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
        rra <span class="sym">:=</span> ra<span class="sym">[</span>l<span class="sym">];</span>
      <span class="kwa">else</span>
        rra <span class="sym">:=</span> ra<span class="sym">[</span>ir<span class="sym">];</span>
        ra<span class="sym">[</span>ir<span class="sym">] :=</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
        ir <span class="sym">:=</span> ir <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">(</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span>
          ra<span class="sym">[</span><span class="num">1</span><span class="sym">] :=</span> rra<span class="sym">;</span>
          <span class="kwd">return</span><span class="sym">();</span>
        <span class="kwa">end if</span><span class="sym">;</span>
      <span class="kwa">end if</span><span class="sym">;</span>
      i <span class="sym">:=</span> l<span class="sym">;</span>
      j <span class="sym">:=</span> <span class="kwd">ash</span><span class="sym">(</span>l<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
      <span class="kwa">while</span> <span class="sym">(</span>j <span class="kwa">&lt;= ir)</span>
        <span class="kwa">if</span> <span class="sym">((</span>j <span class="kwa">&lt; ir) &amp; (ra[j] &lt; ra[j +</span> <span class="num">1</span><span class="kwa">]))</span>
          j <span class="sym">:=</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
        <span class="kwa">end if</span><span class="sym">;</span>
        <span class="kwa">if</span> <span class="sym">(</span>rra <span class="kwa">&lt; ra[j])</span>
          ra<span class="sym">[</span>i<span class="sym">] :=</span> ra<span class="sym">[</span>j<span class="sym">];</span>
          i <span class="sym">:=</span> j<span class="sym">;</span>
          j <span class="sym">:=</span> j <span class="sym">+</span> i<span class="sym">;</span>
        <span class="kwa">else</span>
          j <span class="sym">:=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
        <span class="kwa">end if</span><span class="sym">;</span>
      <span class="kwa">end while</span><span class="sym">;</span>
      ra<span class="sym">[</span>i<span class="sym">] :=</span> rra<span class="sym">;</span>
    <span class="kwa">end while</span><span class="sym">;</span>
  <span class="kwa">end block</span><span class="sym">;</span>
<span class="kwa">end function</span> heapsort<span class="sym">;</span>


<span class="kwa">define function</span> <span class="kwd">main</span> <span class="sym">()</span>
  <span class="kwa">let</span> N <span class="sym">=</span> string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span><span class="kwd">integer</span><span class="sym">(</span><span class="kwd">element</span><span class="sym">(</span>application<span class="sym">-</span><span class="kwd">arguments</span><span class="sym">(),</span> <span class="num">0</span><span class="sym">,</span> default<span class="sym">:</span> <span class="str">&quot;2&quot;</span><span class="sym">));</span>

  <span class="kwa">let</span> array <span class="sym">=</span> <span class="kwd">make</span><span class="sym">(</span><span class="kwa">&lt;vector-of-doubles&gt;</span><span class="sym">,</span> size<span class="sym">:</span> N <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
  <span class="kwa">let</span> generate<span class="sym">-</span>random <span class="sym">=</span> random<span class="sym">-</span><span class="kwd">generator</span><span class="sym">(</span><span class="num">42</span><span class="sym">);</span>

  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> N<span class="sym">)</span>
    array<span class="sym">[</span>i<span class="sym">] :=</span> generate<span class="sym">-</span><span class="kwd">random</span><span class="sym">(</span><span class="num">1.0</span>d0<span class="sym">);</span>
  <span class="kwa">end</span><span class="sym">;</span>

  <span class="kwd">heapsort</span><span class="sym">(</span>N<span class="sym">,</span> array<span class="sym">);</span>

  <span class="slc">// this is truly horrid.  Sorry.</span>
  <span class="kwa">let</span> <span class="sym">(</span>int<span class="sym">,</span> frac<span class="sym">) =</span> <span class="kwd">truncate</span><span class="sym">(</span>array<span class="sym">[</span>N<span class="sym">]);</span>
  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;%d.&quot;</span><span class="sym">,</span> int<span class="sym">);</span>
  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">below</span> <span class="num">10</span><span class="sym">)</span>
    <span class="kwa">let</span> <span class="sym">(</span>int<span class="sym">,</span> frac2<span class="sym">) =</span> <span class="kwd">truncate</span><span class="sym">(</span>frac <span class="sym">*</span> <span class="num">10</span><span class="sym">);</span>
    frac <span class="sym">:=</span> frac2<span class="sym">;</span>
    format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;%d&quot;</span><span class="sym">,</span> int<span class="sym">);</span>
  <span class="kwa">end</span><span class="sym">;</span>
  format<span class="sym">-</span><span class="kwd">out</span><span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwd">round</span><span class="sym">(</span>frac <span class="sym">*</span> <span class="num">10</span><span class="sym">));</span>
<span class="kwa">end function</span> main<span class="sym">;</span>


<span class="kwd">main</span><span class="sym">();</span>
