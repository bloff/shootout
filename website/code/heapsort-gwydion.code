<span class="line">    1 </span><span class="kwb">module</span><span class="sym">:</span>    heapsort
<span class="line">    2 </span><span class="kwb">synopsis</span><span class="sym">:</span>  implementation of <span class="str">&quot;Heapsort&quot;</span> benchmark
<span class="line">    3 </span><span class="kwb">author</span><span class="sym">:</span>    Peter Hinely
<span class="line">    4 </span><span class="kwb">copyright</span><span class="sym">:</span> public <span class="kwa">domain
</span><span class="line">    5 </span><span class="kwa">
</span><span class="line">    6 </span><span class="kwa">
</span><span class="line">    7 </span><span class="kwa">define constant</span> $IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">;
</span><span class="line">    8 </span><span class="sym"></span><span class="kwa">define constant</span> $IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">;
</span><span class="line">    9 </span><span class="sym"></span><span class="kwa">define constant</span> $IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">;
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym">
</span><span class="line">   12 </span><span class="sym"></span><span class="slc">// use a closure to keep the state of the &quot;last&quot; variable
</span><span class="line">   13 </span><span class="slc"></span><span class="kwa">define function</span> random<span class="sym">-</span>generator <span class="sym">(</span>seed <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; random<span class="sym">-</span>generator <span class="sym">::</span> <span class="kwa">&lt;method&gt;</span><span class="sym">;
</span><span class="line">   14 </span><span class="sym"></span>  <span class="kwa">let</span> last <span class="sym">=</span> seed<span class="sym">;
</span><span class="line">   15 </span><span class="sym">
</span><span class="line">   16 </span><span class="sym"></span>  <span class="kwa">method</span> <span class="sym">(</span>maximum <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">) =</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">;
</span><span class="line">   17 </span><span class="sym"></span>    last <span class="sym">:=</span> modulo<span class="sym">((</span>last <span class="sym">*</span> $IA <span class="sym">+</span> $IC<span class="sym">),</span> $IM<span class="sym">);
</span><span class="line">   18 </span><span class="sym"></span>    maximum <span class="sym">*</span> last <span class="sym">/</span> $IM<span class="sym">;
</span><span class="line">   19 </span><span class="sym"></span>  <span class="kwa">end</span><span class="sym">;
</span><span class="line">   20 </span><span class="sym"></span><span class="kwa">end</span><span class="sym">;
</span><span class="line">   21 </span><span class="sym">
</span><span class="line">   22 </span><span class="sym">
</span><span class="line">   23 </span><span class="sym"></span><span class="kwa">define constant</span> <span class="kwa">&lt;vector-of-doubles&gt;</span> <span class="sym">=</span> limited<span class="sym">(</span><span class="kwa">&lt;simple-vector&gt;</span><span class="sym">,</span> of<span class="sym">:</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">);
</span><span class="line">   24 </span><span class="sym">
</span><span class="line">   25 </span><span class="sym">
</span><span class="line">   26 </span><span class="sym"></span><span class="kwa">define function</span> heapsort <span class="sym">(</span>n <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> ra <span class="sym">::</span> <span class="kwa">&lt;vector-of-doubles&gt;</span><span class="sym">) =</span>&gt; <span class="sym">()
</span><span class="line">   27 </span><span class="sym"></span>  <span class="kwa">block</span> <span class="sym">(</span>return<span class="sym">)
</span><span class="line">   28 </span><span class="sym"></span>    <span class="kwa">let</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>    <span class="kwa">let</span> ir <span class="sym">=</span> n<span class="sym">;
</span><span class="line">   30 </span><span class="sym"></span>    <span class="kwa">let</span> j <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   31 </span><span class="sym"></span>    <span class="kwa">let</span> l <span class="sym">=</span> ash<span class="sym">(</span>n<span class="sym">, -</span><span class="num">1</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   32 </span><span class="sym"></span>    <span class="kwa">let</span> rra <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="line">   33 </span><span class="sym">
</span><span class="line">   34 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">(</span>#t<span class="sym">)
</span><span class="line">   35 </span><span class="sym"></span>      <span class="kwa">if</span> <span class="sym">(</span>l &gt; <span class="num">1</span><span class="sym">)
</span><span class="line">   36 </span><span class="sym"></span>        l <span class="sym">:=</span> l <span class="num">- 1</span><span class="sym">;
</span><span class="line">   37 </span><span class="sym"></span>        rra <span class="sym">:=</span> ra<span class="sym">[</span>l<span class="sym">];
</span><span class="line">   38 </span><span class="sym"></span>      <span class="kwa">else
</span><span class="line">   39 </span><span class="kwa"></span>        rra <span class="sym">:=</span> ra<span class="sym">[</span>ir<span class="sym">];
</span><span class="line">   40 </span><span class="sym"></span>        ra<span class="sym">[</span>ir<span class="sym">] :=</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">];
</span><span class="line">   41 </span><span class="sym"></span>        ir <span class="sym">:=</span> ir <span class="num">- 1</span><span class="sym">;
</span><span class="line">   42 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">)
</span><span class="line">   43 </span><span class="sym"></span>          ra<span class="sym">[</span><span class="num">1</span><span class="sym">] :=</span> rra<span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>          return<span class="sym">();
</span><span class="line">   45 </span><span class="sym"></span>        <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   46 </span><span class="sym"></span>      <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   47 </span><span class="sym"></span>      i <span class="sym">:=</span> l<span class="sym">;
</span><span class="line">   48 </span><span class="sym"></span>      j <span class="sym">:=</span> ash<span class="sym">(</span>l<span class="sym">,</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   49 </span><span class="sym"></span>      <span class="kwa">while</span> <span class="sym">(</span>j <span class="kwa">&lt;= ir)
</span><span class="line">   50 </span><span class="sym">        if ((j &lt; ir) &amp; (ra[j] &lt; ra[j +</span> <span class="num">1</span><span class="kwa">]))
</span><span class="line">   51 </span><span class="kwa">          j := j +</span> <span class="num">1</span><span class="kwa">;
</span><span class="line">   52 </span><span class="kwa">        end if;
</span><span class="line">   53 </span><span class="kwa">        if (rra &lt; ra[j])
</span><span class="line">   54 </span><span class="sym">          ra[i] := ra[j];
</span><span class="line">   55 </span><span class="sym">          i := j;
</span><span class="line">   56 </span><span class="sym">          j := j + i;
</span><span class="line">   57 </span><span class="sym">        else
</span><span class="line">   58 </span><span class="kwa">          j := ir +</span> <span class="num">1</span><span class="kwa">;
</span><span class="line">   59 </span><span class="kwa">        end if;
</span><span class="line">   60 </span><span class="kwa">      end while;
</span><span class="line">   61 </span><span class="kwa">      ra[i] := rra;
</span><span class="line">   62 </span><span class="sym">    end while;
</span><span class="line">   63 </span><span class="kwa">  end block;
</span><span class="line">   64 </span><span class="kwa">end function heapsort;
</span><span class="line">   65 </span><span class="sym">
</span><span class="line">   66 </span><span class="sym">
</span><span class="line">   67 </span><span class="sym">define function main ()
</span><span class="line">   68 </span><span class="sym">  let N = string-to-integer(element(application-arguments(),</span> <span class="num">0</span><span class="kwa">, default:</span> <span class="str">&quot;2&quot;</span><span class="kwa">));
</span><span class="line">   69 </span><span class="kwa">
</span><span class="line">   70 </span><span class="kwa">  let array = make(&lt;vector-of-doubles&gt;</span><span class="sym">,</span> size<span class="sym">:</span> N <span class="sym">+</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   71 </span><span class="sym"></span>  <span class="kwa">let</span> generate<span class="sym">-</span>random <span class="sym">=</span> random<span class="sym">-</span>generator<span class="sym">(</span><span class="num">42</span><span class="sym">);
</span><span class="line">   72 </span><span class="sym">
</span><span class="line">   73 </span><span class="sym"></span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> N<span class="sym">)
</span><span class="line">   74 </span><span class="sym"></span>    array<span class="sym">[</span>i<span class="sym">] :=</span> generate<span class="sym">-</span>random<span class="sym">(</span><span class="num">1.0</span><span class="sym">);
</span><span class="line">   75 </span><span class="sym"></span>  <span class="kwa">end</span><span class="sym">;
</span><span class="line">   76 </span><span class="sym">
</span><span class="line">   77 </span><span class="sym"></span>  heapsort<span class="sym">(</span>N<span class="sym">,</span> array<span class="sym">);
</span><span class="line">   78 </span><span class="sym">
</span><span class="line">   79 </span><span class="sym"></span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;%=</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> array<span class="sym">[</span>N<span class="sym">]);
</span><span class="line">   80 </span><span class="sym"></span><span class="kwa">end function</span> main<span class="sym">;
</span><span class="line">   81 </span><span class="sym">
</span><span class="line">   82 </span><span class="sym">
</span><span class="line">   83 </span><span class="sym"></span>main<span class="sym">();</span>
