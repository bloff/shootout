<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
module:    heapsort
synopsis:  implementation of <B><FONT COLOR="#BC8F8F">&quot;Heapsort&quot;</FONT></B> benchmark
author:    Peter Hinely
copyright: public <B><FONT COLOR="#5F9EA0">domain</FONT></B>


<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#5F9EA0">constant</FONT></B> $IM = 139968;
<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#5F9EA0">constant</FONT></B> $IA = 3877;
<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#5F9EA0">constant</FONT></B> $IC = 29573;


<I><FONT COLOR="#B22222">// use a closure to keep the state of the &quot;last&quot; variable
</FONT></I><B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B> <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">random-generator </FONT></I></B></FONT></B>(seed <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;integer&gt;</FONT></B>) <B><FONT COLOR="#A020F0">=&gt;</FONT></B> random-generator <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;method&gt;</FONT></B>;
  <B><FONT COLOR="#A020F0">let</FONT></B> last = seed;

  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">method </FONT></I></B></FONT></B>(maximum <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;double-float&gt;</FONT></B>) <B><FONT COLOR="#A020F0">=&gt;</FONT></B> result <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;double-float&gt;</FONT></B>;
    last <B><FONT COLOR="#5F9EA0">:</FONT></B>= <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">modulo(</FONT></I></B></FONT></B>(last * $IA + $IC), $IM);
    maximum * last / $IM;
  <B><FONT COLOR="#A020F0">end</FONT></B>;
<B><FONT COLOR="#A020F0">end</FONT></B>;


<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#5F9EA0">constant</FONT></B> <B><FONT COLOR="#228B22">&lt;vector-of-doubles&gt;</FONT></B> = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">limited</FONT></I></B></FONT></B>(<B><FONT COLOR="#228B22">&lt;simple-vector&gt;</FONT></B>, <B><FONT COLOR="#5F9EA0">of:</FONT></B> <B><FONT COLOR="#228B22">&lt;double-float&gt;</FONT></B>);


<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B> <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">heapsort </FONT></I></B></FONT></B>(n <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;integer&gt;</FONT></B>, ra <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;vector-of-doubles&gt;</FONT></B>) <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">=&gt;</FONT></I></B></FONT></B> ()
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">block </FONT></I></B></FONT></B>(return)
    <B><FONT COLOR="#A020F0">let</FONT></B> i = 0;
    <B><FONT COLOR="#A020F0">let</FONT></B> ir = n;
    <B><FONT COLOR="#A020F0">let</FONT></B> j = 0;
    <B><FONT COLOR="#A020F0">let</FONT></B> l = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">ash</FONT></I></B></FONT></B>(n, -1) + 1;
    <B><FONT COLOR="#A020F0">let</FONT></B> rra = 0.0;
    
    <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">while </FONT></I></B></FONT></B>(#t)
      <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">if </FONT></I></B></FONT></B>(l &gt; 1)
        l <B><FONT COLOR="#5F9EA0">:</FONT></B>= l - 1;
        rra <B><FONT COLOR="#5F9EA0">:</FONT></B>= ra[l];
      <B><FONT COLOR="#A020F0">else</FONT></B>
        rra <B><FONT COLOR="#5F9EA0">:</FONT></B>= ra[ir];
        ra[ir] <B><FONT COLOR="#5F9EA0">:</FONT></B>= ra[1];
        ir <B><FONT COLOR="#5F9EA0">:</FONT></B>= ir - 1;
        <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">if </FONT></I></B></FONT></B>(ir == 1)
          ra[1] <B><FONT COLOR="#5F9EA0">:</FONT></B>= rra;
          <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">return</FONT></I></B></FONT></B>();
        <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
      i <B><FONT COLOR="#5F9EA0">:</FONT></B>= l;
      j <B><FONT COLOR="#5F9EA0">:</FONT></B>= <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">ash</FONT></I></B></FONT></B>(l, 1);
      <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">while </FONT></I></B></FONT></B>(j &lt;= ir)
        <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">if </FONT></I></B></FONT></B>((j &lt; ir) <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">&amp; </FONT></I></B></FONT></B>(ra[j] &lt; ra[j + 1]))
          j <B><FONT COLOR="#5F9EA0">:</FONT></B>= j + 1;
        <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
        <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">if </FONT></I></B></FONT></B>(rra &lt; ra[j])
          ra[i] <B><FONT COLOR="#5F9EA0">:</FONT></B>= ra[j];
          i <B><FONT COLOR="#5F9EA0">:</FONT></B>= j;
          j <B><FONT COLOR="#5F9EA0">:</FONT></B>= j + i;
        <B><FONT COLOR="#A020F0">else</FONT></B>
          j <B><FONT COLOR="#5F9EA0">:</FONT></B>= ir + 1;
        <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">while</FONT></B>;
      ra[i] <B><FONT COLOR="#5F9EA0">:</FONT></B>= rra;
    <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">while</FONT></B>;
  <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#5F9EA0">block</FONT></B>;
<B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B> heapsort;


<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B> <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">main </FONT></I></B></FONT></B>()
  <B><FONT COLOR="#A020F0">let</FONT></B> N = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">string-to-integer</FONT></I></B></FONT></B>(<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">element</FONT></I></B></FONT></B>(<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">application-arguments</FONT></I></B></FONT></B>(), 0, <B><FONT COLOR="#5F9EA0">default:</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;2&quot;</FONT></B>));

  <B><FONT COLOR="#A020F0">let</FONT></B> array = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">make</FONT></I></B></FONT></B>(<B><FONT COLOR="#228B22">&lt;vector-of-doubles&gt;</FONT></B>, <B><FONT COLOR="#5F9EA0">size:</FONT></B> N + 1);
  <B><FONT COLOR="#A020F0">let</FONT></B> generate-random = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">random-generator</FONT></I></B></FONT></B>(42);

  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">for </FONT></I></B></FONT></B>(i <B><FONT COLOR="#A020F0">from</FONT></B> 1 <B><FONT COLOR="#A020F0">to</FONT></B> N)
    array[i] <B><FONT COLOR="#5F9EA0">:</FONT></B>= <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">generate-random</FONT></I></B></FONT></B>(1.0);
  <B><FONT COLOR="#A020F0">end</FONT></B>;

  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">heapsort</FONT></I></B></FONT></B>(N, array);

  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">format-out</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;%=\n&quot;</FONT></B>, array[N]);
<B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B> main;


<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">main</FONT></I></B></FONT></B>();</pre></td></tr></table>
