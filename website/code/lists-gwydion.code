<span class="kwb">module</span><span class="sym">:</span>        lists
<span class="kwb">synopsis</span><span class="sym">:</span>      implementation of <span class="str">&quot;List Processing&quot;</span> benchmark
<span class="kwb">author</span><span class="sym">:</span>        Peter Hinely
<span class="kwb">copyright</span><span class="sym">:</span>     public <span class="kwa">domain
use</span><span class="sym">-</span>libraries<span class="sym">:</span>  common<span class="sym">-</span>dylan<span class="sym">,</span> table<span class="sym">-</span>extensions<span class="sym">,</span> io
<span class="kwa">use</span><span class="sym">-</span>modules<span class="sym">:</span>    common<span class="sym">-</span>dylan<span class="sym">,</span> table<span class="sym">-</span>extensions<span class="sym">,</span> format<span class="sym">-</span>out

<span class="kwa">define constant</span> deques <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;deque&gt;</span><span class="sym">);

</span><span class="kwa">define inline function</span> new<span class="sym">-</span>deque<span class="sym">() =</span>&gt; <span class="sym">(</span>deque <span class="sym">::</span> <span class="kwa">&lt;object-deque&gt;</span><span class="sym">);
  (</span>deques.empty? <span class="sym">&amp;</span> make<span class="sym">(</span><span class="kwa">&lt;deque&gt;</span><span class="sym">)) |</span> deques.pop
<span class="kwa">end</span><span class="sym">;

</span><span class="kwa">define inline function</span> save<span class="sym">-</span>deques<span class="sym">(</span>#rest args<span class="sym">)
</span>  <span class="kwa">for</span> <span class="sym">(</span>dq <span class="kwa">in</span> args<span class="sym">)
</span>    dq.size <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>    push<span class="sym">(</span>deques<span class="sym">,</span> dq<span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end</span><span class="sym">;


</span><span class="kwa">define function</span> test<span class="sym">-</span>lists <span class="sym">(</span>items <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">)
</span>  <span class="kwa">let</span> L1 <span class="sym">=</span> new<span class="sym">-</span>deque<span class="sym">();
</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> items<span class="sym">)
</span>    push<span class="sym">-</span>last<span class="sym">(</span>L1<span class="sym">,</span> i<span class="sym">)
</span>  <span class="kwa">end</span><span class="sym">;

</span>  <span class="kwa">let</span> L2 <span class="sym">=</span> new<span class="sym">-</span>deque<span class="sym">();
</span>  <span class="kwa">for</span> <span class="sym">(</span>elt <span class="kwa">in</span> L1<span class="sym">)
</span>    push<span class="sym">-</span>last<span class="sym">(</span>L2<span class="sym">,</span> elt<span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;

</span>  <span class="kwa">let</span> L3 <span class="sym">=</span> new<span class="sym">-</span>deque<span class="sym">();
</span>  <span class="kwa">until</span> <span class="sym">(</span>L2.empty?<span class="sym">)
</span>    push<span class="sym">-</span>last<span class="sym">(</span>L3<span class="sym">,</span> L2.pop<span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;

</span>  <span class="kwa">until</span> <span class="sym">(</span>L3.empty?<span class="sym">)
</span>    push<span class="sym">-</span>last<span class="sym">(</span>L2<span class="sym">,</span> L3.pop<span class="sym">-</span>last<span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;

</span>  L1 <span class="sym">:=</span> reverse<span class="sym">!(</span>L1<span class="sym">);

</span>  <span class="kwa">let</span> result <span class="sym">=</span> L1<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> items
    <span class="sym">&amp;</span> every?<span class="sym">(</span><span class="kwa">method</span><span class="sym">(</span>a <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> b <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">)</span> a <span class="sym">==</span> b <span class="kwa">end</span><span class="sym">,</span> L1<span class="sym">,</span> L2<span class="sym">)
    &amp;</span> L1.size<span class="sym">;

</span>  save<span class="sym">-</span>deques<span class="sym">(</span>L1<span class="sym">,</span> L2<span class="sym">,</span> L3<span class="sym">);
</span>  result<span class="sym">;
</span><span class="kwa">end</span><span class="sym">;


</span><span class="kwa">define function</span> main <span class="sym">()
</span>  <span class="kwa">let</span> iters <span class="sym">=</span> string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">(</span>element<span class="sym">(</span>application<span class="sym">-</span>arguments<span class="sym">(),</span> <span class="num">0</span><span class="sym">,</span> default<span class="sym">:</span> <span class="str">&quot;1&quot;</span><span class="sym">));
</span>  <span class="kwa">let</span> result <span class="sym">=</span> #f<span class="sym">;
</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> iters<span class="sym">)
</span>    result <span class="sym">:=</span> test<span class="sym">-</span>lists<span class="sym">(</span><span class="num">10000</span><span class="sym">)
</span>  <span class="kwa">end</span><span class="sym">;
</span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;%=</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> result<span class="sym">);
</span><span class="kwa">end</span><span class="sym">;


</span>main<span class="sym">();</span>
