<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
module:     lists
synopsis:   implementation of <B><FONT COLOR="#BC8F8F">&quot;List Processing&quot;</FONT></B> benchmark
author:     Peter Hinely
copyright:  public <B><FONT COLOR="#5F9EA0">domain</FONT></B>


<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B> <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">test-lists </FONT></I></B></FONT></B>(number-of-elements <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;integer&gt;</FONT></B>) <B><FONT COLOR="#A020F0">=&gt;</FONT></B> result <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;integer&gt;</FONT></B>;
  <I><FONT COLOR="#B22222">// first create a list (L1) of integers from 1 through SIZE.
</FONT></I>  <B><FONT COLOR="#A020F0">let</FONT></B> L1 = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">make</FONT></I></B></FONT></B>(<B><FONT COLOR="#228B22">&lt;deque&gt;</FONT></B>, <B><FONT COLOR="#5F9EA0">size:</FONT></B> number-of-elements, <B><FONT COLOR="#5F9EA0">data:</FONT></B> <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">range</FONT></I></B></FONT></B>(from: 1, <B><FONT COLOR="#5F9EA0">to:</FONT></B> number-of-elements));

  <I><FONT COLOR="#B22222">// copy L1 to L2 (can use any builtin list copy function, if available)
</FONT></I>  <B><FONT COLOR="#A020F0">let</FONT></B> L2 = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">make</FONT></I></B></FONT></B>(<B><FONT COLOR="#228B22">&lt;deque&gt;</FONT></B>, <B><FONT COLOR="#5F9EA0">data:</FONT></B> L1);

  <I><FONT COLOR="#B22222">// remove each individual item from left side (head) of L2 and append to right side (tail) of L3 (preserving order).
</FONT></I>  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">// </FONT></I></B></FONT></B>(L2 should be emptied <B><FONT COLOR="#A020F0">by</FONT></B> one item at a time as that item is appended <B><FONT COLOR="#A020F0">to</FONT></B> L3).
  <B><FONT COLOR="#A020F0">let</FONT></B> L3 = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">make</FONT></I></B></FONT></B>(<B><FONT COLOR="#228B22">&lt;deque&gt;</FONT></B>);
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">until </FONT></I></B></FONT></B>(<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">empty?</FONT></I></B></FONT></B>(L2))
    <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">push-last</FONT></I></B></FONT></B>(L3, <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">pop</FONT></I></B></FONT></B>(L2));
  <B><FONT COLOR="#A020F0">end</FONT></B>;

  <I><FONT COLOR="#B22222">// remove each individual item from right side (tail) of L3 and append to right side (tail) of L2 (reversing list).
</FONT></I>  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">// </FONT></I></B></FONT></B>(L3 should be emptied <B><FONT COLOR="#A020F0">by</FONT></B> one item at a time as that item is appended <B><FONT COLOR="#A020F0">to</FONT></B> L2).
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">until </FONT></I></B></FONT></B>(<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">empty?</FONT></I></B></FONT></B>(L3))
    <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">push-last</FONT></I></B></FONT></B>(L2, <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">pop-last</FONT></I></B></FONT></B>(L3));
  <B><FONT COLOR="#A020F0">end</FONT></B>;

  <I><FONT COLOR="#B22222">// reverse L1 (preferably in place) (can use any builtin function for this, if available).
</FONT></I>  L1 <B><FONT COLOR="#5F9EA0">:</FONT></B>= <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">reverse!</FONT></I></B></FONT></B>(L1);

  <I><FONT COLOR="#B22222">// check that first item of L1 is now == SIZE.
</FONT></I>  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">unless </FONT></I></B></FONT></B>(L1[0] == number-of-elements)
    <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">for </FONT></I></B></FONT></B>(e <B><FONT COLOR="#A020F0">in</FONT></B> L1, n <B><FONT COLOR="#A020F0">from</FONT></B> 0) <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">format-out</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;%d: %=\n&quot;</FONT></B>, n, e) <B><FONT COLOR="#A020F0">end</FONT></B>;
    <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">error</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;Error: bad first element in L1. Exiting...\n&quot;</FONT></B>);
  <B><FONT COLOR="#A020F0">end</FONT></B>;

  <I><FONT COLOR="#B22222">// and compare L1 and L2 for equality
</FONT></I>  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">for </FONT></I></B></FONT></B>(elt1 <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;integer&gt;</FONT></B> <B><FONT COLOR="#A020F0">in</FONT></B> L1, elt2 <B><FONT COLOR="#5F9EA0">::</FONT></B> <B><FONT COLOR="#228B22">&lt;integer&gt;</FONT></B> <B><FONT COLOR="#A020F0">in</FONT></B> L2)
    <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">unless </FONT></I></B></FONT></B>(elt1 = elt2)
      <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">error</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;Error: the elements of L1 and L2 not equal. Exiting...\n&quot;</FONT></B>);
    <B><FONT COLOR="#A020F0">end</FONT></B>;
  <B><FONT COLOR="#A020F0">end</FONT></B>;

  <I><FONT COLOR="#B22222">// and return length of L1 (which should be equal to SIZE).
</FONT></I>  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">size</FONT></I></B></FONT></B>(L1);
<B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B> test-lists;


<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B> <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">main </FONT></I></B></FONT></B>() <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">=&gt;</FONT></I></B></FONT></B> ()
  <B><FONT COLOR="#A020F0">let</FONT></B> arg = <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">string-to-integer</FONT></I></B></FONT></B>(<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">element</FONT></I></B></FONT></B>(<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">application-arguments</FONT></I></B></FONT></B>(), 0, <B><FONT COLOR="#5F9EA0">default:</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;1&quot;</FONT></B>));
  <B><FONT COLOR="#A020F0">let</FONT></B> result = #f;
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">for </FONT></I></B></FONT></B>(i <B><FONT COLOR="#A020F0">from</FONT></B> 1 <B><FONT COLOR="#A020F0">to</FONT></B> arg)
    result <B><FONT COLOR="#5F9EA0">:</FONT></B>= <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">test-lists</FONT></I></B></FONT></B>(10000)
    <I><FONT COLOR="#B22222">//result := test-lists(10)
</FONT></I>  <B><FONT COLOR="#A020F0">end</FONT></B>;
  <B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">format-out</FONT></I></B></FONT></B>(<B><FONT COLOR="#BC8F8F">&quot;%d\n&quot;</FONT></B>, result);
<B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#5F9EA0">function</FONT></B> main;


<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">main</FONT></I></B></FONT></B>();</pre></td></tr></table>
