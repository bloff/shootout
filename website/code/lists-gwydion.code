<span class="line">    1 </span><span class="kwb">module</span><span class="sym">:</span>        lists
<span class="line">    2 </span> <span class="kwb">synopsis</span><span class="sym">:</span>      implementation of <span class="str">&quot;List Processing&quot;</span> benchmark
<span class="line">    3 </span> <span class="kwb">author</span><span class="sym">:</span>        Peter Hinely
<span class="line">    4 </span> <span class="kwb">copyright</span><span class="sym">:</span>     public <span class="kwa">domain
</span><span class="line">    5 </span><span class="kwa"> 
</span><span class="line">    6 </span><span class="kwa"> define constant</span> deques <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;deque&gt;</span><span class="sym">);
</span><span class="line">    7 </span><span class="sym"> 
</span><span class="line">    8 </span><span class="sym"> </span><span class="kwa">define inline function</span> new<span class="sym">-</span>deque<span class="sym">() =</span>&gt; <span class="sym">(</span>deque <span class="sym">::</span> <span class="kwa">&lt;object-deque&gt;</span><span class="sym">);
</span><span class="line">    9 </span><span class="sym">   (</span>deques.empty? <span class="sym">&amp;</span> make<span class="sym">(</span><span class="kwa">&lt;deque&gt;</span><span class="sym">)) |</span> deques.pop
<span class="line">   10 </span> <span class="kwa">end</span><span class="sym">;
</span><span class="line">   11 </span><span class="sym"> 
</span><span class="line">   12 </span><span class="sym"> </span><span class="kwa">define inline function</span> save<span class="sym">-</span>deques<span class="sym">(</span>#rest args<span class="sym">)
</span><span class="line">   13 </span><span class="sym"> </span>  <span class="kwa">for</span> <span class="sym">(</span>dq <span class="kwa">in</span> args<span class="sym">)
</span><span class="line">   14 </span><span class="sym">  </span>    dq.size <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   15 </span><span class="sym"> </span>    push<span class="sym">(</span>deques<span class="sym">,</span> dq<span class="sym">);
</span><span class="line">   16 </span><span class="sym"> </span>  <span class="kwa">end</span><span class="sym">;
</span><span class="line">   17 </span><span class="sym"> </span><span class="kwa">end</span><span class="sym">;
</span><span class="line">   18 </span><span class="sym"> 
</span><span class="line">   19 </span><span class="sym"> 
</span><span class="line">   20 </span><span class="sym"> </span><span class="kwa">define function</span> test<span class="sym">-</span>lists <span class="sym">(</span>items <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">)
</span><span class="line">   21 </span><span class="sym"> </span>  <span class="kwa">let</span> L1 <span class="sym">=</span> new<span class="sym">-</span>deque<span class="sym">();
</span><span class="line">   22 </span><span class="sym"> </span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> items<span class="sym">)
</span><span class="line">   23 </span><span class="sym"> </span>    push<span class="sym">-</span>last<span class="sym">(</span>L1<span class="sym">,</span> i<span class="sym">)
</span><span class="line">   24 </span><span class="sym"> </span>  <span class="kwa">end</span><span class="sym">;
</span><span class="line">   25 </span><span class="sym"> 
</span><span class="line">   26 </span><span class="sym"> </span>  <span class="kwa">let</span> L2 <span class="sym">=</span> new<span class="sym">-</span>deque<span class="sym">();
</span><span class="line">   27 </span><span class="sym"> </span>  <span class="kwa">for</span> <span class="sym">(</span>elt <span class="kwa">in</span> L1<span class="sym">)
</span><span class="line">   28 </span><span class="sym"> </span>    push<span class="sym">-</span>last<span class="sym">(</span>L2<span class="sym">,</span> elt<span class="sym">);
</span><span class="line">   29 </span><span class="sym"> </span>  <span class="kwa">end</span><span class="sym">;
</span><span class="line">   30 </span><span class="sym"> 
</span><span class="line">   31 </span><span class="sym"> </span>  <span class="kwa">let</span> L3 <span class="sym">=</span> new<span class="sym">-</span>deque<span class="sym">();
</span><span class="line">   32 </span><span class="sym"> </span>  <span class="kwa">until</span> <span class="sym">(</span>L2.empty?<span class="sym">)
</span><span class="line">   33 </span><span class="sym"> </span>    push<span class="sym">-</span>last<span class="sym">(</span>L3<span class="sym">,</span> L2.pop<span class="sym">);
</span><span class="line">   34 </span><span class="sym"> </span>  <span class="kwa">end</span><span class="sym">;
</span><span class="line">   35 </span><span class="sym"> 
</span><span class="line">   36 </span><span class="sym"> </span>  <span class="kwa">until</span> <span class="sym">(</span>L3.empty?<span class="sym">)
</span><span class="line">   37 </span><span class="sym"> </span>    push<span class="sym">-</span>last<span class="sym">(</span>L2<span class="sym">,</span> L3.pop<span class="sym">-</span>last<span class="sym">);
</span><span class="line">   38 </span><span class="sym"> </span>  <span class="kwa">end</span><span class="sym">;
</span><span class="line">   39 </span><span class="sym"> 
</span><span class="line">   40 </span><span class="sym"> </span>  L1 <span class="sym">:=</span> reverse<span class="sym">!(</span>L1<span class="sym">);
</span><span class="line">   41 </span><span class="sym"> 
</span><span class="line">   42 </span><span class="sym"> </span>  <span class="kwa">let</span> result <span class="sym">=</span> L1<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> items
<span class="line">   43 </span>     <span class="sym">&amp;</span> every?<span class="sym">(</span><span class="kwa">method</span><span class="sym">(</span>a <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> b <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">)</span> a <span class="sym">==</span> b <span class="kwa">end</span><span class="sym">,</span> L1<span class="sym">,</span> L2<span class="sym">)
</span><span class="line">   44 </span><span class="sym">     &amp;</span> L1.size<span class="sym">;
</span><span class="line">   45 </span><span class="sym"> 
</span><span class="line">   46 </span><span class="sym"> </span>  save<span class="sym">-</span>deques<span class="sym">(</span>L1<span class="sym">,</span> L2<span class="sym">,</span> L3<span class="sym">);
</span><span class="line">   47 </span><span class="sym"> </span>  result<span class="sym">;
</span><span class="line">   48 </span><span class="sym"> </span><span class="kwa">end</span><span class="sym">;
</span><span class="line">   49 </span><span class="sym"> 
</span><span class="line">   50 </span><span class="sym"> 
</span><span class="line">   51 </span><span class="sym"> </span><span class="kwa">define function</span> main <span class="sym">()
</span><span class="line">   52 </span><span class="sym"> </span>  <span class="kwa">let</span> iters <span class="sym">=</span> string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">(</span>element<span class="sym">(</span>application<span class="sym">-</span>arguments<span class="sym">(),</span> <span class="num">0</span><span class="sym">,</span> default<span class="sym">:</span> <span class="str">&quot;1&quot;</span><span class="sym">));
</span><span class="line">   53 </span><span class="sym"> </span>  <span class="kwa">let</span> result <span class="sym">=</span> #f<span class="sym">;
</span><span class="line">   54 </span><span class="sym"> </span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> iters<span class="sym">)
</span><span class="line">   55 </span><span class="sym"> </span>    result <span class="sym">:=</span> test<span class="sym">-</span>lists<span class="sym">(</span><span class="num">10000</span><span class="sym">)
</span><span class="line">   56 </span><span class="sym"> </span>  <span class="kwa">end</span><span class="sym">;
</span><span class="line">   57 </span><span class="sym"> </span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;%=</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> result<span class="sym">);
</span><span class="line">   58 </span><span class="sym"> </span><span class="kwa">end</span><span class="sym">;
</span><span class="line">   59 </span><span class="sym"> 
</span><span class="line">   60 </span><span class="sym"> 
</span><span class="line">   61 </span><span class="sym"> </span>main<span class="sym">();</span> 
