<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy

   requires nice 0.9.3 or above

To compile:   
   nicec --sourcepath .. -d . -a prodcons.jar prodcons

To run:
   java -jar prodcons.jar 100000
*/</FONT></I>


<B><FONT COLOR="#A020F0">import</FONT></B> ackermann; <I><FONT COLOR="#B22222">// reuse toSinglePositiveInt
</FONT></I>
var <B><FONT COLOR="#A020F0">int</FONT></B> produced = 0; 
var <B><FONT COLOR="#A020F0">int</FONT></B> consumed = 0;   

<B><FONT COLOR="#A020F0">void</FONT></B> main(String[] args){
   let n = toSinglePositiveInt(args);    
   let b = <B><FONT COLOR="#A020F0">new</FONT></B> SharedBuffer();   
   let producer = <B><FONT COLOR="#A020F0">new</FONT></B> Producer(buffer: b, countdown: n);
   let consumer = <B><FONT COLOR="#A020F0">new</FONT></B> Consumer(buffer: b, countdown: n);

   producer.start;
   consumer.start;
   <B><FONT COLOR="#A020F0">try</FONT></B> {  producer.join;  }  <B><FONT COLOR="#A020F0">catch</FONT></B> (InterruptedException e) { }
   <B><FONT COLOR="#A020F0">try</FONT></B> {  consumer.join;  }  <B><FONT COLOR="#A020F0">catch</FONT></B> (InterruptedException e) { }
   
   println(produced + <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B> + consumed);
}


<B><FONT COLOR="#A020F0">class</FONT></B> SharedBuffer {
   <B><FONT COLOR="#A020F0">int</FONT></B> contents = -1;
   <B><FONT COLOR="#A020F0">boolean</FONT></B> available = <B><FONT COLOR="#A020F0">false</FONT></B>;

   <B><FONT COLOR="#A020F0">int</FONT></B> get();
   get() {
      <B><FONT COLOR="#A020F0">while</FONT></B> (available == <B><FONT COLOR="#A020F0">false</FONT></B>) {
         <B><FONT COLOR="#A020F0">try</FONT></B> { <B><FONT COLOR="#A020F0">this</FONT></B>.wait(); } <B><FONT COLOR="#A020F0">catch</FONT></B> (InterruptedException e) { }
      }
      available = <B><FONT COLOR="#A020F0">false</FONT></B>;
      <B><FONT COLOR="#A020F0">this</FONT></B>.notifyAll;
      <B><FONT COLOR="#A020F0">return</FONT></B> contents;
   }

   <B><FONT COLOR="#A020F0">void</FONT></B> put(<B><FONT COLOR="#A020F0">int</FONT></B> value);
   put(value)  {
      <B><FONT COLOR="#A020F0">while</FONT></B> (available == <B><FONT COLOR="#A020F0">true</FONT></B>) {
         <B><FONT COLOR="#A020F0">try</FONT></B> { <B><FONT COLOR="#A020F0">this</FONT></B>.wait(); } <B><FONT COLOR="#A020F0">catch</FONT></B> (InterruptedException e) { }
      }
      contents = value;
      available = <B><FONT COLOR="#A020F0">true</FONT></B>;
      <B><FONT COLOR="#A020F0">this</FONT></B>.notifyAll;
   }
}


<B><FONT COLOR="#A020F0">class</FONT></B> Producer <B><FONT COLOR="#A020F0">extends</FONT></B> Thread {
   SharedBuffer buffer;
   <B><FONT COLOR="#A020F0">int</FONT></B> countdown;

   run() {
      <B><FONT COLOR="#A020F0">while</FONT></B> (countdown-- &gt; 0) {
         <B><FONT COLOR="#A020F0">synchronized</FONT></B>(buffer) { 
            buffer.put(countdown); 
            <I><FONT COLOR="#B22222">// println(&quot;produced &quot; + countdown);  // check            
</FONT></I>         }               
         ++produced;
      }
   }
}


<B><FONT COLOR="#A020F0">class</FONT></B> Consumer <B><FONT COLOR="#A020F0">extends</FONT></B> Thread {
   SharedBuffer buffer;
   <B><FONT COLOR="#A020F0">int</FONT></B> countdown;

   run() {
      var value = 0;
      <B><FONT COLOR="#A020F0">while</FONT></B> (countdown-- &gt; 0) {
         <B><FONT COLOR="#A020F0">synchronized</FONT></B>(buffer) { 
            value = buffer.get; 
            <I><FONT COLOR="#B22222">// println(&quot;\t&quot; + &quot;consumed &quot; + value); // check 
</FONT></I>         }
         ++consumed;
      }    
   }    
}</pre></td></tr></table>
