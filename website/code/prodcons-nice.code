<span class="com">/* The Great Computer Language Shootout
    http://shootout.alioth.debian.org/
   contributed by Isaac Gouy

   requires nice 0.9.3 or above

To compile:
      nicec --sourcepath .. -d . -a prodcons.jar prodcons

To run:
   java -jar prodcons.jar 100000
*/</span>


<span class="kwa">import</span> ackermann<span class="sym">;</span> <span class="slc">// reuse toSinglePositiveInt
</span>
var <span class="kwb">int</span> produced <span class="sym">=</span> <span class="num">0</span><span class="sym">;
 </span>var <span class="kwb">int</span> consumed <span class="sym">=</span> <span class="num">0</span><span class="sym">;
   
</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span>   <span class="kwa">let</span> n <span class="sym">=</span> toSinglePositiveInt<span class="sym">(</span>args<span class="sym">);
    </span>   <span class="kwa">let</span> b <span class="sym">=</span> <span class="kwa">new</span> SharedBuffer<span class="sym">();
   </span>   <span class="kwa">let</span> producer <span class="sym">=</span> <span class="kwa">new</span> Producer<span class="sym">(</span>buffer<span class="sym">:</span> b<span class="sym">,</span> countdown<span class="sym">:</span> n<span class="sym">);
</span>   <span class="kwa">let</span> consumer <span class="sym">=</span> <span class="kwa">new</span> Consumer<span class="sym">(</span>buffer<span class="sym">:</span> b<span class="sym">,</span> countdown<span class="sym">:</span> n<span class="sym">);

</span>   producer<span class="sym">.</span>start<span class="sym">;
</span>   consumer<span class="sym">.</span>start<span class="sym">;
</span>   <span class="kwa">try</span> <span class="sym">{</span>  producer<span class="sym">.</span>join<span class="sym">;  }</span>  <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) { }
</span>   <span class="kwa">try</span> <span class="sym">{</span>  consumer<span class="sym">.</span>join<span class="sym">;  }</span>  <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) { }

   </span>   println<span class="sym">(</span>produced <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> consumed<span class="sym">);
}


</span><span class="kwa">class</span> SharedBuffer <span class="sym">{
</span>   <span class="kwb">int</span> contents <span class="sym">= -</span><span class="num">1</span><span class="sym">;
</span>   <span class="kwb">boolean</span> available <span class="sym">=</span> false<span class="sym">;

</span>   <span class="kwb">int</span> get<span class="sym">();
</span>   get<span class="sym">() {
</span>      <span class="kwa">while</span> <span class="sym">(</span>available <span class="sym">==</span> false<span class="sym">) {
</span>         <span class="kwa">try</span> <span class="sym">{</span> <span class="kwa">this</span><span class="sym">.</span>wait<span class="sym">(); }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) { }
      }
</span>      available <span class="sym">=</span> false<span class="sym">;
</span>      <span class="kwa">this</span><span class="sym">.</span>notifyAll<span class="sym">;
</span>      <span class="kwa">return</span> contents<span class="sym">;
   }

</span>   <span class="kwb">void</span> put<span class="sym">(</span><span class="kwb">int</span> value<span class="sym">);
</span>   put<span class="sym">(</span>value<span class="sym">)  {
</span>      <span class="kwa">while</span> <span class="sym">(</span>available <span class="sym">==</span> true<span class="sym">) {
</span>         <span class="kwa">try</span> <span class="sym">{</span> <span class="kwa">this</span><span class="sym">.</span>wait<span class="sym">(); }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">InterruptedException</span> e<span class="sym">) { }
      }
</span>      contents <span class="sym">=</span> value<span class="sym">;
</span>      available <span class="sym">=</span> true<span class="sym">;
</span>      <span class="kwa">this</span><span class="sym">.</span>notifyAll<span class="sym">;
   }
}


</span><span class="kwa">class</span> Producer <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{
</span>   SharedBuffer buffer<span class="sym">;
</span>   <span class="kwb">int</span> countdown<span class="sym">;

</span>   run<span class="sym">() {
</span>      <span class="kwa">while</span> <span class="sym">(</span>countdown<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">) {
</span>         <span class="kwa">synchronized</span><span class="sym">(</span>buffer<span class="sym">) {
 </span>            buffer<span class="sym">.</span>put<span class="sym">(</span>countdown<span class="sym">);
 </span>            <span class="slc">// println(&quot;produced &quot; + countdown);  // check            
</span>         <span class="sym">}
                        ++</span>produced<span class="sym">;
      }
   }
}


</span><span class="kwa">class</span> Consumer <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{
</span>   SharedBuffer buffer<span class="sym">;
</span>   <span class="kwb">int</span> countdown<span class="sym">;

</span>   run<span class="sym">() {
</span>      var value <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwa">while</span> <span class="sym">(</span>countdown<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">) {
</span>         <span class="kwa">synchronized</span><span class="sym">(</span>buffer<span class="sym">) {
 </span>            value <span class="sym">=</span> buffer<span class="sym">.</span>get<span class="sym">;
 </span>            <span class="slc">// println(&quot;\t&quot; + &quot;consumed &quot; + value); // check 
</span>         <span class="sym">}
         ++</span>consumed<span class="sym">;
      }
       }
    }</span>
