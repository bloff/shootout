<span class="slc">//
</span><span class="slc">// Contributed by John Skaller
</span><span class="slc">//
</span><span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;
</span>n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);
</span><span class="kwa">var</span> produced <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwa">var</span> consumed <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span><span class="kwa">proc</span> consumer<span class="sym">() {
</span>  until consumed <span class="sym">==</span> n do
    <span class="kwa">var</span> x<span class="sym">:</span><span class="kwb">int</span><span class="sym">;</span> <span class="kwa">read</span> x<span class="sym">;
    ++</span>consumed<span class="sym">;
</span>  done<span class="sym">;
}

</span><span class="kwa">proc</span> producer<span class="sym">() {
</span>  <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>  until produced <span class="sym">==</span> n do
    <span class="sym">++</span>produced<span class="sym">;
</span>    send<span class="sym">[</span><span class="kwb">int</span><span class="sym">] (&amp;</span>con<span class="sym">)</span> i<span class="sym">;
    ++</span>i<span class="sym">;
</span>  done<span class="sym">;
}

</span><span class="kwa">var</span> con <span class="sym">=</span> start the consumer <span class="sym">();
</span><span class="kwa">var</span> prod<span class="sym">=</span> start the producer <span class="sym">();
</span>run prod<span class="sym">;

</span><span class="kwa">print</span> produced<span class="sym">;</span> <span class="kwa">print</span> <span class="str">&quot; &quot;</span><span class="sym">;</span> <span class="kwa">print</span> consumed<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span>
