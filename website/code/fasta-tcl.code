<span class="slc">#!/usr/bin/tclsh
</span>
<span class="slc"># Fasta benchmark
</span><span class="slc">#
</span><span class="slc"># Contributed by Michael Schlenker
</span>
<span class="kwa">foreach</span> <span class="sym">{</span>IM IA IC last<span class="sym">} {</span><span class="num">139968 3877 29573 42</span><span class="sym">}</span> <span class="kwa">break

set</span> alu GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGT
<span class="kwa">append</span> alu CAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCC
<span class="kwa">append</span> alu GGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCC
<span class="kwa">append</span> alu GGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACT
<span class="kwa">append</span> alu CCGTCTCAAAAA

<span class="kwa">set</span> iub <span class="sym">{</span>a <span class="num">0.27</span> c <span class="num">0.12</span> g <span class="num">0.12</span> t <span class="num">0.27</span> B <span class="num">0.02</span> D <span class="num">0.02</span> H <span class="num">0.02</span> K <span class="num">0.02</span> M <span class="num">0.02</span> N <span class="num">0.02
</span>	 R <span class="num">0.02</span> S <span class="num">0.02</span> V <span class="num">0.02</span> W <span class="num">0.02</span> Y <span class="num">0.02</span><span class="sym">}

</span><span class="kwa">set</span> hsapiens <span class="sym">{</span>a <span class="num">0.3029549426680</span> c <span class="num">0.1979883004921</span> g <span class="num">0.1975473066391
</span>		 t <span class="num">0.3015094502008</span><span class="sym">}

</span><span class="kwa">proc</span> make_gen_random <span class="sym">{} {
</span>    <span class="kwa">set</span> params <span class="sym">[</span><span class="kwa">list</span> IM <span class="kwb">$</span><span class="sym">::</span>IM IA <span class="kwb">$</span><span class="sym">::</span>IA IC <span class="kwb">$</span><span class="sym">::</span>IC<span class="sym">]
</span>    <span class="kwa">set</span> body <span class="sym">[</span><span class="kwa">string</span> map <span class="kwb">$params</span> <span class="sym">{
</span>	<span class="kwa">expr</span> <span class="sym">{(</span><span class="kwb">$max</span> <span class="sym">* [</span><span class="kwa">set</span> <span class="sym">::</span>last <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{(</span><span class="kwb">$</span><span class="sym">::</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">}]]) /</span> IM<span class="sym">}}]
</span>    <span class="kwa">proc</span> gen_random <span class="sym">{</span>max<span class="sym">}</span> <span class="kwb">$body
</span><span class="sym">}

</span><span class="kwa">proc</span> make_cumulative <span class="sym">{</span>table<span class="sym">} {
</span>    <span class="kwa">set</span> prob <span class="num">0.0
</span>    <span class="kwa">set</span> pl <span class="sym">[</span><span class="kwa">list</span><span class="sym">]

</span>    <span class="kwa">foreach</span> <span class="sym">{</span>char p<span class="sym">}</span> <span class="kwb">$table</span> <span class="sym">{</span><span class="kwa">lappend</span> pl <span class="sym">[</span><span class="kwa">set</span> prob <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$prob</span> <span class="sym">+</span> <span class="kwb">$p</span><span class="sym">}]]</span> <span class="kwb">$char</span><span class="sym">}
</span>    <span class="kwa">return</span> <span class="kwb">$pl
</span><span class="sym">}

</span><span class="kwa">proc</span> make_repeat_fasta <span class="sym">{</span>id desc src n<span class="sym">} {
</span>    <span class="kwa">foreach</span> <span class="sym">{</span>width s e<span class="sym">} {</span><span class="num">59 0 59</span><span class="sym">}</span> <span class="kwa">break

    puts</span> <span class="str">&quot;&gt;$id $desc&quot;</span>
    <span class="kwa">set</span> l <span class="sym">[</span><span class="kwa">string</span> length <span class="kwb">$src</span><span class="sym">]
</span>    <span class="kwa">set</span> ls <span class="sym">[</span><span class="kwa">string</span> repeat <span class="kwb">$src</span> <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{([</span><span class="kwa">incr</span> n <span class="num">-1</span><span class="sym">] /</span> <span class="kwb">$l</span><span class="sym">)+</span><span class="num">1</span> <span class="sym">}]]
</span>    <span class="kwa">while</span> <span class="sym">{</span><span class="kwb">$e</span> <span class="sym">&lt;</span> <span class="kwb">$n</span><span class="sym">} {
</span>	<span class="kwa">puts</span> <span class="sym">[</span><span class="kwa">string</span> range <span class="kwb">$ls $s $e</span><span class="sym">]
</span>	<span class="kwa">set</span> s <span class="sym">[</span><span class="kwa">incr</span> e<span class="sym">]
</span>	<span class="kwa">incr</span> e <span class="kwb">$width
</span>    <span class="sym">}
</span>    <span class="kwa">puts</span> <span class="sym">[</span><span class="kwa">string</span> range <span class="kwb">$ls $s $n</span><span class="sym">]
}

</span><span class="kwa">proc</span> make_random_fasta <span class="sym">{</span>id desc src n<span class="sym">} {
</span>    <span class="kwa">foreach</span> <span class="sym">{</span>width line<span class="sym">} {</span><span class="num">60</span> <span class="str">&quot;&quot;</span><span class="sym">}</span> <span class="kwa">break

    puts</span> <span class="str">&quot;&gt;$id $desc&quot;</span>
    <span class="kwa">set</span> prob <span class="sym">[</span>make_cumulative <span class="kwb">$src</span><span class="sym">]
</span>    <span class="kwa">for</span> <span class="sym">{</span><span class="kwa">set</span> i <span class="num">0</span><span class="sym">} {</span><span class="kwb">$i</span> <span class="sym">&lt;</span> <span class="kwb">$n</span><span class="sym">} {</span><span class="kwa">incr</span> i<span class="sym">} {
</span>	<span class="kwa">set</span> rand <span class="sym">[</span>gen_random <span class="num">1.0</span><span class="sym">]
</span>	<span class="kwa">foreach</span> <span class="sym">{</span>p c<span class="sym">}</span> <span class="kwb">$prob</span> <span class="sym">{
</span>	    <span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$p</span> <span class="sym">&gt;</span> <span class="kwb">$rand</span><span class="sym">} {
</span>		<span class="kwa">append</span> line <span class="kwb">$c
</span>		<span class="kwa">break
</span>	    <span class="sym">}
	}
</span>	<span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">string</span> length <span class="kwb">$line</span><span class="sym">] ==</span> <span class="kwb">$width</span><span class="sym">} {
</span>	    <span class="kwa">puts</span> <span class="kwb">$line
</span>	    <span class="kwa">set</span> line <span class="str">&quot;&quot;</span>
	<span class="sym">}
    }
</span>    <span class="kwa">if</span> <span class="sym">{[</span><span class="kwa">string</span> length <span class="kwb">$line</span><span class="sym">]} {</span><span class="kwa">puts</span> <span class="kwb">$line</span><span class="sym">}
}

</span><span class="kwa">proc</span> main <span class="sym">{</span>n<span class="sym">} {
</span>    make_gen_random
    make_repeat_fasta ONE <span class="str">&quot;Homo sapiens alu&quot;</span> <span class="kwb">$</span><span class="sym">::</span>alu <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$n</span><span class="sym">*</span><span class="num">2</span><span class="sym">}]
</span>    make_random_fasta TWO <span class="str">&quot;IUB ambiguity codes&quot;</span> <span class="kwb">$</span><span class="sym">::</span>iub <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$n</span><span class="sym">*</span><span class="num">3</span><span class="sym">}]
</span>    make_random_fasta THREE <span class="str">&quot;Homo sapiens frequency&quot;</span> <span class="kwb">$</span><span class="sym">::</span>hsapiens <span class="sym">[</span><span class="kwa">expr</span> <span class="sym">{</span><span class="kwb">$n</span><span class="sym">*</span><span class="num">5</span><span class="sym">}]
}

</span><span class="kwa">set</span> N <span class="sym">[</span><span class="kwa">lindex</span> <span class="kwb">$argv</span> <span class="num">0</span><span class="sym">]
</span><span class="kwa">if</span> <span class="sym">{</span><span class="kwb">$N</span> <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">} {</span><span class="kwa">set</span> N <span class="num">1</span><span class="sym">}
</span>main <span class="kwb">$N</span>
