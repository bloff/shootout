BUILD COMMANDS FOR: nbody.cmucl

Sun Dec  4 03:04:07 PST 2005

CMUCL built with: /usr/bin/lisp -noinit -batch -eval '(load "nbody.cmucl_compile")'
### START nbody.cmucl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(compile-file "nbody.cmucl" :block-compile t  :entry-points '(main))
(quit)
### END nbody.cmucl_compile

; Loading #P"/opt/shootout/shootout/bench/nbody/tmp/nbody.cmucl_compile".

; Python version 1.1, VM version Intel x86 on 04 DEC 05 03:04:09 am.
; Compiling: /opt/shootout/shootout/bench/nbody/tmp/nbody.cmucl 04 DEC 05 03:04:07 am

; Converted MAKE-BODY.
; Converted X.
; Converted (SETF X).
; Converted Y.
; Converted (SETF Y).
; Converted Z.
; Converted (SETF Z).
; Converted VX.
; Converted (SETF VX).
; Converted VY.
; Converted (SETF VY).
; Converted VZ.
; Converted (SETF VZ).
; Converted MASS.
; Converted (SETF MASS).
; Converted APPLYFORCES.
; Converted ADVANCE.
; Converted ENERGY.
; Converted OFFSET-MOMENTUM.
; Converted NBODY.
; Converted MAIN.

; 
; 
; File: /opt/shootout/shootout/bench/nbody/tmp/nbody.cmucl

; In: DEFSTRUCT BODY

;   (DEFSTRUCT (BODY
;                #
;                #
;                #)
;     X ..)
; Note: Deleting unused function
;   (SETF MASS)
; 
; Compiling DEFSTRUCT BODY: 
; Compiling DEFPARAMETER *SUN*: 
; Compiling DEFTYPE BODY: 
; Compiling DEFUN MAIN: 

; 
; 
; File: /opt/shootout/shootout/bench/nbody/tmp/nbody.cmucl

; In: DEFUN OFFSET-MOMENTUM

;   (INCF PX (* # #))
; --> LET* 
; ==>
;   (+ PX #:G159)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (INCF PY (* # #))
; --> LET* 
; ==>
;   (+ PY #:G161)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (INCF PZ (* # #))
; --> LET* 
; ==>
;   (+ PZ #:G163)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (- PX)
; ==>
;   (KERNEL:%NEGATE PX)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (/ (- PX) +SOLAR-MASS+)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (- PY)
; ==>
;   (KERNEL:%NEGATE PY)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (/ (- PY) +SOLAR-MASS+)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (- PZ)
; ==>
;   (KERNEL:%NEGATE PZ)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (/ (- PZ) +SOLAR-MASS+)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (- PX)
; ==>
;   (KERNEL:%NEGATE PX)
; Note: Forced to do GENERIC-NEGATE (cost 10).
;     Unable to do inline float arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     etc.
; 
;   (- PY)
; ==>
;   (KERNEL:%NEGATE PY)
; Note: Forced to do GENERIC-NEGATE (cost 10).
;     Unable to do inline float arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     etc.
; 
;   (- PZ)
; ==>
;   (KERNEL:%NEGATE PZ)
; Note: Forced to do GENERIC-NEGATE (cost 10).
;     Unable to do inline float arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     etc.
; 

; In: DEFUN NBODY

;   (DOTIMES (I N) (ADVANCE SYSTEM 0.01d0))
; --> DO BLOCK LET TAGBODY UNLESS COND IF NOT IF >= IF 
; ==>
;   (< I #:G170)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a UNSIGNED-BYTE, not a FIXNUM.
; 
; --> DO BLOCK LET TAGBODY PSETQ PSETF LET* MULTIPLE-VALUE-BIND LET 1+ 
; ==>
;   (+ I 1)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;     The result is a (INTEGER 1), not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;     The result is a (INTEGER 1), not a FIXNUM.
;     etc.
; 

; In: DEFUN OFFSET-MOMENTUM

;   (INCF PX (* # #))
; --> LET* 
; ==>
;   (+ PX #:G159)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
; 
;   (INCF PY (* # #))
; --> LET* 
; ==>
;   (+ PY #:G161)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
; 
;   (INCF PZ (* # #))
; --> LET* 
; ==>
;   (+ PZ #:G163)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
; 
;   (INCF PX (* # #))
; --> LET* 
; ==>
;   (+ PX #:G159)
; Note: Doing float to pointer coercion (cost 13), for:
;     The second argument of GENERIC-+.
; 
;   (INCF PY (* # #))
; --> LET* 
; ==>
;   (+ PY #:G161)
; Note: Doing float to pointer coercion (cost 13), for:
;     The second argument of GENERIC-+.
; 
;   (INCF PZ (* # #))
; --> LET* 
; ==>
;   (+ PZ #:G163)
; Note: Doing float to pointer coercion (cost 13), for:
;     The second argument of GENERIC-+.
; 

; In: DEFUN ENERGY

;   (DEFUN ENERGY (SYSTEM)
;     (LET #
;       #
;       #
;       E))
; Note: Doing float to pointer coercion (cost 13) from E to "<return value>".
; 
; Byte Compiling Top-Level Form: 
; Byte Compiling Top-Level Form: 
; Byte Compiling Top-Level Form: 
; Byte Compiling Top-Level Form: 
; Byte Compiling Top-Level Form: 
; Byte Compiling Top-Level Form: 
; Byte Compiling Top-Level Form: 

; Compilation unit finished.
;   43 notes


; nbody.x86f written.
; Compilation finished in 0:00:01.
### START nbody.cmucl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(setq *gc-verbose* nil)
(load "nbody.x86f" :verbose nil :print nil)
(main) (quit)
### END nbody.cmucl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/lisp -noinit -batch -eval '(load "nbody.cmucl_run" :verbose nil :print nil)' %A


PROGRAM OUTPUT
==============
-0.169075164
-0.169086185
