BUILD COMMANDS FOR: nbody.cmucl

Sun May 15 03:05:14 PDT 2005

CMUCL built with: /usr/bin/lisp -noinit -batch -eval '(load "nbody.cmucl_compile")'
### START nbody.cmucl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(compile-file "nbody.cmucl" :block-compile t  :entry-points '(main))
(quit)
### END nbody.cmucl_compile

; Loading #p"/opt/shootout/shootout/bench/nbody/tmp/nbody.cmucl_compile".

; Python version 1.1, VM version Intel x86 on 15 MAY 05 03:05:17 am.
; Compiling: /opt/shootout/shootout/bench/nbody/tmp/nbody.cmucl 15 MAY 05 03:05:16 am

; Converted BODY-MASS.
; Converted (SETF BODY-MASS).
; Converted MAKE-BODY.
; Converted MAKE-BODY1.
; Converted APPLYFORCES.
; Converted MOVE.
; Converted ADVANCE.
; Converted ENERGY.
; Converted OFFSET-MOMENTUM.
; Converted NBODY.
; Converted MAIN.
; Compiling DEFPARAMETER *SUN*: 
; Compiling DEFUN MAIN: 

; 
; 
; File: /opt/shootout/shootout/bench/nbody/tmp/nbody.cmucl

; In: DEFUN NBODY

;   (LOOP FOR I FROM 1 ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> I #:G154)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ SETQ 
; --> 1+ 
; ==>
;   (+ I 1)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 

; In: DEFUN ADVANCE

;   (LOOP FOR I FROM 0 ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF >= IF 
; ==>
;   (< I #:G122)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
;   (1+ I)
; ==>
;   (+ I 1)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
;   (LOOP FOR J FROM (1+ I) ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF >= IF 
; ==>
;   (< J #:G123)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
;   (LOOP FOR I FROM 0 ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ SETQ 
; --> 1+ 
; ==>
;   (+ I 1)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 

; In: DEFUN MOVE

;   (* V DT)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (+ P (* V DT))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
;     The second argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 

; In: DEFUN ENERGY

;   (LOOP FOR I FROM 0 ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF >= IF 
; ==>
;   (< I #:G127)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
;   (* 0.5d0 (BODY-MASS B) (LOOP FOR V ACROSS # ...))
; ==>
;   (* (* 0.5d0 #) (LOOP FOR V ACROSS # ...))
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (+ E (* 0.5d0 # #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
;     The second argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
;     The second argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a NUMBER, not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (1+ I)
; ==>
;   (+ I 1)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (LOOP FOR J FROM (1+ I) ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF >= IF 
; ==>
;   (< J #:G132)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
;   (LOOP FOR I FROM 0 ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ SETQ 
; --> 1+ 
; ==>
;   (+ I 1)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (SQRT (LOOP FOR B ACROSS # ...))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a (OR (MEMBER 0.0 0.0d0)
;                         (DOUBLE-FLOAT #)
;                         (SINGLE-FLOAT #)
;                         (COMPLEX SINGLE-FLOAT)
;                         ...), not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a (OR (MEMBER 0.0 0.0d0)
;                         (DOUBLE-FLOAT #)
;                         (SINGLE-FLOAT #)
;                         (COMPLEX SINGLE-FLOAT)
;                         ...), not a FLOAT.
; 
;   (/ (* # #) DIST)
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a (OR (MEMBER 0.0 0.0d0)
;                                  (DOUBLE-FLOAT #)
;                                  (SINGLE-FLOAT #)
;                                  (COMPLEX SINGLE-FLOAT)
;                                  ...), not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a (OR (MEMBER 0.0 0.0d0)
;                                  (DOUBLE-FLOAT #)
;                                  (SINGLE-FLOAT #)
;                                  (COMPLEX SINGLE-FLOAT)
;                                  ...), not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The second argument is a (OR (MEMBER 0.0 0.0d0)
;                                  (DOUBLE-FLOAT #)
;                                  (SINGLE-FLOAT #)
;                                  (COMPLEX SINGLE-FLOAT)
;                                  ...), not a (COMPLEX DOUBLE-FLOAT).
; 
;   (- E (/ # DIST))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
;     The second argument is a (OR (COMPLEX DOUBLE-FLOAT)
;                                  DOUBLE-FLOAT), not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a (OR (COMPLEX DOUBLE-FLOAT)
;                                  DOUBLE-FLOAT), not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;     The second argument is a (OR (COMPLEX DOUBLE-FLOAT)
;                                  DOUBLE-FLOAT), not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a (OR (COMPLEX DOUBLE-FLOAT)
;                                  DOUBLE-FLOAT), not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;     The second argument is a (OR (COMPLEX DOUBLE-FLOAT)
;                                  DOUBLE-FLOAT), not a REAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a REAL.
;     The second argument is a (OR (COMPLEX DOUBLE-FLOAT)
;                                  DOUBLE-FLOAT), not a (COMPLEX DOUBLE-FLOAT).
; 
;   (LOOP FOR J FROM (1+ I) ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ SETQ 
; --> 1+ 
; ==>
;   (+ J 1)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (LOOP FOR B ACROSS (BODY-POS B) ...)
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY SETQ 
; ==>
;   (+ #:G139 (* # #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (LOOP FOR V ACROSS (BODY-VEL B) ...)
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY SETQ 
; ==>
;   (+ #:G131 (* V V))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 

; In: DEFUN OFFSET-MOMENTUM

;   (- PX)
; ==>
;   (KERNEL:%NEGATE PX)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (/ (- PX) +SOLAR-MASS+)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (- PY)
; ==>
;   (KERNEL:%NEGATE PY)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (/ (- PY) +SOLAR-MASS+)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (- PZ)
; ==>
;   (KERNEL:%NEGATE PZ)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (/ (- PZ) +SOLAR-MASS+)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (+ PX (* # #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (+ PY (* # #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (+ PZ (* # #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 

; In: DEFUN ENERGY

;   (LOOP FOR I FROM 0 ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF >= IF 
; ==>
;   (< I #:G127)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 3) because:
;     The first argument is a REAL, not a FIXNUM.
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
;     etc.
; 
;   (LOOP FOR V ACROSS (BODY-VEL B) ...)
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY SETQ 
; ==>
;   (+ #:G131 (* V V))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
; 
;   (* 0.5d0 (BODY-MASS B) (LOOP FOR V ACROSS # ...))
; ==>
;   (* (* 0.5d0 #) (LOOP FOR V ACROSS # ...))
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline float arithmetic (cost 3) because:
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
; 
;   (+ E (* 0.5d0 # #))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     etc.
; 
;   (1+ I)
; ==>
;   (+ I 1)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 
;   (LOOP FOR J FROM (1+ I) ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF >= IF 
; ==>
;   (< J #:G132)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 3) because:
;     The first argument is a REAL, not a FIXNUM.
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
;     etc.
; 
;   (LOOP FOR B ACROSS (BODY-POS B) ...)
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY SETQ 
; ==>
;   (+ #:G139 (* # #))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
; 
;   (/ (* # #) DIST)
; Note: Forced to do static-function Two-arg-/ (cost 53).
;     Unable to do inline float arithmetic (cost 12) because:
;     The second argument is a (OR (MEMBER 0.0 0.0d0)
;                                  (DOUBLE-FLOAT #)
;                                  (SINGLE-FLOAT #)
;                                  (COMPLEX SINGLE-FLOAT)
;                                  ...), not a DOUBLE-FLOAT.
;     The result is a (OR (COMPLEX DOUBLE-FLOAT)
;                         DOUBLE-FLOAT), not a DOUBLE-FLOAT.
; 
;   (- E (/ # DIST))
; Note: Forced to do GENERIC-- (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a (OR (COMPLEX DOUBLE-FLOAT)
;                                  DOUBLE-FLOAT), not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
; 
;   (LOOP FOR J FROM (1+ I) ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ SETQ 
; --> 1+ 
; ==>
;   (+ J 1)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 
;   (LOOP FOR I FROM 0 ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ SETQ 
; --> 1+ 
; ==>
;   (+ I 1)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 

; In: DEFUN OFFSET-MOMENTUM

;   (+ PX (* # #))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
; 
;   (+ PY (* # #))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
; 
;   (+ PZ (* # #))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline float arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
; 
;   (- PX)
; ==>
;   (KERNEL:%NEGATE PX)
; Note: Forced to do GENERIC-NEGATE (cost 10).
;     Unable to do inline float arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     etc.
; 
;   (- PY)
; ==>
;   (KERNEL:%NEGATE PY)
; Note: Forced to do GENERIC-NEGATE (cost 10).
;     Unable to do inline float arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     etc.
; 
;   (- PZ)
; ==>
;   (KERNEL:%NEGATE PZ)
; Note: Forced to do GENERIC-NEGATE (cost 10).
;     Unable to do inline float arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The result is a NUMBER, not a SINGLE-FLOAT.
;     etc.
; 

; In: DEFUN MOVE

;   (* V DT)
; Note: Forced to do GENERIC-* (cost 30).
;     Unable to do inline float arithmetic (cost 3) because:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The result is a NUMBER, not a DOUBLE-FLOAT.
; 

; In: DEFUN NBODY

;   (LOOP FOR I FROM 1 ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ SETQ 
; --> 1+ 
; ==>
;   (+ I 1)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> I #:G154)
; Note: Forced to do GENERIC-> (cost 10).
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
;     The second argument is a INTEGER, not a FIXNUM.
; 

; In: DEFUN ADVANCE

;   (LOOP FOR I FROM 0 ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF >= IF 
; ==>
;   (< I #:G122)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 3) because:
;     The first argument is a REAL, not a FIXNUM.
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
;     etc.
; 
;   (1+ I)
; ==>
;   (+ I 1)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a REAL, not a FIXNUM.
;     The result is a REAL, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a REAL, not a FIXNUM.
;     The result is a REAL, not a FIXNUM.
;     etc.
; 
;   (LOOP FOR J FROM (1+ I) ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF >= IF 
; ==>
;   (< J #:G123)
; Note: Forced to do GENERIC-< (cost 10).
;     Unable to do inline fixnum comparison (cost 3) because:
;     The first argument is a REAL, not a FIXNUM.
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
;     etc.
; 
;   (LOOP FOR I FROM 0 ...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ SETQ 
; --> 1+ 
; ==>
;   (+ I 1)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 

; In: DEFUN OFFSET-MOMENTUM

;   (+ PX (* # #))
; Note: Doing float to pointer coercion (cost 13), for:
;     The second argument of GENERIC-+.
; 
;   (+ PY (* # #))
; Note: Doing float to pointer coercion (cost 13), for:
;     The second argument of GENERIC-+.
; 
;   (+ PZ (* # #))
; Note: Doing float to pointer coercion (cost 13), for:
;     The second argument of GENERIC-+.
; 

; In: DEFUN ENERGY

;   (LOOP FOR V ACROSS (BODY-VEL B) ...)
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ 
; ==>
;   (SETQ V (AREF #:G128 #:G129))
; Note: Doing float to pointer coercion (cost 13) to V.
; 
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY SETQ 
; ==>
;   (+ #:G131 (* V V))
; Note: Doing float to pointer coercion (cost 13), for:
;     The second argument of GENERIC-+.
; 
;   (* 0.5d0 (BODY-MASS B) (LOOP FOR V ACROSS # ...))
; ==>
;   (* (* 0.5d0 #) (LOOP FOR V ACROSS # ...))
; Note: Doing float to pointer coercion (cost 13), for:
;     The first argument of GENERIC-*.
; 
;   (/ (* # #) DIST)
; Note: Doing float to pointer coercion (cost 13), for:
;     The first argument of static-function Two-arg-/.
; 
;   (LOOP FOR B ACROSS (BODY-POS B) ...)
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ 
; --> SETQ PROG1 LET ANSI-LOOP::LOOP-REALLY-DESETQ 
; ==>
;   (SETQ B2 (AREF #:G136 #:G137))
; Note: Doing float to pointer coercion (cost 13) to B2.
; 
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ 
; ==>
;   (SETQ B (PROG1 # #))
; Note: Doing float to pointer coercion (cost 13) to B.
; 
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY SETQ 
; ==>
;   (+ #:G139 (* # #))
; Note: Doing float to pointer coercion (cost 13), for:
;     The second argument of GENERIC-+.
; 
; Byte Compiling Top-Level Form: 
; Byte Compiling Creation Form for #<KERNEL::CLASS-CELL BODY>: 
; Byte Compiling Top-Level Form: 
; Byte Compiling Top-Level Form: 
; Byte Compiling Top-Level Form: 
; Byte Compiling Top-Level Form: 
; Byte Compiling Top-Level Form: 

; Compilation unit finished.
;   132 notes


; nbody.x86f written.
; Compilation finished in 0:00:05.
### START nbody.cmucl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(setq *gc-verbose* nil)
(load "nbody.x86f" :verbose nil :print nil)
(main) (quit)
### END nbody.cmucl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/lisp -noinit -batch -eval '(load "nbody.cmucl_run" :verbose nil :print nil)' %A
************************************************************
*   TEST HALTED - TIMEOUT AFTER --maxtime 600 SECS
************************************************************
************************************************************
*   TEST HALTED - TIMEOUT AFTER --maxtime 600 SECS
************************************************************
************************************************************
*   TEST HALTED - TIMEOUT AFTER --maxtime 600 SECS
************************************************************
************************************************************
*   TEST HALTED - TIMEOUT AFTER --maxtime 600 SECS
************************************************************
************************************************************
*   TEST HALTED - TIMEOUT AFTER --maxtime 600 SECS
************************************************************


PROGRAM OUTPUT
==============
-0.169075164
-0.169077842
