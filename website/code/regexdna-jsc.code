<span class="slc">// The Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// contributed by Jesse Millikan</span>
<span class="slc">// Base on the Ruby version by jose fco. gonzalez</span>

<span class="kwa">var</span> l<span class="sym">,</span> <span class="kwc">input</span> <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">,</span> ilen<span class="sym">,</span> clen<span class="sym">,</span>
 seqs <span class="sym">= [</span>
  <span class="sym">/</span>agggtaaa<span class="sym">|</span>tttaccct<span class="sym">/</span>ig<span class="sym">,</span>
  <span class="sym">/[</span>cgt<span class="sym">]</span>gggtaaa<span class="sym">|</span>tttaccc<span class="sym">[</span>acg<span class="sym">]/</span>ig<span class="sym">,</span>
  <span class="sym">/</span>a<span class="sym">[</span>act<span class="sym">]</span>ggtaaa<span class="sym">|</span>tttacc<span class="sym">[</span>agt<span class="sym">]</span>t<span class="sym">/</span>ig<span class="sym">,</span>
  <span class="sym">/</span>ag<span class="sym">[</span>act<span class="sym">]</span>gtaaa<span class="sym">|</span>tttac<span class="sym">[</span>agt<span class="sym">]</span>ct<span class="sym">/</span>ig<span class="sym">,</span>
  <span class="sym">/</span>agg<span class="sym">[</span>act<span class="sym">]</span>taaa<span class="sym">|</span>ttta<span class="sym">[</span>agt<span class="sym">]</span>cct<span class="sym">/</span>ig<span class="sym">,</span>
  <span class="sym">/</span>aggg<span class="sym">[</span>acg<span class="sym">]</span>aaa<span class="sym">|</span>ttt<span class="sym">[</span>cgt<span class="sym">]</span>ccct<span class="sym">/</span>ig<span class="sym">,</span>
  <span class="sym">/</span>agggt<span class="sym">[</span>cgt<span class="sym">]</span>aa<span class="sym">|</span>tt<span class="sym">[</span>acg<span class="sym">]</span>accct<span class="sym">/</span>ig<span class="sym">,</span>
  <span class="sym">/</span>agggta<span class="sym">[</span>cgt<span class="sym">]</span>a<span class="sym">|</span>t<span class="sym">[</span>acg<span class="sym">]</span>taccct<span class="sym">/</span>ig<span class="sym">,</span>
  <span class="sym">/</span>agggtaa<span class="sym">[</span>cgt<span class="sym">]|[</span>acg<span class="sym">]</span>ttaccct<span class="sym">/</span>ig<span class="sym">],</span>
 subs <span class="sym">= {</span>
  B<span class="sym">:</span> <span class="str">'(c|g|t)'</span><span class="sym">,</span> D<span class="sym">:</span> <span class="str">'(a|g|t)'</span><span class="sym">,</span> H<span class="sym">:</span> <span class="str">'(a|c|t)'</span><span class="sym">,</span> K<span class="sym">:</span> <span class="str">'(g|t)'</span><span class="sym">,</span>
  M<span class="sym">:</span> <span class="str">'(a|c)'</span><span class="sym">,</span> N<span class="sym">:</span> <span class="str">'(a|c|g|t)'</span><span class="sym">,</span> R<span class="sym">:</span> <span class="str">'(a|g)'</span><span class="sym">,</span> S<span class="sym">:</span> <span class="str">'(c|t)'</span><span class="sym">,</span>
  V<span class="sym">:</span> <span class="str">'(a|c|g)'</span><span class="sym">,</span> W<span class="sym">:</span> <span class="str">'(a|t)'</span><span class="sym">,</span> Y<span class="sym">:</span> <span class="str">'(c|t)'</span> <span class="sym">}</span>

<span class="slc">// readline strips the newline...</span>
<span class="kwa">while</span><span class="sym">(</span>l <span class="sym">=</span> <span class="kwd">readline</span><span class="sym">())</span> <span class="kwc">input</span> <span class="sym">+=</span> l <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
ilen <span class="sym">=</span> <span class="kwc">input</span><span class="sym">.</span><span class="kwc">length</span>

<span class="slc">// There is no in-place substitution</span>
<span class="kwc">input</span> <span class="sym">=</span> <span class="kwc">input</span><span class="sym">.</span><span class="kwc">replace</span><span class="sym">(/&gt;.*</span>\n<span class="sym">|</span>\n<span class="sym">/</span>g<span class="sym">,</span><span class="str">&quot;&quot;</span><span class="sym">)</span>
clen <span class="sym">=</span> <span class="kwc">input</span><span class="sym">.</span><span class="kwc">length</span>

<span class="kwa">for</span><span class="sym">(</span>i <span class="kwa">in</span> seqs<span class="sym">)</span>
 <span class="kwc">print</span><span class="sym">(</span>seqs<span class="sym">[</span>i<span class="sym">].</span><span class="kwc">source</span> <span class="sym">+</span> <span class="str">&quot; &quot;</span> <span class="sym">+ (</span><span class="kwc">input</span><span class="sym">.</span><span class="kwc">match</span><span class="sym">(</span>seqs<span class="sym">[</span>i<span class="sym">]) || []).</span><span class="kwc">length</span><span class="sym">)</span>
 <span class="slc">// match returns null if no matches, so replace with empty</span>

<span class="kwa">for</span><span class="sym">(</span>k <span class="kwa">in</span> subs<span class="sym">) {</span>
 <span class="kwc">input</span> <span class="sym">=</span> <span class="kwc">input</span><span class="sym">.</span><span class="kwc">replace</span><span class="sym">(</span><span class="kwc">RegExp</span><span class="sym">(</span>k<span class="sym">,</span> <span class="str">&quot;g&quot;</span><span class="sym">),</span> subs<span class="sym">[</span>k<span class="sym">]);</span>
<span class="sym">}</span>

<span class="kwc">print</span><span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">)</span>
<span class="kwc">print</span><span class="sym">(</span>ilen<span class="sym">)</span>
<span class="kwc">print</span><span class="sym">(</span>clen<span class="sym">)</span>
<span class="kwc">print</span><span class="sym">(</span><span class="kwc">input</span><span class="sym">.</span><span class="kwc">length</span><span class="sym">)</span>

