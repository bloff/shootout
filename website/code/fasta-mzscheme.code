<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; fasta - benchmark</span>
<span class="slc">;;</span>
<span class="slc">;; Derived from the Chicken variant, which was</span>
<span class="slc">;; Contributed by Anthony Borla</span>

<span class="sym">(</span>module fasta mzscheme

  <span class="sym">(</span>define <span class="sym">+</span>alu<span class="sym">+</span>
    <span class="sym">(</span>string<span class="sym">-&gt;</span>bytes<span class="sym">/</span>latin<span class="sym">-</span><span class="num">1</span>
     <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span>
      <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
      <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
      <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
      <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
      <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
      <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
      <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">)))</span>

  <span class="sym">(</span>define <span class="sym">+</span>iub<span class="sym">+</span>
    <span class="sym">(</span><span class="kwa">list</span>
     <span class="str">'(#</span><span class="esc">\a</span> <span class="str">. 0.27) '</span><span class="sym">(</span>#\c . <span class="num">0.12</span><span class="sym">)</span> <span class="str">'(#</span><span class="esc">\g</span> <span class="str">. 0.12) '</span><span class="sym">(</span>#\t . <span class="num">0.27</span><span class="sym">)</span> <span class="str">'(#</span><span class="esc">\B</span> <span class="str">. 0.02)</span>
<span class="str">     '</span><span class="sym">(</span>#\D . <span class="num">0.02</span><span class="sym">)</span> <span class="str">'(#</span><span class="esc">\H</span> <span class="str">. 0.02) '</span><span class="sym">(</span>#\K . <span class="num">0.02</span><span class="sym">)</span> <span class="str">'(#</span><span class="esc">\M</span> <span class="str">. 0.02) '</span><span class="sym">(</span>#\N . <span class="num">0.02</span><span class="sym">)</span>
     <span class="str">'(#</span><span class="esc">\R</span> <span class="str">. 0.02) '</span><span class="sym">(</span>#\S . <span class="num">0.02</span><span class="sym">)</span> <span class="str">'(#</span><span class="esc">\V</span> <span class="str">. 0.02) '</span><span class="sym">(</span>#\W . <span class="num">0.02</span><span class="sym">)</span> <span class="str">'(#</span><span class="esc">\Y</span> <span class="str">. 0.02)))</span>
<span class="str"></span>
<span class="str">  (define +homosapien+</span>
<span class="str">    (list</span>
<span class="str">     '</span><span class="sym">(</span>#\a . <span class="num">0.3029549426680</span><span class="sym">)</span> <span class="str">'(#</span><span class="esc">\c</span> <span class="str">. 0.1979883004921)</span>
<span class="str">     '</span><span class="sym">(</span>#\g . <span class="num">0.1975473066391</span><span class="sym">)</span> <span class="str">'(#</span><span class="esc">\t</span> <span class="str">. 0.3015094502008)))</span>
<span class="str"></span>
<span class="str">  ;; -------------</span>
<span class="str"></span>
<span class="str">  (define +line-size+ 60)</span>
<span class="str"></span>
<span class="str">  ;; -------------------------------</span>
<span class="str"></span>
<span class="str">  (define (make-random seed)</span>
<span class="str">    (let* ((ia 3877) (ic 29573) (im 139968) (last seed))</span>
<span class="str">      (lambda (max)</span>
<span class="str">	(set! last (modulo (+ ic (* last ia)) im))</span>
<span class="str">	(/ (* max last) im) )))</span>
<span class="str"></span>
<span class="str">  ;; -------------------------------</span>
<span class="str"></span>
<span class="str">  (define (make-cumulative-table frequency-table)</span>
<span class="str">    (let ((cumulative 0.0))</span>
<span class="str">      (map</span>
<span class="str">       (lambda (x) (set! cumulative (+ cumulative (cdr x))) (cons (car x) cumulative))</span>
<span class="str">       frequency-table)))</span>
<span class="str"></span>
<span class="str">  ;; -------------</span>
<span class="str"></span>
<span class="str">  (define (make-fasta)</span>
<span class="str">    (let* ((random-next (make-random 42)) (+segmarker+ &quot;&gt;&quot;)</span>
<span class="str"></span>
<span class="str">	   ;; -------------</span>
<span class="str"></span>
<span class="str">	   (select-random</span>
<span class="str">	    (lambda (cumulative-table)</span>
<span class="str">	      (let ((rvalue (random-next 1.0)))</span>
<span class="str">		(let loop ((table cumulative-table))</span>
<span class="str">		  (if (&lt;= rvalue (cdar table)) (caar table)</span>
<span class="str">		      ;; else</span>
<span class="str">		      (loop (cdr table)) )))))</span>
<span class="str"></span>
<span class="str">	   ;; -------------</span>
<span class="str"></span>
<span class="str">	   (repeat-fasta</span>
<span class="str">	    (lambda (id desc n_ sequence line-length)</span>
<span class="str">	      (let ((seqlen (bytes-length sequence)) (k 0))</span>
<span class="str">		(display (string-append +segmarker+ id &quot; &quot; desc &quot;</span><span class="esc">\n</span><span class="str">&quot;))</span>
<span class="str">		(let loop-o ((n n_))</span>
<span class="str">		  (if (&lt;= n 0) '</span><span class="sym">()</span>
		      <span class="slc">;; else</span>
		      <span class="sym">(</span>let <span class="sym">((</span>m <span class="sym">(</span><span class="kwa">min</span> n <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)))</span>
			<span class="sym">(</span>let loop<span class="sym">-</span>i <span class="sym">((</span>i <span class="num">0</span><span class="sym">))</span>
			  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;=</span> i m<span class="sym">)</span> <span class="str">'()</span>
<span class="str">			      ;; else</span>
<span class="str">			      (begin</span>
<span class="str">				(if (= k seqlen) (set! k 0))</span>
<span class="str">				(display (integer-&gt;char (bytes-ref sequence k)))</span>
<span class="str">				(set! k (add1 k))</span>
<span class="str">				(loop-i (add1 i)) )))</span>
<span class="str">			(newline)</span>
<span class="str">			(loop-o (- n line-length)) ))) )))</span>
<span class="str"></span>
<span class="str">	   ;; -------------</span>
<span class="str"></span>
<span class="str">	   (random-fasta</span>
<span class="str">	    (lambda (id desc n_ cumulative-table line-length)</span>
<span class="str">	      (display (string-append +segmarker+ id &quot; &quot; desc &quot;</span><span class="esc">\n</span><span class="str">&quot;))</span>
<span class="str">	      (let loop-o ((n n_))</span>
<span class="str">		(if (&lt;= n 0) '</span><span class="sym">()</span>
		    <span class="slc">;; else</span>
		    <span class="sym">(</span>let <span class="sym">((</span>m <span class="sym">(</span><span class="kwa">min</span> n <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)))</span>
		      <span class="sym">(</span>let loop<span class="sym">-</span>i <span class="sym">((</span>i <span class="num">0</span><span class="sym">))</span>
			<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;=</span> i m<span class="sym">)</span> <span class="str">'()</span>
<span class="str">			    ;; else</span>
<span class="str">			    (begin</span>
<span class="str">			      (display (select-random cumulative-table))</span>
<span class="str">			      (loop-i (add1 i)) )))</span>
<span class="str">		      (newline)</span>
<span class="str">		      (loop-o (- n line-length)) ))) )))</span>
<span class="str"></span>
<span class="str">      ;; -------------</span>
<span class="str"></span>
<span class="str">      (lambda (op)</span>
<span class="str">	(cond</span>
<span class="str">	 ((eq? op '</span><span class="kwa">repeat</span><span class="sym">)</span> <span class="kwa">repeat</span><span class="sym">-</span>fasta<span class="sym">)</span>
	 <span class="sym">((</span><span class="kwa">eq</span>? op <span class="str">'random) random-fasta)</span>
<span class="str">	 (else (lambda () (display &quot;*** make-fasta:invalid operation ***</span><span class="esc">\n</span><span class="str">&quot;))))) ))</span>
<span class="str"></span>
<span class="str">  ;; -------------------------------</span>
<span class="str"></span>
<span class="str">  (define (repeat-fasta fasta id desc n sequence line-length)</span>
<span class="str">    (apply (fasta '</span><span class="kwa">repeat</span><span class="sym">)</span>
	   <span class="sym">(</span><span class="kwa">list</span> id desc n sequence <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)))</span>

  <span class="slc">;; -------------</span>

  <span class="sym">(</span>define <span class="sym">(</span>random<span class="sym">-</span>fasta fasta id desc n cumulative<span class="sym">-</span>table <span class="kwa">line</span><span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">apply</span> <span class="sym">(</span>fasta <span class="str">'random)</span>
<span class="str">	   (list id desc n cumulative-table line-length)))</span>
<span class="str"></span>
<span class="str">  ;; -------------------------------</span>
<span class="str"></span>
<span class="str">  (define (main args)</span>
<span class="str">    (let ((n (string-&gt;number (vector-ref args 0)))</span>
<span class="str"></span>
<span class="str">	  (fasta (make-fasta)))</span>
<span class="str"></span>
<span class="str">      (repeat-fasta fasta</span>
<span class="str">		    &quot;ONE&quot; &quot;Homo sapiens alu&quot; (* n 2) +alu+ +line-size+)</span>
<span class="str"></span>
<span class="str">      (random-fasta fasta</span>
<span class="str">		    &quot;TWO&quot; &quot;IUB ambiguity codes&quot; (* n 3)</span>
<span class="str">		    (make-cumulative-table +iub+) +line-size+)</span>
<span class="str"></span>
<span class="str">      (random-fasta fasta</span>
<span class="str">		    &quot;THREE&quot; &quot;Homo sapiens frequency&quot; (* n 5)</span>
<span class="str">		    (make-cumulative-table +homosapien+) +line-size+) ))</span>
<span class="str"></span>
<span class="str">  ;; -------------------------------</span>
<span class="str"></span>
<span class="str">  (main (current-command-line-arguments)))</span>
<span class="str"></span>
