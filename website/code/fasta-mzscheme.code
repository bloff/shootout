<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; fasta - benchmark</span>
<span class="slc">;;</span>
<span class="slc">;; Derived from the Chicken variant, which was</span>
<span class="slc">;; Contributed by Anthony Borla</span>

<span class="sym">(</span>module fasta mzscheme

  <span class="sym">(</span>define <span class="sym">+</span>alu<span class="sym">+</span>
    <span class="sym">(</span>bytes<span class="sym">-</span><span class="kwa">append</span>
     #<span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
     #<span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
     #<span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
     #<span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
     #<span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
     #<span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
     #<span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">+</span>iub<span class="sym">+</span>
    <span class="sym">(</span><span class="kwa">list</span>
     <span class="sym">'(</span>#\a . <span class="num">0.27</span><span class="sym">) '(</span>#\c . <span class="num">0.12</span><span class="sym">) '(</span>#\g . <span class="num">0.12</span><span class="sym">) '(</span>#\t . <span class="num">0.27</span><span class="sym">) '(</span>#\B . <span class="num">0.02</span><span class="sym">)</span>
     <span class="sym">'(</span>#\D . <span class="num">0.02</span><span class="sym">) '(</span>#\H . <span class="num">0.02</span><span class="sym">) '(</span>#\K . <span class="num">0.02</span><span class="sym">) '(</span>#\M . <span class="num">0.02</span><span class="sym">) '(</span>#\N . <span class="num">0.02</span><span class="sym">)</span>
     <span class="sym">'(</span>#\R . <span class="num">0.02</span><span class="sym">) '(</span>#\S . <span class="num">0.02</span><span class="sym">) '(</span>#\V . <span class="num">0.02</span><span class="sym">) '(</span>#\W . <span class="num">0.02</span><span class="sym">) '(</span>#\Y . <span class="num">0.02</span><span class="sym">)))</span>

  <span class="sym">(</span>define <span class="sym">+</span>homosapien<span class="sym">+</span>
    <span class="sym">(</span><span class="kwa">list</span>
     <span class="sym">'(</span>#\a . <span class="num">0.3029549426680</span><span class="sym">) '(</span>#\c . <span class="num">0.1979883004921</span><span class="sym">)</span>
     <span class="sym">'(</span>#\g . <span class="num">0.1975473066391</span><span class="sym">) '(</span>#\t . <span class="num">0.3015094502008</span><span class="sym">)))</span>

  <span class="slc">;; -------------</span>

  <span class="sym">(</span>define <span class="sym">+</span><span class="kwa">line</span><span class="sym">-</span>size<span class="sym">+</span> <span class="num">60</span><span class="sym">)</span>

  <span class="slc">;; -------------------------------</span>

  <span class="sym">(</span>define <span class="sym">(</span>make<span class="sym">-</span>random seed<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ((</span>ia <span class="num">3877</span><span class="sym">) (</span>ic <span class="num">29573</span><span class="sym">) (</span>im <span class="num">139968</span><span class="sym">) (</span><span class="kwa">last</span> seed<span class="sym">))</span>
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span><span class="kwa">max</span><span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> <span class="kwa">last</span> <span class="sym">(</span>modulo <span class="sym">(+</span> ic <span class="sym">(*</span> <span class="kwa">last</span> ia<span class="sym">))</span> 