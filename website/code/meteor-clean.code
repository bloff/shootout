<span class="sym">/*</span> The Computer Language Shootout
   http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>

   Contributed by Tim Hochberg.

   Some ideas taken from Olof Kraigher's Python and GHC implementations
   and Ben St. John's GCC implementation.
<span class="sym">*/</span>


<span class="kwa">module</span> meteor

<span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout<span class="sym">,</span> StdLib<span class="sym">,</span> StdStrictLists


Start
    <span class="sym">=</span> toString <span class="sym">(</span>length solns<span class="sym">) +++</span> <span class="str">&quot; solutions found\n\n&quot;</span>
    <span class="sym">+++</span> format <span class="sym">(</span>hd solns<span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span>
    <span class="sym">+++</span> format <span class="sym">(</span>last solns<span class="sym">) +++</span> <span class="str">&quot;\n&quot;</span>
<span class="kwa">where</span>
    solns <span class="sym">=  (</span>sort <span class="sym">(</span>take argi <span class="sym">[</span>x \\ x <span class="sym">&lt;|-</span> solutions<span class="sym">]))</span>


<span class="sym">//</span> <span class="slc">--- Generate the solutions ---</span>

firstZero <span class="sym">::</span> {#<span class="kwb">Int</span>}
firstZero <span class="sym">=:</span> {<span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">2</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">3</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">2</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">4</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">2</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">3</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">2</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">5</span>}

solutions <span class="sym">=:</span> solveCell <span class="num">0</span> <span class="sym">[</span>#c \\ c <span class="sym">&lt;-</span> COLORS<span class="sym">!]</span> <span class="num">0</span> <span class="sym">[</span>#<span class="sym">!] [!]</span>
  <span class="kwa">where</span>
    solveCell <span class="sym">::  !</span><span class="kwb">Int</span> <span class="sym">[</span>#<span class="kwb">Int</span><span class="sym">!] !</span><span class="kwb">Int</span> <span class="sym">!</span>Solution <span class="sym">*[!</span>String<span class="sym">] -&gt; *[!</span>String<span class="sym">]</span>
    solveCell _  <span class="sym">[</span>#<span class="sym">!]</span>  _  soln results
        <span class="sym">= [!</span>s<span class="sym">,</span> revString s<span class="sym">:</span>results<span class="sym">]</span> with s <span class="sym">=</span> toString soln
    solveCell row todo board soln results
        #<span class="sym">!</span> top <span class="sym">=</span> board bitand M_TOP
        <span class="sym">|</span> top <span class="sym">==</span> M_TOP
            <span class="sym">=</span> solveCell <span class="sym">(</span>row<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> todo <span class="sym">(</span>board <span class="sym">&gt;&gt;</span> N_COL<span class="sym">)</span> soln results
        #<span class="sym">!</span> col <span class="sym">=</span> firstZero.<span class="sym">[</span>top<span class="sym">]</span>
        #<span class="sym">!</span> masks <span class="sym">=</span> masksAtCell.<span class="sym">[</span>row<span class="sym">]</span>.<span class="sym">[</span>col<span class="sym">]</span>
        <span class="sym">|</span> otherwise
            <span class="sym">=</span> foldr solveMask results <span class="sym">[</span>m \\ c <span class="sym">&lt;|-</span> todo<span class="sym">,</span> m  <span class="sym">&lt;|-</span> masks.<span class="sym">[</span>c<span class="sym">] |</span> board bitand m <span class="sym">==</span> <span class="num">0</span><span class="sym">]</span>
      <span class="kwa">where</span>
        solveMask <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">*[!</span>String<span class="sym">] -&gt; *[!</span>String<span class="sym">]</span>
        solveMask m results
            <span class="sym">=</span> solveCell row <span class="sym">(</span>remove <span class="sym">(</span>tagof m<span class="sym">)</span> todo<span class="sym">) ((</span>untag m<span class="sym">)</span> bitor board<span class="sym">) [</span>#m<span class="sym">:</span>soln<span class="sym">!]</span> results
    remove<span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">!</span>u<span class="sym">:[</span>#<span class="kwb">Int</span><span class="sym">!] -&gt;</span> u<span class="sym">:[</span>#<span class="kwb">Int</span><span class="sym">!]</span>
    remove e <span class="sym">[</span>#a<span class="sym">:</span><span class="kwa">as</span><span class="sym">!]</span>
        <span class="sym">|</span> a<span class="sym">==</span>e		<span class="sym">=</span> <span class="kwa">as</span>
                    <span class="sym">= [</span>#a<span class="sym">:</span>remove e <span class="kwa">as</span><span class="sym">!]</span>
    remove e <span class="sym">[</span>#<span class="sym">!] = [</span>#<span class="sym">!]</span>



<span class="sym">//</span> <span class="slc">--- Formatting ---</span>

<span class="sym">::</span> Solution <span class="sym">:== [</span>#<span class="kwb">Int</span><span class="sym">!]</span>

format <span class="sym">::</span> String <span class="sym">-&gt;</span> String
format raw <span class="sym">=</span> format_ <span class="sym">[</span>c \\ c <span class="sym">&lt;-:</span> raw<span class="sym">]</span> <span class="kwa">False</span>
  <span class="kwa">where</span>
    format_ <span class="sym">:: [</span><span class="kwb">Char</span><span class="sym">]</span> <span class="kwb">Bool</span> <span class="sym">-&gt;</span> String
    format_ <span class="sym">[]</span> _ <span class="sym">=</span> <span class="str">&quot;&quot;</span>
    format_ chars isodd
        # <span class="sym">(</span>cur<span class="sym">,</span> rest<span class="sym">) =</span> splitAt <span class="num">5</span> chars
        # spaced <span class="sym">=</span> flatten <span class="sym">[[</span>c<span class="sym">,</span> ' '<span class="sym">]</span> \\ c <span class="sym">&lt;-</span> cur<span class="sym">]</span>
        # str <span class="sym">=</span> {c \\ c <span class="sym">&lt;-</span> spaced} <span class="sym">+++</span> <span class="str">&quot;\n&quot;</span> <span class="sym">+++</span> format_ rest <span class="sym">(</span>not isodd<span class="sym">)</span>
        <span class="sym">= (</span>if isodd <span class="str">&quot; &quot;</span> <span class="str">&quot;&quot;</span><span class="sym">) +++</span> str

<span class="kwa">instance</span> toString Solution
  <span class="kwa">where</span>
    toString <span class="sym">::</span> Solution <span class="sym">-&gt;</span> {#<span class="kwb">Char</span>}
    toString masks <span class="sym">=</span> {color n \\ n <span class="sym">&lt;-</span> CELLS} <span class="kwa">where</span>
        color n <span class="sym">=</span> <span class="str">&quot;0123456789.&quot;</span>.<span class="sym">[</span>if <span class="sym">(</span>isNothing x<span class="sym">)</span> <span class="num">10</span> <span class="sym">((</span>tagof o snd o fromJust<span class="sym">)</span> x<span class="sym">)]</span> <span class="kwa">where</span>
            x <span class="sym">=</span>  find matches masksWithRows
            matches <span class="sym">(</span>r<span class="sym">,</span> m<span class="sym">)</span>
                # n` <span class="sym">=</span> n <span class="sym">-</span> N_COL <span class="sym">*</span> r
                <span class="sym">|</span> n` <span class="sym">&lt;</span> <span class="num">0</span>     <span class="sym">=</span> <span class="kwa">False</span>
                <span class="sym">|</span> n` <span class="sym">&gt;</span> <span class="num">30</span>    <span class="sym">=</span> <span class="kwa">False</span>
                <span class="sym">|</span> otherwise <span class="sym">= (</span>untag m<span class="sym">)</span> bitand <span class="sym">(</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n`<span class="sym">) &lt;&gt;</span> <span class="num">0</span>
        <span class="sym">//</span> The row associated with each mask is implicit <span class="kwa">in</span> the order that appears
        masksWithRows <span class="sym">=</span> withRows <span class="num">0 0</span> <span class="sym">(</span>reverse  <span class="sym">[</span>m \\ m<span class="sym">&lt;|-</span>masks<span class="sym">])</span>
        withRows _ _ <span class="sym">[] = []</span>
        withRows board r <span class="sym">[</span>m<span class="sym">:</span>rest<span class="sym">]</span>
            # delta <span class="sym">=</span> first0 board <span class="sym">/</span> N_COL
            # board <span class="sym">= (</span>board <span class="sym">&gt;&gt;  (</span>delta <span class="sym">*</span> N_COL<span class="sym">))</span> bitor <span class="sym">(</span>untag m<span class="sym">)</span>
            # r <span class="sym">=</span> r<span class="sym">+</span>delta
            <span class="sym">= [(</span>r<span class="sym">,</span> m<span class="sym">):</span>withRows board r rest<span class="sym">]</span>

revString <span class="sym">::</span> u<span class="sym">:</span>{#<span class="kwb">Char</span>} <span class="sym">-&gt;</span> u<span class="sym">:</span>{#<span class="kwb">Char</span>}
revString a
    # <span class="sym">(</span>n<span class="sym">,</span> a<span class="sym">) =</span> usize a
    <span class="sym">=</span> {createArray n ' ' <span class="sym">&amp; [</span>i<span class="sym">]=</span>c \\ c <span class="sym">&lt;-:</span> a <span class="sym">&amp;</span> i <span class="sym">&lt;- [</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">-</span><span class="num">2</span>.<span class="num">.0</span><span class="sym">]</span>}


<span class="sym">//</span> <span class="slc">--- The Board ---</span>
N_ELEM <span class="sym">:==</span> <span class="num">5</span>
N_COL <span class="sym">:==</span> <span class="num">5</span>
N_ROW <span class="sym">:==</span> <span class="num">10</span>
M_TOP <span class="sym">:==</span> <span class="num">0x1F</span>
CELLS <span class="sym">=: [</span><span class="num">0</span>.<span class="num">.49</span><span class="sym">]</span>
COLORS <span class="sym">=: [</span><span class="num">0</span>.<span class="num">.9</span><span class="sym">]</span>

cellAt x y <span class="sym">:==</span> x <span class="sym">+</span> N_COL<span class="sym">*</span>y
coordOf i <span class="sym">:== (</span>i rem N_COL<span class="sym">,</span> i <span class="sym">/</span> N_COL<span class="sym">)</span>
isValid x y <span class="sym">:==</span> <span class="num">0</span> <span class="sym">&lt;=</span> x <span class="sym">&amp;&amp;</span> x <span class="sym">&lt;</span> N_COL <span class="sym">&amp;&amp;</span> <span class="num">0</span> <span class="sym">&lt;=</span> y <span class="sym">&amp;&amp;</span> y <span class="sym">&lt;</span> N_ROW


<span class="sym">//</span> <span class="slc">--- Piece Operations ---</span>

<span class="sym">::</span> Dir <span class="sym">=</span> E <span class="sym">|</span> NE <span class="sym">|</span> NW <span class="sym">|</span> W <span class="sym">|</span> SW <span class="sym">|</span> SE
DIRECTIONS <span class="sym">=: [</span>E<span class="sym">,</span> NE<span class="sym">,</span> NW<span class="sym">,</span> W<span class="sym">,</span> SW<span class="sym">,</span> SE<span class="sym">]</span>

<span class="sym">::</span> Piece <span class="sym">:== [</span>Dir<span class="sym">]</span>

pieces <span class="sym">::</span> {Piece}
pieces <span class="sym">=:</span> { <span class="sym">[</span>E<span class="sym">,</span> E<span class="sym">,</span> E<span class="sym">,</span> SE<span class="sym">]</span>
          <span class="sym">, [</span>SE<span class="sym">,</span> SW<span class="sym">,</span> W<span class="sym">,</span> SW<span class="sym">]</span>
          <span class="sym">, [</span>W<span class="sym">,</span> W<span class="sym">,</span> SW<span class="sym">,</span> SE<span class="sym">]</span>
          <span class="sym">, [</span>E <span class="sym">,</span> E<span class="sym">,</span> SW<span class="sym">,</span> SE<span class="sym">]</span>
          <span class="sym">, [</span>NW<span class="sym">,</span> W<span class="sym">,</span> NW<span class="sym">,</span> SE<span class="sym">,</span> SW<span class="sym">]</span>
          <span class="sym">, [</span>E<span class="sym">,</span> E<span class="sym">,</span> NE<span class="sym">,</span> W<span class="sym">]</span>
          <span class="sym">, [</span>NW<span class="sym">,</span> NE<span class="sym">,</span> NE<span class="sym">,</span> W<span class="sym">]</span>
          <span class="sym">, [</span>NE<span class="sym">,</span> SE<span class="sym">,</span> E<span class="sym">,</span> NE<span class="sym">]</span>
          <span class="sym">, [</span>SE<span class="sym">,</span> SE<span class="sym">,</span> E<span class="sym">,</span> SE<span class="sym">]</span>
          <span class="sym">, [</span>E<span class="sym">,</span> NW<span class="sym">,</span> NW<span class="sym">,</span> NW<span class="sym">]</span>
          }

permutations p <span class="sym">=</span> take <span class="num">12</span> <span class="sym">(</span>perms p<span class="sym">)</span>
  <span class="kwa">where</span>
    perms p <span class="sym">= [</span>p<span class="sym">, (</span>flip p<span class="sym">):</span> perms <span class="sym">(</span>rotate p<span class="sym">)]</span>
    rotate piece <span class="sym">=</span> map r piece
      <span class="kwa">where</span> r E  <span class="sym">=</span> NE
            r NE <span class="sym">=</span> NW
            r NW <span class="sym">=</span> W
            r W  <span class="sym">=</span> SW
            r SW <span class="sym">=</span> SE
            r SE <span class="sym">=</span> E
    flip piece <span class="sym">=</span> map f piece
      <span class="kwa">where</span> f E  <span class="sym">=</span> W
            f NE <span class="sym">=</span> NW
            f NW <span class="sym">=</span> NE
            f W  <span class="sym">=</span> E
            f SW <span class="sym">=</span> SE
            f SE <span class="sym">=</span> SW


<span class="sym">//</span> <span class="slc">--- Mask Operations ----</span>

<span class="sym">//</span> Most <span class="kwa">of</span> the time we only use <span class="num">25</span> bits <span class="kwa">of</span> a mask
<span class="sym">//</span> so we store info <span class="kwa">in</span> a <span class="num">5</span> bit tag.
set   mask n <span class="sym">:==</span> mask bitor <span class="sym">(</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n<span class="sym">)</span>
test1 mask n <span class="sym">:==</span> mask bitand <span class="sym">(</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n<span class="sym">) &lt;&gt;</span> <span class="num">0</span>
test0 mask n <span class="sym">:==</span> mask bitand <span class="sym">(</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n<span class="sym">) ==</span> <span class="num">0</span>
retag mask n <span class="sym">:== (</span>mask bitand <span class="num">0x1ffffff</span><span class="sym">)</span> bitor n <span class="sym">&lt;&lt;</span> <span class="num">25</span>
tagof mask   <span class="sym">:==  (</span>mask <span class="sym">&gt;&gt;</span> <span class="num">25</span><span class="sym">)</span>
tag   mask n <span class="sym">:==</span> mask bitor <span class="sym">(</span>n <span class="sym">&lt;&lt;</span> <span class="num">25</span><span class="sym">)</span>
untag mask   <span class="sym">:== (</span>mask bitand <span class="num">0x1ffffff</span><span class="sym">)</span>

count1s <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span>
count1s <span class="num">0</span> <span class="sym">=</span> <span class="num">0</span>
count1s i <span class="sym">= (</span>if <span class="sym">(</span>i bitand <span class="num">1</span> <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span> <span class="num">1 0</span><span class="sym">) +</span> count1s <span class="sym">(</span>i <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">)</span>

first0 <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span>
first0 i <span class="sym">=</span> if <span class="sym">(</span>i bitand <span class="num">1</span> <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="num">0</span> <span class="sym">(</span><span class="num">1</span> <span class="sym">+</span> first0 <span class="sym">(</span>i <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">))</span>


<span class="sym">//</span> <span class="slc">--- Making the Bitmasks ---</span>

<span class="kwa">instance</span> mod <span class="kwb">Int</span>
  <span class="kwa">where</span> mod a b <span class="sym">=</span> if <span class="sym">(</span>r <span class="sym">&lt;</span> <span class="num">0</span><span class="sym">) (</span>r <span class="sym">+</span> b<span class="sym">)</span> r with r <span class="sym">=</span> a rem b

move <span class="sym">:: !</span>Dir <span class="sym">(!</span><span class="kwb">Int</span><span class="sym">, !</span><span class="kwb">Int</span><span class="sym">) -&gt; (!</span><span class="kwb">Int</span><span class="sym">, !</span><span class="kwb">Int</span><span class="sym">)</span>
move E  <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">) = (</span>x<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> y<span class="sym">)</span>
move W  <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">) = (</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> y<span class="sym">)</span>
move NE <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">) = (</span>x<span class="sym">+(</span>y mod <span class="num">2</span><span class="sym">),</span> y<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
move NW <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">) = (</span>x<span class="sym">+(</span>y mod <span class="num">2</span><span class="sym">)-</span><span class="num">1</span><span class="sym">,</span> y<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
move SE <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">) = (</span>x<span class="sym">+(</span>y mod <span class="num">2</span><span class="sym">),</span> y<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
move SW <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">) = (</span>x<span class="sym">+(</span>y mod <span class="num">2</span><span class="sym">)-</span><span class="num">1</span><span class="sym">,</span> y<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>

packSize a b <span class="sym">:==</span> a<span class="sym">*</span><span class="num">5</span><span class="sym">+</span>b
unpackSize n <span class="sym">:== (</span>n<span class="sym">/</span><span class="num">5</span><span class="sym">,</span> n rem <span class="num">5</span><span class="sym">)</span>


pieceBounds piece isodd <span class="sym">:==</span> bounds piece <span class="num">0</span> y0 <span class="num">0</span> y0 <span class="num">0</span> y0 with y0 <span class="sym">= (</span>if isodd <span class="num">1 0</span><span class="sym">)</span>
  <span class="kwa">where</span>
    bounds <span class="sym">[]</span> _ _ xmin ymin xmax ymax <span class="sym">= (</span>xmin<span class="sym">,</span> ymin<span class="sym">,</span> xmax<span class="sym">,</span> ymax<span class="sym">)</span>
    bounds <span class="sym">[</span>d<span class="sym">:</span>rest<span class="sym">]</span> x y xmin ymin xmax ymax
        # <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">) =</span> move d <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">)</span>
        <span class="sym">=</span> bounds rest x y <span class="sym">(</span>min x xmin<span class="sym">) (</span>min y ymin<span class="sym">) (</span>max x xmax<span class="sym">) (</span>max y ymax<span class="sym">)</span>


pieceMask piece
    # <span class="sym">(</span>xmin<span class="sym">,</span> ymin<span class="sym">,</span> xmax<span class="sym">,</span> ymax<span class="sym">) =</span> pieceBounds piece <span class="kwa">False</span>
    # <span class="sym">(</span>x1<span class="sym">,</span> y1<span class="sym">) = (~</span>xmin<span class="sym">, ~</span>ymin<span class="sym">)</span>
    # swap <span class="sym">=</span> y1 rem <span class="num">2</span> <span class="sym">&lt;&gt;</span> <span class="num">0</span>
    # w1 <span class="sym">=</span> xmax <span class="sym">-</span> xmin
    # h1 <span class="sym">=</span> ymax <span class="sym">-</span> ymin
    # <span class="sym">(</span>xmin<span class="sym">,</span> ymin<span class="sym">,</span> xmax<span class="sym">,</span> ymax<span class="sym">) =</span> pieceBounds piece <span class="kwa">True</span>
    # <span class="sym">(</span>x2<span class="sym">,</span> y2<span class="sym">) = (~</span>xmin<span class="sym">, ~</span>ymin<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
    # w2 <span class="sym">=</span> xmax <span class="sym">-</span> xmin
    # h2 <span class="sym">=</span> ymax <span class="sym">-</span> ymin
    <span class="sym">|</span> swap      <span class="sym">= (</span>tag <span class="sym">(</span>mask piece x2 y2 <span class="num">0</span><span class="sym">) (</span>packSize w2 h2<span class="sym">),</span> tag <span class="sym">(</span>mask piece x1 <span class="sym">(</span>y1<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="num">0</span> <span class="sym">&gt;&gt;</span> N_COL<span class="sym">) (</span>packSize w1 h1<span class="sym">))</span>
    <span class="sym">|</span> otherwise <span class="sym">= (</span>tag <span class="sym">(</span>mask piece x1 y1 <span class="num">0</span><span class="sym">) (</span>packSize w1 h1<span class="sym">),</span> tag <span class="sym">(</span>mask piece x2 <span class="sym">(</span>y2<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="num">0</span> <span class="sym">&gt;&gt;</span> N_COL<span class="sym">) (</span>packSize w2 h2<span class="sym">))</span>
  <span class="kwa">where</span>
    mask <span class="sym">[]</span> x y m <span class="sym">=</span> m bitor <span class="sym">(</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> cellAt x y<span class="sym">)</span>
    mask <span class="sym">[</span>d<span class="sym">:</span>rest<span class="sym">]</span> x y m
        <span class="sym">=</span> mask rest x` y` <span class="sym">(</span>m bitor <span class="sym">(</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> cellAt x y<span class="sym">))</span>
                           with <span class="sym">(</span>x`<span class="sym">,</span> y`<span class="sym">) =</span> move d <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">)</span>


templatesForColor c <span class="sym">= (</span>unzip o map pieceMask<span class="sym">)</span> perms
    <span class="kwa">where</span> perms <span class="sym">=</span> if <span class="sym">(</span>c <span class="sym">==</span> <span class="num">5</span><span class="sym">) (</span>take <span class="num">6</span> ps<span class="sym">)</span> ps
          ps <span class="sym">=</span> permutations pieces.<span class="sym">[</span>c<span class="sym">]</span>


masksForColor <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">-&gt; [(!</span><span class="kwb">Int</span><span class="sym">, !</span><span class="kwb">Int</span><span class="sym">)]</span>
masksForColor c <span class="sym">=</span> flatten <span class="sym">[</span>atCell n \\ n <span class="sym">&lt;-</span> CELLS<span class="sym">]</span>
  <span class="kwa">where</span>
    <span class="sym">(</span>even<span class="sym">,</span> odd<span class="sym">) =</span> templatesForColor c
    atCell n
        # <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">) =</span> coordOf n
        <span class="sym">|</span> isEven y <span class="sym">= [(</span>y<span class="sym">,</span> retag <span class="sym">(</span>m <span class="sym">&lt;&lt;</span> x<span class="sym">)</span> c<span class="sym">)</span> \\ m <span class="sym">&lt;-</span> even <span class="sym">|</span> isok m x y<span class="sym">]</span>
        <span class="sym">|</span> isOdd y  <span class="sym">= [(</span>y<span class="sym">,</span> retag <span class="sym">(</span>m <span class="sym">&lt;&lt;</span> x<span class="sym">)</span> c<span class="sym">)</span> \\ m <span class="sym">&lt;-</span> odd  <span class="sym">|</span> isok m x y<span class="sym">]</span>
    isok mask x y
        # <span class="sym">(</span>width<span class="sym">,</span> height<span class="sym">) =</span> unpackSize <span class="sym">(</span>tagof mask<span class="sym">)</span>
        # mask <span class="sym">=</span> untag mask <span class="sym">&lt;&lt;</span> x
        <span class="sym">=</span>    isValid <span class="sym">(</span>x<span class="sym">+</span>width<span class="sym">) (</span>y<span class="sym">+</span>height<span class="sym">)</span>
          <span class="sym">&amp;&amp;</span> <span class="kwa">case</span> <span class="sym">(</span>y <span class="sym">==</span> <span class="num">0</span><span class="sym">,</span> y<span class="sym">+</span>height<span class="sym">==</span><span class="num">9</span><span class="sym">)</span> <span class="kwa">of</span>
                <span class="sym">(</span><span class="kwa">False</span><span class="sym">,</span> <span class="kwa">False</span><span class="sym">) =</span> noLeftIslands mask <span class="sym">&amp;&amp;</span> noRightIslands mask
                <span class="sym">(</span><span class="kwa">True</span><span class="sym">,</span> <span class="kwa">False</span><span class="sym">)  =</span> noIslands mask
                <span class="sym">(</span><span class="kwa">False</span><span class="sym">,</span> <span class="kwa">True</span><span class="sym">)  =</span> noIslands <span class="sym">(</span>mask <span class="sym">&lt;&lt; (</span>N_COL<span class="sym">*(</span>y <span class="sym">-</span> <span class="num">4</span><span class="sym">)))</span>


<span class="sym">::</span> MaskData <span class="sym">:==</span> {<span class="sym">!</span>{<span class="sym">!</span>{<span class="sym">![</span>#<span class="kwb">Int</span><span class="sym">!]</span>}}}

masksAtCell <span class="sym">::</span> MaskData
masksAtCell <span class="sym">=:</span> transpose {<span class="kwa">let</span> mc <span class="sym">=</span> masksForColor c <span class="kwa">in</span> {m \\ m <span class="sym">&lt;-</span> masksAt mc CELLS} \\ c <span class="sym">&lt;-</span> COLORS}
  <span class="kwa">where</span>
    masksAt <span class="sym">:: ![(</span><span class="kwb">Int</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">)] ![</span><span class="kwb">Int</span><span class="sym">] -&gt; [[</span>#<span class="kwb">Int</span><span class="sym">!]]</span>
    masksAt masks <span class="sym">[] = []</span>
    masksAt masks <span class="sym">[</span>n<span class="sym">:</span>ns<span class="sym">] = [[</span>#snd x \\ x <span class="sym">&lt;-</span> t<span class="sym">!]:</span>masksAt f ns<span class="sym">]</span>
      <span class="kwa">where</span>
        <span class="sym">(</span>t<span class="sym">,</span> f<span class="sym">) =</span> partition test masks
        test <span class="sym">(</span>r<span class="sym">,</span> m<span class="sym">) =</span> n` <span class="sym">&gt;=</span> <span class="num">0</span> <span class="sym">&amp;&amp;</span> n` <span class="sym">&lt;</span> <span class="num">25</span> <span class="sym">&amp;&amp; (</span>untag m<span class="sym">)</span> bitand <span class="sym">(</span><span class="num">1</span> <span class="sym">&lt;&lt;</span> n`<span class="sym">) &lt;&gt;</span> <span class="num">0</span>
                    with n` <span class="sym">=</span> n <span class="sym">-</span> N_COL <span class="sym">*</span> r
    transpose <span class="sym">::</span>{{<span class="sym">[</span>#<span class="kwb">Int</span><span class="sym">!]</span>}} <span class="sym">-&gt;</span> MaskData
    transpose a <span class="sym">=</span> {copy.<span class="sym">[</span>y<span class="sym">]</span> \\ y <span class="sym">&lt;- [</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">2</span><span class="sym">,</span><span class="num">3</span><span class="sym">,</span><span class="num">4</span><span class="sym">,</span><span class="num">5</span><span class="sym">,</span><span class="num">6</span><span class="sym">]</span>}
      <span class="kwa">where</span>
        copy <span class="sym">::</span> MaskData
        copy <span class="sym">=</span> {{{<span class="sym">[</span>#x \\ x <span class="sym">&lt;|-</span> a.<span class="sym">[</span>i<span class="sym">]</span>.<span class="sym">[</span>cellAt x y<span class="sym">]!]</span> \\ i <span class="sym">&lt;-</span> COLORS} \\ x <span class="sym">&lt;- [</span><span class="num">0</span>..N_COL<span class="sym">-</span><span class="num">1</span><span class="sym">]</span>} \\ y <span class="sym">&lt;- [</span><span class="num">1</span><span class="sym">,</span><span class="num">2</span><span class="sym">,</span><span class="num">5</span><span class="sym">,</span><span class="num">6</span><span class="sym">,</span><span class="num">7</span><span class="sym">,</span><span class="num">8</span><span class="sym">,</span><span class="num">9</span><span class="sym">]</span>}



<span class="sym">//</span> <span class="slc">--- Looking for Islands ---</span>

noLineIslands mask start stop step
    # n <span class="sym">=</span> find test1 start step mask
    # n <span class="sym">=</span> find test0 n     step mask
    # n <span class="sym">=</span> find test1 n     step mask
    <span class="sym">|</span> n <span class="sym">&gt;</span> stop  <span class="sym">=</span> <span class="kwa">True</span>
    <span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">False</span>
  <span class="kwa">where</span>
    find test n dn mask
        <span class="sym">|</span> n <span class="sym">&gt;=</span> <span class="num">25</span>       <span class="sym">=</span> <span class="num">25</span>
        <span class="sym">|</span> test mask n   <span class="sym">=</span> n
        <span class="sym">|</span> otherwise     <span class="sym">=</span> find test <span class="sym">(</span>n<span class="sym">+</span>dn<span class="sym">)</span> dn mask
noLeftIslands mask   <span class="sym">:==</span> noLineIslands mask <span class="num">0  20 5</span>
noRightIslands mask  <span class="sym">:==</span> noLineIslands mask <span class="num">4  24 5</span>

noIslands board <span class="sym">:==</span> noisles board <span class="sym">(</span>count1s board<span class="sym">)</span>
  <span class="kwa">where</span>
    noisles <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span>  <span class="sym">-&gt;</span> <span class="kwb">Bool</span>
    noisles _ <span class="num">30</span> <span class="sym">=</span> <span class="kwa">True</span>
    noisles board ones
        # board <span class="sym">=</span> fill board <span class="sym">(</span>coordOf <span class="sym">(</span>first0 board<span class="sym">))</span>
        # ones` <span class="sym">=</span> count1s board
        <span class="sym">| (</span>ones` <span class="sym">-</span> ones<span class="sym">)</span> rem N_ELEM <span class="sym">&lt;&gt;</span> <span class="num">0</span>    <span class="sym">=</span> <span class="kwa">False</span>
        <span class="sym">|</span> otherwise                         <span class="sym">=</span> noisles board ones`
    fill <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!(!</span><span class="kwb">Int</span><span class="sym">, !</span><span class="kwb">Int</span><span class="sym">) -&gt;</span> <span class="kwb">Int</span>
    fill m <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">)</span>
        <span class="sym">|</span> x <span class="sym">&lt;</span> <span class="num">0</span> <span class="sym">||</span> x <span class="sym">&gt;=</span> N_COL <span class="sym">=</span> m
        <span class="sym">|</span> y <span class="sym">&lt;</span> <span class="num">0</span> <span class="sym">||</span> y <span class="sym">&gt;=</span> <span class="num">6</span>     <span class="sym">=</span> m
        # i <span class="sym">=</span> cellAt x y
        <span class="sym">|</span> test1 m i			  <span class="sym">=</span> m
        <span class="sym">=</span> foldl <span class="sym">(</span>\m d <span class="sym">-&gt;</span> fill m <span class="sym">(</span>move d <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">))) (</span>set m i<span class="sym">)</span> DIRECTIONS

