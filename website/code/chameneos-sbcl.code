<span class="slc">;;; The Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; Contributed by: Shyamal Prasad</span>


<span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)</span>
		   <span class="sym">(</span>safety <span class="num">0</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">))</span>
	 <span class="sym">(</span>inline complement<span class="sym">-</span>color<span class="sym">))</span>

<span class="sym">(</span><span class="kwa">defun</span> complement<span class="sym">-</span>color <span class="sym">(</span>x y<span class="sym">)</span>
  <span class="str">&quot;Given color x and color y return a complement for color x&quot;</span>
  <span class="sym">(</span><span class="kwa">cond</span>
   <span class="sym">((</span><span class="kwa">eq</span> x <span class="str">'blue)</span>
<span class="str">    (if (eq y '</span>red<span class="sym">)</span>
	<span class="str">'yellow</span>
<span class="str">      '</span>red<span class="sym">))</span>

   <span class="sym">((</span><span class="kwa">eq</span> x <span class="str">'red)</span>
<span class="str">    (if (eq y '</span>blue<span class="sym">)</span>
	<span class="str">'yellow</span>
<span class="str">      '</span>blue<span class="sym">))</span>

   <span class="sym">((</span><span class="kwa">eq</span> x <span class="str">'yellow)</span>
<span class="str">    (if (eq y '</span>blue<span class="sym">)</span>
	<span class="str">'red</span>
<span class="str">      '</span>blue<span class="sym">))</span>
   <span class="sym">(</span>t
    <span class="sym">(</span>error <span class="str">&quot;oops&quot;</span><span class="sym">))))</span>

<span class="slc">;; the mutex/cv used to get access to the room and find other chameneos</span>
<span class="sym">(</span>defvar <span class="sym">*</span>room<span class="sym">-</span>lock<span class="sym">* (</span>sb<span class="sym">-</span>thread<span class="sym">:</span>make<span class="sym">-</span>mutex<span class="sym">))</span>
<span class="sym">(</span>defvar <span class="sym">*</span>wait<span class="sym">-</span>queue<span class="sym">* (</span>sb<span class="sym">-</span>thread<span class="sym">:</span>make<span class="sym">-</span>waitqueue<span class="sym">))</span>

<span class="slc">;; Variables in the room - get *room-lock* before touching these</span>
<span class="sym">(</span>declaim <span class="sym">(</span>fixnum <span class="sym">*</span>meetings<span class="sym">-</span>left<span class="sym">*) (</span>symbol <span class="sym">*</span>waiting<span class="sym">-</span>color<span class="sym">* *</span>incoming<span class="sym">-</span>color<span class="sym">*))</span>
<span class="sym">(</span>defvar <span class="sym">*</span>meetings<span class="sym">-</span>left<span class="sym">*</span> <span class="num">100</span><span class="sym">)</span>
<span class="sym">(</span>defvar <span class="sym">*</span>waiting<span class="sym">-</span>color<span class="sym">*</span> nil<span class="sym">)</span>
<span class="sym">(</span>defvar <span class="sym">*</span>incoming<span class="sym">-</span>color<span class="sym">*</span> nil<span class="sym">)</span>

<span class="slc">;; mutex/cv to used by main thread to learn that chameneos are done</span>
<span class="slc">;; SBCL currently (seems) to have no way to join a thread</span>
<span class="sym">(</span>defvar <span class="sym">*</span>done<span class="sym">-</span>lock<span class="sym">* (</span>sb<span class="sym">-</span>thread<span class="sym">:</span>make<span class="sym">-</span>mutex<span class="sym">))</span>
<span class="sym">(</span>defvar <span class="sym">*</span>done<span class="sym">-</span>queue<span class="sym">* (</span>sb<span class="sym">-</span>thread<span class="sym">:</span>make<span class="sym">-</span>waitqueue<span class="sym">))</span>
<span class="sym">(</span>defvar <span class="sym">*</span>met<span class="sym">-</span><span class="kwa">list</span><span class="sym">*</span> nil<span class="sym">)</span> <span class="slc">; chameneos results, updated with *done-lock* held</span>

<span class="slc">;;Return a closure representing the chameneos creature with specified color.</span>
<span class="slc">;;When run the creature will try to meet others in the room</span>
<span class="sym">(</span><span class="kwa">defun</span> make<span class="sym">-</span>chameneos <span class="sym">(</span>color<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>symbol color<span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((</span>meetings <span class="num">0</span><span class="sym">)</span>
	<span class="sym">(</span>other<span class="sym">-</span>color nil<span class="sym">))</span>
    <span class="sym">(</span>declare <span class="sym">(</span>fixnum meetings<span class="sym">) (</span>symbol other<span class="sym">-</span>color<span class="sym">))</span>
    #<span class="str">'(lambda ()</span>
<span class="str">	(loop</span>
<span class="str">	 (sb-thread:with-mutex (*room-lock*)</span>
<span class="str">	   (when (&lt; *meetings-left* 1)</span>
<span class="str">	     (return))</span>
<span class="str">	   (cond</span>
<span class="str">	    (*waiting-color* ; there is some one in the room</span>
<span class="str">	     (setf *incoming-color* color)</span>
<span class="str">	     (setf other-color *waiting-color*)</span>
<span class="str">	     (decf *meetings-left*)</span>
<span class="str">	     (setf *waiting-color* nil)</span>
<span class="str">	     (sb-thread:condition-notify *wait-queue*))</span>
<span class="str"></span>
<span class="str">	    (t ; there is no one in the room, wait for some one</span>
<span class="str">	     (setf *waiting-color* color)</span>
<span class="str">	     (sb-thread:condition-wait *wait-queue* *room-lock*)</span>
<span class="str">	     (setf other-color *incoming-color*))))</span>
<span class="str"></span>
<span class="str">	 (incf meetings)</span>
<span class="str">	 (setf color (complement-color color other-color)))</span>
<span class="str"></span>
<span class="str">	;; Let the initial thread know we are done</span>
<span class="str">	(sb-thread:with-mutex (*done-lock*)</span>
<span class="str">          (push meetings *met-list*)</span>
<span class="str">	  (sb-thread:condition-notify *done-queue*)))))</span>
<span class="str"></span>
<span class="str">(defun main (&amp;optional (n (parse-integer</span>
<span class="str">			   (car (last sb-ext:*posix-argv*)))))</span>
<span class="str">  (setf *meetings-left* n)</span>
<span class="str">  (setf *met-list* nil)</span>
<span class="str">  (mapcar (lambda (x)</span>
<span class="str">	    (sb-thread:make-thread (make-chameneos x)))</span>
<span class="str">	  '</span><span class="sym">(</span>blue red yellow blue<span class="sym">))</span>
  <span class="sym">(</span>loop
    <span class="sym">(</span>sb<span class="sym">-</span>thread<span class="sym">:</span>with<span class="sym">-</span>mutex <span class="sym">(*</span>done<span class="sym">-</span>lock<span class="sym">*)</span>
      <span class="sym">(</span>when <span class="sym">(</span><span class="kwa">eq</span> <span class="sym">(</span><span class="kwa">list</span><span class="sym">-</span><span class="kwa">length</span> <span class="sym">*</span>met<span class="sym">-</span><span class="kwa">list</span><span class="sym">*)</span> <span class="num">4</span><span class="sym">)</span>
	<span class="sym">(</span>return<span class="sym">))</span>
      <span class="sym">(</span>sb<span class="sym">-</span>thread<span class="sym">:</span>condition<span class="sym">-</span>wait <span class="sym">*</span>done<span class="sym">-</span>queue<span class="sym">* *</span>done<span class="sym">-</span>lock<span class="sym">*)))</span>
  <span class="sym">(</span>format t <span class="str">&quot;~A~%&quot;</span> <span class="sym">(</span>reduce #<span class="str">'+ *met-list*)))</span>
<span class="str"></span>
