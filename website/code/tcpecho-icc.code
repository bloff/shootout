<span class="com">/*
 The Great Computer Language Shootout
  http://shootout.alioth.debian.org/

  contributed by John O'Hare 05 August 2005.
*/</span>


<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;sys/socket.h&gt;
</span><span class="dir">#include &lt;arpa/inet.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;string.h&gt;
</span><span class="dir">#include &lt;unistd.h&gt;
</span>
<span class="dir">#define PORT_NUMBER 12340
</span><span class="dir">#define M 6400
</span><span class="dir">#define REPLY_SIZE 64
</span><span class="dir">#define REQUEST_SIZE 64
</span><span class="dir">#define BUFFER_SIZE 1024
</span>
<span class="kwb">void</span> server<span class="sym">()
{
</span>	<span class="kwb">int</span> sock<span class="sym">;
</span>	<span class="kwb">int</span> conn<span class="sym">;
</span>	<span class="kwb">struct</span> sockaddr_in servaddr<span class="sym">;
</span>	<span class="kwb">struct</span> sockaddr_in cliaddr<span class="sym">;
</span>	<span class="kwb">unsigned int</span> cliaddr_len<span class="sym">;
</span>	<span class="kwb">char</span><span class="sym">*</span> reply <span class="sym">=</span> malloc<span class="sym">(</span>REPLY_SIZE<span class="sym">);
</span>	<span class="kwb">char</span><span class="sym">*</span> buf <span class="sym">=</span> malloc<span class="sym">(</span>BUFFER_SIZE<span class="sym">);

</span>	memset<span class="sym">(</span>reply<span class="sym">,</span> <span class="str">'&lt;'</span><span class="sym">,</span> REPLY_SIZE<span class="sym">);

</span>	<span class="kwa">if</span> <span class="sym">((</span>sock <span class="sym">=</span> socket<span class="sym">(</span>PF_INET<span class="sym">,</span> SOCK_STREAM<span class="sym">,</span> IPPROTO_TCP<span class="sym">)) &lt;</span> <span class="num">0</span><span class="sym">)
</span>		exit<span class="sym">(</span><span class="num">10</span><span class="sym">);

</span>	memset<span class="sym">(&amp;</span>servaddr<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span>servaddr<span class="sym">));
</span>	servaddr<span class="sym">.</span>sin_family <span class="sym">=</span> AF_INET<span class="sym">;
</span>	servaddr<span class="sym">.</span>sin_addr<span class="sym">.</span>s_addr <span class="sym">=</span> htonl<span class="sym">(</span>INADDR_LOOPBACK<span class="sym">);
</span>	servaddr<span class="sym">.</span>sin_port <span class="sym">=</span> htons<span class="sym">(</span>PORT_NUMBER<span class="sym">);

</span>	<span class="kwa">if</span> <span class="sym">(</span>bind<span class="sym">(</span>sock<span class="sym">, (</span><span class="kwb">struct</span> sockaddr <span class="sym">*) &amp;</span>servaddr<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span>servaddr<span class="sym">)) &lt;</span> <span class="num">0</span><span class="sym">)
</span>		exit<span class="sym">(</span><span class="num">11</span><span class="sym">);

</span>	<span class="kwa">if</span> <span class="sym">(</span>listen<span class="sym">(</span>sock<span class="sym">,</span> <span class="num">1</span><span class="sym">) &lt;</span> <span class="num">0</span><span class="sym">)
</span>		exit<span class="sym">(</span><span class="num">12</span><span class="sym">);

</span>	<span class="kwa">if</span> <span class="sym">((</span>conn <span class="sym">=</span> accept<span class="sym">(</span>sock<span class="sym">, (</span><span class="kwb">struct</span> sockaddr <span class="sym">*) &amp;</span>cliaddr<span class="sym">, &amp;</span>cliaddr_len<span class="sym">)) &lt;</span> <span class="num">0</span><span class="sym">)
</span>		exit<span class="sym">(</span><span class="num">13</span><span class="sym">);

</span>	<span class="kwa">while</span> <span class="sym">(</span>recv<span class="sym">(</span>conn<span class="sym">,</span> buf<span class="sym">,</span> BUFFER_SIZE<span class="sym">,</span> <span class="num">0</span><span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">) {
</span>		<span class="kwa">if</span> <span class="sym">(</span>send<span class="sym">(</span>conn<span class="sym">,</span> reply<span class="sym">,</span> REPLY_SIZE<span class="sym">,</span> <span class="num">0</span><span class="sym">) !=</span> REPLY_SIZE<span class="sym">)
</span>			exit<span class="sym">(</span><span class="num">14</span><span class="sym">);
	}

</span>	close<span class="sym">(</span>conn<span class="sym">);
</span>	close<span class="sym">(</span>sock<span class="sym">);

</span>	free<span class="sym">(</span>buf<span class="sym">);
}

</span><span class="kwb">void</span> client<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">)
{
</span>	<span class="kwb">int</span> sock<span class="sym">;
</span>	<span class="kwb">struct</span> sockaddr_in servaddr<span class="sym">;
</span>	<span class="kwb">char</span><span class="sym">*</span> request <span class="sym">=</span> malloc<span class="sym">(</span>REQUEST_SIZE<span class="sym">);
</span>	<span class="kwb">char</span><span class="sym">*</span> buf <span class="sym">=</span> malloc<span class="sym">(</span>BUFFER_SIZE<span class="sym">);
</span>	<span class="kwb">int</span> tmpbytes<span class="sym">;
</span>	<span class="kwb">int</span> bytes <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>	<span class="kwb">int</span> replies <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>	memset<span class="sym">(</span>request<span class="sym">,</span> <span class="str">'&gt;'</span><span class="sym">,</span> REQUEST_SIZE<span class="sym">);

</span>	sleep<span class="sym">(</span><span class="num">2</span><span class="sym">);</span> <span class="slc">//wait for server to start
</span>
	<span class="kwa">if</span> <span class="sym">((</span>sock <span class="sym">=</span> socket<span class="sym">(</span>PF_INET<span class="sym">,</span> SOCK_STREAM<span class="sym">,</span> IPPROTO_TCP<span class="sym">)) &lt;</span> <span class="num">0</span><span class="sym">)
</span>		exit<span class="sym">(</span><span class="num">2</span><span class="sym">);

</span>	memset<span class="sym">(&amp;</span>servaddr<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span>servaddr<span class="sym">));
</span>	servaddr<span class="sym">.</span>sin_family <span class="sym">=</span> AF_INET<span class="sym">;
</span>	servaddr<span class="sym">.</span>sin_addr<span class="sym">.</span>s_addr <span class="sym">=</span> htonl<span class="sym">(</span>INADDR_LOOPBACK<span class="sym">);
</span>	servaddr<span class="sym">.</span>sin_port <span class="sym">=</span> htons<span class="sym">(</span>PORT_NUMBER<span class="sym">);

</span>	<span class="kwa">if</span> <span class="sym">(</span>connect<span class="sym">(</span>sock<span class="sym">, (</span><span class="kwb">struct</span> sockaddr <span class="sym">*) &amp;</span>servaddr<span class="sym">,</span> <span class="kwa">sizeof</span><span class="sym">(</span>servaddr<span class="sym">)) &lt;</span> <span class="num">0</span><span class="sym">)
</span>		exit<span class="sym">(</span><span class="num">3</span><span class="sym">);

</span>	<span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">) {
</span>		tmpbytes <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>		<span class="kwa">if</span> <span class="sym">(</span>send<span class="sym">(</span>sock<span class="sym">,</span> request<span class="sym">,</span> REQUEST_SIZE<span class="sym">,</span> <span class="num">0</span><span class="sym">) !=</span> REQUEST_SIZE<span class="sym">)
</span>			exit<span class="sym">(</span><span class="num">4</span><span class="sym">);

</span>		<span class="kwa">while</span> <span class="sym">(</span>tmpbytes <span class="sym">&lt;</span> REPLY_SIZE<span class="sym">)
</span>			tmpbytes <span class="sym">+=</span> recv<span class="sym">(</span>sock<span class="sym">,</span> buf<span class="sym">,</span> BUFFER_SIZE <span class="num">- 1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">);
</span>		bytes <span class="sym">+=</span> tmpbytes<span class="sym">;
</span>		replies<span class="sym">++;
	}
</span>	close<span class="sym">(</span>sock<span class="sym">);

</span>	printf<span class="sym">(</span><span class="str">&quot;replies: %d</span><span class="esc">\t</span><span class="str">bytes: %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> replies<span class="sym">,</span> bytes<span class="sym">);

</span>	free<span class="sym">(</span>request<span class="sym">);
</span>	free<span class="sym">(</span>buf<span class="sym">);
}

</span><span class="kwb">int</span> main <span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">**</span> argv<span class="sym">)
{
</span>	<span class="kwb">int</span> pid<span class="sym">;
</span>	<span class="kwb">int</span> n<span class="sym">;

</span>	n <span class="sym">= (</span>argc <span class="sym">==</span> <span class="num">2</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);

</span>	<span class="kwa">if</span> <span class="sym">((</span>pid <span class="sym">=</span> fork<span class="sym">()) &lt;</span> <span class="num">0</span><span class="sym">) {
</span>		<span class="kwa">return</span> <span class="num">1</span><span class="sym">;
	}
</span>	<span class="kwa">if</span> <span class="sym">(</span>pid <span class="sym">==</span> <span class="num">0</span><span class="sym">) {
</span>		client<span class="sym">(</span>M <span class="sym">*</span> n<span class="sym">);
	}</span> <span class="kwa">else</span> <span class="sym">{
</span>		server<span class="sym">();
	}
</span>	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}</span>
