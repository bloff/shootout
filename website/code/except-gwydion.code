<span class="kwb">module</span><span class="sym">:</span>     except
<span class="kwb">synopsis</span><span class="sym">:</span>   implementation of <span class="str">&quot;Exception Handling&quot;</span> benchmark
<span class="kwb">author</span><span class="sym">:</span>     Peter Hinely
<span class="kwb">copyright</span><span class="sym">:</span>  public <span class="kwa">domain


define variable</span> hi <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="kwa">define variable</span> lo  <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;


</span><span class="kwa">define sealed domain</span> make <span class="sym">(</span><span class="kwa">subclass</span><span class="sym">(</span><span class="kwa">&lt;hi-exception&gt;</span><span class="sym">));
</span><span class="kwa">define sealed domain</span> initialize <span class="sym">(</span><span class="kwa">&lt;hi-exception&gt;</span><span class="sym">);


</span><span class="kwa">define class</span> <span class="kwa">&lt;hi-exception&gt;</span> <span class="sym">(</span><span class="kwa">&lt;error&gt;</span><span class="sym">)
</span>  <span class="kwa">slot</span> number <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> number<span class="sym">:;</span> <span class="slc">// not really used for anything
</span><span class="kwa">end</span><span class="sym">;


</span><span class="kwa">define class</span> <span class="kwa">&lt;lo-exception&gt;</span> <span class="sym">(</span><span class="kwa">&lt;hi-exception&gt;</span><span class="sym">)
</span><span class="kwa">end</span><span class="sym">;


</span><span class="kwa">define function</span> some<span class="sym">-</span><span class="kwa">function</span> <span class="sym">(</span>num <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; <span class="sym">()
</span>  <span class="kwa">block</span> <span class="sym">()
</span>    hi<span class="sym">-</span><span class="kwa">function</span><span class="sym">(</span>num<span class="sym">);
</span>  <span class="kwa">exception</span> <span class="sym">(</span>err <span class="sym">::</span> <span class="kwa">&lt;error&gt;</span><span class="sym">)
</span>    error<span class="sym">(</span><span class="str">&quot;We shouldn't have got here.&quot;</span><span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end function</span><span class="sym">;


</span><span class="kwa">define function</span> hi<span class="sym">-</span><span class="kwa">function</span> <span class="sym">(</span>num <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; <span class="sym">()
</span>  <span class="kwa">block</span> <span class="sym">()
</span>    lo<span class="sym">-</span><span class="kwa">function</span><span class="sym">(</span>num<span class="sym">);
</span>  <span class="kwa">exception</span> <span class="sym">(</span>err <span class="sym">::</span> <span class="kwa">&lt;hi-exception&gt;</span><span class="sym">)
</span>    hi <span class="sym">:=</span> hi <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>  <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end function</span><span class="sym">;


</span><span class="kwa">define function</span> lo<span class="sym">-</span><span class="kwa">function</span> <span class="sym">(</span>num <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; <span class="sym">()
</span>  <span class="kwa">block</span> <span class="sym">()
</span>    blowup<span class="sym">(</span>num<span class="sym">);
</span>  <span class="kwa">exception</span> <span class="sym">(</span>err <span class="sym">::</span> <span class="kwa">&lt;lo-exception&gt;</span><span class="sym">)
</span>    lo <span class="sym">:=</span> lo <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>  <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end function</span><span class="sym">;


</span><span class="kwa">define function</span> blowup <span class="sym">(</span>num <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; <span class="sym">()
</span>  <span class="kwa">if</span> <span class="sym">(</span>odd?<span class="sym">(</span>num<span class="sym">))
</span>    <span class="kwa">signal</span><span class="sym">(</span>make<span class="sym">(</span><span class="kwa">&lt;lo-exception&gt;</span><span class="sym">,</span> number<span class="sym">:</span> num<span class="sym">));
</span>  <span class="kwa">else
    signal</span><span class="sym">(</span>make<span class="sym">(</span><span class="kwa">&lt;hi-exception&gt;</span><span class="sym">,</span> number<span class="sym">:</span> num<span class="sym">));
</span>  <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end function</span><span class="sym">;


</span><span class="kwa">define function</span> main <span class="sym">() =</span>&gt; <span class="sym">()
</span>  <span class="kwa">let</span> arg <span class="sym">=</span> string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">(</span>element<span class="sym">(</span>application<span class="sym">-</span>arguments<span class="sym">(),</span> <span class="num">0</span><span class="sym">,</span> default<span class="sym">:</span> <span class="str">&quot;1&quot;</span><span class="sym">));

</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> arg <span class="kwa">to</span> <span class="num">1</span> <span class="kwa">by</span> <span class="num">-1</span><span class="sym">)
</span>    some<span class="sym">-</span><span class="kwa">function</span><span class="sym">(</span>i<span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;

</span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;Exceptions: HI=%d / LO=%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> hi<span class="sym">,</span> lo<span class="sym">);
</span><span class="kwa">end function</span><span class="sym">;


</span>main<span class="sym">();</span>
