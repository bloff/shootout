<span class="slc">// The Computer Language Shootout</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// by bearophile, Jan 24 2006</span>
<span class="slc">// converted to C++ by Greg Buchholz</span>
<span class="slc">// modified by Paul Kitchin</span>

<span class="dir">#include &lt;iomanip&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;sstream&gt;</span>

<span class="kwc">template</span> <span class="sym">&lt;</span> <span class="kwc">class</span> N <span class="sym">&gt;</span>
N <span class="kwd">Ack</span><span class="sym">(</span>N x<span class="sym">,</span> N y<span class="sym">)</span> <span class="kwd">__attribute__</span><span class="sym">((</span>fastcall<span class="sym">,</span> <span class="kwb">const</span><span class="sym">,</span> nothrow<span class="sym">));</span>

<span class="kwc">template</span> <span class="sym">&lt;</span> <span class="kwc">class</span> N <span class="sym">&gt;</span>
N <span class="kwd">Ack</span><span class="sym">(</span>N x<span class="sym">,</span> N y<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">return</span> <span class="kwd">__builtin_expect</span><span class="sym">(</span>x <span class="sym">==</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)</span> ? y <span class="sym">+</span> <span class="num">1</span> <span class="sym">: ((</span>y <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> ? <span class="kwd">Ack</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">) :</span> <span class="kwd">Ack</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="kwd">Ack</span><span class="sym">(</span>x<span class="sym">,</span> y <span class="sym">-</span> <span class="num">1</span><span class="sym">)));</span>
<span class="sym">}</span>

<span class="kwc">template</span> <span class="sym">&lt;</span> <span class="kwc">class</span> N <span class="sym">&gt;</span>
N <span class="kwd">Fib</span><span class="sym">(</span>N n<span class="sym">)</span> <span class="kwd">__attribute__</span><span class="sym">((</span>fastcall<span class="sym">,</span> <span class="kwb">const</span><span class="sym">,</span> nothrow<span class="sym">));</span>

<span class="kwc">template</span> <span class="sym">&lt;</span> <span class="kwc">class</span> N <span class="sym">&gt;</span>
N <span class="kwd">Fib</span><span class="sym">(</span>N n<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">return</span> <span class="kwd">__builtin_expect</span><span class="sym">(</span>n <span class="sym">&lt;</span> <span class="num">2</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)</span> ? <span class="num">1</span> <span class="sym">:</span> <span class="kwd">Fib</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">) +</span> <span class="kwd">Fib</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
<span class="sym">}</span>

<span class="kwc">template</span> <span class="sym">&lt;</span> <span class="kwc">class</span> N <span class="sym">&gt;</span>
N <span class="kwd">Tak</span><span class="sym">(</span>N x<span class="sym">,</span> N y<span class="sym">,</span> N z<span class="sym">)</span> <span class="kwd">__attribute__</span><span class="sym">((</span>fastcall<span class="sym">,</span> <span class="kwb">const</span><span class="sym">,</span> nothrow<span class="sym">));</span>

<span class="kwc">template</span> <span class="sym">&lt;</span> <span class="kwc">class</span> N <span class="sym">&gt;</span>
N <span class="kwd">Tak</span><span class="sym">(</span>N x<span class="sym">,</span> N y<span class="sym">,</span> N z<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">return</span> <span class="kwd">__builtin_expect</span><span class="sym">(</span>y <span class="sym">&lt;</span> x<span class="sym">,</span> <span class="num">0</span><span class="sym">)</span> ? <span class="kwd">Tak</span><span class="sym">(</span><span class="kwd">Tak</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> <span class="kwd">Tak</span><span class="sym">(</span>y <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> <span class="kwd">Tak</span><span class="sym">(</span>z <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">)) :</span> z<span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">* *</span> argv<span class="sym">)</span>
<span class="sym">{</span>
   <span class="kwa">if</span> <span class="sym">(</span>argc <span class="sym">!=</span> <span class="num">2</span><span class="sym">)</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;usage: nsieve &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
      <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
   <span class="kwb">int</span> n<span class="sym">;</span>
   <span class="sym">{</span>
      std<span class="sym">::</span>istringstream <span class="kwd">convertor</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);</span>
      <span class="kwa">if</span> <span class="sym">(!(</span>convertor <span class="sym">&gt;&gt;</span> n<span class="sym">) || !</span>convertor<span class="sym">.</span><span class="kwd">eof</span><span class="sym">())</span>
      <span class="sym">{</span>
         std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;usage: nsieve &lt;n&gt;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         std<span class="sym">::</span>cerr <span class="sym">&lt;&lt;</span> <span class="str">&quot;   n must be an integer</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span>
         <span class="kwa">return</span> <span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> std<span class="sym">::</span><span class="kwd">setprecision</span><span class="sym">(</span><span class="num">1</span><span class="sym">) &lt;&lt;</span> std<span class="sym">::</span><span class="kwd">setiosflags</span><span class="sym">(</span>std<span class="sym">::</span>ios_base<span class="sym">::</span>fixed<span class="sym">);</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Ack(3,&quot;</span> <span class="sym">&lt;&lt;</span> n <span class="sym">&lt;&lt;</span> <span class="str">&quot;): &quot;</span> <span class="sym">&lt;&lt;</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> n<span class="sym">) &lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Fib(&quot;</span> <span class="sym">&lt;&lt; (</span><span class="num">27.0</span> <span class="sym">+</span> n<span class="sym">) &lt;&lt;</span> <span class="str">&quot;): &quot;</span> <span class="sym">&lt;&lt;</span> <span class="kwd">Fib</span><span class="sym">(</span><span class="num">27.0</span> <span class="sym">+</span> n<span class="sym">) &lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
   <span class="sym">--</span>n<span class="sym">;</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Tak(&quot;</span> <span class="sym">&lt;&lt; (</span><span class="num">3</span> <span class="sym">*</span> n<span class="sym">) &lt;&lt;</span> <span class="str">','</span> <span class="sym">&lt;&lt; (</span><span class="num">2</span> <span class="sym">*</span> n<span class="sym">) &lt;&lt;</span> <span class="str">','</span> <span class="sym">&lt;&lt;</span> n <span class="sym">&lt;&lt;</span> <span class="str">&quot;): &quot;</span> <span class="sym">&lt;&lt;</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="num">3</span> <span class="sym">*</span> n<span class="sym">,</span> <span class="num">2</span> <span class="sym">*</span> n<span class="sym">,</span> n<span class="sym">) &lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Fib(3): &quot;</span> <span class="sym">&lt;&lt;</span> <span class="kwd">Fib</span><span class="sym">(</span><span class="num">3</span><span class="sym">) &lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
   std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Tak(3.0,2.0,1.0): &quot;</span> <span class="sym">&lt;&lt;</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">,</span> <span class="num">1.0</span><span class="sym">) &lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
<span class="sym">}</span>

