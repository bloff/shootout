<span class="slc">--- The Great Computer Lanuage Shootout
</span><span class="slc">--  http://shootout.alioth.debian.org
</span><span class="slc">--
</span><span class="slc">-- Contributed by Mike Pall
</span>
<span class="kwa">local</span> width <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">100
</span><span class="kwa">local</span> height <span class="sym">=</span> width
<span class="kwa">local</span> m<span class="sym">,</span> limit2 <span class="sym">=</span> <span class="num">50</span><span class="sym">,</span> <span class="num">4.0

</span>io.<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> width<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> height<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)

</span><span class="kwa">for</span> y<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>height<span class="num">-1</span> <span class="kwa">do
  for</span> xb<span class="sym">=</span><span class="num">0</span><span class="sym">,</span>width<span class="num">-1</span><span class="sym">,</span><span class="num">8</span> <span class="kwa">do
    local</span> bits <span class="sym">=</span> <span class="num">0
</span>    <span class="kwa">local</span> xbb <span class="sym">=</span> xb<span class="sym">+</span><span class="num">7
</span>    <span class="kwa">for</span> x<span class="sym">=</span>xb<span class="sym">,</span>xbb <span class="sym">&lt;</span> width <span class="kwa">and</span> xbb <span class="kwa">or</span> width<span class="num">-1</span> <span class="kwa">do
</span>      bits <span class="sym">=</span> bits <span class="sym">+</span> bits
      <span class="kwa">local</span> Zr<span class="sym">,</span> Zi <span class="sym">=</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0
</span>      <span class="kwa">local</span> Cr<span class="sym">,</span> Ci <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>x <span class="sym">/</span> width <span class="num">- 1.5</span><span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>y <span class="sym">/</span> height <span class="num">- 1
</span>      <span class="kwa">local</span> Zrq<span class="sym">,</span> Ziq <span class="sym">=</span> Zr<span class="sym">*</span>Zr<span class="sym">,</span> Zi<span class="sym">*</span>Zi
      <span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>m <span class="kwa">do
</span>        Zr<span class="sym">,</span> Zi <span class="sym">=</span> Zrq <span class="sym">-</span> Ziq <span class="sym">+</span> Cr<span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>Zr<span class="sym">*</span>Zi <span class="sym">+</span> Ci
        Zrq<span class="sym">,</span> Ziq <span class="sym">=</span> Zr<span class="sym">*</span>Zr<span class="sym">,</span> Zi<span class="sym">*</span>Zi
        <span class="kwa">if</span> Zrq <span class="sym">+</span> Ziq <span class="sym">&gt;</span> limit2 <span class="kwa">then
</span>          bits <span class="sym">=</span> bits <span class="sym">+</span> <span class="num">1
</span>          <span class="kwa">break
        end
      end
    end
    if</span> xbb <span class="sym">&gt;=</span> width <span class="kwa">then
      for</span> x<span class="sym">=</span>width<span class="sym">,</span>xbb <span class="kwa">do</span> bits <span class="sym">=</span> bits <span class="sym">+</span> bits <span class="sym">+</span> <span class="num">1</span> <span class="kwa">end
    end
</span>    io.<span class="kwa">write</span><span class="sym">(</span><span class="kwb">string</span>.char<span class="sym">(</span><span class="num">255</span><span class="sym">-</span>bits<span class="sym">))
</span>  <span class="kwa">end
end</span>
