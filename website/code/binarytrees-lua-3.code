<span class="slc">--- The Great Computer Lanuage Shootout
</span><span class="slc">--  http://shootout.alioth.debian.org
</span><span class="slc">--
</span><span class="slc">-- Contributed by Matthew Burke &lt;shootout&#64;bluedino.net&gt;
</span><span class="slc">--
</span>
<span class="kwa">local</span> TreeNode <span class="sym">= {}
</span>TreeNode.__index <span class="sym">=</span> TreeNode

<span class="kwa">function</span> TreeNode<span class="sym">:</span>create<span class="sym">(</span>item<span class="sym">,</span> left<span class="sym">,</span> right<span class="sym">)
</span>   <span class="kwa">local</span> s <span class="sym">= {}
</span>   s.item <span class="sym">=</span> item
   s.left <span class="sym">=</span> left
   s.right <span class="sym">=</span> right
   setmetatable<span class="sym">(</span>s<span class="sym">,</span> self<span class="sym">)
</span>   <span class="kwa">return</span> s
<span class="kwa">end

function</span> TreeNode<span class="sym">:</span>itemCheck<span class="sym">()
</span>   <span class="kwa">if</span> <span class="sym">(</span>self.left <span class="sym">==</span> <span class="kwa">nil</span><span class="sym">)</span> <span class="kwa">then
      return</span> self.item
   <span class="kwa">else
      return</span> self.item <span class="sym">+</span> self.left<span class="sym">:</span>itemCheck<span class="sym">() -</span> self.right<span class="sym">:</span>itemCheck<span class="sym">()
</span>   <span class="kwa">end
end

function</span> TreeNode.bottomUpTree<span class="sym">(</span>item<span class="sym">,</span> depth<span class="sym">)
</span>   <span class="kwa">if</span> <span class="sym">(</span>depth <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">then
      return</span> TreeNode<span class="sym">:</span>create<span class="sym">(</span>item<span class="sym">,
</span>                             TreeNode.bottomUpTree<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="num">-1</span><span class="sym">,</span> depth<span class="num">-1</span><span class="sym">),
</span>                             TreeNode.bottomUpTree<span class="sym">(</span><span class="num">2</span><span class="sym">*</span>item<span class="sym">,</span> depth<span class="num">-1</span><span class="sym">))
</span>   <span class="kwa">else
      return</span> TreeNode<span class="sym">:</span>create<span class="sym">(</span>item<span class="sym">)
</span>   <span class="kwa">end
end


local</span> minDepth <span class="sym">=</span> <span class="num">4
</span><span class="kwa">local</span> n <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="sym">(</span>minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">)
</span><span class="kwa">local</span> maxDepth <span class="sym">=</span> math.<span class="kwa">max</span><span class="sym">(</span>n<span class="sym">,</span> minDepth <span class="sym">+</span> <span class="num">2</span><span class="sym">)
</span><span class="kwa">local</span> stretchDepth <span class="sym">=</span> maxDepth <span class="sym">+</span> <span class="num">1

</span><span class="kwa">local</span> check <span class="sym">= (</span>TreeNode.bottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> stretchDepth<span class="sym">)):</span>itemCheck<span class="sym">()
</span>io.<span class="kwa">write</span><span class="sym">(</span> <span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;stretch tree of depth %d</span><span class="esc">\t </span> <span class="str">check: %d&quot;</span><span class="sym">,</span> stretchDepth<span class="sym">,</span> check<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)

</span><span class="kwa">local</span> longLivedTree <span class="sym">=</span> TreeNode.bottomUpTree<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> maxDepth<span class="sym">)

</span><span class="kwa">for</span> depth <span class="sym">=</span> minDepth<span class="sym">,</span>maxDepth<span class="sym">,</span><span class="num">2</span> <span class="kwa">do
   local</span> iterations <span class="sym">=</span> <span class="num">2</span> ^ <span class="sym">(</span>maxDepth <span class="sym">-</span> depth <span class="sym">+</span> minDepth<span class="sym">)
</span>   <span class="kwa">local</span> check <span class="sym">=</span> <span class="num">0
</span>   <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span>iterations <span class="kwa">do
</span>      check <span class="sym">=</span> check <span class="sym">+ (</span>TreeNode.bottomUpTree<span class="sym">(</span>i<span class="sym">,</span>depth<span class="sym">)):</span>itemCheck<span class="sym">()
</span>      check <span class="sym">=</span> check <span class="sym">+ (</span>TreeNode.bottomUpTree<span class="sym">(-</span>i<span class="sym">,</span>depth<span class="sym">)):</span>itemCheck<span class="sym">()
</span>   <span class="kwa">end
</span>   io.<span class="kwa">write</span><span class="sym">(</span> <span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\t </span> <span class="str">trees of depth %d</span><span class="esc">\t </span> <span class="str">check: %d&quot;</span><span class="sym">,</span> iterations<span class="sym">*</span><span class="num">2</span><span class="sym">,</span> depth<span class="sym">,</span> check<span class="sym">),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)
</span><span class="kwa">end
</span>io.<span class="kwa">write</span><span class="sym">(</span> <span class="kwb">string</span>.<span class="kwa">format</span><span class="sym">(</span><span class="str">&quot;long lived tree of depth %d</span><span class="esc">\t </span> <span class="str">check: %d&quot;</span><span class="sym">,</span> maxDepth<span class="sym">,</span> longLivedTree<span class="sym">:</span>itemCheck<span class="sym">()),</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
