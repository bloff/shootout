<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">\ -*- mode: forth -*-
</FONT></I><I><FONT COLOR="#B22222">\ $Id: moments-gforth.code,v 1.1 2004-11-02 08:52:37 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">\ http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">\ from Anton Ertl
</FONT></I>
1024 <B><FONT COLOR="#A020F0">constant</FONT></B> <B><FONT COLOR="#A020F0">max</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B>line
create line <B><FONT COLOR="#A020F0">max</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B>line 2 <B><FONT COLOR="#5F9EA0">+</FONT></B> allot

<B><FONT COLOR="#A020F0">: </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">input-floats</FONT></I></B></FONT></B> ( fid <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B> rsum )
    <B><FONT COLOR="#5F9EA0">&gt;</FONT></B>r 0e <B><FONT COLOR="#A020F0">begin</FONT></B>
	line <B><FONT COLOR="#A020F0">max</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B>line r@ read<B><FONT COLOR="#5F9EA0">-</FONT></B>line <B><FONT COLOR="#5F9EA0">throw</FONT></B>
    <B><FONT COLOR="#A020F0">while</FONT></B>
	line <B><FONT COLOR="#5F9EA0">swap</FONT></B> <B><FONT COLOR="#5F9EA0">&gt;</FONT></B><B><FONT COLOR="#228B22">float</FONT></B> 0= <B><FONT COLOR="#5F9EA0">abort</FONT></B><B><FONT COLOR="#BC8F8F">&quot; float expected&quot;</FONT></B>
	<B><FONT COLOR="#5F9EA0">fdup</FONT></B> f, f<B><FONT COLOR="#5F9EA0">+</FONT></B>
    <B><FONT COLOR="#A020F0">repeat</FONT></B>
    rdrop <B><FONT COLOR="#5F9EA0">drop</FONT></B> ;

<B><FONT COLOR="#A020F0">: </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">compute-loop</FONT></I></B></FONT></B> ( a u sum <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B> kurtosis skew variance standard<B><FONT COLOR="#5F9EA0">-</FONT></B>dev avg<B><FONT COLOR="#5F9EA0">-</FONT></B>dev mean )
    <B><FONT COLOR="#5F9EA0">dup</FONT></B> 0 d<B><FONT COLOR="#5F9EA0">&gt;</FONT></B>f <B><FONT COLOR="#5F9EA0">fdup</FONT></B> { f: n } f<B><FONT COLOR="#5F9EA0">/</FONT></B> { f: mean }
    0e <B><FONT COLOR="#5F9EA0">fdup</FONT></B> <B><FONT COLOR="#5F9EA0">fdup</FONT></B> <B><FONT COLOR="#5F9EA0">fdup</FONT></B>
    floats bounds <B><FONT COLOR="#A020F0">do</FONT></B> {  f: avg<B><FONT COLOR="#5F9EA0">-</FONT></B>deviation f: variance f: skew f: kurtosis }
	i f@ mean f<B><FONT COLOR="#5F9EA0">-</FONT></B> { f: deviation }
	deviation <B><FONT COLOR="#A020F0">fabs</FONT></B> avg<B><FONT COLOR="#5F9EA0">-</FONT></B>deviation f<B><FONT COLOR="#5F9EA0">+</FONT></B> ( avg<B><FONT COLOR="#5F9EA0">-</FONT></B>deviation )
	deviation <B><FONT COLOR="#5F9EA0">fdup</FONT></B> f<B><FONT COLOR="#5F9EA0">*</FONT></B> <B><FONT COLOR="#5F9EA0">fdup</FONT></B> variance f<B><FONT COLOR="#5F9EA0">+</FONT></B> ( avg<B><FONT COLOR="#5F9EA0">-</FONT></B>deviation dev<B><FONT COLOR="#5F9EA0">^</FONT></B>2 variance )
	<B><FONT COLOR="#5F9EA0">fswap</FONT></B> deviation f<B><FONT COLOR="#5F9EA0">*</FONT></B> <B><FONT COLOR="#5F9EA0">fdup</FONT></B> skew f<B><FONT COLOR="#5F9EA0">+</FONT></B> ( avg<B><FONT COLOR="#5F9EA0">-</FONT></B>deviation variance dev<B><FONT COLOR="#5F9EA0">^</FONT></B>2 skew )
	<B><FONT COLOR="#5F9EA0">fswap</FONT></B> deviation f<B><FONT COLOR="#5F9EA0">*</FONT></B> kurtosis f<B><FONT COLOR="#5F9EA0">+</FONT></B> ( avg<B><FONT COLOR="#5F9EA0">-</FONT></B>deviation variance skew kurtosis )
	<B><FONT COLOR="#228B22">float</FONT></B> <B><FONT COLOR="#5F9EA0">+</FONT></B><B><FONT COLOR="#A020F0">loop</FONT></B>
    <B><FONT COLOR="#5F9EA0">frot</FONT></B> n 1e f<B><FONT COLOR="#5F9EA0">-</FONT></B> f<B><FONT COLOR="#5F9EA0">/</FONT></B> to variance
    <B><FONT COLOR="#5F9EA0">frot</FONT></B> to avg<B><FONT COLOR="#5F9EA0">-</FONT></B>deviation ( skew kurtosis )
    variance <B><FONT COLOR="#A020F0">fsqrt</FONT></B> { f: standard<B><FONT COLOR="#5F9EA0">-</FONT></B>deviation }
    variance f0<B><FONT COLOR="#5F9EA0">&lt;&gt;</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>
	n variance <B><FONT COLOR="#5F9EA0">fdup</FONT></B> f<B><FONT COLOR="#5F9EA0">*</FONT></B> f<B><FONT COLOR="#5F9EA0">*</FONT></B> f<B><FONT COLOR="#5F9EA0">/</FONT></B> 3e f<B><FONT COLOR="#5F9EA0">-</FONT></B>
	<B><FONT COLOR="#5F9EA0">fswap</FONT></B> n variance f<B><FONT COLOR="#5F9EA0">*</FONT></B>  standard<B><FONT COLOR="#5F9EA0">-</FONT></B>deviation f<B><FONT COLOR="#5F9EA0">*</FONT></B> f<B><FONT COLOR="#5F9EA0">/</FONT></B> <B><FONT COLOR="#5F9EA0">fswap</FONT></B>
    <B><FONT COLOR="#A020F0">endif</FONT></B>
    <B><FONT COLOR="#5F9EA0">fswap</FONT></B> variance standard<B><FONT COLOR="#5F9EA0">-</FONT></B>deviation avg<B><FONT COLOR="#5F9EA0">-</FONT></B>deviation n f<B><FONT COLOR="#5F9EA0">/</FONT></B> mean ;

(field) <B><FONT COLOR="#228B22">float</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B>1 floats ,

<B><FONT COLOR="#A020F0">: </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">partition</FONT></I></B></FONT></B> { first last <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B> last<B><FONT COLOR="#5F9EA0">-</FONT></B>smaller first<B><FONT COLOR="#5F9EA0">-</FONT></B>larger }
    <I><FONT COLOR="#B22222">\ partition array addr1 u1 into all elements less than pivot and all
</FONT></I>    <I><FONT COLOR="#B22222">\ others, addr1 u2 and addr3 u3 are the two partitions.
</FONT></I>    <I><FONT COLOR="#B22222">\ lessthan-xt ( elemptr1 elemptr2 -- f ) compares the two elements
</FONT></I>    first last <B><FONT COLOR="#5F9EA0">+</FONT></B> 1 rshift faligned f@ { f: pivot }
    first last <B><FONT COLOR="#A020F0">begin</FONT></B> ( i j )
	<B><FONT COLOR="#A020F0">begin</FONT></B>
	    pivot <B><FONT COLOR="#5F9EA0">dup</FONT></B> f@ f&lt; <B><FONT COLOR="#5F9EA0">over</FONT></B> first u<B><FONT COLOR="#5F9EA0">&gt;</FONT></B> <B><FONT COLOR="#A020F0">and</FONT></B>
	<B><FONT COLOR="#A020F0">while</FONT></B>
	    <B><FONT COLOR="#228B22">float</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B>
	<B><FONT COLOR="#A020F0">repeat</FONT></B>
	<B><FONT COLOR="#5F9EA0">swap</FONT></B> <B><FONT COLOR="#A020F0">begin</FONT></B> ( j i )
	    <B><FONT COLOR="#5F9EA0">dup</FONT></B> last u&lt; <B><FONT COLOR="#5F9EA0">over</FONT></B> f@ pivot f&lt; <B><FONT COLOR="#A020F0">and</FONT></B>
	<B><FONT COLOR="#A020F0">while</FONT></B>
	    <B><FONT COLOR="#228B22">float</FONT></B><B><FONT COLOR="#5F9EA0">+</FONT></B>
	<B><FONT COLOR="#A020F0">repeat</FONT></B>
	<B><FONT COLOR="#5F9EA0">2dup</FONT></B> u<B><FONT COLOR="#5F9EA0">&gt;=</FONT></B>
    <B><FONT COLOR="#A020F0">while</FONT></B> ( j i )
	<B><FONT COLOR="#5F9EA0">dup</FONT></B> f@ <B><FONT COLOR="#5F9EA0">over</FONT></B> f@ <B><FONT COLOR="#5F9EA0">dup</FONT></B> f<B><FONT COLOR="#5F9EA0">!</FONT></B> <B><FONT COLOR="#5F9EA0">over</FONT></B> f<B><FONT COLOR="#5F9EA0">!</FONT></B>
	<B><FONT COLOR="#228B22">float</FONT></B><B><FONT COLOR="#5F9EA0">+</FONT></B> <B><FONT COLOR="#5F9EA0">swap</FONT></B> <B><FONT COLOR="#228B22">float</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B>
    <B><FONT COLOR="#A020F0">repeat</FONT></B> ;

<B><FONT COLOR="#A020F0">: </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">quantile</FONT></I></B></FONT></B> ( first last quant<B><FONT COLOR="#5F9EA0">-</FONT></B>low quant<B><FONT COLOR="#5F9EA0">-</FONT></B>high <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B> ) recursive
    <I><FONT COLOR="#B22222">\ sorts the array [first,last] such that the contained part of
</FONT></I>    <I><FONT COLOR="#B22222">\ [quant-low,quant-high] is the same as in the fully sorted array.
</FONT></I>    { quant<B><FONT COLOR="#5F9EA0">-</FONT></B>low quant<B><FONT COLOR="#5F9EA0">-</FONT></B>high }
    <B><FONT COLOR="#A020F0">begin</FONT></B> { first last }
	first quant<B><FONT COLOR="#5F9EA0">-</FONT></B>high u&lt; quant<B><FONT COLOR="#5F9EA0">-</FONT></B>low last u&lt; <B><FONT COLOR="#A020F0">and</FONT></B>
    <B><FONT COLOR="#A020F0">while</FONT></B>
	first last partition ( last<B><FONT COLOR="#5F9EA0">-</FONT></B>smaller first<B><FONT COLOR="#5F9EA0">-</FONT></B>larger )
	last quant<B><FONT COLOR="#5F9EA0">-</FONT></B>low quant<B><FONT COLOR="#5F9EA0">-</FONT></B>high quantile
	first <B><FONT COLOR="#5F9EA0">swap</FONT></B>
    <B><FONT COLOR="#A020F0">repeat</FONT></B> ;

<B><FONT COLOR="#A020F0">: </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">median</FONT></I></B></FONT></B> { addr u <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B> rmedian }
    addr u 1<B><FONT COLOR="#5F9EA0">-</FONT></B> 2<B><FONT COLOR="#5F9EA0">/</FONT></B> floats <B><FONT COLOR="#5F9EA0">+</FONT></B> addr u 2<B><FONT COLOR="#5F9EA0">/</FONT></B> floats <B><FONT COLOR="#5F9EA0">+</FONT></B> ( quant<B><FONT COLOR="#5F9EA0">-</FONT></B>low quant<B><FONT COLOR="#5F9EA0">-</FONT></B>high )
    addr addr u 1<B><FONT COLOR="#5F9EA0">-</FONT></B> floats <B><FONT COLOR="#5F9EA0">+</FONT></B> <B><FONT COLOR="#5F9EA0">2over</FONT></B> quantile
    f@ f@ f<B><FONT COLOR="#5F9EA0">+</FONT></B> f2<B><FONT COLOR="#5F9EA0">/</FONT></B> ;

( based on <B><FONT COLOR="#BC8F8F">&quot;f.&quot;</FONT></B> word from gforth )
<B><FONT COLOR="#A020F0">: </FONT></B><B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">ff.</FONT></I></B></FONT></B>  ( r <B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#5F9EA0">-</FONT></B> )
  f$ <B><FONT COLOR="#5F9EA0">dup</FONT></B> <B><FONT COLOR="#5F9EA0">&gt;</FONT></B>r 0&lt;
  IF '0 emit ELSE scratch r@ <B><FONT COLOR="#A020F0">min</FONT></B> type r@ precision <B><FONT COLOR="#5F9EA0">-</FONT></B> zeros ENDIF
  '. emit
  r@ <B><FONT COLOR="#A020F0">negate</FONT></B> zeros
  scratch r<B><FONT COLOR="#5F9EA0">&gt;</FONT></B> 0 <B><FONT COLOR="#A020F0">max</FONT></B> <B><FONT COLOR="#5F9EA0">/</FONT></B>string 0 <B><FONT COLOR="#A020F0">max</FONT></B> type ;

create nums <I><FONT COLOR="#B22222">\ s&quot; moments.input&quot; r/o open-file throw input-floats
</FONT></I>stdin input<B><FONT COLOR="#5F9EA0">-</FONT></B>floats
nums <B><FONT COLOR="#A020F0">here</FONT></B> <B><FONT COLOR="#5F9EA0">over</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B> <B><FONT COLOR="#228B22">float</FONT></B> <B><FONT COLOR="#5F9EA0">/</FONT></B>
.<B><FONT COLOR="#BC8F8F">&quot; n:                  &quot;</FONT></B> <B><FONT COLOR="#5F9EA0">dup</FONT></B> 0 .r cr
compute<B><FONT COLOR="#5F9EA0">-</FONT></B><B><FONT COLOR="#A020F0">loop</FONT></B>
nums <B><FONT COLOR="#A020F0">here</FONT></B> <B><FONT COLOR="#5F9EA0">over</FONT></B> <B><FONT COLOR="#5F9EA0">-</FONT></B> <B><FONT COLOR="#228B22">float</FONT></B> <B><FONT COLOR="#5F9EA0">/</FONT></B> median  9 set<B><FONT COLOR="#5F9EA0">-</FONT></B>precision
.<B><FONT COLOR="#BC8F8F">&quot; median:             &quot;</FONT></B> ff. cr
.<B><FONT COLOR="#BC8F8F">&quot; mean:               &quot;</FONT></B> ff. cr
.<B><FONT COLOR="#BC8F8F">&quot; average_deviation:  &quot;</FONT></B> ff. cr
.<B><FONT COLOR="#BC8F8F">&quot; standard_deviation: &quot;</FONT></B> ff. cr 11 set<B><FONT COLOR="#5F9EA0">-</FONT></B>precision
.<B><FONT COLOR="#BC8F8F">&quot; variance:           &quot;</FONT></B> ff. cr  7 set<B><FONT COLOR="#5F9EA0">-</FONT></B>precision
.<B><FONT COLOR="#BC8F8F">&quot; skew:               &quot;</FONT></B> ff. cr
.<B><FONT COLOR="#BC8F8F">&quot; kurtosis:           &quot;</FONT></B> ff. cr
<B><FONT COLOR="#5F9EA0">bye</FONT></B></pre></td></tr></table>
