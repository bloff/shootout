\ <span class="sym">-*-</span> mode<span class="sym">:</span> forth <span class="sym">-*-</span>
\ $Id<span class="sym">:</span> moments<span class="sym">.</span>gforth<span class="sym">,</span>v <span class="num">1.1 2004</span><span class="sym">/</span><span class="num">05</span><span class="sym">/</span><span class="num">25 03</span><span class="sym">:</span><span class="num">24</span><span class="sym">:</span><span class="num">39</span> bfulgham Exp $
\ http<span class="sym">:</span><span class="slc">//www.bagley.org/~doug/shootout/</span>
\ from Anton Ertl

<span class="num">1024</span> constant max<span class="sym">-</span>line
create line max<span class="sym">-</span>line <span class="num">2</span> <span class="sym">+</span> allot

<span class="sym">:</span> input<span class="sym">-</span><span class="kwd">floats</span> <span class="sym">(</span> fid <span class="sym">--</span> rsum <span class="sym">)</span>
    <span class="sym">&gt;</span>r <span class="num">0</span>e begin
	line max<span class="sym">-</span>line r&#64; read<span class="sym">-</span>line <span class="kwa">throw</span>
    <span class="kwa">while</span>
	line swap <span class="sym">&gt;</span><span class="kwb">float</span> <span class="num">0</span><span class="sym">=</span> abort<span class="str">&quot; float expected&quot;</span>
	fdup f<span class="sym">,</span> f<span class="sym">+</span>
    repeat
    rdrop drop <span class="sym">;</span>

<span class="sym">:</span> compute<span class="sym">-</span><span class="kwd">loop</span> <span class="sym">(</span> a u sum <span class="sym">--</span> kurtosis skew variance standard<span class="sym">-</span>dev avg<span class="sym">-</span>dev mean <span class="sym">)</span>
    dup <span class="num">0</span> d<span class="sym">&gt;</span>f fdup <span class="sym">{</span> f<span class="sym">:</span> n <span class="sym">}</span> f<span class="sym">/ {</span> f<span class="sym">:</span> mean <span class="sym">}</span>
    <span class="num">0</span>e fdup fdup fdup
    floats bounds <span class="kwa">do</span> <span class="sym">{</span>  f<span class="sym">:</span> avg<span class="sym">-</span>deviation f<span class="sym">:</span> variance f<span class="sym">:</span> skew f<span class="sym">:</span> kurtosis <span class="sym">}</span>
	i f&#64; mean f<span class="sym">- {</span> f<span class="sym">:</span> deviation <span class="sym">}</span>
	deviation fabs avg<span class="sym">-</span>deviation f<span class="sym">+ (</span> avg<span class="sym">-</span>deviation <span class="sym">)</span>
	deviation fdup f<span class="sym">*</span> fdup variance f<span class="sym">+ (</span> avg<span class="sym">-</span>deviation dev^<span class="num">2</span> variance <span class="sym">)</span>
	fswap deviation f<span class="sym">*</span> fdup skew f<span class="sym">+ (</span> avg<span class="sym">-</span>deviation variance dev^<span class="num">2</span> skew <span class="sym">)</span>
	fswap deviation f<span class="sym">*</span> kurtosis f<span class="sym">+ (</span> avg<span class="sym">-</span>deviation variance skew kurtosis <span class="sym">)</span>
	<span class="kwb">float</span> <span class="sym">+</span>loop
    frot n <span class="num">1</span>e f<span class="sym">-</span> f<span class="sym">/</span> to variance
    frot to avg<span class="sym">-</span><span class="kwd">deviation</span> <span class="sym">(</span> skew kurtosis <span class="sym">)</span>
    variance fsqrt <span class="sym">{</span> f<span class="sym">:</span> standard<span class="sym">-</span>deviation <span class="sym">}</span>
    variance f0<span class="sym">&lt;&gt;</span> <span class="kwa">if</span>
	n variance fdup f<span class="sym">*</span> f<span class="sym">*</span> f<span class="sym">/</span> <span class="num">3</span>e f<span class="sym">-</span>
	fswap n variance f<span class="sym">*</span>  standard<span class="sym">-</span>deviation f<span class="sym">*</span> f<span class="sym">/</span> fswap
    endif
    fswap variance standard<span class="sym">-</span>deviation avg<span class="sym">-</span>deviation n f<span class="sym">/</span> mean <span class="sym">;</span>

<span class="sym">(</span>field<span class="sym">)</span> <span class="kwb">float</span><span class="sym">- -</span><span class="num">1</span> floats <span class="sym">,</span>

<span class="sym">:</span> partition <span class="sym">{</span> first last <span class="sym">--</span> last<span class="sym">-</span>smaller first<span class="sym">-</span>larger <span class="sym">}</span>
    \ partition array addr1 u1 into all elements less than pivot <span class="kwa">and</span> all
    \ others<span class="sym">,</span> addr1 u2 <span class="kwa">and</span> addr3 u3 are the two partitions<span class="sym">.</span>
    \ lessthan<span class="sym">-</span><span class="kwd">xt</span> <span class="sym">(</span> elemptr1 elemptr2 <span class="sym">--</span> f <span class="sym">)</span> compares the two elements
    first last <span class="sym">+</span> <span class="num">1</span> rshift faligned f&#64; <span class="sym">{</span> f<span class="sym">:</span> pivot <span class="sym">}</span>
    first last <span class="kwd">begin</span> <span class="sym">(</span> i j <span class="sym">)</span>
	begin
	    pivot dup f&#64; f<span class="sym">&lt;</span> over first u<span class="sym">&gt;</span> <span class="kwa">and</span>
	<span class="kwa">while</span>
	    <span class="kwb">float</span><span class="sym">-</span>
	repeat
	swap <span class="kwd">begin</span> <span class="sym">(</span> j i <span class="sym">)</span>
	    dup last u<span class="sym">&lt;</span> over f&#64; pivot f<span class="sym">&lt;</span> <span class="kwa">and</span>
	<span class="kwa">while</span>
	    <span class="kwb">float</span><span class="sym">+</span>
	repeat
	<span class="num">2</span>dup u<span class="sym">&gt;=</span>
    <span class="kwa">while</span> <span class="sym">(</span> j i <span class="sym">)</span>
	dup f&#64; over f&#64; dup f<span class="sym">!</span> over f<span class="sym">!</span>
	<span class="kwb">float</span><span class="sym">+</span> swap <span class="kwb">float</span><span class="sym">-</span>
    repeat <span class="sym">;</span>

<span class="sym">:</span> <span class="kwd">quantile</span> <span class="sym">(</span> first last quant<span class="sym">-</span>low quant<span class="sym">-</span>high <span class="sym">-- )</span> recursive
    \ sorts the array <span class="sym">[</span>first<span class="sym">,</span>last<span class="sym">]</span> such that the contained part of
    \ <span class="sym">[</span>quant<span class="sym">-</span>low<span class="sym">,</span>quant<span class="sym">-</span>high<span class="sym">]</span> is the same as in the fully sorted array<span class="sym">.</span>
    <span class="sym">{</span> quant<span class="sym">-</span>low quant<span class="sym">-</span>high <span class="sym">}</span>
    begin <span class="sym">{</span> first last <span class="sym">}</span>
	first quant<span class="sym">-</span>high u<span class="sym">&lt;</span> quant<span class="sym">-</span>low last u<span class="sym">&lt;</span> <span class="kwa">and</span>
    <span class="kwa">while</span>
	first last <span class="kwd">partition</span> <span class="sym">(</span> last<span class="sym">-</span>smaller first<span class="sym">-</span>larger <span class="sym">)</span>
	last quant<span class="sym">-</span>low quant<span class="sym">-</span>high quantile
	first swap
    repeat <span class="sym">;</span>

<span class="sym">:</span> median <span class="sym">{</span> addr u <span class="sym">--</span> rmedian <span class="sym">}</span>
    addr u <span class="num">1</span><span class="sym">-</span> <span class="num">2</span><span class="sym">/</span> floats <span class="sym">+</span> addr u <span class="num">2</span><span class="sym">/</span> floats <span class="sym">+ (</span> quant<span class="sym">-</span>low quant<span class="sym">-</span>high <span class="sym">)</span>
    addr addr u <span class="num">1</span><span class="sym">-</span> floats <span class="sym">+</span> <span class="num">2</span>over quantile
    f&#64; f&#64; f<span class="sym">+</span> f2<span class="sym">/ ;</span>

<span class="sym">(</span> based on <span class="str">&quot;f.&quot;</span> word from gforth <span class="sym">)</span>
<span class="sym">:</span> ff<span class="sym">.  (</span> r <span class="sym">-- )</span>
  f$ dup <span class="sym">&gt;</span>r <span class="num">0</span><span class="sym">&lt;</span>
  IF <span class="str">'0 emit ELSE scratch r&#64; min type r&#64; precision - zeros ENDIF</span>
<span class="str">  '</span><span class="sym">.</span> emit
  r&#64; negate zeros
  scratch r<span class="sym">&gt;</span> <span class="num">0</span> max <span class="sym">/</span>string <span class="num">0</span> max type <span class="sym">;</span>

create nums \ s<span class="str">&quot; moments.input&quot;</span> r<span class="sym">/</span>o open<span class="sym">-</span>file <span class="kwa">throw</span> input<span class="sym">-</span>floats
stdin input<span class="sym">-</span>floats
nums here over <span class="sym">-</span> <span class="kwb">float</span> <span class="sym">/</span>
<span class="sym">.</span><span class="str">&quot; n:                  &quot;</span> dup <span class="num">0</span> <span class="sym">.</span>r cr
compute<span class="sym">-</span>loop
nums here over <span class="sym">-</span> <span class="kwb">float</span> <span class="sym">/</span> median  <span class="num">9</span> set<span class="sym">-</span>precision
<span class="sym">.</span><span class="str">&quot; median:             &quot;</span> ff<span class="sym">.</span> cr
<span class="sym">.</span><span class="str">&quot; mean:               &quot;</span> ff<span class="sym">.</span> cr
<span class="sym">.</span><span class="str">&quot; average_deviation:  &quot;</span> ff<span class="sym">.</span> cr
<span class="sym">.</span><span class="str">&quot; standard_deviation: &quot;</span> ff<span class="sym">.</span> cr <span class="num">11</span> set<span class="sym">-</span>precision
<span class="sym">.</span><span class="str">&quot; variance:           &quot;</span> ff<span class="sym">.</span> cr  <span class="num">7</span> set<span class="sym">-</span>precision
<span class="sym">.</span><span class="str">&quot; skew:               &quot;</span> ff<span class="sym">.</span> cr
<span class="sym">.</span><span class="str">&quot; kurtosis:           &quot;</span> ff<span class="sym">.</span> cr
bye
