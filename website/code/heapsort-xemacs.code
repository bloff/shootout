<span class="slc">;;; -*- mode: emacs-lisp -*-</span>
<span class="slc">;;; $Id: heapsort-xemacs.code,v 1.7 2006-09-20 05:51:36 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>defconst IM     <span class="num">139968</span><span class="sym">)</span>
<span class="sym">(</span>defconst IA       <span class="num">3877</span><span class="sym">)</span>
<span class="sym">(</span>defconst IC      <span class="num">29573</span><span class="sym">)</span>

<span class="sym">(</span>defvar LAST <span class="num">42</span><span class="sym">)</span>

<span class="sym">(</span><span class="kwa">defun</span> gen_random <span class="sym">(</span><span class="kwa">max</span><span class="sym">)</span>
  <span class="sym">(/ (*</span> <span class="kwa">max</span> <span class="sym">(</span><span class="kwa">setq</span> LAST <span class="sym">(</span>% <span class="sym">(+ (*</span> LAST IA<span class="sym">)</span> IC<span class="sym">)</span> IM<span class="sym">)))</span> IM<span class="sym">))</span>

<span class="sym">(</span><span class="kwa">defun</span> heapsort <span class="sym">(</span>n ra<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>ir n<span class="sym">)</span>
	<span class="sym">(</span>l <span class="sym">(+ (</span><span class="kwa">lsh</span> n <span class="sym">-</span><span class="num">1</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))</span>
	<span class="sym">(</span>i <span class="num">0</span><span class="sym">)</span>
	<span class="sym">(</span>j <span class="num">0</span><span class="sym">)</span>
	<span class="sym">(</span>rra <span class="num">0.0</span><span class="sym">))</span>
    <span class="sym">(</span>catch <span class="str">'return</span>
<span class="str">      (while t</span>
<span class="str">	(cond ((&gt; l 1)</span>
<span class="str">	       (setq rra (aref ra (setq l (- l 1)))))</span>
<span class="str">	      (t</span>
<span class="str">	       (setq rra (aref ra ir))</span>
<span class="str">	       (aset ra ir (aref ra 1))</span>
<span class="str">	       (setq ir (- ir 1))</span>
<span class="str">	       (if (= ir 1)</span>
<span class="str">		   (throw '</span>return <span class="sym">(</span>aset ra <span class="num">1</span> rra<span class="sym">)))))</span>
	<span class="sym">(</span><span class="kwa">setq</span> i l<span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">setq</span> j <span class="sym">(</span><span class="kwa">lsh</span> l <span class="num">1</span><span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">while</span> <span class="sym">(&lt;=</span> j ir<span class="sym">)</span>
	  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">and</span> <span class="sym">(&lt;</span> j ir<span class="sym">) (&lt; (</span>aref ra j<span class="sym">) (</span>aref ra <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))))</span>
		 <span class="sym">(</span><span class="kwa">setq</span> j <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))))</span>
	  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> rra <span class="sym">(</span>aref ra j<span class="sym">))</span>
		 <span class="sym">(</span>aset ra i <span class="sym">(</span>aref ra j<span class="sym">))</span>
		 <span class="sym">(</span><span class="kwa">setq</span> j <span class="sym">(+</span> j <span class="sym">(</span><span class="kwa">setq</span> i j<span class="sym">))))</span>
		<span class="sym">(</span>t
		 <span class="sym">(</span><span class="kwa">setq</span> j <span class="sym">(+</span> ir <span class="num">1</span><span class="sym">)))))</span>
	<span class="sym">(</span>aset ra i rra<span class="sym">)))))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>arg <span class="sym">(</span><span class="kwa">car command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>args<span class="sym">-</span>left<span class="sym">))</span>
	 <span class="sym">(</span>n <span class="sym">(</span><span class="kwa">if</span> arg <span class="sym">(</span>string<span class="sym">-</span>to<span class="sym">-</span>number arg<span class="sym">)</span> <span class="num">1</span><span class="sym">))</span>
	 <span class="sym">(</span><span class="kwa">last</span> <span class="sym">(+</span> n <span class="num">1</span><span class="sym">))</span>
	 <span class="sym">(</span>ary <span class="sym">(</span>make<span class="sym">-</span>vector <span class="kwa">last</span> <span class="num">0</span><span class="sym">)))</span>
    <span class="sym">(</span>dotimes <span class="sym">(</span>i <span class="kwa">last</span><span class="sym">)</span>
      <span class="sym">(</span>aset ary i <span class="sym">(</span>gen_random <span class="num">1.0</span><span class="sym">)))</span>
    <span class="sym">(</span>heapsort n ary<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">princ</span> <span class="sym">(</span>format <span class="str">&quot;%.10f</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>aref ary n<span class="sym">)))</span>
  <span class="sym">(</span>kill<span class="sym">-</span>emacs <span class="num">0</span><span class="sym">)))</span>
