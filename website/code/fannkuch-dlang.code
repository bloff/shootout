<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release fannkuch.d</span>
<span class="com">*/</span>

import std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwb">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? atoi<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>
    writefln<span class="sym">(</span><span class="str">&quot;Pfannkuchen(&quot;</span><span class="sym">,</span>n<span class="sym">,</span><span class="str">&quot;) = &quot;</span><span class="sym">,</span>fannkuch<span class="sym">(</span>n<span class="sym">));</span>
    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> fannkuch<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">)</span>
in
<span class="sym">{</span>
    assert<span class="sym">(</span>n <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">);</span>
<span class="sym">}</span>
out<span class="sym">(</span>result<span class="sym">)</span>
<span class="sym">{</span>
    assert<span class="sym">(</span>result <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>
body
<span class="sym">{</span>
    <span class="kwb">int</span><span class="sym">[]</span> perm <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">],</span> perm1 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">],</span> count <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];</span>
    <span class="kwb">int</span>   i<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> temp<span class="sym">,</span> flips<span class="sym">,</span> m <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> r <span class="sym">=</span> n<span class="sym">,</span> maxFlipsCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwb">int</span> check <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

    foreach<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> inout <span class="kwb">int</span> p<span class="sym">;</span> perm1<span class="sym">)</span> p <span class="sym">=</span> i<span class="sym">;</span>
    <span class="kwa">for</span><span class="sym">(;;)</span>
    <span class="sym">{</span>
       <span class="kwa">if</span> <span class="sym">(</span>check <span class="sym">&lt;</span> <span class="num">30</span><span class="sym">)</span>
       <span class="sym">{</span>
            foreach<span class="sym">(</span><span class="kwb">int</span> p<span class="sym">;</span> perm1<span class="sym">)</span> writef<span class="sym">(</span>p<span class="sym">+</span><span class="num">1</span><span class="sym">);</span>
            writefln<span class="sym">();</span>
            check<span class="sym">++;</span>
        <span class="sym">}</span>

        <span class="kwa">while</span><span class="sym">(</span>r <span class="sym">!=</span> <span class="num">1</span><span class="sym">) {</span> count<span class="sym">[</span>r<span class="sym">-</span><span class="num">1</span><span class="sym">] =</span> r<span class="sym">;</span> r<span class="sym">--; }</span>
        <span class="kwa">if</span><span class="sym">(!(</span>perm1<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="num">0</span> <span class="sym">||</span> perm1<span class="sym">[</span>m<span class="sym">] ==</span> m<span class="sym">))</span>
        <span class="sym">{</span>
            foreach<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> p<span class="sym">;</span> perm1<span class="sym">)</span> perm<span class="sym">[</span>i<span class="sym">] =</span> p<span class="sym">;</span>

            i <span class="sym">=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
            flips <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="kwa">while</span><span class="sym">(</span>i<span class="sym">)</span>
            <span class="sym">{</span>
                temp <span class="sym">=</span> perm<span class="sym">[</span>i<span class="sym">];</span>
                perm<span class="sym">[</span>i<span class="sym">] =</span> i<span class="sym">;</span>
                i <span class="sym">=</span> temp<span class="sym">;</span>
                <span class="kwa">for</span><span class="sym">(</span>j <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span> k <span class="sym">=</span> i <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span> j <span class="sym">&lt;</span> k<span class="sym">;</span> j<span class="sym">++,</span> k<span class="sym">--)</span>
                <span class="sym">{</span>
                    temp <span class="sym">=</span> perm<span class="sym">[</span>j<span class="sym">];</span>
                    perm<span class="sym">[</span>j<span class="sym">] =</span> perm<span class="sym">[</span>k<span class="sym">];</span>
                    perm<span class="sym">[</span>k<span class="sym">] =</span> temp<span class="sym">;</span>
                <span class="sym">}</span>
                flips<span class="sym">++;</span>
            <span class="sym">}</span>

            <span class="kwa">if</span><span class="sym">(</span>flips <span class="sym">&gt;</span> maxFlipsCount<span class="sym">)</span> maxFlipsCount <span class="sym">=</span> flips<span class="sym">;</span>
        <span class="sym">}</span>
        <span class="kwa">for</span><span class="sym">(;;)</span>
        <span class="sym">{</span>
            <span class="kwa">if</span><span class="sym">(</span>r <span class="sym">==</span> n<span class="sym">)</span> <span class="kwa">return</span><span class="sym">(</span>maxFlipsCount<span class="sym">);</span>
            temp <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
            <span class="kwa">for</span><span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> r<span class="sym">;)</span>
            <span class="sym">{</span>
                j <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
                perm1<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>j<span class="sym">];</span>
                i <span class="sym">=</span> j<span class="sym">;</span>
            <span class="sym">}</span>
            perm1<span class="sym">[</span>r<span class="sym">] =</span> temp<span class="sym">;</span>

            count<span class="sym">[</span>r<span class="sym">]--;</span>
            <span class="kwa">if</span><span class="sym">(</span>count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;</span>
            r<span class="sym">++;</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>


