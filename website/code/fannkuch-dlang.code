<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   converted to D by Dave Fladebo
   compile: dmd -O -inline -release fannkuch.d
*/</span>

import std<span class="sym">.</span>math<span class="sym">,</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;

</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)
{
</span>    <span class="kwb">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? atoi<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;
</span>    writefln<span class="sym">(</span><span class="str">&quot;Pfannkuchen(&quot;</span><span class="sym">,</span>n<span class="sym">,</span><span class="str">&quot;) = &quot;</span><span class="sym">,</span>F<span class="sym">(</span>n<span class="sym">));
}

</span><span class="kwb">int</span> F<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">)
{
</span>    <span class="kwb">int</span><span class="sym">[]</span> perm <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">],</span> perm1 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">],</span> count <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">],</span> maxPerm <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>n<span class="sym">];
</span>    <span class="kwb">int</span> m <span class="sym">=</span> n <span class="num">- 1</span><span class="sym">,</span> r <span class="sym">=</span> n<span class="sym">,</span> i<span class="sym">,</span> k<span class="sym">,</span> temp<span class="sym">,</span> maxFlipsCount <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> flipsCount<span class="sym">,</span> perm0<span class="sym">;

</span>    foreach<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> inout <span class="kwb">int</span> p<span class="sym">;</span> perm1<span class="sym">)</span> p <span class="sym">=</span> i<span class="sym">;
</span>    <span class="kwa">for</span><span class="sym">(;;)
    {
</span>        <span class="kwa">while</span><span class="sym">(</span>r <span class="sym">!=</span> <span class="num">1</span><span class="sym">) {</span> count<span class="sym">[</span>r<span class="num">-1</span><span class="sym">] =</span> r<span class="sym">;</span> r<span class="sym">--; }
</span>        <span class="kwa">if</span><span class="sym">( !(</span>perm1<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="num">0</span> <span class="sym">||</span> perm1<span class="sym">[</span>m<span class="sym">] ==</span> m<span class="sym">) )
        {
</span>            foreach<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> p<span class="sym">;</span> perm1<span class="sym">)</span> perm<span class="sym">[</span>i<span class="sym">] =</span> p<span class="sym">;
</span>            flipsCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>            <span class="kwa">for</span><span class="sym">(;;)
            {
</span>                k <span class="sym">=</span> perm<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span>                <span class="kwa">if</span><span class="sym">(</span>k <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;
</span>                <span class="kwb">int</span> k2 <span class="sym">= (</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">) &gt;&gt;</span> <span class="num">1</span><span class="sym">;
</span>                <span class="kwa">for</span><span class="sym">(</span>i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> k2<span class="sym">;</span> i<span class="sym">++)
                {
</span>                   temp <span class="sym">=</span> perm<span class="sym">[</span>i<span class="sym">];</span> perm<span class="sym">[</span>i<span class="sym">] =</span> perm<span class="sym">[</span>k<span class="sym">-</span>i<span class="sym">];</span> perm<span class="sym">[</span>k<span class="sym">-</span>i<span class="sym">] =</span> temp<span class="sym">;
                }
</span>                flipsCount<span class="sym">++;
            }
</span>            <span class="kwa">if</span><span class="sym">(</span>flipsCount <span class="sym">&gt;</span> maxFlipsCount<span class="sym">)
            {
</span>                maxFlipsCount <span class="sym">=</span> flipsCount<span class="sym">;
</span>                foreach<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> <span class="kwb">int</span> p<span class="sym">;</span> perm1<span class="sym">)</span> maxPerm<span class="sym">[</span>i<span class="sym">] =</span> p<span class="sym">;
            }
        }
</span>        <span class="kwa">for</span><span class="sym">(;;)
        {
</span>            <span class="kwa">if</span><span class="sym">(</span>r <span class="sym">==</span> n<span class="sym">)</span> <span class="kwa">return</span><span class="sym">(</span>maxFlipsCount<span class="sym">);
</span>            perm0 <span class="sym">=</span> perm1<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span>            i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>            <span class="kwa">while</span><span class="sym">(</span>i <span class="sym">&lt;</span> r<span class="sym">)
            {
</span>                k <span class="sym">=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>                perm1<span class="sym">[</span>i<span class="sym">] =</span> perm1<span class="sym">[</span>k<span class="sym">];
</span>                i <span class="sym">=</span> k<span class="sym">;
            }
</span>            perm1<span class="sym">[</span>r<span class="sym">] =</span> perm0<span class="sym">;

</span>            count<span class="sym">[</span>r<span class="sym">]--;
</span>            <span class="kwa">if</span><span class="sym">(</span>count<span class="sym">[</span>r<span class="sym">] &gt;</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">break</span><span class="sym">;
</span>            r<span class="sym">++;
        }
    }
}</span>
