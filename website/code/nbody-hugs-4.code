<span class="com">{-# OPTIONS -funbox-strict-fields #-}</span>
<span class="slc">--</span>
<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Written by Joel Koerwer.</span>
<span class="slc">-- Uses 7 STUArrays for the state.</span>
<span class="slc">-- Edited for length by ChrisKuklewicz</span>
<span class="slc">--</span>
<span class="slc">-- -O3 -optc-O3 -fexcess-precision -funbox-strict-fields -optc-ffast-math</span>
<span class="slc">--</span>
<span class="slc">-- -funbox-strict-fields is critical</span>
<span class="slc">--</span>
<span class="slc">-- -optc-ffast-math doesn't speed things up for me.</span>
<span class="slc">-- Well, neither does -optc-O3, but that may just be here.</span>
<span class="slc">--</span>
<span class="kwa">import</span> Control.Monad    <span class="sym">(</span>liftM2<span class="sym">,</span>liftM3<span class="sym">,</span>liftM4<span class="sym">)</span>
<span class="kwa">import</span> Control.Monad.ST <span class="sym">(</span>ST<span class="sym">,</span> runST<span class="sym">)</span>
<span class="kwa">import</span> Data.Array.ST    <span class="sym">(</span>STUArray<span class="sym">,</span> newListArray<span class="sym">)</span>
<span class="kwa">import</span> Data.Array.Base  <span class="sym">(</span>unsafeRead<span class="sym">,</span> unsafeWrite<span class="sym">)</span>
<span class="kwa">import</span> System           <span class="sym">(</span>getArgs<span class="sym">)</span>
<span class="kwa">import</span> Text.Printf      <span class="sym">(</span>printf<span class="sym">)</span>

<span class="sym">(!) =</span> unsafeRead <span class="sym">::</span> STUArray s <span class="kwb">Int Double</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> ST s <span class="kwb">Double</span>
writeArray <span class="sym">=</span> unsafeWrite <span class="sym">::</span> STUArray s <span class="kwb">Int Double</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Double</span> <span class="sym">-&gt;</span> ST s <span class="sym">()</span>
size <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">=</span> <span class="num">5</span>
dt <span class="sym">::</span> <span class="kwb">Double</span> <span class="sym">=</span> <span class="num">0.01</span>

<span class="kwa">data</span> PhaseSpace s <span class="sym">=</span> PS {ms<span class="sym">,</span>rxs<span class="sym">,</span>rys<span class="sym">,</span>rzs<span class="sym">,</span>vxs<span class="sym">,</span>vys<span class="sym">,</span>vzs <span class="sym">:: !(</span>STUArray s <span class="kwb">Int Double</span><span class="sym">)</span>}

main <span class="sym">::</span> IO <span class="sym">()</span>
main <span class="sym">=</span> <span class="kwa">do</span> n <span class="sym">&lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> readIO . head
          printf <span class="str">&quot;%.9f\n&quot;</span> $ runST <span class="sym">(</span><span class="kwa">do</span> state <span class="sym">&lt;-</span> initialState
                                      offsetMomentum state
                                      energy state<span class="sym">)</span>
          printf <span class="str">&quot;%.9f\n&quot;</span> $ runST <span class="sym">(</span><span class="kwa">do</span> state <span class="sym">&lt;-</span> initialState
                                      offsetMomentum state
                                      energy state
                                      advance n state
                                      energy state<span class="sym">)</span>

advance <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> PhaseSpace s <span class="sym">-&gt;</span> ST s <span class="sym">()</span>
advance <span class="num">0</span> _   <span class="sym">=</span> return <span class="sym">()</span>
advance n sys <span class="sym">=</span> <span class="kwa">do</span> kick sys
                   drift sys
                   advance <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span> sys

readAll <span class="sym">(</span>PS m x y z vx vy vz<span class="sym">)</span> i <span class="sym">=</span> <span class="kwa">do</span> <span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">) &lt;-</span> liftM3 <span class="sym">(,,) (</span>x<span class="sym">!</span>i<span class="sym">)  (</span>y<span class="sym">!</span>i<span class="sym">) (</span>z<span class="sym">!</span>i<span class="sym">)</span>
                                     <span class="sym">(</span>vx<span class="sym">,</span>vy<span class="sym">,</span>vz<span class="sym">) &lt;-</span> liftM3 <span class="sym">(,,) (</span>vx<span class="sym">!</span>i<span class="sym">) (</span>vy<span class="sym">!</span>i<span class="sym">) (</span>vz<span class="sym">!</span>i<span class="sym">)</span>
                                     return <span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">,</span>vx<span class="sym">,</span>vy<span class="sym">,</span>vz<span class="sym">)</span>
<span class="com">{-# INLINE readAll #-}</span>

kick ps&#64;<span class="sym">(</span>PS m rx ry rz vx vy vz<span class="sym">) =</span> outer <span class="num">0</span> <span class="kwa">where</span>
    outer i <span class="sym">|</span> i <span class="sym">&gt;=</span> size <span class="sym">=</span> return <span class="sym">()</span>
            <span class="sym">|</span> otherwise <span class="sym">=</span> inner <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">) &gt;&gt;</span> outer <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">where</span>
                inner j <span class="sym">|</span> j <span class="sym">&gt;=</span> size <span class="sym">=</span> return <span class="sym">()</span>
                        <span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">do</span>
                            <span class="sym">(</span>mi<span class="sym">,</span>mj<span class="sym">) &lt;-</span> liftM2 <span class="sym">(,) (</span>m<span class="sym">!</span>i<span class="sym">) (</span>m<span class="sym">!</span>j<span class="sym">)</span>
                            <span class="sym">(</span>rxi<span class="sym">,</span>ryi<span class="sym">,</span>rzi<span class="sym">,</span>vxi<span class="sym">,</span>vyi<span class="sym">,</span>vzi<span class="sym">) &lt;-</span> readAll ps i
                            <span class="sym">(</span>rxj<span class="sym">,</span>ryj<span class="sym">,</span>rzj<span class="sym">,</span>vxj<span class="sym">,</span>vyj<span class="sym">,</span>vzj<span class="sym">) &lt;-</span> readAll ps j
                            <span class="kwa">let</span> <span class="sym">(</span>dx<span class="sym">,</span>dy<span class="sym">,</span>dz<span class="sym">) = (</span>rxi<span class="sym">-</span>rxj<span class="sym">,</span> ryi<span class="sym">-</span>ryj<span class="sym">,</span> rzi<span class="sym">-</span>rzj<span class="sym">)</span>
                                dist2 <span class="sym">=</span> dx<span class="sym">*</span>dx <span class="sym">+</span> dy<span class="sym">*</span>dy <span class="sym">+</span> dz<span class="sym">*</span>dz
                                mag <span class="sym">=</span> dt <span class="sym">/ (</span>dist2 <span class="sym">*</span> sqrt dist2<span class="sym">)</span>
                            writeArray vx i <span class="sym">(</span>vxi <span class="sym">-</span> dx<span class="sym">*</span>mj<span class="sym">*</span>mag<span class="sym">)</span>
                            writeArray vy i <span class="sym">(</span>vyi <span class="sym">-</span> dy<span class="sym">*</span>mj<span class="sym">*</span>mag<span class="sym">)</span>
                            writeArray vz i <span class="sym">(</span>vzi <span class="sym">-</span> dz<span class="sym">*</span>mj<span class="sym">*</span>mag<span class="sym">)</span>
                            writeArray vx j <span class="sym">(</span>vxj <span class="sym">+</span> dx<span class="sym">*</span>mi<span class="sym">*</span>mag<span class="sym">)</span>
                            writeArray vy j <span class="sym">(</span>vyj <span class="sym">+</span> dy<span class="sym">*</span>mi<span class="sym">*</span>mag<span class="sym">)</span>
                            writeArray vz j <span class="sym">(</span>vzj <span class="sym">+</span> dz<span class="sym">*</span>mi<span class="sym">*</span>mag<span class="sym">)</span>
                            inner <span class="sym">(</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>

drift ps&#64;<span class="sym">(</span>PS _ rxs rys rzs _ _ _<span class="sym">) =</span> loop <span class="num">0</span> <span class="kwa">where</span>
    loop i <span class="sym">|</span> i <span class="sym">&gt;=</span> size <span class="sym">=</span> return <span class="sym">()</span>
           <span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">do</span> <span class="sym">(</span>x<span class="sym">,</span>y<span class="sym">,</span>z<span class="sym">,</span>vx<span class="sym">,</span>vy<span class="sym">,</span>vz<span class="sym">) &lt;-</span> readAll ps i
                            writeArray rxs i <span class="sym">(</span>x <span class="sym">+</span> dt<span class="sym">*</span>vx<span class="sym">)</span>
                            writeArray rys i <span class="sym">(</span>y <span class="sym">+</span> dt<span class="sym">*</span>vy<span class="sym">)</span>
                            writeArray rzs i <span class="sym">(</span>z <span class="sym">+</span> dt<span class="sym">*</span>vz<span class="sym">)</span>
                            loop <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>

energy sys <span class="sym">=</span> liftM2 <span class="sym">(+) (</span>kineticEnergy sys<span class="sym">) (</span>potentialEnergy sys<span class="sym">)</span>

kineticEnergy <span class="sym">(</span>PS ms _ _ _ vxs vys vzs<span class="sym">) =</span> loop <span class="num">0 0</span> <span class="kwa">where</span>
    loop i accum <span class="sym">|</span> i <span class="sym">&gt;=</span> size <span class="sym">=</span> return <span class="sym">(</span><span class="num">0.5</span> <span class="sym">*</span> accum<span class="sym">)</span>
                 <span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">do</span>
                        <span class="sym">(</span>m<span class="sym">,</span>vx<span class="sym">,</span>vy<span class="sym">,</span>vz<span class="sym">) &lt;-</span> liftM4 <span class="sym">(,,,) (</span>ms<span class="sym">!</span>i<span class="sym">) (</span>vxs<span class="sym">!</span>i<span class="sym">) (</span>vys<span class="sym">!</span>i<span class="sym">) (</span>vzs<span class="sym">!</span>i<span class="sym">)</span>
                        <span class="kwa">let</span> v2 <span class="sym">=</span> vx<span class="sym">*</span>vx <span class="sym">+</span> vy<span class="sym">*</span>vy <span class="sym">+</span> vz<span class="sym">*</span>vz
                        loop <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> $<span class="sym">! (</span>accum <span class="sym">+</span> m<span class="sym">*</span>v2<span class="sym">)</span>

potentialEnergy <span class="sym">(</span>PS ms rxs rys rzs _ _ _<span class="sym">) =</span> outer <span class="num">0 0</span> <span class="kwa">where</span>
    outer i a <span class="sym">|</span> i <span class="sym">&gt;=</span> size <span class="sym">=</span> return a
              <span class="sym">|</span> otherwise <span class="sym">=</span> inner i <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> a <span class="sym">&gt;&gt;=</span> outer <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
    inner i j a <span class="sym">|</span> j <span class="sym">&gt;=</span> size <span class="sym">=</span> return a
                <span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">do</span>
                    <span class="sym">(</span>mi<span class="sym">,</span>xi<span class="sym">,</span>yi<span class="sym">,</span>zi<span class="sym">) &lt;-</span> liftM4 <span class="sym">(,,,) (</span>ms<span class="sym">!</span>i<span class="sym">) (</span>rxs<span class="sym">!</span>i<span class="sym">) (</span>rys<span class="sym">!</span>i<span class="sym">) (</span>rzs<span class="sym">!</span>i<span class="sym">)</span>
                    <span class="sym">(</span>mj<span class="sym">,</span>xj<span class="sym">,</span>yj<span class="sym">,</span>zj<span class="sym">) &lt;-</span> liftM4 <span class="sym">(,,,) (</span>ms<span class="sym">!</span>j<span class="sym">) (</span>rxs<span class="sym">!</span>j<span class="sym">) (</span>rys<span class="sym">!</span>j<span class="sym">) (</span>rzs<span class="sym">!</span>j<span class="sym">)</span>
                    <span class="kwa">let</span> <span class="sym">(</span>dx<span class="sym">,</span>dy<span class="sym">,</span>dz<span class="sym">) = (</span>xi<span class="sym">-</span>xj<span class="sym">,</span> yi<span class="sym">-</span>yj<span class="sym">,</span> zi<span class="sym">-</span>zj<span class="sym">)</span>
                        dist <span class="sym">=</span> sqrt <span class="sym">(</span>dx<span class="sym">*</span>dx <span class="sym">+</span> dy<span class="sym">*</span>dy <span class="sym">+</span> dz<span class="sym">*</span>dz<span class="sym">)</span>
                    inner i <span class="sym">(</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> $<span class="sym">! (</span>a <span class="sym">-</span> mi<span class="sym">*</span>mj<span class="sym">/</span>dist<span class="sym">)</span>

offsetMomentum <span class="sym">(</span>PS ms rxs rys rzs vxs vys vzs<span class="sym">) =</span> <span class="kwa">do</span>
    <span class="sym">(</span>px<span class="sym">,</span>py<span class="sym">,</span>pz<span class="sym">) &lt;-</span> calcMomentum <span class="num">0</span> <span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">)</span>
    <span class="sym">(</span>mSun<span class="sym">,</span>vSunx<span class="sym">,</span>vSuny<span class="sym">,</span>vSunz<span class="sym">) &lt;-</span> liftM4 <span class="sym">(,,,) (</span>ms<span class="sym">!</span><span class="num">0</span><span class="sym">) (</span>vxs<span class="sym">!</span><span class="num">0</span><span class="sym">) (</span>vys<span class="sym">!</span><span class="num">0</span><span class="sym">) (</span>vzs<span class="sym">!</span><span class="num">0</span><span class="sym">)</span>
    writeArray vxs <span class="num">0</span> <span class="sym">(</span>vSunx <span class="sym">-</span> px<span class="sym">/</span>mSun<span class="sym">)</span>
    writeArray vys <span class="num">0</span> <span class="sym">(</span>vSuny <span class="sym">-</span> py<span class="sym">/</span>mSun<span class="sym">)</span>
    writeArray vzs <span class="num">0</span> <span class="sym">(</span>vSunz <span class="sym">-</span> pz<span class="sym">/</span>mSun<span class="sym">)</span>
  <span class="kwa">where</span> calcMomentum i <span class="sym">(</span>px<span class="sym">,</span>py<span class="sym">,</span>pz<span class="sym">) |</span> i <span class="sym">&gt;=</span> size <span class="sym">=</span> return <span class="sym">(</span>px<span class="sym">,</span>py<span class="sym">,</span>pz<span class="sym">)</span>
                                  <span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">do</span>
                                        <span class="sym">(</span>m<span class="sym">,</span>vx<span class="sym">,</span>vy<span class="sym">,</span>vz<span class="sym">) &lt;-</span> liftM4 <span class="sym">(,,,) (</span>ms<span class="sym">!</span>i<span class="sym">) (</span>vxs<span class="sym">!</span>i<span class="sym">) (</span>vys<span class="sym">!</span>i<span class="sym">) (</span>vzs<span class="sym">!</span>i<span class="sym">)</span>
                                        calcMomentum <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> $<span class="sym">! (</span>px<span class="sym">+</span>vx<span class="sym">*</span>m<span class="sym">,</span>py<span class="sym">+</span>vy<span class="sym">*</span>m<span class="sym">,</span>pz<span class="sym">+</span>vz<span class="sym">*</span>m<span class="sym">)</span>

initialState <span class="sym">=</span> <span class="kwa">do</span> m <span class="sym">&lt;-</span> mkSTUArray masses
                  x <span class="sym">&lt;-</span> mkSTUArray positionXs
                  y <span class="sym">&lt;-</span> mkSTUArray positionYs
                  z <span class="sym">&lt;-</span> mkSTUArray positionZs
                  vx <span class="sym">&lt;-</span> mkSTUArray velocityXs
                  vy <span class="sym">&lt;-</span> mkSTUArray velocityYs
                  vz <span class="sym">&lt;-</span> mkSTUArray velocityZs
                  return <span class="sym">(</span>PS m x y z vx vy vz<span class="sym">)</span>

mkSTUArray <span class="sym">=</span> newListArray <span class="sym">(</span><span class="num">0</span><span class="sym">,</span>size<span class="sym">-</span><span class="num">1</span><span class="sym">) :: [</span><span class="kwb">Double</span><span class="sym">] -&gt;</span> ST s <span class="sym">(</span>STUArray s <span class="kwb">Int Double</span><span class="sym">)</span>

masses <span class="sym">=</span> map <span class="sym">(</span><span class="num">4</span><span class="sym">*</span>pi<span class="sym">*</span>pi<span class="sym">*) [</span><span class="num">1</span><span class="sym">,</span> <span class="num">9.54791938424326609e-04</span><span class="sym">,</span> <span class="num">2.85885980666130812e-04</span><span class="sym">,</span> <span class="num">4.36624404335156298e-05</span><span class="sym">,</span> <span class="num">5.15138902046611451e-05</span><span class="sym">]</span>

positionXs <span class="sym">= [</span><span class="num">0</span><span class="sym">,</span> <span class="num">4.84143144246472090e+00</span><span class="sym">,</span> <span class="num">8.34336671824457987e+00</span><span class="sym">,</span> <span class="num">1.28943695621391310e+01</span><span class="sym">,</span> <span class="num">1.53796971148509165e+01</span><span class="sym">]</span>

positionYs <span class="sym">= [</span><span class="num">0</span><span class="sym">, (-</span><span class="num">1.16032004402742839e+00</span><span class="sym">),</span> <span class="num">4.12479856412430479e+00</span><span class="sym">, (-</span><span class="num">1.51111514016986312e+01</span><span class="sym">), (-</span><span class="num">2.59193146099879641e+01</span><span class="sym">)]</span>

positionZs <span class="sym">= [</span><span class="num">0</span><span class="sym">, (-</span><span class="num">1.03622044471123109e-01</span><span class="sym">), (-</span><span class="num">4.03523417114321381e-01</span><span class="sym">), (-</span><span class="num">2.23307578892655734e-01</span><span class="sym">),</span> <span class="num">1.79258772950371181e-01</span><span class="sym">]</span>

velocityXs <span class="sym">=</span> map <span class="sym">(</span><span class="num">365.24</span><span class="sym">*) [</span><span class="num">0</span><span class="sym">,</span> <span class="num">1.66007664274403694e-03</span><span class="sym">, (-</span><span class="num">2.76742510726862411e-03</span><span class="sym">),</span> <span class="num">2.96460137564761618e-03</span><span class="sym">,</span> <span class="num">2.68067772490389322e-03</span><span class="sym">]</span>

velocityYs <span class="sym">=</span> map <span class="sym">(</span><span class="num">365.24</span><span class="sym">*) [</span><span class="num">0</span><span class="sym">,</span> <span class="num">7.69901118419740425e-03</span><span class="sym">,</span> <span class="num">4.99852801234917238e-03</span><span class="sym">,</span> <span class="num">2.37847173959480950e-03</span><span class="sym">,</span> <span class="num">1.62824170038242295e-03</span><span class="sym">]</span>

velocityZs <span class="sym">=</span> map <span class="sym">(</span><span class="num">365.24</span><span class="sym">*) [</span><span class="num">0</span><span class="sym">, (-</span><span class="num">6.90460016972063023e-05</span><span class="sym">),</span> <span class="num">2.30417297573763929e-05</span><span class="sym">, (-</span><span class="num">2.96589568540237556e-05</span><span class="sym">), (-</span><span class="num">9.51592254519715870e-05</span><span class="sym">)]</span>

