<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Mike Pall</span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   Compile with: dmd -O -inline -release nsievebits.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwa">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    size_t m<span class="sym">,</span> sz <span class="sym">=</span> <span class="num">10000</span> <span class="sym">&lt;&lt; (</span>args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>
    bits<span class="sym">*</span> primes <span class="sym">=</span> <span class="kwa">new</span> bits<span class="sym">[</span><span class="kwb">BSIZE</span><span class="sym">(</span>sz<span class="sym">)];</span>
    <span class="kwa">for</span> <span class="sym">(</span>m <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> m <span class="sym">&lt;=</span> <span class="num">2</span><span class="sym">;</span> m<span class="sym">++)</span>
    <span class="sym">{</span>
        size_t i<span class="sym">,</span> j<span class="sym">,</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> n <span class="sym">=</span> sz <span class="sym">&gt;&gt;</span> m<span class="sym">;</span>
        primes<span class="sym">[</span><span class="num">0</span><span class="sym">..</span><span class="kwb">BSIZE</span><span class="sym">(</span>n<span class="sym">)] =</span> size_t<span class="sym">.</span>max<span class="sym">;</span>
        <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++)</span>
            <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">BTEST</span><span class="sym">(</span>primes<span class="sym">,</span> i<span class="sym">))</span>
            <span class="sym">{</span>
	        count<span class="sym">++;</span>
	        <span class="kwa">for</span> <span class="sym">(</span>j <span class="sym">=</span> i <span class="sym">*</span> <span class="num">2</span><span class="sym">;</span> j <span class="sym">&lt;</span> n<span class="sym">;</span> j <span class="sym">+=</span> i<span class="sym">)</span>
	            <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">BTEST</span><span class="sym">(</span>primes<span class="sym">,</span> j<span class="sym">))</span> <span class="kwb">BFLIP</span><span class="sym">(</span>primes<span class="sym">,</span> j<span class="sym">);</span>
            <span class="sym">}</span>
        <span class="kwd">writefln</span><span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d&quot;</span><span class="sym">,</span> n<span class="sym">,</span> count<span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">typedef</span> size_t bits<span class="sym">;</span>
size_t <span class="kwb">BBITS</span><span class="sym">() {</span> <span class="kwa">return</span> bits<span class="sym">.</span>sizeof <span class="sym">*</span> <span class="num">8</span><span class="sym">; }</span>
size_t <span class="kwb">BSIZE</span><span class="sym">(</span>size_t x<span class="sym">) {</span> <span class="kwa">return</span> x <span class="sym">/</span> <span class="num">8</span> <span class="sym">+</span> bits<span class="sym">.</span>sizeof<span class="sym">; }</span>
size_t <span class="kwb">BMASK</span><span class="sym">(</span>size_t x<span class="sym">) {</span> <span class="kwa">return</span> <span class="num">1</span> <span class="sym">&lt;&lt; (</span>x <span class="sym">%</span> <span class="kwb">BBITS</span><span class="sym">); }</span>
size_t <span class="kwb">BTEST</span><span class="sym">(</span>bits<span class="sym">*</span> p<span class="sym">,</span> size_t x<span class="sym">) {</span> <span class="kwa">return</span> p<span class="sym">[</span>x<span class="sym">/</span><span class="kwb">BBITS</span><span class="sym">] &amp;</span> <span class="kwb">BMASK</span><span class="sym">(</span>x<span class="sym">); }</span>
size_t <span class="kwb">BFLIP</span><span class="sym">(</span>bits<span class="sym">*</span> p<span class="sym">,</span> size_t x<span class="sym">) {</span> <span class="kwa">return</span> p<span class="sym">[</span>x<span class="sym">/</span><span class="kwb">BBITS</span><span class="sym">]</span> ^<span class="sym">=</span> <span class="kwb">BMASK</span><span class="sym">(</span>x<span class="sym">); }</span>
