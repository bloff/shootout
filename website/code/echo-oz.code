<span class="slc">%%% $Id: echo-oz.code,v 1.7 2005-04-04 14:56:39 bfulgham Exp $
</span><span class="slc">%%% http://dada.perl.it/shootout/
</span><span class="slc">%%%
</span><span class="slc">%%% contributed by Isaac Gouy
</span>
<span class="slc">%%  Usage: start from command line with
</span><span class="slc">%%     ozc -x echo.oz -o echo.oz.exe
</span><span class="slc">%%     echo.oz.exe 100000
</span>
<span class="kwa">functor
import
</span>   System
   Application
   Open
   OS

<span class="kwb">define
</span>   Data <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span>

<span class="kwb">proc</span> <span class="sym">{</span>ServerThread Sock SPort Bytes<span class="sym">}
</span>   Sock <span class="sym">= {</span>New Open.socket server<span class="sym">(</span>port<span class="sym">:</span>SPort<span class="sym">)}
   {</span>ServerLoop Sock <span class="num">0</span> Bytes<span class="sym">}
   {</span>Sock shutDown<span class="sym">(</span>how<span class="sym">: [</span>receive send<span class="sym">])}{</span>Sock close<span class="sym">}
</span><span class="kwb">end

proc</span> <span class="sym">{</span>ServerLoop Sock Sum Bytes<span class="sym">}
</span>   <span class="kwa">local</span> Message NewSum DR DW CR ST <span class="kwb">in

</span>      <span class="slc">%% low-level Selects seem ~6% faster total
</span>      <span class="sym">{</span>Sock getDesc<span class="sym">(</span>DR DW<span class="sym">)}{</span>OS.readSelect DR<span class="sym">}
      {</span>OS.read DR <span class="num">1024</span> Message <span class="kwa">nil</span> CR<span class="sym">}
</span>      <span class="slc">%% {Sock read(list: Message)} %% normal read
</span>
      <span class="kwb">if</span> Message <span class="sym">==</span> <span class="kwa">nil</span> <span class="kwb">then</span> <span class="slc">%% connection has been closed
</span>         Bytes <span class="sym">=</span> Sum
      <span class="kwb">else
</span>         NewSum <span class="sym">= {</span>Length Message<span class="sym">} +</span> Sum

         <span class="sym">{</span>OS.writeSelect DW<span class="sym">}{</span>OS.write DW Message ST<span class="sym">}
</span>         <span class="slc">%% {Sock write(vs: Message)} %% normal write
</span>
         <span class="sym">{</span>ServerLoop Sock NewSum Bytes<span class="sym">}
</span>      <span class="kwb">end
   end
end


proc</span> <span class="sym">{</span>ClientThread SPort N<span class="sym">}
</span>   <span class="kwa">local</span> Sock <span class="kwb">in
</span>      Sock <span class="sym">= {</span>New Open.socket client<span class="sym">(</span>port<span class="sym">:</span>SPort<span class="sym">)}
      {</span>ClientLoop Sock N<span class="sym">}
      {</span>Sock shutDown<span class="sym">(</span>how<span class="sym">: [</span>receive send<span class="sym">])}{</span>Sock close<span class="sym">}
</span>   <span class="kwb">end
end

proc</span> <span class="sym">{</span>ClientLoop Sock N<span class="sym">}
</span>   <span class="kwa">local</span> Message DR DW CR ST <span class="kwb">in
      if</span> N <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwb">then

</span>         <span class="sym">{</span>Sock getDesc<span class="sym">(</span>DR DW<span class="sym">)}
         {</span>OS.writeSelect DW<span class="sym">}{</span>OS.write DW Data ST<span class="sym">}
             {</span>OS.readSelect DR<span class="sym">}{</span>OS.read DR <span class="num">1024</span> Message <span class="kwa">nil</span> CR<span class="sym">}

</span>         <span class="slc">%% {Sock write(vs: Data)}     %% normal write
</span>             <span class="slc">%% {Sock read(list: Message)} %% normal read
</span>
         <span class="kwb">if</span> Message <span class="sym">==</span> Data <span class="kwb">then</span> <span class="sym">{</span>ClientLoop Sock N<span class="num">-1</span><span class="sym">}</span> <span class="kwb">end
      end
   end
end

in
</span>   <span class="kwa">local</span> Args A1 A2 A3 Socket SPort Bytes ArgList Pid <span class="kwb">in
</span>      Args <span class="sym">= {</span>Application.getArgs plain<span class="sym">}

</span>      <span class="kwb">if</span> <span class="sym">{</span>Length Args<span class="sym">} ==</span> <span class="num">1</span> <span class="kwb">then
</span>         <span class="slc">%% We are the server process
</span>
         A3<span class="sym">|</span><span class="kwa">nil</span> <span class="sym">=</span> Args

         <span class="kwb">thread</span> <span class="sym">{</span>ServerThread Socket SPort Bytes<span class="sym">}</span> <span class="kwb">end

</span>         <span class="slc">%% Prepare to fork an OS process for the client
</span>         <span class="slc">%%    automatically close cmd.exe
</span>         <span class="slc">%%    start echo.oz.exe
</span>         <span class="slc">%%    pass a flag indicating the client process
</span>         <span class="slc">%%    pass the open server port SPort
</span>         <span class="slc">%%    pass the number of times the client should send the data
</span>
         ArgList <span class="sym">= [</span><span class="str">&quot;/C&quot;</span> <span class="str">&quot;echo.oz&quot;</span> <span class="str">&quot;client&quot;</span> <span class="sym">{</span>IntToString SPort<span class="sym">}</span> A3<span class="sym">]
</span>         Pid <span class="sym">= {</span>New Open.pipe init<span class="sym">(</span>cmd<span class="sym">:</span> <span class="str">&quot;/bin/sh&quot;</span> args<span class="sym">:</span> ArgList<span class="sym">)}

</span>         <span class="slc">%% Synchronize with server thread completion and indirectly with
</span>         <span class="slc">%% the client process. Wait here until the dataflow variable Bytes
</span>         <span class="slc">%% has been given a value in the server thread. That happens after
</span>         <span class="slc">%% the client process closes the socket connection, when the client
</span>         <span class="slc">%% process has sent all it's data and received all the replies.
</span>
         <span class="sym">{</span>System.showInfo <span class="str">'server processed '</span>#<span class="sym">{</span>IntToString Bytes<span class="sym">}</span>#<span class="str">' bytes'</span><span class="sym">}

</span>      <span class="kwb">elseif</span> <span class="sym">{</span>Length Args<span class="sym">} ==</span> <span class="num">3</span> <span class="kwb">then
</span>         <span class="slc">%% We are the client process
</span>
         <span class="slc">%% Take the flag, server port, times-to-repeat from the args
</span>         <span class="slc">%% and use the main thread for the client
</span>         A1<span class="sym">|</span>A2<span class="sym">|</span>A3<span class="sym">|</span><span class="kwa">nil</span> <span class="sym">=</span> Args
         <span class="kwb">if</span> A1 <span class="sym">==</span> <span class="str">&quot;client&quot;</span> <span class="kwb">then
</span>            <span class="sym">{</span>ClientThread <span class="sym">{</span>StringToInt A2<span class="sym">} {</span>StringToInt A3<span class="sym">}}
</span>         <span class="kwb">end
      end
   end
</span>   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}
</span><span class="kwb">end</span>
