<span class="line">    1 </span><span class="slc">%%% $Id: echo-oz.code,v 1.4 2004-11-13 07:41:30 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">%%% http://dada.perl.it/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">%%%
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">%%% contributed by Isaac Gouy
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="slc">%%  Usage: start from command line with
</span><span class="line">    7 </span><span class="slc"></span><span class="slc">%%     ozc -x echo.oz -o echo.oz.exe
</span><span class="line">    8 </span><span class="slc"></span><span class="slc">%%     echo.oz.exe 100000
</span><span class="line">    9 </span><span class="slc"></span>
<span class="line">   10 </span><span class="kwa">functor
</span><span class="line">   11 </span><span class="kwa">import
</span><span class="line">   12 </span><span class="kwa"></span>   System
<span class="line">   13 </span>   Application
<span class="line">   14 </span>   Open
<span class="line">   15 </span>   OS
<span class="line">   16 </span>
<span class="line">   17 </span><span class="kwb">define
</span><span class="line">   18 </span><span class="kwb"></span>   Data <span class="sym">=</span> <span class="str">&quot;Hello there sailor</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   19 </span>
<span class="line">   20 </span><span class="kwb">proc</span> <span class="sym">{</span>ServerThread Sock SPort Bytes<span class="sym">}
</span><span class="line">   21 </span><span class="sym"></span>   Sock <span class="sym">= {</span>New Open.socket server<span class="sym">(</span>port<span class="sym">:</span>SPort<span class="sym">)}
</span><span class="line">   22 </span><span class="sym">   {</span>ServerLoop Sock <span class="num">0</span> Bytes<span class="sym">}
</span><span class="line">   23 </span><span class="sym">   {</span>Sock shutDown<span class="sym">(</span>how<span class="sym">: [</span>receive send<span class="sym">])}{</span>Sock close<span class="sym">}
</span><span class="line">   24 </span><span class="sym"></span><span class="kwb">end
</span><span class="line">   25 </span><span class="kwb">
</span><span class="line">   26 </span><span class="kwb">proc</span> <span class="sym">{</span>ServerLoop Sock Sum Bytes<span class="sym">}
</span><span class="line">   27 </span><span class="sym"></span>   <span class="kwa">local</span> Message NewSum DR DW CR ST <span class="kwb">in
</span><span class="line">   28 </span><span class="kwb">
</span><span class="line">   29 </span><span class="kwb"></span>      <span class="slc">%% low-level Selects seem ~6% faster total
</span><span class="line">   30 </span><span class="slc"></span>      <span class="sym">{</span>Sock getDesc<span class="sym">(</span>DR DW<span class="sym">)}{</span>OS.readSelect DR<span class="sym">}
</span><span class="line">   31 </span><span class="sym">      {</span>OS.read DR <span class="num">1024</span> Message <span class="kwa">nil</span> CR<span class="sym">}
</span><span class="line">   32 </span><span class="sym"></span>      <span class="slc">%% {Sock read(list: Message)} %% normal read
</span><span class="line">   33 </span><span class="slc"></span>
<span class="line">   34 </span>      <span class="kwb">if</span> Message <span class="sym">==</span> <span class="kwa">nil</span> <span class="kwb">then</span> <span class="slc">%% connection has been closed
</span><span class="line">   35 </span><span class="slc"></span>         Bytes <span class="sym">=</span> Sum
<span class="line">   36 </span>      <span class="kwb">else
</span><span class="line">   37 </span><span class="kwb"></span>         NewSum <span class="sym">= {</span>Length Message<span class="sym">} +</span> Sum
<span class="line">   38 </span>
<span class="line">   39 </span>         <span class="sym">{</span>OS.writeSelect DW<span class="sym">}{</span>OS.write DW Message ST<span class="sym">}
</span><span class="line">   40 </span><span class="sym"></span>         <span class="slc">%% {Sock write(vs: Message)} %% normal write
</span><span class="line">   41 </span><span class="slc"></span>
<span class="line">   42 </span>         <span class="sym">{</span>ServerLoop Sock NewSum Bytes<span class="sym">}
</span><span class="line">   43 </span><span class="sym"></span>      <span class="kwb">end
</span><span class="line">   44 </span><span class="kwb">   end
</span><span class="line">   45 </span><span class="kwb">end
</span><span class="line">   46 </span><span class="kwb">
</span><span class="line">   47 </span><span class="kwb">
</span><span class="line">   48 </span><span class="kwb">proc</span> <span class="sym">{</span>ClientThread SPort N<span class="sym">}
</span><span class="line">   49 </span><span class="sym"></span>   <span class="kwa">local</span> Sock <span class="kwb">in
</span><span class="line">   50 </span><span class="kwb"></span>      Sock <span class="sym">= {</span>New Open.socket client<span class="sym">(</span>port<span class="sym">:</span>SPort<span class="sym">)}
</span><span class="line">   51 </span><span class="sym">      {</span>ClientLoop Sock N<span class="sym">}
</span><span class="line">   52 </span><span class="sym">      {</span>Sock shutDown<span class="sym">(</span>how<span class="sym">: [</span>receive send<span class="sym">])}{</span>Sock close<span class="sym">}
</span><span class="line">   53 </span><span class="sym"></span>   <span class="kwb">end
</span><span class="line">   54 </span><span class="kwb">end
</span><span class="line">   55 </span><span class="kwb">
</span><span class="line">   56 </span><span class="kwb">proc</span> <span class="sym">{</span>ClientLoop Sock N<span class="sym">}
</span><span class="line">   57 </span><span class="sym"></span>   <span class="kwa">local</span> Message DR DW CR ST <span class="kwb">in
</span><span class="line">   58 </span><span class="kwb">      if</span> N <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwb">then
</span><span class="line">   59 </span><span class="kwb">
</span><span class="line">   60 </span><span class="kwb"></span>         <span class="sym">{</span>Sock getDesc<span class="sym">(</span>DR DW<span class="sym">)}
</span><span class="line">   61 </span><span class="sym">         {</span>OS.writeSelect DW<span class="sym">}{</span>OS.write DW Data ST<span class="sym">}
</span><span class="line">   62 </span><span class="sym">             {</span>OS.readSelect DR<span class="sym">}{</span>OS.read DR <span class="num">1024</span> Message <span class="kwa">nil</span> CR<span class="sym">}
</span><span class="line">   63 </span><span class="sym">
</span><span class="line">   64 </span><span class="sym"></span>         <span class="slc">%% {Sock write(vs: Data)}     %% normal write
</span><span class="line">   65 </span><span class="slc"></span>             <span class="slc">%% {Sock read(list: Message)} %% normal read
</span><span class="line">   66 </span><span class="slc"></span>
<span class="line">   67 </span>         <span class="kwb">if</span> Message <span class="sym">==</span> Data <span class="kwb">then</span> <span class="sym">{</span>ClientLoop Sock N<span class="num">-1</span><span class="sym">}</span> <span class="kwb">end
</span><span class="line">   68 </span><span class="kwb">      end
</span><span class="line">   69 </span><span class="kwb">   end
</span><span class="line">   70 </span><span class="kwb">end
</span><span class="line">   71 </span><span class="kwb">
</span><span class="line">   72 </span><span class="kwb">in
</span><span class="line">   73 </span><span class="kwb"></span>   <span class="kwa">local</span> Args A1 A2 A3 Socket SPort Bytes ArgList Pid <span class="kwb">in
</span><span class="line">   74 </span><span class="kwb"></span>      Args <span class="sym">= {</span>Application.getArgs plain<span class="sym">}
</span><span class="line">   75 </span><span class="sym">
</span><span class="line">   76 </span><span class="sym"></span>      <span class="kwb">if</span> <span class="sym">{</span>Length Args<span class="sym">} ==</span> <span class="num">1</span> <span class="kwb">then
</span><span class="line">   77 </span><span class="kwb"></span>         <span class="slc">%% We are the server process
</span><span class="line">   78 </span><span class="slc"></span>
<span class="line">   79 </span>         A3<span class="sym">|</span><span class="kwa">nil</span> <span class="sym">=</span> Args
<span class="line">   80 </span>
<span class="line">   81 </span>         <span class="kwb">thread</span> <span class="sym">{</span>ServerThread Socket SPort Bytes<span class="sym">}</span> <span class="kwb">end
</span><span class="line">   82 </span><span class="kwb">
</span><span class="line">   83 </span><span class="kwb"></span>         <span class="slc">%% Prepare to fork an OS process for the client
</span><span class="line">   84 </span><span class="slc"></span>         <span class="slc">%%    automatically close cmd.exe
</span><span class="line">   85 </span><span class="slc"></span>         <span class="slc">%%    start echo.oz.exe
</span><span class="line">   86 </span><span class="slc"></span>         <span class="slc">%%    pass a flag indicating the client process
</span><span class="line">   87 </span><span class="slc"></span>         <span class="slc">%%    pass the open server port SPort
</span><span class="line">   88 </span><span class="slc"></span>         <span class="slc">%%    pass the number of times the client should send the data
</span><span class="line">   89 </span><span class="slc"></span>
<span class="line">   90 </span>         ArgList <span class="sym">= [</span><span class="str">&quot;/C&quot;</span> <span class="str">&quot;echo.oz&quot;</span> <span class="str">&quot;client&quot;</span> <span class="sym">{</span>IntToString SPort<span class="sym">}</span> A3<span class="sym">]
</span><span class="line">   91 </span><span class="sym"></span>         Pid <span class="sym">= {</span>New Open.pipe init<span class="sym">(</span>cmd<span class="sym">:</span> <span class="str">&quot;cmd.exe&quot;</span> args<span class="sym">:</span> ArgList<span class="sym">)}
</span><span class="line">   92 </span><span class="sym">
</span><span class="line">   93 </span><span class="sym"></span>         <span class="slc">%% Synchronize with server thread completion and indirectly with
</span><span class="line">   94 </span><span class="slc"></span>         <span class="slc">%% the client process. Wait here until the dataflow variable Bytes
</span><span class="line">   95 </span><span class="slc"></span>         <span class="slc">%% has been given a value in the server thread. That happens after
</span><span class="line">   96 </span><span class="slc"></span>         <span class="slc">%% the client process closes the socket connection, when the client
</span><span class="line">   97 </span><span class="slc"></span>         <span class="slc">%% process has sent all it's data and received all the replies.
</span><span class="line">   98 </span><span class="slc"></span>
<span class="line">   99 </span>         <span class="sym">{</span>System.showInfo <span class="str">'server processed '</span>#<span class="sym">{</span>IntToString Bytes<span class="sym">}</span>#<span class="str">' bytes'</span><span class="sym">}
</span><span class="line">  100 </span><span class="sym">
</span><span class="line">  101 </span><span class="sym"></span>      <span class="kwb">elseif</span> <span class="sym">{</span>Length Args<span class="sym">} ==</span> <span class="num">3</span> <span class="kwb">then
</span><span class="line">  102 </span><span class="kwb"></span>         <span class="slc">%% We are the client process
</span><span class="line">  103 </span><span class="slc"></span>
<span class="line">  104 </span>         <span class="slc">%% Take the flag, server port, times-to-repeat from the args
</span><span class="line">  105 </span><span class="slc"></span>         <span class="slc">%% and use the main thread for the client
</span><span class="line">  106 </span><span class="slc"></span>         A1<span class="sym">|</span>A2<span class="sym">|</span>A3<span class="sym">|</span><span class="kwa">nil</span> <span class="sym">=</span> Args
<span class="line">  107 </span>         <span class="kwb">if</span> A1 <span class="sym">==</span> <span class="str">&quot;client&quot;</span> <span class="kwb">then
</span><span class="line">  108 </span><span class="kwb"></span>            <span class="sym">{</span>ClientThread <span class="sym">{</span>StringToInt A2<span class="sym">} {</span>StringToInt A3<span class="sym">}}
</span><span class="line">  109 </span><span class="sym"></span>         <span class="kwb">end
</span><span class="line">  110 </span><span class="kwb">      end
</span><span class="line">  111 </span><span class="kwb">   end
</span><span class="line">  112 </span><span class="kwb"></span>   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}
</span><span class="line">  113 </span><span class="sym"></span><span class="kwb">end</span>
