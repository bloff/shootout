<span class="line">    1 </span><span class="slc">-- $Id: lists-lua.code,v 1.3 2004-11-11 07:13:59 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://www.bagley.org/~doug/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- implemented by: Roberto Ierusalimschy
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="slc">--------------------------------------------------------------
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">-- List module
</span><span class="line">    7 </span><span class="slc"></span><span class="slc">-- defines a prototipe for lists
</span><span class="line">    8 </span><span class="slc"></span><span class="slc">--------------------------------------------------------------
</span><span class="line">    9 </span><span class="slc"></span>
<span class="line">   10 </span>List <span class="sym">= {</span>first <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> last <span class="sym">= -</span><span class="num">1</span><span class="sym">}
</span><span class="line">   11 </span><span class="sym">
</span><span class="line">   12 </span><span class="sym"></span><span class="kwa">function</span> List<span class="sym">:</span>new <span class="sym">()
</span><span class="line">   13 </span><span class="sym"></span>  <span class="kwa">local</span> n <span class="sym">= {}
</span><span class="line">   14 </span><span class="sym"></span>  <span class="kwa">for</span> k<span class="sym">,</span>v <span class="kwa">in</span> self <span class="kwa">do</span> n<span class="sym">[</span>k<span class="sym">] =</span> v <span class="kwa">end
</span><span class="line">   15 </span><span class="kwa">  return</span> n
<span class="line">   16 </span><span class="kwa">end
</span><span class="line">   17 </span><span class="kwa">
</span><span class="line">   18 </span><span class="kwa">function</span> List<span class="sym">:</span>length <span class="sym">()
</span><span class="line">   19 </span><span class="sym"></span>  <span class="kwa">return</span> self.last <span class="sym">-</span> self.first <span class="sym">+</span> <span class="num">1
</span><span class="line">   20 </span><span class="num"></span><span class="kwa">end
</span><span class="line">   21 </span><span class="kwa">
</span><span class="line">   22 </span><span class="kwa">function</span> List<span class="sym">:</span>pushleft <span class="sym">(</span>value<span class="sym">)
</span><span class="line">   23 </span><span class="sym"></span>  <span class="kwa">local</span> first <span class="sym">=</span> self.first <span class="num">- 1
</span><span class="line">   24 </span><span class="num"></span>  self.first <span class="sym">=</span> first
<span class="line">   25 </span>  self<span class="sym">[</span>first<span class="sym">] =</span> value
<span class="line">   26 </span><span class="kwa">end
</span><span class="line">   27 </span><span class="kwa">
</span><span class="line">   28 </span><span class="kwa">function</span> List<span class="sym">:</span>pushright <span class="sym">(</span>value<span class="sym">)
</span><span class="line">   29 </span><span class="sym"></span>  <span class="kwa">local</span> last <span class="sym">=</span> self.last <span class="sym">+</span> <span class="num">1
</span><span class="line">   30 </span><span class="num"></span>  self.last <span class="sym">=</span> last
<span class="line">   31 </span>  self<span class="sym">[</span>last<span class="sym">] =</span> value
<span class="line">   32 </span><span class="kwa">end
</span><span class="line">   33 </span><span class="kwa">
</span><span class="line">   34 </span><span class="kwa">function</span> List<span class="sym">:</span>popleft <span class="sym">()
</span><span class="line">   35 </span><span class="sym"></span>  <span class="kwa">local</span> first <span class="sym">=</span> self.first
<span class="line">   36 </span>  <span class="kwa">if</span> first <span class="sym">&gt;</span> self.last <span class="kwa">then error</span><span class="str">&quot;list is empty&quot;</span> <span class="kwa">end
</span><span class="line">   37 </span><span class="kwa">  local</span> value <span class="sym">=</span> self<span class="sym">[</span>first<span class="sym">]
</span><span class="line">   38 </span><span class="sym"></span>  self<span class="sym">[</span>first<span class="sym">] =</span> <span class="kwa">nil</span>  <span class="slc">-- to allow collection
</span><span class="line">   39 </span><span class="slc"></span>  self.first <span class="sym">=</span> first<span class="sym">+</span><span class="num">1
</span><span class="line">   40 </span><span class="num"></span>  <span class="kwa">return</span> value
<span class="line">   41 </span><span class="kwa">end
</span><span class="line">   42 </span><span class="kwa">
</span><span class="line">   43 </span><span class="kwa">function</span> List<span class="sym">:</span>popright <span class="sym">()
</span><span class="line">   44 </span><span class="sym"></span>  <span class="kwa">local</span> last <span class="sym">=</span> self.last
<span class="line">   45 </span>  <span class="kwa">if</span> self.first <span class="sym">&gt;</span> last <span class="kwa">then error</span><span class="str">&quot;list is empty&quot;</span> <span class="kwa">end
</span><span class="line">   46 </span><span class="kwa">  local</span> value <span class="sym">=</span> self<span class="sym">[</span>last<span class="sym">]
</span><span class="line">   47 </span><span class="sym"></span>  self<span class="sym">[</span>last<span class="sym">] =</span> <span class="kwa">nil</span>  <span class="slc">-- to allow collection
</span><span class="line">   48 </span><span class="slc"></span>  self.last <span class="sym">=</span> last<span class="num">-1
</span><span class="line">   49 </span><span class="num"></span>  <span class="kwa">return</span> value
<span class="line">   50 </span><span class="kwa">end
</span><span class="line">   51 </span><span class="kwa">
</span><span class="line">   52 </span><span class="kwa">function</span> List<span class="sym">:</span>reverse <span class="sym">()
</span><span class="line">   53 </span><span class="sym"></span>  <span class="kwa">local</span> i<span class="sym">,</span> j <span class="sym">=</span> self.first<span class="sym">,</span> self.last
<span class="line">   54 </span>  <span class="kwa">while</span> i<span class="sym">&lt;</span>j <span class="kwa">do
</span><span class="line">   55 </span><span class="kwa"></span>    self<span class="sym">[</span>i<span class="sym">],</span> self<span class="sym">[</span>j<span class="sym">] =</span> self<span class="sym">[</span>j<span class="sym">],</span> self<span class="sym">[</span>i<span class="sym">]
</span><span class="line">   56 </span><span class="sym"></span>    i <span class="sym">=</span> i<span class="sym">+</span><span class="num">1
</span><span class="line">   57 </span><span class="num"></span>    j <span class="sym">=</span> j<span class="num">-1
</span><span class="line">   58 </span><span class="num"></span>  <span class="kwa">end
</span><span class="line">   59 </span><span class="kwa">end
</span><span class="line">   60 </span><span class="kwa">
</span><span class="line">   61 </span><span class="kwa">function</span> List<span class="sym">:</span>equal <span class="sym">(</span>otherlist<span class="sym">)
</span><span class="line">   62 </span><span class="sym"></span>  <span class="kwa">if</span> self<span class="sym">:</span>length<span class="sym">()</span> ~<span class="sym">=</span> otherlist<span class="sym">:</span>length<span class="sym">()</span> <span class="kwa">then return nil end
</span><span class="line">   63 </span><span class="kwa">  local</span> diff <span class="sym">=</span> otherlist.first <span class="sym">-</span> self.first
<span class="line">   64 </span>  <span class="kwa">for</span> i1<span class="sym">=</span>self.first<span class="sym">,</span>self.last <span class="kwa">do
</span><span class="line">   65 </span><span class="kwa">    if</span> self<span class="sym">[</span>i1<span class="sym">]</span> ~<span class="sym">=</span> otherlist<span class="sym">[</span>i1<span class="sym">+</span>diff<span class="sym">]</span> <span class="kwa">then return nil end
</span><span class="line">   66 </span><span class="kwa">  end
</span><span class="line">   67 </span><span class="kwa">  return</span> <span class="num">1
</span><span class="line">   68 </span><span class="num"></span><span class="kwa">end
</span><span class="line">   69 </span><span class="kwa">
</span><span class="line">   70 </span><span class="kwa"></span><span class="slc">-----------------------------------------------------------
</span><span class="line">   71 </span><span class="slc"></span><span class="slc">-----------------------------------------------------------
</span><span class="line">   72 </span><span class="slc"></span>
<span class="line">   73 </span><span class="slc">-- Some tests
</span><span class="line">   74 </span><span class="slc"></span>
<span class="line">   75 </span><span class="kwa">function</span> test <span class="sym">()
</span><span class="line">   76 </span><span class="sym"></span>  <span class="kwa">local</span> SIZE <span class="sym">=</span> <span class="num">10000
</span><span class="line">   77 </span><span class="num"></span>  <span class="slc">-- create a list with elements 1..SIZE
</span><span class="line">   78 </span><span class="slc"></span>  <span class="kwa">local</span> l1 <span class="sym">=</span> List<span class="sym">:</span>new<span class="sym">()
</span><span class="line">   79 </span><span class="sym"></span>  <span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>SIZE <span class="kwa">do
</span><span class="line">   80 </span><span class="kwa"></span>    l1<span class="sym">:</span>pushright<span class="sym">(</span>i<span class="sym">)
</span><span class="line">   81 </span><span class="sym"></span>  <span class="kwa">end
</span><span class="line">   82 </span><span class="kwa"></span>  <span class="slc">-- creates a copy of l1
</span><span class="line">   83 </span><span class="slc"></span>  <span class="kwa">local</span> l2 <span class="sym">=</span> l1<span class="sym">:</span>new<span class="sym">()
</span><span class="line">   84 </span><span class="sym"></span>  <span class="slc">-- remove each individual item from left side of l2 and
</span><span class="line">   85 </span><span class="slc"></span>  <span class="slc">-- append to right side of l3 (preserving order)
</span><span class="line">   86 </span><span class="slc"></span>  <span class="kwa">local</span> l3 <span class="sym">=</span> List<span class="sym">:</span>new<span class="sym">()
</span><span class="line">   87 </span><span class="sym"></span>  <span class="kwa">while</span> l2<span class="sym">:</span>length<span class="sym">() &gt;</span> <span class="num">0</span> <span class="kwa">do
</span><span class="line">   88 </span><span class="kwa"></span>    l3<span class="sym">:</span>pushright<span class="sym">(</span>l2<span class="sym">:</span>popleft<span class="sym">())
</span><span class="line">   89 </span><span class="sym"></span>  <span class="kwa">end
</span><span class="line">   90 </span><span class="kwa"></span>  <span class="slc">-- remove each individual item from right side of l3 and
</span><span class="line">   91 </span><span class="slc"></span>  <span class="slc">-- append to right side of l2 (reversing list)
</span><span class="line">   92 </span><span class="slc"></span>  <span class="kwa">while</span> l3<span class="sym">:</span>length<span class="sym">() &gt;</span> <span class="num">0</span> <span class="kwa">do
</span><span class="line">   93 </span><span class="kwa"></span>    l2<span class="sym">:</span>pushright<span class="sym">(</span>l3<span class="sym">:</span>popright<span class="sym">())
</span><span class="line">   94 </span><span class="sym"></span>  <span class="kwa">end
</span><span class="line">   95 </span><span class="kwa"></span>  <span class="slc">-- reverse l1 in place
</span><span class="line">   96 </span><span class="slc"></span>  l1<span class="sym">:</span>reverse<span class="sym">()
</span><span class="line">   97 </span><span class="sym"></span>  <span class="slc">-- compare Li1 and Li2 for equality
</span><span class="line">   98 </span><span class="slc"></span>  <span class="slc">-- and return length of the list
</span><span class="line">   99 </span><span class="slc"></span>  <span class="kwa">if not</span> l1<span class="sym">:</span>equal<span class="sym">(</span>l2<span class="sym">)</span> <span class="kwa">then return nil
</span><span class="line">  100 </span><span class="kwa">  else return</span> l1<span class="sym">:</span>length<span class="sym">()
</span><span class="line">  101 </span><span class="sym"></span>  <span class="kwa">end
</span><span class="line">  102 </span><span class="kwa">end
</span><span class="line">  103 </span><span class="kwa">
</span><span class="line">  104 </span><span class="kwa"></span>N <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">((</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">]))</span> <span class="kwa">or</span> <span class="num">1
</span><span class="line">  105 </span><span class="num"></span><span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span> N <span class="kwa">do
</span><span class="line">  106 </span><span class="kwa"></span>  result <span class="sym">=</span> test<span class="sym">()
</span><span class="line">  107 </span><span class="sym"></span><span class="kwa">end
</span><span class="line">  108 </span><span class="kwa">print</span><span class="sym">(</span>result<span class="sym">)</span>
