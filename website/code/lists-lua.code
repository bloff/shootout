<span class="slc">-- $Id: lists-lua.code,v 1.9 2007-05-18 03:09:54 bfulgham Exp $</span>
<span class="slc">-- http://www.bagley.org/~doug/shootout/</span>
<span class="slc">-- implemented by: Roberto Ierusalimschy</span>

<span class="slc">--------------------------------------------------------------</span>
<span class="slc">-- List module</span>
<span class="slc">-- defines a prototipe for lists</span>
<span class="slc">--------------------------------------------------------------</span>

List <span class="sym">= {</span>first <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> last <span class="sym">= -</span><span class="num">1</span><span class="sym">}</span>

<span class="kwa">function</span> List<span class="sym">:</span><span class="kwd">new</span> <span class="sym">()</span>
  <span class="kwa">local</span> n <span class="sym">= {}</span>
  <span class="kwa">for</span> k<span class="sym">,</span>v <span class="kwa">in</span> self <span class="kwa">do</span> n<span class="sym">[</span>k<span class="sym">] =</span> v <span class="kwa">end</span>
  <span class="kwa">return</span> n
<span class="kwa">end</span>

<span class="kwa">function</span> List<span class="sym">:</span><span class="kwd">length</span> <span class="sym">()</span>
  <span class="kwa">return</span> self<span class="sym">.</span>last <span class="sym">-</span> self<span class="sym">.</span>first <span class="sym">+</span> <span class="num">1</span>
<span class="kwa">end</span>

<span class="kwa">function</span> List<span class="sym">:</span><span class="kwd">pushleft</span> <span class="sym">(</span>value<span class="sym">)</span>
  <span class="kwa">local</span> first <span class="sym">=</span> self<span class="sym">.</span>first <span class="sym">-</span> <span class="num">1</span>
  self<span class="sym">.</span>first <span class="sym">=</span> first
  self<span class="sym">[</span>first<span class="sym">] =</span> value
<span class="kwa">end</span>

<span class="kwa">function</span> List<span class="sym">:</span><span class="kwd">pushright</span> <span class="sym">(</span>value<span class="sym">)</span>
  <span class="kwa">local</span> last <span class="sym">=</span> self<span class="sym">.</span>last <span class="sym">+</span> <span class="num">1</span>
  self<span class="sym">.</span>last <span class="sym">=</span> last
  self<span class="sym">[</span>last<span class="sym">] =</span> value
<span class="kwa">end</span>

<span class="kwa">function</span> List<span class="sym">:</span><span class="kwd">popleft</span> <span class="sym">()</span>
  <span class="kwa">local</span> first <span class="sym">=</span> self<span class="sym">.</span>first
  <span class="kwa">if</span> first <span class="sym">&gt;</span> self<span class="sym">.</span>last <span class="kwa">then</span> <span class="kwb">error</span><span class="str">&quot;list is empty&quot;</span> <span class="kwa">end</span>
  <span class="kwa">local</span> value <span class="sym">=</span> self<span class="sym">[</span>first<span class="sym">]</span>
  self<span class="sym">[</span>first<span class="sym">] =</span> <span class="kwa">nil</span>  <span class="slc">-- to allow collection</span>
  self<span class="sym">.</span>first <span class="sym">=</span> first<span class="sym">+</span><span class="num">1</span>
  <span class="kwa">return</span> value
<span class="kwa">end</span>

<span class="kwa">function</span> List<span class="sym">:</span><span class="kwd">popright</span> <span class="sym">()</span>
  <span class="kwa">local</span> last <span class="sym">=</span> self<span class="sym">.</span>last
  <span class="kwa">if</span> self<span class="sym">.</span>first <span class="sym">&gt;</span> last <span class="kwa">then</span> <span class="kwb">error</span><span class="str">&quot;list is empty&quot;</span> <span class="kwa">end</span>
  <span class="kwa">local</span> value <span class="sym">=</span> self<span class="sym">[</span>last<span class="sym">]</span>
  self<span class="sym">[</span>last<span class="sym">] =</span> <span class="kwa">nil</span>  <span class="slc">-- to allow collection</span>
  self<span class="sym">.</span>last <span class="sym">=</span> last<span class="sym">-</span><span class="num">1</span>
  <span class="kwa">return</span> value
<span class="kwa">end</span>

<span class="kwa">function</span> List<span class="sym">:</span><span class="kwd">reverse</span> <span class="sym">()</span>
  <span class="kwa">local</span> i<span class="sym">,</span> j <span class="sym">=</span> self<span class="sym">.</span>first<span class="sym">,</span> self<span class="sym">.</span>last
  <span class="kwa">while</span> i<span class="sym">&lt;</span>j <span class="kwa">do</span>
    self<span class="sym">[</span>i<span class="sym">],</span> self<span class="sym">[</span>j<span class="sym">] =</span> self<span class="sym">[</span>j<span class="sym">],</span> self<span class="sym">[</span>i<span class="sym">]</span>
    i <span class="sym">=</span> i<span class="sym">+</span><span class="num">1</span>
    j <span class="sym">=</span> j<span class="sym">-</span><span class="num">1</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">function</span> List<span class="sym">:</span><span class="kwd">equal</span> <span class="sym">(</span>otherlist<span class="sym">)</span>
  <span class="kwa">if</span> self<span class="sym">:</span><span class="kwd">length</span><span class="sym">()</span> ~<span class="sym">=</span> otherlist<span class="sym">:</span><span class="kwd">length</span><span class="sym">()</span> <span class="kwa">then return nil end</span>
  <span class="kwa">local</span> diff <span class="sym">=</span> otherlist<span class="sym">.</span>first <span class="sym">-</span> self<span class="sym">.</span>first
  <span class="kwa">for</span> i1<span class="sym">=</span>self<span class="sym">.</span>first<span class="sym">,</span>self<span class="sym">.</span>last <span class="kwa">do</span>
    <span class="kwa">if</span> self<span class="sym">[</span>i1<span class="sym">]</span> ~<span class="sym">=</span> otherlist<span class="sym">[</span>i1<span class="sym">+</span>diff<span class="sym">]</span> <span class="kwa">then return nil end</span>
  <span class="kwa">end</span>
  <span class="kwa">return</span> <span class="num">1</span>
<span class="kwa">end</span>

<span class="slc">-----------------------------------------------------------</span>
<span class="slc">-----------------------------------------------------------</span>

<span class="slc">-- Some tests</span>

<span class="kwa">function</span> <span class="kwd">test</span> <span class="sym">()</span>
  <span class="kwa">local</span> SIZE <span class="sym">=</span> <span class="num">10000</span>
  <span class="slc">-- create a list with elements 1..SIZE</span>
  <span class="kwa">local</span> l1 <span class="sym">=</span> List<span class="sym">:</span><span class="kwd">new</span><span class="sym">()</span>
  <span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>SIZE <span class="kwa">do</span>
    l1<span class="sym">:</span><span class="kwd">pushright</span><span class="sym">(</span>i<span class="sym">)</span>
  <span class="kwa">end</span>
  <span class="slc">-- creates a copy of l1</span>
  <span class="kwa">local</span> l2 <span class="sym">=</span> l1<span class="sym">:</span><span class="kwd">new</span><span class="sym">()</span>
  <span class="slc">-- remove each individual item from left side of l2 and</span>
  <span class="slc">-- append to right side of l3 (preserving order)</span>
  <span class="kwa">local</span> l3 <span class="sym">=</span> List<span class="sym">:</span><span class="kwd">new</span><span class="sym">()</span>
  <span class="kwa">while</span> l2<span class="sym">:</span><span class="kwd">length</span><span class="sym">() &gt;</span> <span class="num">0</span> <span class="kwa">do</span>
    l3<span class="sym">:</span><span class="kwd">pushright</span><span class="sym">(</span>l2<span class="sym">:</span><span class="kwd">popleft</span><span class="sym">())</span>
  <span class="kwa">end</span>
  <span class="slc">-- remove each individual item from right side of l3 and</span>
  <span class="slc">-- append to right side of l2 (reversing list)</span>
  <span class="kwa">while</span> l3<span class="sym">:</span><span class="kwd">length</span><span class="sym">() &gt;</span> <span class="num">0</span> <span class="kwa">do</span>
    l2<span class="sym">:</span><span class="kwd">pushright</span><span class="sym">(</span>l3<span class="sym">:</span><span class="kwd">popright</span><span class="sym">())</span>
  <span class="kwa">end</span>
  <span class="slc">-- reverse l1 in place</span>
  l1<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">()</span>
  <span class="slc">-- compare Li1 and Li2 for equality</span>
  <span class="slc">-- and return length of the list</span>
  <span class="kwa">if not</span> l1<span class="sym">:</span><span class="kwd">equal</span><span class="sym">(</span>l2<span class="sym">)</span> <span class="kwa">then return nil</span>
  <span class="kwa">else return</span> l1<span class="sym">:</span><span class="kwd">length</span><span class="sym">()</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>

N <span class="sym">=</span> <span class="kwb">tonumber</span><span class="sym">((</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">]))</span> <span class="kwa">or</span> <span class="num">1</span>
<span class="kwa">for</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span> N <span class="kwa">do</span>
  result <span class="sym">=</span> <span class="kwd">test</span><span class="sym">()</span>
<span class="kwa">end</span>
<span class="kwb">print</span><span class="sym">(</span>result<span class="sym">)</span>
