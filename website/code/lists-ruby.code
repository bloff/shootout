<span class="slc">#!/usr/bin/ruby
</span><span class="slc"># -*- mode: ruby -*-
</span><span class="slc"># $Id: lists-ruby.code,v 1.5 2005-04-04 14:56:47 bfulgham Exp $
</span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span>
NUM = Integer<span class="sym">(</span><span class="kwa">ARGV</span>.shift <span class="sym">||</span> <span class="num">1</span><span class="sym">)

</span>SIZE = <span class="num">10000

</span><span class="kwa">def</span> test_lists<span class="sym">()
</span>    <span class="slc"># create a list of integers (Li1) from 1 to SIZE
</span>    li1 = <span class="sym">(</span><span class="num">1</span>..SIZE<span class="sym">)</span>.to_a
    <span class="slc"># copy the list to li2 (not by individual items)
</span>    li2 = li1.dup
    <span class="slc"># remove each individual item from left side of li2 and
</span>    <span class="slc"># append to right side of li3 (preserving order)
</span>    li3 = Array.new
    <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">not</span> li2.empty?<span class="sym">)
</span>	li3.push<span class="sym">(</span>li2.shift<span class="sym">)
</span>    <span class="kwa">end
</span>    <span class="slc"># li2 must now be empty
</span>    <span class="slc"># remove each individual item from right side of li3 and
</span>    <span class="slc"># append to right side of li2 (reversing list)
</span>    <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">not</span> li3.empty?<span class="sym">)
</span>	li2.push<span class="sym">(</span>li3.pop<span class="sym">)
</span>    <span class="kwa">end
</span>    <span class="slc"># li3 must now be empty
</span>    <span class="slc"># reverse li1 in place
</span>    li1.reverse<span class="sym">!
</span>    <span class="slc"># check that first item is now SIZE
</span>    <span class="kwa">if</span> li1<span class="sym">[</span><span class="num">0</span><span class="sym">] !</span>= SIZE <span class="kwa">then
</span>	p <span class="str">&quot;not SIZE&quot;</span>
	<span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">)
</span>    <span class="kwa">end
</span>    <span class="slc"># compare li1 and li2 for equality
</span>    <span class="kwa">if</span> li1 <span class="sym">!</span>= li2 <span class="kwa">then
	return</span><span class="sym">(</span><span class="num">0</span><span class="sym">)
</span>    <span class="kwa">end
</span>    <span class="slc"># return the length of the list
</span>    <span class="kwa">return</span><span class="sym">(</span>li1.length<span class="sym">)
</span><span class="kwa">end

for</span> iter <span class="kwa">in</span> <span class="num">1</span> .. NUM
    result = test_lists<span class="sym">()
</span><span class="kwa">end
</span>print result<span class="sym">,</span> <span class="str">&quot;\n&quot;</span>
