<span class="line">    1 </span><span class="slc">#!/usr/bin/ruby
</span><span class="line">    2 </span><span class="slc"></span><span class="slc"># -*- mode: ruby -*-
</span><span class="line">    3 </span><span class="slc"></span><span class="slc"># $Id: lists-ruby.code,v 1.4 2004-11-13 07:41:50 bfulgham Exp $
</span><span class="line">    4 </span><span class="slc"></span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span>NUM = Integer<span class="sym">(</span><span class="kwa">ARGV</span>.shift <span class="sym">||</span> <span class="num">1</span><span class="sym">)
</span><span class="line">    7 </span><span class="sym">
</span><span class="line">    8 </span><span class="sym"></span>SIZE = <span class="num">10000
</span><span class="line">    9 </span><span class="num">
</span><span class="line">   10 </span><span class="num"></span><span class="kwa">def</span> test_lists<span class="sym">()
</span><span class="line">   11 </span><span class="sym"></span>    <span class="slc"># create a list of integers (Li1) from 1 to SIZE
</span><span class="line">   12 </span><span class="slc"></span>    li1 = <span class="sym">(</span><span class="num">1</span>..SIZE<span class="sym">)</span>.to_a
<span class="line">   13 </span>    <span class="slc"># copy the list to li2 (not by individual items)
</span><span class="line">   14 </span><span class="slc"></span>    li2 = li1.dup
<span class="line">   15 </span>    <span class="slc"># remove each individual item from left side of li2 and
</span><span class="line">   16 </span><span class="slc"></span>    <span class="slc"># append to right side of li3 (preserving order)
</span><span class="line">   17 </span><span class="slc"></span>    li3 = Array.new
<span class="line">   18 </span>    <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">not</span> li2.empty?<span class="sym">)
</span><span class="line">   19 </span><span class="sym"></span>        li3.push<span class="sym">(</span>li2.shift<span class="sym">)
</span><span class="line">   20 </span><span class="sym"></span>    <span class="kwa">end
</span><span class="line">   21 </span><span class="kwa"></span>    <span class="slc"># li2 must now be empty
</span><span class="line">   22 </span><span class="slc"></span>    <span class="slc"># remove each individual item from right side of li3 and
</span><span class="line">   23 </span><span class="slc"></span>    <span class="slc"># append to right side of li2 (reversing list)
</span><span class="line">   24 </span><span class="slc"></span>    <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">not</span> li3.empty?<span class="sym">)
</span><span class="line">   25 </span><span class="sym"></span>        li2.push<span class="sym">(</span>li3.pop<span class="sym">)
</span><span class="line">   26 </span><span class="sym"></span>    <span class="kwa">end
</span><span class="line">   27 </span><span class="kwa"></span>    <span class="slc"># li3 must now be empty
</span><span class="line">   28 </span><span class="slc"></span>    <span class="slc"># reverse li1 in place
</span><span class="line">   29 </span><span class="slc"></span>    li1.reverse<span class="sym">!
</span><span class="line">   30 </span><span class="sym"></span>    <span class="slc"># check that first item is now SIZE
</span><span class="line">   31 </span><span class="slc"></span>    <span class="kwa">if</span> li1<span class="sym">[</span><span class="num">0</span><span class="sym">] !</span>= SIZE <span class="kwa">then
</span><span class="line">   32 </span><span class="kwa"></span>        p <span class="str">&quot;not SIZE&quot;</span>
<span class="line">   33 </span>        <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">)
</span><span class="line">   34 </span><span class="sym"></span>    <span class="kwa">end
</span><span class="line">   35 </span><span class="kwa"></span>    <span class="slc"># compare li1 and li2 for equality
</span><span class="line">   36 </span><span class="slc"></span>    <span class="kwa">if</span> li1 <span class="sym">!</span>= li2 <span class="kwa">then
</span><span class="line">   37 </span><span class="kwa">        return</span><span class="sym">(</span><span class="num">0</span><span class="sym">)
</span><span class="line">   38 </span><span class="sym"></span>    <span class="kwa">end
</span><span class="line">   39 </span><span class="kwa"></span>    <span class="slc"># return the length of the list
</span><span class="line">   40 </span><span class="slc"></span>    <span class="kwa">return</span><span class="sym">(</span>li1.length<span class="sym">)
</span><span class="line">   41 </span><span class="sym"></span><span class="kwa">end
</span><span class="line">   42 </span><span class="kwa">
</span><span class="line">   43 </span><span class="kwa">for</span> iter <span class="kwa">in</span> <span class="num">1</span> .. NUM
<span class="line">   44 </span>    result = test_lists<span class="sym">()
</span><span class="line">   45 </span><span class="sym"></span><span class="kwa">end
</span><span class="line">   46 </span><span class="kwa"></span>print result<span class="sym">,</span> <span class="str">&quot;\n&quot;</span>
