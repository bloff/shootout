<span class="slc">;;; The Computer Language Shootout</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; Michael Weber 2006-07-18</span>

<span class="sym">(</span>defconstant <span class="sym">+</span>buffer<span class="sym">-</span>size<span class="sym">+ (</span><span class="kwa">expt</span> <span class="num">2 15</span><span class="sym">))</span>

<span class="sym">(</span>defconstant <span class="sym">+</span>lut<span class="sym">+</span>
  <span class="sym">(</span>let <span class="sym">((</span>lut <span class="sym">(</span>make<span class="sym">-</span>array <span class="num">256</span> <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'(unsigned-byte 8) :initial-element (char-code #</span><span class="esc">\*</span><span class="str">))))</span>
<span class="str">    (loop for a across &quot;wsatugcyrkmbdhvnWSATUGCYRKMBDHVN&quot;</span>
<span class="str">          for b across &quot;WSTAACGRYMKVHDBNWSTAACGRYMKVHDBN&quot;</span>
<span class="str">          do (setf (aref lut (char-code a)) (char-code b)))</span>
<span class="str">    lut))</span>
<span class="str"></span>
<span class="str">(defun main ()</span>
<span class="str">  (declare (optimize (speed 3)))</span>
<span class="str">  (with-open-file (in &quot;/dev/stdin&quot; :element-type #1='</span><span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">8</span><span class="sym">))</span>
    <span class="sym">(</span>with<span class="sym">-</span><span class="kwa">open</span><span class="sym">-</span>file <span class="sym">(</span>out <span class="str">&quot;/dev/stdout&quot;</span> <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> #<span class="num">1</span># <span class="sym">:</span>direction <span class="sym">:</span>output <span class="sym">:</span><span class="kwa">if</span><span class="sym">-</span>exists <span class="sym">:</span><span class="kwa">append</span><span class="sym">)</span>
      <span class="sym">(</span>let <span class="sym">((</span>i<span class="sym">-</span>buf <span class="sym">(</span>make<span class="sym">-</span>array <span class="sym">+</span>buffer<span class="sym">-</span>size<span class="sym">+ :</span>element<span class="sym">-</span><span class="kwa">type</span> #<span class="num">1</span>#<span class="sym">))</span>
            <span class="sym">(</span>o<span class="sym">-</span>buf <span class="sym">(</span>make<span class="sym">-</span>array <span class="sym">+</span>buffer<span class="sym">-</span>size<span class="sym">+ :</span>element<span class="sym">-</span><span class="kwa">type</span> #<span class="num">1</span>#<span class="sym">))</span>
            <span class="sym">(</span>chunks <span class="str">'()))</span>
<span class="str">        (flet ((flush-chunks ()</span>
<span class="str">                 (let ((j 0) (k 0))</span>
<span class="str">                   (declare (type (unsigned-byte 32) j k))</span>
<span class="str">                   ;; reverse, complement, filter out old newlines, put newlines back in after 60 chars,</span>
<span class="str">                   ;; buffer output, and write buffers.  all in one go :(</span>
<span class="str">                   (loop for chunk in chunks</span>
<span class="str">                         do (loop for i from (1- (length (the (simple-array (unsigned-byte 8)) chunk))) downto 0</span>
<span class="str">                                  for byte = (aref chunk i)</span>
<span class="str">                                  unless (= byte #.(char-code #</span><span class="esc">\N</span><span class="str">ewline))</span>
<span class="str">                                  do (setf (aref o-buf k) (aref +lut+ byte) j (1+ j) k (1+ k))</span>
<span class="str">                                  if (= j 60) do (setf (aref o-buf k) #.(char-code #</span><span class="esc">\N</span><span class="str">ewline) j 0 k (1+ k))</span>
<span class="str">                                  if (&gt; k (- +buffer-size+ 2)) do (write-sequence o-buf out :end (shiftf k 0)))</span>
<span class="str">                         finally (when (plusp k)</span>
<span class="str">                                   (write-sequence o-buf out :end k)</span>
<span class="str">                                   (when (plusp j)</span>
<span class="str">                                     (write-byte #.(char-code #</span><span class="esc">\N</span><span class="str">ewline) out))))</span>
<span class="str">                   (setq chunks '</span><span class="sym">()))))</span>
          <span class="sym">(</span>prog <span class="sym">((</span>start <span class="num">0</span><span class="sym">) (</span>end <span class="num">0</span><span class="sym">))</span>
           <span class="kwa">read</span><span class="sym">-</span>chunk
             <span class="sym">(</span><span class="kwa">setq</span> end <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>sequence i<span class="sym">-</span>buf in<span class="sym">))</span>
             <span class="sym">(</span>when <span class="sym">(</span><span class="kwa">zerop</span> end<span class="sym">) (</span>go end<span class="sym">-</span>of<span class="sym">-</span>input<span class="sym">))</span>
           parse<span class="sym">-</span>chunk
             <span class="sym">(</span>let <span class="sym">((</span>bod <span class="sym">(</span>position #.<span class="sym">(</span>char<span class="sym">-</span>code #\&gt;<span class="sym">)</span> i<span class="sym">-</span>buf <span class="sym">:</span>start start <span class="sym">:</span>end end<span class="sym">)))</span>
               <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">numberp</span> bod<span class="sym">)</span>
                      <span class="sym">(</span>push <span class="sym">(</span>subseq i<span class="sym">-</span>buf start bod<span class="sym">)</span> chunks<span class="sym">)</span>
                      <span class="sym">(</span>setf start bod<span class="sym">)</span>
                      <span class="sym">(</span>flush<span class="sym">-</span>chunks<span class="sym">)</span>
                      <span class="slc">;; parse description</span>
                      <span class="sym">(</span>let <span class="sym">((</span>eod <span class="sym">(</span>position #.<span class="sym">(</span>char<span class="sym">-</span>code #\Newline<span class="sym">)</span> i<span class="sym">-</span>buf <span class="sym">:</span>start start <span class="sym">:</span>end end<span class="sym">)))</span>
                        <span class="sym">(</span>loop until <span class="sym">(</span><span class="kwa">numberp</span> eod<span class="sym">)</span>
                              do <span class="sym">(</span>write<span class="sym">-</span>sequence i<span class="sym">-</span>buf out <span class="sym">:</span>start start <span class="sym">:</span>end end<span class="sym">)</span>
                              do <span class="sym">(</span>setf start <span class="num">0</span> end <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>sequence i<span class="sym">-</span>buf in<span class="sym">))</span>
                              when <span class="sym">(</span><span class="kwa">zerop</span> end<span class="sym">)</span> do <span class="sym">(</span>go end<span class="sym">-</span>of<span class="sym">-</span>input<span class="sym">))</span>
                        <span class="sym">(</span>write<span class="sym">-</span>sequence i<span class="sym">-</span>buf out <span class="sym">:</span>start start <span class="sym">:</span>end <span class="sym">(</span>incf eod<span class="sym">))</span>
                        <span class="sym">(</span>setf start eod<span class="sym">)</span>
                        <span class="sym">(</span>go parse<span class="sym">-</span>chunk<span class="sym">)))</span>
                     <span class="sym">(</span>t <span class="sym">(</span>push <span class="sym">(</span>subseq i<span class="sym">-</span>buf start end<span class="sym">)</span> chunks<span class="sym">)</span>
                        <span class="sym">(</span>setf start <span class="num">0</span><span class="sym">)</span>
                        <span class="sym">(</span>go <span class="kwa">read</span><span class="sym">-</span>chunk<span class="sym">))))</span>
           end<span class="sym">-</span>of<span class="sym">-</span>input
             <span class="sym">(</span>flush<span class="sym">-</span>chunks<span class="sym">)))))))</span>
