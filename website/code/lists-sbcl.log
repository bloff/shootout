BUILD COMMANDS FOR: lists.sbcl

Tue Feb  8 20:58:01 PST 2005

SBCL built with: /usr/bin/sbcl --userinit /dev/null --sysinit /dev/null -batch -eval '(load "lists.sbcl_compile")'
### START lists.sbcl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "lists.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END lists.sbcl_compile

; compiling file "/opt/shootout/shootout/bench/lists/tmp/lists.cmucl" (written 08 FEB 2005 08:58:01 PM):
; compiling top level form: 
; compiling top level form: 
; compiling top level form: 
; compiling top level form: 
; compiling top level form: 
; recognizing DEFUN XCONS
; compiling DEFUN XCONS: 
; compiling top level form: 
; compiling DEFMACRO XPOP: 
; compiling top level form: 
; recognizing DEFUN PUSH-QUEUE
; compiling DEFUN PUSH-QUEUE: 
; compiling top level form: 
; compiling DEFMACRO WITH-COLLECTOR: 
; compiling top level form: 
; recognizing DEFUN TEST-LIST
; compiling DEFUN TEST-LIST: 
; compiling top level form: 
; recognizing DEFUN MAIN
; compiling DEFUN MAIN: 

; file: /opt/shootout/shootout/bench/lists/tmp/lists.cmucl
; in: DEFUN MAIN
;     (LOOP REPEAT N DO (SETF NUM (TEST-LIST)))
; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> TRUNCATE IF MINUSP 
; ==>
;   (< SB-C::X 0)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> TRUNCATE IF VALUES - SB-KERNEL:%NEGATE ASH - 
; ==>
;   (SB-KERNEL:%NEGATE SB-C::X)
; 
; note: forced to do GENERIC-NEGATE (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER * -1), not a FIXNUM.
;       The result is a (VALUES (INTEGER 1)
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER * -1), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (INTEGER 1)
;                               &OPTIONAL), not a (VALUES (SIGNED-BYTE 32)
;                                                         &REST
;                                                         T).

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> TRUNCATE IF VALUES - 
; ==>
;   (SB-KERNEL:%NEGATE (ASH (- SB-C::X) 0))
; 
; note: forced to do GENERIC-NEGATE (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES (INTEGER * -1)
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (INTEGER * -1)
;                               &OPTIONAL), not a (VALUES (SIGNED-BYTE 32)
;                                                         &REST
;                                                         T).

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF AND IF AND IF PLUSP 
; ==>
;   (> NUMBER 0)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK LET CEILING CEILING BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> FUNCTION IF VALUES 
; ==>
;   (+ SB-KERNEL::TRU 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY IF <= IF 
; ==>
;   (> #:LOOP-REPEAT-144 0)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a INTEGER, not a FIXNUM.
;       etc.

; --> BLOCK LET SB-LOOP::LOOP-BODY TAGBODY IF DECF LET* 
; ==>
;   (- #:LOOP-REPEAT-144 #:G146)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES UNSIGNED-BYTE
;                               &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; compiling top level form: 
; compilation unit finished
;   printed 7 notes

; /opt/shootout/shootout/bench/lists/tmp/lists.fasl written
; compilation finished in 0:00:00
[doing purification: roots handlers stack bindings static cleanup done]
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into /opt/shootout/shootout/bench/lists/tmp/sbcl.core:
writing 20070072 bytes from the read-only space at 0x01000000
writing 6265408 bytes from the static space at 0x05000000
writing 4096 bytes from the dynamic space at 0x09000000
done]
### START lists.sbcl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(main) (quit)
### END lists.sbcl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/sbcl --noinform --core sbcl.core --userinit /dev/null --sysinit /dev/null --load lists.sbcl_run %A


PROGRAM OUTPUT
==============
10000
