<span class="slc">%%% -*- mode: erlang -*-
</span><span class="slc">%%% $Id: plugin-hipe.code,v 1.5 2005-03-22 09:05:12 bfulgham Exp $
</span><span class="slc">%%% http://shootout.alioth.debian.org/
</span><span class="slc">%%%
</span><span class="slc">%%% Provided by Bengt Kleberg (Erlang Guru!)
</span><span class="slc">%%%
</span><span class="sym">-</span>module<span class="sym">(</span>plugin<span class="sym">)</span>.
<span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">,</span> string_to_number<span class="sym">/</span><span class="num">1</span><span class="sym">,</span> version<span class="sym">/</span><span class="num">0</span><span class="sym">])</span>.

<span class="sym">-</span>define<span class="sym">(</span>PLUGIN_VERSION<span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>.
<span class="sym">-</span>define<span class="sym">(</span>INPUT_LINE<span class="sym">,</span> <span class="str">&quot;I 1&quot;</span><span class="sym">)</span>.


main<span class="sym">() -&gt;</span> main<span class="sym">([</span><span class="str">'1000'</span><span class="sym">])</span>.
main<span class="sym">([</span>Arg<span class="sym">]) -&gt;
</span>	How_Many_Times <span class="sym">=</span> atom_to_integer<span class="sym">(</span> Arg <span class="sym">),
</span>	io<span class="sym">:</span>fwrite<span class="sym">(</span> <span class="str">&quot;~w~n&quot;</span><span class="sym">, [</span>sumcol<span class="sym">(</span> How_Many_Times<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> ?MODULE<span class="sym">,</span> ?INPUT_LINE <span class="sym">)] ),
</span>	erlang<span class="sym">:</span><span class="kwb">halt</span><span class="sym">()</span>.


string_to_number<span class="sym">( [</span>N<span class="sym">|</span>_T<span class="sym">] )</span>  <span class="kwa">when</span> <span class="sym">(</span>N <span class="sym">&gt;=</span> $<span class="num">0</span><span class="sym">)</span> and <span class="sym">(</span>N <span class="sym">=&lt;</span> $<span class="num">9</span><span class="sym">) -&gt;</span> N <span class="sym">-</span> $<span class="num">0</span>.


version<span class="sym">() -&gt;</span> ?PLUGIN_VERSION.



atom_to_integer<span class="sym">(</span> Atom <span class="sym">) -&gt;
</span>	erlang<span class="sym">:</span><span class="kwb">list_to_integer</span><span class="sym">(</span>erlang<span class="sym">:</span><span class="kwb">atom_to_list</span><span class="sym">(</span>Atom<span class="sym">))</span>.


sumcol<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> Sum<span class="sym">,</span> _Module<span class="sym">,</span> _Line<span class="sym">) -&gt;</span> Sum<span class="sym">;
</span>sumcol<span class="sym">(</span>N<span class="sym">,</span> Sum<span class="sym">,</span> Module<span class="sym">,</span> Line<span class="sym">) -&gt;
</span>	<span class="kwa">case catch</span> Module<span class="sym">:</span>string_to_number<span class="sym">(</span> Line <span class="sym">)</span> <span class="kwa">of
</span>	<span class="sym">{</span><span class="str">'EXIT'</span><span class="sym">,</span> _Why<span class="sym">} -&gt;
</span>		New_Module <span class="sym">=</span> new_module<span class="sym">(</span>Module<span class="sym">),
</span>		sumcol<span class="sym">(</span> N<span class="sym">,</span> Sum<span class="sym">,</span> New_Module<span class="sym">,</span> Line <span class="sym">);
</span>	Integer <span class="sym">-&gt;</span>	<span class="slc">% the Module works, we should keep it. but this is a test
</span>		sumcol<span class="sym">(</span> N<span class="num">-1</span><span class="sym">,</span> Sum<span class="sym">+</span>Integer<span class="sym">,</span> ?MODULE<span class="sym">,</span> Line <span class="sym">)</span>	<span class="slc">% start from the beginning
</span>	<span class="kwa">end</span>.


new_module<span class="sym">(</span>Old_Module<span class="sym">) -&gt;
</span>	Basename <span class="sym">=</span> remove_version<span class="sym">(</span> Old_Module <span class="sym">),
</span>	New_Version <span class="sym">=</span> erlang<span class="sym">:</span><span class="kwb">integer_to_list</span><span class="sym">(</span> Old_Module<span class="sym">:</span>version<span class="sym">()+</span><span class="num">1</span> <span class="sym">),
</span>	erlang<span class="sym">:</span><span class="kwb">list_to_atom</span><span class="sym">(</span> Basename <span class="sym">++</span> <span class="str">&quot;_&quot;</span> <span class="sym">++</span> New_Version <span class="sym">)</span>.

remove_version<span class="sym">(</span> Module <span class="sym">) -&gt;
</span>	M <span class="sym">=</span> erlang<span class="sym">:</span><span class="kwb">atom_to_list</span><span class="sym">(</span> Module <span class="sym">),
</span>	<span class="kwa">case</span> string<span class="sym">:</span>rchr<span class="sym">(</span> M<span class="sym">,</span> $_ <span class="sym">)</span> <span class="kwa">of
</span>	<span class="num">0</span> <span class="sym">-&gt;</span>	<span class="slc">% no '_', ie no version number. keep the whole module name.
</span>		M<span class="sym">;
</span>	N <span class="sym">-&gt;</span>	<span class="slc">% keep everything before '_',
</span>		string<span class="sym">:</span>sub_string<span class="sym">(</span> M<span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> N<span class="num">-1</span> <span class="sym">)
</span>	<span class="kwa">end</span>.
