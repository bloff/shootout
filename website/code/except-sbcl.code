<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: except-sbcl.code,v 1.13 2006-03-30 16:07:13 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; From: Friedrich Dominicus</span>
<span class="slc">;;; Multi-lisp modifications by Brent Fulgham</span>

<span class="sym">(</span>defparameter <span class="sym">*</span>hi<span class="sym">*</span> <span class="num">0</span><span class="sym">)</span>
<span class="sym">(</span>defparameter <span class="sym">*</span>lo<span class="sym">*</span> <span class="num">0</span><span class="sym">)</span>

<span class="sym">(</span><span class="kwa">defun</span> some<span class="sym">-</span>fun <span class="sym">(</span>n<span class="sym">)</span>
  <span class="sym">(</span>catch t
    <span class="sym">(</span>hi<span class="sym">-</span>fun n<span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> hi<span class="sym">-</span>fun <span class="sym">(</span>n<span class="sym">)</span>
  <span class="sym">(</span>catch <span class="str">'Hi_Exception</span>
<span class="str">    (lo-fun n)))</span>
<span class="str"></span>
<span class="str">(defun lo-fun (n)</span>
<span class="str">  (catch '</span>Lo_Exception
    <span class="sym">(</span>blow<span class="sym">-</span>up n<span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> blow<span class="sym">-</span>up <span class="sym">(</span>n<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>evenp n<span class="sym">)</span>
      <span class="sym">(</span>throw <span class="str">'Hi_Exception (setf *hi* (1+ *hi*)))</span>
<span class="str">    (throw '</span>Lo_Exception <span class="sym">(</span>setf <span class="sym">*</span>lo<span class="sym">* (</span><span class="num">1</span><span class="sym">+ *</span>lo<span class="sym">*)))))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
                                         #<span class="sym">+</span>cmu  extensions<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*</span>
					 #<span class="sym">+</span>gcl  si<span class="sym">::*</span><span class="kwa">command</span><span class="sym">-</span>args<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">))))</span>
  <span class="sym">(</span>setf <span class="sym">*</span>hi<span class="sym">*</span> <span class="num">0</span>
	<span class="sym">*</span>lo<span class="sym">*</span> <span class="num">0</span><span class="sym">)</span>
  <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">)))</span>
      <span class="sym">((=</span> i n<span class="sym">))</span>
    <span class="sym">(</span>some<span class="sym">-</span>fun i<span class="sym">)))</span>
  <span class="sym">(</span>format t <span class="str">&quot;Exceptions: HI=~A / LO=~A~%&quot;</span> <span class="sym">*</span>hi<span class="sym">* *</span>lo<span class="sym">*))</span>
