<span class="line">    1 </span><span class="slc">;;; $Id: methcall-chicken.code,v 1.3 2004-11-13 08:28:18 bfulgham Exp $ 
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; http://www.bagley.org/~doug/shootout/ 
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; from: Benedikt Rosenau 
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span> <span class="sym">(</span>declare <span class="sym">(</span>fixnum<span class="sym">) (</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>uses tinyclos<span class="sym">))
</span><span class="line">    6 </span><span class="sym"> 
</span><span class="line">    7 </span><span class="sym"> (</span>define<span class="sym">-</span>generic <span class="kwa">print</span><span class="sym">-</span>bool<span class="sym">)
</span><span class="line">    8 </span><span class="sym"> (</span>define<span class="sym">-</span>generic activate<span class="sym">!)
</span><span class="line">    9 </span><span class="sym"> 
</span><span class="line">   10 </span><span class="sym"> (</span>define<span class="sym">-</span>method <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>bool <span class="sym">(</span>b <span class="sym">&lt;</span>boolean<span class="sym">&gt;))
</span><span class="line">   11 </span><span class="sym">    (</span>display <span class="sym">(</span><span class="kwa">if</span> b <span class="str">&quot;true</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="str">&quot;false</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)))
</span><span class="line">   12 </span><span class="sym"> 
</span><span class="line">   13 </span><span class="sym"> (</span>define<span class="sym">-</span>class <span class="sym">&lt;</span>toggle<span class="sym">&gt; () (</span>state<span class="sym">))
</span><span class="line">   14 </span><span class="sym"> 
</span><span class="line">   15 </span><span class="sym"> (</span>define value? <span class="sym">(</span>cut slot<span class="sym">-</span>ref <span class="sym">&lt;&gt;</span> <span class="str">'state))
</span><span class="line">   16 </span><span class="str"> 
</span><span class="line">   17 </span><span class="str"> (define-class &lt;nth-toggle&gt; (&lt;toggle&gt;) (count-max counter))
</span><span class="line">   18 </span><span class="str"> 
</span><span class="line">   19 </span><span class="str"> (define-method (initialize (nt &lt;nth-toggle&gt;) initargs)
</span><span class="line">   20 </span><span class="str">   (initialize-slots nt initargs) )
</span><span class="line">   21 </span><span class="str"> 
</span><span class="line">   22 </span><span class="str"> (define-method (activate! (t &lt;toggle&gt;))
</span><span class="line">   23 </span><span class="str">   (slot-set! t '</span>state <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>slot<span class="sym">-</span>ref t <span class="str">'state)))
</span><span class="line">   24 </span><span class="str">    t)
</span><span class="line">   25 </span><span class="str"> 
</span><span class="line">   26 </span><span class="str"> (define-method (activate! (n-t &lt;nth-toggle&gt;))
</span><span class="line">   27 </span><span class="str">   (let ((counter (+ 1 (slot-ref n-t '</span>counter<span class="sym">))))
</span><span class="line">   28 </span><span class="sym">     (</span>slot<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> n<span class="sym">-</span>t <span class="str">'counter counter)
</span><span class="line">   29 </span><span class="str">     (if (&gt;= counter (slot-ref n-t '</span>count<span class="sym">-</span><span class="kwa">max</span><span class="sym">))
</span><span class="line">   30 </span><span class="sym">       (</span>begin <span class="sym">(</span>slot<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> n<span class="sym">-</span>t <span class="str">'state (not (slot-ref n-t '</span>state<span class="sym">)))
</span><span class="line">   31 </span><span class="sym">              (</span>slot<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> n<span class="sym">-</span>t <span class="str">'counter 0)))
</span><span class="line">   32 </span><span class="str">      n-t))
</span><span class="line">   33 </span><span class="str"> 
</span><span class="line">   34 </span><span class="str"> (define (main #!optional (n &quot;1&quot;))
</span><span class="line">   35 </span><span class="str">   (let ((n (string-&gt;number n)))
</span><span class="line">   36 </span><span class="str">     (let ((tog (make &lt;toggle&gt; '</span>state #t<span class="sym">)))
</span><span class="line">   37 </span><span class="sym">       (</span>do <span class="sym">((</span>i <span class="num">1</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))) ((=</span> i n<span class="sym">))
</span><span class="line">   38 </span><span class="sym">           (</span>value? <span class="sym">(</span>activate<span class="sym">!</span> tog<span class="sym">)))
</span><span class="line">   39 </span><span class="sym">       (</span><span class="kwa">print</span><span class="sym">-</span>bool <span class="sym">(</span>value? <span class="sym">(</span>activate<span class="sym">!</span> tog<span class="sym">))))
</span><span class="line">   40 </span><span class="sym">     (</span>let <span class="sym">((</span>ntog <span class="sym">(</span>make <span class="sym">&lt;</span><span class="kwa">nth</span><span class="sym">-</span>toggle<span class="sym">&gt;</span> <span class="str">'state #t '</span>count<span class="sym">-</span><span class="kwa">max</span> <span class="num">3</span> <span class="str">'counter 0)))
</span><span class="line">   41 </span><span class="str">       (do ((i 1 (+ i 1))) ((= i n))
</span><span class="line">   42 </span><span class="str">         (value? (activate! ntog)))
</span><span class="line">   43 </span><span class="str">       (print-bool (value? (activate! ntog))))))
</span><span class="line">   44 </span><span class="str"> 
</span><span class="line">   45 </span><span class="str">       (apply main (command-line-arguments))</span> 
