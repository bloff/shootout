<span class="slc">; The Computer Language Shootout</span>
<span class="slc">; http://shootout.alioth.debian.org/</span>
<span class="slc">; contributed by Sven Hartrumpf</span>

<span class="sym">(</span>module recursive
	<span class="sym">(</span>main main<span class="sym">)</span>
        <span class="sym">(</span>option <span class="sym">(</span><span class="kwa">set</span><span class="sym">! *</span>genericity<span class="sym">*</span> #t<span class="sym">))</span>
	<span class="sym">(</span>extern <span class="sym">(</span>macro printf<span class="sym">::</span>int <span class="sym">(</span>string double<span class="sym">)</span> <span class="str">&quot;printf&quot;</span><span class="sym">)</span>
                <span class="sym">(</span>macro printff<span class="sym">::</span>int <span class="sym">(</span>string double double<span class="sym">)</span> <span class="str">&quot;printf&quot;</span><span class="sym">)</span>
                <span class="sym">(</span>macro printi<span class="sym">::</span>int <span class="sym">(</span>string int<span class="sym">)</span> <span class="str">&quot;printf&quot;</span><span class="sym">)</span>
                <span class="sym">(</span>macro printii<span class="sym">::</span>int <span class="sym">(</span>string int int<span class="sym">)</span> <span class="str">&quot;printf&quot;</span><span class="sym">)</span>
                <span class="sym">(</span>macro printiiii<span class="sym">::</span>int <span class="sym">(</span>string int int int int<span class="sym">)</span> <span class="str">&quot;printf&quot;</span><span class="sym">)))</span>

<span class="sym">(</span>define ack <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>x y<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>zero? x<span class="sym">)</span>
    <span class="sym">(+</span> y <span class="num">1</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>zero? y<span class="sym">)</span>
      <span class="sym">(</span>ack <span class="sym">(-</span> x <span class="num">1</span><span class="sym">)</span> <span class="num">1</span><span class="sym">)</span>
      <span class="sym">(</span>ack <span class="sym">(-</span> x <span class="num">1</span><span class="sym">) (</span>ack x <span class="sym">(-</span> y <span class="num">1</span><span class="sym">)))))))</span>

<span class="sym">(</span>define ack<span class="sym">-</span>d <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>x y<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>zero? x<span class="sym">)</span>
    <span class="sym">(+</span> y <span class="num">1.0</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>zero? y<span class="sym">)</span>
      <span class="sym">(</span>ack<span class="sym">-</span>d <span class="sym">(-</span> x <span class="num">1.0</span><span class="sym">)</span> <span class="num">1.0</span><span class="sym">)</span>
      <span class="sym">(</span>ack<span class="sym">-</span>d <span class="sym">(-</span> x <span class="num">1.0</span><span class="sym">) (</span>ack<span class="sym">-</span>d x <span class="sym">(-</span> y <span class="num">1.0</span><span class="sym">)))))))</span>

<span class="sym">(</span>define fib <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>n<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> n <span class="num">2</span><span class="sym">)</span>
    <span class="num">1</span>
    <span class="sym">(+ (</span>fib <span class="sym">(-</span> n <span class="num">2</span><span class="sym">)) (</span>fib <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))))))</span>

<span class="sym">(</span>define fib<span class="sym">-</span>d <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>n<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> n <span class="num">2.0</span><span class="sym">)</span>
    <span class="num">1.0</span>
    <span class="sym">(+ (</span>fib<span class="sym">-</span>d <span class="sym">(-</span> n <span class="num">2.0</span><span class="sym">)) (</span>fib<span class="sym">-</span>d <span class="sym">(-</span> n <span class="num">1.0</span><span class="sym">))))))</span>

<span class="sym">(</span>define tak <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>x y z<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> y x<span class="sym">)</span>
    <span class="sym">(</span>tak <span class="sym">(</span>tak <span class="sym">(-</span> x <span class="num">1</span><span class="sym">)</span> y z<span class="sym">) (</span>tak <span class="sym">(-</span> y <span class="num">1</span><span class="sym">)</span> z x<span class="sym">) (</span>tak <span class="sym">(-</span> z <span class="num">1</span><span class="sym">)</span> x y<span class="sym">))</span>
    z<span class="sym">)))</span>

<span class="sym">(</span>define tak<span class="sym">-</span>d <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>x y z<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> y x<span class="sym">)</span>
    <span class="sym">(</span>tak<span class="sym">-</span>d <span class="sym">(</span>tak<span class="sym">-</span>d <span class="sym">(-</span> x <span class="num">1.0</span><span class="sym">)</span> y z<span class="sym">) (</span>tak<span class="sym">-</span>d <span class="sym">(-</span> y <span class="num">1.0</span><span class="sym">)</span> z x<span class="sym">) (</span>tak<span class="sym">-</span>d <span class="sym">(-</span> z <span class="num">1.0</span><span class="sym">)</span> x y<span class="sym">))</span>
    z<span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (- (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">))</span> <span class="num">1</span><span class="sym">))</span> <span class="num">1</span><span class="sym">)))</span>
    <span class="sym">(</span>printii #<span class="str">&quot;Ack(3,%d): %d</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(+</span> n <span class="num">1</span><span class="sym">) (</span>ack <span class="num">3</span> <span class="sym">(+</span> n <span class="num">1</span><span class="sym">)))</span>
    <span class="sym">(</span>printff #<span class="str">&quot;Fib(%.1f): %.1f</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(+</span> <span class="num">28.0</span> n<span class="sym">) (</span>fib<span class="sym">-</span>d <span class="sym">(+</span> <span class="num">28.0</span> n<span class="sym">)))</span>
    <span class="sym">(</span>printiiii #<span class="str">&quot;Tak(%d,%d,%d): %d</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(*</span> <span class="num">3</span> n<span class="sym">) (*</span> <span class="num">2</span> n<span class="sym">)</span> n <span class="sym">(</span>tak <span class="sym">(*</span> <span class="num">3</span> n<span class="sym">) (*</span> <span class="num">2</span> n<span class="sym">)</span> n<span class="sym">))</span>
    <span class="sym">(</span>printi #<span class="str">&quot;Fib(3): %d</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>fib <span class="num">3</span><span class="sym">))</span>
    <span class="sym">(</span>printf #<span class="str">&quot;Tak(3.0,2.0,1.0): %.1f</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>tak <span class="num">3.0 2.0 1.0</span><span class="sym">))))</span>
