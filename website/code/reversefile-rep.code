<span class="line">    1 </span>#<span class="sym">!/</span>bin<span class="sym">/</span>bash
<span class="line">    2 </span># <span class="sym">-*-</span> mode<span class="sym">:</span> lisp <span class="sym">-*-
</span><span class="line">    3 </span><span class="sym"></span>PROG<span class="sym">=</span>$<span class="sym">{</span><span class="num">0</span>%.jl<span class="sym">}
</span><span class="line">    4 </span><span class="sym">[</span> \<span class="sym">! -</span>f $PROG.jlc <span class="sym">-</span>o $<span class="num">0</span> <span class="sym">-</span>nt $PROG.jlc <span class="sym">] &amp;&amp;
</span><span class="line">    5 </span><span class="sym"></span>    rep <span class="sym">--</span>batch <span class="sym">--</span>no<span class="sym">-</span>rc <span class="sym">-</span>l compiler <span class="sym">-</span>f compile<span class="sym">-</span>batch $<span class="num">0
</span><span class="line">    6 </span><span class="num"></span>exec rep <span class="str">&quot;$PROG.jlc&quot;</span> <span class="str">&quot;$&#64;&quot;</span>
<span class="line">    7 </span><span class="sym">!</span>#
<span class="line">    8 </span>
<span class="line">    9 </span><span class="slc">;;; $Id: reversefile-rep.code,v 1.3 2004-11-13 08:28:18 bfulgham Exp $
</span><span class="line">   10 </span><span class="slc"></span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="line">   11 </span><span class="slc"></span>
<span class="line">   12 </span><span class="sym">(</span>define<span class="sym">-</span>structure main <span class="sym">()
</span><span class="line">   13 </span><span class="sym">  (</span><span class="kwa">open</span> rep rep.system<span class="sym">)
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym"></span>  <span class="slc">;; eat the unused command line arg
</span><span class="line">   16 </span><span class="slc"></span>  <span class="sym">(</span>get<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>option <span class="str">&quot;--num&quot;</span> t<span class="sym">)
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym">  (</span>let <span class="sym">((</span>lines <span class="str">'()))
</span><span class="line">   19 </span><span class="str">    (let loop ((line (read-line)))
</span><span class="line">   20 </span><span class="str">         (cond ((not line) nil)
</span><span class="line">   21 </span><span class="str">               (t
</span><span class="line">   22 </span><span class="str">                (setq lines (cons line lines))
</span><span class="line">   23 </span><span class="str">                (loop (read-line)))))
</span><span class="line">   24 </span><span class="str">    (let loop ((lines lines))
</span><span class="line">   25 </span><span class="str">         (cond ((not lines) nil)
</span><span class="line">   26 </span><span class="str">               (t
</span><span class="line">   27 </span><span class="str">                (princ (car lines))
</span><span class="line">   28 </span><span class="str">                (loop (cdr lines)))))))</span>
