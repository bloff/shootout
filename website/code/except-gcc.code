<span class="com">/* -*- mode: c -*-</span>
<span class="com"> * $Id: except-gcc.code,v 1.20 2006-09-20 05:51:10 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> */</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;setjmp.h&gt;</span>

<span class="kwb">int</span> HI <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> LO <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

<span class="kwb">static jmp_buf</span> Hi_exception<span class="sym">;</span>
<span class="kwb">static jmp_buf</span> Lo_exception<span class="sym">;</span>

<span class="kwb">void</span> <span class="kwd">blowup</span> <span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {</span>
    <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&amp;</span> <span class="num">1</span><span class="sym">) {</span>
	<span class="kwd">longjmp</span><span class="sym">(</span>Lo_exception<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
	<span class="kwd">longjmp</span><span class="sym">(</span>Hi_exception<span class="sym">,</span> <span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">lo_function</span> <span class="sym">(</span><span class="kwc">volatile</span> <span class="kwb">int</span> n<span class="sym">) {</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">setjmp</span><span class="sym">(</span>Lo_exception<span class="sym">) !=</span> <span class="num">0</span><span class="sym">) {</span>
	LO<span class="sym">++;</span>
    <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
	<span class="kwd">blowup</span><span class="sym">(</span>n<span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">hi_function</span> <span class="sym">(</span><span class="kwc">volatile</span> <span class="kwb">int</span> n<span class="sym">) {</span>
    <span class="kwa">if</span> <span class="sym">(</span><span class="kwd">setjmp</span><span class="sym">(</span>Hi_exception<span class="sym">) !=</span> <span class="num">0</span><span class="sym">) {</span>
	HI<span class="sym">++;</span>
    <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
	<span class="kwd">lo_function</span><span class="sym">(</span>n<span class="sym">);</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">some_function</span> <span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {</span>
    <span class="kwd">hi_function</span><span class="sym">(</span>n<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">int</span>
<span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>
    <span class="kwb">int</span> <span class="kwc">volatile</span> N <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>

    <span class="kwa">while</span> <span class="sym">(</span>N<span class="sym">) {</span>
	<span class="kwd">some_function</span><span class="sym">(</span>N<span class="sym">--);</span>
    <span class="sym">}</span>
    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;Exceptions: HI=%d / LO=%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> HI<span class="sym">,</span> LO<span class="sym">);</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>
