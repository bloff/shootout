<span class="com">(*</span>
<span class="com">  The Computer Language Benchmarks Game</span>
<span class="com">  http://shootout.alioth.debian.org</span>
<span class="com"></span>
<span class="com">  contributed by Vitaly Trifonof</span>
<span class="com">*)</span>

<span class="com">{$INLINE ON}</span>
<span class="com">{$CHECKPOINTER OFF}</span>
<span class="com">{$RANGECHECKS OFF}</span>
<span class="com">{$OVERFLOWCHECKS OFF}</span>
<span class="com">{$VARSTRINGCHECKS OFF}</span>
<span class="com">{$IOCHECKS OFF}</span>
<span class="com">{$OPTIMIZATION TAILREC}</span>

<span class="kwa">uses</span> regexpr<span class="sym">,</span> sysutils<span class="sym">;</span>


<span class="kwa">var</span>
  seqLen<span class="sym">:</span> <span class="kwb">Cardinal</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  seqCleanLen<span class="sym">:</span> <span class="kwb">Cardinal</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>


<span class="kwa">function</span> getchar<span class="sym">:</span> <span class="kwb">Char</span><span class="sym">;</span> <span class="kwa">inline</span><span class="sym">;</span>
<span class="kwa">var</span>
  ch<span class="sym">:</span> <span class="kwb">Char</span><span class="sym">;</span>
<span class="kwa">begin</span>
  seqLen <span class="sym">+=</span> <span class="num">1</span><span class="sym">;</span>  <span class="kwd">read</span><span class="sym">(</span>ch<span class="sym">);</span>  getchar <span class="sym">:=</span> ch
<span class="kwa">end</span><span class="sym">;</span>


<span class="kwa">var</span>
  patterns <span class="sym">:</span> <span class="kwa">array</span><span class="sym">[</span><span class="num">0</span>.<span class="num">.8</span><span class="sym">]</span> <span class="kwa">of</span> PChar <span class="sym">=</span>
    <span class="sym">(</span>
      <span class="str">'(agggtaaa)|(tttaccct)'</span><span class="sym">,</span>
      <span class="str">'([cgt]gggtaaa)|(tttaccc[acg])'</span><span class="sym">,</span>
      <span class="str">'(a[act]ggtaaa)|(tttacc[agt]t)'</span><span class="sym">,</span>
      <span class="str">'(ag[act]gtaaa)|(tttac[agt]ct)'</span><span class="sym">,</span>
      <span class="str">'(agg[act]taaa)|(ttta[agt]cct)'</span><span class="sym">,</span>
      <span class="str">'(aggg[acg]aaa)|(ttt[cgt]ccct)'</span><span class="sym">,</span>
      <span class="str">'(agggt[cgt]aa)|(tt[acg]accct)'</span><span class="sym">,</span>
      <span class="str">'(agggta[cgt]a)|(t[acg]taccct)'</span><span class="sym">,</span>
      <span class="str">'(agggtaa[cgt])|([acg]ttaccct)'</span>
    <span class="sym">);</span>


<span class="kwa">function</span> <span class="kwd">findExpr</span><span class="sym">(</span> regexp<span class="sym">,</span> seq<span class="sym">:</span> PChar <span class="sym">):</span> <span class="kwb">Longint</span><span class="sym">;</span> <span class="kwa">inline</span><span class="sym">;</span>
<span class="kwa">var</span>
  cregexp <span class="sym">:</span> TRegExprEngine<span class="sym">;</span>
  count<span class="sym">,</span> index<span class="sym">,</span> tmpInt<span class="sym">:</span> <span class="kwb">Longint</span><span class="sym">;</span>
  tmpseq<span class="sym">:</span> PChar<span class="sym">;</span>
<span class="kwa">begin</span>
  count <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span> tmpseq <span class="sym">:=</span> seq<span class="sym">;</span>
  <span class="kwd">GenerateRegExprEngine</span><span class="sym">(</span> regexp<span class="sym">, [</span>ref_caseinsensitive<span class="sym">],</span> cregexp<span class="sym">);</span>

  <span class="kwa">while</span> <span class="kwd">RegExprPos</span><span class="sym">(</span>cregexp<span class="sym">,</span> tmpseq<span class="sym">,</span> index<span class="sym">,</span> tmpInt<span class="sym">)</span> <span class="kwa">do</span>
  <span class="kwa">begin</span>
    count <span class="sym">+=</span> <span class="num">1</span><span class="sym">;</span>
    tmpseq <span class="sym">:= &#64;(</span>tmpseq<span class="sym">[</span>index <span class="sym">+</span> <span class="num">1</span><span class="sym">]);</span>
  <span class="kwa">end</span><span class="sym">;</span>

  <span class="kwd">DestroyRegExprEngine</span><span class="sym">(</span> cregexp <span class="sym">);</span>
  findExpr <span class="sym">:=</span> count
<span class="kwa">end</span><span class="sym">;</span>


<span class="kwa">function</span> <span class="kwd">findSplitExpr</span> <span class="sym">(</span> regexp<span class="sym">,</span>seq<span class="sym">:</span> PChar <span class="sym">):</span> <span class="kwb">Longint</span><span class="sym">;</span> <span class="kwa">inline</span><span class="sym">;</span>
<span class="kwa">var</span>
  split<span class="sym">:</span> PChar<span class="sym">;</span>
  count<span class="sym">:</span> <span class="kwb">Longint</span><span class="sym">;</span>
<span class="kwa">begin</span>
  split <span class="sym">:=</span> <span class="kwd">strscan</span><span class="sym">(</span>regexp<span class="sym">,</span> <span class="str">'|'</span><span class="sym">);</span>
  <span class="kwb">Byte</span><span class="sym">(</span>split^<span class="sym">) :=</span> <span class="num">0</span><span class="sym">;</span>

  count <span class="sym">:=</span> <span class="kwd">findExpr</span><span class="sym">(</span>regexp<span class="sym">,</span> seq<span class="sym">);</span>
  count <span class="sym">+=</span> <span class="kwd">findExpr</span><span class="sym">(&#64;</span>split<span class="sym">[</span><span class="num">1</span><span class="sym">],</span> seq<span class="sym">);</span>
  split^ <span class="sym">:=</span> <span class="str">'|'</span><span class="sym">;</span>
  findSplitExpr <span class="sym">:=</span> count
<span class="kwa">end</span><span class="sym">;</span>

<span class="com">(* calculate needed size for malloc *)</span>
<span class="kwa">function</span> <span class="kwd">addSize</span><span class="sym">(</span> seq<span class="sym">:</span> PChar <span class="sym">):</span> <span class="kwb">Cardinal</span><span class="sym">;</span> <span class="kwa">inline</span><span class="sym">;</span>
<span class="kwa">var</span>
  count<span class="sym">:</span> <span class="kwb">Cardinal</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
  tmpseq<span class="sym">:</span> PChar<span class="sym">;</span>
<span class="kwa">begin</span>
  tmpseq <span class="sym">:=</span> seq<span class="sym">;</span>
  <span class="kwa">while</span> <span class="kwb">Byte</span><span class="sym">(</span>tmpseq^<span class="sym">) &lt;&gt;</span> <span class="num">0</span> <span class="kwa">do</span>
  <span class="kwa">begin</span>
    <span class="kwa">case</span> tmpseq^ <span class="kwa">of</span>
      <span class="str">'B'</span><span class="sym">:</span>    count <span class="sym">+=</span> <span class="num">6</span><span class="sym">;</span>  <span class="slc">//(c|g|t)</span>
      <span class="str">'D'</span><span class="sym">:</span>    count <span class="sym">+=</span> <span class="num">6</span><span class="sym">;</span>  <span class="slc">//(a|g|t)</span>
      <span class="str">'H'</span><span class="sym">:</span>    count <span class="sym">+=</span> <span class="num">6</span><span class="sym">;</span>  <span class="slc">//(a|c|t)</span>
      <span class="str">'K'</span><span class="sym">:</span>    count <span class="sym">+=</span> <span class="num">4</span><span class="sym">;</span>  <span class="slc">//(g|t)</span>
      <span class="str">'M'</span><span class="sym">:</span>    count <span class="sym">+=</span> <span class="num">4</span><span class="sym">;</span>  <span class="slc">//(a|c)</span>
      <span class="str">'N'</span><span class="sym">:</span>    count <span class="sym">+=</span> <span class="num">8</span><span class="sym">;</span>  <span class="slc">//(a|c|g|t)</span>
      <span class="str">'R'</span><span class="sym">:</span>    count <span class="sym">+=</span> <span class="num">4</span><span class="sym">;</span>  <span class="slc">//(a|g)</span>
      <span class="str">'S'</span><span class="sym">:</span>    count <span class="sym">+=</span> <span class="num">4</span><span class="sym">;</span>  <span class="slc">//(c|t)</span>
      <span class="str">'V'</span><span class="sym">:</span>    count <span class="sym">+=</span> <span class="num">6</span><span class="sym">;</span>  <span class="slc">//(a|c|g)</span>
      <span class="str">'W'</span><span class="sym">:</span>    count <span class="sym">+=</span> <span class="num">4</span><span class="sym">;</span>  <span class="slc">//(a|t)</span>
      <span class="str">'Y'</span><span class="sym">:</span>    count <span class="sym">+=</span> <span class="num">4</span><span class="sym">;</span>  <span class="slc">//(c|t)</span>
    <span class="kwa">end</span><span class="sym">;</span>
    tmpseq <span class="sym">:= &#64;</span>tmpseq<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
  <span class="kwa">end</span><span class="sym">;</span>
  addSize <span class="sym">:=</span> count
<span class="kwa">end</span><span class="sym">;</span>

<span class="com">(* IUB replace *)</span>
<span class="kwa">procedure</span> <span class="kwd">replace</span><span class="sym">(</span> seq<span class="sym">:</span> PChar<span class="sym">;</span> <span class="kwa">var</span> newSeq<span class="sym">:</span> PChar <span class="sym">);</span> <span class="kwa">inline</span><span class="sym">;</span>
<span class="kwa">var</span>
  itmpseq<span class="sym">,</span> otmpseq<span class="sym">:</span> PChar<span class="sym">;</span>
<span class="kwa">begin</span>
  <span class="kwd">GetMem</span><span class="sym">(</span>newSeq<span class="sym">,</span> <span class="kwd">SizeOf</span><span class="sym">(</span><span class="kwb">Char</span><span class="sym">)*(</span>seqCleanLen <span class="sym">+</span> <span class="kwd">addSize</span><span class="sym">(</span>seq<span class="sym">) +</span> <span class="num">1</span><span class="sym">));</span>
  itmpseq <span class="sym">:=</span> seq<span class="sym">;</span> otmpseq <span class="sym">:=</span> newSeq<span class="sym">;</span>
  <span class="kwa">while</span> <span class="kwb">Byte</span><span class="sym">(</span>itmpseq^<span class="sym">) &lt;&gt;</span> <span class="num">0</span> <span class="kwa">do</span>
  <span class="kwa">begin</span>
    <span class="kwa">case</span> itmpseq^ <span class="kwa">of</span>
      <span class="str">'B'</span><span class="sym">:</span>  otmpseq <span class="sym">:=</span> <span class="kwd">strecopy</span><span class="sym">(</span>otmpseq<span class="sym">,</span><span class="str">'(c|g|t)'</span><span class="sym">);</span>
      <span class="str">'D'</span><span class="sym">:</span>  otmpseq <span class="sym">:=</span> <span class="kwd">strecopy</span><span class="sym">(</span>otmpseq<span class="sym">,</span><span class="str">'(a|g|t)'</span><span class="sym">);</span>
      <span class="str">'H'</span><span class="sym">:</span>  otmpseq <span class="sym">:=</span> <span class="kwd">strecopy</span><span class="sym">(</span>otmpseq<span class="sym">,</span><span class="str">'(a|c|t)'</span><span class="sym">);</span>
      <span class="str">'K'</span><span class="sym">:</span>  otmpseq <span class="sym">:=</span> <span class="kwd">strecopy</span><span class="sym">(</span>otmpseq<span class="sym">,</span><span class="str">'(g|t)'</span><span class="sym">);</span>
      <span class="str">'M'</span><span class="sym">:</span>  otmpseq <span class="sym">:=</span> <span class="kwd">strecopy</span><span class="sym">(</span>otmpseq<span class="sym">,</span><span class="str">'(a|c)'</span><span class="sym">);</span>
      <span class="str">'N'</span><span class="sym">:</span>  otmpseq <span class="sym">:=</span> <span class="kwd">strecopy</span><span class="sym">(</span>otmpseq<span class="sym">,</span><span class="str">'(a|c|g|t)'</span><span class="sym">);</span>
      <span class="str">'R'</span><span class="sym">:</span>  otmpseq <span class="sym">:=</span> <span class="kwd">strecopy</span><span class="sym">(</span>otmpseq<span class="sym">,</span><span class="str">'(a|g)'</span><span class="sym">);</span>
      <span class="str">'S'</span><span class="sym">:</span>  otmpseq <span class="sym">:=</span> <span class="kwd">strecopy</span><span class="sym">(</span>otmpseq<span class="sym">,</span><span class="str">'(c|t)'</span><span class="sym">);</span>
      <span class="str">'V'</span><span class="sym">:</span>  otmpseq <span class="sym">:=</span> <span class="kwd">strecopy</span><span class="sym">(</span>otmpseq<span class="sym">,</span><span class="str">'(a|c|g)'</span><span class="sym">);</span>
      <span class="str">'W'</span><span class="sym">:</span>  otmpseq <span class="sym">:=</span> <span class="kwd">strecopy</span><span class="sym">(</span>otmpseq<span class="sym">,</span><span class="str">'(a|t)'</span><span class="sym">);</span>
      <span class="str">'Y'</span><span class="sym">:</span>  otmpseq <span class="sym">:=</span> <span class="kwd">strecopy</span><span class="sym">(</span>otmpseq<span class="sym">,</span><span class="str">'(c|t)'</span><span class="sym">);</span>
    <span class="kwa">else</span>
      otmpseq^ <span class="sym">:=</span> itmpseq^<span class="sym">;</span>
      otmpseq <span class="sym">:= &#64;</span>otmpseq<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
    <span class="kwa">end</span><span class="sym">;</span>
    itmpseq <span class="sym">:= &#64;</span>itmpseq<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
  <span class="kwa">end</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span>


<span class="kwa">var</span>
  seq<span class="sym">,</span> newSeq<span class="sym">:</span> PChar<span class="sym">;</span>
  maxSeqLen<span class="sym">:</span> <span class="kwb">Cardinal</span> <span class="sym">=</span> <span class="num">6000000</span><span class="sym">;</span>
  ch<span class="sym">:</span> <span class="kwb">Char</span><span class="sym">;</span>
  i<span class="sym">:</span> <span class="kwb">Longint</span><span class="sym">;</span>
<span class="kwa">begin</span>
  <span class="kwd">GetMem</span><span class="sym">(</span>seq<span class="sym">,</span> <span class="kwd">SizeOf</span><span class="sym">(</span><span class="kwb">Char</span><span class="sym">)*(</span>maxSeqLen<span class="sym">+</span><span class="num">1</span><span class="sym">));</span>

<span class="com">(* Read FASTA format file from stdin</span>
<span class="com">   Count length and remove the unwanted elements  *)</span>
  <span class="kwa">while not</span> eof <span class="kwa">do</span>
  <span class="kwa">begin</span>
    ch <span class="sym">:=</span> getchar<span class="sym">;</span>

    <span class="kwa">if</span> ch <span class="sym">&lt;&gt;</span> <span class="str">'&gt;'</span> <span class="kwa">then</span>
    <span class="kwa">begin</span>
      <span class="kwa">if</span> seqCleanLen <span class="sym">=</span> maxSeqLen <span class="kwa">then</span>
      <span class="kwa">begin</span>
        maxSeqLen <span class="sym">+=</span> <span class="num">2000000</span><span class="sym">;</span>
        seq <span class="sym">:=</span> <span class="kwd">ReAllocMem</span><span class="sym">(</span>seq<span class="sym">,</span> <span class="kwd">SizeOf</span><span class="sym">(</span><span class="kwb">Char</span><span class="sym">)*(</span>maxSeqLen<span class="sym">+</span><span class="num">2</span><span class="sym">) );</span>
      <span class="kwa">end</span><span class="sym">;</span>
      seq<span class="sym">[</span>seqCleanLen<span class="sym">] :=</span> ch<span class="sym">;</span>
      seqCleanLen <span class="sym">+=</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">if</span> eoln <span class="kwa">then</span>
        getchar
    <span class="kwa">end</span>
    <span class="kwa">else</span>
    <span class="kwa">begin</span>
      <span class="kwa">repeat</span>
        getchar
      <span class="kwa">until</span> eoln<span class="sym">;</span>
      getchar
    <span class="kwa">end</span>
  <span class="kwa">end</span><span class="sym">;</span>
  <span class="kwb">Byte</span><span class="sym">(</span>seq<span class="sym">[</span>seqCleanLen<span class="sym">]) :=</span> <span class="num">0</span><span class="sym">;</span> <span class="slc">//end read data</span>

<span class="com">(* Count matches *)</span>
<span class="com">(* The following slow, because unit regexpr in free pascal is very slow *)</span>
  <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="num">8</span> <span class="kwa">do</span>
    <span class="kwd">writeln</span><span class="sym">(</span>patterns<span class="sym">[</span>i<span class="sym">],</span> <span class="kwd">findSplitExpr</span><span class="sym">(</span>patterns<span class="sym">[</span>i<span class="sym">],</span> seq<span class="sym">));</span>
    <span class="slc">//writeln(patterns[i], findExpr(patterns[i], seq));</span>

<span class="com">(* do replacements *)</span>
  <span class="kwd">replace</span><span class="sym">(</span>seq<span class="sym">,</span> newSeq<span class="sym">);</span>

  writeln<span class="sym">;</span>
  <span class="kwd">writeln</span><span class="sym">(</span>seqLen<span class="sym">);</span>
  <span class="kwd">writeln</span><span class="sym">(</span>seqCleanLen<span class="sym">);</span>
  <span class="kwd">writeln</span><span class="sym">(</span><span class="kwd">strlen</span><span class="sym">(</span>newSeq<span class="sym">));</span>

  <span class="kwd">FreeMem</span><span class="sym">(</span>newSeq<span class="sym">);</span>
  <span class="kwd">FreeMem</span><span class="sym">(</span>seq<span class="sym">)</span>
<span class="kwa">end</span>.
