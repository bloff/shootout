<span class="com">/*
-- The Great Computer Language Shootout
-- http://shootout.alioth.debian.org/
--
-- contributed by Daniel Skiles
*/</span>

<span class="dir">#include &lt;cstdlib&gt;
</span><span class="dir">#include &lt;iostream&gt;
</span>
<span class="kwa">using namespace</span> std<span class="sym">;

</span><span class="kwb">int</span> nsieve<span class="sym">(</span><span class="kwb">int</span><span class="sym">,</span> <span class="kwb">bool</span><span class="sym">[]);

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[])
{
</span>    <span class="kwb">int</span> n <span class="sym">= (</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">2</span><span class="sym">;
</span>    <span class="kwb">int</span> m<span class="sym">;
</span>    <span class="kwb">bool</span><span class="sym">*</span> flags<span class="sym">;

    </span>    m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">)*</span><span class="num">10000</span><span class="sym">;
</span>    flags <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">bool</span><span class="sym">[</span>m<span class="sym">];
</span>    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Primes up to &quot;</span> <span class="sym">&lt;&lt;</span> m <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> nsieve<span class="sym">(</span>m<span class="sym">,</span> flags<span class="sym">) &lt;&lt;</span> endl<span class="sym">;
</span>    <span class="kwa">delete</span><span class="sym">[]</span> flags<span class="sym">;
</span>    flags <span class="sym">=</span> NULL<span class="sym">;

    </span>    m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="num">-1</span><span class="sym">)*</span><span class="num">10000</span><span class="sym">;
</span>    flags <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">bool</span><span class="sym">[</span>m<span class="sym">];
</span>    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Primes up to &quot;</span> <span class="sym">&lt;&lt;</span> m <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> nsieve<span class="sym">(</span>m<span class="sym">,</span> flags<span class="sym">) &lt;&lt;</span> endl<span class="sym">;
</span>    <span class="kwa">delete</span><span class="sym">[]</span> flags<span class="sym">;
</span>    flags <span class="sym">=</span> NULL<span class="sym">;

    </span>    m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="num">-2</span><span class="sym">)*</span><span class="num">10000</span><span class="sym">;
</span>    flags <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">bool</span><span class="sym">[</span>m<span class="sym">];
</span>    cout <span class="sym">&lt;&lt;</span> <span class="str">&quot;Primes up to &quot;</span> <span class="sym">&lt;&lt;</span> m <span class="sym">&lt;&lt;</span> <span class="str">&quot; &quot;</span> <span class="sym">&lt;&lt;</span> nsieve<span class="sym">(</span>m<span class="sym">,</span> flags<span class="sym">) &lt;&lt;</span> endl<span class="sym">;
</span>    <span class="kwa">delete</span><span class="sym">[]</span> flags<span class="sym">;
</span>    flags <span class="sym">=</span> NULL<span class="sym">;

    </span>    <span class="kwa">return</span> EXIT_SUCCESS<span class="sym">;
}

</span><span class="kwb">int</span> nsieve<span class="sym">(</span><span class="kwb">int</span> m<span class="sym">,</span> <span class="kwb">bool</span> <span class="sym">*</span>isPrime<span class="sym">)
{
</span>    <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;

    </span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i<span class="sym">&lt;=</span>m<span class="sym">;</span> i<span class="sym">++)
</span>        isPrime<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">true</span><span class="sym">;

        </span>    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i<span class="sym">&lt;=</span>m<span class="sym">;</span> i<span class="sym">++){
</span>        <span class="kwa">if</span><span class="sym">(</span>isPrime<span class="sym">[</span>i<span class="sym">]){
</span>            <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> k<span class="sym">=</span>i<span class="sym">*</span><span class="num">2</span><span class="sym">;</span> k<span class="sym">&lt;=</span>m<span class="sym">;</span> k<span class="sym">+=</span>i<span class="sym">){
</span>                isPrime<span class="sym">[</span>k<span class="sym">] =</span> <span class="kwa">false</span><span class="sym">;
            }
</span>            count<span class="sym">++;
        }
    }
</span>    <span class="kwa">return</span> count<span class="sym">;
}

</span>
