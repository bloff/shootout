<span class="com">/*</span>
<span class="com">	The Computer Language</span>
<span class="com">	Shootout Benchmarks</span>
<span class="com"></span>
<span class="com">	http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">	Contributed by Lester Vecsey, translated to Cyclone by Brent Fulgham</span>
<span class="com">*/</span>

<span class="dir">#include &lt;stdio.h&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>

<span class="kwb">struct</span> node <span class="sym">{</span>
	<span class="kwb">struct</span> node ?left<span class="sym">,</span> ?right<span class="sym">;</span>
	<span class="kwb">signed long</span> item<span class="sym">;</span>
<span class="sym">};</span>

<span class="kwb">int</span> <span class="kwd">allocate_nodes</span><span class="sym">(</span><span class="kwb">struct</span> node ??root<span class="sym">,</span> <span class="kwb">unsigned int</span> node_depth<span class="sym">) {</span>
	<span class="kwa">if</span> <span class="sym">(</span>root<span class="sym">==</span>NULL<span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>

	<span class="sym">*</span>root <span class="sym">= (</span><span class="kwb">struct</span> node?<span class="sym">)</span> <span class="kwd">malloc</span><span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">struct</span> node<span class="sym">) * ((</span><span class="num">2</span> <span class="sym">&lt;&lt;</span> node_depth<span class="sym">) -</span> <span class="num">1</span><span class="sym">) );</span>

	<span class="kwa">return</span> <span class="sym">(*</span>root<span class="sym">==</span>NULL<span class="sym">) * -</span><span class="num">1</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">tree_assign_items</span><span class="sym">(</span><span class="kwb">struct</span> node ??alloc_in<span class="sym">,</span> <span class="kwb">struct</span> node ??node_out<span class="sym">,</span> <span class="kwb">signed long</span> item<span class="sym">,</span> <span class="kwb">int</span> depth<span class="sym">) {</span>

	<span class="kwa">if</span> <span class="sym">(</span>alloc_in<span class="sym">==</span>NULL <span class="sym">||</span> node_out<span class="sym">==</span>NULL<span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>

	_ c <span class="sym">= (*</span>alloc_in<span class="sym">)++;</span>

	<span class="kwa">if</span> <span class="sym">(</span>depth<span class="sym">==</span><span class="num">0</span><span class="sym">) {</span>
		c<span class="sym">-&gt;</span>left <span class="sym">=</span> c<span class="sym">-&gt;</span>right <span class="sym">=</span> NULL<span class="sym">;</span> c<span class="sym">-&gt;</span>item <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
		<span class="kwd">tree_assign_items</span><span class="sym">(</span>alloc_in<span class="sym">, &amp; (</span>c<span class="sym">-&gt;</span>left<span class="sym">),</span> <span class="num">2</span><span class="sym">*</span>item<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">);</span>
		<span class="kwd">tree_assign_items</span><span class="sym">(</span>alloc_in<span class="sym">, &amp; (</span>c<span class="sym">-&gt;</span>right<span class="sym">),</span> <span class="num">2</span><span class="sym">*</span>item<span class="sym">,</span> depth<span class="sym">-</span><span class="num">1</span><span class="sym">);</span>
		c<span class="sym">-&gt;</span>item <span class="sym">=</span> item<span class="sym">;</span>
	<span class="sym">}</span>

	<span class="sym">*</span>node_out <span class="sym">=</span> c<span class="sym">;</span>

	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">signed long</span> <span class="kwd">item_check</span><span class="sym">(</span><span class="kwb">struct</span> node <span class="sym">*</span>n<span class="sym">) {</span>
	<span class="kwa">return</span> n<span class="sym">-&gt;</span>item <span class="sym">+ (</span>n<span class="sym">-&gt;</span>left<span class="sym">==</span>NULL ? <span class="num">0</span> <span class="sym">:</span> <span class="kwd">item_check</span><span class="sym">(</span>n<span class="sym">-&gt;</span>left<span class="sym">) -</span> <span class="kwd">item_check</span><span class="sym">(</span>n<span class="sym">-&gt;</span>right<span class="sym">));</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">alloc_assign_chk</span><span class="sym">(</span><span class="kwb">struct</span> node ??root<span class="sym">,</span> <span class="kwb">signed long</span> ?chk_result<span class="sym">,</span> <span class="kwb">int</span> count<span class="sym">,</span> <span class="kwb">unsigned int</span> depth<span class="sym">) {</span>

	<span class="kwa">if</span> <span class="sym">(</span>root<span class="sym">==</span>NULL<span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>

	<span class="kwa">if</span> <span class="sym">(</span><span class="kwd">allocate_nodes</span><span class="sym">(</span>root<span class="sym">,</span> depth<span class="sym">) == -</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>

		<span class="kwa">else</span> <span class="sym">{</span>
			<span class="kwb">struct</span> node ?x <span class="sym">= *</span>root<span class="sym">;</span>
			<span class="kwa">if</span> <span class="sym">(</span><span class="kwd">tree_assign_items</span><span class="sym">(&amp;</span>x<span class="sym">,</span> root<span class="sym">,</span> count<span class="sym">,</span> depth<span class="sym">) == -</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
		<span class="sym">}</span>

	<span class="kwa">if</span> <span class="sym">(</span>chk_result<span class="sym">!=</span>NULL<span class="sym">) *</span>chk_result <span class="sym">+=</span> <span class="kwd">item_check</span><span class="sym">(*</span>root<span class="sym">);</span>

	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">stretch_process</span><span class="sym">(</span><span class="kwb">struct</span> node ??root<span class="sym">,</span> <span class="kwb">int</span> stretch_depth<span class="sym">) {</span>
	<span class="kwb">signed long</span> chk <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

	<span class="kwa">if</span> <span class="sym">(</span><span class="kwd">alloc_assign_chk</span><span class="sym">(</span>root<span class="sym">, &amp;</span>chk<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> stretch_depth<span class="sym">) == -</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
	<span class="kwa">if</span> <span class="sym">(</span>chk <span class="sym">!= -</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>

	<span class="kwd">free</span><span class="sym">(*</span>root<span class="sym">);</span>

	<span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;stretch tree of depth %u</span><span class="esc">\t</span> <span class="str">check: %li</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> stretch_depth<span class="sym">,</span> chk<span class="sym">);</span>

	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">iterative_process</span><span class="sym">(</span><span class="kwb">struct</span> node ??root<span class="sym">,</span> <span class="kwb">int</span> min<span class="sym">,</span> <span class="kwb">int</span> max<span class="sym">) {</span>

	<span class="kwb">signed long</span> base_item<span class="sym">,</span> chk<span class="sym">,</span> iterations <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>max<span class="sym">);</span>

	<span class="kwa">for</span> <span class="sym">( ;</span> min <span class="sym">&lt;=</span> max<span class="sym">;</span> min<span class="sym">+=</span><span class="num">2</span><span class="sym">,</span> iterations<span class="sym">&gt;&gt;=</span><span class="num">2</span><span class="sym">) {</span>
		<span class="kwa">for</span> <span class="sym">(</span>base_item<span class="sym">=</span><span class="num">1</span><span class="sym">,</span> chk<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> base_item <span class="sym">&lt;=</span> iterations<span class="sym">; ) {</span>
			<span class="kwa">if</span> <span class="sym">(</span><span class="kwd">alloc_assign_chk</span><span class="sym">(</span>root<span class="sym">, &amp;</span>chk<span class="sym">,</span> base_item<span class="sym">,</span> min<span class="sym">) == -</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
			<span class="kwd">free</span><span class="sym">(*</span>root<span class="sym">);</span>

			base_item <span class="sym">*= -</span><span class="num">1</span><span class="sym">;</span> base_item <span class="sym">+=</span> base_item <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">;</span>
		<span class="sym">}</span>

		<span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%lu</span><span class="esc">\t</span> <span class="str">trees of depth %d</span><span class="esc">\t</span> <span class="str">check: %li</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> iterations<span class="sym">*</span><span class="num">2</span><span class="sym">,</span> min<span class="sym">,</span> chk<span class="sym">);</span>
	<span class="sym">}</span>

	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> ??argv<span class="sym">) {</span>

	<span class="kwb">struct</span> node ?long_lived<span class="sym">,</span> ?t<span class="sym">;</span>

	<span class="kwb">unsigned int</span> max <span class="sym">=</span> argc <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">strtol</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">],</span> <span class="num">0</span><span class="sym">,</span> <span class="num">10</span><span class="sym">) :</span> <span class="num">10</span><span class="sym">;</span>

	<span class="kwa">if</span> <span class="sym">(</span><span class="kwd">stretch_process</span><span class="sym">(&amp;</span>t<span class="sym">,</span> max <span class="sym">+</span> <span class="num">1</span><span class="sym">) == -</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>

	<span class="kwa">if</span> <span class="sym">(</span><span class="kwd">alloc_assign_chk</span><span class="sym">(&amp;</span>long_lived<span class="sym">,</span> NULL<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> max<span class="sym">) == -</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>

	<span class="kwa">if</span> <span class="sym">(</span><span class="kwd">iterative_process</span><span class="sym">(&amp;</span>t<span class="sym">,</span> <span class="num">4</span><span class="sym">,</span> max<span class="sym">) == -</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">return</span> <span class="sym">-</span><span class="num">1</span><span class="sym">;</span>

	<span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;long lived tree of depth %d</span><span class="esc">\t</span> <span class="str">check: %li</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> max<span class="sym">,</span> <span class="kwd">item_check</span><span class="sym">(</span>long_lived<span class="sym">));</span>

	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
