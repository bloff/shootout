<span class="slc">-- -*- mode: eiffel -*-
</span><span class="slc">-- $Id: ary-se.code,v 1.5 2005-03-29 08:48:29 bfulgham Exp $
</span><span class="slc">-- http://www.bagley.org/~doug/shootout/
</span>
<span class="slc">-- Friedrich Dominicus points out that it is about twice as fast
</span><span class="slc">-- when we substitute NATIVE_ARRAY for ARRAY.  I've commented out
</span><span class="slc">-- my original code below and now use NATIVE_ARRAY.
</span>
<span class="kwa">class</span> ARY

creation make

<span class="kwa">feature

</span>   make <span class="kwa">is

      local
</span>         x<span class="sym">:</span> NATIVE_ARRAY<span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">];
</span>         y<span class="sym">:</span> NATIVE_ARRAY<span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">];
</span><span class="slc">--	 x: ARRAY[INTEGER];
</span><span class="slc">--	 y: ARRAY[INTEGER];
</span>	 i<span class="sym">,</span>k<span class="sym">,</span>n<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;
</span>      <span class="kwa">do
	 if</span> argument_count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then
</span>	    n <span class="sym">:=</span> argument<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
	 <span class="kwa">else
</span>	    n <span class="sym">:=</span> <span class="num">1
</span>	 <span class="kwa">end

</span>         x <span class="sym">:=</span> x.calloc<span class="sym">(</span>n<span class="sym">);
</span>         y <span class="sym">:=</span> y.calloc<span class="sym">(</span>n<span class="sym">);
</span><span class="slc">--	 !!x.make(0,n)
</span><span class="slc">--	 !!y.make(0,n)
</span>
	 <span class="kwa">from
</span>	    i <span class="sym">:=</span> <span class="num">0
</span>	 until
	    i <span class="sym">=</span> n
	 <span class="kwa">loop
</span>	    x.put<span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> i<span class="sym">)
</span>	    i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1
</span>	 <span class="kwa">end
	 from
</span>	    k <span class="sym">:=</span> <span class="num">0
</span>	 until
	    k <span class="sym">=</span> <span class="num">1000
</span>	 <span class="kwa">loop
	    from
</span>	       i <span class="sym">:=</span> n<span class="num">-1
</span>	    until
	       i <span class="sym">&lt;</span> <span class="num">0
</span>	    <span class="kwa">loop
</span>	       y.put<span class="sym">(</span>x.item<span class="sym">(</span>i<span class="sym">) +</span> y.item<span class="sym">(</span>i<span class="sym">),</span>i<span class="sym">)
</span>	       i <span class="sym">:=</span> i <span class="num">- 1
</span>	    <span class="kwa">end
</span>	    k <span class="sym">:=</span> k <span class="sym">+</span> <span class="num">1
</span>	 <span class="kwa">end

</span>         std_output.put_integer<span class="sym">(</span>y.item<span class="sym">(</span><span class="num">0</span><span class="sym">))
</span>         std_output.put_character<span class="sym">(</span><span class="str">' '</span><span class="sym">)
</span>         std_output.put_integer<span class="sym">(</span>y.item<span class="sym">(</span>n<span class="num">-1</span><span class="sym">))
</span>         std_output.put_character<span class="sym">(</span><span class="str">'%N'</span><span class="sym">)
</span>      <span class="kwa">end
end</span>
