<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- -*- mode: eiffel -*-
</FONT></I><I><FONT COLOR="#B22222">-- $Id: ary-se.code,v 1.2 2004-11-08 08:15:12 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">-- http://www.bagley.org/~doug/shootout/
</FONT></I>
<I><FONT COLOR="#B22222">-- Friedrich Dominicus points out that it is about twice as fast
</FONT></I><I><FONT COLOR="#B22222">-- when we substitute NATIVE_ARRAY for ARRAY.  I've commented out
</FONT></I><I><FONT COLOR="#B22222">-- my original code below and now use NATIVE_ARRAY.
</FONT></I>
<B><FONT COLOR="#A020F0">class</FONT></B> ARY

<B><FONT COLOR="#A020F0">creation</FONT></B> make

<B><FONT COLOR="#A020F0">feature</FONT></B>

<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">   make</FONT></I></B></FONT></B> <B><FONT COLOR="#A020F0">is</FONT></B>

      <B><FONT COLOR="#A020F0">local</FONT></B>
<B><FONT COLOR="#5F9EA0">         x: </FONT></B><B><FONT COLOR="#228B22">NATIVE_ARRAY</FONT></B>[<B><FONT COLOR="#228B22">INTEGER</FONT></B>];
<B><FONT COLOR="#5F9EA0">         y: </FONT></B><B><FONT COLOR="#228B22">NATIVE_ARRAY</FONT></B>[<B><FONT COLOR="#228B22">INTEGER</FONT></B>];
<I><FONT COLOR="#B22222">--	 x: ARRAY[INTEGER];
</FONT></I><I><FONT COLOR="#B22222">--	 y: ARRAY[INTEGER];
</FONT></I><B><FONT COLOR="#5F9EA0">	 i,k,n: </FONT></B><B><FONT COLOR="#228B22">INTEGER</FONT></B>;
      <B><FONT COLOR="#A020F0">do</FONT></B>
	 <B><FONT COLOR="#A020F0">if</FONT></B> argument_count <B><FONT COLOR="#5F9EA0">=</FONT></B> 1 <B><FONT COLOR="#A020F0">then</FONT></B>
	    n <B><FONT COLOR="#5F9EA0">:=</FONT></B> argument(1).to_integer
	 <B><FONT COLOR="#A020F0">else</FONT></B>
	    n <B><FONT COLOR="#5F9EA0">:=</FONT></B> 1
	 <B><FONT COLOR="#A020F0">end</FONT></B>

         x <B><FONT COLOR="#5F9EA0">:=</FONT></B> x.calloc(n);
         y <B><FONT COLOR="#5F9EA0">:=</FONT></B> y.calloc(n);
<I><FONT COLOR="#B22222">--	 !!x.make(0,n)
</FONT></I><I><FONT COLOR="#B22222">--	 !!y.make(0,n)
</FONT></I>
	 <B><FONT COLOR="#A020F0">from</FONT></B>
	    i <B><FONT COLOR="#5F9EA0">:=</FONT></B> 0
	 <B><FONT COLOR="#A020F0">until</FONT></B>
	    i <B><FONT COLOR="#5F9EA0">=</FONT></B> n
	 <B><FONT COLOR="#A020F0">loop</FONT></B>
	    x.put(i + 1, i)
	    i <B><FONT COLOR="#5F9EA0">:=</FONT></B> i + 1
	 <B><FONT COLOR="#A020F0">end</FONT></B>
	 <B><FONT COLOR="#A020F0">from</FONT></B>
	    k <B><FONT COLOR="#5F9EA0">:=</FONT></B> 0
	 <B><FONT COLOR="#A020F0">until</FONT></B>
	    k <B><FONT COLOR="#5F9EA0">=</FONT></B> 1000
	 <B><FONT COLOR="#A020F0">loop</FONT></B>
	    <B><FONT COLOR="#A020F0">from</FONT></B>
	       i <B><FONT COLOR="#5F9EA0">:=</FONT></B> n-1
	    <B><FONT COLOR="#A020F0">until</FONT></B>
	       i &lt; 0
	    <B><FONT COLOR="#A020F0">loop</FONT></B>
	       y.put(x.item(i) + y.item(i),i)
	       i <B><FONT COLOR="#5F9EA0">:=</FONT></B> i - 1
	    <B><FONT COLOR="#A020F0">end</FONT></B>
	    k <B><FONT COLOR="#5F9EA0">:=</FONT></B> k + 1
	 <B><FONT COLOR="#A020F0">end</FONT></B>

         std_output.put_integer(y.item(0))
         std_output.put_character(<B><FONT COLOR="#BC8F8F">' '</FONT></B>)
         std_output.put_integer(y.item(n-1))
         std_output.put_character('%N')
      <B><FONT COLOR="#A020F0">end</FONT></B>
<B><FONT COLOR="#A020F0">end</FONT></B></pre></td></tr></table>
