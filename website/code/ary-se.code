<span class="slc">-- -*- mode: eiffel -*-</span>
<span class="slc">-- $Id: ary-se.code,v 1.8 2005-11-16 08:07:00 bfulgham Exp $</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>

<span class="slc">-- Friedrich Dominicus points out that it is about twice as fast</span>
<span class="slc">-- when we substitute NATIVE_ARRAY for ARRAY.  I've commented out</span>
<span class="slc">-- my original code below and now use NATIVE_ARRAY.</span>

<span class="kwa">class</span> ARY

insert
	ARGUMENTS

creation <span class="sym">{</span>ANY<span class="sym">}</span>
	make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}</span>
   make <span class="kwa">is</span>
      <span class="kwa">local</span>
         x<span class="sym">:</span> NATIVE_ARRAY<span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">];</span>
         y<span class="sym">:</span> NATIVE_ARRAY<span class="sym">[</span><span class="kwb">INTEGER</span><span class="sym">];</span>
	 i<span class="sym">,</span>k<span class="sym">,</span>n<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span>
      <span class="kwa">do</span>
	 <span class="kwa">if</span> argument_count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span>
	    n <span class="sym">:=</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
	 <span class="kwa">else</span>
	    n <span class="sym">:=</span> <span class="num">1</span>
	 <span class="kwa">end</span>

         x <span class="sym">:=</span> x.<span class="kwd">calloc</span><span class="sym">(</span>n<span class="sym">);</span>
         y <span class="sym">:=</span> y.<span class="kwd">calloc</span><span class="sym">(</span>n<span class="sym">);</span>

	 <span class="kwa">from</span>
	    i <span class="sym">:=</span> <span class="num">0</span>
	 until
	    i <span class="sym">=</span> n
	 <span class="kwa">loop</span>
	    x.<span class="kwd">put</span><span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> i<span class="sym">)</span>
	    i <span class="sym">:=</span> i <span class="sym">+</span> <span class="num">1</span>
	 <span class="kwa">end</span>
	 <span class="kwa">from</span>
	    k <span class="sym">:=</span> <span class="num">0</span>
	 until
	    k <span class="sym">=</span> <span class="num">1000</span>
	 <span class="kwa">loop</span>
	    <span class="kwa">from</span>
	       i <span class="sym">:=</span> n<span class="sym">-</span><span class="num">1</span>
	    until
	       i <span class="sym">&lt;</span> <span class="num">0</span>
	    <span class="kwa">loop</span>
	       y.<span class="kwd">put</span><span class="sym">(</span>x.<span class="kwd">item</span><span class="sym">(</span>i<span class="sym">) +</span> y.<span class="kwd">item</span><span class="sym">(</span>i<span class="sym">),</span>i<span class="sym">)</span>
	       i <span class="sym">:=</span> i <span class="sym">-</span> <span class="num">1</span>
	    <span class="kwa">end</span>
	    k <span class="sym">:=</span> k <span class="sym">+</span> <span class="num">1</span>
	 <span class="kwa">end</span>

         std_output.<span class="kwd">put_integer</span><span class="sym">(</span>y.<span class="kwd">item</span><span class="sym">(</span><span class="num">0</span><span class="sym">))</span>
         std_output.<span class="kwd">put_character</span><span class="sym">(</span><span class="str">' '</span><span class="sym">)</span>
         std_output.<span class="kwd">put_integer</span><span class="sym">(</span>y.<span class="kwd">item</span><span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">))</span>
         std_output.<span class="kwd">put_character</span><span class="sym">(</span><span class="str">'%N'</span><span class="sym">)</span>
      <span class="kwa">end</span>
<span class="kwa">end</span>
