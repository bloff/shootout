<span class="com">(* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Josh Goldfoot</span>
<span class="com">*)</span>

<span class="kwa">program</span> knucleotide<span class="sym">;</span>

<span class="com">(* simple_hash available from CVS *)</span>
<span class="kwa">uses</span> simple_hash<span class="sym">,</span> SysUtils<span class="sym">,</span> Strings<span class="sym">;</span>

<span class="kwa">type</span>
   sorter      <span class="sym">=</span> <span class="kwa">record</span>
		    sequence <span class="sym">:</span> PChar<span class="sym">;</span>
		    num	     <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>
		 <span class="kwa">end</span><span class="sym">;</span>
   sorterArray <span class="sym">=</span> <span class="kwa">array of</span> sorter<span class="sym">;</span>

<span class="kwa">function</span> <span class="kwd">hash_table_size</span> <span class="sym">(</span>fl <span class="sym">:</span> dword<span class="sym">;</span> buflen <span class="sym">:</span> dword<span class="sym">):</span> dword<span class="sym">;</span>
<span class="kwa">var</span>
   maxsize1<span class="sym">,</span> maxsize2<span class="sym">,</span> r <span class="sym">:</span> dword<span class="sym">;</span>
<span class="kwa">begin</span>
   maxsize1 <span class="sym">:=</span> buflen <span class="sym">-</span> fl<span class="sym">;</span>
   maxsize2 <span class="sym">:=</span> <span class="num">4</span><span class="sym">;</span>
   <span class="kwa">while</span> <span class="sym">(</span>fl <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>maxsize2 <span class="sym">&lt;</span> maxsize1<span class="sym">)</span> <span class="kwa">do</span>
   <span class="kwa">begin</span>
      fl <span class="sym">:=</span> fl <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
      maxsize2 <span class="sym">:=</span> maxsize2 <span class="sym">*</span> <span class="num">4</span><span class="sym">;</span>
   <span class="kwa">end</span><span class="sym">;</span>
   <span class="kwa">if</span> maxsize1 <span class="sym">&lt;</span> maxsize2 <span class="kwa">then</span>
      r <span class="sym">:=</span> maxsize1
   <span class="kwa">else</span>
      r <span class="sym">:=</span> maxsize2<span class="sym">;</span>
   hash_table_size <span class="sym">:=</span> r<span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span> <span class="com">{ hash_table_size }</span>

<span class="kwa">function</span> <span class="kwd">generate_frequencies</span><span class="sym">(</span>fl<span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;</span> buffer<span class="sym">:</span> PChar<span class="sym">;</span> buflen <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">):</span> ht_pht<span class="sym">;</span>
<span class="kwa">var</span>
   ht	  <span class="sym">:</span> ht_pht<span class="sym">;</span>
   reader <span class="sym">:</span> PChar<span class="sym">;</span>
   i	  <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>
   nulled <span class="sym">:</span> <span class="kwb">char</span><span class="sym">;</span>
   found  <span class="sym">:</span> ht_pnode<span class="sym">;</span>
<span class="kwa">begin</span>
   <span class="kwa">if</span> fl <span class="sym">&lt;=</span> buflen <span class="kwa">then</span>
   <span class="kwa">begin</span>
      ht <span class="sym">:=</span> <span class="kwd">ht_create</span> <span class="sym">(</span><span class="kwd">hash_table_size</span> <span class="sym">(</span>fl<span class="sym">,</span> buflen<span class="sym">));</span>
      <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> buflen <span class="sym">-</span> fl <span class="kwa">do</span>
      <span class="kwa">begin</span>
         reader <span class="sym">:= &#64;</span>buffer<span class="sym">[</span>i<span class="sym">];</span>
         nulled <span class="sym">:=</span> reader<span class="sym">[</span>fl<span class="sym">];</span>
         reader<span class="sym">[</span>fl<span class="sym">] :=</span> <span class="esc">#0</span><span class="sym">;</span>
         found <span class="sym">:=</span> <span class="kwd">ht_find_new</span> <span class="sym">(</span>ht<span class="sym">,</span> reader<span class="sym">);</span>
         reader<span class="sym">[</span>fl<span class="sym">] :=</span> nulled<span class="sym">;</span>
         found^.val <span class="sym">:=</span> found^.val <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">end</span><span class="sym">;</span>
      generate_frequencies <span class="sym">:=</span> ht<span class="sym">;</span>
   <span class="kwa">end else</span>
      generate_frequencies <span class="sym">:=</span> <span class="kwa">nil</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span> <span class="com">{ generate_frequencies }</span>

<span class="kwa">procedure</span> <span class="kwd">sortArray</span><span class="sym">(</span><span class="kwa">var</span> s <span class="sym">:</span> sorterArray<span class="sym">;</span> size<span class="sym">:</span><span class="kwb">longint</span><span class="sym">);</span>
<span class="kwa">var</span>
   i<span class="sym">,</span>j <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>
   tmp <span class="sym">:</span> sorter<span class="sym">;</span>
<span class="kwa">begin</span>
   <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> size<span class="sym">-</span><span class="num">2</span> <span class="kwa">do</span>
      <span class="kwa">for</span> j <span class="sym">:=</span> i<span class="sym">+</span><span class="num">1</span> <span class="kwa">to</span> size<span class="sym">-</span><span class="num">1</span> <span class="kwa">do</span>
         <span class="kwa">if</span> s<span class="sym">[</span>i<span class="sym">]</span>.num <span class="sym">&lt;</span> s<span class="sym">[</span>j<span class="sym">]</span>.num <span class="kwa">then</span>
	 <span class="kwa">begin</span>
	    tmp.num <span class="sym">:=</span> s<span class="sym">[</span>i<span class="sym">]</span>.num<span class="sym">;</span>
	    tmp.sequence <span class="sym">:=</span> s<span class="sym">[</span>i<span class="sym">]</span>.sequence<span class="sym">;</span>
	    s<span class="sym">[</span>i<span class="sym">]</span>.num <span class="sym">:=</span> s<span class="sym">[</span>j<span class="sym">]</span>.num<span class="sym">;</span>
	    s<span class="sym">[</span>i<span class="sym">]</span>.sequence <span class="sym">:=</span> s<span class="sym">[</span>j<span class="sym">]</span>.sequence<span class="sym">;</span>
	    s<span class="sym">[</span>j<span class="sym">]</span>.num <span class="sym">:=</span> tmp.num<span class="sym">;</span>
	    s<span class="sym">[</span>j<span class="sym">]</span>.sequence <span class="sym">:=</span> tmp.sequence<span class="sym">;</span>
	 <span class="kwa">end</span><span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span> <span class="com">{ sortArray }</span>

<span class="kwa">procedure</span> <span class="kwd">write_frequencies</span><span class="sym">(</span>fl <span class="sym">:</span> <span class="kwb">integer</span><span class="sym">;</span> buffer <span class="sym">:</span> PChar<span class="sym">;</span> buflen <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">);</span>
<span class="kwa">var</span>
   ht	   <span class="sym">:</span> ht_pht<span class="sym">;</span>
   i<span class="sym">,</span> size <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>
   total   <span class="sym">:</span> <span class="kwb">real</span><span class="sym">;</span>
   nd	   <span class="sym">:</span> ht_pnode<span class="sym">;</span>
   s	   <span class="sym">:</span> sorterArray<span class="sym">;</span>
<span class="kwa">begin</span>
   ht <span class="sym">:=</span> <span class="kwd">generate_frequencies</span><span class="sym">(</span>fl<span class="sym">,</span> buffer<span class="sym">,</span> buflen<span class="sym">);</span>
   total <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   size <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   nd <span class="sym">:=</span> <span class="kwd">ht_first</span><span class="sym">(</span>ht<span class="sym">);</span>
   <span class="kwa">while</span> <span class="sym">(</span>nd <span class="sym">&lt;&gt;</span> <span class="kwa">nil</span><span class="sym">)</span> <span class="kwa">do</span>
   <span class="kwa">begin</span>
      total <span class="sym">:=</span> total <span class="sym">+</span> nd^.val<span class="sym">;</span>
      size <span class="sym">:=</span> size <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      nd <span class="sym">:=</span> <span class="kwd">ht_next</span><span class="sym">(</span>ht<span class="sym">);</span>
   <span class="kwa">end</span><span class="sym">;</span>
   <span class="kwd">SetLength</span><span class="sym">(</span>s<span class="sym">,</span> size<span class="sym">);</span>

   nd <span class="sym">:=</span> <span class="kwd">ht_first</span><span class="sym">(</span>ht<span class="sym">);</span>
   size <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">while</span> <span class="sym">(</span>nd <span class="sym">&lt;&gt;</span> <span class="kwa">nil</span><span class="sym">)</span> <span class="kwa">do</span>
   <span class="kwa">begin</span>
      s<span class="sym">[</span>size<span class="sym">]</span>.sequence <span class="sym">:=</span> nd^.key<span class="sym">;</span>
      <span class="kwd">strupper</span><span class="sym">(</span>s<span class="sym">[</span>size<span class="sym">]</span>.sequence<span class="sym">);</span>
      s<span class="sym">[</span>size<span class="sym">]</span>.num <span class="sym">:=</span> nd^.val<span class="sym">;</span>
      size <span class="sym">:=</span> size <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
      nd <span class="sym">:=</span> <span class="kwd">ht_next</span><span class="sym">(</span>ht<span class="sym">);</span>
   <span class="kwa">end</span><span class="sym">;</span>

   <span class="kwd">sortArray</span><span class="sym">(</span>s<span class="sym">,</span> size<span class="sym">);</span>
   <span class="kwa">for</span> i <span class="sym">:=</span> <span class="num">0</span> <span class="kwa">to</span> size <span class="sym">-</span> <span class="num">1</span> <span class="kwa">do</span>
      <span class="kwd">writeln</span><span class="sym">(</span>s<span class="sym">[</span>i<span class="sym">]</span>.sequence<span class="sym">,</span><span class="str">' '</span><span class="sym">, (</span><span class="num">100</span> <span class="sym">*</span> s<span class="sym">[</span>i<span class="sym">]</span>.num <span class="sym">/</span> total<span class="sym">):</span><span class="num">3</span><span class="sym">:</span><span class="num">3</span><span class="sym">);</span>
    writeln<span class="sym">;</span>
   <span class="com">(* ht_destroy(ht); *)</span>
<span class="kwa">end</span><span class="sym">;</span> <span class="com">{ write_frequencies }</span>

<span class="kwa">procedure</span> <span class="kwd">write_count</span><span class="sym">(</span>searchFor <span class="sym">:</span> PChar<span class="sym">;</span> buffer <span class="sym">:</span> PChar<span class="sym">;</span> buflen <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">);</span>
<span class="kwa">var</span>
   ht <span class="sym">:</span> ht_pht<span class="sym">;</span>
   nd <span class="sym">:</span> ht_pnode<span class="sym">;</span>
<span class="kwa">begin</span>
   ht <span class="sym">:=</span> <span class="kwd">generate_frequencies</span> <span class="sym">(</span><span class="kwd">strlen</span> <span class="sym">(</span>searchFor<span class="sym">),</span> buffer<span class="sym">,</span> buflen<span class="sym">);</span>
   nd <span class="sym">:=</span> <span class="kwd">ht_find</span><span class="sym">(</span>ht<span class="sym">,</span> searchFor<span class="sym">);</span>
   <span class="kwa">if</span> <span class="sym">(</span>nd <span class="sym">&lt;&gt;</span> <span class="kwa">nil</span><span class="sym">)</span> <span class="kwa">then</span>
      <span class="kwd">write</span><span class="sym">(</span>nd^.val<span class="sym">)</span>
   <span class="kwa">else</span>
      <span class="kwd">write</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
   <span class="kwd">strupper</span><span class="sym">(</span>searchFor<span class="sym">);</span>
   <span class="kwd">writeln</span><span class="sym">(</span><span class="esc">#9</span><span class="sym">,</span> searchFor<span class="sym">);</span>
   <span class="com">(*ht_destroy(ht);*)</span>
<span class="kwa">end</span><span class="sym">;</span> <span class="com">{ write_count }</span>

<span class="kwa">procedure</span> main<span class="sym">;</span>
<span class="kwa">var</span>
   c		  <span class="sym">:</span> <span class="kwb">char</span><span class="sym">;</span>
   buffer<span class="sym">,</span> x	  <span class="sym">:</span> PChar<span class="sym">;</span>
   buflen<span class="sym">,</span> seqlen <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>
   line		  <span class="sym">:</span> <span class="kwa">String</span><span class="sym">;</span>
<span class="kwa">begin</span>
   seqlen <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">repeat</span>
      <span class="kwd">readln</span><span class="sym">(</span>line<span class="sym">)</span>
   <span class="kwa">until</span> <span class="sym">(</span>line<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> <span class="str">'&gt;'</span><span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>line<span class="sym">[</span><span class="num">2</span><span class="sym">] =</span> <span class="str">'T'</span><span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>line<span class="sym">[</span><span class="num">3</span><span class="sym">] =</span> <span class="str">'H'</span><span class="sym">);</span>
   buflen <span class="sym">:=</span> <span class="num">13000</span><span class="sym">;</span>
   buffer <span class="sym">:=</span> <span class="kwd">stralloc</span><span class="sym">(</span>buflen <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
   x <span class="sym">:=</span> buffer<span class="sym">;</span>
   <span class="kwa">repeat</span>
      <span class="kwd">readln</span><span class="sym">(</span>x<span class="sym">);</span>
      c <span class="sym">:=</span> x<span class="sym">[</span><span class="num">0</span><span class="sym">];</span>
      <span class="kwa">if</span> <span class="sym">(</span>c <span class="sym">&lt;&gt;</span> <span class="str">'&gt;'</span><span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>c <span class="sym">&lt;&gt;</span> <span class="str">';'</span><span class="sym">)</span> <span class="kwa">then</span>
      <span class="kwa">begin</span>
	 seqlen <span class="sym">:=</span> seqlen <span class="sym">+</span> <span class="num">60</span><span class="sym">;</span>
	 <span class="kwa">if</span> <span class="sym">(</span>seqlen <span class="sym">+</span> <span class="num">80</span> <span class="sym">&gt;</span> buflen<span class="sym">)</span> <span class="kwa">then</span>
	 <span class="kwa">begin</span>
	    buflen <span class="sym">:=</span> buflen <span class="sym">*</span> <span class="num">10</span><span class="sym">;</span>
	    <span class="kwd">reallocmem</span><span class="sym">(</span>buffer<span class="sym">,</span> buflen <span class="sym">+</span> <span class="num">1</span><span class="sym">);</span>
	    x <span class="sym">:= &#64;(</span>buffer<span class="sym">[</span>seqlen<span class="sym">])</span>
	 <span class="kwa">end</span>
	 <span class="kwa">else</span>
	    x <span class="sym">:= &#64;(</span>x<span class="sym">[</span><span class="num">60</span><span class="sym">]);</span>
	 x<span class="sym">[</span><span class="num">0</span><span class="sym">] :=</span> <span class="esc">#0</span><span class="sym">;</span>
      <span class="kwa">end</span><span class="sym">;</span>
   <span class="kwa">until</span> eof<span class="sym">;</span>

   seqlen <span class="sym">:=</span> <span class="kwd">strlen</span><span class="sym">(</span>buffer<span class="sym">);</span>

   <span class="kwd">write_frequencies</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> buffer<span class="sym">,</span> seqlen<span class="sym">);</span>
   <span class="kwd">write_frequencies</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span> buffer<span class="sym">,</span> seqlen<span class="sym">);</span>
   <span class="kwd">write_count</span><span class="sym">(</span><span class="str">'ggt'</span><span class="sym">,</span> buffer<span class="sym">,</span> seqlen<span class="sym">);</span>
   <span class="kwd">write_count</span><span class="sym">(</span><span class="str">'ggta'</span><span class="sym">,</span> buffer<span class="sym">,</span> seqlen<span class="sym">);</span>
   <span class="kwd">write_count</span><span class="sym">(</span><span class="str">'ggtatt'</span><span class="sym">,</span> buffer<span class="sym">,</span> seqlen<span class="sym">);</span>
   <span class="kwd">write_count</span><span class="sym">(</span><span class="str">'ggtattttaatt'</span><span class="sym">,</span> buffer<span class="sym">,</span> seqlen<span class="sym">);</span>
   <span class="kwd">write_count</span><span class="sym">(</span><span class="str">'ggtattttaatttatagt'</span><span class="sym">,</span> buffer<span class="sym">,</span> seqlen<span class="sym">);</span>
   <span class="kwd">strdispose</span><span class="sym">(</span>buffer<span class="sym">);</span>
<span class="kwa">end</span><span class="sym">;</span> <span class="com">{ main }</span>


<span class="kwa">begin</span>
   main<span class="sym">;</span>
<span class="kwa">end</span>.
