<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: wordfreq-poplisp.code,v 1.8 2006-09-20 05:52:51 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; From Bulent Murtezaoglu, based on code from Andrew McDowell</span>

<span class="slc">;;; The Block/Buffering I/O code is adapted from material posted to comp.lang.lisp</span>
<span class="slc">;;; by Thomas Kirk &lt;tk&#64;research.att.com&gt;.</span>
<span class="slc">;;; Archived here: http://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/lang/lisp/code/io/fast_io/fast_io.txt</span>
<span class="slc">;;;</span>

<span class="sym">(</span>declaim <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>space <span class="num">0</span><span class="sym">) (</span>compilation<span class="sym">-</span>speed <span class="num">0</span><span class="sym">)))</span>


  <span class="sym">(</span>let<span class="sym">* ((</span>start <span class="num">0</span><span class="sym">)</span>
	 <span class="sym">(</span>current <span class="num">0</span><span class="sym">)</span>
	 <span class="sym">(</span>end <span class="num">0</span><span class="sym">)</span>
	 <span class="sym">(</span>eof nil<span class="sym">)</span>
	 <span class="sym">(</span>inputbuffer <span class="sym">(</span>make<span class="sym">-</span>array <span class="num">4096</span> <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="str">'(unsigned-byte 8))))</span>
<span class="str">    (declare (type (simple-array (unsigned-byte 8)) inputbuffer)</span>
<span class="str">	     (fixnum start end)</span>
<span class="str">	     (inline code-char)</span>
<span class="str">	     (type (unsigned-byte 8) current))</span>
<span class="str">    (labels</span>
<span class="str">	((get-char () ;;don'</span>t do this at home works through side effect unless eof
		   <span class="sym">(</span>when <span class="sym">(=</span> start end<span class="sym">)</span>
		     <span class="sym">(</span>setf start <span class="num">0</span><span class="sym">)</span>
		     <span class="sym">(</span>setf end <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>sequence inputbuffer <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*))</span>
		     <span class="sym">(</span>when <span class="sym">(</span><span class="kwa">zerop</span> end<span class="sym">)</span>
		       <span class="sym">(</span>setf eof t<span class="sym">)</span>
		       <span class="sym">(</span>return<span class="sym">-</span>from get<span class="sym">-</span>char nil<span class="sym">)))</span>
		   <span class="sym">(</span>setf current <span class="sym">(</span>aref inputbuffer start<span class="sym">))</span>
		   <span class="sym">(</span>incf start<span class="sym">))</span>

 	 <span class="sym">(</span>word<span class="sym">-</span>constituent<span class="sym">-</span>p <span class="sym">()</span> <span class="slc">;; side effects current rets t if word-constituent</span>
			     <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(&gt;=</span> current <span class="num">97</span><span class="sym">) (&lt;=</span> current <span class="num">122</span><span class="sym">))</span>
				   <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(&gt;=</span> current <span class="num">65</span><span class="sym">) (&lt;=</span> current <span class="num">90</span><span class="sym">)</span>
					<span class="sym">(</span>incf current <span class="num">32</span><span class="sym">))))</span>
	 <span class="sym">(</span>reader <span class="sym">(</span>buffer<span class="sym">)</span>
		 <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> simple<span class="sym">-</span>base<span class="sym">-</span>string buffer<span class="sym">))</span>
		 <span class="sym">(</span>let<span class="sym">* ((</span>size <span class="sym">(</span><span class="kwa">length</span> buffer<span class="sym">))</span>
			<span class="sym">(</span>fill<span class="sym">-</span>ptr <span class="num">0</span><span class="sym">))</span>
		   <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>integer <span class="num">0 1000</span><span class="sym">)</span>  size fill<span class="sym">-</span>ptr<span class="sym">))</span>
		   <span class="sym">(</span>loop <span class="kwa">while</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span>get<span class="sym">-</span>char<span class="sym">) (</span>return<span class="sym">-</span>from reader buffer<span class="sym">))</span>
				    <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>word<span class="sym">-</span>constituent<span class="sym">-</span>p<span class="sym">))))</span>
		   <span class="sym">(</span>loop
		     <span class="sym">(</span>when <span class="sym">(=</span> fill<span class="sym">-</span>ptr size<span class="sym">)</span>
		       <span class="sym">(</span>let <span class="sym">((</span>new<span class="sym">-</span>buffer
			      <span class="sym">(</span>make<span class="sym">-</span>string <span class="sym">(</span>the fixnum
					     <span class="sym">(</span>setf size <span class="sym">(</span>the fixnum <span class="sym">(+</span> fill<span class="sym">-</span>ptr <span class="num">5</span><span class="sym">)))))))</span>
			 <span class="sym">(</span>setf <span class="sym">(</span>subseq <span class="sym">(</span>the simple<span class="sym">-</span>base<span class="sym">-</span>string new<span class="sym">-</span>buffer<span class="sym">)</span> <span class="num">0</span> fill<span class="sym">-</span>ptr<span class="sym">)</span>
			       buffer<span class="sym">)</span>
			 <span class="sym">(</span>setf buffer new<span class="sym">-</span>buffer<span class="sym">)))</span>
		     <span class="sym">(</span>setf <span class="sym">(</span>schar buffer fill<span class="sym">-</span>ptr<span class="sym">) (</span>code<span class="sym">-</span>char current<span class="sym">))</span>
		     <span class="sym">(</span>incf fill<span class="sym">-</span>ptr<span class="sym">)</span>
		     <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>get<span class="sym">-</span>char<span class="sym">)</span>
			 <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>word<span class="sym">-</span>constituent<span class="sym">-</span>p<span class="sym">))</span>
			     <span class="sym">(</span>return<span class="sym">))</span>
		       <span class="sym">(</span>return<span class="sym">)))</span>
		   <span class="sym">(</span>lisp<span class="sym">::</span>shrink<span class="sym">-</span>vector buffer fill<span class="sym">-</span>ptr<span class="sym">))))</span>

      <span class="sym">(</span>let<span class="sym">* ((</span>h <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="sym">:</span>test <span class="str">'equal :size 3380 :rehash-threshold 1.0))</span>
<span class="str">	     (buffer (make-string 10)))</span>
<span class="str">	(declare (inline gethash maphash))</span>
<span class="str">	(declare (type simple-base-string buffer))</span>
<span class="str">	(loop</span>
<span class="str">	  (setf buffer (reader buffer))</span>
<span class="str">	  (if (not eof)</span>
<span class="str">	      (if (= 1 (the fixnum (incf (the fixnum (gethash buffer h 0)))))</span>
<span class="str">		  (setf buffer (make-string 10)));; only cons if used</span>
<span class="str">	    (return)))</span>
<span class="str">	;; hast table =&gt; list</span>
<span class="str">	(let ((l '</span><span class="sym">()))</span>
	  <span class="sym">(</span>maphash #<span class="str">'(lambda (key val)</span>
<span class="str">		       (push (cons key val) l))</span>
<span class="str">		   h)</span>
<span class="str">	  ;; sort the list</span>
<span class="str">	  (setf l (sort l #'</span><span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>v1 v2<span class="sym">)</span>
			      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt; (</span>the fixnum <span class="sym">(</span><span class="kwa">cdr</span> v1<span class="sym">)) (</span>the fixnum <span class="sym">(</span><span class="kwa">cdr</span> v2<span class="sym">)))</span>
				  t
				<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(= (</span>the fixnum <span class="sym">(</span><span class="kwa">cdr</span> v1<span class="sym">)) (</span>the fixnum <span class="sym">(</span><span class="kwa">cdr</span> v2<span class="sym">)))</span>
				    <span class="sym">(</span>string<span class="sym">-</span>lessp <span class="sym">(</span><span class="kwa">car</span> v2<span class="sym">) (</span><span class="kwa">car</span> v1<span class="sym">))</span>
				  nil<span class="sym">)))))</span>

	  <span class="slc">;; output the list of pairs</span>
	  <span class="sym">(</span><span class="kwa">mapcar</span> #<span class="str">'(lambda (p)</span>
<span class="str">		      (format t &quot;~7D	~A~&amp;&quot; (cdr p) (car p)))</span>
<span class="str">		  l)))))</span>
