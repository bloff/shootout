<span class="sym">!</span> Ackermann function implementation
<span class="sym">!</span> Simon Geard<span class="sym">,</span> <span class="num">30</span><span class="sym">/</span><span class="num">11</span><span class="sym">/</span><span class="num">04
</span><span class="sym">!
!</span> Building info<span class="sym">.
! ==============
!
!</span> Linux  <span class="sym">-</span> <span class="kwa">using</span> the Intel Fortran90 compiler<span class="sym">:
!
!</span>          ifort ackermann<span class="sym">.</span>f90 <span class="sym">-</span>O3 <span class="sym">-</span><span class="kwb">static</span><span class="sym">-</span>libcxa <span class="sym">-</span>o ackermann
<span class="sym">!
!</span> WinXP  <span class="sym">-</span> Compaq Visual Fortran <span class="num">6.6c
</span><span class="sym">!
!</span>          f90 ackermann<span class="sym">.</span>f90 <span class="sym">/</span>link <span class="sym">/</span>libpath<span class="sym">:</span><span class="str">&quot;d:</span><span class="esc">\P</span><span class="str">rogram Files</span><span class="esc">\M</span><span class="str">icrosoft Visual Studio</span><span class="esc">\d</span><span class="str">f98</span><span class="esc">\l</span><span class="str">ib&quot;</span>
<span class="sym">!
!</span> Cygwin <span class="sym">-</span> g95 compiler
<span class="sym">!
!</span>          g95 ackermann<span class="sym">.</span>f90 <span class="sym">-</span>o ackermann<span class="sym">.</span>exe
<span class="sym">!
</span>program ackermann
  implicit none
  integer result<span class="sym">,</span> num
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">2</span><span class="sym">)</span> argv

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)
</span>  read<span class="sym">(</span>argv<span class="sym">,*)</span> num
  result <span class="sym">=</span> ack<span class="sym">(</span><span class="num">3</span><span class="sym">,</span>num<span class="sym">)
</span>  write<span class="sym">(*,</span><span class="str">'(2(a,i0))'</span><span class="sym">)</span> <span class="str">'Ack(3,'</span><span class="sym">,</span>num<span class="sym">,</span><span class="str">'): '</span><span class="sym">,</span>result

contains

  <span class="sym">!</span> The Ackermann function itself
  recursive integer function ack<span class="sym">(</span>m<span class="sym">,</span> n<span class="sym">)</span> result<span class="sym">(</span>iack<span class="sym">)
</span>    integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> m<span class="sym">,</span>n
    <span class="kwa">if</span> <span class="sym">(</span>m <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> then
       iack <span class="sym">=</span> n<span class="sym">+</span><span class="num">1
</span>    <span class="kwa">else if</span><span class="sym">(</span>n <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> then
       iack <span class="sym">=</span> ack<span class="sym">(</span>m<span class="num">-1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)
</span>    <span class="kwa">else
</span>       iack <span class="sym">=</span> ack<span class="sym">(</span>m<span class="num">-1</span><span class="sym">,</span> ack<span class="sym">(</span>m<span class="sym">,</span> n<span class="num">-1</span><span class="sym">))
</span>    end <span class="kwa">if
</span>  end function ack

end program ackermann

