<span class="slc">! -*- mode: f90 -*-</span>
<span class="slc">!</span>
<span class="slc">! $Id: ackermann-ifc.code,v 1.9 2005-12-31 16:45:30 bfulgham Exp $ ; $Name:  $</span>
<span class="slc">!</span>
<span class="slc">! Ackermann function implementation</span>
<span class="slc">! Simon Geard, 30/11/04</span>
<span class="slc">!</span>
<span class="slc">! Building info.</span>
<span class="slc">! ==============</span>
<span class="slc">!</span>
<span class="slc">! Linux  - using the Intel Fortran90 compiler:</span>
<span class="slc">!</span>
<span class="slc">!          ifort ackermann.f90 -O3 -static-libcxa -o ackermann</span>
<span class="slc">!</span>
<span class="slc">!</span>
program ackermann
  implicit none
  integer result<span class="sym">,</span> num
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">2</span><span class="sym">)</span> argv

  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)</span>
  read<span class="sym">(</span>argv<span class="sym">,*)</span> num
  result <span class="sym">=</span> ack<span class="sym">(</span><span class="num">3</span><span class="sym">,</span>num<span class="sym">)</span>
  write<span class="sym">(*,</span><span class="str">'(2(a,i0))'</span><span class="sym">)</span> <span class="str">'Ack(3,'</span><span class="sym">,</span>num<span class="sym">,</span><span class="str">'): '</span><span class="sym">,</span>result

contains

  <span class="slc">! The Ackermann function itself</span>
  recursive integer function ack<span class="sym">(</span>m<span class="sym">,</span> n<span class="sym">)</span> result<span class="sym">(</span>iack<span class="sym">)</span>
    integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> m<span class="sym">,</span>n
    if <span class="sym">(</span>m <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> then
       iack <span class="sym">=</span> n<span class="sym">+</span><span class="num">1</span>
    else if<span class="sym">(</span>n <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> then
       iack <span class="sym">=</span> ack<span class="sym">(</span>m<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
    else
       iack <span class="sym">=</span> ack<span class="sym">(</span>m<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> ack<span class="sym">(</span>m<span class="sym">,</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">))</span>
    end if
  end function ack

end program ackermann
