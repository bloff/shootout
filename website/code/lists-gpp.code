<span class="slc">// -*- mode: c++ -*-</span>
<span class="slc">// $Id: lists-gpp.code,v 1.17 2006-09-30 16:39:22 bfulgham Exp $</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// from Bill Lear, with improvements by Thomas Hyer</span>
<span class="slc">//</span>
<span class="slc">// 08-16-2004:  Revised by the Gwydion Dylan Maintainers to use</span>
<span class="slc">//   the Deque class, which provides a realistic implementation</span>
<span class="slc">//   of this test (i.e., with good performance).</span>

<span class="dir">#include &lt;algorithm&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;deque&gt;</span>
<span class="dir">#include &lt;numeric&gt;</span>
<span class="dir">#if (defined(__INTEL_COMPILER))</span>
<span class="dir">#define __gnu_cxx std</span>
<span class="dir">#else</span>
<span class="dir">#include &lt;ext/numeric&gt;</span>
<span class="dir">#endif</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwb">const size_t</span> SIZE <span class="sym">=</span> <span class="num">10000</span><span class="sym">;</span>

<span class="kwb">size_t</span> <span class="kwd">test_lists</span><span class="sym">() {</span>
    std<span class="sym">::</span>deque<span class="sym">&lt;</span><span class="kwb">size_t</span><span class="sym">&gt;</span> <span class="kwd">li1</span><span class="sym">(</span>SIZE<span class="sym">);</span>

    __gnu_cxx<span class="sym">::</span><span class="kwd">iota</span><span class="sym">(</span>li1<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> li1<span class="sym">.</span><span class="kwd">end</span><span class="sym">(),</span> <span class="num">1</span><span class="sym">);</span>

    std<span class="sym">::</span>deque<span class="sym">&lt;</span><span class="kwb">size_t</span><span class="sym">&gt;</span> <span class="kwd">li2</span><span class="sym">(</span>li1<span class="sym">),</span> li3<span class="sym">;</span>

    <span class="kwa">while</span> <span class="sym">(!</span> li2<span class="sym">.</span><span class="kwd">empty</span><span class="sym">()) {</span>
        li3<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span>li2<span class="sym">.</span><span class="kwd">front</span><span class="sym">());</span>
        li2<span class="sym">.</span><span class="kwd">pop_front</span><span class="sym">();</span>
    <span class="sym">}</span>

    <span class="kwa">while</span> <span class="sym">(!</span> li3<span class="sym">.</span><span class="kwd">empty</span><span class="sym">()) {</span>
        li2<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span>li3<span class="sym">.</span><span class="kwd">back</span><span class="sym">());</span>
        li3<span class="sym">.</span><span class="kwd">pop_back</span><span class="sym">();</span>
    <span class="sym">}</span>

    <span class="slc">//li1.reverse();</span>
    <span class="kwd">reverse</span><span class="sym">(</span>li1<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> li1<span class="sym">.</span><span class="kwd">end</span><span class="sym">());</span>

    <span class="kwa">return</span> <span class="sym">(</span>li1<span class="sym">.</span><span class="kwd">front</span><span class="sym">() ==</span> SIZE<span class="sym">) &amp;&amp; (</span>li1 <span class="sym">==</span> li2<span class="sym">)</span> ? li1<span class="sym">.</span><span class="kwd">size</span><span class="sym">() :</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> argv<span class="sym">[]) {</span>
    <span class="kwb">size_t</span> ITER <span class="sym">= (</span>argc <span class="sym">==</span> <span class="num">2</span> ? <span class="sym">(</span><span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) &lt;</span> <span class="num">1</span> ? <span class="num">1</span> <span class="sym">:</span> <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])):</span> <span class="num">1</span><span class="sym">);</span>

    <span class="kwb">size_t</span> result <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span>ITER <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {</span>
        result <span class="sym">=</span> <span class="kwd">test_lists</span><span class="sym">();</span>
        <span class="sym">--</span>ITER<span class="sym">;</span>
    <span class="sym">}</span>

    std<span class="sym">::</span>cout <span class="sym">&lt;&lt;</span> result <span class="sym">&lt;&lt;</span> std<span class="sym">::</span>endl<span class="sym">;</span>
<span class="sym">}</span>
