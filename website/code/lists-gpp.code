<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// -*- mode: c++ -*-
</FONT></I><I><FONT COLOR="#B22222">// $Id: lists-gpp.code,v 1.1 2004-11-08 14:59:28 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">// from Bill Lear, with improvements by Thomas Hyer
</FONT></I><I><FONT COLOR="#B22222">//
</FONT></I><I><FONT COLOR="#B22222">// 08-16-2004:  Revised by the Gwydion Dylan Maintainers to use
</FONT></I><I><FONT COLOR="#B22222">//   the Deque class, which provides a realistic implementation
</FONT></I><I><FONT COLOR="#B22222">//   of this test (i.e., with good performance).
</FONT></I>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;algorithm&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;iostream&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;deque&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;numeric&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;ext/numeric&gt;</FONT></B>

using namespace std;

<B><FONT COLOR="#228B22">const</FONT></B> size_t SIZE = 10000;

size_t <B><FONT COLOR="#0000FF">test_lists</FONT></B>() {
    <B><FONT COLOR="#5F9EA0">std</FONT></B>::deque&lt;size_t&gt; li1(SIZE);

    <B><FONT COLOR="#5F9EA0">__gnu_cxx</FONT></B>::iota(li1.begin(), li1.end(), 1);

    <B><FONT COLOR="#5F9EA0">std</FONT></B>::deque&lt;size_t&gt; li2(li1), li3;

    <B><FONT COLOR="#A020F0">while</FONT></B> (! li2.empty()) {
        li3.push_back(li2.front());
        li2.pop_front();
    }

    <B><FONT COLOR="#A020F0">while</FONT></B> (! li3.empty()) {
        li2.push_back(li3.back());
        li3.pop_back();
    }

    <I><FONT COLOR="#B22222">//li1.reverse();
</FONT></I>    reverse(li1.begin(), li1.end());

    <B><FONT COLOR="#A020F0">return</FONT></B> (li1.front() == SIZE) &amp;&amp; (li1 == li2) ? li1.size() : 0;
}

<B><FONT COLOR="#228B22">int</FONT></B> <B><FONT COLOR="#0000FF">main</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> argc, <B><FONT COLOR="#228B22">char</FONT></B>* argv[]) {
    size_t ITER = (argc == 2 ? (atoi(argv[1]) &lt; 1 ? 1 : atoi(argv[1])): 1);

    size_t result = 0;
    <B><FONT COLOR="#A020F0">while</FONT></B> (ITER &gt; 0) {
        result = test_lists();
        --ITER;
    }

    <B><FONT COLOR="#5F9EA0">std</FONT></B>::cout &lt;&lt; result &lt;&lt; std::endl;
}</pre></td></tr></table>
