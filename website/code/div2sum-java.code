<span class="slc">// $Id: div2sum-java.code,v 1.1 2004-12-17 07:53:50 bfulgham Exp $ 
</span><span class="slc">// http://shootout.alioth.debian.org/ 
</span><span class="slc">// Contributed by Isaac Gouy 
</span>
 <span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;
 
 </span><span class="kwa">public class</span> div2sum <span class="sym">{
 </span>   <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[]) {
 </span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
 
       </span>      <span class="kwb">int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;
       </span>      <span class="kwc">LinkedList</span> a0 <span class="sym">=</span> createList<span class="sym">(</span><span class="num">5000</span><span class="sym">);
 </span>      <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">){
 </span>         sum <span class="sym">+= (</span>iterativeDiv2<span class="sym">((</span><span class="kwc">LinkedList</span><span class="sym">)</span>a0<span class="sym">.</span>clone<span class="sym">())).</span>size<span class="sym">() +
                 (</span>recursiveDiv2<span class="sym">((</span><span class="kwc">LinkedList</span><span class="sym">)</span>a0<span class="sym">.</span>clone<span class="sym">())).</span>size<span class="sym">();
           </span>         a0<span class="sym">.</span>removeFirst<span class="sym">();
            }
                   </span>      <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span> sum <span class="sym">);
          }
 
 </span>   <span class="kwa">public static</span> <span class="kwc">LinkedList</span> createList<span class="sym">(</span><span class="kwb">int</span> n<span class="sym">) {
 </span>	   <span class="kwc">LinkedList</span> a <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
 </span>	   <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> n<span class="sym">;</span> i<span class="sym">++) {
 </span>	      a<span class="sym">.</span>addLast<span class="sym">(</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">() );
 	   }
    </span>      <span class="kwa">return</span> a<span class="sym">;
    }
 
 </span>   <span class="kwa">public static</span> <span class="kwc">LinkedList</span> iterativeDiv2 <span class="sym">(</span><span class="kwc">LinkedList</span> a<span class="sym">) {
 </span>	   <span class="kwc">LinkedList</span> b <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">LinkedList</span><span class="sym">();
       </span>	   <span class="kwa">while</span> <span class="sym">(!</span>a<span class="sym">.</span>isEmpty<span class="sym">()) {
 </span>	      b<span class="sym">.</span>addLast<span class="sym">(</span> a<span class="sym">.</span>removeFirst<span class="sym">() );
 </span>	      <span class="kwa">if</span> <span class="sym">(!</span>a<span class="sym">.</span>isEmpty<span class="sym">())</span> a<span class="sym">.</span>removeFirst<span class="sym">();
  	   }
 </span>	   <span class="kwa">return</span> b<span class="sym">;
    }
 
             </span>   <span class="kwa">public static</span> <span class="kwc">LinkedList</span> recursiveDiv2 <span class="sym">(</span><span class="kwc">LinkedList</span> a<span class="sym">) {
 </span>      <span class="kwa">if</span> <span class="sym">(</span>a<span class="sym">.</span>isEmpty<span class="sym">()){</span> <span class="kwa">return new</span> <span class="kwc">LinkedList</span><span class="sym">(); }
 
    </span>      <span class="kwc">Object</span> o <span class="sym">=</span> a<span class="sym">.</span>removeFirst<span class="sym">();
 </span>      <span class="kwa">if</span> <span class="sym">(!</span>a<span class="sym">.</span>isEmpty<span class="sym">()){</span> a<span class="sym">.</span>removeFirst<span class="sym">(); }
       </span>	   <span class="kwc">LinkedList</span> temp <span class="sym">=</span> recursiveDiv2<span class="sym">(</span>a<span class="sym">);
 </span>	   temp<span class="sym">.</span>addFirst<span class="sym">(</span>o<span class="sym">);
 </span>	   <span class="kwa">return</span> temp<span class="sym">;
                       }
            }</span> 
