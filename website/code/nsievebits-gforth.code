\ The Great Computer Language Shootout
\ http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/
</span>\
\ contributed by Ian Osgood

\ read NUM from last command line argument
<span class="num">0</span><span class="sym">.</span> argc &#64; <span class="num">1</span><span class="sym">-</span> arg <span class="sym">&gt;</span>number <span class="num">2d</span>rop drop <span class="num">2</span> max constant NUM

<span class="sym">:</span> bit<span class="sym">-</span>mask <span class="sym">(</span> n <span class="sym">--</span> addr mask <span class="sym">)
</span>  dup <span class="num">5</span> rshift cells here <span class="sym">+</span>  <span class="num">1</span> rot <span class="num">31</span> <span class="kwa">and</span> lshift <span class="sym">;

:</span> bit<span class="sym">-</span>on? <span class="sym">(</span> n <span class="sym">--</span> f <span class="sym">)</span> bit<span class="sym">-</span>mask swap &#64; <span class="kwa">and</span> <span class="sym">;

:</span> bit<span class="sym">-</span>off <span class="sym">(</span> n <span class="sym">-- )</span> bit<span class="sym">-</span>mask invert over &#64; <span class="kwa">and</span> swap <span class="sym">! ;

:</span> sieve <span class="sym">(</span> size <span class="sym">--</span> n <span class="sym">)
</span>  here over <span class="num">7</span> <span class="sym">+</span> <span class="num">8</span> <span class="sym">/ -</span><span class="num">1</span> fill
  <span class="num">0</span> over <span class="num">2</span> <span class="kwa">do
</span>    i bit<span class="sym">-</span>on? <span class="kwa">if</span> <span class="num">1</span><span class="sym">+
</span>      over i <span class="num">2</span><span class="sym">*</span> over min ?<span class="kwa">do
</span>        i bit<span class="sym">-</span>off
      j <span class="sym">+</span>loop
    then
  loop nip <span class="sym">;

</span>\ count primes up to <span class="num">2</span>^n<span class="sym">*</span><span class="num">10000
</span><span class="sym">:</span> test <span class="sym">(</span> n <span class="sym">-- )
</span>  <span class="num">1</span> swap lshift <span class="num">10000</span> <span class="sym">*
  .</span><span class="str">&quot; Primes up to &quot;</span> dup <span class="num">8</span> u<span class="sym">.</span>r sieve <span class="num">8</span> u<span class="sym">.</span>r cr <span class="sym">;

</span>\ run sieve <span class="kwa">for</span> N<span class="sym">,</span> N<span class="num">-1</span><span class="sym">,</span> N<span class="num">-2
</span>  NUM test  NUM <span class="num">1</span><span class="sym">-</span> test  NUM <span class="num">2</span> <span class="sym">-</span> test

bye  \ done<span class="sym">!
</span>
