#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="sym">-</span>e main <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="slc">;;; $Id: hash2-guile.code,v 1.7 2005-11-06 23:11:13 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="sym">-</span><span class="num">9</span> format<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">))</span>
	 <span class="sym">(</span>hash1 <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="num">10000</span><span class="sym">))</span>
	 <span class="sym">(</span>hash2 <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="num">10000</span><span class="sym">)))</span>
    <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
	<span class="sym">((=</span> i <span class="num">10000</span><span class="sym">))</span>
      <span class="sym">(</span>hash<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> hash1 <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span> <span class="str">&quot;foo_&quot;</span> <span class="sym">(</span>number<span class="sym">-&gt;</span>string i <span class="num">10</span><span class="sym">))</span> i<span class="sym">))</span>
    <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
	<span class="sym">((=</span> i n<span class="sym">))</span>
      <span class="sym">(</span>hash<span class="sym">-</span>fold <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>key val init<span class="sym">)</span>
		   <span class="sym">(</span>hash<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> hash2 key <span class="sym">(+ (</span>hash<span class="sym">-</span>ref hash2 key <span class="num">0</span><span class="sym">)</span>
					   <span class="sym">(</span>hash<span class="sym">-</span>ref hash1 key<span class="sym">))))</span>
		 <span class="str">'() hash1))</span>
<span class="str">    (display (format &quot;~D ~D ~D ~D</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="str">		     (hash-ref hash1 &quot;foo_1&quot;)</span>
<span class="str">		     (hash-ref hash1 &quot;foo_9999&quot;)</span>
<span class="str">		     (hash-ref hash2 &quot;foo_1&quot;)</span>
<span class="str">		     (hash-ref hash2 &quot;foo_9999&quot;)))))</span>
