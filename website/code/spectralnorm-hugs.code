<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">-- Contributed by Greg Buchholz
</span>
<span class="kwa">import</span> Data.Array.Unboxed
<span class="kwa">import</span> System<span class="sym">(</span>getArgs<span class="sym">)
</span><span class="kwa">import</span> Numeric

main <span class="sym">=</span> <span class="kwa">do
</span>        <span class="sym">[</span>arg<span class="sym">] &lt;-</span> getArgs
        <span class="kwa">let</span> n <span class="sym">= (</span>read arg<span class="sym">) -</span> <span class="num">1
</span>        <span class="kwa">let</span> init <span class="sym">=</span> listArray <span class="sym">(</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">) (</span>repeat <span class="num">1.0</span><span class="sym">)
</span>        <span class="kwa">let</span> <span class="sym">(</span>v<span class="sym">:</span>u<span class="sym">:</span>rest<span class="sym">) =</span> drop <span class="num">19</span> $ iterate <span class="sym">(</span>eval_AtA_times_u n<span class="sym">)</span> init
        <span class="kwa">let</span> vBv <span class="sym">=</span> sum <span class="sym">[(</span>u<span class="sym">!</span>i<span class="sym">)*(</span>v<span class="sym">!</span>i<span class="sym">) |</span>i<span class="sym">&lt;-[</span><span class="num">0</span>..n<span class="sym">]]
</span>        <span class="kwa">let</span> vv  <span class="sym">=</span> sum <span class="sym">[(</span>v<span class="sym">!</span>i<span class="sym">)*(</span>v<span class="sym">!</span>i<span class="sym">) |</span>i<span class="sym">&lt;-[</span><span class="num">0</span>..n<span class="sym">]]
</span>        putStrLn $ showFFloat <span class="sym">(</span>Just <span class="num">9</span><span class="sym">) (</span>sqrt <span class="sym">(</span>vBv<span class="sym">/</span>vv<span class="sym">))</span> <span class="str">&quot;&quot;</span>

eval_AtA_times_u n u <span class="sym">=</span> eval_At_times_u n v
    <span class="kwa">where</span> v <span class="sym">=</span> eval_A_times_u n u

eval_A x y <span class="sym">=</span> <span class="num">1.0</span><span class="sym">/((</span>i<span class="sym">+</span>j<span class="sym">)*(</span>i<span class="sym">+</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)/</span><span class="num">2</span><span class="sym">+</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)
</span>    <span class="kwa">where</span> i <span class="sym">=</span> fromIntegral x
          j <span class="sym">=</span> fromIntegral y

eval_A_times_u <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> UArray <span class="kwb">Int Double</span> <span class="sym">-&gt;</span> UArray <span class="kwb">Int Double
</span>eval_A_times_u n u <span class="sym">=</span> accumArray <span class="sym">(+)</span> <span class="num">0</span> <span class="sym">(</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">)
                     [(</span>i<span class="sym">,(</span>eval_A i j<span class="sym">) *</span> u<span class="sym">!</span>j<span class="sym">)|</span>i<span class="sym">&lt;-[</span><span class="num">0</span>..n<span class="sym">],</span> j<span class="sym">&lt;-[</span><span class="num">0</span>..n<span class="sym">]]

</span>eval_At_times_u <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> UArray <span class="kwb">Int Double</span> <span class="sym">-&gt;</span> UArray <span class="kwb">Int Double
</span>eval_At_times_u n u <span class="sym">=</span> accumArray <span class="sym">(+)</span> <span class="num">0</span> <span class="sym">(</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">)
                      [(</span>i<span class="sym">,(</span>eval_A j i<span class="sym">) *</span> u<span class="sym">!</span>j<span class="sym">)|</span>i<span class="sym">&lt;-[</span><span class="num">0</span>..n<span class="sym">],</span> j<span class="sym">&lt;-[</span><span class="num">0</span>..n<span class="sym">]]</span>
