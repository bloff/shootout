<span class="com">{-# OPTIONS -fvia-C -fexcess-precision #-}</span>
<span class="slc">--</span>
<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Modified by Ryan Trinkle: 1) change from divInt# to uncheckedIShiftRA#</span>
<span class="slc">-- Translation from Clean by Don Stewart</span>


<span class="kwa">import</span> System
<span class="kwa">import</span> Foreign.Marshal.Array
<span class="kwa">import</span> Foreign
<span class="kwa">import</span> Text.Printf
<span class="kwa">import</span> Control.Monad
<span class="kwa">import</span> Data.ByteString.Internal

<span class="kwa">import</span> GHC.Base
<span class="kwa">import</span> GHC.<span class="kwb">Float</span>
<span class="kwa">import</span> GHC.<span class="kwb">Int</span>

<span class="kwa">type</span> Reals <span class="sym">=</span> Ptr <span class="kwb">Double</span>

main <span class="sym">=</span> <span class="kwa">do</span>
    n <span class="sym">&lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> readIO . head

    u <span class="sym">&lt;-</span> mallocArray n <span class="sym">::</span> IO Reals
    forM_ <span class="sym">[</span><span class="num">0</span>..n<span class="sym">-</span><span class="num">1</span><span class="sym">]</span> $ \i <span class="sym">-&gt;</span> pokeElemOff u i <span class="num">1</span>
    v <span class="sym">&lt;-</span> mallocArray n <span class="sym">::</span> IO Reals
    forM_ <span class="sym">[</span><span class="num">0</span>..n<span class="sym">-</span><span class="num">1</span><span class="sym">]</span> $ \i <span class="sym">-&gt;</span> pokeElemOff v i <span class="num">0</span>

    powerMethod <span class="num">10</span> n u v
    printf <span class="str">&quot;%.9f\n&quot;</span> <span class="sym">(</span>eigenvalue n u v <span class="num">0 0 0</span><span class="sym">)</span>

<span class="slc">------------------------------------------------------------------------</span>

eigenvalue <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> Reals <span class="sym">-&gt;</span> Reals <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Double</span> <span class="sym">-&gt;</span> <span class="kwb">Double</span> <span class="sym">-&gt;</span> <span class="kwb">Double</span>
eigenvalue n u v i vBv vv
    <span class="sym">|</span> i <span class="sym">&lt;</span> n     <span class="sym">=</span> eigenvalue n u v <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>vBv <span class="sym">+</span> ui <span class="sym">*</span> vi<span class="sym">) (</span>vv <span class="sym">+</span> vi <span class="sym">*</span> vi<span class="sym">)</span>
    <span class="sym">|</span> otherwise <span class="sym">=</span> sqrt $<span class="sym">!</span> vBv <span class="sym">/</span> vv
    <span class="kwa">where</span>
       ui <span class="sym">=</span> inlinePerformIO <span class="sym">(</span>peekElemOff u i<span class="sym">)</span>
       vi <span class="sym">=</span> inlinePerformIO <span class="sym">(</span>peekElemOff v i<span class="sym">)</span>

<span class="slc">------------------------------------------------------------------------</span>

powerMethod <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> Reals <span class="sym">-&gt;</span> Reals <span class="sym">-&gt;</span> IO <span class="sym">()</span>
powerMethod <span class="sym">!</span>i n u v <span class="sym">=</span> allocaArray n $ \t <span class="sym">-&gt;</span>
    replicateM_ i $ timesAtAv t n u v <span class="sym">&gt;&gt;</span> timesAtAv t n v u

<span class="slc">-- multiply vector v by matrix A and then by matrix A transposed</span>
timesAtAv <span class="sym">::</span> Reals <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> Reals <span class="sym">-&gt;</span> Reals <span class="sym">-&gt;</span> IO <span class="sym">()</span>
timesAtAv t n u atau <span class="sym">=</span> <span class="kwa">do</span>
    timesAv  n u t
    timesAtv n t atau

timesAv <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> Reals <span class="sym">-&gt;</span> Reals <span class="sym">-&gt;</span> IO <span class="sym">()</span>
timesAv n u au <span class="sym">=</span> go <span class="num">0</span>
  <span class="kwa">where</span>
    go <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> IO <span class="sym">()</span>
    go i <span class="sym">=</span> when <span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">)</span> $ <span class="kwa">do</span>
        pokeElemOff au i <span class="sym">(</span>avsum i <span class="num">0 0</span><span class="sym">)</span>
        go <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>

    avsum <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Double</span> <span class="sym">-&gt;</span> <span class="kwb">Double</span>
    avsum i j acc
        <span class="sym">|</span> j <span class="sym">&lt;</span> n <span class="sym">=</span> avsum i <span class="sym">(</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>acc <span class="sym">+ ((</span>aij i j<span class="sym">) *</span> uj<span class="sym">))</span>
        <span class="sym">|</span> otherwise <span class="sym">=</span> acc
        <span class="kwa">where</span> uj <span class="sym">=</span> inlinePerformIO <span class="sym">(</span>peekElemOff u j<span class="sym">)</span>

timesAtv <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> Reals <span class="sym">-&gt;</span> Reals <span class="sym">-&gt;</span> IO <span class="sym">()</span>
timesAtv n u a <span class="sym">=</span> go <span class="num">0</span>
  <span class="kwa">where</span>
    go <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> IO <span class="sym">()</span>
    go i <span class="sym">=</span> when <span class="sym">(</span>i <span class="sym">&lt;</span> n<span class="sym">)</span> $ <span class="kwa">do</span>
        pokeElemOff a i <span class="sym">(</span>atvsum i <span class="num">0 0</span><span class="sym">)</span>
        go <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>

    atvsum <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Double</span> <span class="sym">-&gt;</span> <span class="kwb">Double</span>
    atvsum i j acc
        <span class="sym">|</span> j <span class="sym">&lt;</span> n     <span class="sym">=</span> atvsum i <span class="sym">(</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>acc <span class="sym">+ ((</span>aij j i<span class="sym">) *</span> uj<span class="sym">))</span>
        <span class="sym">|</span> otherwise <span class="sym">=</span> acc
        <span class="kwa">where</span> uj <span class="sym">=</span> inlinePerformIO <span class="sym">(</span>peekElemOff u j<span class="sym">)</span>

<span class="slc">--</span>
<span class="slc">-- manually unbox the inner loop:</span>
<span class="slc">-- aij i j = 1 / fromIntegral ((i+j) * (i+j+1) `div` 2 + i + 1)</span>
<span class="slc">--</span>
aij <span class="sym">(</span>I# i<span class="sym">) (</span>I# j<span class="sym">) =</span> D# <span class="sym">(</span>
    <span class="kwa">case</span> i <span class="sym">+</span># j <span class="kwa">of</span>
        n <span class="sym">-&gt;</span> <span class="kwa">case</span> n <span class="sym">*</span># <span class="sym">(</span>n<span class="sym">+</span>#<span class="num">1</span>#<span class="sym">)</span> <span class="kwa">of</span>
                t <span class="sym">-&gt;</span> <span class="kwa">case</span> t `uncheckedIShiftRA#` <span class="num">1</span># <span class="kwa">of</span>
                        u <span class="sym">-&gt;</span> <span class="kwa">case</span> u <span class="sym">+</span># <span class="sym">(</span>i <span class="sym">+</span># <span class="num">1</span>#<span class="sym">)</span> <span class="kwa">of</span>
                                r <span class="sym">-&gt;</span> <span class="num">1.0</span>## <span class="sym">/</span>## <span class="sym">(</span>int2Double# r<span class="sym">))</span>

