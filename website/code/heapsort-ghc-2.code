<span class="slc">-- $Id: heapsort-ghc-2.code,v 1.1 2005-03-06 23:30:37 bfulgham Exp $
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">-- Contributed by Einar Karttunen
</span>
<span class="kwa">import</span> Numeric
<span class="kwa">import</span> System
<span class="kwa">import</span> Data.Array.Base
<span class="kwa">import</span> Control.Monad
<span class="kwa">import</span> Control.Monad.ST

main <span class="sym">=</span> <span class="kwa">do</span> ~<span class="sym">[</span>n<span class="sym">] &lt;-</span> getArgs
          putStrLn <span class="sym">(</span>showFFloat <span class="sym">(</span>Just <span class="num">10</span><span class="sym">) (</span>runST <span class="sym">(</span>work $ read n<span class="sym">))</span> <span class="str">&quot;&quot;</span><span class="sym">)

</span>work <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> ST s <span class="kwb">Double
</span>work n <span class="sym">=</span> <span class="kwa">do
</span>  arr <span class="sym">&lt;-</span> newArray_ <span class="sym">(</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">)
</span>  foldM <span class="sym">(</span>randl arr <span class="num">100</span><span class="sym">)</span> <span class="num">42</span> <span class="sym">[</span><span class="num">1</span>..n<span class="sym">]
</span>  heapsort n arr
  readArray arr n

heapsort <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> STUArray s <span class="kwb">Int Double</span> <span class="sym">-&gt;</span> ST s <span class="sym">()
</span>heapsort n arr <span class="sym">=</span> <span class="kwa">do
  let</span> loop l ir <span class="sym">=
</span>        if l <span class="sym">&gt;</span> <span class="num">1
</span>           <span class="kwa">then let</span> l<span class="str">' = l-1 in unsafeRead arr l'</span> <span class="sym">&gt;&gt;=</span> cont l<span class="str">' ir
           else do rra &lt;- unsafeRead arr ir
                   unsafeRead arr 1 &gt;&gt;= unsafeWrite arr ir
                   if ir == 2 then unsafeWrite arr 1 rra else cont l (ir-1) rra
      cont l ir rra = inner l (l*2) ir rra &gt;&gt; loop l ir
      inner i j ir rra =
        if j &gt; ir
           then unsafeWrite arr i rra
           else do
             raj &lt;- unsafeRead arr j
             raj'</span><span class="sym">&lt;-</span> unsafeRead arr <span class="sym">(</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">)
</span>             <span class="kwa">let</span> j<span class="str">' = if j &lt; ir &amp;&amp; raj &lt; raj'</span> <span class="kwa">then</span> j<span class="sym">+</span><span class="num">1</span> <span class="kwa">else</span> j
             raj <span class="sym">&lt;-</span> unsafeRead arr j<span class="str">'
             if rra &lt; raj
                then unsafeWrite arr i raj &gt;&gt; inner j'</span> <span class="sym">(</span>j<span class="str">'+j'</span><span class="sym">)</span> ir rra
                <span class="kwa">else</span> inner i <span class="sym">(</span>ir<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> ir rra
  loop <span class="sym">((</span>n `div` <span class="num">2</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)</span> n

randl <span class="sym">::</span> STUArray s <span class="kwb">Int Double</span> <span class="sym">-&gt;</span> <span class="kwb">Double</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> ST s <span class="kwb">Int
</span>randl arr max seed n <span class="sym">=</span> unsafeWrite arr n newrand <span class="sym">&gt;&gt;</span> return newseed
    <span class="kwa">where</span> newseed <span class="sym">= (</span>seed <span class="sym">*</span> ia <span class="sym">+</span> ic<span class="sym">)</span> `mod` im
          newrand <span class="sym">= (</span>fromIntegral newseed<span class="sym">) * (</span>max <span class="sym">/</span> fromIntegral im<span class="sym">)
</span>          im <span class="sym">=</span> <span class="num">139968
</span>          ia <span class="sym">=</span> <span class="num">3877
</span>          ic <span class="sym">=</span> <span class="num">29573</span>
