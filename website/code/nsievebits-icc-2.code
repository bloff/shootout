<span class="dir">#include &lt;limits.h&gt;
</span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;string.h&gt;
</span>
<span class="kwb">static unsigned long</span> nsieve <span class="sym">(</span><span class="kwb">unsigned long</span> m<span class="sym">) {
</span>	<span class="kwb">unsigned long</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">;
</span>	<span class="kwb">unsigned char</span> <span class="sym">*</span> a <span class="sym">= (</span><span class="kwb">unsigned char</span> <span class="sym">*)</span> malloc <span class="sym">(</span>m <span class="sym">/</span> CHAR_BIT <span class="sym">+</span> <span class="num">1</span><span class="sym">);

</span>	memset <span class="sym">(</span>a<span class="sym">, ~</span><span class="num">0</span><span class="sym">,</span> m <span class="sym">/</span> CHAR_BIT <span class="sym">+</span> <span class="num">1</span><span class="sym">);
</span>	<span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">=</span> <span class="num">2</span><span class="sym">;</span> i <span class="sym">&lt;</span> m<span class="sym">; ++</span>i<span class="sym">)</span>	<span class="kwa">if</span> <span class="sym">(</span>a<span class="sym">[</span>i <span class="sym">/</span> CHAR_BIT<span class="sym">] &amp; (</span><span class="num">1</span> <span class="sym">&lt;&lt; (</span>i <span class="sym">%</span> CHAR_BIT<span class="sym">))) {
</span>		<span class="kwa">for</span> <span class="sym">(</span>j <span class="sym">=</span> i <span class="sym">+</span> i<span class="sym">;</span> j <span class="sym">&lt;</span> m<span class="sym">;</span> j <span class="sym">+=</span> i<span class="sym">)</span> a<span class="sym">[</span>j <span class="sym">/</span> CHAR_BIT<span class="sym">] &amp;= ~(</span><span class="num">1</span> <span class="sym">&lt;&lt; (</span>j <span class="sym">%</span> CHAR_BIT<span class="sym">));
		++</span>count<span class="sym">;
	}
</span>	free <span class="sym">(</span>a<span class="sym">);

</span>	<span class="kwa">return</span> count<span class="sym">;
}

</span><span class="kwb">static void</span> test <span class="sym">(</span><span class="kwb">unsigned long</span> n<span class="sym">) {
</span>	<span class="kwb">unsigned long</span> m <span class="sym">=</span> <span class="num">10000ul</span> <span class="sym">&lt;&lt;</span> n<span class="sym">;
</span>	printf <span class="sym">(</span><span class="str">&quot;Primes up to %8lu %8lu</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve <span class="sym">(</span>m<span class="sym">));
}

</span><span class="kwb">int</span> main <span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span> argv<span class="sym">[]) {
</span>	<span class="kwb">unsigned long</span> n<span class="sym">;
</span>	<span class="kwb">char</span> <span class="sym">*</span>cp<span class="sym">;

</span>	<span class="kwa">if</span> <span class="sym">(</span>argc <span class="sym">&lt;</span> <span class="num">2</span> <span class="sym">|| (</span>n <span class="sym">=</span> strtoul <span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">], &amp;</span>cp<span class="sym">,</span> <span class="num">10</span><span class="sym">)) ==</span> ULONG_MAX <span class="sym">||
	    *</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">] ==</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span> <span class="sym">|| *</span>cp <span class="sym">!=</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">) {
</span>		fprintf <span class="sym">(</span>stderr<span class="sym">,</span> <span class="str">&quot;usage: nsieve N</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span>		exit <span class="sym">(</span><span class="num">2</span><span class="sym">);
	}
</span>	test <span class="sym">(</span>n<span class="sym">);
</span>	<span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;=</span> <span class="num">1</span><span class="sym">)</span> test <span class="sym">(</span>n <span class="num">- 1</span><span class="sym">);
</span>	<span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&gt;=</span> <span class="num">2</span><span class="sym">)</span> test <span class="sym">(</span>n <span class="num">- 2</span><span class="sym">);
</span>	<span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}
</span>
