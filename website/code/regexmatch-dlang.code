<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   http://www.bagley.org/~doug/shootout/</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release regexmatch.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>regexp<span class="sym">,</span> std<span class="sym">.</span>stream<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwa">char</span><span class="sym">[]</span> pattern <span class="sym">=</span>
r<span class="str">&quot;(^| )((\d\d\d|\(\d\d\d\)) \d\d\d[-| ]\d\d\d\d)( |$)&quot;</span>
<span class="sym">;</span>

<span class="kwa">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? std<span class="sym">.</span>string<span class="sym">.</span><span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwa">char</span><span class="sym">[][]</span>    lines <span class="sym">=</span> <span class="kwd">splitlines</span><span class="sym">(</span>stdin<span class="sym">.</span><span class="kwd">toString</span><span class="sym">());</span>
    <span class="kwb">R</span>eg<span class="kwb">E</span>xp      re <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">R</span>eg<span class="kwb">E</span>xp<span class="sym">(</span>pattern<span class="sym">,</span><span class="str">&quot;gi&quot;</span><span class="sym">);</span>
    <span class="kwa">int</span>         match<span class="sym">;</span>
    <span class="kwa">char</span><span class="sym">[</span><span class="num">32</span><span class="sym">]</span>    ph<span class="sym">;</span>

    <span class="kwa">while</span><span class="sym">(</span>n<span class="sym">--)</span>
    <span class="sym">{</span>
        <span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[]</span> line<span class="sym">;</span> lines<span class="sym">)</span>
        <span class="sym">{</span>
            <span class="kwa">int</span> idx <span class="sym">=</span> re<span class="sym">.</span><span class="kwd">find</span><span class="sym">(</span>line<span class="sym">);</span>
            <span class="kwa">if</span><span class="sym">(</span>idx <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">)</span>
            <span class="sym">{</span>
                ph<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="str">'('</span><span class="sym">;</span>
                <span class="kwa">int</span> jdx <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
                <span class="kwa">while</span><span class="sym">(</span>idx <span class="sym">&lt;</span> line<span class="sym">.</span>length<span class="sym">)</span>
                <span class="sym">{</span>
                    <span class="kwa">char</span> c <span class="sym">=</span> line<span class="sym">[</span>idx<span class="sym">];</span>
                    <span class="kwa">if</span><span class="sym">(</span>std<span class="sym">.</span>ctype<span class="sym">.</span><span class="kwd">isdigit</span><span class="sym">(</span>c<span class="sym">))</span>
                    <span class="sym">{</span>
                        ph<span class="sym">[</span>jdx<span class="sym">++] =</span> c<span class="sym">;</span>
                        <span class="kwa">if</span><span class="sym">(</span>jdx <span class="sym">==</span> <span class="num">4</span><span class="sym">)</span>
                        <span class="sym">{</span>
                            ph<span class="sym">[</span>jdx<span class="sym">++] =</span> <span class="str">')'</span><span class="sym">;</span>
                            ph<span class="sym">[</span>jdx<span class="sym">++] =</span> <span class="str">' '</span><span class="sym">;</span>
                        <span class="sym">}</span>
                        <span class="kwa">else if</span><span class="sym">(</span>jdx <span class="sym">==</span> <span class="num">9</span><span class="sym">)</span>
                        <span class="sym">{</span>
                            ph<span class="sym">[</span>jdx<span class="sym">++] =</span> <span class="str">'-'</span><span class="sym">;</span>
                        <span class="sym">}</span>
                        <span class="kwa">else if</span><span class="sym">(</span>jdx <span class="sym">==</span> <span class="num">14</span><span class="sym">)</span>
                        <span class="sym">{</span>
                            ph<span class="sym">[</span>jdx<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;</span>
                            <span class="kwa">break</span><span class="sym">;</span>
                        <span class="sym">}</span>
                    <span class="sym">}</span>
                    idx<span class="sym">++;</span>
                <span class="sym">}</span>
                <span class="kwa">if</span><span class="sym">(!</span>n<span class="sym">)</span>
                <span class="sym">{</span>
                    match<span class="sym">++;</span>
                    <span class="kwd">printf</span><span class="sym">(</span><span class="str">&quot;%d: %.*s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>match<span class="sym">,</span>ph<span class="sym">);</span>
                <span class="sym">}</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>
