<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   http://www.bagley.org/~doug/shootout/

   converted to D by Dave Fladebo
   compile: dmd -O -inline -release regexmatch.d
*/</span>

import std<span class="sym">.</span>regexp<span class="sym">,</span> std<span class="sym">.</span>stream<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;

</span><span class="kwb">char</span><span class="sym">[]</span> pattern <span class="sym">=
</span>r<span class="str">&quot;(^| )((</span><span class="esc">\d\d\d</span><span class="str">|</span><span class="esc">\(\d\d\d\)</span><span class="str">)</span> <span class="esc">\d\d\d</span><span class="str">[-| ]</span><span class="esc">\d\d\d\d</span><span class="str">)( |$)&quot;</span>
<span class="sym">;

</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)
{
</span>    <span class="kwb">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? std<span class="sym">.</span>string<span class="sym">.</span>atoi<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;

</span>    <span class="kwb">char</span><span class="sym">[][]</span>    lines <span class="sym">=</span> splitlines<span class="sym">(</span>stdin<span class="sym">.</span>toString<span class="sym">());
</span>    RegExp      re <span class="sym">=</span> <span class="kwa">new</span> RegExp<span class="sym">(</span>pattern<span class="sym">,</span><span class="str">&quot;gi&quot;</span><span class="sym">);
</span>    <span class="kwb">int</span>         match<span class="sym">;
</span>    <span class="kwb">char</span><span class="sym">[</span><span class="num">32</span><span class="sym">]</span>    ph<span class="sym">;

</span>    <span class="kwa">while</span><span class="sym">(</span>n<span class="sym">--)
    {
</span>        foreach<span class="sym">(</span><span class="kwb">char</span><span class="sym">[]</span> line<span class="sym">;</span> lines<span class="sym">)
        {
</span>            <span class="kwb">int</span> idx <span class="sym">=</span> re<span class="sym">.</span>find<span class="sym">(</span>line<span class="sym">);
</span>            <span class="kwa">if</span><span class="sym">(</span>idx <span class="sym">&gt;=</span> <span class="num">0</span><span class="sym">)
            {
</span>                ph<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="str">'('</span><span class="sym">;
</span>                <span class="kwb">int</span> jdx <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>                <span class="kwa">while</span><span class="sym">(</span>idx <span class="sym">&lt;</span> line<span class="sym">.</span>length<span class="sym">)
                {
</span>                    <span class="kwb">char</span> c <span class="sym">=</span> line<span class="sym">[</span>idx<span class="sym">];
</span>                    <span class="kwa">if</span><span class="sym">(</span>std<span class="sym">.</span>ctype<span class="sym">.</span>isdigit<span class="sym">(</span>c<span class="sym">))
                    {
</span>                        ph<span class="sym">[</span>jdx<span class="sym">++] =</span> c<span class="sym">;
</span>                        <span class="kwa">if</span><span class="sym">(</span>jdx <span class="sym">==</span> <span class="num">4</span><span class="sym">)
                        {
</span>                            ph<span class="sym">[</span>jdx<span class="sym">++] =</span> <span class="str">')'</span><span class="sym">;
</span>                            ph<span class="sym">[</span>jdx<span class="sym">++] =</span> <span class="str">' '</span><span class="sym">;
                        }
</span>                        <span class="kwa">else if</span><span class="sym">(</span>jdx <span class="sym">==</span> <span class="num">9</span><span class="sym">)
                        {
</span>                            ph<span class="sym">[</span>jdx<span class="sym">++] =</span> <span class="str">'-'</span><span class="sym">;
                        }
</span>                        <span class="kwa">else if</span><span class="sym">(</span>jdx <span class="sym">==</span> <span class="num">14</span><span class="sym">)
                        {
</span>                            ph<span class="sym">[</span>jdx<span class="sym">] =</span> <span class="str">'</span><span class="esc">\0</span><span class="str">'</span><span class="sym">;
</span>                            <span class="kwa">break</span><span class="sym">;
                        }
                    }
</span>                    idx<span class="sym">++;
                }
</span>                <span class="kwa">if</span><span class="sym">(!</span>n<span class="sym">)
                {
</span>                    match<span class="sym">++;
</span>                    printf<span class="sym">(</span><span class="str">&quot;%d: %.*s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>match<span class="sym">,</span>ph<span class="sym">);
                }
            }
        }
    }
}</span>
