<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># modified by Charles Evans 2005/12/23</span>

<span class="kwa">link</span> printf

<span class="kwb">$define</span> IM <span class="num">139968</span>
<span class="kwb">$define</span> IA <span class="num">3877</span>
<span class="kwb">$define</span> IC <span class="num">29573</span>

<span class="kwa">procedure</span> gen_random<span class="sym">(</span>max<span class="sym">)</span>
    <span class="kwa">static</span> LAST<span class="sym">;</span> <span class="kwa">initial</span> LAST <span class="sym">:=</span> <span class="num">42</span><span class="sym">;</span>
    <span class="kwa">repeat</span> <span class="sym">{</span> <span class="kwa">suspend</span><span class="sym">((</span>max <span class="sym">* (</span>LAST <span class="sym">:= (</span>LAST <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> % IM<span class="sym">)) /</span> IM<span class="sym">) }</span>
<span class="kwa">end</span>

<span class="kwa">procedure</span> heapsort<span class="sym">(</span>n<span class="sym">,</span> ra<span class="sym">)</span>
    <span class="kwa">local</span> l<span class="sym">,</span> j<span class="sym">,</span> ir<span class="sym">,</span> i<span class="sym">,</span> rra

    l <span class="sym">:=</span> ishift<span class="sym">(</span>n<span class="sym">, -</span><span class="num">1</span><span class="sym">) +</span> <span class="num">1</span>
    ir <span class="sym">:=</span> n
    <span class="kwa">repeat</span> <span class="sym">{</span>
        <span class="kwa">if</span> <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">then</span> <span class="sym">{</span>
	    l <span class="sym">:=</span> l <span class="sym">-</span> <span class="num">1</span>
            rra <span class="sym">:=</span> ra<span class="sym">[</span>l<span class="sym">]</span>
        <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
            rra <span class="sym">:=</span> ra<span class="sym">[</span>ir<span class="sym">]</span>
            ra<span class="sym">[</span>ir<span class="sym">] :=</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
	    ir <span class="sym">:=</span> ir <span class="sym">-</span> <span class="num">1</span>
            <span class="kwa">if</span> <span class="sym">(</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">then</span> <span class="sym">{</span>
                ra<span class="sym">[</span><span class="num">1</span><span class="sym">] :=</span> rra
                <span class="kwa">return</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        i <span class="sym">:=</span> l
        j <span class="sym">:=</span> ishift<span class="sym">(</span>l<span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
        <span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;=</span> ir<span class="sym">)</span> <span class="kwa">do</span> <span class="sym">{</span>
            <span class="kwa">if</span> <span class="sym">((</span>j <span class="sym">&lt;</span> ir<span class="sym">)</span> &amp; <span class="sym">(</span>ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]))</span> <span class="kwa">then</span> <span class="sym">{</span>
		j <span class="sym">:=</span> j <span class="sym">+</span> <span class="num">1</span>
	    <span class="sym">}</span>
            <span class="kwa">if</span> <span class="sym">(</span>rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">])</span> <span class="kwa">then</span> <span class="sym">{</span>
                ra<span class="sym">[</span>i<span class="sym">] :=</span> ra<span class="sym">[</span>j<span class="sym">]</span>
		i <span class="sym">:=</span> j
                j <span class="sym">:=</span> j <span class="sym">+</span> i
            <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
                j <span class="sym">:=</span> ir <span class="sym">+</span> <span class="num">1</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
        ra<span class="sym">[</span>i<span class="sym">] :=</span> rra
    <span class="sym">}</span>
<span class="kwa">end</span>

<span class="kwa">procedure</span> main<span class="sym">(</span>argv<span class="sym">)</span>
    n <span class="sym">:=</span> argv<span class="sym">[</span><span class="num">1</span><span class="sym">] |</span> <span class="num">1</span>
    ary <span class="sym">:=</span> <span class="kwb">list</span><span class="sym">(</span>n<span class="sym">)</span>
    <span class="kwa">every</span> i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do</span> ary<span class="sym">[</span>i<span class="sym">] :=</span> gen_random<span class="sym">(</span><span class="num">1.0</span><span class="sym">)</span>
    heapsort<span class="sym">(</span>n<span class="sym">,</span> ary<span class="sym">)</span>
    printf<span class="sym">(</span><span class="str">&quot;%.10r</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>ary<span class="sym">[</span>n<span class="sym">])</span>
<span class="slc">#write(&amp;errout,&amp;time) # 100000 in 7sec</span>
<span class="kwa">end</span>
