<span class="slc">// The Great Computer Language Shootout
</span><span class="slc">// http://shootout.alioth.debian.org/great/
</span><span class="slc">// by Andreas Bogk
</span>
<span class="kwb">module</span><span class="sym">:</span> n<span class="sym">-</span>body
<span class="kwa">use</span><span class="sym">-</span>libraries<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> io<span class="sym">,</span> transcendental
<span class="kwa">use</span><span class="sym">-</span>modules<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> format<span class="sym">-</span>out<span class="sym">,</span> transcendental

<span class="kwa">define sealed class</span> <span class="kwa">&lt;planet&gt;</span> <span class="sym">(</span><span class="kwa">&lt;object&gt;</span><span class="sym">)
</span>  <span class="kwa">slot</span> x <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> x<span class="sym">:;
</span>  <span class="kwa">slot</span> y <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> y<span class="sym">:;
</span>  <span class="kwa">slot</span> z <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> z<span class="sym">:;
</span>  <span class="kwa">slot</span> vx <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> vx<span class="sym">:;
</span>  <span class="kwa">slot</span> vy <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> vy<span class="sym">:;
</span>  <span class="kwa">slot</span> vz <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> vz<span class="sym">:;
</span>  <span class="kwa">constant slot</span> mass <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> mass<span class="sym">:;
</span><span class="kwa">end class</span> <span class="kwa">&lt;planet&gt;</span><span class="sym">;

</span><span class="kwa">define sealed inline method</span> make<span class="sym">(</span><span class="kwa">class</span> <span class="sym">==</span> <span class="kwa">&lt;planet&gt;</span><span class="sym">,</span> #rest all<span class="sym">-</span>keys<span class="sym">,</span> #key<span class="sym">)
 =</span>&gt; <span class="sym">(</span>object<span class="sym">)
</span>  next<span class="sym">-</span><span class="kwa">method</span><span class="sym">();
</span><span class="kwa">end method</span> make<span class="sym">;

</span><span class="kwa">define constant</span> <span class="kwa">&lt;planet-vector&gt;</span> <span class="sym">=</span> <span class="kwa">&lt;list&gt;</span><span class="sym">;
</span><span class="kwa">define constant</span> $pi <span class="sym">=</span> $double<span class="sym">-</span>pi<span class="sym">;
</span><span class="kwa">define constant</span> $solar<span class="sym">-</span>mass <span class="sym">=</span> <span class="num">4</span> <span class="sym">*</span> $pi <span class="sym">*</span> $pi<span class="sym">;
</span><span class="kwa">define constant</span> $days<span class="sym">-</span>per<span class="sym">-</span>year <span class="sym">=</span> <span class="num">365.24</span><span class="sym">;

</span><span class="kwa">define constant</span> $bodies <span class="sym">::</span> <span class="kwa">&lt;planet-vector&gt;</span> <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;planet-vector&gt;</span><span class="sym">,</span> size<span class="sym">:</span> <span class="num">5</span><span class="sym">);
</span>$bodies<span class="sym">[</span><span class="num">0</span><span class="sym">] :=</span> make <span class="sym">(</span><span class="kwa">&lt;planet&gt;</span><span class="sym">,
</span>                    x<span class="sym">:</span> <span class="num">0.0d0</span><span class="sym">,</span> y<span class="sym">:</span> <span class="num">0.0d0</span><span class="sym">,</span> z<span class="sym">:</span> <span class="num">0.0d0</span><span class="sym">,
</span>                    vx<span class="sym">:</span> <span class="num">0.0d0</span><span class="sym">,</span> vy<span class="sym">:</span> <span class="num">0.0d0</span><span class="sym">,</span> vz<span class="sym">:</span> <span class="num">0.0d0</span><span class="sym">,
</span>                    mass<span class="sym">:</span> $solar<span class="sym">-</span>mass<span class="sym">);
</span>$bodies<span class="sym">[</span><span class="num">1</span><span class="sym">] :=</span> make <span class="sym">(</span><span class="kwa">&lt;planet&gt;</span><span class="sym">,
</span>                    x<span class="sym">:</span> <span class="num">4.84143144246472090e</span><span class="sym">+</span><span class="num">00</span><span class="sym">,
</span>                    y<span class="sym">: -</span><span class="num">1.16032004402742839e</span><span class="sym">+</span><span class="num">00</span><span class="sym">,
</span>                    z<span class="sym">: -</span><span class="num">1.03622044471123109e</span><span class="sym">-</span><span class="num">01</span><span class="sym">,
</span>                    vx<span class="sym">:</span> <span class="num">1.66007664274403694e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> $days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">,
</span>                    vy<span class="sym">:</span> <span class="num">7.69901118419740425e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> $days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">,
</span>                    vz<span class="sym">: -</span><span class="num">6.90460016972063023e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> $days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">,
</span>                    mass<span class="sym">:</span> <span class="num">9.54791938424326609e</span><span class="sym">-</span><span class="num">04</span> <span class="sym">*</span> $solar<span class="sym">-</span>mass<span class="sym">);
</span>$bodies<span class="sym">[</span><span class="num">2</span><span class="sym">] :=</span> make <span class="sym">(</span><span class="kwa">&lt;planet&gt;</span><span class="sym">,
</span>                    x<span class="sym">:</span> <span class="num">8.34336671824457987e</span><span class="sym">+</span><span class="num">00</span><span class="sym">,
</span>                    y<span class="sym">:</span> <span class="num">4.12479856412430479e</span><span class="sym">+</span><span class="num">00</span><span class="sym">,
</span>                    z<span class="sym">: -</span><span class="num">4.03523417114321381e</span><span class="sym">-</span><span class="num">01</span><span class="sym">,
</span>                    vx<span class="sym">: -</span><span class="num">2.76742510726862411e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> $days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">,
</span>                    vy<span class="sym">:</span> <span class="num">4.99852801234917238e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> $days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">,
</span>                    vz<span class="sym">:</span> <span class="num">2.30417297573763929e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> $days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">,
</span>                    mass<span class="sym">:</span> <span class="num">2.85885980666130812e</span><span class="sym">-</span><span class="num">04</span> <span class="sym">*</span> $solar<span class="sym">-</span>mass<span class="sym">);
</span>$bodies<span class="sym">[</span><span class="num">3</span><span class="sym">] :=</span> make <span class="sym">(</span><span class="kwa">&lt;planet&gt;</span><span class="sym">,
</span>                    x<span class="sym">:</span> <span class="num">1.28943695621391310e</span><span class="sym">+</span><span class="num">01</span><span class="sym">,
</span>                    y<span class="sym">: -</span><span class="num">1.51111514016986312e</span><span class="sym">+</span><span class="num">01</span><span class="sym">,
</span>                    z<span class="sym">: -</span><span class="num">2.23307578892655734e</span><span class="sym">-</span><span class="num">01</span><span class="sym">,
</span>                    vx<span class="sym">:</span> <span class="num">2.96460137564761618e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> $days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">,
</span>                    vy<span class="sym">:</span> <span class="num">2.37847173959480950e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> $days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">,
</span>                    vz<span class="sym">: -</span><span class="num">2.96589568540237556e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> $days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">,
</span>                    mass<span class="sym">:</span> <span class="num">4.36624404335156298e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> $solar<span class="sym">-</span>mass<span class="sym">);
</span>$bodies<span class="sym">[</span><span class="num">4</span><span class="sym">] :=</span> make <span class="sym">(</span><span class="kwa">&lt;planet&gt;</span><span class="sym">,
</span>                    x<span class="sym">:</span> <span class="num">1.53796971148509165e</span><span class="sym">+</span><span class="num">01</span><span class="sym">,
</span>                    y<span class="sym">: -</span><span class="num">2.59193146099879641e</span><span class="sym">+</span><span class="num">01</span><span class="sym">,
</span>                    z<span class="sym">:</span> <span class="num">1.79258772950371181e</span><span class="sym">-</span><span class="num">01</span><span class="sym">,
</span>                    vx<span class="sym">:</span> <span class="num">2.68067772490389322e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> $days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">,
</span>                    vy<span class="sym">:</span> <span class="num">1.62824170038242295e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> $days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">,
</span>                    vz<span class="sym">: -</span><span class="num">9.51592254519715870e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> $days<span class="sym">-</span>per<span class="sym">-</span>year<span class="sym">,
</span>                    mass<span class="sym">:</span> <span class="num">5.15138902046611451e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> $solar<span class="sym">-</span>mass<span class="sym">);

</span><span class="kwa">define function</span> advance<span class="sym">(</span>planets <span class="sym">::</span> <span class="kwa">&lt;planet-vector&gt;</span><span class="sym">,</span> dt <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">)
</span>  <span class="kwa">local method</span> advance<span class="sym">-</span>recursive
            <span class="sym">(</span>planets <span class="sym">::</span> <span class="kwa">&lt;planet-vector&gt;</span><span class="sym">,</span> dt <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">)
</span>          <span class="kwa">let</span> b <span class="sym">::</span> <span class="kwa">&lt;planet&gt;</span> <span class="sym">=</span> head<span class="sym">(</span>planets<span class="sym">);
</span>          <span class="kwa">let</span> rest <span class="sym">::</span> <span class="kwa">&lt;list&gt;</span> <span class="sym">=</span> tail<span class="sym">(</span>planets<span class="sym">);
</span>          <span class="kwa">for</span> <span class="sym">(</span>b2 <span class="sym">::</span> <span class="kwa">&lt;planet&gt;</span> <span class="kwa">in</span> rest<span class="sym">)
</span>            <span class="kwa">let</span> dx <span class="sym">=</span> b.x <span class="sym">-</span> b2.x<span class="sym">;
</span>            <span class="kwa">let</span> dy <span class="sym">=</span> b.y <span class="sym">-</span> b2.y<span class="sym">;
</span>            <span class="kwa">let</span> dz <span class="sym">=</span> b.z <span class="sym">-</span> b2.z<span class="sym">;
</span>            <span class="kwa">let</span> distance <span class="sym">=</span> sqrt<span class="sym">(</span>dx <span class="sym">*</span> dx <span class="sym">+</span> dy <span class="sym">*</span> dy <span class="sym">+</span> dz <span class="sym">*</span> dz<span class="sym">);
</span>            <span class="kwa">let</span> mag <span class="sym">=</span> dt <span class="sym">/ (</span>distance <span class="sym">*</span> distance <span class="sym">*</span> distance<span class="sym">);

</span>            <span class="kwa">let</span> tmp <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span> <span class="sym">=</span> b2.mass <span class="sym">*</span> mag<span class="sym">;
</span>            b.vx <span class="sym">:=</span> b.vx <span class="sym">-</span> dx <span class="sym">*</span> tmp<span class="sym">;
</span>            b.vy <span class="sym">:=</span> b.vy <span class="sym">-</span> dy <span class="sym">*</span> tmp<span class="sym">;
</span>            b.vz <span class="sym">:=</span> b.vz <span class="sym">-</span> dz <span class="sym">*</span> tmp<span class="sym">;

</span>            tmp <span class="sym">:=</span> b.mass <span class="sym">*</span> mag<span class="sym">;
</span>            b2.vx <span class="sym">:=</span> b2.vx <span class="sym">+</span> dx <span class="sym">*</span> tmp<span class="sym">;
</span>            b2.vy <span class="sym">:=</span> b2.vy <span class="sym">+</span> dy <span class="sym">*</span> tmp<span class="sym">;
</span>            b2.vz <span class="sym">:=</span> b2.vz <span class="sym">+</span> dz <span class="sym">*</span> tmp<span class="sym">;
</span>          <span class="kwa">end for</span><span class="sym">;
</span>          <span class="kwa">if</span> <span class="sym">(</span>rest ~<span class="sym">=</span> #<span class="sym">())
</span>            advance<span class="sym">-</span>recursive<span class="sym">(</span>rest<span class="sym">,</span>dt<span class="sym">);
</span>          <span class="kwa">end if</span><span class="sym">;
</span>        <span class="kwa">end method</span> advance<span class="sym">-</span>recursive<span class="sym">;
</span>  advance<span class="sym">-</span>recursive<span class="sym">(</span>planets<span class="sym">,</span>dt<span class="sym">);
</span>  <span class="kwa">for</span> <span class="sym">(</span>b <span class="sym">::</span> <span class="kwa">&lt;planet&gt;</span> <span class="kwa">in</span> planets<span class="sym">)
</span>    b.x <span class="sym">:=</span> b.x <span class="sym">+</span> dt <span class="sym">*</span> b.vx<span class="sym">;
</span>    b.y <span class="sym">:=</span> b.y <span class="sym">+</span> dt <span class="sym">*</span> b.vy<span class="sym">;
</span>    b.z <span class="sym">:=</span> b.z <span class="sym">+</span> dt <span class="sym">*</span> b.vz<span class="sym">;
</span>  <span class="kwa">end for</span><span class="sym">;
</span><span class="kwa">end function</span> advance<span class="sym">;

</span><span class="kwa">define function</span> energy<span class="sym">(</span>planets <span class="sym">::</span> <span class="kwa">&lt;planet-vector&gt;</span><span class="sym">,</span> e <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">)
 =</span>&gt; <span class="sym">(</span>result <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span><span class="sym">)
</span>  <span class="kwa">let</span> b <span class="sym">::</span> <span class="kwa">&lt;planet&gt;</span> <span class="sym">=</span> head<span class="sym">(</span>planets<span class="sym">);
</span>  <span class="kwa">let</span> rest <span class="sym">=</span> tail<span class="sym">(</span>planets<span class="sym">);
</span>  e <span class="sym">:=</span> e <span class="sym">+</span> <span class="num">0.5</span> <span class="sym">*</span> b.mass <span class="sym">* (</span>b.vx <span class="sym">*</span> b.vx <span class="sym">+</span> b.vy <span class="sym">*</span> b.vy <span class="sym">+</span> b.vz <span class="sym">*</span> b.vz<span class="sym">);
</span>  <span class="kwa">for</span><span class="sym">(</span>b2 <span class="sym">::</span> <span class="kwa">&lt;planet&gt;</span> <span class="kwa">in</span> rest<span class="sym">)
</span>    <span class="kwa">let</span> dx <span class="sym">=</span> b.x <span class="sym">-</span> b2.x<span class="sym">;
</span>    <span class="kwa">let</span> dy <span class="sym">=</span> b.y <span class="sym">-</span> b2.y<span class="sym">;
</span>    <span class="kwa">let</span> dz <span class="sym">=</span> b.z <span class="sym">-</span> b2.z<span class="sym">;
</span>    <span class="kwa">let</span> distance <span class="sym">=</span> sqrt<span class="sym">(</span>dx <span class="sym">*</span> dx <span class="sym">+</span> dy <span class="sym">*</span> dy <span class="sym">+</span> dz <span class="sym">*</span> dz<span class="sym">);
</span>    e <span class="sym">:=</span> e <span class="sym">- (</span>b.mass <span class="sym">*</span> b2.mass<span class="sym">) /</span> distance<span class="sym">;
</span>  <span class="kwa">end for</span><span class="sym">;
</span>  <span class="kwa">if</span><span class="sym">(</span>rest ~<span class="sym">=</span> #<span class="sym">())
</span>    e <span class="sym">:=</span> energy<span class="sym">(</span>rest<span class="sym">,</span>e<span class="sym">);
</span>  <span class="kwa">end if</span><span class="sym">;
</span>  e<span class="sym">;
</span><span class="kwa">end function</span> energy<span class="sym">;

</span><span class="kwa">define function</span> offset<span class="sym">-</span>momentum<span class="sym">(</span>planets <span class="sym">::</span> <span class="kwa">&lt;planet-vector&gt;</span><span class="sym">)
</span>  <span class="kwa">let</span> px <span class="sym">=</span> <span class="num">0.0d0</span><span class="sym">;
</span>  <span class="kwa">let</span> py <span class="sym">=</span> <span class="num">0.0d0</span><span class="sym">;
</span>  <span class="kwa">let</span> pz <span class="sym">=</span> <span class="num">0.0d0</span><span class="sym">;
</span>  <span class="kwa">for</span> <span class="sym">(</span>b <span class="sym">::</span> <span class="kwa">&lt;planet&gt;</span> <span class="kwa">in</span> planets<span class="sym">)
</span>    px <span class="sym">:=</span> px <span class="sym">+</span> b.vx <span class="sym">*</span> b.mass<span class="sym">;
</span>    py <span class="sym">:=</span> py <span class="sym">+</span> b.vy <span class="sym">*</span> b.mass<span class="sym">;
</span>    pz <span class="sym">:=</span> pz <span class="sym">+</span> b.vz <span class="sym">*</span> b.mass<span class="sym">;
</span>  <span class="kwa">end for</span><span class="sym">;
</span>  <span class="kwa">let</span> b <span class="sym">=</span> planets<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span>  b.vx <span class="sym">:= -</span>px <span class="sym">/</span> $solar<span class="sym">-</span>mass<span class="sym">;
</span>  b.vy <span class="sym">:= -</span>py <span class="sym">/</span> $solar<span class="sym">-</span>mass<span class="sym">;
</span>  b.vz <span class="sym">:= -</span>pz <span class="sym">/</span> $solar<span class="sym">-</span>mass<span class="sym">;
</span><span class="kwa">end function</span> offset<span class="sym">-</span>momentum<span class="sym">;

</span><span class="kwa">begin
  let</span> n <span class="sym">=</span> application<span class="sym">-</span>arguments<span class="sym">()[</span><span class="num">0</span><span class="sym">]</span>.string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">;

</span>  offset<span class="sym">-</span>momentum<span class="sym">(</span>$bodies<span class="sym">);
</span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> energy<span class="sym">(</span>$bodies<span class="sym">,</span><span class="num">0.0</span><span class="sym">));
</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> n<span class="sym">)
</span>    advance<span class="sym">(</span>$bodies<span class="sym">,</span><span class="num">0.01d0</span><span class="sym">);
</span>  <span class="kwa">end for</span><span class="sym">;
</span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> energy<span class="sym">(</span>$bodies<span class="sym">,</span><span class="num">0.0</span><span class="sym">));
</span><span class="kwa">end</span><span class="sym">;</span>
