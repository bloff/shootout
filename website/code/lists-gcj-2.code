<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// $Id: lists-gcj-2.code,v 1.2 2004-11-10 07:10:35 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">// from Stephen Darnell
</FONT></I>
<I><FONT COLOR="#B22222">//import java.io.*;		// XXX Not needed
</FONT></I><I><FONT COLOR="#B22222">//import java.util.*;	// XXX Replaced by private version
</FONT></I><I><FONT COLOR="#B22222">//import java.text.*;	// XXX Not needed
</FONT></I>
<B><FONT COLOR="#A020F0">public</FONT></B> <B><FONT COLOR="#A020F0">class</FONT></B> lists {

	<I><FONT COLOR="#B22222">// XXX Make SIZE a final static
</FONT></I>    <B><FONT COLOR="#A020F0">final</FONT></B> <B><FONT COLOR="#A020F0">static</FONT></B> <B><FONT COLOR="#A020F0">int</FONT></B> SIZE = 10000;

    <B><FONT COLOR="#A020F0">public</FONT></B> <B><FONT COLOR="#A020F0">static</FONT></B> <B><FONT COLOR="#A020F0">void</FONT></B> main(String args[])
    {
		<B><FONT COLOR="#A020F0">int</FONT></B> n = 10;
		<B><FONT COLOR="#A020F0">if</FONT></B> (args.length == 1)
		{
			n = Integer.parseInt(args[0]);
		}

		<B><FONT COLOR="#A020F0">long</FONT></B> start = System.currentTimeMillis();

		<B><FONT COLOR="#A020F0">int</FONT></B> result = 0;
		<B><FONT COLOR="#A020F0">for</FONT></B> (<B><FONT COLOR="#A020F0">int</FONT></B> i = 0; i &lt; n; i++) {
		    result = test_lists();
		}
		<B><FONT COLOR="#A020F0">long</FONT></B> stop = System.currentTimeMillis();

		System.out.println(result);
		<I><FONT COLOR="#B22222">// System.out.println(&quot;Took &quot;+(stop-start)+&quot; ms&quot;);
</FONT></I>    }

    <B><FONT COLOR="#A020F0">public</FONT></B> <B><FONT COLOR="#A020F0">static</FONT></B> <B><FONT COLOR="#A020F0">int</FONT></B> test_lists() {
	<B><FONT COLOR="#A020F0">int</FONT></B> result = 0;
	<I><FONT COLOR="#B22222">// create a list of integers (Li1) from 1 to SIZE
</FONT></I>	LinkedList Li1 = <B><FONT COLOR="#A020F0">new</FONT></B> LinkedList();
	<B><FONT COLOR="#A020F0">for</FONT></B> (<B><FONT COLOR="#A020F0">int</FONT></B> i = 1; i &lt; SIZE+1; i++) {
	    Li1.addLast(<B><FONT COLOR="#A020F0">new</FONT></B> LLEntry(i));
	}

<I><FONT COLOR="#B22222">//	System.out.println(&quot;Li1 &quot;+Li1.size());
</FONT></I>
	<I><FONT COLOR="#B22222">// copy the list to Li2 (not by individual items)
</FONT></I>	LinkedList Li2 = <B><FONT COLOR="#A020F0">new</FONT></B> LinkedList(Li1);
	LinkedList Li3 = <B><FONT COLOR="#A020F0">new</FONT></B> LinkedList();

<I><FONT COLOR="#B22222">//	System.out.println(&quot;Li2 &quot;+Li2.size()+&quot; Li3 &quot;+Li3.size());
</FONT></I>
	<I><FONT COLOR="#B22222">// remove each individual item from left side of Li2 and
</FONT></I>	<I><FONT COLOR="#B22222">// append to right side of Li3 (preserving order)
</FONT></I>	<B><FONT COLOR="#A020F0">while</FONT></B> (! Li2.isEmpty()) {
	    Li3.addLast(Li2.removeFirst());
	}

<I><FONT COLOR="#B22222">//	System.out.println(&quot;Li2 &quot;+Li2.size()+&quot; Li3 &quot;+Li3.size());
</FONT></I>
	<I><FONT COLOR="#B22222">// Li2 must now be empty
</FONT></I>	<I><FONT COLOR="#B22222">// remove each individual item from right side of Li3 and
</FONT></I>	<I><FONT COLOR="#B22222">// append to right side of Li2 (reversing list)
</FONT></I>	<B><FONT COLOR="#A020F0">while</FONT></B> (! Li3.isEmpty()) {
	    Li2.addLast(Li3.removeLast());
	}

<I><FONT COLOR="#B22222">//	System.out.println(&quot;Li2 &quot;+Li2.size()+&quot; Li3 &quot;+Li3.size());
</FONT></I>
	<I><FONT COLOR="#B22222">// Li3 must now be empty
</FONT></I>	<I><FONT COLOR="#B22222">// reverse Li1
</FONT></I>	LinkedList tmp = <B><FONT COLOR="#A020F0">new</FONT></B> LinkedList();
	<B><FONT COLOR="#A020F0">while</FONT></B> (! Li1.isEmpty()) {
	    tmp.addFirst(Li1.removeFirst());
	}
	Li1 = tmp;
	<I><FONT COLOR="#B22222">// check that first item is now SIZE
</FONT></I>	<B><FONT COLOR="#A020F0">if</FONT></B> (Li1.getFirst().val != SIZE) {
	    System.err.println(<B><FONT COLOR="#BC8F8F">&quot;first item of Li1 != SIZE&quot;</FONT></B>);
	    <B><FONT COLOR="#A020F0">return</FONT></B>(0);
	}
	<I><FONT COLOR="#B22222">// compare Li1 and Li2 for equality
</FONT></I>	<B><FONT COLOR="#A020F0">if</FONT></B> (! Li1.equals(Li2)) {
	    System.err.println(<B><FONT COLOR="#BC8F8F">&quot;Li1 and Li2 differ&quot;</FONT></B>);
	    System.err.println(<B><FONT COLOR="#BC8F8F">&quot;Li1:&quot;</FONT></B> + Li1);
	    System.err.println(<B><FONT COLOR="#BC8F8F">&quot;Li2:&quot;</FONT></B> + Li2);
	    <B><FONT COLOR="#A020F0">return</FONT></B>(0);
	}
	<I><FONT COLOR="#B22222">// return the length of the list
</FONT></I>	<B><FONT COLOR="#A020F0">return</FONT></B>(Li1.size());
    }
}

<B><FONT COLOR="#A020F0">class</FONT></B> LLEntry
{
	LLEntry prev, next;
	<B><FONT COLOR="#A020F0">int</FONT></B> val;

	LLEntry() { }

	LLEntry(<B><FONT COLOR="#A020F0">int</FONT></B> value) {
		val = value;
	}
}

<B><FONT COLOR="#A020F0">class</FONT></B> LinkedList <B><FONT COLOR="#A020F0">extends</FONT></B> LLEntry
{
	LinkedList()
	{
		next = prev = <B><FONT COLOR="#A020F0">this</FONT></B>;
	}

	LinkedList( LinkedList other )
	{
		<B><FONT COLOR="#A020F0">this</FONT></B>();

		LLEntry last = <B><FONT COLOR="#A020F0">this</FONT></B>;
		<B><FONT COLOR="#A020F0">for</FONT></B>( LLEntry curr = other.next ; curr != other ; curr = curr.next )
		{
			LLEntry entry = <B><FONT COLOR="#A020F0">new</FONT></B> LLEntry(curr.val);
			last.next = entry;
			entry.prev = last;
			last = entry;
		}
		last.next = <B><FONT COLOR="#A020F0">this</FONT></B>;
		<B><FONT COLOR="#A020F0">this</FONT></B>.prev = last;

		<B><FONT COLOR="#A020F0">this</FONT></B>.val = other.val;
	}

	<B><FONT COLOR="#A020F0">boolean</FONT></B> isEmpty()
	{
		<B><FONT COLOR="#A020F0">return</FONT></B> val == 0;
	}

	<B><FONT COLOR="#A020F0">void</FONT></B> addFirst( LLEntry entry )
	{
		entry.prev = <B><FONT COLOR="#A020F0">this</FONT></B>;
		entry.next = <B><FONT COLOR="#A020F0">this</FONT></B>.next;
		<B><FONT COLOR="#A020F0">this</FONT></B>.next.prev = entry;
		<B><FONT COLOR="#A020F0">this</FONT></B>.next = entry;
		<B><FONT COLOR="#A020F0">this</FONT></B>.val++;
	}

	<B><FONT COLOR="#A020F0">void</FONT></B> addLast( LLEntry entry )
	{
		entry.next = <B><FONT COLOR="#A020F0">this</FONT></B>;
		entry.prev = <B><FONT COLOR="#A020F0">this</FONT></B>.prev;
		<B><FONT COLOR="#A020F0">this</FONT></B>.prev.next = entry;
		<B><FONT COLOR="#A020F0">this</FONT></B>.prev = entry;
		<B><FONT COLOR="#A020F0">this</FONT></B>.val++;
	}

	LLEntry removeFirst()
	{
		LLEntry entry = <B><FONT COLOR="#A020F0">this</FONT></B>.next;
		<B><FONT COLOR="#A020F0">if</FONT></B> (entry == <B><FONT COLOR="#A020F0">this</FONT></B>)
			<B><FONT COLOR="#A020F0">return</FONT></B> <B><FONT COLOR="#A020F0">null</FONT></B>;

		<B><FONT COLOR="#A020F0">this</FONT></B>.val--;
		<B><FONT COLOR="#A020F0">this</FONT></B>.next = entry.next;
		entry.next.prev = <B><FONT COLOR="#A020F0">this</FONT></B>;
		<B><FONT COLOR="#A020F0">return</FONT></B> entry;
	}

	LLEntry removeLast()
	{
		LLEntry entry = <B><FONT COLOR="#A020F0">this</FONT></B>.prev;
		<B><FONT COLOR="#A020F0">if</FONT></B> (entry == <B><FONT COLOR="#A020F0">this</FONT></B>)
			<B><FONT COLOR="#A020F0">return</FONT></B> <B><FONT COLOR="#A020F0">null</FONT></B>;

		<B><FONT COLOR="#A020F0">this</FONT></B>.val--;
		<B><FONT COLOR="#A020F0">this</FONT></B>.prev = entry.prev;
		entry.prev.next = <B><FONT COLOR="#A020F0">this</FONT></B>;
		<B><FONT COLOR="#A020F0">return</FONT></B> entry;
	}

	LLEntry getFirst()
	{
		<B><FONT COLOR="#A020F0">return</FONT></B> <B><FONT COLOR="#A020F0">this</FONT></B>.next;
	}

	<B><FONT COLOR="#A020F0">int</FONT></B> size()
	{
<I><FONT COLOR="#B22222">// Simple sanity checking code:
</FONT></I><I><FONT COLOR="#B22222">//		int n = 0;
</FONT></I><I><FONT COLOR="#B22222">//		for( LLEntry curr = this.next; curr != this ; curr = curr.next)
</FONT></I><I><FONT COLOR="#B22222">//		{
</FONT></I><I><FONT COLOR="#B22222">//			n++;
</FONT></I><I><FONT COLOR="#B22222">//		}
</FONT></I><I><FONT COLOR="#B22222">//		if (n != this.val)
</FONT></I><I><FONT COLOR="#B22222">//			throw new Error(&quot;size mismatch&quot;);
</FONT></I>
		<B><FONT COLOR="#A020F0">return</FONT></B> <B><FONT COLOR="#A020F0">this</FONT></B>.val;
	}

	<B><FONT COLOR="#A020F0">boolean</FONT></B> equals(LinkedList other)
	{
		LLEntry myItem = <B><FONT COLOR="#A020F0">this</FONT></B>;
		LLEntry theirItem = other;
		<B><FONT COLOR="#A020F0">do</FONT></B>
		{
			<B><FONT COLOR="#A020F0">if</FONT></B> (myItem.val != theirItem.val)
				<B><FONT COLOR="#A020F0">return</FONT></B> <B><FONT COLOR="#A020F0">false</FONT></B>;
			theirItem = theirItem.next;
			myItem = myItem.next;
		}
		<B><FONT COLOR="#A020F0">while</FONT></B>(myItem != <B><FONT COLOR="#A020F0">this</FONT></B>);
		<B><FONT COLOR="#A020F0">return</FONT></B> <B><FONT COLOR="#A020F0">true</FONT></B>;
	}
}</pre></td></tr></table>
