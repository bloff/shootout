#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="slc">;;; $Id: wc-guile.code,v 1.5 2005-04-13 15:29:53 bfulgham Exp $
</span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="slc">;;; from Dale P. Smith
</span>
<span class="sym">(</span>define <span class="sym">(</span>wc iport<span class="sym">)
  (</span>let <span class="sym">((</span>chars <span class="num">0</span><span class="sym">) (</span>words <span class="num">0</span><span class="sym">) (</span>lines <span class="num">0</span><span class="sym">) (</span>inword <span class="num">0</span><span class="sym">) (</span>x #f<span class="sym">))
    (</span>let loop <span class="sym">()
      (</span><span class="kwa">set</span><span class="sym">!</span> x <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>char iport<span class="sym">))
      (</span><span class="kwa">if</span> <span class="sym">(</span>eof<span class="sym">-</span>object? x<span class="sym">)
	  (</span>begin <span class="sym">(</span>display lines<span class="sym">) (</span>display <span class="str">&quot; &quot;</span><span class="sym">) (</span>display words<span class="sym">)
		 (</span>display <span class="str">&quot; &quot;</span><span class="sym">) (</span>display chars<span class="sym">) (</span>newline<span class="sym">))
	  (</span>begin
	    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> chars <span class="sym">(+</span> <span class="num">1</span> chars<span class="sym">))
	    (</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>char<span class="sym">-</span>whitespace? x<span class="sym">))
		(</span><span class="kwa">set</span><span class="sym">!</span> inword <span class="num">1</span><span class="sym">)
		(</span>begin
		  <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> words <span class="sym">(+</span> words inword<span class="sym">))
		  (</span><span class="kwa">set</span><span class="sym">!</span> inword <span class="num">0</span><span class="sym">)
		  (</span><span class="kwa">if</span> <span class="sym">(</span>char<span class="sym">=</span>? x #\newline<span class="sym">)
		      (</span><span class="kwa">set</span><span class="sym">!</span> lines <span class="sym">(+</span> <span class="num">1</span> lines<span class="sym">)))))
	    (</span>loop<span class="sym">))))))

(</span>wc <span class="sym">(</span>current<span class="sym">-</span>input<span class="sym">-</span>port<span class="sym">))</span>
