#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp

# loops <span class="sym">-</span> benchmark
#
# newLISP also has a <span class="str">'for'</span> which takes an initilizer for the looping
# variable <span class="kwa">and</span> is a bit slower
#
# Contributed by Lutz Mueller

<span class="sym">(</span><span class="kwa">set</span> <span class="str">'n (integer (nth 2 (main-args))))</span>
<span class="str">(set '</span>x <span class="num">0</span><span class="sym">)</span>

<span class="sym">(</span>dotimes <span class="sym">(</span>a n<span class="sym">)</span>
	<span class="sym">(</span>dotimes <span class="sym">(</span>b n<span class="sym">)</span>
		<span class="sym">(</span>dotimes <span class="sym">(</span>c n<span class="sym">)</span>
			<span class="sym">(</span>dotimes <span class="sym">(</span>d n<span class="sym">)</span>
				<span class="sym">(</span>dotimes <span class="sym">(</span>e n<span class="sym">)</span>
					<span class="sym">(</span>dotimes <span class="sym">(</span>f n<span class="sym">)</span>
						<span class="sym">(</span>inc <span class="str">'x)))))))</span>
<span class="str"></span>
<span class="str">(println x)</span>
<span class="str"></span>
<span class="str">(exit)</span>
