<span class="dir">#!/usr/bin/pike</span>
<span class="slc">// -*- mode: pike -*-</span>
<span class="slc">// $Id: wordfreq-pike.code,v 1.9 2006-09-20 05:52:51 bfulgham Exp $</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// from: Fredrik Noring</span>

<span class="kwb">void</span> <span class="kwd">main</span><span class="sym">()</span>
<span class="sym">{</span>
    <span class="kwb">mapping</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">:</span><span class="kwb">int</span><span class="sym">)</span> dictionary <span class="sym">= ([]);</span>
    <span class="kwb">string</span> buffer <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;</span>

    <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> f <span class="sym">=</span> <span class="kwa">filter</span><span class="sym">(</span><span class="kwa">map</span><span class="sym">(</span><span class="kwa">enumerate</span><span class="sym">(</span><span class="num">128</span><span class="sym">),</span>
				   <span class="kwd">lambda</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">)</span>
				   <span class="sym">{</span>
				       return <span class="sym">!(</span><span class="str">'A'</span> <span class="sym">&lt;=</span> i <span class="sym">&amp;&amp;</span> i <span class="sym">&lt;=</span> <span class="str">'Z'</span> <span class="sym">||</span>
						<span class="str">'a'</span> <span class="sym">&lt;=</span> i <span class="sym">&amp;&amp;</span> i <span class="sym">&lt;=</span> <span class="str">'z'</span> <span class="sym">||</span>
						i <span class="sym">==</span> <span class="str">' '</span><span class="sym">) &amp;&amp;</span>
					      <span class="kwa">sprintf</span><span class="sym">(</span><span class="str">&quot;%c&quot;</span><span class="sym">,</span> i<span class="sym">);</span>
				   <span class="sym">}),</span> `<span class="sym">!=,</span> <span class="num">0</span><span class="sym">);</span>
    <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> t <span class="sym">=</span> <span class="kwa">allocate</span><span class="sym">(</span><span class="kwa">sizeof</span><span class="sym">(</span>f<span class="sym">),</span> <span class="str">&quot; &quot;</span><span class="sym">);</span>

    <span class="kwd">for</span><span class="sym">(;;)</span>
    <span class="sym">{</span>
	  <span class="kwb">string</span> data <span class="sym">=</span>
	      buffer <span class="sym">+</span> <span class="kwa">replace</span><span class="sym">(</span><span class="kwa">lower_case</span><span class="sym">(</span>Stdio.stdin.<span class="kwd">read</span><span class="sym">(</span><span class="num">4096</span><span class="sym">)),</span> f<span class="sym">,</span> t<span class="sym">);</span>

	  <span class="kwd">if</span><span class="sym">(!</span><span class="kwa">sizeof</span><span class="sym">(</span>data<span class="sym">))</span>
	      break<span class="sym">;</span>

	  <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> words <span class="sym">=</span> data<span class="sym">/</span><span class="str">&quot; &quot;</span><span class="sym">;</span>

	  <span class="kwd">if</span><span class="sym">(</span><span class="num">1</span> <span class="sym">&lt;</span> <span class="kwa">sizeof</span><span class="sym">(</span>words<span class="sym">) &amp;&amp;</span> <span class="kwa">sizeof</span><span class="sym">(</span>words<span class="sym">[-</span><span class="num">1</span><span class="sym">]))</span>
	      buffer <span class="sym">=</span> words<span class="sym">[-</span><span class="num">1</span><span class="sym">],</span>
	       words <span class="sym">=</span> words<span class="sym">[</span>..<span class="kwa">sizeof</span><span class="sym">(</span>words<span class="sym">)-</span><span class="num">2</span><span class="sym">];</span>
	  else
	      buffer <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;</span>

	  <span class="kwd">foreach</span><span class="sym">(</span>words<span class="sym">,</span> <span class="kwb">string</span> word<span class="sym">)</span>
	      dictionary<span class="sym">[</span>word<span class="sym">]++;</span>
    <span class="sym">}</span>

    <span class="kwa">m_delete</span><span class="sym">(</span>dictionary<span class="sym">,</span> <span class="str">&quot;&quot;</span><span class="sym">);</span>

    <span class="kwb">mapping</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">:</span><span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">))</span> revdictionary <span class="sym">= ([]);</span>
    <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> words <span class="sym">=</span> <span class="kwa">indices</span><span class="sym">(</span>dictionary<span class="sym">);</span>
    <span class="kwb">array</span><span class="sym">(</span><span class="kwb">int</span><span class="sym">)</span> freqs <span class="sym">=</span> <span class="kwa">values</span><span class="sym">(</span>dictionary<span class="sym">);</span>

    <span class="kwd">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> <span class="kwa">sizeof</span><span class="sym">(</span>dictionary<span class="sym">);</span> i<span class="sym">++)</span>
	  revdictionary<span class="sym">[</span>freqs<span class="sym">[</span>i<span class="sym">]] += ({</span> words<span class="sym">[</span>i<span class="sym">] });</span>

    freqs <span class="sym">=</span> <span class="kwa">sort</span><span class="sym">(</span><span class="kwa">indices</span><span class="sym">(</span>revdictionary<span class="sym">));</span>
    <span class="kwd">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="kwa">sizeof</span><span class="sym">(</span>freqs<span class="sym">)-</span><span class="num">1</span><span class="sym">;</span> <span class="num">0</span> <span class="sym">&lt;=</span> i<span class="sym">;</span> i<span class="sym">--)</span>
    <span class="sym">{</span>
	  <span class="kwb">int</span> freq <span class="sym">=</span> freqs<span class="sym">[</span>i<span class="sym">];</span>
	  words <span class="sym">=</span> <span class="kwa">sort</span><span class="sym">(</span>revdictionary<span class="sym">[</span>freq<span class="sym">]);</span>

	  <span class="kwd">for</span><span class="sym">(</span><span class="kwb">int</span> j <span class="sym">=</span> <span class="kwa">sizeof</span><span class="sym">(</span>words<span class="sym">)-</span><span class="num">1</span><span class="sym">;</span> <span class="num">0</span> <span class="sym">&lt;=</span> j<span class="sym">;</span> j<span class="sym">--)</span>
	      <span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;%7d %s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> freq<span class="sym">,</span> words<span class="sym">[</span>j<span class="sym">]);</span>
    <span class="sym">}</span>
<span class="sym">}</span>
