<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/<B><FONT COLOR="#5F9EA0">usr/bin/pike</FONT></B>
<I><FONT COLOR="#B22222">// -*- mode: pike -*-
</FONT></I><I><FONT COLOR="#B22222">// $Id: wordfreq-pike.code,v 1.1 2004-11-02 08:53:35 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://shootout.alioth.debian.org/
</FONT></I><I><FONT COLOR="#B22222">// from: Fredrik Noring
</FONT></I>
<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">main</FONT></B>()
{
    mapping(string:<B><FONT COLOR="#228B22">int</FONT></B>) dictionary = ([]);
    string buffer = <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>;

    array(string) f = filter(map(enumerate(128),
				   lambda(<B><FONT COLOR="#228B22">int</FONT></B> i)
				   {
				       <B><FONT COLOR="#A020F0">return</FONT></B> !(<B><FONT COLOR="#BC8F8F">'A'</FONT></B> &lt;= i &amp;&amp; i &lt;= <B><FONT COLOR="#BC8F8F">'Z'</FONT></B> ||
						<B><FONT COLOR="#BC8F8F">'a'</FONT></B> &lt;= i &amp;&amp; i &lt;= <B><FONT COLOR="#BC8F8F">'z'</FONT></B> ||
						i == <B><FONT COLOR="#BC8F8F">' '</FONT></B>) &amp;&amp;
					      sprintf(<B><FONT COLOR="#BC8F8F">&quot;%c&quot;</FONT></B>, i);
				   }), `!=, 0);
    array(string) t = allocate(<B><FONT COLOR="#A020F0">sizeof</FONT></B>(f), <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>);

    <B><FONT COLOR="#A020F0">for</FONT></B>(;;)
    {
	  string data =
	      buffer + replace(lower_case(Stdio.stdin.read(4096)), f, t);
	  
	  <B><FONT COLOR="#A020F0">if</FONT></B>(!<B><FONT COLOR="#A020F0">sizeof</FONT></B>(data))
	      <B><FONT COLOR="#A020F0">break</FONT></B>;
	  
	  array(string) words = data/<B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>;

	  <B><FONT COLOR="#A020F0">if</FONT></B>(1 &lt; <B><FONT COLOR="#A020F0">sizeof</FONT></B>(words) &amp;&amp; <B><FONT COLOR="#A020F0">sizeof</FONT></B>(words[-1]))
	      buffer = words[-1],
	       words = words[..<B><FONT COLOR="#A020F0">sizeof</FONT></B>(words)-2];
	  <B><FONT COLOR="#A020F0">else</FONT></B>
	      buffer = <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>;

	  foreach(words, string word)
	      dictionary[word]++;
    }
    
    m_delete(dictionary, <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>);

    mapping(<B><FONT COLOR="#228B22">int</FONT></B>:array(string)) revdictionary = ([]);
    array(string) words = indices(dictionary);
    array(<B><FONT COLOR="#228B22">int</FONT></B>) freqs = values(dictionary);

    <B><FONT COLOR="#A020F0">for</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> i = 0; i &lt; <B><FONT COLOR="#A020F0">sizeof</FONT></B>(dictionary); i++)
	  revdictionary[freqs[i]] += ({ words[i] });

    freqs = sort(indices(revdictionary));
    <B><FONT COLOR="#A020F0">for</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> i = <B><FONT COLOR="#A020F0">sizeof</FONT></B>(freqs)-1; 0 &lt;= i; i--)
    {
	  <B><FONT COLOR="#228B22">int</FONT></B> freq = freqs[i];
	  words = sort(revdictionary[freq]);
	  
	  <B><FONT COLOR="#A020F0">for</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> j = <B><FONT COLOR="#A020F0">sizeof</FONT></B>(words)-1; 0 &lt;= j; j--)
	      write(<B><FONT COLOR="#BC8F8F">&quot;%7d %s\n&quot;</FONT></B>, freq, words[j]);
    }
}</pre></td></tr></table>
