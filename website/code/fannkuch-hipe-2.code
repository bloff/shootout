<span class="slc">%%%-------------------------------------------------------------------</span>
<span class="slc">%%% File    : fannkuch.erl</span>
<span class="slc">%%% Author  : Mats Cronqvist &lt;locmacr&#64;mwlx084&gt;</span>
<span class="slc">%%% Description :</span>
<span class="slc">%%%</span>
<span class="slc">%%% Created : 25 Apr 2006 by Mats Cronqvist &lt;locmacr&#64;mwlx084&gt;</span>
<span class="slc">%%%-------------------------------------------------------------------</span>
<span class="sym">-</span><span class="kwa">module</span><span class="sym">(</span>fannkuch<span class="sym">).</span>

<span class="sym">-</span><span class="kwa">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">]).</span>

<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),</span>
    <span class="kwd">main</span><span class="sym">(</span>N<span class="sym">),</span>
    erlang<span class="sym">:</span><span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="kwd">main</span><span class="sym">(</span>N<span class="sym">)</span> <span class="kwa">when</span> N <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">-&gt;</span>
    <span class="kwb">put</span><span class="sym">(</span>max<span class="sym">,</span><span class="num">0</span><span class="sym">),</span>
    <span class="kwb">put</span><span class="sym">(</span>print<span class="sym">,</span><span class="num">30</span><span class="sym">),</span>
    <span class="kwd">perm</span><span class="sym">(</span>N<span class="sym">,</span><span class="kwd">init</span><span class="sym">(</span>N<span class="sym">)),</span>
    io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;Pfannkuchen(~p) = ~p~n&quot;</span><span class="sym">, [</span>N<span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>max<span class="sym">)]).</span>

<span class="slc">%% perm and prot generates the permutations in the right order and</span>
<span class="slc">%% calls x/1 for each one</span>

<span class="kwd">perm</span><span class="sym">(</span>N<span class="sym">,</span>Data<span class="sym">)</span> <span class="kwa">when</span> <span class="kwb">length</span><span class="sym">(</span>Data<span class="sym">) &lt;</span> N <span class="sym">-&gt;</span> Data<span class="sym">;</span>
<span class="kwd">perm</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span>Data<span class="sym">) -&gt;</span> <span class="kwd">x</span><span class="sym">(</span><span class="kwd">flip</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="kwd">x</span><span class="sym">(</span><span class="kwd">flip</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span><span class="kwd">x</span><span class="sym">(</span><span class="kwd">flip</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="kwd">x</span><span class="sym">(</span><span class="kwd">flip</span><span class="sym">(</span><span class="num">2</span><span class="sym">,</span><span class="kwd">x</span><span class="sym">(</span><span class="kwd">flip</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span><span class="kwd">x</span><span class="sym">(</span>Data<span class="sym">)))))))))));</span>
<span class="kwd">perm</span><span class="sym">(</span>N<span class="sym">,</span>Data<span class="sym">) -&gt;</span> <span class="kwd">prot</span><span class="sym">(</span>N<span class="sym">,</span>N<span class="sym">,</span>Data<span class="sym">).</span>

<span class="kwd">prot</span><span class="sym">(</span>_N<span class="sym">,</span><span class="num">0</span><span class="sym">,</span>Data<span class="sym">) -&gt;</span> Data<span class="sym">;</span>
<span class="kwd">prot</span><span class="sym">(</span>N<span class="sym">,</span>M<span class="sym">,</span>Data<span class="sym">) -&gt;</span> <span class="kwd">perm</span><span class="sym">(</span>N<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>Data<span class="sym">),</span> <span class="kwd">prot</span><span class="sym">(</span>N<span class="sym">,</span>M<span class="sym">-</span><span class="num">1</span><span class="sym">,</span><span class="kwd">rotate</span><span class="sym">(</span>N<span class="sym">,</span>Data<span class="sym">)).</span>

<span class="slc">%% x/1 is the action function. called once for each permutation. calls</span>
<span class="slc">%% kuch/1 to get the number of flips</span>
<span class="kwd">x</span><span class="sym">(</span>Data<span class="sym">) -&gt;</span>
    <span class="kwa">case</span> <span class="kwb">get</span><span class="sym">(</span>print<span class="sym">)</span> <span class="kwa">of</span>
 	<span class="num">0</span> <span class="sym">-&gt;</span> ok<span class="sym">;</span>
 	N <span class="sym">-&gt;</span> <span class="kwd">flush</span><span class="sym">(</span>Data<span class="sym">),</span><span class="kwb">put</span><span class="sym">(</span>print<span class="sym">,</span>N<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
    <span class="kwa">end</span><span class="sym">,</span>
    <span class="kwa">case</span> <span class="kwb">get</span><span class="sym">(</span>max<span class="sym">) &lt; (</span>K <span class="sym">=</span> <span class="kwd">kuch</span><span class="sym">(</span>Data<span class="sym">,</span><span class="num">0</span><span class="sym">))</span> <span class="kwa">of</span>
 	true <span class="sym">-&gt;</span> <span class="kwb">put</span><span class="sym">(</span>max<span class="sym">,</span>K<span class="sym">);</span>
 	false <span class="sym">-&gt;</span> ok
    <span class="kwa">end</span><span class="sym">,</span>
    Data<span class="sym">.</span>

<span class="slc">%% this is the actual flipping function. return number of flips</span>
<span class="kwd">kuch</span><span class="sym">(</span>Data<span class="sym">,</span>N<span class="sym">) -&gt;</span>
    <span class="kwa">case</span> <span class="kwd">head</span><span class="sym">(</span>Data<span class="sym">)</span> <span class="kwa">of</span>
	<span class="num">1</span> <span class="sym">-&gt;</span> N<span class="sym">;</span>
	M <span class="sym">-&gt;</span> <span class="kwd">kuch</span><span class="sym">(</span><span class="kwd">reverse</span><span class="sym">(</span>M<span class="sym">,</span>Data<span class="sym">),</span>N<span class="sym">+</span><span class="num">1</span><span class="sym">)</span>
    <span class="kwa">end</span><span class="sym">.</span>


<span class="slc">%% primitives for our data model</span>
<span class="slc">%%</span>
<span class="slc">%% init(Length) - create new struct</span>
<span class="slc">%% head(Data) - return first element</span>
<span class="slc">%% reverse(N, Data) - reverse first N elements</span>
<span class="slc">%% rotate(N, Data) - rotate first N elements</span>
<span class="slc">%% flip(N, Data) - exchange N:th and N+1:th element</span>
<span class="slc">%% flush(Data) - flush to screen</span>

<span class="kwd">init</span><span class="sym">(</span>N<span class="sym">) -&gt;</span> lists<span class="sym">:</span><span class="kwd">seq</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span>N<span class="sym">).</span>

<span class="kwd">head</span><span class="sym">(</span>L<span class="sym">) -&gt;</span> <span class="kwb">hd</span><span class="sym">(</span>L<span class="sym">).</span>

<span class="kwd">reverse</span><span class="sym">(</span><span class="num">2</span><span class="sym">,[</span>H1<span class="sym">,</span>H2<span class="sym">|</span>L<span class="sym">]) -&gt;</span>
    <span class="sym">[</span>H2<span class="sym">,</span>H1<span class="sym">|</span>L<span class="sym">];</span>
<span class="kwd">reverse</span><span class="sym">(</span><span class="num">3</span><span class="sym">,[</span>H1<span class="sym">,</span>H2<span class="sym">,</span>H3<span class="sym">|</span>L<span class="sym">]) -&gt;</span>
    <span class="sym">[</span>H3<span class="sym">,</span>H2<span class="sym">,</span>H1<span class="sym">|</span>L<span class="sym">];</span>
<span class="kwd">reverse</span><span class="sym">(</span><span class="num">4</span><span class="sym">,[</span>H1<span class="sym">,</span>H2<span class="sym">,</span>H3<span class="sym">,</span>H4<span class="sym">|</span>L<span class="sym">]) -&gt;</span>
    <span class="sym">[</span>H4<span class="sym">,</span>H3<span class="sym">,</span>H2<span class="sym">,</span>H1<span class="sym">|</span>L<span class="sym">];</span>
<span class="kwd">reverse</span><span class="sym">(</span><span class="num">5</span><span class="sym">,[</span>H1<span class="sym">,</span>H2<span class="sym">,</span>H3<span class="sym">,</span>H4<span class="sym">,</span>H5<span class="sym">|</span>L<span class="sym">]) -&gt;</span>
    <span class="sym">[</span>H5<span class="sym">,</span>H4<span class="sym">,</span>H3<span class="sym">,</span>H2<span class="sym">,</span>H1<span class="sym">|</span>L<span class="sym">];</span>
<span class="kwd">reverse</span><span class="sym">(</span><span class="num">6</span><span class="sym">,[</span>H1<span class="sym">,</span>H2<span class="sym">,</span>H3<span class="sym">,</span>H4<span class="sym">,</span>H5<span class="sym">,</span>H6<span class="sym">|</span>L<span class="sym">]) -&gt;</span>
    <span class="sym">[</span>H6<span class="sym">,</span>H5<span class="sym">,</span>H4<span class="sym">,</span>H3<span class="sym">,</span>H2<span class="sym">,</span>H1<span class="sym">|</span>L<span class="sym">];</span>
<span class="kwd">reverse</span><span class="sym">(</span><span class="num">7</span><span class="sym">,[</span>H1<span class="sym">,</span>H2<span class="sym">,</span>H3<span class="sym">,</span>H4<span class="sym">,</span>H5<span class="sym">,</span>H6<span class="sym">,</span>H7<span class="sym">|</span>L<span class="sym">]) -&gt;</span>
    <span class="sym">[</span>H7<span class="sym">,</span>H6<span class="sym">,</span>H5<span class="sym">,</span>H4<span class="sym">,</span>H3<span class="sym">,</span>H2<span class="sym">,</span>H1<span class="sym">|</span>L<span class="sym">];</span>
<span class="kwd">reverse</span><span class="sym">(</span><span class="num">8</span><span class="sym">,[</span>H1<span class="sym">,</span>H2<span class="sym">,</span>H3<span class="sym">,</span>H4<span class="sym">,</span>H5<span class="sym">,</span>H6<span class="sym">,</span>H7<span class="sym">,</span>H8<span class="sym">|</span>L<span class="sym">]) -&gt;</span>
    <span class="sym">[</span>H8<span class="sym">,</span>H7<span class="sym">,</span>H6<span class="sym">,</span>H5<span class="sym">,</span>H4<span class="sym">,</span>H3<span class="sym">,</span>H2<span class="sym">,</span>H1<span class="sym">|</span>L<span class="sym">];</span>
<span class="kwd">reverse</span><span class="sym">(</span><span class="num">9</span><span class="sym">,[</span>H1<span class="sym">,</span>H2<span class="sym">,</span>H3<span class="sym">,</span>H4<span class="sym">,</span>H5<span class="sym">,</span>H6<span class="sym">,</span>H7<span class="sym">,</span>H8<span class="sym">,</span>H9<span class="sym">|</span>L<span class="sym">]) -&gt;</span>
    <span class="sym">[</span>H9<span class="sym">,</span>H8<span class="sym">,</span>H7<span class="sym">,</span>H6<span class="sym">,</span>H5<span class="sym">,</span>H4<span class="sym">,</span>H3<span class="sym">,</span>H2<span class="sym">,</span>H1<span class="sym">|</span>L<span class="sym">];</span>
<span class="kwd">reverse</span><span class="sym">(</span><span class="num">10</span><span class="sym">,[</span>H1<span class="sym">,</span>H2<span class="sym">,</span>H3<span class="sym">,</span>H4<span class="sym">,</span>H5<span class="sym">,</span>H6<span class="sym">,</span>H7<span class="sym">,</span>H8<span class="sym">,</span>H9<span class="sym">,</span>H0<span class="sym">|</span>L<span class="sym">]) -&gt;</span>
    <span class="sym">[</span>H0<span class="sym">,</span>H9<span class="sym">,</span>H8<span class="sym">,</span>H7<span class="sym">,</span>H6<span class="sym">,</span>H5<span class="sym">,</span>H4<span class="sym">,</span>H3<span class="sym">,</span>H2<span class="sym">,</span>H1<span class="sym">|</span>L<span class="sym">];</span>
<span class="kwd">reverse</span><span class="sym">(</span>M<span class="sym">,</span>L<span class="sym">) -&gt;</span>
    <span class="sym">{</span>H<span class="sym">,</span>T<span class="sym">} =</span> lists<span class="sym">:</span><span class="kwd">split</span><span class="sym">(</span>M<span class="sym">,</span>L<span class="sym">),</span>
    lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">(</span>H<span class="sym">)++</span>T<span class="sym">.</span>

<span class="kwd">rotate</span><span class="sym">(</span><span class="num">4</span><span class="sym">,[</span>H1<span class="sym">,</span>H2<span class="sym">,</span>H3<span class="sym">,</span>H4<span class="sym">|</span>T<span class="sym">]) -&gt; [</span>H2<span class="sym">,</span>H3<span class="sym">,</span>H4<span class="sym">,</span>H1<span class="sym">|</span>T<span class="sym">];</span>
<span class="kwd">rotate</span><span class="sym">(</span><span class="num">5</span><span class="sym">,[</span>H1<span class="sym">,</span>H2<span class="sym">,</span>H3<span class="sym">,</span>H4<span class="sym">,</span>H5<span class="sym">|</span>T<span class="sym">]) -&gt; [</span>H2<span class="sym">,</span>H3<span class="sym">,</span>H4<span class="sym">,</span>H5<span class="sym">,</span>H1<span class="sym">|</span>T<span class="sym">];</span>
<span class="kwd">rotate</span><span class="sym">(</span>N<span class="sym">,</span>L<span class="sym">) -&gt; {[</span>H<span class="sym">|</span>Hs<span class="sym">],</span>Ts<span class="sym">} =</span> lists<span class="sym">:</span><span class="kwd">split</span><span class="sym">(</span>N<span class="sym">,</span>L<span class="sym">),</span> Hs<span class="sym">++[</span>H<span class="sym">|</span>Ts<span class="sym">].</span>

<span class="kwd">flip</span><span class="sym">(</span><span class="num">1</span><span class="sym">,[</span>H1<span class="sym">,</span>H2<span class="sym">|</span>T<span class="sym">]) -&gt; [</span>H2<span class="sym">,</span>H1<span class="sym">|</span>T<span class="sym">];</span>
<span class="kwd">flip</span><span class="sym">(</span><span class="num">2</span><span class="sym">,[</span>H<span class="sym">,</span>H1<span class="sym">,</span>H2<span class="sym">|</span>T<span class="sym">]) -&gt; [</span>H<span class="sym">,</span>H2<span class="sym">,</span>H1<span class="sym">|</span>T<span class="sym">].</span>

<span class="kwd">flush</span><span class="sym">(</span>Data<span class="sym">) -&gt;</span>
    lists<span class="sym">:</span><span class="kwd">foreach</span><span class="sym">(</span><span class="kwa">fun</span><span class="sym">(</span>I<span class="sym">)-&gt;</span>io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;~p&quot;</span><span class="sym">,[</span>I<span class="sym">])</span> <span class="kwa">end</span><span class="sym">,</span> Data<span class="sym">),</span>
    io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;~n&quot;</span><span class="sym">).</span>
