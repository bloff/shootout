<span class="com">(* reverse-complement.mlton
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * contributed by Troestler Christophe
 * translated by sweeks&#64;sweeks.com for MLton/SML from the OCaml version
 *
 *)</span>

<span class="kwa">val</span> complement <span class="sym">=
</span>  <span class="kwa">let
     val</span> cplt <span class="sym">=</span> Array.tabulate <span class="sym">(</span><span class="num">256</span><span class="sym">,</span> chr<span class="sym">)
</span>     <span class="kwa">fun</span> u <span class="sym">(</span>c<span class="sym">,</span> c'<span class="sym">) =</span> Array.update <span class="sym">(</span>cplt<span class="sym">,</span> ord c<span class="sym">,</span> c'<span class="sym">)
</span>     <span class="kwa">val</span> <span class="sym">() =
</span>	<span class="kwa">List</span>.app
	<span class="sym">(</span><span class="kwa">fn</span> <span class="sym">(</span>c1<span class="sym">,</span> c2<span class="sym">) =&gt;
	 (</span>u <span class="sym">(</span>c1<span class="sym">,</span> c2<span class="sym">);</span> u <span class="sym">(</span>c2<span class="sym">,</span> c1<span class="sym">)
	  ;</span> u <span class="sym">(</span><span class="kwa">Char</span>.toLower c1<span class="sym">,</span> c2<span class="sym">);</span> u <span class="sym">(</span><span class="kwa">Char</span>.toLower c2<span class="sym">,</span> c1<span class="sym">)))
	[(</span>#<span class="str">&quot;A&quot;</span><span class="sym">,</span>#<span class="str">&quot;T&quot;</span><span class="sym">), (</span>#<span class="str">&quot;C&quot;</span><span class="sym">,</span>#<span class="str">&quot;G&quot;</span><span class="sym">), (</span>#<span class="str">&quot;B&quot;</span><span class="sym">,</span>#<span class="str">&quot;V&quot;</span><span class="sym">), (</span>#<span class="str">&quot;D&quot;</span><span class="sym">,</span>#<span class="str">&quot;H&quot;</span><span class="sym">), (</span>#<span class="str">&quot;K&quot;</span><span class="sym">,</span>#<span class="str">&quot;M&quot;</span><span class="sym">),
	 (</span>#<span class="str">&quot;R&quot;</span><span class="sym">,</span>#<span class="str">&quot;Y&quot;</span><span class="sym">)]
</span>  <span class="kwa">in
     fn</span> c <span class="sym">=&gt;</span> Array.sub <span class="sym">(</span>cplt<span class="sym">,</span> ord c<span class="sym">)
</span>  <span class="kwa">end

</span><span class="com">(* [reverse s] reverse-complement the string [s] in place. *)</span>
<span class="kwa">fun</span> reverse <span class="sym">(</span>s<span class="sym">:</span> char array<span class="sym">):</span> unit <span class="sym">=
</span>  <span class="kwa">let
     fun</span> rev <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">) =
</span>	<span class="kwa">if</span> i <span class="sym">&gt;=</span> j
	   <span class="kwa">then</span> <span class="sym">()
</span>	<span class="kwa">else
	   let
	      val</span> si <span class="sym">=</span> Array.sub <span class="sym">(</span>s<span class="sym">,</span> i<span class="sym">)
</span>	      <span class="kwa">val</span> <span class="sym">() =</span> Array.update <span class="sym">(</span>s<span class="sym">,</span> i<span class="sym">,</span> complement <span class="sym">(</span>Array.sub <span class="sym">(</span>s<span class="sym">,</span> j<span class="sym">)))
</span>	      <span class="kwa">val</span> <span class="sym">() =</span> Array.update <span class="sym">(</span>s<span class="sym">,</span> j<span class="sym">,</span> complement si<span class="sym">)
</span>	   <span class="kwa">in
</span>	      rev <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> j <span class="num">- 1</span><span class="sym">)
</span>	   <span class="kwa">end
  in
</span>     rev <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> Array.length s <span class="num">- 1</span><span class="sym">)
</span>  <span class="kwa">end

fun</span> printFasta <span class="sym">(</span>dna<span class="sym">:</span> char array<span class="sym">):</span> unit <span class="sym">=
</span>  <span class="kwa">let
     fun</span> output1 c <span class="sym">=</span> <span class="kwa">TextIO</span>.output1 <span class="sym">(</span><span class="kwa">TextIO</span>.stdOut<span class="sym">,</span> c<span class="sym">)
</span>     <span class="kwa">val</span> n <span class="sym">=</span> Array.length dna
     <span class="kwa">fun</span> grab i <span class="sym">=
</span>	<span class="kwa">if</span> i <span class="sym">=</span> n
	   <span class="kwa">then</span> <span class="sym">()
</span>	<span class="kwa">else
	   let
	      fun</span> loop <span class="sym">(</span>i<span class="sym">,</span> count<span class="sym">) =
</span>		 <span class="kwa">if</span> <span class="num">0</span> <span class="sym">=</span> count
		    <span class="kwa">then</span> <span class="sym">(</span>output1 #<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;</span> grab i<span class="sym">)
</span>		 <span class="kwa">else</span> <span class="sym">(</span>output1 <span class="sym">(</span>Array.sub <span class="sym">(</span>dna<span class="sym">,</span> i<span class="sym">));</span> loop <span class="sym">(</span>i <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> count <span class="num">- 1</span><span class="sym">))
</span>	   <span class="kwa">in
</span>	      loop <span class="sym">(</span>i<span class="sym">,</span> <span class="kwa">Int</span>.min <span class="sym">(</span>n <span class="sym">-</span> i<span class="sym">,</span> <span class="num">60</span><span class="sym">))
</span>	   <span class="kwa">end
  in
</span>     grab <span class="num">0
</span>  <span class="kwa">end

fun</span> one lines <span class="sym">=
</span>   <span class="kwa">let
      val</span> n <span class="sym">=</span> foldl <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">(</span>s<span class="sym">,</span> n<span class="sym">) =&gt;</span> n <span class="sym">+</span> size s <span class="num">- 1</span><span class="sym">)</span> <span class="num">0</span> lines
      <span class="kwa">val</span> a <span class="sym">=</span> Array.array <span class="sym">(</span>n<span class="sym">,</span> #<span class="str">&quot;</span><span class="esc">\000</span><span class="str">&quot;</span><span class="sym">)
</span>      <span class="kwa">val</span> _ <span class="sym">=
</span>	 foldl <span class="sym">(</span><span class="kwa">fn</span> <span class="sym">(</span>s<span class="sym">,</span> i<span class="sym">) =&gt;
</span>		<span class="kwa">let
		   fun</span> loop <span class="sym">(</span>i<span class="sym">,</span> j<span class="sym">)  =
</span>		      <span class="kwa">if</span> j <span class="sym">&lt;</span> <span class="num">0
</span>			 <span class="kwa">then</span> i
		      <span class="kwa">else</span> <span class="sym">(</span>Array.update <span class="sym">(</span>a<span class="sym">,</span> i<span class="sym">,</span> <span class="kwa">String</span>.sub <span class="sym">(</span>s<span class="sym">,</span> j<span class="sym">))
			    ;</span> loop <span class="sym">(</span>i <span class="num">- 1</span><span class="sym">,</span> j <span class="num">- 1</span><span class="sym">))
</span>		<span class="kwa">in
</span>		   loop <span class="sym">(</span>i<span class="sym">,</span> <span class="kwa">String</span>.size s <span class="num">- 2</span><span class="sym">)
</span>		<span class="kwa">end</span><span class="sym">)
	 (</span>n <span class="num">- 1</span><span class="sym">)</span> lines
      <span class="kwa">val</span> <span class="sym">() =</span> reverse a
   <span class="kwa">in
</span>      printFasta a
   <span class="kwa">end

fun</span> loop lines <span class="sym">=
</span>   <span class="kwa">case TextIO</span>.inputLine <span class="kwa">TextIO</span>.stdIn <span class="kwa">of
</span>      NONE <span class="sym">=&gt;</span> one lines
    <span class="sym">|</span> SOME line <span class="sym">=&gt;
</span>	 <span class="kwa">if</span> size line <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">andalso String</span>.sub <span class="sym">(</span>line<span class="sym">,</span> <span class="num">0</span><span class="sym">) =</span> #<span class="str">&quot;&gt;&quot;</span>
	    <span class="kwa">then</span> <span class="sym">(</span>one lines<span class="sym">;</span> print line<span class="sym">;</span> loop <span class="sym">[])
</span>	 <span class="kwa">else</span> loop <span class="sym">(</span>line <span class="sym">::</span> lines<span class="sym">)

</span><span class="kwa">val</span> <span class="sym">() =</span> loop <span class="sym">[]

</span>
