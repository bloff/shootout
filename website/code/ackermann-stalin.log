BUILD COMMANDS FOR: ackermann.stalin

Sun Sep 12 23:37:55 PDT 2004

cp /opt/shootout/shootout/bench/ackermann/ackermann.stalin ackermann.stalin_run.sc
/usr/bin/stalin -I /usr/lib/stalin -d1 -Ob -Om -On -Or -Ot -copt -O3 -copt -fomit-frame-pointer -copt -Wall -copt -freg-struct-return  ackermann.stalin_run.sc
Reading source
Expanding macros
Fast tree shake
Annotating expressions with their parents
Annotating variables with their environments
Annotating expressions with their environments
In-lining first-order calls to primitive procedures
Annotating expressions with their parents
Annotating variables with their environments
Annotating expressions with their environments
Annotating variables with their references
Performing flow analysis
Enumerating call sites
Determining which types and type sets are used
 16573 expressions
     0 internal symbol types
     0 external symbol types
    49 primitive procedure types
   200 non-called native procedure types
   275 called noop native procedure types
   329 called non-noop native procedure types
     0 foreign procedure types
     0 continuation types
     1 string type
     2 structure types
     8 headed vector types
     1 nonheaded vector type
     0 displaced vector types
 18677 type sets
   596 hunoz variables
  1495 non-hunoz variables
   472 noop environments
  1564 non-noop environments
0 call sites dispatch on clones
Maximal non-LET lexical nesting depth is 4
Maximal clone rate is 1
Determining which call sites to split
Performing flow analysis
Enumerating call sites
Determining which types and type sets are used
 19875 expressions
     0 internal symbol types
     0 external symbol types
    49 primitive procedure types
   200 non-called native procedure types
   354 called noop native procedure types
   645 called non-noop native procedure types
     0 foreign procedure types
     0 continuation types
     1 string type
     2 structure types
     8 headed vector types
     1 nonheaded vector type
     0 displaced vector types
 22611 type sets
   675 hunoz variables
  2136 non-hunoz variables
   551 noop environments
  1968 non-noop environments
0 call sites dispatch on clones
Maximal non-LET lexical nesting depth is 4
Maximal clone rate is 58
Determining which call sites to split
2 passes of flow analysis
Computing call graph
Determining which environments are called more than once
Determining which variables are referenced
Determining free variables
Determining necessarily-fictitious native procedure types
Annotating environments and continuation types
Inverting points-to relation
Determining escaping types
Determining which environments have unique call sites
Determining which environments are recursive
Determining which environments are reentrant
Asserting uniqueness
Performing lightweight closure conversion
Determining parents
Determining which expressions need conversion to CPS
  8655 expressions
     0 internal symbol types
     0 external symbol types
    49 primitive procedure types
   200 non-called native procedure types
   354 called noop native procedure types
   645 called non-noop native procedure types
     0 foreign procedure types
     0 continuation types
     1 string type
     2 structure types
     8 headed vector types
     1 nonheaded vector type
     0 displaced vector types
 10242 type sets
   396 hunoz variables
  1266 non-hunoz variables
     0 noop environments
   733 non-noop environments
0 call sites dispatch on clones
Maximal non-LET lexical nesting depth is 4
Maximal clone rate is 58
Determining environment distances from root
Determining which environments have external self tail calls
Determining which environments have external continuation calls
Determining blocked environments
Determining which environments need to pass parameters globally
Determining allocations
Applying closed-world assumption
Determining indirect structure types
Determining which types are never allocated on the heap
Determining which types are atomic
Determining which environments have regions
Determining which type sets are squeezable
Determining which type sets are squishable
Determining alignments
Assigning global squish tags
W13136 is general case for the following reasons:
  nondegenerate nonheaded vector
W5623 is general case for the following reasons:
  flonum
W3187 is general case for the following reasons:
  flonum
W3185 is general case for the followinackermann.stalin_run.c: In function `f1723':
ackermann.stalin_run.c:476: warning: dereferencing type-punned pointer will break strict-aliasing rules
ackermann.stalin_run.c: In function `f0':
ackermann.stalin_run.c:6065: warning: dereferencing type-punned pointer will break strict-aliasing rules
ackermann.stalin_run.c:6072: warning: dereferencing type-punned pointer will break strict-aliasing rules
ackermann.stalin_run.c:8567: warning: dereferencing type-punned pointer will break strict-aliasing rules
ackermann.stalin_run.c:8695: warning: dereferencing type-punned pointer will break strict-aliasing rules
ackermann.stalin_run.c:8958: warning: dereferencing type-punned pointer will break strict-aliasing rules
ackermann.stalin_run.c:10376: warning: dereferencing type-punned pointer will break strict-aliasing rules
ackermann.stalin_run.c:10504: warning: dereferencing type-punned pointer will break strict-aliasing rules
ackermann.stalin_run.c:10767: warning: dereferencing type-punned pointer will break strict-aliasing rules
ackermann.stalin_run.c:10824: warning: dereferencing type-punned pointer will break strict-aliasing rules
ackermann.stalin_run.c:10849: warning: dereferencing type-punned pointer will break strict-aliasing rules
ackermann.stalin_run.c:10856: warning: dereferencing type-punned pointer will break strict-aliasing rules
ackermann.stalin_run.c:10951: warning: dereferencing type-punned pointer will break strict-aliasing rules
g reasons:
  flonum
W3181 is general case for the following reasons:
  flonum
W3179 is general case for the following reasons:
  flonum
Generating code
Removing unused declarations
Removing unused labels
Generating C code
Writing database
Compiling C code
Compilation time summary (in CPU seconds)
     0 -  1% - Reading source
     0 -  1% - Expanding macros
     6 - 26% - Fast tree shake
     0 -  1% - Annotating expressions with their parents
     0 -  0% - Annotating variables with their environments
     0 -  0% - Annotating expressions with their environments
     1 -  4% - In-lining first-order calls to primitive procedures
     0 -  0% - Annotating variables with their references
     3 - 14% - Performing flow analysis
     0 -  0% - Enumerating call sites
     0 -  1% - Determining which types and type sets are used
     1 -  5% - Determining which call sites to split
     0 -  0% - Computing call graph
     1 -  5% - Determining which environments are called more than once
     0 -  1% - Determining which variables are referenced
     0 -  0% - Determining free variables
     0 -  0% - Determining necessarily-fictitious native procedure types
     0 -  0% - Annotating environments and continuation types
     0 -  0% - Inverting points-to relation
     0 -  2% - Determining escaping types
     0 -  0% - Determining which environments have unique call sites
     1 -  2% - Determining which environments are recursive
     2 -  7% - Determining which environments are reentrant
     0 -  0% - Asserting uniqueness
     2 - 11% - Performing lightweight closure conversion
     0 -  1% - Determining parents
     0 -  1% - Determining which expressions need conversion to CPS
     0 -  0% - Determining environment distances from root
     0 -  0% - Determining which environments have external self tail calls
     0 -  1% - Determining which environments have external continuation calls
     0 -  2% - Determining blocked environments
     0 -  0% - Determining which environments need to pass parameters globally
     0 -  0% - Determining allocations
     1 -  6% - Applying closed-world assumption
     0 -  0% - Determining indirect structure types
     0 -  0% - Determining which types are never allocated on the heap
     0 -  0% - Determining which types are atomic
     0 -  0% - Determining which environments have regions
     0 -  0% - Determining which type sets are squeezable
     0 -  0% - Determining which type sets are squishable
     0 -  0% - Determining alignments
     0 -  0% - Assigning global squish tags
     1 -  3% - Generating code
     0 -  1% - Removing unused declarations
     0 -  1% - Removing unused labels
     0 -  1% - Generating C code
     0 -  0% - Writing database
     0 -  0% - Compiling C code
rm ackermann.stalin_run.sc

=================================================================
COMMAND LINE (%A is single numeric argument):

ackermann.stalin_run %A


PROGRAM OUTPUT
==============
Ack(3,10): 8189
