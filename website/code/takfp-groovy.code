<span class="dir">#!/bin/env groovy
</span><span class="com">/*
	$Id: takfp-groovy.code,v 1.1 2005-09-21 05:17:34 bfulgham Exp $

	The Great Computer Language Shootout
	http://shootout.alioth.debian.org/

	contributed by Jochen Hinrichsen
	modified by

	Each program should calculate this TAK function using the same na¯ve floating-point recursive-algorithm

	TAK(x,y,z)
	  y &lt; x   = TAK(TAK(x-1.0,y,z),TAK(y-1.0,z,x),TAK(z-1.0,x,y))
	    y &gt;= x  = z


	Calculate TAK(N—3.0, N—2.0, N—1.0). Correct output N = 7 is:

	14.0


	Correct output N = 8 is:

	9.0


	Correct output N = 9 is:

	18.0


	Correct output N = 10 is:

	11.0


	The tak benchmark is described in Performance and Evaluation of Lisp Systems, Richard P. Gabriel, 1985, page 81. (1.1MB pdf)

	For more information see Eric W. Weisstein, &quot;TAK Function.&quot; From MathWorld--A Wolfram Web Resource.
	http://mathworld.wolfram.com/TAKFunction.html

*/</span>
def tak<span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">) {
</span>	<span class="kwa">if</span> <span class="sym">(</span>y <span class="sym">&gt;=</span> x<span class="sym">)</span> <span class="kwa">return</span> z
	<span class="kwa">return</span> tak<span class="sym">(</span>tak<span class="sym">(</span>x<span class="num">-1</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> tak<span class="sym">(</span>y<span class="num">-1</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> tak<span class="sym">(</span>z<span class="num">-1</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">))
}

</span>def n <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span> ? <span class="num">7</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>toFloat<span class="sym">())
</span>println tak<span class="sym">(</span>n<span class="sym">*</span><span class="num">3</span><span class="sym">,</span> n<span class="sym">*</span><span class="num">2</span><span class="sym">,</span> n<span class="sym">*</span><span class="num">1</span><span class="sym">)

</span><span class="slc">// EOF
</span>

