<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by James McIlree
*/</span>


<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;

</span><span class="kwa">public class</span> message <span class="sym">{
</span>   <span class="kwa">public static final</span> <span class="kwb">int</span> numberOfThreads <span class="sym">=</span> <span class="num">500</span><span class="sym">;
</span>   <span class="kwa">public static</span> <span class="kwb">int</span> numberOfMessagesToSend<span class="sym">;

</span>   <span class="kwa">public static</span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[]) {
</span>     numberOfMessagesToSend <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>     MessageThread chain <span class="sym">=</span> null<span class="sym">;
</span>     <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>numberOfThreads<span class="sym">;</span> i<span class="sym">++){
</span>       chain <span class="sym">=</span> <span class="kwa">new</span> MessageThread<span class="sym">(</span>chain<span class="sym">);
</span>       <span class="kwa">new</span> <span class="kwc">Thread</span><span class="sym">(</span>chain<span class="sym">).</span>start<span class="sym">();
     }

</span>     <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>numberOfMessagesToSend<span class="sym">;</span> i<span class="sym">++)</span> chain<span class="sym">.</span>enqueue<span class="sym">(</span><span class="kwa">new</span> <span class="kwc">Integer</span><span class="sym">(</span><span class="num">0</span><span class="sym">));
   }
}

</span><span class="kwa">class</span> MessageThread <span class="kwa">implements</span> <span class="kwc">Runnable</span> <span class="sym">{
</span>   MessageThread nextThread<span class="sym">;
</span>   <span class="kwc">List</span> list <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ArrayList</span><span class="sym">(</span><span class="num">4</span><span class="sym">);

</span>   MessageThread<span class="sym">(</span>MessageThread nextThread<span class="sym">){
</span>     <span class="kwa">this</span><span class="sym">.</span>nextThread <span class="sym">=</span> nextThread<span class="sym">;
   }

</span>   <span class="kwa">public</span> <span class="kwb">void</span> run<span class="sym">() {
</span>     <span class="kwa">if</span> <span class="sym">(</span>nextThread <span class="sym">!=</span> null<span class="sym">)
</span>       <span class="kwa">while</span> <span class="sym">(</span>true<span class="sym">)</span> nextThread<span class="sym">.</span>enqueue<span class="sym">(</span>dequeue<span class="sym">());
</span>     <span class="kwa">else</span> <span class="sym">{
</span>       <span class="kwb">int</span> sum <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>       <span class="kwb">int</span> finalSum <span class="sym">=</span> message<span class="sym">.</span>numberOfThreads <span class="sym">*</span> message<span class="sym">.</span>numberOfMessagesToSend<span class="sym">;
</span>       <span class="kwa">while</span> <span class="sym">(</span>sum <span class="sym">&lt;</span> finalSum<span class="sym">)
</span>         sum <span class="sym">+=</span> dequeue<span class="sym">().</span>intValue<span class="sym">();

</span>       <span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span>println<span class="sym">(</span>sum<span class="sym">);
</span>       <span class="kwc">System</span><span class="sym">.</span>exit<span class="sym">(</span><span class="num">0</span><span class="sym">);
     }
   }

</span>   <span class="kwa">public</span> <span class="kwb">void</span> enqueue<span class="sym">(</span><span class="kwc">Integer</span> message<span class="sym">)
   {
</span>     <span class="kwa">synchronized</span><span class="sym">(</span>list<span class="sym">) {
</span>       list<span class="sym">.</span>add<span class="sym">(</span><span class="kwa">new</span> <span class="kwc">Integer</span><span class="sym">(</span>message<span class="sym">.</span>intValue<span class="sym">() +</span> <span class="num">1</span><span class="sym">));
</span>       <span class="kwa">if</span> <span class="sym">(</span>list<span class="sym">.</span>size<span class="sym">() ==</span> <span class="num">1</span><span class="sym">) {
</span>         list<span class="sym">.</span>notify<span class="sym">();
       }
     }
   }

</span>   <span class="kwa">public</span> <span class="kwc">Integer</span> dequeue<span class="sym">()
   {
</span>     <span class="kwa">synchronized</span><span class="sym">(</span>list<span class="sym">) {
</span>       <span class="kwa">while</span><span class="sym">(</span>list<span class="sym">.</span>size<span class="sym">() ==</span> <span class="num">0</span><span class="sym">) {
</span>         <span class="kwa">try</span> <span class="sym">{</span> list<span class="sym">.</span>wait<span class="sym">(); }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) {}
       }
</span>       <span class="kwa">return</span> <span class="sym">(</span><span class="kwc">Integer</span><span class="sym">)</span>list<span class="sym">.</span>remove<span class="sym">(</span><span class="num">0</span><span class="sym">);
     }
   }
}</span>
