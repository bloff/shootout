<span class="com">(* -*- mode: sml -*-</span>
<span class="com"> * $Id: moments-mlton.code,v 1.11 2007-12-08 03:58:43 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * From Stephen Weeks</span>
<span class="com"> * Modified by Dan Wang to be more functional and use SML/NJ library</span>
<span class="com"> * sorting function.</span>
<span class="com"> * Modified by Stephen Weeks to go back to using MLton library sorting function.</span>
<span class="com"> *)</span>
<span class="kwa">val</span> ins <span class="sym">=</span> <span class="kwa">TextIO</span>.stdIn

<span class="kwa">fun</span> loop <span class="sym">(</span>nums<span class="sym">,</span>sum<span class="sym">) =</span>
   <span class="kwa">case TextIO</span>.inputLine ins <span class="kwa">of</span>
      NONE <span class="sym">=&gt; (</span>nums<span class="sym">,</span>sum<span class="sym">)</span>
    <span class="sym">|</span> SOME<span class="sym">(</span>instr<span class="sym">) =&gt;</span>
        <span class="sym">(</span><span class="kwa">case</span> instr <span class="kwa">of</span>
              <span class="str">&quot;&quot;</span> <span class="sym">=&gt; (</span>nums<span class="sym">,</span>sum<span class="sym">)</span>
	    <span class="sym">|</span> l <span class="sym">=&gt; (</span><span class="kwa">case Real</span>.fromString l <span class="kwa">of</span>
	          NONE <span class="sym">=&gt;</span> <span class="kwa">raise</span> Fail <span class="str">&quot;invalid input&quot;</span>
	        <span class="sym">|</span> SOME num <span class="sym">=&gt;</span> loop<span class="sym">(</span>num<span class="sym">::</span>nums<span class="sym">,</span>sum<span class="sym">+</span>num<span class="sym">)))</span>

<span class="kwa">fun</span> printl <span class="sym">[] =</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">|</span> printl<span class="sym">(</span>h<span class="sym">::</span>t<span class="sym">) = (</span> print h <span class="sym">;</span> printl t <span class="sym">)</span>

<span class="kwa">fun</span> r2s <span class="sym">(</span>x<span class="sym">:</span> <span class="kwb">real</span><span class="sym">):</span> <span class="kwb">string</span> <span class="sym">=</span>
   <span class="kwa">if Real</span>.<span class="sym">== (</span>x<span class="sym">,</span> <span class="num">0.0</span><span class="sym">)</span> <span class="kwa">then</span> <span class="str">&quot;0.000000&quot;</span>
   <span class="kwa">else String</span>.translate
     <span class="sym">(</span><span class="kwa">fn</span> #<span class="str">&quot;~&quot;</span> <span class="sym">=&gt;</span> <span class="str">&quot;-&quot;</span> <span class="sym">|</span> c <span class="sym">=&gt;</span> str c<span class="sym">)</span>
     <span class="sym">(</span><span class="kwa">Real</span>.fmt <span class="sym">(</span><span class="kwa">StringCvt</span>.FIX <span class="sym">(</span>SOME <span class="num">6</span><span class="sym">))</span> x<span class="sym">)</span>

<span class="kwa">fun</span> main<span class="sym">(</span>name<span class="sym">,</span> args<span class="sym">) =</span>  <span class="kwa">let</span>

    <span class="kwa">val</span> <span class="sym">(</span>nums<span class="sym">,</span>sum<span class="sym">) =</span> loop <span class="sym">([],</span> <span class="num">0.0</span><span class="sym">)</span>
    <span class="kwa">val</span> nums <span class="sym">=</span> Array.fromList nums
    <span class="kwa">val</span> n <span class="sym">=</span> Array.length nums
    <span class="kwa">val</span> n_float <span class="sym">=</span> <span class="kwb">real</span> n
    <span class="kwa">val</span> mean <span class="sym">=</span> sum <span class="sym">/</span> n_float

    <span class="kwa">fun</span> moments <span class="sym">(</span>x<span class="sym">,{</span>average_deviation<span class="sym">,</span>variance<span class="sym">,</span>skew<span class="sym">,</span>kurtosis<span class="sym">}) =</span> <span class="kwa">let</span>
      <span class="kwa">val</span> deviation <span class="sym">=</span> x <span class="sym">-</span> mean
      <span class="kwa">val</span> average_deviation <span class="sym">=</span>
	average_deviation <span class="sym">+</span> abs<span class="sym">(</span>deviation<span class="sym">)</span>
      <span class="kwa">val</span> dev2 <span class="sym">=</span> deviation <span class="sym">*</span> deviation
      <span class="kwa">val</span> variance <span class="sym">=</span> variance <span class="sym">+</span> dev2
      <span class="kwa">val</span> dev3 <span class="sym">=</span> dev2 <span class="sym">*</span> deviation
      <span class="kwa">val</span> skew <span class="sym">=</span> skew <span class="sym">+</span> dev3
	<span class="kwa">val</span> dev4 <span class="sym">=</span> dev3 <span class="sym">*</span> deviation
	<span class="kwa">val</span> kurtosis <span class="sym">=</span> kurtosis <span class="sym">+</span> dev4
    <span class="kwa">in</span> <span class="sym">{</span>average_deviation<span class="sym">=</span>average_deviation<span class="sym">,</span>
	variance<span class="sym">=</span>variance<span class="sym">,</span>
	skew<span class="sym">=</span>skew<span class="sym">,</span>
	kurtosis<span class="sym">=</span>kurtosis<span class="sym">}</span>
    <span class="kwa">end</span>
    <span class="kwa">val</span> init <span class="sym">= {</span>average_deviation<span class="sym">=</span><span class="num">0.0</span><span class="sym">,</span>
		variance<span class="sym">=</span><span class="num">0.0</span><span class="sym">,</span>
		skew<span class="sym">=</span><span class="num">0.0</span><span class="sym">,</span>
		kurtosis<span class="sym">=</span><span class="num">0.0</span><span class="sym">}</span>

    <span class="kwa">val</span> <span class="sym">{</span>average_deviation<span class="sym">,</span>variance<span class="sym">,</span>skew<span class="sym">,</span>kurtosis<span class="sym">} =</span>
      Array.foldl moments init nums

    <span class="kwa">val</span> average_deviation <span class="sym">=</span> average_deviation <span class="sym">/</span> n_float
    <span class="kwa">val</span> variance <span class="sym">=</span> variance <span class="sym">/</span>  <span class="kwb">real</span> <span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">);</span>
    <span class="kwa">val</span> standard_deviation <span class="sym">=</span> <span class="kwa">Real</span>.Math.sqrt <span class="sym">(</span>variance<span class="sym">)</span>
    <span class="kwa">val</span> <span class="sym">{</span>skew<span class="sym">,</span>kurtosis<span class="sym">} =</span>
      <span class="kwa">if</span> variance <span class="sym">&gt;</span> <span class="num">0.0</span>
	<span class="kwa">then</span> <span class="sym">{</span>skew<span class="sym">=</span>skew <span class="sym">/</span> n_float <span class="sym">/</span> variance <span class="sym">/</span> standard_deviation<span class="sym">,</span>
	      kurtosis<span class="sym">=</span>kurtosis <span class="sym">/</span> n_float <span class="sym">/</span> variance <span class="sym">/</span> variance <span class="sym">-</span> <span class="num">3.0</span><span class="sym">}</span>
      <span class="kwa">else</span> <span class="sym">{</span>skew<span class="sym">=</span>skew<span class="sym">,</span>kurtosis<span class="sym">=</span>kurtosis<span class="sym">}</span>

    <span class="kwa">val</span> _ <span class="sym">=</span> QuickSort.sortArray <span class="sym">(</span>nums<span class="sym">,</span> <span class="kwa">Real</span>.<span class="sym">&lt;=)</span>
    <span class="kwa">val</span> mid <span class="sym">=</span> <span class="kwa">Int</span>.quot <span class="sym">(</span>n<span class="sym">,</span> <span class="num">2</span><span class="sym">)</span>
    <span class="kwa">val</span> median <span class="sym">=</span>
      <span class="kwa">if Int</span>.rem <span class="sym">(</span>n<span class="sym">,</span> <span class="num">2</span><span class="sym">) =</span> <span class="num">1</span>
	<span class="kwa">then</span> Array.sub <span class="sym">(</span>nums<span class="sym">,</span> mid<span class="sym">)</span>
      <span class="kwa">else</span> <span class="sym">(</span>Array.sub <span class="sym">(</span>nums<span class="sym">,</span> mid<span class="sym">) +</span>
	    Array.sub <span class="sym">(</span>nums<span class="sym">,</span> mid <span class="sym">-</span> <span class="num">1</span><span class="sym">)) /</span> <span class="num">2.0</span>
<span class="kwa">in</span>
  printl <span class="sym">[</span><span class="str">&quot;n:                  &quot;</span><span class="sym">,</span> <span class="kwa">Int</span>.toString n<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
	  <span class="str">&quot;median:             &quot;</span><span class="sym">,</span> r2s median<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
	  <span class="str">&quot;mean:               &quot;</span><span class="sym">,</span> r2s mean<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
	  <span class="str">&quot;average_deviation:  &quot;</span><span class="sym">,</span> r2s average_deviation<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
	  <span class="str">&quot;standard_deviation: &quot;</span><span class="sym">,</span> r2s standard_deviation<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
	  <span class="str">&quot;variance:           &quot;</span><span class="sym">,</span> r2s variance<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
	  <span class="str">&quot;skew:               &quot;</span><span class="sym">,</span> r2s skew<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span>
	  <span class="str">&quot;kurtosis:           &quot;</span><span class="sym">,</span> r2s kurtosis<span class="sym">];</span>
  OS.Process.success
<span class="kwa">end</span>

<span class="kwa">val</span> _ <span class="sym">=</span> main<span class="sym">(</span> CommandLine.name<span class="sym">(),</span> CommandLine.arguments<span class="sym">() );</span>
