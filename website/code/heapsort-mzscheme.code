<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/usr/bin/mzscheme -r
<I><FONT COLOR="#B22222">;;; heapsort.scm
</FONT></I>
<I><FONT COLOR="#B22222">;; Prints 0.9990640717878372 instead of 0.9990640718 when n=1000.
</FONT></I><I><FONT COLOR="#B22222">;; Updated by Justin Smith
</FONT></I>
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">IM</FONT></B>   139968)
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">IA</FONT></B>     3877)
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">IC</FONT></B>    29573)

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">LAST</FONT></B> 42)
(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">gen_random</FONT></B> max)
  (<B><FONT COLOR="#A020F0">set!</FONT></B> LAST (modulo (+ (* LAST IA) IC) IM))
  (/ (* max LAST) IM))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">heapsort</FONT></B> n ra)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((ir n)
        (l (+ (quotient n 2) 1))
        (i 0)
        (j 0)
        (rra 0.0))
    (let/ec return
      (<B><FONT COLOR="#A020F0">do</FONT></B> ((bar #t))
        ((= 1 0))
        (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&gt; l 1)
               (<B><FONT COLOR="#A020F0">set!</FONT></B> l (- l 1))
               (<B><FONT COLOR="#A020F0">set!</FONT></B> rra (vector-ref ra l)))
              (<B><FONT COLOR="#A020F0">else</FONT></B>
               (<B><FONT COLOR="#A020F0">set!</FONT></B> rra (vector-ref ra ir))
               (vector-set! ra ir (vector-ref ra 1))
               (<B><FONT COLOR="#A020F0">set!</FONT></B> ir (- ir 1))
               (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&lt;= ir 1)
                      (vector-set! ra 1 rra)
                      (return #t)))))
        (<B><FONT COLOR="#A020F0">set!</FONT></B> i l)
        (<B><FONT COLOR="#A020F0">set!</FONT></B> j (* l 2))
        (<B><FONT COLOR="#A020F0">do</FONT></B> ((foo #t))
          ((&gt; j ir))
          (<B><FONT COLOR="#A020F0">cond</FONT></B> ((<B><FONT COLOR="#A020F0">and</FONT></B> (&lt; j ir) (&lt; (vector-ref ra j) (vector-ref ra (+ j
1))))
                 (<B><FONT COLOR="#A020F0">set!</FONT></B> j (+ j 1))))
          (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&lt; rra (vector-ref ra j))
                 (vector-set! ra i (vector-ref ra j))
                 (<B><FONT COLOR="#A020F0">set!</FONT></B> i j)
                 (<B><FONT COLOR="#A020F0">set!</FONT></B> j (+ j i)))
                (<B><FONT COLOR="#A020F0">else</FONT></B>
                 (<B><FONT COLOR="#A020F0">set!</FONT></B> j (+ ir 1)))))
        (vector-set! ra i rra)))))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> args)
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((n (<B><FONT COLOR="#A020F0">or</FONT></B> (<B><FONT COLOR="#A020F0">and</FONT></B> (= (vector-length args) 1) (string-&gt;number (vector-ref
args 0)))
                1))
         (last (+ n 1))
         (ary (make-vector last 0)))
    (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 1 (+ i 1)))
        ((= i last))
      (vector-set! ary i (gen_random 1.0)))
    (heapsort n ary)
    (printf <B><FONT COLOR="#BC8F8F">&quot;~s~n&quot;</FONT></B> (vector-ref ary n) )))

<I><FONT COLOR="#B22222">;(main #(&quot;1000&quot;))
</FONT></I>(main (current-command-line-arguments))</pre></td></tr></table>
