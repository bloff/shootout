#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>qu
<span class="slc">;;; heapsort.scm</span>

<span class="slc">;; Prints 0.9990640717878372 instead of 0.9990640718 when n=1000.</span>
<span class="slc">;; Updated by Justin Smith</span>
<span class="slc">;;</span>
<span class="slc">;; Updated by Brent Fulgham to provide proper output formatting</span>

<span class="sym">(</span>module heapsort mzscheme
  <span class="sym">(</span>require <span class="sym">(</span>only <span class="sym">(</span>lib <span class="str">&quot;13.ss&quot;</span> <span class="str">&quot;srfi&quot;</span><span class="sym">)</span> string<span class="sym">-</span>index string<span class="sym">-</span>pad<span class="sym">-</span>right<span class="sym">))</span>

  <span class="sym">(</span>define IM   <span class="num">139968</span><span class="sym">)</span>
  <span class="sym">(</span>define IA     <span class="num">3877</span><span class="sym">)</span>
  <span class="sym">(</span>define IC    <span class="num">29573</span><span class="sym">)</span>

  <span class="sym">(</span>define LAST <span class="num">42</span><span class="sym">)</span>
  <span class="sym">(</span>define <span class="sym">(</span>gen_random <span class="kwa">max</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> LAST <span class="sym">(</span>modulo <span class="sym">(+ (*</span> LAST IA<span class="sym">)</span> IC<span class="sym">)</span> IM<span class="sym">))</span>
    <span class="sym">(/ (*</span> <span class="kwa">max</span> LAST<span class="sym">)</span> IM<span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>heapsort n ra<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>ir n<span class="sym">)</span>
	  <span class="sym">(</span>l <span class="sym">(+ (</span>quotient n <span class="num">2</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))</span>
	  <span class="sym">(</span>i <span class="num">0</span><span class="sym">)</span>
	  <span class="sym">(</span>j <span class="num">0</span><span class="sym">)</span>
	  <span class="sym">(</span>rra <span class="num">0.0</span><span class="sym">))</span>
      <span class="sym">(</span>let<span class="sym">/</span>ec return
	<span class="sym">(</span>do <span class="sym">((</span>bar #t<span class="sym">))</span>
	    <span class="sym">((=</span> <span class="num">1 0</span><span class="sym">))</span>
	  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&gt;</span> l <span class="num">1</span><span class="sym">)</span>
		 <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> l <span class="sym">(-</span> l <span class="num">1</span><span class="sym">))</span>
		 <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> rra <span class="sym">(</span>vector<span class="sym">-</span>ref ra l<span class="sym">)))</span>
		<span class="sym">(</span>else
		 <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> rra <span class="sym">(</span>vector<span class="sym">-</span>ref ra ir<span class="sym">))</span>
		 <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ra ir <span class="sym">(</span>vector<span class="sym">-</span>ref ra <span class="num">1</span><span class="sym">))</span>
		 <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> ir <span class="sym">(-</span> ir <span class="num">1</span><span class="sym">))</span>
		 <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt;=</span> ir <span class="num">1</span><span class="sym">)</span>
			<span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ra <span class="num">1</span> rra<span class="sym">)</span>
			<span class="sym">(</span>return #t<span class="sym">)))))</span>
	  <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> i l<span class="sym">)</span>
	  <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(*</span> l <span class="num">2</span><span class="sym">))</span>
	  <span class="sym">(</span>do <span class="sym">((</span>foo #t<span class="sym">))</span>
	      <span class="sym">((&gt;</span> j ir<span class="sym">))</span>
	    <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">and</span> <span class="sym">(&lt;</span> j ir<span class="sym">) (&lt; (</span>vector<span class="sym">-</span>ref ra j<span class="sym">) (</span>vector<span class="sym">-</span>ref ra <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))))</span>
		   <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))))</span>
	    <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> rra <span class="sym">(</span>vector<span class="sym">-</span>ref ra j<span class="sym">))</span>
		   <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ra i <span class="sym">(</span>vector<span class="sym">-</span>ref ra j<span class="sym">))</span>
		   <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> i j<span class="sym">)</span>
		   <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span> j i<span class="sym">)))</span>
		  <span class="sym">(</span>else
		   <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span> ir <span class="num">1</span><span class="sym">)))))</span>
	  <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ra i rra<span class="sym">)))))</span>

  <span class="sym">(</span>define <span class="sym">(</span>roundto digits num<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ([</span>e <span class="sym">(</span><span class="kwa">expt</span> <span class="num">10</span> digits<span class="sym">)]</span>
	   <span class="sym">[</span>num <span class="sym">(</span>round <span class="sym">(*</span> e <span class="sym">(</span>inexact<span class="sym">-&gt;</span>exact num<span class="sym">)))])</span>
      <span class="sym">(</span>format <span class="str">&quot;~a.~a&quot;</span>
	      <span class="sym">(</span>quotient num e<span class="sym">)</span>
	      <span class="sym">(</span>substring <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span> <span class="sym">(</span>number<span class="sym">-&gt;</span>string <span class="sym">(</span>remainder num e<span class="sym">))</span>
					<span class="sym">(</span>make<span class="sym">-</span>string digits #\0<span class="sym">))</span>
			 <span class="num">0</span> digits<span class="sym">))))</span>

  <span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span>vector<span class="sym">-</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">1</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref args <span class="num">0</span><span class="sym">)))</span>
		  <span class="num">1</span><span class="sym">))</span>
	   <span class="sym">(</span><span class="kwa">last</span> <span class="sym">(+</span> n <span class="num">1</span><span class="sym">))</span>
	   <span class="sym">(</span>ary <span class="sym">(</span>make<span class="sym">-</span>vector <span class="kwa">last</span> <span class="num">0</span><span class="sym">)))</span>
      <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">1</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
	  <span class="sym">((=</span> i <span class="kwa">last</span><span class="sym">))</span>
	<span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ary i <span class="sym">(</span>gen_random <span class="num">1.0</span><span class="sym">)))</span>
      <span class="sym">(</span>heapsort n ary<span class="sym">)</span>
      <span class="sym">(</span>printf <span class="str">&quot;~a~n&quot;</span>
	      <span class="sym">(</span>roundto <span class="num">10</span> <span class="sym">(</span>vector<span class="sym">-</span>ref ary n<span class="sym">)))))</span>

  <span class="sym">(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)))</span>
