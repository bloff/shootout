<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Josh Goldfoot</span>
<span class="com">   modified by Vincent Snijders</span>
<span class="com">*)</span>

<span class="kwa">program</span> recursive<span class="sym">;</span>

<span class="com">{$mode objfpc}</span><span class="com">{$I-}</span><span class="com">{$OPTIMIZATION TAILREC}</span>

<span class="kwa">var</span>
   n <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span>

<span class="kwa">function</span> <span class="kwd">Ack</span><span class="sym">(</span>x <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span> y <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">):</span> <span class="kwb">longint</span><span class="sym">;</span>
<span class="kwa">begin</span>
   <span class="kwa">if</span> x <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span>
      Ack <span class="sym">:=</span> y <span class="sym">+</span> <span class="num">1</span>
   <span class="kwa">else if</span> y <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span>
      Ack <span class="sym">:=</span> <span class="kwd">Ack</span><span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
   <span class="kwa">else</span> Ack <span class="sym">:=</span> <span class="kwd">Ack</span><span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="kwd">Ack</span><span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">-</span><span class="num">1</span><span class="sym">));</span>
<span class="kwa">end</span><span class="sym">;</span> <span class="com">{ Ack }</span>

<span class="kwa">function</span> <span class="kwd">Fib</span><span class="sym">(</span>n <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">):</span> <span class="kwb">longint</span><span class="sym">;</span>
<span class="kwa">begin</span>
   <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">2</span> <span class="kwa">then</span>
      Fib <span class="sym">:=</span> <span class="num">1</span>
   <span class="kwa">else</span> Fib <span class="sym">:=</span> <span class="kwd">Fib</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">) +</span> <span class="kwd">Fib</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
<span class="kwa">end</span><span class="sym">;</span> <span class="com">{ Fib }</span>

<span class="kwa">function</span> <span class="kwd">FibFP</span><span class="sym">(</span>n <span class="sym">:</span> <span class="kwb">double</span><span class="sym">):</span> <span class="kwb">double</span><span class="sym">;</span> <span class="kwa">inline</span><span class="sym">;</span>
<span class="kwa">begin</span>
   <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">2</span> <span class="kwa">then</span>
      FibFP <span class="sym">:=</span> <span class="num">1</span>
   <span class="kwa">else</span> FibFP <span class="sym">:=</span> <span class="kwd">FibFP</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">) +</span> <span class="kwd">FibFP</span><span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
<span class="kwa">end</span><span class="sym">;</span> <span class="com">{ FibFP }</span>

<span class="kwa">function</span> <span class="kwd">Tak</span><span class="sym">(</span>x <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span> y<span class="sym">:</span> <span class="kwb">longint</span><span class="sym">;</span> z <span class="sym">:</span> <span class="kwb">longint</span><span class="sym">):</span> <span class="kwb">longint</span><span class="sym">;</span>
<span class="kwa">begin</span>
   <span class="kwa">if</span> y <span class="sym">&lt;</span> x <span class="kwa">then</span>
      Tak <span class="sym">:=</span> <span class="kwd">Tak</span><span class="sym">(</span> <span class="kwd">Tak</span><span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> <span class="kwd">Tak</span><span class="sym">(</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> <span class="kwd">Tak</span><span class="sym">(</span>z<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">) )</span>
   <span class="kwa">else</span> Tak <span class="sym">:=</span> z<span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span> <span class="com">{ Tak }</span>

<span class="kwa">function</span> <span class="kwd">TakFP</span><span class="sym">(</span>x <span class="sym">:</span> <span class="kwb">double</span><span class="sym">;</span> y<span class="sym">:</span> <span class="kwb">double</span><span class="sym">;</span> z <span class="sym">:</span> <span class="kwb">double</span><span class="sym">):</span> <span class="kwb">double</span><span class="sym">;</span>
<span class="kwa">begin</span>
   <span class="kwa">if</span> y <span class="sym">&lt;</span> x <span class="kwa">then</span>
      TakFP <span class="sym">:=</span> <span class="kwd">TakFP</span><span class="sym">(</span> <span class="kwd">TakFP</span><span class="sym">(</span>x<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> <span class="kwd">TakFP</span><span class="sym">(</span>y<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> <span class="kwd">TakFP</span><span class="sym">(</span>z<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">) )</span>
   <span class="kwa">else</span> TakFP <span class="sym">:=</span> z<span class="sym">;</span>
<span class="kwa">end</span><span class="sym">;</span> <span class="com">{ TakFP }</span>

<span class="kwa">begin</span>
   <span class="kwa">if</span> ParamCount <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then begin</span>
      <span class="kwd">Val</span><span class="sym">(</span><span class="kwd">ParamStr</span><span class="sym">(</span><span class="num">1</span><span class="sym">),</span> n<span class="sym">);</span>
      n <span class="sym">:=</span> n <span class="sym">-</span> <span class="num">1</span><span class="sym">;</span>
   <span class="kwa">end</span>
      <span class="kwa">else</span> n <span class="sym">:=</span> <span class="num">2</span><span class="sym">;</span>

   <span class="kwd">writeLn</span><span class="sym">(</span><span class="str">'Ack(3,'</span><span class="sym">,</span> n <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> <span class="str">'): '</span><span class="sym">,</span> <span class="kwd">Ack</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> n<span class="sym">+</span><span class="num">1</span><span class="sym">));</span>
   <span class="kwd">writeLn</span><span class="sym">(</span><span class="str">'Fib('</span><span class="sym">, (</span><span class="num">28.0</span> <span class="sym">+</span> n<span class="sym">):</span><span class="num">1</span><span class="sym">:</span><span class="num">1</span><span class="sym">,</span> <span class="str">'): '</span><span class="sym">,</span> <span class="kwd">FibFP</span><span class="sym">(</span><span class="num">28.0</span> <span class="sym">+</span> n<span class="sym">):</span><span class="num">1</span><span class="sym">:</span><span class="num">1</span><span class="sym">);</span>
   <span class="kwd">writeLn</span><span class="sym">(</span><span class="str">'Tak('</span><span class="sym">,</span> <span class="num">3</span> <span class="sym">*</span> n<span class="sym">,</span><span class="str">','</span><span class="sym">,</span> <span class="num">2</span> <span class="sym">*</span> n<span class="sym">,</span> <span class="str">','</span><span class="sym">,</span> n<span class="sym">,</span> <span class="str">'): '</span><span class="sym">,</span> <span class="kwd">Tak</span><span class="sym">(</span><span class="num">3</span><span class="sym">*</span>n<span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>n<span class="sym">,</span> n<span class="sym">));</span>
   <span class="kwd">writeLn</span><span class="sym">(</span><span class="str">'Fib(3): '</span><span class="sym">,</span> <span class="kwd">Fib</span><span class="sym">(</span><span class="num">3</span><span class="sym">));</span>
   <span class="kwd">writeLn</span><span class="sym">(</span><span class="str">'Tak(3.0,2.0,1.0): '</span><span class="sym">,</span> <span class="kwd">TakFP</span><span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span><span class="num">2.0</span><span class="sym">,</span><span class="num">1.0</span><span class="sym">):</span><span class="num">1</span><span class="sym">:</span><span class="num">1</span><span class="sym">);</span>
<span class="kwa">end</span>.
