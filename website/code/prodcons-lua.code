<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org</span>
<span class="slc">-- contributed by Isaac Gouy (Lua novice)</span>

n <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">1</span>

produced <span class="sym">=</span> <span class="num">0</span>
consumed <span class="sym">=</span> <span class="num">0</span>
buffer <span class="sym">=</span> <span class="num">0</span>

<span class="kwa">function</span> producer<span class="sym">()</span>
   <span class="kwa">return</span> coroutine.create<span class="sym">(</span>

      <span class="kwa">function</span><span class="sym">()</span>
         <span class="kwa">while</span> produced <span class="sym">&lt;</span> n <span class="kwa">do</span>
            produced <span class="sym">=</span> produced <span class="sym">+</span> <span class="num">1</span>
            buffer <span class="sym">=</span> produced
               <span class="slc">-- io.write(buffer)</span>
            coroutine.yield<span class="sym">()</span>
         <span class="kwa">end</span>
      <span class="kwa">end</span>

   <span class="sym">)</span>
<span class="kwa">end</span>


<span class="kwa">function</span> consumer<span class="sym">(</span>p<span class="sym">)</span>
   <span class="kwa">return</span> coroutine.create<span class="sym">(</span>

      <span class="kwa">function</span><span class="sym">()</span>
         <span class="kwa">local</span> value <span class="sym">=</span> <span class="num">0</span>
         <span class="kwa">while</span> consumed <span class="sym">&lt;</span> n <span class="kwa">do</span>
            coroutine.resume<span class="sym">(</span>p<span class="sym">)</span>
            value <span class="sym">=</span> buffer
               <span class="slc">-- io.write(&quot; -&gt; &quot;, value, &quot;\n&quot;)</span>
            consumed <span class="sym">=</span> consumed <span class="sym">+</span> <span class="num">1</span>
         <span class="kwa">end</span>
      <span class="kwa">end</span>

   <span class="sym">)</span>
<span class="kwa">end</span>


coroutine.resume<span class="sym">(</span> consumer<span class="sym">(</span> producer<span class="sym">() ))</span>
io.<span class="kwa">write</span><span class="sym">(</span>produced<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> consumed<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
