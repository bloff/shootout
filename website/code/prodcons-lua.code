<span class="line">    1 </span><span class="slc">-- The Great Computer Language Shootout 
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://shootout.alioth.debian.org 
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- contributed by Isaac Gouy (Lua novice) 
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span> n <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">1
</span><span class="line">    6 </span><span class="num"> 
</span><span class="line">    7 </span><span class="num"> </span>produced <span class="sym">=</span> <span class="num">0
</span><span class="line">    8 </span><span class="num"> </span>consumed <span class="sym">=</span> <span class="num">0
</span><span class="line">    9 </span><span class="num"> </span>buffer <span class="sym">=</span> <span class="num">0
</span><span class="line">   10 </span><span class="num"> 
</span><span class="line">   11 </span><span class="num"> </span><span class="kwa">function</span> producer<span class="sym">()
</span><span class="line">   12 </span><span class="sym"> </span>   <span class="kwa">return</span> coroutine.create<span class="sym">(
</span><span class="line">   13 </span><span class="sym">  
</span><span class="line">   14 </span><span class="sym"> </span>      <span class="kwa">function</span><span class="sym">()
</span><span class="line">   15 </span><span class="sym"> </span>         <span class="kwa">while</span> produced <span class="sym">&lt;</span> n <span class="kwa">do
</span><span class="line">   16 </span><span class="kwa"> </span>            produced <span class="sym">=</span> produced <span class="sym">+</span> <span class="num">1
</span><span class="line">   17 </span><span class="num"> </span>            buffer <span class="sym">=</span> produced
<span class="line">   18 </span>                <span class="slc">-- io.write(buffer) 
</span><span class="line">   19 </span><span class="slc"></span>            coroutine.yield<span class="sym">()
</span><span class="line">   20 </span><span class="sym"> </span>         <span class="kwa">end
</span><span class="line">   21 </span><span class="kwa">       end
</span><span class="line">   22 </span><span class="kwa"> 
</span><span class="line">   23 </span><span class="kwa"> </span>   <span class="sym">)
</span><span class="line">   24 </span><span class="sym"> </span><span class="kwa">end
</span><span class="line">   25 </span><span class="kwa"> 
</span><span class="line">   26 </span><span class="kwa">    
</span><span class="line">   27 </span><span class="kwa"> function</span> consumer<span class="sym">(</span>p<span class="sym">)
</span><span class="line">   28 </span><span class="sym"> </span>   <span class="kwa">return</span> coroutine.create<span class="sym">(
</span><span class="line">   29 </span><span class="sym">  
</span><span class="line">   30 </span><span class="sym"> </span>      <span class="kwa">function</span><span class="sym">()
</span><span class="line">   31 </span><span class="sym"> </span>         <span class="kwa">local</span> value <span class="sym">=</span> <span class="num">0
</span><span class="line">   32 </span><span class="num"> </span>         <span class="kwa">while</span> consumed <span class="sym">&lt;</span> n <span class="kwa">do
</span><span class="line">   33 </span><span class="kwa"> </span>            coroutine.resume<span class="sym">(</span>p<span class="sym">)
</span><span class="line">   34 </span><span class="sym"> </span>            value <span class="sym">=</span> buffer
<span class="line">   35 </span>                <span class="slc">-- io.write(&quot; -&gt; &quot;, value, &quot;\n&quot;) 
</span><span class="line">   36 </span><span class="slc"></span>            consumed <span class="sym">=</span> consumed <span class="sym">+</span> <span class="num">1
</span><span class="line">   37 </span><span class="num"> </span>         <span class="kwa">end
</span><span class="line">   38 </span><span class="kwa">       end
</span><span class="line">   39 </span><span class="kwa"> 
</span><span class="line">   40 </span><span class="kwa"> </span>   <span class="sym">)
</span><span class="line">   41 </span><span class="sym"> </span><span class="kwa">end
</span><span class="line">   42 </span><span class="kwa"> 
</span><span class="line">   43 </span><span class="kwa"> 
</span><span class="line">   44 </span><span class="kwa"> </span>coroutine.resume<span class="sym">(</span> consumer<span class="sym">(</span> producer<span class="sym">() ))
</span><span class="line">   45 </span><span class="sym"> </span>io.<span class="kwa">write</span><span class="sym">(</span>produced<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> consumed<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span> 
