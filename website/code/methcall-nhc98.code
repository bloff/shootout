<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<B><FONT COLOR="#A020F0">import</FONT></B> System

<B><FONT COLOR="#A020F0">class</FONT></B> Toggle a <B><FONT COLOR="#A020F0">where</FONT></B>
    activate <B><FONT COLOR="#228B22">:: a -&gt; a
</FONT></B>    value    <B><FONT COLOR="#228B22">:: a -&gt; Bool
</FONT></B>
newtype Simple = Simple Bool
<B><FONT COLOR="#A020F0">instance</FONT></B> Toggle Simple <B><FONT COLOR="#A020F0">where</FONT></B>
    activate (Simple b) = Simple (not b)
    value (Simple b)    = b

<B><FONT COLOR="#A020F0">data</FONT></B> Nth = Nth Simple Int Int
<B><FONT COLOR="#A020F0">instance</FONT></B> Toggle Nth <B><FONT COLOR="#A020F0">where</FONT></B>
    activate (Nth t count lim) | count==lim = Nth (activate t) 1 lim
                               | otherwise  = Nth t (count+1) lim
    value (Nth t count lim)    = value t

newSimple = Simple True
newNth n  = Nth newSimple 1 n

showBool b = <B><FONT COLOR="#A020F0">if</FONT></B> b <B><FONT COLOR="#A020F0">then</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;true&quot;</FONT></B> <B><FONT COLOR="#A020F0">else</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;false&quot;</FONT></B>

main = do
    n &lt;- getArgs &gt;&gt;= return . (\a -&gt; <B><FONT COLOR="#A020F0">case</FONT></B> a <B><FONT COLOR="#A020F0">of</FONT></B> [num]-&gt; read num; <B><FONT COLOR="#A020F0">_-&gt;1)
 </FONT></B>   putStrLn $ showBool $ value $ foldl' (\t <B><FONT COLOR="#A020F0">_-&gt; </FONT></B>activate t) newSimple [1..n]
    putStrLn $ showBool $ value $ foldl' (\t <B><FONT COLOR="#A020F0">_-&gt; </FONT></B>activate t) (newNth 3) [1..n]

foldl' f a []     = a
foldl' f a (x:xs) = <B><FONT COLOR="#A020F0">let</FONT></B> a' = f a x <B><FONT COLOR="#A020F0">in</FONT></B> a' `seq` foldl' f a' xs</pre></td></tr></table>
