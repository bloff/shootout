<span class="line">    1 </span><span class="kwa">import</span> System
<span class="line">    2 </span>
<span class="line">    3 </span><span class="kwa">class</span> Toggle a <span class="kwa">where
</span><span class="line">    4 </span><span class="kwa"></span>    activate <span class="sym">::</span> a <span class="sym">-&gt;</span> a
<span class="line">    5 </span>    value    <span class="sym">::</span> a <span class="sym">-&gt;</span> <span class="kwb">Bool
</span><span class="line">    6 </span><span class="kwb">
</span><span class="line">    7 </span><span class="kwb"></span><span class="kwa">newtype</span> Simple <span class="sym">=</span> Simple <span class="kwb">Bool
</span><span class="line">    8 </span><span class="kwb"></span><span class="kwa">instance</span> Toggle Simple <span class="kwa">where
</span><span class="line">    9 </span><span class="kwa"></span>    activate <span class="sym">(</span>Simple b<span class="sym">) =</span> Simple <span class="sym">(</span>not b<span class="sym">)
</span><span class="line">   10 </span><span class="sym"></span>    value <span class="sym">(</span>Simple b<span class="sym">)    =</span> b
<span class="line">   11 </span>
<span class="line">   12 </span><span class="kwa">data</span> Nth <span class="sym">=</span> Nth Simple <span class="kwb">Int Int
</span><span class="line">   13 </span><span class="kwb"></span><span class="kwa">instance</span> Toggle Nth <span class="kwa">where
</span><span class="line">   14 </span><span class="kwa"></span>    activate <span class="sym">(</span>Nth t count lim<span class="sym">) |</span> count<span class="sym">==</span>lim <span class="sym">=</span> Nth <span class="sym">(</span>activate t<span class="sym">)</span> <span class="num">1</span> lim
<span class="line">   15 </span>                               <span class="sym">|</span> otherwise  <span class="sym">=</span> Nth t <span class="sym">(</span>count<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> lim
<span class="line">   16 </span>    value <span class="sym">(</span>Nth t count lim<span class="sym">)    =</span> value t
<span class="line">   17 </span>
<span class="line">   18 </span>newSimple <span class="sym">=</span> Simple <span class="kwa">True
</span><span class="line">   19 </span><span class="kwa"></span>newNth n  <span class="sym">=</span> Nth newSimple <span class="num">1</span> n
<span class="line">   20 </span>
<span class="line">   21 </span>showBool b <span class="sym">=</span> if b <span class="kwa">then</span> <span class="str">&quot;true&quot;</span> <span class="kwa">else</span> <span class="str">&quot;false&quot;</span>
<span class="line">   22 </span>
<span class="line">   23 </span>main <span class="sym">=</span> <span class="kwa">do
</span><span class="line">   24 </span><span class="kwa"></span>    n <span class="sym">&lt;-</span> getArgs <span class="sym">&gt;&gt;=</span> return . <span class="sym">(</span>\a <span class="sym">-&gt;</span> <span class="kwa">case</span> a <span class="kwa">of</span> <span class="sym">[</span>num<span class="sym">]-&gt;</span> read num<span class="sym">;</span> _<span class="sym">-&gt;</span><span class="num">1</span><span class="sym">)
</span><span class="line">   25 </span><span class="sym"></span>    putStrLn $ showBool $ value $ foldl<span class="str">' (\t _-&gt; activate t) newSimple [1..n]
</span><span class="line">   26 </span><span class="str">    putStrLn $ showBool $ value $ foldl'</span> <span class="sym">(</span>\t _<span class="sym">-&gt;</span> activate t<span class="sym">) (</span>newNth <span class="num">3</span><span class="sym">) [</span><span class="num">1</span>..n<span class="sym">]
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym"></span>foldl<span class="str">' f a []     = a
</span><span class="line">   29 </span><span class="str">foldl'</span> f a <span class="sym">(</span>x<span class="sym">:</span>xs<span class="sym">) =</span> <span class="kwa">let</span> a<span class="str">' = f a x in a'</span> `seq` foldl<span class="str">' f a'</span> xs
