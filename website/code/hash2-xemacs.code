<span class="slc">;;; -*- mode: emacs-lisp -*-
</span><span class="slc">;;; $Id: hash2-xemacs.code,v 1.5 2005-09-20 08:15:07 bfulgham Exp $
</span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span>
<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()
  (</span>let<span class="sym">* ((</span>arg <span class="sym">(</span><span class="kwa">car command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>args<span class="sym">-</span>left<span class="sym">))
	 (</span>n <span class="sym">(</span><span class="kwa">if</span> arg <span class="sym">(</span>string<span class="sym">-</span>to<span class="sym">-</span>number arg<span class="sym">)</span> <span class="num">1</span><span class="sym">))
	 (</span>hash1 <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="sym">:</span>test <span class="str">'equal :size 10000))
	 (hash2 (make-hash-table :test '</span><span class="kwa">equal</span> <span class="sym">:</span>size <span class="num">10000</span><span class="sym">)))
    (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
	((=</span> i <span class="num">10000</span><span class="sym">))
      (</span>puthash <span class="sym">(</span>format <span class="str">&quot;foo_%d&quot;</span> i<span class="sym">)</span> i hash1<span class="sym">))
    (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
	((=</span> i n<span class="sym">))
      (</span>maphash <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>k v<span class="sym">)
		 (</span>puthash k <span class="sym">(+ (</span>gethash k hash1<span class="sym">)
			       (</span><span class="kwa">or</span> <span class="sym">(</span>gethash k hash2<span class="sym">)</span> <span class="num">0</span><span class="sym">))
</span>			  hash2<span class="sym">))</span> hash1<span class="sym">))
    (</span><span class="kwa">princ</span> <span class="sym">(</span>format <span class="str">&quot;%d %d %d %d</span><span class="esc">\n</span><span class="str">&quot;</span>
		   <span class="sym">(</span>gethash <span class="str">&quot;foo_1&quot;</span> hash1<span class="sym">)
		   (</span>gethash <span class="str">&quot;foo_9999&quot;</span> hash1<span class="sym">)
		   (</span>gethash <span class="str">&quot;foo_1&quot;</span> hash2<span class="sym">)
		   (</span>gethash <span class="str">&quot;foo_9999&quot;</span> hash2<span class="sym">)))))</span>
