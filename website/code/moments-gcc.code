<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">/* -*- mode: c -*-
 * $Id: moments-gcc.code,v 1.2 2004-11-08 08:15:17 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 * from Waldek Hebisch
 */</FONT></I>

#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;stdio.h&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;stdlib.h&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;math.h&gt;</FONT></B>

#<B><FONT COLOR="#5F9EA0">define</FONT></B> <FONT COLOR="#B8860B">MAXLINELEN</FONT> 128

<I><FONT COLOR="#B22222">/* kmedian permutes elements of a to get
   a[i]&lt;=a[k] for i&lt;k
   a[i]&gt;=a[k] for i&gt;k
	See. N. Wirth, Algorithms+data structures = Programs
*/</FONT></I>

<B><FONT COLOR="#228B22">void</FONT></B> <B><FONT COLOR="#0000FF">kmedian</FONT></B>(<B><FONT COLOR="#228B22">double</FONT></B> *a, <B><FONT COLOR="#228B22">int</FONT></B> n, <B><FONT COLOR="#228B22">int</FONT></B> k) 
{
	<B><FONT COLOR="#A020F0">while</FONT></B> (1){
		<B><FONT COLOR="#228B22">int</FONT></B> j=random()%n; 
		<B><FONT COLOR="#228B22">double</FONT></B> b = a[j];
		<B><FONT COLOR="#228B22">int</FONT></B> i=0;
        	j = n-1;
        	<B><FONT COLOR="#A020F0">while</FONT></B>(1) {
        	    <B><FONT COLOR="#A020F0">while</FONT></B>( a[i]&lt;b ) i++;
        	    <B><FONT COLOR="#A020F0">while</FONT></B>( a[j]&gt;b ) j--;
        	    <B><FONT COLOR="#A020F0">if</FONT></B>(i&lt;j) {
                	<B><FONT COLOR="#228B22">double</FONT></B> tmp=a[i];
                	a[i]=a[j];
                	a[j]=tmp;
                	i++;
                	j--;
       		    } <B><FONT COLOR="#A020F0">else</FONT></B> {
                	<B><FONT COLOR="#A020F0">if</FONT></B>(a[j]&lt;b) j++;
                	<B><FONT COLOR="#A020F0">if</FONT></B>(a[i]&gt;b) i--;
			<B><FONT COLOR="#A020F0">break</FONT></B>;
        	    }
        	}
		<B><FONT COLOR="#A020F0">if</FONT></B>(i&lt;k) {
			k-=i+1;
			n-=i+1;
			a+=i+1;
		} <B><FONT COLOR="#A020F0">else</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B> (j&gt;k) { 
			n=j;
		} <B><FONT COLOR="#A020F0">else</FONT></B> <B><FONT COLOR="#A020F0">return</FONT></B>;
	}
}

<B><FONT COLOR="#228B22">double</FONT></B> <B><FONT COLOR="#0000FF">max</FONT></B>(<B><FONT COLOR="#228B22">double</FONT></B> *a, <B><FONT COLOR="#228B22">int</FONT></B> n)
{
	<B><FONT COLOR="#228B22">int</FONT></B> j;
	<B><FONT COLOR="#228B22">double</FONT></B> temp=a[0];
	<B><FONT COLOR="#A020F0">for</FONT></B>(j=1;j&lt;n;j++) { 
		<B><FONT COLOR="#A020F0">if</FONT></B>(a[j]&gt;temp) {
			temp=a[j];
		}
	}
	<B><FONT COLOR="#A020F0">return</FONT></B> temp;
}


<B><FONT COLOR="#228B22">int</FONT></B>
<B><FONT COLOR="#0000FF">main</FONT></B>() {
    <B><FONT COLOR="#228B22">char</FONT></B> line[MAXLINELEN];
    <B><FONT COLOR="#228B22">int</FONT></B> i, n = 0, mid = 0;
    <B><FONT COLOR="#228B22">double</FONT></B> sum = 0.0;
    <B><FONT COLOR="#228B22">double</FONT></B> mean = 0.0;
    <B><FONT COLOR="#228B22">double</FONT></B> average_deviation = 0.0;
    <B><FONT COLOR="#228B22">double</FONT></B> standard_deviation = 0.0;
    <B><FONT COLOR="#228B22">double</FONT></B> variance = 0.0;
    <B><FONT COLOR="#228B22">double</FONT></B> skew = 0.0;
    <B><FONT COLOR="#228B22">double</FONT></B> kurtosis = 0.0;
    <B><FONT COLOR="#228B22">double</FONT></B> median = 0.0;
    <B><FONT COLOR="#228B22">double</FONT></B> deviation = 0.0;
    <B><FONT COLOR="#228B22">int</FONT></B> array_size = 4096;

    <B><FONT COLOR="#228B22">double</FONT></B> *nums = (<B><FONT COLOR="#228B22">double</FONT></B> *)malloc(array_size * <B><FONT COLOR="#A020F0">sizeof</FONT></B>(<B><FONT COLOR="#228B22">double</FONT></B>));

    <B><FONT COLOR="#A020F0">while</FONT></B> (fgets(line, MAXLINELEN, stdin)) {
	sum += (nums[n++] = atof(line));
	<B><FONT COLOR="#A020F0">if</FONT></B> (n == array_size) {
	    array_size *= 2;
	    nums = (<B><FONT COLOR="#228B22">double</FONT></B> *)realloc(nums, array_size * <B><FONT COLOR="#A020F0">sizeof</FONT></B>(<B><FONT COLOR="#228B22">double</FONT></B>));
	}
    }
    mean = sum/n;
    <B><FONT COLOR="#A020F0">for</FONT></B> (i=0; i&lt;n; i++) {
	<B><FONT COLOR="#228B22">double</FONT></B> dev = nums[i] - mean;
	<B><FONT COLOR="#228B22">double</FONT></B> dev2=dev*dev;
	<B><FONT COLOR="#228B22">double</FONT></B> dev3=dev2*dev;
	<B><FONT COLOR="#228B22">double</FONT></B> dev4=dev3*dev;
	average_deviation += fabs(dev);
	variance += dev2 <I><FONT COLOR="#B22222">/*pow(deviation,2)*/</FONT></I>;
	skew += dev3 <I><FONT COLOR="#B22222">/* pow(deviation,3) */</FONT></I>;
	kurtosis += dev4 <I><FONT COLOR="#B22222">/* pow(deviation,4) */</FONT></I>;
    }
    average_deviation /= n;
    variance /= (n - 1);
    standard_deviation = sqrt(variance);
    <B><FONT COLOR="#A020F0">if</FONT></B> (variance) {
	skew /= (n * variance * standard_deviation);
	kurtosis = (kurtosis/(n * variance * variance)) - 3.0;
    }
    mid = (n/2);
    kmedian(nums, n, mid); 
    median = n % 2 ? nums[mid] : (nums[mid] + max(nums,mid))/2;
    free(nums);
    printf(<B><FONT COLOR="#BC8F8F">&quot;n:                  %d\n&quot;</FONT></B>, n);
    printf(<B><FONT COLOR="#BC8F8F">&quot;median:             %f\n&quot;</FONT></B>, median);
    printf(<B><FONT COLOR="#BC8F8F">&quot;mean:               %f\n&quot;</FONT></B>, mean);
    printf(<B><FONT COLOR="#BC8F8F">&quot;average_deviation:  %f\n&quot;</FONT></B>, average_deviation);
    printf(<B><FONT COLOR="#BC8F8F">&quot;standard_deviation: %f\n&quot;</FONT></B>, standard_deviation);
    printf(<B><FONT COLOR="#BC8F8F">&quot;variance:           %f\n&quot;</FONT></B>, variance);
    printf(<B><FONT COLOR="#BC8F8F">&quot;skew:               %f\n&quot;</FONT></B>, skew);
    printf(<B><FONT COLOR="#BC8F8F">&quot;kurtosis:           %f\n&quot;</FONT></B>, kurtosis);

    <B><FONT COLOR="#A020F0">return</FONT></B>(0);
}</pre></td></tr></table>
