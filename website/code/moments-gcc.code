<span class="com">/* -*- mode: c -*-
 * $Id: moments-gcc.code,v 1.15 2005-10-01 21:59:14 bfulgham Exp $
 * http://www.bagley.org/~doug/shootout/
 * from Waldek Hebisch
 */</span>

<span class="dir">#include &lt;stdio.h&gt;
</span><span class="dir">#include &lt;stdlib.h&gt;
</span><span class="dir">#include &lt;math.h&gt;
</span>
<span class="dir">#define MAXLINELEN 128
</span>
<span class="com">/* kmedian permutes elements of a to get
   a[i]&lt;=a[k] for i&lt;k
   a[i]&gt;=a[k] for i&gt;k
	See. N. Wirth, Algorithms+data structures = Programs
*/</span>

<span class="kwb">void</span> kmedian<span class="sym">(</span><span class="kwb">double</span> <span class="sym">*</span>a<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">int</span> k<span class="sym">)
{
</span>	<span class="kwa">while</span> <span class="sym">(</span><span class="num">1</span><span class="sym">){
</span>		<span class="kwb">int</span> j<span class="sym">=</span>random<span class="sym">()%</span>n<span class="sym">;
</span>		<span class="kwb">double</span> b <span class="sym">=</span> a<span class="sym">[</span>j<span class="sym">];
</span>		<span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;
</span>        	j <span class="sym">=</span> n<span class="num">-1</span><span class="sym">;
</span>        	<span class="kwa">while</span><span class="sym">(</span><span class="num">1</span><span class="sym">) {
</span>        	    <span class="kwa">while</span><span class="sym">(</span> a<span class="sym">[</span>i<span class="sym">]&lt;</span>b <span class="sym">)</span> i<span class="sym">++;
</span>        	    <span class="kwa">while</span><span class="sym">(</span> a<span class="sym">[</span>j<span class="sym">]&gt;</span>b <span class="sym">)</span> j<span class="sym">--;
</span>        	    <span class="kwa">if</span><span class="sym">(</span>i<span class="sym">&lt;</span>j<span class="sym">) {
</span>                	<span class="kwb">double</span> tmp<span class="sym">=</span>a<span class="sym">[</span>i<span class="sym">];
</span>                	a<span class="sym">[</span>i<span class="sym">]=</span>a<span class="sym">[</span>j<span class="sym">];
</span>                	a<span class="sym">[</span>j<span class="sym">]=</span>tmp<span class="sym">;
</span>                	i<span class="sym">++;
</span>                	j<span class="sym">--;
       		    }</span> <span class="kwa">else</span> <span class="sym">{
</span>                	<span class="kwa">if</span><span class="sym">(</span>a<span class="sym">[</span>j<span class="sym">]&lt;</span>b<span class="sym">)</span> j<span class="sym">++;
</span>                	<span class="kwa">if</span><span class="sym">(</span>a<span class="sym">[</span>i<span class="sym">]&gt;</span>b<span class="sym">)</span> i<span class="sym">--;
</span>			<span class="kwa">break</span><span class="sym">;
        	    }
        	}
</span>		<span class="kwa">if</span><span class="sym">(</span>i<span class="sym">&lt;</span>k<span class="sym">) {
</span>			k<span class="sym">-=</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">;
</span>			n<span class="sym">-=</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">;
</span>			a<span class="sym">+=</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">;
		}</span> <span class="kwa">else if</span> <span class="sym">(</span>j<span class="sym">&gt;</span>k<span class="sym">) {
</span>			n<span class="sym">=</span>j<span class="sym">;
		}</span> <span class="kwa">else return</span><span class="sym">;
	}
}

</span><span class="kwb">double</span> max<span class="sym">(</span><span class="kwb">double</span> <span class="sym">*</span>a<span class="sym">,</span> <span class="kwb">int</span> n<span class="sym">)
{
</span>	<span class="kwb">int</span> j<span class="sym">;
</span>	<span class="kwb">double</span> temp<span class="sym">=</span>a<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span>	<span class="kwa">for</span><span class="sym">(</span>j<span class="sym">=</span><span class="num">1</span><span class="sym">;</span>j<span class="sym">&lt;</span>n<span class="sym">;</span>j<span class="sym">++) {
</span>		<span class="kwa">if</span><span class="sym">(</span>a<span class="sym">[</span>j<span class="sym">]&gt;</span>temp<span class="sym">) {
</span>			temp<span class="sym">=</span>a<span class="sym">[</span>j<span class="sym">];
		}
	}
</span>	<span class="kwa">return</span> temp<span class="sym">;
}


</span><span class="kwb">int
</span>main<span class="sym">() {
</span>    <span class="kwb">char</span> line<span class="sym">[</span>MAXLINELEN<span class="sym">];
</span>    <span class="kwb">int</span> i<span class="sym">,</span> n <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> mid <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwb">double</span> sum <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span> mean <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span> average_deviation <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span> standard_deviation <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span> variance <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span> skew <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span> kurtosis <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span> median <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">double</span> deviation <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>    <span class="kwb">int</span> array_size <span class="sym">=</span> <span class="num">4096</span><span class="sym">;

</span>    <span class="kwb">double</span> <span class="sym">*</span>nums <span class="sym">= (</span><span class="kwb">double</span> <span class="sym">*)</span>malloc<span class="sym">(</span>array_size <span class="sym">*</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">));

</span>    <span class="kwa">while</span> <span class="sym">(</span>fgets<span class="sym">(</span>line<span class="sym">,</span> MAXLINELEN<span class="sym">,</span> stdin<span class="sym">)) {
</span>	sum <span class="sym">+= (</span>nums<span class="sym">[</span>n<span class="sym">++] =</span> atof<span class="sym">(</span>line<span class="sym">));
</span>	<span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">==</span> array_size<span class="sym">) {
</span>	    array_size <span class="sym">*=</span> <span class="num">2</span><span class="sym">;
</span>	    nums <span class="sym">= (</span><span class="kwb">double</span> <span class="sym">*)</span>realloc<span class="sym">(</span>nums<span class="sym">,</span> array_size <span class="sym">*</span> <span class="kwa">sizeof</span><span class="sym">(</span><span class="kwb">double</span><span class="sym">));
	}
    }
</span>    mean <span class="sym">=</span> sum<span class="sym">/</span>n<span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {
</span>	<span class="kwb">double</span> dev <span class="sym">=</span> nums<span class="sym">[</span>i<span class="sym">] -</span> mean<span class="sym">;
</span>	<span class="kwb">double</span> dev2<span class="sym">=</span>dev<span class="sym">*</span>dev<span class="sym">;
</span>	<span class="kwb">double</span> dev3<span class="sym">=</span>dev2<span class="sym">*</span>dev<span class="sym">;
</span>	<span class="kwb">double</span> dev4<span class="sym">=</span>dev3<span class="sym">*</span>dev<span class="sym">;
</span>	average_deviation <span class="sym">+=</span> fabs<span class="sym">(</span>dev<span class="sym">);
</span>	variance <span class="sym">+=</span> dev2 <span class="com">/*pow(deviation,2)*/</span><span class="sym">;
</span>	skew <span class="sym">+=</span> dev3 <span class="com">/* pow(deviation,3) */</span><span class="sym">;
</span>	kurtosis <span class="sym">+=</span> dev4 <span class="com">/* pow(deviation,4) */</span><span class="sym">;
    }
</span>    average_deviation <span class="sym">/=</span> n<span class="sym">;
</span>    variance <span class="sym">/= (</span>n <span class="num">- 1</span><span class="sym">);
</span>    standard_deviation <span class="sym">=</span> sqrt<span class="sym">(</span>variance<span class="sym">);
</span>    <span class="kwa">if</span> <span class="sym">(</span>variance<span class="sym">) {
</span>	skew <span class="sym">/= (</span>n <span class="sym">*</span> variance <span class="sym">*</span> standard_deviation<span class="sym">);
</span>	kurtosis <span class="sym">= (</span>kurtosis<span class="sym">/(</span>n <span class="sym">*</span> variance <span class="sym">*</span> variance<span class="sym">)) -</span> <span class="num">3.0</span><span class="sym">;
    }
</span>    mid <span class="sym">= (</span>n<span class="sym">/</span><span class="num">2</span><span class="sym">);
</span>    kmedian<span class="sym">(</span>nums<span class="sym">,</span> n<span class="sym">,</span> mid<span class="sym">);
</span>    median <span class="sym">=</span> n <span class="sym">%</span> <span class="num">2</span> ? nums<span class="sym">[</span>mid<span class="sym">] : (</span>nums<span class="sym">[</span>mid<span class="sym">] +</span> max<span class="sym">(</span>nums<span class="sym">,</span>mid<span class="sym">))/</span><span class="num">2</span><span class="sym">;
</span>    free<span class="sym">(</span>nums<span class="sym">);
</span>    printf<span class="sym">(</span><span class="str">&quot;n:                  %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> n<span class="sym">);
</span>    printf<span class="sym">(</span><span class="str">&quot;median:             %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> median<span class="sym">);
</span>    printf<span class="sym">(</span><span class="str">&quot;mean:               %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> mean<span class="sym">);
</span>    printf<span class="sym">(</span><span class="str">&quot;average_deviation:  %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> average_deviation<span class="sym">);
</span>    printf<span class="sym">(</span><span class="str">&quot;standard_deviation: %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> standard_deviation<span class="sym">);
</span>    printf<span class="sym">(</span><span class="str">&quot;variance:           %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> variance<span class="sym">);
</span>    printf<span class="sym">(</span><span class="str">&quot;skew:               %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> skew<span class="sym">);
</span>    printf<span class="sym">(</span><span class="str">&quot;kurtosis:           %f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> kurtosis<span class="sym">);

</span>    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);
}</span>
