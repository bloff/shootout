<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- Contributed by Jim Rogers
</span>
<span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Text_Io<span class="sym">;
</span><span class="kwa">with</span> Ada.Numerics.Generic_Elementary_Functions<span class="sym">;
</span><span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span> <span class="kwa">use</span> Ada.Command_Line<span class="sym">;

</span><span class="kwa">procedure</span> NBody <span class="kwa">is
   package</span> Utilities <span class="kwa">is
</span>      Pi <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Long_Float</span> <span class="sym">:=</span> <span class="num">3.141592653589793</span><span class="sym">;
</span>      Solar_Mass <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Long_Float</span> <span class="sym">:=</span> <span class="num">4.0</span> <span class="sym">*</span> Pi<span class="sym">**</span><span class="num">2</span><span class="sym">;
</span>      Days_Per_Year <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Long_Float</span> <span class="sym">:=</span> <span class="num">365.24</span><span class="sym">;

</span>      <span class="kwa">type</span> A_Body <span class="kwa">is record
</span>         X <span class="sym">:</span> <span class="kwb">Long_Float</span> <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span>         Y <span class="sym">:</span> <span class="kwb">Long_Float</span> <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span>         Z <span class="sym">:</span> <span class="kwb">Long_Float</span> <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span>         Vx <span class="sym">:</span> <span class="kwb">Long_Float</span> <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span>         Vy <span class="sym">:</span> <span class="kwb">Long_Float</span> <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span>         Vz <span class="sym">:</span> <span class="kwb">Long_Float</span> <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span>         Mass <span class="sym">:</span> <span class="kwb">Long_Float</span> <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span>      <span class="kwa">end record</span><span class="sym">;

</span>      <span class="kwa">function</span> Jupiter <span class="kwa">return</span> A_Body<span class="sym">;
</span>      <span class="kwa">function</span> Saturn <span class="kwa">return</span> A_Body<span class="sym">;
</span>      <span class="kwa">function</span> Uranus <span class="kwa">return</span> A_Body<span class="sym">;
</span>      <span class="kwa">function</span> Neptune <span class="kwa">return</span> A_Body<span class="sym">;
</span>      <span class="kwa">function</span> Sun <span class="kwa">return</span> A_Body<span class="sym">;
</span>      <span class="kwa">procedure</span> Offset_Momentum<span class="sym">(</span>The_Body <span class="sym">:</span> <span class="kwa">in out</span> A_Body<span class="sym">;
</span>         Px <span class="sym">:</span> <span class="kwb">Long_Float</span><span class="sym">;
</span>         Py <span class="sym">:</span> <span class="kwb">Long_Float</span><span class="sym">;
</span>         Pz <span class="sym">:</span> <span class="kwb">Long_Float</span><span class="sym">);

</span>      <span class="kwa">type</span> N_Body_System <span class="kwa">is private</span><span class="sym">;

</span>      <span class="kwa">function</span> Create <span class="kwa">return</span> N_Body_System<span class="sym">;
</span>      <span class="kwa">procedure</span> Advance<span class="sym">(</span>System <span class="sym">:</span> <span class="kwa">in out</span> N_Body_System<span class="sym">;</span> Dt <span class="sym">:</span> <span class="kwb">Long_Float</span><span class="sym">);
</span>      <span class="kwa">function</span> Energy<span class="sym">(</span>System <span class="sym">:</span> N_Body_System<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Long_Float</span><span class="sym">;

</span>      <span class="kwa">private

      type</span> Index <span class="kwa">is</span> <span class="sym">(</span>Sun<span class="sym">,</span> Jupiter<span class="sym">,</span> Saturn<span class="sym">,</span> Uranus<span class="sym">,</span> Neptune<span class="sym">);
</span>      <span class="kwa">type</span> N_Body_System <span class="kwa">is array</span><span class="sym">(</span>Index<span class="sym">)</span> <span class="kwa">of</span> A_Body<span class="sym">;

</span>   <span class="kwa">end</span> Utilities<span class="sym">;

</span>   <span class="kwa">package body</span> Utilities <span class="kwa">is
      package</span> Math <span class="kwa">is new</span> Ada.Numerics.Generic_Elementary_Functions<span class="sym">(</span><span class="kwb">Long_Float</span><span class="sym">);
</span>      <span class="kwa">use</span> Math<span class="sym">;

</span>      <span class="kwa">function</span> Jupiter <span class="kwa">return</span> A_Body <span class="kwa">is
</span>         p <span class="sym">:</span> A_Body<span class="sym">;
</span>      <span class="kwa">begin
</span>         P.X <span class="sym">:=</span> <span class="num">4.84143144246472090e</span><span class="sym">+</span><span class="num">00</span><span class="sym">;
</span>         P.Y <span class="sym">:= -</span><span class="num">1.16032004402742839e</span><span class="sym">+</span><span class="num">00</span><span class="sym">;
</span>         P.Z <span class="sym">:= -</span><span class="num">1.03622044471123109e</span><span class="sym">-</span><span class="num">01</span><span class="sym">;
</span>         P.Vx <span class="sym">:=</span> <span class="num">1.66007664274403694e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> Days_Per_Year<span class="sym">;
</span>         P.Vy <span class="sym">:=</span> <span class="num">7.69901118419740425e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> Days_Per_Year<span class="sym">;
</span>         P.Vz <span class="sym">:= -</span><span class="num">6.90460016972063023e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> Days_Per_Year<span class="sym">;
</span>         p.mass <span class="sym">:=</span> <span class="num">9.54791938424326609e</span><span class="sym">-</span><span class="num">04</span> <span class="sym">*</span> SOLAR_MASS<span class="sym">;
</span>         <span class="kwa">return</span> P<span class="sym">;
</span>      <span class="kwa">end</span> Jupiter<span class="sym">;

</span>      <span class="kwa">function</span> Saturn <span class="kwa">return</span> A_Body <span class="kwa">is
</span>         P <span class="sym">:</span> A_Body<span class="sym">;
</span>      <span class="kwa">begin
</span>         P.X <span class="sym">:=</span> <span class="num">8.34336671824457987e</span><span class="sym">+</span><span class="num">00</span><span class="sym">;
</span>         P.Y <span class="sym">:=</span> <span class="num">4.12479856412430479e</span><span class="sym">+</span><span class="num">00</span><span class="sym">;
</span>         P.Z <span class="sym">:= -</span><span class="num">4.03523417114321381e</span><span class="sym">-</span><span class="num">01</span><span class="sym">;
</span>         P.Vx <span class="sym">:= -</span><span class="num">2.76742510726862411e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> Days_Per_Year<span class="sym">;
</span>         P.Vy <span class="sym">:=</span> <span class="num">4.99852801234917238e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> Days_Per_Year<span class="sym">;
</span>         P.Vz <span class="sym">:=</span> <span class="num">2.30417297573763929e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> Days_Per_Year<span class="sym">;
</span>         p.mass <span class="sym">:=</span> <span class="num">2.85885980666130812e</span><span class="sym">-</span><span class="num">04</span> <span class="sym">*</span> SOLAR_MASS<span class="sym">;
</span>         <span class="kwa">Return</span> P<span class="sym">;
</span>      <span class="kwa">end</span> Saturn<span class="sym">;

</span>      <span class="kwa">function</span> Uranus <span class="kwa">return</span> A_Body <span class="kwa">is
</span>         P <span class="sym">:</span> A_Body<span class="sym">;
</span>      <span class="kwa">begin
</span>         P.X <span class="sym">:=</span> <span class="num">1.28943695621391310e</span><span class="sym">+</span><span class="num">01</span><span class="sym">;
</span>         P.Y <span class="sym">:= -</span><span class="num">1.51111514016986312e</span><span class="sym">+</span><span class="num">01</span><span class="sym">;
</span>         P.Z <span class="sym">:= -</span><span class="num">2.23307578892655734e</span><span class="sym">-</span><span class="num">01</span><span class="sym">;
</span>         P.Vx <span class="sym">:=</span> <span class="num">2.96460137564761618e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> Days_Per_Year<span class="sym">;
</span>         P.Vy <span class="sym">:=</span> <span class="num">2.37847173959480950e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> Days_Per_Year<span class="sym">;
</span>         P.Vz <span class="sym">:= -</span><span class="num">2.96589568540237556e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> Days_Per_Year<span class="sym">;
</span>         P.Mass <span class="sym">:=</span> <span class="num">4.36624404335156298e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> Solar_Mass<span class="sym">;
</span>         <span class="kwa">return</span> p<span class="sym">;
</span>      <span class="kwa">end</span> Uranus<span class="sym">;

</span>      <span class="kwa">function</span> Neptune <span class="kwa">return</span> A_Body <span class="kwa">is
</span>         P <span class="sym">:</span> A_Body<span class="sym">;
</span>      <span class="kwa">begin
</span>         P.X <span class="sym">:=</span> <span class="num">1.53796971148509165e</span><span class="sym">+</span><span class="num">01</span><span class="sym">;
</span>         P.Y <span class="sym">:= -</span><span class="num">2.59193146099879641e</span><span class="sym">+</span><span class="num">01</span><span class="sym">;
</span>         P.Z <span class="sym">:=</span> <span class="num">1.79258772950371181e</span><span class="sym">-</span><span class="num">01</span><span class="sym">;
</span>         P.Vx <span class="sym">:=</span> <span class="num">2.68067772490389322e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> Days_Per_Year<span class="sym">;
</span>         P.Vy <span class="sym">:=</span> <span class="num">1.62824170038242295e</span><span class="sym">-</span><span class="num">03</span> <span class="sym">*</span> Days_Per_Year<span class="sym">;
</span>         P.Vz <span class="sym">:= -</span><span class="num">9.51592254519715870e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> Days_Per_Year<span class="sym">;
</span>         P.Mass <span class="sym">:=</span> <span class="num">5.15138902046611451e</span><span class="sym">-</span><span class="num">05</span> <span class="sym">*</span> Solar_Mass<span class="sym">;
</span>         <span class="kwa">return</span> P<span class="sym">;
</span>      <span class="kwa">end</span> Neptune<span class="sym">;

</span>      <span class="kwa">function</span> Sun <span class="kwa">return</span> A_Body <span class="kwa">is
</span>         P <span class="sym">:</span> A_Body<span class="sym">;
</span>      <span class="kwa">begin
</span>         P.Mass <span class="sym">:=</span> Solar_Mass<span class="sym">;
</span>         <span class="kwa">return</span> P<span class="sym">;
</span>      <span class="kwa">end</span> Sun<span class="sym">;

</span>      <span class="kwa">procedure</span> Offset_Momentum<span class="sym">(</span>The_Body <span class="sym">:</span> <span class="kwa">in out</span> A_Body<span class="sym">;
</span>                                 Px <span class="sym">:</span> <span class="kwb">Long_Float</span><span class="sym">;
</span>                                 Py <span class="sym">:</span> <span class="kwb">Long_Float</span><span class="sym">;
</span>                                 Pz <span class="sym">:</span> <span class="kwb">Long_Float</span><span class="sym">)</span> <span class="kwa">is
      begin
</span>         The_Body.Vx <span class="sym">:= -</span>Px <span class="sym">/</span> Solar_Mass<span class="sym">;
</span>         The_Body.Vy <span class="sym">:= -</span>Py <span class="sym">/</span> Solar_Mass<span class="sym">;
</span>         The_Body.Vz <span class="sym">:= -</span>Pz <span class="sym">/</span> Solar_Mass<span class="sym">;
</span>      <span class="kwa">end</span> Offset_Momentum<span class="sym">;

</span>      <span class="kwa">function</span> Create <span class="kwa">return</span> N_Body_System <span class="kwa">is
</span>         P <span class="sym">:</span> N_Body_System <span class="sym">:= (</span>Sun <span class="sym">=&gt;</span> Sun<span class="sym">,
</span>                              Jupiter <span class="sym">=&gt;</span> Jupiter<span class="sym">,
</span>                              Saturn <span class="sym">=&gt;</span> Saturn<span class="sym">,
</span>                              Uranus <span class="sym">=&gt;</span> Uranus<span class="sym">,
</span>                              Neptune <span class="sym">=&gt;</span> Neptune<span class="sym">);
</span>         Px<span class="sym">,</span> Py<span class="sym">,</span> Pz <span class="sym">:</span> <span class="kwb">Long_Float</span> <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span>      <span class="kwa">begin
         for</span> I <span class="kwa">in</span> P<span class="sym">'</span><span class="kwa">range loop
</span>            Px <span class="sym">:=</span> Px <span class="sym">+</span> P<span class="sym">(</span>I<span class="sym">)</span>.Vx <span class="sym">*</span> P<span class="sym">(</span>I<span class="sym">)</span>.Mass<span class="sym">;
</span>            Py <span class="sym">:=</span> Py <span class="sym">+</span> P<span class="sym">(</span>I<span class="sym">)</span>.Vy <span class="sym">*</span> P<span class="sym">(</span>I<span class="sym">)</span>.Mass<span class="sym">;
</span>            Pz <span class="sym">:=</span> Pz <span class="sym">+</span> P<span class="sym">(</span>I<span class="sym">)</span>.Vz <span class="sym">*</span> P<span class="sym">(</span>I<span class="sym">)</span>.Mass<span class="sym">;
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>         Offset_Momentum<span class="sym">(</span>P<span class="sym">(</span>Sun<span class="sym">),</span> Px<span class="sym">,</span> Py<span class="sym">,</span> Pz<span class="sym">);
</span>         <span class="kwa">return</span> P<span class="sym">;
</span>      <span class="kwa">end</span> Create<span class="sym">;

</span>      <span class="kwa">procedure</span> Advance<span class="sym">(</span>System <span class="sym">:</span> <span class="kwa">in out</span> N_Body_System<span class="sym">;</span> Dt <span class="sym">:</span> <span class="kwb">Long_Float</span><span class="sym">)</span> <span class="kwa">is
</span>         Dx<span class="sym">,</span> Dy<span class="sym">,</span> Dz<span class="sym">,</span> Distance<span class="sym">,</span> Mag <span class="sym">:</span> <span class="kwb">Long_Float</span><span class="sym">;
</span>      <span class="kwa">begin
         for</span> I <span class="kwa">in</span> System<span class="sym">'</span><span class="kwa">range loop
            if</span> I <span class="sym">&lt;</span> Index<span class="sym">'</span>Last <span class="kwa">then
               for</span> J <span class="kwa">in</span> Index<span class="sym">'</span>Succ<span class="sym">(</span>I<span class="sym">)</span>..Index<span class="sym">'</span>Last <span class="kwa">loop
</span>                  Dx <span class="sym">:=</span> System<span class="sym">(</span>I<span class="sym">)</span>.X <span class="sym">-</span> System<span class="sym">(</span>J<span class="sym">)</span>.X<span class="sym">;
</span>                  Dy <span class="sym">:=</span> System<span class="sym">(</span>I<span class="sym">)</span>.Y <span class="sym">-</span> System<span class="sym">(</span>J<span class="sym">)</span>.Y<span class="sym">;
</span>                  Dz <span class="sym">:=</span> System<span class="sym">(</span>I<span class="sym">)</span>.Z <span class="sym">-</span> System<span class="sym">(</span>J<span class="sym">)</span>.Z<span class="sym">;
</span>                  Distance <span class="sym">:=</span> Sqrt<span class="sym">(</span>Dx<span class="sym">**</span><span class="num">2</span> <span class="sym">+</span> Dy<span class="sym">**</span><span class="num">2</span> <span class="sym">+</span> Dz<span class="sym">**</span><span class="num">2</span><span class="sym">);
</span>                  Mag <span class="sym">:=</span> Dt <span class="sym">/</span> Distance<span class="sym">**</span><span class="num">3</span><span class="sym">;
</span>                  System<span class="sym">(</span>I<span class="sym">)</span>.Vx <span class="sym">:=</span> System<span class="sym">(</span>I<span class="sym">)</span>.Vx <span class="sym">-</span> Dx <span class="sym">*</span> System<span class="sym">(</span>J<span class="sym">)</span>.Mass <span class="sym">*</span> Mag<span class="sym">;
</span>                  System<span class="sym">(</span>I<span class="sym">)</span>.Vy <span class="sym">:=</span> System<span class="sym">(</span>I<span class="sym">)</span>.Vy <span class="sym">-</span> Dy <span class="sym">*</span> System<span class="sym">(</span>J<span class="sym">)</span>.Mass <span class="sym">*</span> Mag<span class="sym">;
</span>                  System<span class="sym">(</span>I<span class="sym">)</span>.Vz <span class="sym">:=</span> System<span class="sym">(</span>I<span class="sym">)</span>.Vz <span class="sym">-</span> Dz <span class="sym">*</span> System<span class="sym">(</span>J<span class="sym">)</span>.Mass <span class="sym">*</span> Mag<span class="sym">;
</span>                  System<span class="sym">(</span>J<span class="sym">)</span>.Vx <span class="sym">:=</span> System<span class="sym">(</span>J<span class="sym">)</span>.Vx <span class="sym">+</span> Dx <span class="sym">*</span> System<span class="sym">(</span>I<span class="sym">)</span>.Mass <span class="sym">*</span> Mag<span class="sym">;
</span>                  System<span class="sym">(</span>J<span class="sym">)</span>.Vy <span class="sym">:=</span> System<span class="sym">(</span>J<span class="sym">)</span>.Vy <span class="sym">+</span> Dy <span class="sym">*</span> System<span class="sym">(</span>I<span class="sym">)</span>.Mass <span class="sym">*</span> Mag<span class="sym">;
</span>                  System<span class="sym">(</span>J<span class="sym">)</span>.Vz <span class="sym">:=</span> System<span class="sym">(</span>J<span class="sym">)</span>.Vz <span class="sym">+</span> Dz <span class="sym">*</span> System<span class="sym">(</span>I<span class="sym">)</span>.Mass <span class="sym">*</span> Mag<span class="sym">;
</span>               <span class="kwa">end loop</span><span class="sym">;
</span>            <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>         <span class="kwa">for</span> I <span class="kwa">in</span> System<span class="sym">'</span><span class="kwa">range loop
</span>            System<span class="sym">(</span>I<span class="sym">)</span>.X <span class="sym">:=</span> System<span class="sym">(</span>I<span class="sym">)</span>.X <span class="sym">+</span> Dt <span class="sym">*</span> System<span class="sym">(</span>I<span class="sym">)</span>.Vx<span class="sym">;
</span>            System<span class="sym">(</span>I<span class="sym">)</span>.Y <span class="sym">:=</span> System<span class="sym">(</span>I<span class="sym">)</span>.Y <span class="sym">+</span> Dt <span class="sym">*</span> System<span class="sym">(</span>I<span class="sym">)</span>.Vy<span class="sym">;
</span>            System<span class="sym">(</span>I<span class="sym">)</span>.Z <span class="sym">:=</span> System<span class="sym">(</span>I<span class="sym">)</span>.Z <span class="sym">+</span> Dt <span class="sym">*</span> System<span class="sym">(</span>I<span class="sym">)</span>.Vz<span class="sym">;
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>      <span class="kwa">end</span> Advance<span class="sym">;

</span>      <span class="kwa">function</span> Energy<span class="sym">(</span>System <span class="sym">:</span> N_Body_System<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Long_Float</span> <span class="kwa">is
</span>         Dx<span class="sym">,</span> Dy<span class="sym">,</span> Dz<span class="sym">,</span> Distance <span class="sym">:</span> <span class="kwb">Long_Float</span><span class="sym">;
</span>         E <span class="sym">:</span> <span class="kwb">Long_Float</span> <span class="sym">:=</span> <span class="num">0.0</span><span class="sym">;
</span>      <span class="kwa">begin
         for</span> I <span class="kwa">in</span> System<span class="sym">'</span><span class="kwa">range loop
</span>            E <span class="sym">:=</span> E <span class="sym">+</span> <span class="num">0.5</span> <span class="sym">*</span> System<span class="sym">(</span>I<span class="sym">)</span>.Mass <span class="sym">*
               (</span>System<span class="sym">(</span>I<span class="sym">)</span>.Vx<span class="sym">**</span><span class="num">2</span> <span class="sym">+</span> System<span class="sym">(</span>I<span class="sym">)</span>.Vy<span class="sym">**</span><span class="num">2</span> <span class="sym">+</span> System<span class="sym">(</span>I<span class="sym">)</span>.Vz<span class="sym">**</span><span class="num">2</span><span class="sym">);
</span>            <span class="kwa">if</span> I <span class="sym">&lt;</span> Index<span class="sym">'</span>Last <span class="kwa">then
               for</span> J <span class="kwa">in</span> Index<span class="sym">'</span>Succ<span class="sym">(</span>I<span class="sym">)</span>..Index<span class="sym">'</span>Last <span class="kwa">loop
</span>                  Dx <span class="sym">:=</span> System<span class="sym">(</span>I<span class="sym">)</span>.X <span class="sym">-</span> System<span class="sym">(</span>J<span class="sym">)</span>.X<span class="sym">;
</span>                  Dy <span class="sym">:=</span> System<span class="sym">(</span>I<span class="sym">)</span>.Y <span class="sym">-</span> System<span class="sym">(</span>J<span class="sym">)</span>.Y<span class="sym">;
</span>                  Dz <span class="sym">:=</span> System<span class="sym">(</span>I<span class="sym">)</span>.Z <span class="sym">-</span> System<span class="sym">(</span>J<span class="sym">)</span>.Z<span class="sym">;
</span>                  Distance <span class="sym">:=</span> Sqrt<span class="sym">(</span>Dx<span class="sym">**</span><span class="num">2</span> <span class="sym">+</span> Dy<span class="sym">**</span><span class="num">2</span> <span class="sym">+</span> Dz<span class="sym">**</span><span class="num">2</span><span class="sym">);
</span>                  e <span class="sym">:=</span> e <span class="sym">- (</span>system<span class="sym">(</span>i<span class="sym">)</span>.mass <span class="sym">*</span> system<span class="sym">(</span>j<span class="sym">)</span>.mass<span class="sym">)/</span>distance<span class="sym">;
</span>               <span class="kwa">end loop</span><span class="sym">;
</span>            <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>         <span class="kwa">return</span> E<span class="sym">;
</span>      <span class="kwa">end</span> Energy<span class="sym">;

</span>   <span class="kwa">end</span> Utilities<span class="sym">;
</span>   <span class="kwa">use</span> Utilities<span class="sym">;

</span>   <span class="kwa">package</span> Doub_Io <span class="kwa">is new</span> Ada.Text_Io.Float_Io<span class="sym">(</span><span class="kwb">Long_Float</span><span class="sym">);
</span>   <span class="kwa">use</span> Doub_IO<span class="sym">;
</span>   N <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">1</span>_000_000<span class="sym">;
</span>   Bodies <span class="sym">:</span> N_Body_System <span class="sym">:=</span> Create<span class="sym">;

</span><span class="kwa">begin
   if</span> Argument_Count <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then
</span>      N <span class="sym">:=</span> <span class="kwb">Natural</span><span class="sym">'</span>Value<span class="sym">(</span>Argument<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>   <span class="kwa">end if</span><span class="sym">;
</span>   Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Energy<span class="sym">(</span>Bodies<span class="sym">),</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">9</span><span class="sym">);
</span>   New_Line<span class="sym">;
</span>   <span class="kwa">for</span> Num <span class="kwa">in</span> <span class="num">1</span>..N <span class="kwa">loop
</span>      Advance<span class="sym">(</span>Bodies<span class="sym">,</span> <span class="num">0.01</span><span class="sym">);
</span>   <span class="kwa">end loop</span><span class="sym">;
</span>   Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Energy<span class="sym">(</span>Bodies<span class="sym">),</span> Exp <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">,</span> Aft <span class="sym">=&gt;</span> <span class="num">9</span><span class="sym">);
</span>   New_Line<span class="sym">;
</span><span class="kwa">end</span> nbody<span class="sym">;</span>
