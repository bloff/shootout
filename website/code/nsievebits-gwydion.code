<span class="kwb">module</span><span class="sym">:</span> nsievebits
<span class="kwb">author</span><span class="sym">:</span> Eric Kidd <span class="kwa">&lt;eric.kidd&#64;pobox.com&gt;</span>
<span class="kwa">use</span><span class="sym">-</span>libraries<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> io<span class="sym">,</span> collections
<span class="kwa">use</span><span class="sym">-</span>modules<span class="sym">:</span>   common<span class="sym">-</span>dylan<span class="sym">,</span> standard<span class="sym">-</span>io<span class="sym">,</span> format<span class="sym">-</span>out<span class="sym">,</span> bit<span class="sym">-</span>vector

<span class="kwa">define function</span> nsieve<span class="sym">(</span>limit <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; result <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">;
</span>   <span class="kwa">let</span> flags <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;bit-vector&gt;</span><span class="sym">,</span> size<span class="sym">:</span> limit <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> fill<span class="sym">:</span> <span class="num">1</span><span class="sym">);
</span>   <span class="kwa">let</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>   <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">2</span> <span class="kwa">below</span> limit <span class="sym">)
</span>      <span class="kwa">if</span> <span class="sym">(</span> flags<span class="sym">[</span>i<span class="sym">]</span> &gt; <span class="num">0</span><span class="sym">)
</span>         <span class="kwa">for</span> <span class="sym">(</span>k <span class="kwa">from</span> <span class="sym">(</span>i <span class="sym">*</span> <span class="num">2</span><span class="sym">)</span> <span class="kwa">below</span> limit <span class="kwa">by</span> i<span class="sym">)
</span>	     flags<span class="sym">[</span>k<span class="sym">] :=</span> <span class="num">0</span><span class="sym">;
</span>         <span class="kwa">end for</span><span class="sym">;
</span>         count <span class="sym">:=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>      <span class="kwa">end if</span><span class="sym">;
</span>   <span class="kwa">end for</span><span class="sym">;

</span>   count<span class="sym">;
</span><span class="kwa">end function</span> nsieve<span class="sym">;

</span><span class="kwa">begin
   let</span> n <span class="sym">=</span> string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">(</span>element<span class="sym">(</span>application<span class="sym">-</span>arguments<span class="sym">(),</span> <span class="num">0</span><span class="sym">,</span> default<span class="sym">:</span> <span class="str">&quot;1&quot;</span><span class="sym">));

</span>   <span class="kwa">let</span> m <span class="sym">= (</span><span class="num">2</span> ^ n<span class="sym">) *</span> <span class="num">10000</span><span class="sym">;
</span>   format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>m<span class="sym">));

</span>   m <span class="sym">:= (</span><span class="num">2</span> ^ <span class="sym">(</span>n <span class="num">- 1</span><span class="sym">)) *</span> <span class="num">10000</span><span class="sym">;
</span>   format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>m<span class="sym">));

</span>   m <span class="sym">:= (</span><span class="num">2</span> ^ <span class="sym">(</span>n <span class="num">- 2</span><span class="sym">)) *</span> <span class="num">10000</span><span class="sym">;
</span>   format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;Primes up to %8d %8d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> m<span class="sym">,</span> nsieve<span class="sym">(</span>m<span class="sym">));
</span><span class="kwa">end</span><span class="sym">;
</span>
