<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy (Scala novice)</span>
<span class="com">*/</span>

<span class="kwa">import</span> scala<span class="sym">.</span>collection<span class="sym">.</span>mutable<span class="sym">.</span><span class="kwc">HashMap</span><span class="sym">;</span>

<span class="kwa">object</span> hash2 <span class="sym">{</span>
   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>

      <span class="kwa">def</span> printValue<span class="sym">[</span>A<span class="sym">,</span>B<span class="sym">](</span>table<span class="sym">:</span> <span class="kwc">HashMap</span><span class="sym">[</span>A<span class="sym">,</span>Cell<span class="sym">[</span>B<span class="sym">]],</span> key<span class="sym">:</span> A<span class="sym">) =</span>
         table get<span class="sym">(</span>key<span class="sym">)</span> match <span class="sym">{</span>
            <span class="kwa">case</span> Some<span class="sym">(</span>c<span class="sym">) =&gt;</span> Console print<span class="sym">(</span>c value<span class="sym">);</span>
            <span class="kwa">case</span> None <span class="sym">=&gt;</span> Console print<span class="sym">(</span>None<span class="sym">)</span>
      <span class="sym">}</span>

      <span class="kwa">var</span> n <span class="sym">=</span> toPositiveInt<span class="sym">(</span>args<span class="sym">);</span>
      <span class="kwa">var</span> nKeys <span class="sym">=</span> <span class="num">10000</span><span class="sym">;</span>

      <span class="kwa">val</span> table1 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">,</span>Cell<span class="sym">[</span>Int<span class="sym">]]();</span>
      <span class="kwa">val</span> table2 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">,</span>Cell<span class="sym">[</span>Int<span class="sym">]]();</span>

      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> <span class="kwc">Iterator</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>nKeys<span class="sym">))</span>
         table1 <span class="sym">+= (</span><span class="str">&quot;foo_&quot;</span> <span class="sym">+</span> i<span class="sym">) -&gt;</span> <span class="kwa">new</span> Cell<span class="sym">(</span>i<span class="sym">);</span>


      <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">&gt;</span><span class="num">0</span><span class="sym">) {</span>
         <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> each <span class="sym">&lt;-</span> table1<span class="sym">.</span>elements<span class="sym">){</span>
            <span class="kwa">val</span> key <span class="sym">=</span> each<span class="sym">.</span>_1<span class="sym">;</span>
            <span class="kwa">val</span> c1 <span class="sym">=</span> each<span class="sym">.</span>_2<span class="sym">;</span>

            table2 get<span class="sym">(</span>key<span class="sym">)</span> match <span class="sym">{</span>
               <span class="kwa">case</span> Some<span class="sym">(</span>c2<span class="sym">) =&gt;</span>
                  c2<span class="sym">.</span>value <span class="sym">=</span> c2<span class="sym">.</span>value <span class="sym">+</span> c1<span class="sym">.</span>value<span class="sym">;</span>
               <span class="kwa">case</span> None <span class="sym">=&gt;</span>
                  table2 <span class="sym">+=</span> key <span class="sym">-&gt;</span> <span class="kwa">new</span> Cell<span class="sym">(</span>c1<span class="sym">.</span>value<span class="sym">);</span>
            <span class="sym">}</span>
         <span class="sym">}</span>
         n <span class="sym">=</span> n<span class="sym">-</span><span class="num">1</span><span class="sym">;</span>
      <span class="sym">}</span>

      printValue<span class="sym">(</span>table1<span class="sym">,</span><span class="str">&quot;foo_1&quot;</span><span class="sym">);</span>    Console print<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);</span>
      printValue<span class="sym">(</span>table1<span class="sym">,</span><span class="str">&quot;foo_9999&quot;</span><span class="sym">);</span> Console print<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);</span>
      printValue<span class="sym">(</span>table2<span class="sym">,</span><span class="str">&quot;foo_1&quot;</span><span class="sym">);</span>    Console print<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);</span>
      printValue<span class="sym">(</span>table2<span class="sym">,</span><span class="str">&quot;foo_9999&quot;</span><span class="sym">);</span> Console print<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);</span>

   <span class="sym">}</span>


   <span class="kwa">private def</span> toPositiveInt<span class="sym">(</span>s<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> i <span class="sym">=</span>
         <span class="kwa">try</span> <span class="sym">{</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>s<span class="sym">(</span><span class="num">0</span><span class="sym">)); }</span>
         <span class="kwa">catch</span> <span class="sym">{</span> <span class="kwa">case</span> _ <span class="sym">=&gt;</span> <span class="num">1</span> <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">)</span> i<span class="sym">;</span> <span class="kwa">else</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">private class</span> Cell<span class="sym">[</span>T<span class="sym">](</span>v<span class="sym">:</span> T<span class="sym">)</span> <span class="kwa">extends</span> <span class="kwc">Object</span> <span class="sym">{</span>
   <span class="kwa">var</span> value<span class="sym">:</span> T <span class="sym">=</span> v<span class="sym">;</span>
<span class="sym">}</span>


