<span class="com">(* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy (Oberon-2 novice)</span>
<span class="com"></span>
<span class="com">   Do the same low-level stuff as the C implementations.</span>
<span class="com">*)</span>

<span class="kwa">MODULE</span> strcat<span class="sym">;</span>
<span class="kwa">IMPORT</span> Shootout<span class="sym">,</span> SYSTEM<span class="sym">,</span> Out<span class="sym">,</span> Strings<span class="sym">;</span>

<span class="kwa">TYPE</span>
   CharArray <span class="sym">=</span> <span class="kwa">ARRAY</span> <span class="num">8</span> <span class="kwa">OF</span> <span class="kwb">CHAR</span><span class="sym">;</span>
   String <span class="sym">=</span> <span class="kwb">POINTER</span> <span class="kwa">TO</span> CharArray<span class="sym">;</span>

<span class="kwa">VAR</span>
   buffer<span class="sym">,</span> tmp<span class="sym">:</span> <span class="kwb">POINTER</span> <span class="kwa">TO ARRAY OF</span> <span class="kwb">CHAR</span><span class="sym">;</span>
   bufferEnd<span class="sym">:</span> String<span class="sym">;</span>
   stuff<span class="sym">:</span> CharArray<span class="sym">;</span>
   n<span class="sym">,</span> stufflen<span class="sym">,</span> start<span class="sym">,</span> end<span class="sym">,</span> buflen<span class="sym">,</span> newbuflen<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>


<span class="com">(* Strings.Length only returns INTEGER, we need LONGINT *)</span>
<span class="kwa">PROCEDURE</span> <span class="kwd">Length</span><span class="sym">(</span><span class="kwa">VAR</span> a<span class="sym">:</span> <span class="kwa">ARRAY OF</span> <span class="kwb">CHAR</span><span class="sym">):</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
<span class="kwa">VAR</span> i<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span>
<span class="kwa">BEGIN</span>
   i <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">WHILE</span> <span class="sym">(</span>i <span class="sym">&lt;</span> <span class="kwa">LEN</span><span class="sym">(</span>a<span class="sym">)) &amp; (</span>a<span class="sym">[</span>i<span class="sym">]</span> # <span class="num">0</span>X<span class="sym">)</span> <span class="kwa">DO INC</span><span class="sym">(</span>i<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;</span>
   <span class="kwa">RETURN</span> i<span class="sym">;</span>
<span class="kwa">END</span> Length<span class="sym">;</span>


<span class="kwa">BEGIN</span>
   n <span class="sym">:=</span> Shootout<span class="sym">.</span><span class="kwd">Argi</span><span class="sym">();</span>
   stuff <span class="sym">:=</span> <span class="str">&quot;hello&quot;</span><span class="sym">;</span> stuff<span class="sym">[</span><span class="num">5</span><span class="sym">] :=</span> <span class="num">0</span>AX<span class="sym">;</span> stuff<span class="sym">[</span><span class="num">6</span><span class="sym">] :=</span> <span class="num">0</span>X<span class="sym">;</span>
   stufflen <span class="sym">:=</span> <span class="kwd">Length</span><span class="sym">(</span>stuff<span class="sym">);</span>

   buflen <span class="sym">:=</span> <span class="num">32</span><span class="sym">;</span> <span class="kwa">NEW</span><span class="sym">(</span>buffer<span class="sym">,</span> buflen<span class="sym">);</span> buffer<span class="sym">[</span><span class="num">0</span><span class="sym">] :=</span> <span class="num">0</span>X<span class="sym">;</span>
   start <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span>buffer<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
   end <span class="sym">:=</span> start<span class="sym">;</span>
   <span class="kwa">WHILE</span> n <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">DO</span>
      <span class="kwa">IF</span> <span class="sym">(</span>start <span class="sym">+</span> buflen<span class="sym">) -</span> end <span class="sym">&lt;</span> stufflen <span class="sym">+</span> <span class="num">1</span> <span class="kwa">THEN</span>
         newbuflen <span class="sym">:=</span> <span class="kwa">ASH</span><span class="sym">(</span>buflen<span class="sym">,</span><span class="num">1</span><span class="sym">);</span>
         <span class="kwa">NEW</span><span class="sym">(</span>tmp<span class="sym">,</span> newbuflen<span class="sym">);</span>
         <span class="kwa">COPY</span><span class="sym">(</span>buffer^<span class="sym">,</span> tmp^<span class="sym">);</span>
         buffer <span class="sym">:=</span> tmp<span class="sym">;</span> tmp <span class="sym">:=</span> <span class="kwa">NIL</span><span class="sym">;</span>
         <span class="kwa">DEC</span><span class="sym">(</span>end<span class="sym">,</span> start<span class="sym">);</span>
         start <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">ADR</span><span class="sym">(</span>buffer<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
         <span class="kwa">INC</span><span class="sym">(</span>end<span class="sym">,</span> start<span class="sym">);</span>
         buflen <span class="sym">:=</span> newbuflen<span class="sym">;</span>
      <span class="kwa">END</span><span class="sym">;</span>
         <span class="com">(* much faster to strcat to strend than to strbuf! *)</span>
      bufferEnd <span class="sym">:=</span> SYSTEM<span class="sym">.</span><span class="kwa">VAL</span><span class="sym">(</span>String<span class="sym">,</span> end<span class="sym">);</span>
      Strings<span class="sym">.</span><span class="kwd">Append</span><span class="sym">(</span>stuff<span class="sym">,</span> bufferEnd^<span class="sym">);</span>
      <span class="kwa">INC</span><span class="sym">(</span>end<span class="sym">,</span> stufflen<span class="sym">);</span>

      <span class="kwa">DEC</span><span class="sym">(</span>n<span class="sym">);</span>
   <span class="kwa">END</span><span class="sym">;</span>

   Out<span class="sym">.</span><span class="kwd">Int</span><span class="sym">(</span> <span class="kwd">Length</span><span class="sym">(</span>buffer^<span class="sym">),</span> <span class="num">0</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;</span>
<span class="kwa">END</span> strcat<span class="sym">.</span>
