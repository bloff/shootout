<span class="slc">%% The Great Computer Language Shootout</span>
<span class="slc">%% contributed by Isaac Gouy (Erlang novice)</span>
<span class="slc">%%</span>
<span class="slc">%% http://shootout.alioth.debian.org/</span>
<span class="slc">%%</span>
<span class="slc">%% Erlang by-design uses soft-real-time lightweight threads.</span>
<span class="slc">%% Message send/receive gives synchronization &amp; data access.</span>
<span class="slc">%%</span>
<span class="slc">%% Usage: start from command line with</span>
<span class="slc">%%     erlc prodcons.erl</span>
<span class="slc">%%     erl -noinput -s prodcons main 100000</span>

<span class="sym">-</span><span class="kwd">module</span><span class="sym">(</span>prodcons<span class="sym">)</span>.
<span class="sym">-</span><span class="kwd">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">,</span> producer<span class="sym">/</span><span class="num">3</span><span class="sym">,</span> consumer<span class="sym">/</span><span class="num">4</span><span class="sym">])</span>.


<span class="kwd">producer</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> NP<span class="sym">,</span> Main<span class="sym">) -&gt;</span> Main <span class="sym">! {</span><span class="kwb">self</span><span class="sym">(),</span> NP<span class="sym">};</span>
<span class="kwd">producer</span><span class="sym">(</span>N<span class="sym">,</span> NP<span class="sym">,</span> Main<span class="sym">) -&gt;</span>
    <span class="kwa">receive</span>                                           <span class="slc">%% receive buffer empty</span>
        <span class="sym">{</span>From<span class="sym">,</span> next<span class="sym">} -&gt;</span>
            From <span class="sym">! {</span>data<span class="sym">,</span> NP<span class="sym">},</span>                        <span class="slc">%% signal buffer full</span>
            <span class="kwd">producer</span><span class="sym">(</span>N<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> NP<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> Main<span class="sym">)</span>
    <span class="kwa">end</span>.


<span class="kwd">consumer</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span> NC<span class="sym">,</span> _<span class="sym">,</span> Main<span class="sym">) -&gt;</span> Main <span class="sym">! {</span><span class="kwb">self</span><span class="sym">(),</span> NC<span class="sym">};</span>
<span class="kwd">consumer</span><span class="sym">(</span>N<span class="sym">,</span> NC<span class="sym">,</span> P<span class="sym">,</span> Main<span class="sym">) -&gt;</span>
    P <span class="sym">! {</span><span class="kwb">self</span><span class="sym">(),</span> next<span class="sym">},</span>                               <span class="slc">%% signal buffer empty</span>
    <span class="kwa">receive</span>                                           <span class="slc">%% receive buffer full</span>
        <span class="sym">{</span>data<span class="sym">,</span> Value<span class="sym">} -&gt;</span> <span class="kwd">consumer</span><span class="sym">(</span>N<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> NC<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> P<span class="sym">,</span> Main<span class="sym">)</span> <span class="slc">%% empty buffer</span>
    <span class="kwa">end</span>.


<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span><span class="kwb">atom_to_list</span><span class="sym">(</span>Arg<span class="sym">)),</span>
    P <span class="sym">=</span> <span class="kwb">spawn</span><span class="sym">(</span>prodcons<span class="sym">,</span> producer<span class="sym">, [</span>N<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="kwb">self</span><span class="sym">()]),</span>     <span class="slc">%% spawn producer thread</span>
    C <span class="sym">=</span> <span class="kwb">spawn</span><span class="sym">(</span>prodcons<span class="sym">,</span> consumer<span class="sym">, [</span>N<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> P<span class="sym">,</span> <span class="kwb">self</span><span class="sym">()]),</span>  <span class="slc">%% spawn consumer thread</span>
    <span class="kwa">receive</span> <span class="sym">{</span>P<span class="sym">,</span> NP<span class="sym">} -&gt;</span> ok <span class="kwa">end</span><span class="sym">,</span>                        <span class="slc">%% wait on producer thread</span>
    <span class="kwa">receive</span> <span class="sym">{</span>C<span class="sym">,</span> NC<span class="sym">} -&gt;</span> ok <span class="kwa">end</span><span class="sym">,</span>                        <span class="slc">%% wait on consumer thread</span>
    io<span class="sym">:</span><span class="kwd">format</span><span class="sym">(</span><span class="str">&quot;~w ~w~n&quot;</span><span class="sym">, [</span>NP<span class="sym">,</span> NC<span class="sym">]),</span>
    <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.




