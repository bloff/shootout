<span class="line">    1 </span><span class="slc">%% The Great Computer Language Shootout 
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">%% contributed by Isaac Gouy (Erlang novice) 
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">%% 
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">%% http://shootout.alioth.debian.org/ 
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">%% 
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">%% Erlang by-design uses soft-real-time lightweight threads. 
</span><span class="line">    7 </span><span class="slc"></span><span class="slc">%% Message send/receive gives synchronization &amp; data access. 
</span><span class="line">    8 </span><span class="slc"></span><span class="slc">%% 
</span><span class="line">    9 </span><span class="slc"></span><span class="slc">%% Usage: start from command line with 
</span><span class="line">   10 </span><span class="slc"></span><span class="slc">%%     erlc prodcons.erl 
</span><span class="line">   11 </span><span class="slc"></span><span class="slc">%%     erl -noinput -s prodcons main 100000 
</span><span class="line">   12 </span><span class="slc"></span>
<span class="line">   13 </span> <span class="sym">-</span>module<span class="sym">(</span>prodcons<span class="sym">)</span>.
<span class="line">   14 </span>  <span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">,</span> producer<span class="sym">/</span><span class="num">3</span><span class="sym">,</span> consumer<span class="sym">/</span><span class="num">4</span><span class="sym">])</span>.
<span class="line">   15 </span>
<span class="line">   16 </span>
<span class="line">   17 </span>    producer<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> NP<span class="sym">,</span> Main<span class="sym">) -&gt;</span> Main <span class="sym">! {</span><span class="kwb">self</span><span class="sym">(),</span> NP<span class="sym">};
</span><span class="line">   18 </span><span class="sym"> </span>producer<span class="sym">(</span>N<span class="sym">,</span> NP<span class="sym">,</span> Main<span class="sym">) -&gt;
</span><span class="line">   19 </span><span class="sym">  </span>    <span class="kwa">receive</span>                                           <span class="slc">%% receive buffer empty 
</span><span class="line">   20 </span><span class="slc"></span>        <span class="sym">{</span>From<span class="sym">,</span> next<span class="sym">} -&gt;
</span><span class="line">   21 </span><span class="sym">  </span>            From <span class="sym">! {</span>data<span class="sym">,</span> NP<span class="sym">},</span>                        <span class="slc">%% signal buffer full 
</span><span class="line">   22 </span><span class="slc"></span>            producer<span class="sym">(</span>N<span class="num">-1</span><span class="sym">,</span> NP<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> Main<span class="sym">)
</span><span class="line">   23 </span><span class="sym"> </span>    <span class="kwa">end</span>.
<span class="line">   24 </span>
<span class="line">   25 </span>
<span class="line">   26 </span>   consumer<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> NC<span class="sym">,</span> _<span class="sym">,</span> Main<span class="sym">) -&gt;</span> Main <span class="sym">! {</span><span class="kwb">self</span><span class="sym">(),</span> NC<span class="sym">};
</span><span class="line">   27 </span><span class="sym"> </span>consumer<span class="sym">(</span>N<span class="sym">,</span> NC<span class="sym">,</span> P<span class="sym">,</span> Main<span class="sym">) -&gt;
</span><span class="line">   28 </span><span class="sym"> </span>    P <span class="sym">! {</span><span class="kwb">self</span><span class="sym">(),</span> next<span class="sym">},</span>                               <span class="slc">%% signal buffer empty 
</span><span class="line">   29 </span><span class="slc"></span>    <span class="kwa">receive</span>                                           <span class="slc">%% receive buffer full 
</span><span class="line">   30 </span><span class="slc"></span>        <span class="sym">{</span>data<span class="sym">,</span> Value<span class="sym">} -&gt;</span> consumer<span class="sym">(</span>N<span class="num">-1</span><span class="sym">,</span> NC<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> P<span class="sym">,</span> Main<span class="sym">)</span> <span class="slc">%% empty buffer 
</span><span class="line">   31 </span><span class="slc"></span>    <span class="kwa">end</span>.
<span class="line">   32 </span>
<span class="line">   33 </span>
<span class="line">   34 </span>   main<span class="sym">([</span>Arg<span class="sym">]) -&gt;
</span><span class="line">   35 </span><span class="sym"> </span>    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span><span class="kwb">atom_to_list</span><span class="sym">(</span>Arg<span class="sym">)),
</span><span class="line">   36 </span><span class="sym"> </span>    P <span class="sym">=</span> <span class="kwb">spawn</span><span class="sym">(</span>prodcons<span class="sym">,</span> producer<span class="sym">, [</span>N<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="kwb">self</span><span class="sym">()]),</span>     <span class="slc">%% spawn producer thread 
</span><span class="line">   37 </span><span class="slc"></span>    C <span class="sym">=</span> <span class="kwb">spawn</span><span class="sym">(</span>prodcons<span class="sym">,</span> consumer<span class="sym">, [</span>N<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> P<span class="sym">,</span> <span class="kwb">self</span><span class="sym">()]),</span>  <span class="slc">%% spawn consumer thread 
</span><span class="line">   38 </span><span class="slc"></span>    <span class="kwa">receive</span> <span class="sym">{</span>P<span class="sym">,</span> NP<span class="sym">} -&gt;</span> ok <span class="kwa">end</span><span class="sym">,</span>                        <span class="slc">%% wait on producer thread 
</span><span class="line">   39 </span><span class="slc"></span>    <span class="kwa">receive</span> <span class="sym">{</span>C<span class="sym">,</span> NC<span class="sym">} -&gt;</span> ok <span class="kwa">end</span><span class="sym">,</span>                        <span class="slc">%% wait on consumer thread 
</span><span class="line">   40 </span><span class="slc"></span>    io<span class="sym">:</span>format<span class="sym">(</span><span class="str">&quot;~w ~w~n&quot;</span><span class="sym">, [</span>NP<span class="sym">,</span> NC<span class="sym">]),
</span><span class="line">   41 </span><span class="sym"> </span>    <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.
<span class="line">   42 </span>
<span class="line">   43 </span>
<span class="line">   44 </span>
<span class="line">   45 </span>     
