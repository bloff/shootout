<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> *    http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Adapted by Antti Lankila from the earlier Isaac Gouy's implementation</span>
<span class="com"> */</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>IO<span class="sym">;</span>

<span class="kwa">class</span> Mandelbrot <span class="sym">{</span>

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">Main</span><span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">) {</span>

      <span class="kwb">int</span> width <span class="sym">=</span> <span class="num">100</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span>
	 width <span class="sym">=</span> Int32<span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

      <span class="kwb">int</span> height <span class="sym">=</span> width<span class="sym">;</span>
      <span class="kwb">int</span> maxiter <span class="sym">=</span> <span class="num">50</span><span class="sym">;</span>
      <span class="kwb">double</span> limit <span class="sym">=</span> <span class="num">4.0</span><span class="sym">;</span>

      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;P4&quot;</span><span class="sym">);</span>
      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;{0} {1}&quot;</span><span class="sym">,</span> width<span class="sym">,</span>height<span class="sym">);</span>
      Stream s <span class="sym">=</span> Console<span class="sym">.</span><span class="kwd">OpenStandardOutput</span><span class="sym">(</span><span class="num">1024</span><span class="sym">);</span>

      <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> y <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> y <span class="sym">&lt;</span> height<span class="sym">;</span> y<span class="sym">++) {</span>
	 <span class="kwb">int</span> bits <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	 <span class="kwb">int</span> xcounter <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	 <span class="kwb">double</span> Ci <span class="sym">=</span> <span class="num">2.0</span><span class="sym">*</span>y<span class="sym">/</span>height <span class="sym">-</span> <span class="num">1.0</span><span class="sym">;</span>

         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> x <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> x <span class="sym">&lt;</span> width<span class="sym">;</span> x<span class="sym">++){</span>
	    <span class="kwb">double</span> Zr <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
	    <span class="kwb">double</span> Zi <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span>
	    <span class="kwb">double</span> Cr <span class="sym">=</span> <span class="num">2.0</span><span class="sym">*</span>x<span class="sym">/</span>width <span class="sym">-</span> <span class="num">1.5</span><span class="sym">;</span>
            <span class="kwb">int</span> i <span class="sym">=</span> maxiter<span class="sym">;</span>

            bits <span class="sym">=</span> bits <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">do</span> <span class="sym">{</span>
               <span class="kwb">double</span> Tr <span class="sym">=</span> Zr<span class="sym">*</span>Zr <span class="sym">-</span> Zi<span class="sym">*</span>Zi <span class="sym">+</span> Cr<span class="sym">;</span>
               Zi <span class="sym">=</span> <span class="num">2.0</span><span class="sym">*</span>Zr<span class="sym">*</span>Zi <span class="sym">+</span> Ci<span class="sym">;</span>
               Zr <span class="sym">=</span> Tr<span class="sym">;</span>
               <span class="kwa">if</span> <span class="sym">(</span>Zr<span class="sym">*</span>Zr <span class="sym">+</span> Zi<span class="sym">*</span>Zi <span class="sym">&gt;</span> limit<span class="sym">) {</span>
		  bits <span class="sym">|=</span> <span class="num">1</span><span class="sym">;</span>
		  <span class="kwa">break</span><span class="sym">;</span>
	       <span class="sym">}</span>
            <span class="sym">}</span> <span class="kwa">while</span> <span class="sym">(--</span>i <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">);</span>

            <span class="kwa">if</span> <span class="sym">(++</span>xcounter <span class="sym">==</span> <span class="num">8</span><span class="sym">) {</span>
	       s<span class="sym">.</span><span class="kwd">WriteByte</span><span class="sym">((</span><span class="kwb">byte</span><span class="sym">) (</span>bits ^ <span class="num">0xff</span><span class="sym">));</span>
	       bits <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
	       xcounter <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
            <span class="sym">}</span>
         <span class="sym">}</span>
         <span class="kwa">if</span> <span class="sym">(</span>xcounter <span class="sym">!=</span> <span class="num">0</span><span class="sym">)</span>
	    s<span class="sym">.</span><span class="kwd">WriteByte</span><span class="sym">((</span><span class="kwb">byte</span><span class="sym">) ((</span>bits <span class="sym">&lt;&lt; (</span><span class="num">8</span> <span class="sym">-</span> xcounter<span class="sym">))</span> ^ <span class="num">0xff</span><span class="sym">));</span>
      <span class="sym">}</span>
   <span class="sym">}</span>
<span class="sym">}</span>
