<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy
*/</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>IO<span class="sym">;

</span><span class="kwc">class</span> Mandelbrot <span class="sym">{

</span>   <span class="kwc">public</span> <span class="kwb">static void</span> Main<span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">) {

</span>      <span class="kwb">int</span> width <span class="sym">=</span> <span class="num">100</span><span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> width <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>      <span class="kwb">int</span> height <span class="sym">=</span> width<span class="sym">,</span> i<span class="sym">,</span> m <span class="sym">=</span> <span class="num">50</span><span class="sym">,</span> bits <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> bitnum <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwb">bool</span> isOverLimit <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;
</span>      <span class="kwb">double</span> Zr <span class="sym">=</span> <span class="num">0.0</span><span class="sym">,</span> Zi  <span class="sym">=</span> <span class="num">0.0</span><span class="sym">,</span> Cr<span class="sym">,</span> Ci<span class="sym">,</span> Tr<span class="sym">,</span> Ti<span class="sym">,</span> limit2 <span class="sym">=</span> <span class="num">4.0</span><span class="sym">;

</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;P4&quot;</span><span class="sym">);
</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;{0} {1}&quot;</span><span class="sym">,</span> width<span class="sym">,</span>height<span class="sym">);

</span>      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> y <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> y <span class="sym">&lt;</span> height<span class="sym">;</span> y<span class="sym">++) {
</span>         <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> x <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> x <span class="sym">&lt;</span> width<span class="sym">;</span> x<span class="sym">++){

</span>            Zr <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;</span> Zi <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span>            Cr <span class="sym">=</span> <span class="num">2.0</span><span class="sym">*</span>x <span class="sym">/</span> width <span class="num">- 1.5</span><span class="sym">;
</span>            Ci <span class="sym">=</span> <span class="num">2.0</span><span class="sym">*</span>y <span class="sym">/</span> height <span class="num">- 1.0</span><span class="sym">;

</span>            i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>            <span class="kwa">do</span> <span class="sym">{
</span>               Tr <span class="sym">=</span> Zr<span class="sym">*</span>Zr <span class="sym">-</span> Zi<span class="sym">*</span>Zi <span class="sym">+</span> Cr<span class="sym">;
</span>               Ti <span class="sym">=</span> <span class="num">2.0</span><span class="sym">*</span>Zr<span class="sym">*</span>Zi <span class="sym">+</span> Ci<span class="sym">;
</span>               Zr <span class="sym">=</span> Tr<span class="sym">;</span> Zi <span class="sym">=</span> Ti<span class="sym">;
</span>               isOverLimit <span class="sym">=</span> Zr<span class="sym">*</span>Zr <span class="sym">+</span> Zi<span class="sym">*</span>Zi <span class="sym">&gt;</span> limit2<span class="sym">;
            }</span> <span class="kwa">while</span> <span class="sym">(!</span>isOverLimit <span class="sym">&amp;&amp; (++</span>i <span class="sym">&lt;</span> m<span class="sym">));

</span>            bits <span class="sym">=</span> bits <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;
</span>            <span class="kwa">if</span> <span class="sym">(!</span>isOverLimit<span class="sym">)</span> bits<span class="sym">++;
</span>            bitnum<span class="sym">++;

</span>            <span class="kwa">if</span> <span class="sym">(</span>x <span class="sym">==</span> width <span class="num">- 1</span><span class="sym">) {
</span>               bits <span class="sym">=</span> bits <span class="sym">&lt;&lt; (</span><span class="num">8</span> <span class="sym">-</span> bitnum<span class="sym">);
</span>               bitnum <span class="sym">=</span> <span class="num">8</span><span class="sym">;
            }

</span>            <span class="kwa">if</span> <span class="sym">(</span>bitnum <span class="sym">==</span> <span class="num">8</span><span class="sym">){
</span>               Console<span class="sym">.</span>Write<span class="sym">((</span><span class="kwb">char</span><span class="sym">)</span>bits<span class="sym">);
</span>               bits <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> bitnum <span class="sym">=</span> <span class="num">0</span><span class="sym">;
            }
         }
      }
   }
}</span>
