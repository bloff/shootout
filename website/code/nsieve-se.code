<span class="slc">--
</span><span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- Written by Dima Dorfman, 2004
</span><span class="slc">--
</span><span class="slc">-- converted to SE2.1 by josé
</span><span class="slc">--
</span>
<span class="kwa">class</span> NSIEVE creation make <span class="kwa">feature

</span>   flags<span class="sym">:</span> FAST_ARRAY<span class="sym">[</span><span class="kwb">BOOLEAN</span><span class="sym">]

</span>   make <span class="kwa">is local</span> n<span class="sym">,</span> m<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">do
       create</span> flags.make<span class="sym">(</span><span class="num">0</span><span class="sym">)
</span>       <span class="kwa">check</span> argument_count <span class="sym">=</span> <span class="num">1</span> <span class="kwa">end
       check</span> argument<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.is_integer <span class="kwa">end
</span>       n <span class="sym">:=</span> argument<span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer
       <span class="kwa">check</span> n <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">end

</span>       m <span class="sym">:= {</span><span class="kwb">INTEGER</span> <span class="num">1</span><span class="sym">} |&lt;&lt;</span> n.to_integer_8
       m <span class="sym">:=</span> <span class="num">10000</span><span class="sym">*</span>m
       flags.resize<span class="sym">(</span>m<span class="sym">)
</span>       print<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span><span class="sym">+</span>m.to_string_format<span class="sym">(</span><span class="num">8</span><span class="sym">)+</span><span class="str">&quot; &quot;</span><span class="sym">+</span>nsieves<span class="sym">(</span>flags<span class="sym">)</span>.to_string_format<span class="sym">(</span><span class="num">8</span><span class="sym">)+</span><span class="str">&quot;%N&quot;</span><span class="sym">)

</span>       m <span class="sym">:=</span> m<span class="sym">//</span><span class="num">2
</span>       flags.resize<span class="sym">(</span>m<span class="sym">)
</span>       print<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span><span class="sym">+</span>m.to_string_format<span class="sym">(</span><span class="num">8</span><span class="sym">)+</span><span class="str">&quot; &quot;</span><span class="sym">+</span>nsieves<span class="sym">(</span>flags<span class="sym">)</span>.to_string_format<span class="sym">(</span><span class="num">8</span><span class="sym">)+</span><span class="str">&quot;%N&quot;</span><span class="sym">)

</span>       m <span class="sym">:=</span> m<span class="sym">//</span><span class="num">2
</span>       flags.resize<span class="sym">(</span>m<span class="sym">)
</span>       print<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span><span class="sym">+</span>m.to_string_format<span class="sym">(</span><span class="num">8</span><span class="sym">)+</span><span class="str">&quot; &quot;</span><span class="sym">+</span>nsieves<span class="sym">(</span>flags<span class="sym">)</span>.to_string_format<span class="sym">(</span><span class="num">8</span><span class="sym">)+</span><span class="str">&quot;%N&quot;</span><span class="sym">)
</span>   <span class="kwa">end

</span>   nsieves<span class="sym">(</span>is_prime<span class="sym">:</span> <span class="kwa">like</span> flags<span class="sym">):</span> <span class="kwb">INTEGER</span> <span class="kwa">is local</span> i<span class="sym">,</span> j<span class="sym">:</span> <span class="kwb">INTEGER</span> <span class="kwa">do
</span>       is_prime.set_all_with<span class="sym">(</span><span class="kwa">True</span><span class="sym">)
</span>       <span class="kwa">from</span> i<span class="sym">:=</span><span class="num">2</span> until i<span class="sym">&gt;</span>is_prime.upper <span class="kwa">loop
           if</span> is_prime.item<span class="sym">(</span>i<span class="sym">)</span> <span class="kwa">then
               from</span> j<span class="sym">:=</span>i<span class="sym">+</span>i until j<span class="sym">&gt;</span>is_prime.upper <span class="kwa">loop
</span>                   is_prime.put<span class="sym">(</span><span class="kwa">False</span><span class="sym">,</span>j<span class="sym">)
</span>                   j <span class="sym">:=</span> j<span class="sym">+</span>i
               <span class="kwa">end
               Result</span> <span class="sym">:=</span> <span class="kwa">Result</span> <span class="sym">+</span> <span class="num">1
</span>           <span class="kwa">end
</span>           i <span class="sym">:=</span> i<span class="sym">+</span><span class="num">1
</span>       <span class="kwa">end
   end
end
</span>
