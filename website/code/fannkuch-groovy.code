<span class="dir">#!/bin/env groovy
</span><span class="com">/*
	$Id: fannkuch-groovy.code,v 1.3 2005-09-25 04:46:14 bfulgham Exp $

	The Great Computer Language Shootout
	http://shootout.alioth.debian.org/

	contributed by Jochen Hinrichsen
*/</span>

<span class="slc">// This algorithm taken from the ruby sample does not produce the exact order as defined above
</span>def permute<span class="sym">(</span>head<span class="sym">,</span> tail<span class="sym">,</span> permute<span class="sym">) {
</span>	<span class="kwa">for</span> <span class="sym">(</span>i in <span class="num">0</span><span class="sym">..&lt;</span>tail<span class="sym">.</span>size<span class="sym">()) {
</span>		head<span class="sym">.</span>add<span class="sym">(</span>tail<span class="sym">.</span>remove<span class="sym">(</span>i<span class="sym">))
</span>		tail<span class="sym">.</span>isEmpty<span class="sym">()</span> ? permute<span class="sym">(</span>head<span class="sym">.</span>clone<span class="sym">()) :</span> permute<span class="sym">(</span>head<span class="sym">,</span> tail<span class="sym">,</span> permute<span class="sym">)
</span>		tail<span class="sym">.</span>add<span class="sym">(</span>i<span class="sym">,</span> head<span class="sym">.</span>pop<span class="sym">())
	}
}

</span>def permute<span class="sym">(</span>size<span class="sym">,</span> closure<span class="sym">) {
</span>	permute<span class="sym">([], (</span><span class="num">1</span><span class="sym">..</span>size<span class="sym">).</span>step<span class="sym">(</span><span class="num">1</span><span class="sym">),</span> closure<span class="sym">)
}

</span>def N <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span><span class="sym">)</span> ? <span class="num">7</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">].</span>toInteger<span class="sym">()
</span>def maxflips <span class="sym">=</span> <span class="num">0

</span>permute<span class="sym">(</span>N<span class="sym">) { |</span>list<span class="sym">|
</span>	def flips <span class="sym">=</span> <span class="num">0
</span>	<span class="kwa">while</span> <span class="sym">((</span>count <span class="sym">=</span> list<span class="sym">[</span><span class="num">0</span><span class="sym">]) !=</span> <span class="num">1</span><span class="sym">) {
</span>		<span class="slc">// Inconsistent groovy syntax, lvalue list[0..&lt;count] does not work
</span>		<span class="slc">// Option #1
</span>		<span class="slc">// list[0, count-1] = list[0..&lt;count].reverse()
</span>
		<span class="slc">// Option #2: more Java like alternative, little bit faster
</span>		Collections<span class="sym">.</span>copy<span class="sym">(</span>list<span class="sym">,</span> list<span class="sym">[</span><span class="num">0</span><span class="sym">..&lt;</span>count<span class="sym">].</span>reverse<span class="sym">())

</span>		flips<span class="sym">++
	}
</span>	maxflips <span class="sym">= [</span>maxflips<span class="sym">,</span> flips<span class="sym">].</span>max<span class="sym">()
}

</span>println <span class="str">&quot;Pfannkuchen(${N}) = ${maxflips}&quot;</span>

<span class="slc">// EOF
</span>
