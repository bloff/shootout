<span class="com">(* nsieve-bits benchmark for The Computer Language Shootout
 * Written by Dima Dorfman, 2004
 * Compile: ocamlopt -o nsieve_bits_ocaml bigarray.cmxa nsieve_bits.ml *)</span>

<span class="kwa">open</span> Bigarray

<span class="kwa">let</span> nsieve m <span class="sym">=
</span>  <span class="kwa">let</span> a <span class="sym">=</span>  Array1.create int8_unsigned c_layout <span class="sym">((</span>m <span class="kwa">lsr</span> <span class="num">3</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">)</span> <span class="kwa">in
</span>  Array1.fill a <span class="num">0xFF</span><span class="sym">;
</span>  <span class="kwa">let rec</span> clear i j <span class="sym">=
</span>    <span class="kwa">if</span> j <span class="sym">&lt;</span> m <span class="kwa">then</span> <span class="sym">(
</span>      <span class="kwa">let</span> ic <span class="sym">=</span> j <span class="kwa">lsr</span> <span class="num">3</span> <span class="kwa">in
</span>      a.<span class="sym">{</span>ic<span class="sym">} &lt;-</span> a.<span class="sym">{</span>ic<span class="sym">}</span> <span class="kwa">land</span> lnot<span class="sym">(</span><span class="num">1</span> <span class="kwa">lsl</span> <span class="sym">(</span>j <span class="kwa">land</span> <span class="num">0x7</span><span class="sym">));
</span>      clear i <span class="sym">(</span>j <span class="sym">+</span> i<span class="sym">)
    )</span> <span class="kwa">in
  let</span> count <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">in
  for</span> i <span class="sym">=</span> <span class="num">2</span> <span class="kwa">to</span> m <span class="num">- 1</span> <span class="kwa">do
    if</span> a.<span class="sym">{</span>i <span class="kwa">lsr</span> <span class="num">3</span><span class="sym">}</span> <span class="kwa">land</span> <span class="sym">(</span><span class="num">1</span> <span class="kwa">lsl</span> <span class="sym">(</span>i <span class="kwa">land</span> <span class="num">0x7</span><span class="sym">)) &gt;</span> <span class="num">0</span> <span class="kwa">then
</span>      <span class="sym">(</span>clear i <span class="sym">(</span>i<span class="sym">+</span>i<span class="sym">);</span> incr count<span class="sym">)
</span>  <span class="kwa">done</span><span class="sym">;
  !</span>count


<span class="kwa">let</span> test n <span class="sym">=
</span>  <span class="kwa">let</span> m <span class="sym">= (</span><span class="num">1</span> <span class="kwa">lsl</span> n<span class="sym">) *</span> <span class="num">10000</span> <span class="kwa">in
</span>  Printf.printf <span class="str">&quot;Primes up to %8i%8i</span><span class="esc">\n</span><span class="str">&quot;</span> m <span class="sym">(</span>nsieve m<span class="sym">)

</span><span class="kwa">let</span> <span class="sym">() =
</span>  <span class="kwa">let</span> n <span class="sym">=
</span>    <span class="kwa">try</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)
</span>    <span class="kwa">with</span> _ <span class="sym">-&gt; (</span>Printf.printf <span class="str">&quot;usage: %s N&quot;</span> Sys.argv.<span class="sym">(</span><span class="num">0</span><span class="sym">);</span> exit <span class="num">2</span><span class="sym">)</span> <span class="kwa">in
</span>  test n<span class="sym">;
</span>  <span class="kwa">if</span> n <span class="sym">&gt;=</span> <span class="num">1</span> <span class="kwa">then</span> test<span class="sym">(</span>n<span class="num">-1</span><span class="sym">);
</span>  <span class="kwa">if</span> n <span class="sym">&gt;=</span> <span class="num">2</span> <span class="kwa">then</span> test<span class="sym">(</span>n<span class="num">-2</span><span class="sym">)
</span>
