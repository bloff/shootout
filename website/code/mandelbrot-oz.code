<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">% contributed by Isaac Gouy</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> Application Open

<span class="kwb">define</span>
   <span class="kwb">proc</span> <span class="sym">{</span>Mandelbrot F Side<span class="sym">}</span>
      IXMax <span class="sym">=</span> Side <span class="sym">-</span> <span class="num">1</span>
      IYMax <span class="sym">=</span> IXMax
      XMax <span class="sym">= {</span>IntToFloat Side<span class="sym">}</span>
      YMax <span class="sym">=</span> XMax
      M <span class="sym">=</span> <span class="num">50</span>
      Limit2 <span class="sym">=</span> <span class="num">4.0</span>


      <span class="kwb">proc</span> <span class="sym">{</span>XLoop IX Y B N<span class="sym">}</span>
         X <span class="sym">= {</span>IntToFloat IX<span class="sym">}</span>
         Cr <span class="sym">=</span> <span class="num">2.0</span><span class="sym">*</span>X <span class="sym">/</span> XMax <span class="sym">-</span> <span class="num">1.5</span>
         Ci <span class="sym">=</span> <span class="num">2.0</span><span class="sym">*</span>Y <span class="sym">/</span> YMax <span class="sym">-</span> <span class="num">1.0</span>
         Bits
         Bitnum

         <span class="kwb">fun</span> <span class="sym">{</span>Include J Zr Zi Tr Ti<span class="sym">}</span>
            <span class="kwb">if</span> J<span class="sym">&lt;</span>M andthen Tr <span class="sym">+</span> Ti <span class="sym">=&lt;</span> Limit2 <span class="kwb">then</span>
               I <span class="sym">=</span> <span class="num">2.0</span> <span class="sym">*</span> Zr <span class="sym">*</span> Zi <span class="sym">+</span> Ci
               R <span class="sym">=</span> Tr <span class="sym">-</span> Ti <span class="sym">+</span> Cr
            <span class="kwb">in</span>
               <span class="sym">{</span>Include J<span class="sym">+</span><span class="num">1</span> R I R<span class="sym">*</span>R I<span class="sym">*</span>I<span class="sym">}</span>
            <span class="kwb">else</span>
               Tr <span class="sym">+</span> Ti <span class="sym">=&lt;</span> Limit2
            <span class="kwb">end</span>
         <span class="kwb">end</span>

      <span class="kwb">in</span>
         <span class="kwb">if</span> IX <span class="sym">=&lt;</span> IXMax <span class="kwb">then</span>
            Bits <span class="sym">=</span> <span class="kwb">if</span> <span class="sym">{</span>Include <span class="num">0 0.0 0.0 0.0 0.0</span><span class="sym">}</span> <span class="kwb">then</span> B<span class="sym">*</span><span class="num">2</span><span class="sym">+</span><span class="num">1</span> <span class="kwb">else</span> B<span class="sym">*</span><span class="num">2</span> <span class="kwb">end</span>
            Bitnum <span class="sym">=</span> N<span class="sym">+</span><span class="num">1</span>

            <span class="kwb">if</span> Bitnum <span class="sym">==</span> <span class="num">8</span> <span class="kwb">then</span>
               <span class="sym">{</span>F putC<span class="sym">(</span>Bits<span class="sym">)}</span>
               <span class="sym">{</span>XLoop IX<span class="sym">+</span><span class="num">1</span> Y <span class="num">0 0</span><span class="sym">}</span>
            <span class="kwb">elseif</span> IX <span class="sym">==</span> IXMax <span class="kwb">then</span>
               <span class="sym">{</span>F putC<span class="sym">(</span> Bits <span class="sym">* {</span>Pow <span class="num">2</span> <span class="sym">(</span><span class="num">8</span> <span class="sym">- (</span>Side mod <span class="num">8</span><span class="sym">))} )}</span>
               <span class="sym">{</span>XLoop IX<span class="sym">+</span><span class="num">1</span> Y <span class="num">0 0</span><span class="sym">}</span>
            <span class="kwb">else</span>
               <span class="sym">{</span>XLoop IX<span class="sym">+</span><span class="num">1</span> Y Bits Bitnum<span class="sym">}</span>
            <span class="kwb">end</span>
         <span class="kwb">end</span>
      <span class="kwb">end</span>


      <span class="kwb">proc</span> <span class="sym">{</span>YLoop IY<span class="sym">}</span>
         <span class="kwb">if</span> IY <span class="sym">=&lt;</span> IYMax <span class="kwb">then</span>
            <span class="sym">{</span>XLoop <span class="num">0</span> <span class="sym">{</span>IntToFloat IY<span class="sym">}</span> <span class="num">0 0</span><span class="sym">}</span>
            <span class="sym">{</span>YLoop IY<span class="sym">+</span><span class="num">1</span><span class="sym">}</span>
         <span class="kwb">end</span>
      <span class="kwb">end</span>

   <span class="kwb">in</span>
      <span class="sym">{</span>F putS<span class="sym">(</span><span class="str">&quot;P4&quot;</span><span class="sym">)}</span>
      <span class="sym">{</span>F putS<span class="sym">({</span>IntToString Side<span class="sym">}</span> # <span class="str">&quot; &quot;</span> # <span class="sym">{</span>IntToString Side<span class="sym">})}</span>
      <span class="sym">{</span>YLoop <span class="num">0</span><span class="sym">}</span>
   <span class="kwb">end</span>


   <span class="sym">[</span>Arg<span class="sym">] = {</span>Application.getArgs plain<span class="sym">}</span>
   N <span class="sym">= {</span>String.toInt Arg<span class="sym">}</span>

   <span class="kwa">class</span> TextFile <span class="kwb">from</span> Open.file Open.text <span class="kwb">end</span>
   StdOut <span class="sym">= {</span>New TextFile init<span class="sym">(</span>name<span class="sym">:</span>stdout<span class="sym">)}</span>

<span class="kwb">in</span>
   <span class="sym">{</span>Mandelbrot StdOut N<span class="sym">}</span>
   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>
