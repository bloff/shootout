<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo printInfo<span class="sym">)</span> Application<span class="sym">(</span>exit getArgs<span class="sym">)</span> Open<span class="sym">(</span>file text<span class="sym">)</span>

<span class="kwb">define</span>

  <span class="kwa">class</span> TextFile_
    <span class="kwb">from</span> Open.file Open.text
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  ITERATIONS <span class="sym">=</span> <span class="num">50</span> LIMIT_SQR <span class="sym">=</span> <span class="num">4.0</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>CmdlNArg Nth Default<span class="sym">}</span> N Nt <span class="kwb">in</span>
    <span class="kwa">try</span>
      Nt <span class="sym">= {</span>String.toInt <span class="sym">{</span>Application.getArgs plain<span class="sym">}</span>.Nth<span class="sym">}</span>
      N <span class="sym">=</span> <span class="kwb">if</span> Nt <span class="sym">&lt;</span> Default <span class="kwb">then</span> Default <span class="kwb">else</span> Nt <span class="kwb">end</span>
    <span class="kwa">catch</span> error<span class="sym">(</span>...<span class="sym">)</span> <span class="kwb">then</span>
      N <span class="sym">=</span> Default
    <span class="kwb">end</span>
    N
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  STDOUT <span class="sym">= {</span>New TextFile_ init<span class="sym">(</span>name<span class="sym">:</span>stdout<span class="sym">)}</span>

  N BitNum <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span> ByteAcc <span class="sym">= {</span>NewCell <span class="num">0</span><span class="sym">}</span>

  ZR <span class="sym">= {</span>NewCell <span class="num">0.0</span><span class="sym">}</span> ZI <span class="sym">= {</span>NewCell <span class="num">0.0</span><span class="sym">}</span> TR <span class="sym">= {</span>NewCell <span class="num">0.0</span><span class="sym">}</span>
  TI <span class="sym">= {</span>NewCell <span class="num">0.0</span><span class="sym">}</span> CR <span class="sym">= {</span>NewCell <span class="num">0.0</span><span class="sym">}</span> CI <span class="sym">= {</span>NewCell <span class="num">0.0</span><span class="sym">}</span>

  LIMIT_ADJ <span class="sym">= {</span>NewCell <span class="num">1</span><span class="sym">}</span> PRINT <span class="sym">= {</span>NewCell false<span class="sym">}</span>

<span class="slc">% ------------- %</span>

<span class="kwb">in</span>
  N <span class="sym">= {</span>CmdlNArg <span class="num">1 1</span><span class="sym">}</span>

  <span class="sym">{</span>STDOUT putS<span class="sym">({</span>VirtualString.toString <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span> # N # <span class="str">&quot; &quot;</span> # N<span class="sym">})}</span>

  <span class="kwb">for</span> Y <span class="kwb">in</span> <span class="num">0</span>..<span class="sym">(</span>N <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwb">do</span>
    <span class="kwb">for</span> X <span class="kwb">in</span> <span class="num">0</span>..<span class="sym">(</span>N <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> <span class="kwb">do</span>
      ZR <span class="sym">:=</span> <span class="num">0.0</span> ZI <span class="sym">:=</span> <span class="num">0.0</span> TR <span class="sym">:=</span> <span class="num">0.0</span> TI <span class="sym">:=</span> <span class="num">0.0</span>

      CR <span class="sym">:= (</span><span class="num">2.0</span> <span class="sym">* {</span>IntToFloat X<span class="sym">} / {</span>IntToFloat N<span class="sym">}) -</span> <span class="num">1.5</span>
      CI <span class="sym">:= (</span><span class="num">2.0</span> <span class="sym">* {</span>IntToFloat Y<span class="sym">} / {</span>IntToFloat N<span class="sym">}) -</span> <span class="num">1.0</span>

      LIMIT_ADJ <span class="sym">:=</span> <span class="num">1</span>

      <span class="kwb">for</span> I <span class="kwb">in</span> <span class="num">0</span><span class="sym">;(</span>I <span class="sym">&lt;</span> ITERATIONS andthen &#64;LIMIT_ADJ \= <span class="num">0</span><span class="sym">);(</span>I <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> <span class="kwb">do</span>
        TR <span class="sym">:=</span> &#64;ZR <span class="sym">*</span> &#64;ZR <span class="sym">-</span> &#64;ZI <span class="sym">*</span> &#64;ZI <span class="sym">+</span> &#64;CR
        TI <span class="sym">:=</span> <span class="num">2.0</span> <span class="sym">*</span> &#64;ZR <span class="sym">*</span> &#64;ZI <span class="sym">+</span> &#64;CI ZR <span class="sym">:=</span> &#64;TR ZI <span class="sym">:=</span> &#64;TI

        <span class="kwb">if</span> &#64;ZR <span class="sym">*</span> &#64;ZR <span class="sym">+</span> &#64;ZI <span class="sym">*</span> &#64;ZI <span class="sym">&gt;</span> LIMIT_SQR <span class="kwb">then</span> LIMIT_ADJ <span class="sym">:=</span> <span class="num">0</span> <span class="kwb">end</span>
      <span class="kwb">end</span>

      BitNum <span class="sym">:=</span> &#64;BitNum <span class="sym">+</span> <span class="num">1</span>
      ByteAcc <span class="sym">:=</span> &#64;ByteAcc <span class="sym">*</span> <span class="num">2</span> <span class="sym">+</span> &#64;LIMIT_ADJ

      <span class="kwb">if</span> &#64;BitNum <span class="sym">==</span> <span class="num">8</span> <span class="kwb">then</span> PRINT <span class="sym">:=</span> true <span class="kwb">end</span>

      <span class="kwb">if</span> X <span class="sym">== (</span>N <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span> andthen &#64;BitNum \= <span class="num">8</span> <span class="kwb">then</span>
        ByteAcc <span class="sym">:=</span> &#64;ByteAcc <span class="sym">* {</span>Number.pow <span class="num">2</span> <span class="sym">(</span><span class="num">8</span> <span class="sym">- (</span>N mod <span class="num">8</span><span class="sym">))}</span>
        PRINT <span class="sym">:=</span> true
      <span class="kwb">end</span>

      <span class="kwb">if</span> &#64;PRINT <span class="kwb">then</span>
        <span class="sym">{</span>STDOUT putC<span class="sym">(</span>&#64;ByteAcc<span class="sym">)}</span>
        ByteAcc <span class="sym">:=</span> <span class="num">0</span> BitNum <span class="sym">:=</span> <span class="num">0</span> PRINT <span class="sym">:=</span> false
      <span class="kwb">end</span>

    <span class="kwb">end</span>
  <span class="kwb">end</span>

  <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>

