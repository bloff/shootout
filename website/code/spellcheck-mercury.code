<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
% ---------------------------------------------------------------------------- %
% spellcheck.m
% Ralph Becket &lt;rbeck@microsoft.com&gt;
% Tue Jan  9 16:43:59 GMT 2001
% vim: ts=4 sw=4 et tw=0 wm=0 ff=unix
%
% ---------------------------------------------------------------------------- %

:- module mytest.

:- <B><FONT COLOR="#A020F0">interface</FONT></B>.

:- import_module io.



:- pred main(io__state, io__state).
:- mode main(di, uo) <B><FONT COLOR="#A020F0">is</FONT></B> det.



:- <B><FONT COLOR="#A020F0">implementation</FONT></B>.

:- import_module map, int, list, <B><FONT COLOR="#A020F0">string</FONT></B>, require, std_util, char.



:- <B><FONT COLOR="#A020F0">type</FONT></B> dict == map(<B><FONT COLOR="#A020F0">string</FONT></B>, <B><FONT COLOR="#A020F0">unit</FONT></B>).



main --&gt;
    io__see(&quot;Usr.Dict.Words&quot;, Res),
    (   <I><FONT COLOR="#B22222">{ Res = ok }</FONT></I>,           read_dictionary(map__init, Dict)
    ;   <I><FONT COLOR="#B22222">{ Res = error(ErrNo) }</FONT></I>, <I><FONT COLOR="#B22222">{ error(io__error_message(ErrNo)) }</FONT></I>
    ),
    io__seen,
    find_errors(Dict).



:- pred read_dictionary(dict, dict, io__state, io__state).
:- mode read_dictionary(<B><FONT COLOR="#A020F0">in</FONT></B>, out, di, uo) <B><FONT COLOR="#A020F0">is</FONT></B> det.

read_dictionary(D0, D) --&gt;
    io__read_line_as_string(Result),
    (
        <I><FONT COLOR="#B22222">{ Result = ok(Line) }</FONT></I>,
        <I><FONT COLOR="#B22222">{ Words  = string__words(char__is_whitespace, Line) }</FONT></I>,
        <I><FONT COLOR="#B22222">{ D1     = list__foldl(func(W, M) = M ^ elem(W) := unit, Words, D0) }</FONT></I>,
        read_dictionary(D1, D)
    ;
        <I><FONT COLOR="#B22222">{ Result = eof }</FONT></I>,
        <I><FONT COLOR="#B22222">{ D      = D0 }</FONT></I>
    ;
        <I><FONT COLOR="#B22222">{ Result = error(ErrNo) }</FONT></I>,
        <I><FONT COLOR="#B22222">{ error(io__error_message(ErrNo)) }</FONT></I>
    ).



:- pred find_errors(dict, io__state, io__state).
:- mode find_errors(<B><FONT COLOR="#A020F0">in</FONT></B>, di, uo) <B><FONT COLOR="#A020F0">is</FONT></B> det.

find_errors(D) --&gt;
    io__read_line_as_string(Result),
    (
        <I><FONT COLOR="#B22222">{ Result = ok(Line) }</FONT></I>,
        <I><FONT COLOR="#B22222">{ Words  = string__words(char__is_whitespace, Line) }</FONT></I>,
        list__foldl(
            ( pred(S::<B><FONT COLOR="#A020F0">in</FONT></B>, di, uo) <B><FONT COLOR="#A020F0">is</FONT></B> det --&gt;
                ( <B><FONT COLOR="#A020F0">if</FONT></B> <I><FONT COLOR="#B22222">{ map__contains(D, S) }</FONT></I>
                  <B><FONT COLOR="#A020F0">then</FONT></B> []
                  <B><FONT COLOR="#A020F0">else</FONT></B> io__write_string(S), io__nl
                )
            ),
            Words
        ),
        find_errors(D)
    ;
        <I><FONT COLOR="#B22222">{ Result = eof }</FONT></I>
    ;
        <I><FONT COLOR="#B22222">{ Result = error(ErrNo) }</FONT></I>,
        <I><FONT COLOR="#B22222">{ error(io__error_message(ErrNo)) }</FONT></I>
    ).</pre></td></tr></table>
