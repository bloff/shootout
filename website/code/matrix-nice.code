<span class="line">    1 </span><span class="com">/* The Great Computer Language Shootout
</span><span class="line">    2 </span><span class="com">     http://shootout.alioth.debian.org/
</span><span class="line">    3 </span><span class="com">    contributed by Isaac Gouy
</span><span class="line">    4 </span><span class="com"> 
</span><span class="line">    5 </span><span class="com">    Transliterated from the Java implementation
</span><span class="line">    6 </span><span class="com"> 
</span><span class="line">    7 </span><span class="com"> To compile:
</span><span class="line">    8 </span><span class="com">            nicec --sourcepath=.. -d=. -a matrix.jar matrix
</span><span class="line">    9 </span><span class="com"> 
</span><span class="line">   10 </span><span class="com"> To run:
</span><span class="line">   11 </span><span class="com">    java -ea -jar matrix.jar 300
</span><span class="line">   12 </span><span class="com"> */</span>
<span class="line">   13 </span>
<span class="line">   14 </span>
<span class="line">   15 </span>   <span class="kwa">import</span> ackermann<span class="sym">;</span> <span class="slc">// reuse toSinglePositiveInt 
</span><span class="line">   16 </span><span class="slc"></span>
<span class="line">   17 </span> <span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span><span class="line">   18 </span><span class="sym"> </span>   var n <span class="sym">=</span>  toSinglePositiveInt<span class="sym">(</span>args<span class="sym">);
</span><span class="line">   19 </span><span class="sym"> </span>   <span class="kwa">let</span> <span class="kwb">int</span> SIZE <span class="sym">=</span> <span class="num">30</span><span class="sym">;
</span><span class="line">   20 </span><span class="sym"> 
</span><span class="line">   21 </span><span class="sym"> </span>   <span class="kwa">let</span> m1 <span class="sym">=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);
</span><span class="line">   22 </span><span class="sym"> </span>   <span class="kwa">let</span> m2 <span class="sym">=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);
</span><span class="line">   23 </span><span class="sym"> </span>   <span class="kwa">let</span> mm <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>SIZE<span class="sym">][</span>SIZE<span class="sym">];
</span><span class="line">   24 </span><span class="sym"> 
</span><span class="line">   25 </span><span class="sym"> </span>   <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">)</span> mmult<span class="sym">(</span>m1<span class="sym">,</span> m2<span class="sym">,</span> mm<span class="sym">);
</span><span class="line">   26 </span><span class="sym"> 
</span><span class="line">   27 </span><span class="sym"> </span>   print<span class="sym">(</span>mm<span class="sym">[</span><span class="num">0</span><span class="sym">][</span><span class="num">0</span><span class="sym">]);</span> print<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);
</span><span class="line">   28 </span><span class="sym"> </span>   print<span class="sym">(</span>mm<span class="sym">[</span><span class="num">2</span><span class="sym">][</span><span class="num">3</span><span class="sym">]);</span> print<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);
</span><span class="line">   29 </span><span class="sym">       </span>   print<span class="sym">(</span>mm<span class="sym">[</span><span class="num">3</span><span class="sym">][</span><span class="num">2</span><span class="sym">]);</span> print<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);
</span><span class="line">   30 </span><span class="sym"> </span>   println<span class="sym">(</span>mm<span class="sym">[</span><span class="num">4</span><span class="sym">][</span><span class="num">4</span><span class="sym">]);
</span><span class="line">   31 </span><span class="sym"> }
</span><span class="line">   32 </span><span class="sym"> 
</span><span class="line">   33 </span><span class="sym"> 
</span><span class="line">   34 </span><span class="sym"> </span><span class="kwb">int</span><span class="sym">[][]</span> mkmatrix<span class="sym">(</span><span class="kwb">int</span> nRows<span class="sym">,</span> <span class="kwb">int</span> nCols<span class="sym">) {
</span><span class="line">   35 </span><span class="sym"> </span>   var count <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   36 </span><span class="sym"> </span>   <span class="kwa">let</span> m <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>nRows<span class="sym">][</span>nCols<span class="sym">];
</span><span class="line">   37 </span><span class="sym"> </span>   <span class="kwa">for</span> <span class="sym">(</span>var i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> nRows<span class="sym">;</span> i<span class="sym">++)
</span><span class="line">   38 </span><span class="sym">  </span>      <span class="kwa">for</span> <span class="sym">(</span>var j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> nCols<span class="sym">;</span> j<span class="sym">++)
</span><span class="line">   39 </span><span class="sym">  </span>         m<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> count<span class="sym">++;
</span><span class="line">   40 </span><span class="sym"> </span>   <span class="kwa">return</span> m<span class="sym">;
</span><span class="line">   41 </span><span class="sym"> }
</span><span class="line">   42 </span><span class="sym"> 
</span><span class="line">   43 </span><span class="sym"> 
</span><span class="line">   44 </span><span class="sym"> </span><span class="kwb">void</span> mmult<span class="sym">(</span><span class="kwb">int</span><span class="sym">[][]</span> m1<span class="sym">,</span> <span class="kwb">int</span><span class="sym">[][]</span> m2<span class="sym">,</span> <span class="kwb">int</span><span class="sym">[][]</span> m<span class="sym">) {
</span><span class="line">   45 </span><span class="sym"> </span>   <span class="kwa">let</span> nRows <span class="sym">=</span> m1<span class="sym">.</span>length<span class="sym">;
</span><span class="line">   46 </span><span class="sym"> </span>   <span class="kwa">let</span> nCols <span class="sym">=</span> nRows<span class="sym">;</span> <span class="slc">// Assume a square matrix 
</span><span class="line">   47 </span><span class="slc"></span>   <span class="kwa">for</span> <span class="sym">(</span>var i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> nRows<span class="sym">;</span> i<span class="sym">++)
</span><span class="line">   48 </span><span class="sym">  </span>      <span class="kwa">for</span> <span class="sym">(</span>var j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> nCols<span class="sym">;</span> j<span class="sym">++) {
</span><span class="line">   49 </span><span class="sym"> </span>         <span class="kwb">int</span> val <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   50 </span><span class="sym"> </span>         <span class="kwa">for</span> <span class="sym">(</span>var k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> k <span class="sym">&lt;</span> nCols<span class="sym">;</span> k<span class="sym">++)
</span><span class="line">   51 </span><span class="sym">  </span>            val <span class="sym">+=</span> m1<span class="sym">[</span>i<span class="sym">][</span>k<span class="sym">] *</span> m2<span class="sym">[</span>k<span class="sym">][</span>j<span class="sym">];
</span><span class="line">   52 </span><span class="sym"> </span>         m<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> val<span class="sym">;
</span><span class="line">   53 </span><span class="sym">       }
</span><span class="line">   54 </span><span class="sym"> }</span> 
