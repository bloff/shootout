<span class="com">/* The Great Computer Language Shootout
    http://shootout.alioth.debian.org/
   contributed by Isaac Gouy

   Transliterated from the Java implementation

To compile:
	   nicec --sourcepath=.. -d=. -a matrix.jar matrix

To run:
   java -ea -jar matrix.jar 300
*/</span>


<span class="kwa">import</span> ackermann<span class="sym">;</span> <span class="slc">// reuse toSinglePositiveInt
</span>
<span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span>   var n <span class="sym">=</span>  toSinglePositiveInt<span class="sym">(</span>args<span class="sym">);
</span>   <span class="kwa">let</span> <span class="kwb">int</span> SIZE <span class="sym">=</span> <span class="num">30</span><span class="sym">;

</span>   <span class="kwa">let</span> m1 <span class="sym">=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);
</span>   <span class="kwa">let</span> m2 <span class="sym">=</span> mkmatrix<span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);
</span>   <span class="kwa">let</span> mm <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>SIZE<span class="sym">][</span>SIZE<span class="sym">];

</span>   <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">)</span> mmult<span class="sym">(</span>m1<span class="sym">,</span> m2<span class="sym">,</span> mm<span class="sym">);

</span>   print<span class="sym">(</span>mm<span class="sym">[</span><span class="num">0</span><span class="sym">][</span><span class="num">0</span><span class="sym">]);</span> print<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);
</span>   print<span class="sym">(</span>mm<span class="sym">[</span><span class="num">2</span><span class="sym">][</span><span class="num">3</span><span class="sym">]);</span> print<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);
      </span>   print<span class="sym">(</span>mm<span class="sym">[</span><span class="num">3</span><span class="sym">][</span><span class="num">2</span><span class="sym">]);</span> print<span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);
</span>   println<span class="sym">(</span>mm<span class="sym">[</span><span class="num">4</span><span class="sym">][</span><span class="num">4</span><span class="sym">]);
}


</span><span class="kwb">int</span><span class="sym">[][]</span> mkmatrix<span class="sym">(</span><span class="kwb">int</span> nRows<span class="sym">,</span> <span class="kwb">int</span> nCols<span class="sym">) {
</span>   var count <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>   <span class="kwa">let</span> m <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>nRows<span class="sym">][</span>nCols<span class="sym">];
</span>   <span class="kwa">for</span> <span class="sym">(</span>var i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> nRows<span class="sym">;</span> i<span class="sym">++)
 </span>      <span class="kwa">for</span> <span class="sym">(</span>var j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> nCols<span class="sym">;</span> j<span class="sym">++)
 </span>         m<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> count<span class="sym">++;
</span>   <span class="kwa">return</span> m<span class="sym">;
}


</span><span class="kwb">void</span> mmult<span class="sym">(</span><span class="kwb">int</span><span class="sym">[][]</span> m1<span class="sym">,</span> <span class="kwb">int</span><span class="sym">[][]</span> m2<span class="sym">,</span> <span class="kwb">int</span><span class="sym">[][]</span> m<span class="sym">) {
</span>   <span class="kwa">let</span> nRows <span class="sym">=</span> m1<span class="sym">.</span>length<span class="sym">;
</span>   <span class="kwa">let</span> nCols <span class="sym">=</span> nRows<span class="sym">;</span> <span class="slc">// Assume a square matrix
</span>   <span class="kwa">for</span> <span class="sym">(</span>var i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i <span class="sym">&lt;</span> nRows<span class="sym">;</span> i<span class="sym">++)
 </span>      <span class="kwa">for</span> <span class="sym">(</span>var j <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> j <span class="sym">&lt;</span> nCols<span class="sym">;</span> j<span class="sym">++) {
</span>         <span class="kwb">int</span> val <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>         <span class="kwa">for</span> <span class="sym">(</span>var k <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> k <span class="sym">&lt;</span> nCols<span class="sym">;</span> k<span class="sym">++)
 </span>            val <span class="sym">+=</span> m1<span class="sym">[</span>i<span class="sym">][</span>k<span class="sym">] *</span> m2<span class="sym">[</span>k<span class="sym">][</span>j<span class="sym">];
</span>         m<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> val<span class="sym">;
      }
}</span>
