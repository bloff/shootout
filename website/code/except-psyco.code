<span class="slc">#!/usr/bin/python
</span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span>
<span class="kwc">import</span> sys<span class="sym">,</span> psyco
psyco<span class="sym">.</span>full<span class="sym">()

</span>HI <span class="sym">=</span> <span class="num">0
</span>LO <span class="sym">=</span> <span class="num">0


</span><span class="kwa">class</span> Hi_exception<span class="sym">:
</span>    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> value<span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>value <span class="sym">=</span> value
    <span class="kwb">def</span> __str__<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        <span class="kwb">return</span> `<span class="kwc">self</span><span class="sym">.</span>value`


<span class="kwa">class</span> Lo_exception<span class="sym">:
</span>    <span class="kwb">def</span> __init__<span class="sym">(</span><span class="kwc">self</span><span class="sym">,</span> value<span class="sym">):
</span>        <span class="kwc">self</span><span class="sym">.</span>value <span class="sym">=</span> value
    <span class="kwb">def</span> __str__<span class="sym">(</span><span class="kwc">self</span><span class="sym">):
</span>        <span class="kwb">return</span> `<span class="kwc">self</span><span class="sym">.</span>value`


<span class="kwb">def</span> some_function<span class="sym">(</span>num<span class="sym">):
</span>    <span class="kwb">try</span><span class="sym">:
</span>        hi_function<span class="sym">(</span>num<span class="sym">)
</span>    <span class="kwb">except</span><span class="sym">:
</span>        <span class="kwb">raise</span> <span class="str">&quot;We shouldn't get here (%s)&quot;</span> <span class="sym">%</span> sys<span class="sym">.</span>exc_info<span class="sym">()[</span><span class="num">0</span><span class="sym">]


</span><span class="kwb">def</span> hi_function<span class="sym">(</span>num<span class="sym">):
</span>    <span class="kwa">global</span> HI
    <span class="kwb">try</span><span class="sym">:
</span>        lo_function<span class="sym">(</span>num<span class="sym">)
</span>    <span class="kwb">except</span> Hi_exception<span class="sym">,</span> ex<span class="sym">:
</span>        HI <span class="sym">+=</span> <span class="num">1
</span>        <span class="slc">#print 'Hi_exception occurred, value:', ex.value
</span>

<span class="kwb">def</span> lo_function<span class="sym">(</span>num<span class="sym">):
</span>    <span class="kwa">global</span> LO
    <span class="kwb">try</span><span class="sym">:
</span>        blowup<span class="sym">(</span>num<span class="sym">)
</span>    <span class="kwb">except</span> Lo_exception<span class="sym">,</span> ex<span class="sym">:
</span>        LO <span class="sym">+=</span> <span class="num">1
</span>        <span class="slc">#print 'Lo_exception occurred, value:', ex.value
</span>

<span class="kwb">def</span> blowup<span class="sym">(</span>num<span class="sym">):
</span>    <span class="kwb">raise</span> <span class="sym">(((</span>num <span class="sym">&amp;</span> <span class="num">1</span><span class="sym">)</span> <span class="kwb">and</span> Lo_exception<span class="sym">)</span> <span class="kwb">or</span> Hi_exception<span class="sym">)(</span>num<span class="sym">)

</span><span class="kwb">def</span> main<span class="sym">():
</span>    <span class="kwa">global</span> LO<span class="sym">,</span> HI
    NUM <span class="sym">=</span> <span class="kwa">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])
</span>    <span class="kwb">if</span> NUM <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">:
</span>        NUM <span class="sym">=</span> <span class="num">1
</span>    <span class="kwb">for</span> i <span class="kwb">in</span> <span class="kwa">xrange</span><span class="sym">(</span>NUM<span class="num">-1</span><span class="sym">,-</span><span class="num">1</span><span class="sym">,-</span><span class="num">1</span><span class="sym">):
</span>        some_function<span class="sym">(</span>i<span class="sym">)
</span>    <span class="kwb">print</span> <span class="str">&quot;Exceptions: HI=%d / LO=%d&quot;</span> <span class="sym">% (</span>HI<span class="sym">,</span> LO<span class="sym">)


</span>main<span class="sym">()</span>
