#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="sym">-</span>e main <span class="sym">-</span>s
<span class="sym">!</span>#
<span class="slc">;;; $Id: fibo-guile.code,v 1.11 2006-09-20 05:51:22 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">)))</span>
    <span class="sym">(</span>display <span class="sym">(</span>fib n<span class="sym">))</span>
    <span class="sym">(</span>newline<span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>fib n<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> n <span class="num">2</span><span class="sym">)</span> <span class="num">1</span><span class="sym">)</span>
	<span class="sym">(</span>else <span class="sym">(+ (</span>fib <span class="sym">(-</span> n <span class="num">2</span><span class="sym">)) (</span>fib <span class="sym">(-</span> n <span class="num">1</span><span class="sym">))))))</span>

