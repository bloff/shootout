<span class="com">(*</span>
<span class="com"> * $Id: lists-ocaml.code,v 1.5 2005-11-13 19:35:46 bfulgham Exp $</span>
<span class="com"> * http://www.bagley.org/~doug/shootout/</span>
<span class="com"> * from Benedict Rosenau</span>
<span class="com"> * improved by Jean-Christophe Filliatre</span>
<span class="com"> *)</span>

<span class="kwa">module</span> Deque <span class="sym">=</span> <span class="kwa">struct</span>
  <span class="kwa">type</span> t <span class="sym">= {</span> size<span class="sym">:</span> <span class="kwb">int</span><span class="sym">;</span> <span class="kwa">mutable</span> first<span class="sym">:</span> <span class="kwb">int</span><span class="sym">;</span> <span class="kwa">mutable</span> last<span class="sym">:</span> <span class="kwb">int</span><span class="sym">;</span> fld<span class="sym">:</span> <span class="kwb">int</span> array <span class="sym">}</span>

  <span class="kwa">exception</span> Empty
  <span class="kwa">exception</span> Full

  <span class="kwa">let</span> empty n <span class="sym">=</span>
    <span class="kwa">let</span> n <span class="sym">=</span> max <span class="sym">(</span>succ n<span class="sym">)</span> <span class="num">1</span> <span class="kwa">in</span>
    <span class="sym">{</span> size <span class="sym">=</span> n<span class="sym">;</span> first <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> last <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> fld <span class="sym">=</span> Array.make n <span class="num">0</span> <span class="sym">}</span>

  <span class="kwa">let</span> iota n <span class="sym">=</span>
    <span class="kwa">let</span> size <span class="sym">=</span> succ n <span class="kwa">in</span>
    <span class="sym">{</span> size <span class="sym">=</span> size<span class="sym">;</span> first <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> last <span class="sym">=</span> n<span class="sym">;</span> fld <span class="sym">=</span> Array.init size succ <span class="sym">}</span>

  <span class="kwa">let</span> up n s <span class="sym">=</span> <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">0</span> <span class="kwa">then</span> n <span class="sym">+</span> s <span class="kwa">else</span> n
  <span class="kwa">let</span> down n s <span class="sym">=</span> <span class="kwa">if</span> n <span class="sym">&gt;=</span> s <span class="kwa">then</span> n <span class="sym">-</span> s <span class="kwa">else</span> n
  <span class="kwa">let</span> one_up n s <span class="sym">=</span> <span class="kwa">if</span> n <span class="sym">==</span> s <span class="sym">-</span> <span class="num">1</span> <span class="kwa">then</span> <span class="num">0</span> <span class="kwa">else</span> n <span class="sym">+</span> <span class="num">1</span>
  <span class="kwa">let</span> one_down n s <span class="sym">=</span> <span class="kwa">if</span> n <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> s <span class="sym">-</span> <span class="num">1</span> <span class="kwa">else</span> n <span class="sym">-</span> <span class="num">1</span>

  <span class="kwa">let</span> length q <span class="sym">=</span> up <span class="sym">(</span>q.last <span class="sym">-</span> q.first<span class="sym">)</span> q.size

  <span class="kwa">let rec</span> array_eq q1 off1 q2 off2 n <span class="sym">=</span>
    n <span class="sym">==</span> <span class="num">0</span> <span class="sym">||</span>
      q1.fld.<span class="sym">(</span>off1<span class="sym">) ==</span> q2.fld.<span class="sym">(</span>off2<span class="sym">) &amp;&amp;</span>
      <span class="sym">(</span>array_eq q1 <span class="sym">(</span>one_up off1 q1.size<span class="sym">)</span> q2 <span class="sym">(</span>one_up off2 q2.size<span class="sym">) (</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span>

  <span class="kwa">let</span> equal q1 q2 <span class="sym">=</span>
    <span class="kwa">let</span> len1 <span class="sym">=</span> length q1 <span class="kwa">in</span>
    len1 <span class="sym">==</span> length q2 <span class="sym">&amp;&amp;</span> array_eq q1 q1.first q2 q2.first len1

  <span class="kwa">let</span> nth q n <span class="sym">=</span>
    <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">0</span> <span class="kwa">or</span> n <span class="sym">&gt;=</span> length q <span class="kwa">then</span> failwith <span class="str">&quot;nth&quot;</span><span class="sym">;</span>
    q.fld.<span class="sym">(</span>down <span class="sym">(</span>q.first <span class="sym">+</span> n<span class="sym">)</span> q.size<span class="sym">)</span>

  <span class="kwa">let</span> push_back q elem <span class="sym">=</span>
    <span class="kwa">let</span> last' <span class="sym">=</span> one_up q.last q.size <span class="kwa">in</span>
    <span class="kwa">if</span> last' <span class="sym">==</span> q.first <span class="kwa">then</span> raise Full<span class="sym">;</span>
    q.fld.<span class="sym">(</span>q.last<span class="sym">) &lt;-</span> elem<span class="sym">;</span>
    q.last <span class="sym">&lt;-</span> last'

  <span class="kwa">let</span> take_front q <span class="sym">=</span>
    <span class="kwa">if</span> q.first <span class="sym">==</span> q.last <span class="kwa">then</span> raise Empty<span class="sym">;</span>
    <span class="kwa">let</span> old_first <span class="sym">=</span> q.first <span class="kwa">in</span>
    q.first <span class="sym">&lt;-</span> one_up q.first q.size<span class="sym">;</span>
    q.fld.<span class="sym">(</span>old_first<span class="sym">)</span>

  <span class="kwa">let</span> take_back q <span class="sym">=</span>
    <span class="kwa">if</span> q.first <span class="sym">==</span> q.last <span class="kwa">then</span> raise Empty<span class="sym">;</span>
    <span class="kwa">let</span> new_last <span class="sym">=</span> one_down q.last q.size <span class="kwa">in</span>
    q.last <span class="sym">&lt;-</span> new_last<span class="sym">;</span>
    q.fld.<span class="sym">(</span>new_last<span class="sym">)</span>

  <span class="kwa">let</span> copy q <span class="sym">=</span>
    <span class="sym">{</span> size <span class="sym">=</span> q.size<span class="sym">;</span> first <span class="sym">=</span> q.first<span class="sym">;</span> last <span class="sym">=</span> q.last<span class="sym">;</span> fld <span class="sym">=</span> Array.copy q.fld <span class="sym">}</span>

  <span class="kwa">let</span> reverse q <span class="sym">=</span>
    <span class="kwa">let</span> w <span class="sym">=</span> length q <span class="kwa">in</span>
    <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> <span class="sym">(</span>w <span class="kwa">lsr</span> <span class="num">1</span><span class="sym">) -</span> <span class="num">1</span> <span class="kwa">do</span>
      <span class="kwa">let</span> i1 <span class="sym">=</span> down <span class="sym">(</span>q.first <span class="sym">+</span> i<span class="sym">)</span> q.size <span class="kwa">and</span> i2 <span class="sym">=</span> up <span class="sym">(</span>q.last <span class="sym">-</span> <span class="num">1</span> <span class="sym">-</span> i<span class="sym">)</span> q.size <span class="kwa">in</span>
      <span class="kwa">let</span> v1 <span class="sym">=</span> q.fld.<span class="sym">(</span>i1<span class="sym">)</span> <span class="kwa">in</span>
      q.fld.<span class="sym">(</span>i1<span class="sym">) &lt;-</span> q.fld.<span class="sym">(</span>i2<span class="sym">);</span>
      q.fld.<span class="sym">(</span>i2<span class="sym">) &lt;-</span> v1
    <span class="kwa">done</span>
<span class="kwa">end</span>

<span class="kwa">let</span> test_lists <span class="sym">() =</span>
  <span class="kwa">let</span> size <span class="sym">=</span> <span class="num">10000</span> <span class="kwa">in</span>
  <span class="kwa">let</span> d1 <span class="sym">=</span> Deque.iota size <span class="kwa">in</span>
  <span class="kwa">let</span> d2 <span class="sym">=</span> Deque.copy d1
  <span class="kwa">and</span> d3 <span class="sym">=</span> Deque.empty size <span class="kwa">in</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> Deque.length d2 <span class="kwa">do</span> Deque.push_back d3 <span class="sym">(</span>Deque.take_front d2<span class="sym">)</span> <span class="kwa">done</span><span class="sym">;</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> Deque.length d3 <span class="kwa">do</span> Deque.push_back d2 <span class="sym">(</span>Deque.take_back d3<span class="sym">)</span> <span class="kwa">done</span><span class="sym">;</span>
  Deque.reverse d1<span class="sym">;</span>
  <span class="kwa">if</span> size <span class="sym">&lt;&gt;</span> Deque.nth d1 <span class="num">0</span> <span class="kwa">then</span> failwith <span class="str">&quot;First test failed&quot;</span><span class="sym">;</span>
  <span class="kwa">if</span> Deque.length d1 <span class="sym">&lt;&gt;</span> Deque.length d2 <span class="kwa">then</span> failwith <span class="str">&quot;Second test failed&quot;</span><span class="sym">;</span>
  <span class="kwa">if</span> not <span class="sym">(</span>Deque.equal d1 d2<span class="sym">)</span> <span class="kwa">then</span> failwith <span class="str">&quot;Third test failed&quot;</span><span class="sym">;</span>
  Deque.length d1

<span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">if</span> Array.length Sys.argv <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">then</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">else</span> <span class="num">1</span><span class="sym">;;</span>
<span class="kwa">for</span> i <span class="sym">=</span> <span class="num">2</span> <span class="kwa">to</span> n <span class="kwa">do</span> ignore <span class="sym">(</span>test_lists <span class="sym">())</span> <span class="kwa">done</span><span class="sym">;</span>
Printf.printf <span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>test_lists <span class="sym">())</span>
