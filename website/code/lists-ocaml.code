<span class="line">    1 </span><span class="com">(*
</span><span class="line">    2 </span><span class="com"> * $Id: lists-ocaml.code,v 1.4 2004-11-13 07:41:49 bfulgham Exp $
</span><span class="line">    3 </span><span class="com"> * http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="com"> * from Benedict Rosenau
</span><span class="line">    5 </span><span class="com"> * improved by Jean-Christophe Filliatre
</span><span class="line">    6 </span><span class="com"> *)</span>
<span class="line">    7 </span>
<span class="line">    8 </span><span class="kwa">module</span> Deque <span class="sym">=</span> <span class="kwa">struct
</span><span class="line">    9 </span><span class="kwa">  type</span> t <span class="sym">= {</span> size<span class="sym">:</span> <span class="kwb">int</span><span class="sym">;</span> <span class="kwa">mutable</span> first<span class="sym">:</span> <span class="kwb">int</span><span class="sym">;</span> <span class="kwa">mutable</span> last<span class="sym">:</span> <span class="kwb">int</span><span class="sym">;</span> fld<span class="sym">:</span> <span class="kwb">int</span> array <span class="sym">}
</span><span class="line">   10 </span><span class="sym">
</span><span class="line">   11 </span><span class="sym"></span>  <span class="kwa">exception</span> Empty
<span class="line">   12 </span>  <span class="kwa">exception</span> Full
<span class="line">   13 </span>
<span class="line">   14 </span>  <span class="kwa">let</span> empty n <span class="sym">=
</span><span class="line">   15 </span><span class="sym"></span>    <span class="kwa">let</span> n <span class="sym">=</span> max <span class="sym">(</span>succ n<span class="sym">)</span> <span class="num">1</span> <span class="kwa">in
</span><span class="line">   16 </span><span class="kwa"></span>    <span class="sym">{</span> size <span class="sym">=</span> n<span class="sym">;</span> first <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> last <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> fld <span class="sym">=</span> Array.make n <span class="num">0</span> <span class="sym">}
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym"></span>  <span class="kwa">let</span> iota n <span class="sym">=
</span><span class="line">   19 </span><span class="sym"></span>    <span class="kwa">let</span> size <span class="sym">=</span> succ n <span class="kwa">in
</span><span class="line">   20 </span><span class="kwa"></span>    <span class="sym">{</span> size <span class="sym">=</span> size<span class="sym">;</span> first <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> last <span class="sym">=</span> n<span class="sym">;</span> fld <span class="sym">=</span> Array.init size succ <span class="sym">}
</span><span class="line">   21 </span><span class="sym">
</span><span class="line">   22 </span><span class="sym"></span>  <span class="kwa">let</span> up n s <span class="sym">=</span> <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">0</span> <span class="kwa">then</span> n <span class="sym">+</span> s <span class="kwa">else</span> n
<span class="line">   23 </span>  <span class="kwa">let</span> down n s <span class="sym">=</span> <span class="kwa">if</span> n <span class="sym">&gt;=</span> s <span class="kwa">then</span> n <span class="sym">-</span> s <span class="kwa">else</span> n
<span class="line">   24 </span>  <span class="kwa">let</span> one_up n s <span class="sym">=</span> <span class="kwa">if</span> n <span class="sym">==</span> s <span class="num">- 1</span> <span class="kwa">then</span> <span class="num">0</span> <span class="kwa">else</span> n <span class="sym">+</span> <span class="num">1
</span><span class="line">   25 </span><span class="num"></span>  <span class="kwa">let</span> one_down n s <span class="sym">=</span> <span class="kwa">if</span> n <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then</span> s <span class="num">- 1</span> <span class="kwa">else</span> n <span class="num">- 1
</span><span class="line">   26 </span><span class="num">
</span><span class="line">   27 </span><span class="num"></span>  <span class="kwa">let</span> length q <span class="sym">=</span> up <span class="sym">(</span>q.last <span class="sym">-</span> q.first<span class="sym">)</span> q.size
<span class="line">   28 </span>
<span class="line">   29 </span>  <span class="kwa">let rec</span> array_eq q1 off1 q2 off2 n <span class="sym">=
</span><span class="line">   30 </span><span class="sym"></span>    n <span class="sym">==</span> <span class="num">0</span> <span class="sym">||
</span><span class="line">   31 </span><span class="sym"></span>      q1.fld.<span class="sym">(</span>off1<span class="sym">) ==</span> q2.fld.<span class="sym">(</span>off2<span class="sym">) &amp;&amp;
</span><span class="line">   32 </span><span class="sym">      (</span>array_eq q1 <span class="sym">(</span>one_up off1 q1.size<span class="sym">)</span> q2 <span class="sym">(</span>one_up off2 q2.size<span class="sym">) (</span>n <span class="num">- 1</span><span class="sym">))
</span><span class="line">   33 </span><span class="sym">
</span><span class="line">   34 </span><span class="sym"></span>  <span class="kwa">let</span> equal q1 q2 <span class="sym">=
</span><span class="line">   35 </span><span class="sym"></span>    <span class="kwa">let</span> len1 <span class="sym">=</span> length q1 <span class="kwa">in
</span><span class="line">   36 </span><span class="kwa"></span>    len1 <span class="sym">==</span> length q2 <span class="sym">&amp;&amp;</span> array_eq q1 q1.first q2 q2.first len1
<span class="line">   37 </span>
<span class="line">   38 </span>  <span class="kwa">let</span> nth q n <span class="sym">=
</span><span class="line">   39 </span><span class="sym"></span>    <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">0</span> <span class="kwa">or</span> n <span class="sym">&gt;=</span> length q <span class="kwa">then</span> failwith <span class="str">&quot;nth&quot;</span><span class="sym">;
</span><span class="line">   40 </span><span class="sym"></span>    q.fld.<span class="sym">(</span>down <span class="sym">(</span>q.first <span class="sym">+</span> n<span class="sym">)</span> q.size<span class="sym">)
</span><span class="line">   41 </span><span class="sym">
</span><span class="line">   42 </span><span class="sym"></span>  <span class="kwa">let</span> push_back q elem <span class="sym">=
</span><span class="line">   43 </span><span class="sym"></span>    <span class="kwa">let</span> last<span class="str">' = one_up q.last q.size in
</span><span class="line">   44 </span><span class="str">    if last'</span> <span class="sym">==</span> q.first <span class="kwa">then</span> raise Full<span class="sym">;
</span><span class="line">   45 </span><span class="sym"></span>    q.fld.<span class="sym">(</span>q.last<span class="sym">) &lt;-</span> elem<span class="sym">;
</span><span class="line">   46 </span><span class="sym"></span>    q.last <span class="sym">&lt;-</span> last<span class="str">'
</span><span class="line">   47 </span><span class="str">
</span><span class="line">   48 </span><span class="str">  let take_front q =
</span><span class="line">   49 </span><span class="str">    if q.first == q.last then raise Empty;
</span><span class="line">   50 </span><span class="str">    let old_first = q.first in
</span><span class="line">   51 </span><span class="str">    q.first &lt;- one_up q.first q.size;
</span><span class="line">   52 </span><span class="str">    q.fld.(old_first)
</span><span class="line">   53 </span><span class="str">
</span><span class="line">   54 </span><span class="str">  let take_back q =
</span><span class="line">   55 </span><span class="str">    if q.first == q.last then raise Empty;
</span><span class="line">   56 </span><span class="str">    let new_last = one_down q.last q.size in
</span><span class="line">   57 </span><span class="str">    q.last &lt;- new_last;
</span><span class="line">   58 </span><span class="str">    q.fld.(new_last)
</span><span class="line">   59 </span><span class="str">
</span><span class="line">   60 </span><span class="str">  let copy q =
</span><span class="line">   61 </span><span class="str">    { size = q.size; first = q.first; last = q.last; fld = Array.copy q.fld }
</span><span class="line">   62 </span><span class="str">
</span><span class="line">   63 </span><span class="str">  let reverse q =
</span><span class="line">   64 </span><span class="str">    let w = length q in
</span><span class="line">   65 </span><span class="str">    for i = 0 to (w lsr 1) - 1 do
</span><span class="line">   66 </span><span class="str">      let i1 = down (q.first + i) q.size and i2 = up (q.last - 1 - i) q.size in
</span><span class="line">   67 </span><span class="str">      let v1 = q.fld.(i1) in
</span><span class="line">   68 </span><span class="str">      q.fld.(i1) &lt;- q.fld.(i2);
</span><span class="line">   69 </span><span class="str">      q.fld.(i2) &lt;- v1
</span><span class="line">   70 </span><span class="str">    done
</span><span class="line">   71 </span><span class="str">end
</span><span class="line">   72 </span><span class="str">
</span><span class="line">   73 </span><span class="str">let test_lists () =
</span><span class="line">   74 </span><span class="str">  let size = 10000 in
</span><span class="line">   75 </span><span class="str">  let d1 = Deque.iota size in
</span><span class="line">   76 </span><span class="str">  let d2 = Deque.copy d1
</span><span class="line">   77 </span><span class="str">  and d3 = Deque.empty size in
</span><span class="line">   78 </span><span class="str">  for i = 1 to Deque.length d2 do Deque.push_back d3 (Deque.take_front d2) done;
</span><span class="line">   79 </span><span class="str">  for i = 1 to Deque.length d3 do Deque.push_back d2 (Deque.take_back d3) done;
</span><span class="line">   80 </span><span class="str">  Deque.reverse d1;
</span><span class="line">   81 </span><span class="str">  if size &lt;&gt; Deque.nth d1 0 then failwith &quot;First test failed&quot;;
</span><span class="line">   82 </span><span class="str">  if Deque.length d1 &lt;&gt; Deque.length d2 then failwith &quot;Second test failed&quot;;
</span><span class="line">   83 </span><span class="str">  if not (Deque.equal d1 d2) then failwith &quot;Third test failed&quot;;
</span><span class="line">   84 </span><span class="str">  Deque.length d1
</span><span class="line">   85 </span><span class="str">
</span><span class="line">   86 </span><span class="str">let n = if Array.length Sys.argv &gt; 1 then int_of_string Sys.argv.(1) else 1;;
</span><span class="line">   87 </span><span class="str">for i = 2 to n do ignore (test_lists ()) done;
</span><span class="line">   88 </span><span class="str">Printf.printf &quot;%d</span><span class="esc">\n</span><span class="str">&quot; (test_lists ())</span>
