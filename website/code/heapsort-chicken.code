<span class="slc">;;; heapsort.scm</span>

<span class="slc">;; Prints 0.9990640717878372 instead of 0.9990640718 when n=1000.</span>
<span class="slc">;; Updated by Justin Smith</span>

<span class="sym">(</span>declare <span class="sym">(</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>uses format srfi<span class="sym">-</span><span class="num">4</span><span class="sym">))</span>

<span class="sym">(</span>define IM   <span class="num">139968</span><span class="sym">)</span>
<span class="sym">(</span>define IA     <span class="num">3877</span><span class="sym">)</span>
<span class="sym">(</span>define IC    <span class="num">29573</span><span class="sym">)</span>

<span class="sym">(</span>define LAST <span class="num">42</span><span class="sym">)</span>
<span class="sym">(</span>define <span class="sym">(</span>gen_random <span class="kwa">max</span><span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> LAST <span class="sym">(</span>modulo <span class="sym">(+ (*</span> LAST IA<span class="sym">)</span> IC<span class="sym">)</span> IM<span class="sym">))</span>
  <span class="sym">(/ (*</span> <span class="kwa">max</span> LAST<span class="sym">)</span> IM<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>heapsort n ra<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>ir n<span class="sym">)</span>
        <span class="sym">(</span>l <span class="sym">(+ (</span>quotient n <span class="num">2</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))</span>
        <span class="sym">(</span>i <span class="num">0</span><span class="sym">)</span>
        <span class="sym">(</span>j <span class="num">0</span><span class="sym">)</span>
        <span class="sym">(</span>rra <span class="num">0.0</span><span class="sym">))</span>
    <span class="sym">(</span>call<span class="sym">/</span>cc
     <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>return<span class="sym">)</span>
      <span class="sym">(</span>do <span class="sym">((</span>bar #t<span class="sym">))</span>
        <span class="sym">((=</span> <span class="num">1 0</span><span class="sym">))</span>
        <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&gt;</span> l <span class="num">1</span><span class="sym">)</span>
               <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> l <span class="sym">(-</span> l <span class="num">1</span><span class="sym">))</span>
               <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> rra <span class="sym">(</span>f64vector<span class="sym">-</span>ref ra l<span class="sym">)))</span>
              <span class="sym">(</span>else
               <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> rra <span class="sym">(</span>f64vector<span class="sym">-</span>ref ra ir<span class="sym">))</span>
               <span class="sym">(</span>f64vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ra ir <span class="sym">(</span>f64vector<span class="sym">-</span>ref ra <span class="num">1</span><span class="sym">))</span>
               <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> ir <span class="sym">(-</span> ir <span class="num">1</span><span class="sym">))</span>
               <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt;=</span> ir <span class="num">1</span><span class="sym">)</span>
                      <span class="sym">(</span>f64vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ra <span class="num">1</span> rra<span class="sym">)</span>
                      <span class="sym">(</span>return #t<span class="sym">)))))</span>
        <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> i l<span class="sym">)</span>
        <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(*</span> l <span class="num">2</span><span class="sym">))</span>
        <span class="sym">(</span>do <span class="sym">((</span>foo #t<span class="sym">))</span>
	    <span class="sym">((&gt;</span> j ir<span class="sym">))</span>
          <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">and</span> <span class="sym">(&lt;</span> j ir<span class="sym">) (&lt; (</span>f64vector<span class="sym">-</span>ref ra j<span class="sym">) (</span>f64vector<span class="sym">-</span>ref ra <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))))</span>
                 <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))))</span>
          <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> rra <span class="sym">(</span>f64vector<span class="sym">-</span>ref ra j<span class="sym">))</span>
                 <span class="sym">(</span>f64vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ra i <span class="sym">(</span>f64vector<span class="sym">-</span>ref ra j<span class="sym">))</span>
                 <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> i j<span class="sym">)</span>
                 <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span> j i<span class="sym">)))</span>
                <span class="sym">(</span>else
                 <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span> ir <span class="num">1</span><span class="sym">)))))</span>
        <span class="sym">(</span>f64vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ra i rra<span class="sym">))))))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">1</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">car</span> args<span class="sym">)))</span>
                <span class="num">1</span><span class="sym">))</span>
         <span class="sym">(</span><span class="kwa">last</span> <span class="sym">(+</span> n <span class="num">1</span><span class="sym">))</span>
         <span class="sym">(</span>ary <span class="sym">(</span>make<span class="sym">-</span>f64vector <span class="kwa">last</span> <span class="num">0</span><span class="sym">)))</span>
    <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">1</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
        <span class="sym">((=</span> i <span class="kwa">last</span><span class="sym">))</span>
      <span class="sym">(</span>f64vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ary i <span class="sym">(</span>gen_random <span class="num">1.0</span><span class="sym">)))</span>
    <span class="sym">(</span>heapsort n ary<span class="sym">)</span>
    <span class="sym">(</span>format #t <span class="str">&quot;~,10F~%&quot;</span> <span class="sym">(</span>f64vector<span class="sym">-</span>ref ary n<span class="sym">) )))</span>

<span class="sym">(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>
