<span class="com">(* The Great Computer Language Shootout
   http://shootout.alioth.debian.org

   contributed by Isaac Gouy (Oberon-2 novice)
*)</span>

<span class="kwa">MODULE</span> Heapsort<span class="sym">;
</span><span class="kwa">IMPORT</span> LangShootout<span class="sym">,</span> Random<span class="sym">,</span> Out<span class="sym">;

</span><span class="kwa">VAR
</span>   n<span class="sym">,</span> i<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span>   x<span class="sym">:</span>  <span class="kwb">POINTER</span> <span class="kwa">TO ARRAY OF</span> <span class="kwb">LONGREAL</span><span class="sym">;


</span><span class="kwa">PROCEDURE</span> Heapsort<span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;</span> <span class="kwa">VAR</span> ra<span class="sym">:</span> <span class="kwa">ARRAY OF</span> <span class="kwb">LONGREAL</span><span class="sym">);
</span><span class="kwa">VAR</span> i<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> ir<span class="sym">:</span> <span class="kwb">LONGINT</span><span class="sym">;
</span>    rra<span class="sym">:</span> <span class="kwb">LONGREAL</span><span class="sym">;
</span><span class="kwa">BEGIN
</span>   ir <span class="sym">:=</span> n<span class="sym">;
</span>   k <span class="sym">:=</span> n <span class="kwa">DIV</span> <span class="num">2</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>   <span class="kwa">LOOP
      IF</span> k <span class="sym">&gt;</span> <span class="num">1</span> <span class="kwa">THEN
         DEC</span><span class="sym">(</span>k<span class="sym">);
</span>         rra <span class="sym">:=</span> ra<span class="sym">[</span>k<span class="sym">];
</span>      <span class="kwa">ELSE
</span>         rra <span class="sym">:=</span> ra<span class="sym">[</span>ir<span class="sym">];
</span>         ra<span class="sym">[</span>ir<span class="sym">] :=</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">];
</span>         <span class="kwa">DEC</span><span class="sym">(</span>ir<span class="sym">);
</span>         <span class="kwa">IF</span> ir <span class="sym">=</span> <span class="num">1</span> <span class="kwa">THEN
</span>            ra<span class="sym">[</span><span class="num">1</span><span class="sym">] :=</span> rra<span class="sym">;
</span>            <span class="kwa">EXIT</span><span class="sym">;
</span>         <span class="kwa">END</span><span class="sym">;
</span>      <span class="kwa">END</span><span class="sym">;

</span>      i <span class="sym">:=</span> k<span class="sym">;
</span>      j <span class="sym">:=</span> <span class="kwa">ASH</span><span class="sym">(</span>k<span class="sym">,</span><span class="num">1</span><span class="sym">);

</span>      <span class="kwa">WHILE</span> j<span class="sym">&lt;=</span>ir <span class="kwa">DO
         IF</span> <span class="sym">(</span>j <span class="sym">&lt;</span> ir<span class="sym">) &amp; (</span>ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">THEN INC</span><span class="sym">(</span>j<span class="sym">);</span> <span class="kwa">END</span><span class="sym">;
</span>         <span class="kwa">IF</span> rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">]</span> <span class="kwa">THEN
</span>            ra<span class="sym">[</span>i<span class="sym">] :=</span> ra<span class="sym">[</span>j<span class="sym">];
</span>            i <span class="sym">:=</span> j<span class="sym">;
</span>            <span class="kwa">INC</span><span class="sym">(</span>j<span class="sym">,</span>j<span class="sym">);
</span>         <span class="kwa">ELSE
</span>            j <span class="sym">:=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>         <span class="kwa">END</span><span class="sym">;
</span>      <span class="kwa">END</span><span class="sym">;
</span>      ra<span class="sym">[</span>i<span class="sym">] :=</span> rra<span class="sym">;
</span>   <span class="kwa">END</span><span class="sym">;
</span><span class="kwa">END</span> Heapsort<span class="sym">;


</span><span class="kwa">BEGIN
</span>   n <span class="sym">:=</span> LangShootout<span class="sym">.</span>Argi<span class="sym">();

</span>   <span class="kwa">NEW</span><span class="sym">(</span>x<span class="sym">,</span> n<span class="sym">+</span><span class="num">1</span><span class="sym">);
</span>   x<span class="sym">[</span><span class="num">0</span><span class="sym">] :=</span> <span class="num">0.0</span><span class="sym">;
</span>   FOR i <span class="sym">:=</span> <span class="num">1</span> <span class="kwa">TO</span> n <span class="kwa">DO</span> x<span class="sym">[</span>i<span class="sym">] :=</span> Random<span class="sym">.</span>Next<span class="sym">(</span><span class="num">1.0</span><span class="sym">);</span> <span class="kwa">END</span><span class="sym">;
</span>   Heapsort<span class="sym">(</span>n<span class="sym">,</span> x^<span class="sym">);
</span>   Out<span class="sym">.</span>LongRealFix<span class="sym">(</span>x<span class="sym">[</span>n<span class="sym">],</span><span class="num">0</span><span class="sym">,</span><span class="num">10</span><span class="sym">);</span> Out<span class="sym">.</span>Ln<span class="sym">;
</span><span class="kwa">END</span> Heapsort<span class="sym">.</span>
