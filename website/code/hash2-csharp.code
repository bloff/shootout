<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org

   contributed by Isaac Gouy
*/</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">;

</span><span class="kwc">class</span> Hash2
<span class="sym">{
</span>   <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)
   {
</span>      <span class="kwb">const int</span> nKeys <span class="sym">=</span> <span class="num">10000</span><span class="sym">;
</span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>      Hashtable table1 <span class="sym">=</span> <span class="kwa">new</span> Hashtable<span class="sym">(</span>nKeys<span class="sym">);
</span>      Hashtable table2 <span class="sym">=</span> <span class="kwa">new</span> Hashtable<span class="sym">(</span>nKeys<span class="sym">);

</span>      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>nKeys<span class="sym">;</span> i<span class="sym">++)
</span>         table1<span class="sym">.</span>Add<span class="sym">(</span> <span class="str">&quot;foo_&quot;</span> <span class="sym">+</span> i<span class="sym">.</span>ToString<span class="sym">(),</span> i <span class="sym">);

</span>      object table2Value<span class="sym">;
</span>      <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">) {
</span>         IDictionaryEnumerator item <span class="sym">=</span> table1<span class="sym">.</span>GetEnumerator<span class="sym">();
</span>         <span class="kwa">while</span><span class="sym">(</span>item<span class="sym">.</span>MoveNext<span class="sym">())
</span>            <span class="kwa">if</span> <span class="sym">((</span>table2Value <span class="sym">=</span> table2<span class="sym">[</span>item<span class="sym">.</span>Key<span class="sym">]) !=</span> null<span class="sym">)
</span>               table2<span class="sym">[</span>item<span class="sym">.</span>Key<span class="sym">] = (</span><span class="kwb">int</span><span class="sym">)</span>item<span class="sym">.</span>Value <span class="sym">+ (</span><span class="kwb">int</span><span class="sym">)</span>table2Value<span class="sym">;
</span>            <span class="kwa">else
</span>               table2<span class="sym">[</span>item<span class="sym">.</span>Key<span class="sym">] =</span> item<span class="sym">.</span>Value<span class="sym">;
      }

</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;{0} {1} {2} {3}&quot;</span><span class="sym">,
</span>         table1<span class="sym">[</span><span class="str">&quot;foo_1&quot;</span><span class="sym">],</span> table1<span class="sym">[</span><span class="str">&quot;foo_9999&quot;</span><span class="sym">],</span> table2<span class="sym">[</span><span class="str">&quot;foo_1&quot;</span><span class="sym">],</span> table2<span class="sym">[</span><span class="str">&quot;foo_9999&quot;</span><span class="sym">]);
   }
}</span>
