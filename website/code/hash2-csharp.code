<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">using</span> System<span class="sym">;</span>
<span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">;</span>

<span class="kwa">class</span> Hash2
<span class="sym">{</span>
   <span class="kwa">static</span> <span class="kwb">void</span> <span class="kwd">Main</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">[]</span> args<span class="sym">)</span>
   <span class="sym">{</span>
      <span class="kwb">const int</span> nKeys <span class="sym">=</span> <span class="num">10000</span><span class="sym">;</span>
      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span><span class="kwd">Parse</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>

      Hashtable table1 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Hashtable</span><span class="sym">(</span>nKeys<span class="sym">);</span>
      Hashtable table2 <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Hashtable</span><span class="sym">();</span>

      <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>nKeys<span class="sym">;</span> i<span class="sym">++)</span>
         table1<span class="sym">.</span><span class="kwd">Add</span><span class="sym">(</span> <span class="str">&quot;foo_&quot;</span> <span class="sym">+</span> i<span class="sym">.</span><span class="kwd">ToString</span><span class="sym">(),</span> i <span class="sym">);</span>

      Cell table2Value<span class="sym">;</span>
      <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">) {</span>
         IDictionaryEnumerator item <span class="sym">=</span> table1<span class="sym">.</span><span class="kwd">GetEnumerator</span><span class="sym">();</span>
         <span class="kwa">while</span><span class="sym">(</span>item<span class="sym">.</span><span class="kwd">MoveNext</span><span class="sym">())</span>
            <span class="kwa">if</span> <span class="sym">((</span>table2Value <span class="sym">= (</span>Cell<span class="sym">)</span>table2<span class="sym">[</span>item<span class="sym">.</span>Key<span class="sym">]) !=</span> <span class="kwa">null</span><span class="sym">)</span>
               table2Value<span class="sym">.</span><span class="kwa">value</span> <span class="sym">+= (</span><span class="kwb">int</span><span class="sym">)</span>item<span class="sym">.</span>Value<span class="sym">;</span>
            <span class="kwa">else</span>
               table2<span class="sym">[</span>item<span class="sym">.</span>Key<span class="sym">] =</span> <span class="kwa">new</span> <span class="kwd">Cell</span><span class="sym">((</span><span class="kwb">int</span><span class="sym">)</span>item<span class="sym">.</span>Value<span class="sym">);</span>
      <span class="sym">}</span>
      Console<span class="sym">.</span><span class="kwd">WriteLine</span><span class="sym">(</span><span class="str">&quot;{0} {1} {2} {3}&quot;</span><span class="sym">,</span>
         table1<span class="sym">[</span><span class="str">&quot;foo_1&quot;</span><span class="sym">],</span> table1<span class="sym">[</span><span class="str">&quot;foo_9999&quot;</span><span class="sym">],</span> table2<span class="sym">[</span><span class="str">&quot;foo_1&quot;</span><span class="sym">],</span> table2<span class="sym">[</span><span class="str">&quot;foo_9999&quot;</span><span class="sym">]);</span>
   <span class="sym">}</span>
<span class="sym">}</span>


<span class="kwa">class</span> Cell <span class="sym">{</span>
   <span class="kwa">internal</span> <span class="kwb">int</span> <span class="kwa">value</span><span class="sym">;</span>

   <span class="kwa">public</span> <span class="kwd">Cell</span><span class="sym">(</span><span class="kwb">int</span> intialValue<span class="sym">){</span>
      <span class="kwa">value</span> <span class="sym">=</span> intialValue<span class="sym">;</span>
   <span class="sym">}</span>

   <span class="kwa">public override</span> <span class="kwb">string</span> <span class="kwd">ToString</span><span class="sym">(){</span>
      <span class="kwa">return value</span><span class="sym">.</span><span class="kwd">ToString</span><span class="sym">();</span>
   <span class="sym">}</span>

<span class="sym">}</span>
