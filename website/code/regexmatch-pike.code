<span class="dir">#!/usr/bin/pike
</span><span class="slc">// -*- mode: pike -*-
</span><span class="slc">// $Id: regexmatch-pike.code,v 1.5 2005-05-17 05:20:32 bfulgham Exp $
</span><span class="slc">// http://www.bagley.org/~doug/shootout/
</span><span class="slc">// from: Fredrik Noring
</span>
<span class="kwb">constant</span> area <span class="sym">=</span> <span class="str">&quot;([0-9][0-9][0-9]|</span><span class="esc">\\</span><span class="str">([0-9][0-9][0-9]</span><span class="esc">\\</span><span class="str">))&quot;</span><span class="sym">;
</span><span class="kwb">constant</span> exch <span class="sym">=</span> <span class="str">&quot;([0-9][0-9][0-9])&quot;</span><span class="sym">;
</span><span class="kwb">constant</span> last <span class="sym">=</span> <span class="str">&quot;([0-9][0-9][0-9][0-9])&quot;</span><span class="sym">;

</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> argv<span class="sym">)
{
</span>    Regexp r <span class="sym">=</span> Regexp<span class="sym">(</span><span class="str">&quot;^[^0-9</span><span class="esc">\\</span><span class="str">(]*&quot;</span><span class="sym">+</span>area<span class="sym">+</span><span class="str">&quot; &quot;</span><span class="sym">+</span>exch<span class="sym">+</span><span class="str">&quot;[ -]&quot;</span><span class="sym">+</span>last<span class="sym">+</span><span class="str">&quot;[^0-9]*$&quot;</span><span class="sym">);
</span>    <span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> phones <span class="sym">=</span> Stdio.stdin<span class="sym">-&gt;</span>read<span class="sym">()/</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">;
</span>    <span class="kwb">int</span> n <span class="sym">= (</span><span class="kwb">int</span><span class="sym">)</span>argv<span class="sym">[-</span><span class="num">1</span><span class="sym">];
</span>    <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>    while<span class="sym">(</span>n<span class="sym">--)
</span>	foreach<span class="sym">(</span>phones<span class="sym">,</span> <span class="kwb">string</span> phone<span class="sym">)
</span>	    if<span class="sym">(</span><span class="kwb">array</span><span class="sym">(</span><span class="kwb">string</span><span class="sym">)</span> parts <span class="sym">=</span> r<span class="sym">-&gt;</span>split<span class="sym">(</span>phone<span class="sym">))
</span>		if<span class="sym">(</span>n <span class="sym">==</span> <span class="num">0</span><span class="sym">)
</span>		    if<span class="sym">(</span>parts<span class="sym">[</span><span class="num">0</span><span class="sym">][</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'('</span><span class="sym">)
</span>			<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;%d: %s %s-%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, ++</span>count<span class="sym">,</span> &#64;parts<span class="sym">);
</span>		    else
			<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;%d: (%s) %s-%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, ++</span>count<span class="sym">,</span> &#64;parts<span class="sym">);
}</span>
