<span class="slc">#!/usr/bin/python -O</span>
<span class="slc"># $Id: heapsort-iron-3.code,v 1.5 2007-05-18 03:09:53 bfulgham Exp $</span>
<span class="slc">#</span>
<span class="slc"># The Great Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># Updated by Valentino Volonghi for Python 2.4</span>
<span class="slc"># Reworked by Kevin Carson to produce correct results and same intent</span>

<span class="kwa">import</span> sys

IM <span class="sym">=</span> <span class="num">139968</span>
IA <span class="sym">=</span>   <span class="num">3877</span>
IC <span class="sym">=</span>  <span class="num">29573</span>

LAST <span class="sym">=</span> <span class="num">42</span>
<span class="kwa">def</span> <span class="kwd">gen_random</span><span class="sym">(</span><span class="kwb">max</span><span class="sym">) :</span>
    <span class="kwa">global</span> LAST
    LAST <span class="sym">= (</span>LAST <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM
    <span class="kwa">return</span><span class="sym">( (</span><span class="kwb">max</span> <span class="sym">*</span> LAST<span class="sym">) /</span> IM <span class="sym">)</span>

<span class="kwa">def</span> <span class="kwd">heapsort</span><span class="sym">(</span>n<span class="sym">,</span> ra<span class="sym">) :</span>
    ir <span class="sym">=</span> n
    l <span class="sym">= (</span>n <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">) +</span> <span class="num">1</span>

    <span class="kwa">while True</span> <span class="sym">:</span>
        <span class="kwa">if</span> l <span class="sym">&gt;</span> <span class="num">1</span> <span class="sym">:</span>
            l <span class="sym">-=</span> <span class="num">1</span>
            rra <span class="sym">=</span> ra<span class="sym">[</span>l<span class="sym">]</span>
        <span class="kwa">else</span> <span class="sym">:</span>
            rra <span class="sym">=</span> ra<span class="sym">[</span>ir<span class="sym">]</span>
            ra<span class="sym">[</span>ir<span class="sym">] =</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">]</span>
            ir <span class="sym">-=</span> <span class="num">1</span>
            <span class="kwa">if</span> ir <span class="sym">==</span> <span class="num">1</span> <span class="sym">:</span>
                ra<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra
                <span class="kwa">return</span>

        i <span class="sym">=</span> l
        j <span class="sym">=</span> l <span class="sym">&lt;&lt;</span> <span class="num">1</span>
        <span class="kwa">while</span> j <span class="sym">&lt;=</span> ir <span class="sym">:</span>
            <span class="kwa">if</span> <span class="sym">(</span>j <span class="sym">&lt;</span> ir<span class="sym">)</span> <span class="kwa">and</span> <span class="sym">(</span>ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j <span class="sym">+</span> <span class="num">1</span><span class="sym">]) :</span>
                j <span class="sym">+=</span> <span class="num">1</span>

            <span class="kwa">if</span> rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">] :</span>
                ra<span class="sym">[</span>i<span class="sym">] =</span> ra<span class="sym">[</span>j<span class="sym">]</span>
                i <span class="sym">=</span> j
                j <span class="sym">+=</span> j
            <span class="kwa">else</span> <span class="sym">:</span>
                j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
        ra<span class="sym">[</span>i<span class="sym">] =</span> rra<span class="sym">;</span>

<span class="kwa">def</span> <span class="kwd">main</span><span class="sym">() :</span>
    <span class="kwa">if</span> <span class="kwb">len</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">) ==</span> <span class="num">2</span> <span class="sym">:</span>
        N <span class="sym">=</span> <span class="kwb">int</span><span class="sym">(</span>sys<span class="sym">.</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span>
    <span class="kwa">else</span> <span class="sym">:</span>
        N <span class="sym">=</span> <span class="num">1</span>

    ary <span class="sym">= [</span><span class="kwa">None</span><span class="sym">]*(</span>N <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span>
    <span class="kwa">for</span> i <span class="kwa">in</span> <span class="kwb">xrange</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> N <span class="sym">+</span> <span class="num">1</span><span class="sym">) :</span>
        ary<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwd">gen_random</span><span class="sym">(</span><span class="num">1.0</span><span class="sym">)</span>

    <span class="kwd">heapsort</span><span class="sym">(</span>N<span class="sym">,</span> ary<span class="sym">)</span>

    <span class="kwa">print</span> <span class="str">&quot;%.10f&quot;</span> <span class="sym">%</span> ary<span class="sym">[</span>N<span class="sym">]</span>

<span class="kwd">main</span><span class="sym">()</span>
