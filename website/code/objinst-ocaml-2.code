<span class="com">(* objinst.ml</span>
<span class="com"> *</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Christophe TROESTLER</span>
<span class="com"> * This version is similar to languages without object features</span>
<span class="com"> * (e.g. objinst.gcc, objinst.mlton).</span>
<span class="com"> *)</span>

<span class="kwa">type</span> toggle <span class="sym">= {</span> <span class="kwa">mutable</span> r <span class="sym">:</span> <span class="kwb">bool</span><span class="sym">;</span> a <span class="sym">:</span> toggle <span class="sym">-&gt;</span> <span class="kwb">unit</span> <span class="sym">}</span>
<span class="kwa">let</span> new_toggle b <span class="sym">= {</span> r <span class="sym">=</span> b<span class="sym">;</span> a <span class="sym">= (</span><span class="kwa">fun</span> o <span class="sym">-&gt;</span> o.r <span class="sym">&lt;-</span> not<span class="sym">(</span>o.r<span class="sym">)) }</span>
<span class="kwa">let</span> toggle_value o <span class="sym">=</span> o.r
<span class="kwa">let</span> toggle_activate o <span class="sym">=</span> o.a o<span class="sym">;</span> o

<span class="kwa">type</span> nth_toggle <span class="sym">= {</span> <span class="kwa">mutable</span> r <span class="sym">:</span> <span class="kwb">bool</span><span class="sym">;</span> count_max <span class="sym">:</span> <span class="kwb">int</span><span class="sym">;</span> <span class="kwa">mutable</span> counter <span class="sym">:</span> <span class="kwb">int</span><span class="sym">;</span>
		    a <span class="sym">:</span> nth_toggle <span class="sym">-&gt;</span> <span class="kwb">unit</span> <span class="sym">}</span>
<span class="kwa">let</span> new_nth_toggle b m <span class="sym">=</span>
  <span class="kwa">let</span> act o <span class="sym">=</span>
    o.counter <span class="sym">&lt;-</span> o.counter <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwa">if</span> o.counter <span class="sym">&gt;=</span> o.count_max <span class="kwa">then</span> <span class="sym">(</span>o.r <span class="sym">&lt;-</span> not o.r<span class="sym">;</span> o.counter <span class="sym">&lt;-</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">in</span>
  <span class="sym">{</span> r <span class="sym">=</span> b<span class="sym">;</span> count_max <span class="sym">=</span> m<span class="sym">;</span> counter <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> a <span class="sym">=</span> act <span class="sym">}</span>
<span class="kwa">let</span> nth_toggle_value o <span class="sym">=</span> o.r
<span class="kwa">let</span> nth_toggle_activate o <span class="sym">=</span> o.a o<span class="sym">;</span> o


<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">try</span> int_of_string<span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">1</span> <span class="kwa">in</span>
  <span class="kwa">let</span> tog <span class="sym">=</span> new_toggle <span class="kwa">true in</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> <span class="num">5</span> <span class="kwa">do</span>
    Printf.printf <span class="str">&quot;%b</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>toggle_value<span class="sym">(</span>toggle_activate tog<span class="sym">))</span>
  <span class="kwa">done</span><span class="sym">;</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do</span> ignore<span class="sym">(</span>new_toggle <span class="kwa">true</span><span class="sym">)</span> <span class="kwa">done</span><span class="sym">;</span>
  print_newline<span class="sym">();</span>
  <span class="kwa">let</span> ntog <span class="sym">=</span> new_nth_toggle <span class="kwa">true</span> <span class="num">3</span> <span class="kwa">in</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> <span class="num">8</span> <span class="kwa">do</span>
    Printf.printf <span class="str">&quot;%b</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>nth_toggle_value<span class="sym">(</span>nth_toggle_activate ntog<span class="sym">))</span>
  <span class="kwa">done</span><span class="sym">;</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do</span> ignore<span class="sym">(</span>new_nth_toggle <span class="kwa">true</span> <span class="num">3</span><span class="sym">)</span> <span class="kwa">done</span>

