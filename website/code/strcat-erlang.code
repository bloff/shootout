<span class="slc">%%% -*- mode: erlang -*-
</span><span class="slc">%%% $Id: strcat-erlang.code,v 1.5 2005-03-22 09:05:22 bfulgham Exp $
</span><span class="slc">%%% http://www.bagley.org/~doug/shootout/
</span><span class="slc">%%%
</span><span class="slc">%%% strcat.erl: 22 Jul 2001 ms&#64;mcdev.com.au (Martin Sandiford)
</span><span class="slc">%%%
</span><span class="slc">%%% This is as close to the shootout specs for string concatenation as
</span><span class="slc">%%% I can get it.  There is a small cheat that appends shorter strings
</span><span class="slc">%%% to longer strings, rather than the other way around.  The results
</span><span class="slc">%%% are the same.
</span><span class="slc">%%%
</span><span class="slc">%%% String handling is not really one of Erlang's strengths.
</span><span class="slc">%%% From the Erlang FAQ at http://www.erlang.org/faq/x304.html
</span><span class="slc">%%% question 5.2:
</span><span class="slc">%%%
</span><span class="slc">%%%    String handling in Erlang is less efficient than it could
</span><span class="slc">%%%    be. Each character consumes 8 bytes of memory (a 32 bit integer
</span><span class="slc">%%%    and a 32 bit pointer) and access to the nth. element takes O(n)
</span><span class="slc">%%%    time. The net result is that many typical string handling
</span><span class="slc">%%%    operations are significantly slower in Erlang than in (say) C or
</span><span class="slc">%%%    even Java.
</span><span class="slc">%%%
</span><span class="slc">%%%
</span><span class="slc">%%% Usage: start from command line with:
</span><span class="slc">%%%    erlc strcat.erl # to compile
</span><span class="slc">%%%    erl -noinput -s strcat main 40000
</span>
<span class="sym">-</span>module<span class="sym">(</span>strcat<span class="sym">)</span>.
<span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

main<span class="sym">([</span>Arg<span class="sym">]) -&gt;
</span>    Num <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span><span class="kwb">atom_to_list</span><span class="sym">(</span>Arg<span class="sym">)),
</span>    io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;~w</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span><span class="kwb">length</span><span class="sym">(</span>make_string<span class="sym">(</span><span class="str">&quot;hello</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> Num<span class="sym">))]),
</span>    <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.

make_string<span class="sym">(</span>T<span class="sym">,</span> N<span class="sym">) -&gt;</span> make_string<span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">,</span> T<span class="sym">,</span> N<span class="sym">)</span>.

make_string<span class="sym">(</span>S<span class="sym">,</span> _<span class="sym">,</span> <span class="num">0</span><span class="sym">) -&gt;</span> S<span class="sym">;
</span>make_string<span class="sym">(</span>S<span class="sym">,</span> T<span class="sym">,</span> N<span class="sym">) -&gt;</span> make_string<span class="sym">(</span>T <span class="sym">++</span> S<span class="sym">,</span> T<span class="sym">,</span> N<span class="num">-1</span><span class="sym">)</span>.
