<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">%%% -*- mode: erlang -*-
</FONT></I><I><FONT COLOR="#B22222">%%% $Id: strcat-erlang.code,v 1.1 2004-11-02 08:53:28 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">%%% http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">%%%
</FONT></I><I><FONT COLOR="#B22222">%%% strcat.erl: 22 Jul 2001 ms@mcdev.com.au (Martin Sandiford)
</FONT></I><I><FONT COLOR="#B22222">%%%
</FONT></I><I><FONT COLOR="#B22222">%%% This is as close to the shootout specs for string concatenation as
</FONT></I><I><FONT COLOR="#B22222">%%% I can get it.  There is a small cheat that appends shorter strings
</FONT></I><I><FONT COLOR="#B22222">%%% to longer strings, rather than the other way around.  The results
</FONT></I><I><FONT COLOR="#B22222">%%% are the same.
</FONT></I><I><FONT COLOR="#B22222">%%%
</FONT></I><I><FONT COLOR="#B22222">%%% String handling is not really one of Erlang's strengths.
</FONT></I><I><FONT COLOR="#B22222">%%% From the Erlang FAQ at http://www.erlang.org/faq/x304.html
</FONT></I><I><FONT COLOR="#B22222">%%% question 5.2:
</FONT></I><I><FONT COLOR="#B22222">%%%
</FONT></I><I><FONT COLOR="#B22222">%%%    String handling in Erlang is less efficient than it could
</FONT></I><I><FONT COLOR="#B22222">%%%    be. Each character consumes 8 bytes of memory (a 32 bit integer
</FONT></I><I><FONT COLOR="#B22222">%%%    and a 32 bit pointer) and access to the nth. element takes O(n)
</FONT></I><I><FONT COLOR="#B22222">%%%    time. The net result is that many typical string handling
</FONT></I><I><FONT COLOR="#B22222">%%%    operations are significantly slower in Erlang than in (say) C or
</FONT></I><I><FONT COLOR="#B22222">%%%    even Java.
</FONT></I><I><FONT COLOR="#B22222">%%%
</FONT></I><I><FONT COLOR="#B22222">%%%
</FONT></I><I><FONT COLOR="#B22222">%%% Usage: start from command line with:
</FONT></I><I><FONT COLOR="#B22222">%%%    erlc strcat.erl # to compile
</FONT></I><I><FONT COLOR="#B22222">%%%    erl -noinput -s strcat main 40000
</FONT></I>
<B><FONT COLOR="#5F9EA0">-module</FONT></B>(strcat).
<B><FONT COLOR="#5F9EA0">-export</FONT></B>([main/1]).

<B><FONT COLOR="#0000FF">main</FONT></B>([<FONT COLOR="#B8860B">Arg</FONT>]) -&gt;
    <FONT COLOR="#B8860B">Num</FONT> = <B><FONT COLOR="#A020F0">list_to_integer</FONT></B>(<B><FONT COLOR="#A020F0">atom_to_list</FONT></B>(<FONT COLOR="#B8860B">Arg</FONT>)),
    io:fwrite(<B><FONT COLOR="#BC8F8F">&quot;~w\n&quot;</FONT></B>, [<B><FONT COLOR="#A020F0">length</FONT></B>(make_string(<B><FONT COLOR="#BC8F8F">&quot;hello\n&quot;</FONT></B>, <FONT COLOR="#B8860B">Num</FONT>))]),
    <B><FONT COLOR="#A020F0">halt</FONT></B>(0).

<B><FONT COLOR="#0000FF">make_string</FONT></B>(<FONT COLOR="#B8860B">T</FONT>, <FONT COLOR="#B8860B">N</FONT>) -&gt; make_string(<B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>, <FONT COLOR="#B8860B">T</FONT>, <FONT COLOR="#B8860B">N</FONT>).

<B><FONT COLOR="#0000FF">make_string</FONT></B>(<FONT COLOR="#B8860B">S</FONT>, <FONT COLOR="#B8860B">_</FONT>, 0) -&gt; <FONT COLOR="#B8860B">S</FONT>;
<B><FONT COLOR="#0000FF">make_string</FONT></B>(<FONT COLOR="#B8860B">S</FONT>, <FONT COLOR="#B8860B">T</FONT>, <FONT COLOR="#B8860B">N</FONT>) -&gt; make_string(<FONT COLOR="#B8860B">T</FONT> ++ <FONT COLOR="#B8860B">S</FONT>, <FONT COLOR="#B8860B">T</FONT>, <FONT COLOR="#B8860B">N</FONT>-1).</pre></td></tr></table>
