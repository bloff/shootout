<span class="sym">!</span> The Great Computer Language Shootout
<span class="sym">!</span> http<span class="sym">:</span><span class="slc">//shootout.alioth.debian.org/
</span><span class="sym">!
!</span> fasta implementation <span class="sym">-</span> translated from the lua program
<span class="sym">!</span> contributed by Simon Geard<span class="sym">,</span> <span class="num">18</span><span class="sym">/</span><span class="num">1</span><span class="sym">/</span><span class="num">05
</span><span class="sym">!
!</span> Building info<span class="sym">.
! ==============
!
!</span> Linux  <span class="sym">-</span> <span class="kwa">using</span> the Intel Fortran90 compiler<span class="sym">:
!
!</span>          ifort fasta<span class="sym">.</span>f90 <span class="sym">-</span>O3 <span class="sym">-</span><span class="kwb">static</span><span class="sym">-</span>libcxa <span class="sym">-</span>o fasta
<span class="sym">!
!</span> Run
<span class="sym">! ===
!</span>          fasta <span class="num">1000

</span>program fasta

 implicit none
  integer num<span class="sym">,</span> m
  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">8</span><span class="sym">)</span> argv
  logical<span class="sym">,</span> dimension<span class="sym">(:),</span> allocatable <span class="sym">::</span> flags
  integer<span class="sym">,</span> parameter <span class="sym">::</span> IM <span class="sym">=</span> <span class="num">139968
</span>  integer<span class="sym">,</span> parameter <span class="sym">::</span> IA <span class="sym">=</span> <span class="num">3877
</span>  integer<span class="sym">,</span> parameter <span class="sym">::</span> IC <span class="sym">=</span> <span class="num">29573
</span>  character<span class="sym">(</span>len<span class="sym">=*),</span> parameter <span class="sym">::</span> alu <span class="sym">= &amp;
</span><span class="str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span> <span class="slc">// &amp;
</span><span class="str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span> <span class="slc">// &amp;
</span><span class="str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span> <span class="slc">// &amp;
</span><span class="str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span> <span class="slc">// &amp;
</span><span class="str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span> <span class="slc">// &amp;
</span><span class="str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span> <span class="slc">// &amp;
</span><span class="str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span>

  type pair
     character<span class="sym">(</span>len<span class="sym">=</span><span class="num">1</span><span class="sym">)</span> c
     real<span class="sym">*</span><span class="num">8</span> p
  end type pair
  type<span class="sym">(</span>pair<span class="sym">),</span> dimension<span class="sym">(</span><span class="num">15</span><span class="sym">) ::</span> iub
  type<span class="sym">(</span>pair<span class="sym">),</span> dimension<span class="sym">(</span><span class="num">4</span><span class="sym">)  ::</span> homosapiens
  homosapiens <span class="sym">= (/</span> pair<span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.3029549426680d0</span><span class="sym">), &amp;
</span>                   pair<span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.1979883004921d0</span><span class="sym">), &amp;
</span>                   pair<span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.1975473066391d0</span><span class="sym">), &amp;
</span>                   pair<span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.3015094502008d0</span><span class="sym">) /)
</span>  call makeCumulative<span class="sym">(</span>homosapiens<span class="sym">)

</span>  iub <span class="sym">= (/</span> pair<span class="sym">(</span><span class="str">'a'</span><span class="sym">,</span> <span class="num">0.27d0</span><span class="sym">), &amp;
</span>           pair<span class="sym">(</span><span class="str">'c'</span><span class="sym">,</span> <span class="num">0.12d0</span><span class="sym">), &amp;
</span>           pair<span class="sym">(</span><span class="str">'g'</span><span class="sym">,</span> <span class="num">0.12d0</span><span class="sym">), &amp;
</span>           pair<span class="sym">(</span><span class="str">'t'</span><span class="sym">,</span> <span class="num">0.27d0</span><span class="sym">), &amp;
</span>           pair<span class="sym">(</span><span class="str">'B'</span><span class="sym">,</span> <span class="num">0.02d0</span><span class="sym">), &amp;
</span>           pair<span class="sym">(</span><span class="str">'D'</span><span class="sym">,</span> <span class="num">0.02d0</span><span class="sym">), &amp;
</span>           pair<span class="sym">(</span><span class="str">'H'</span><span class="sym">,</span> <span class="num">0.02d0</span><span class="sym">), &amp;
</span>           pair<span class="sym">(</span><span class="str">'K'</span><span class="sym">,</span> <span class="num">0.02d0</span><span class="sym">), &amp;
</span>           pair<span class="sym">(</span><span class="str">'M'</span><span class="sym">,</span> <span class="num">0.02d0</span><span class="sym">), &amp;
</span>           pair<span class="sym">(</span><span class="str">'N'</span><span class="sym">,</span> <span class="num">0.02d0</span><span class="sym">), &amp;
</span>           pair<span class="sym">(</span><span class="str">'R'</span><span class="sym">,</span> <span class="num">0.02d0</span><span class="sym">), &amp;
</span>           pair<span class="sym">(</span><span class="str">'S'</span><span class="sym">,</span> <span class="num">0.02d0</span><span class="sym">), &amp;
</span>           pair<span class="sym">(</span><span class="str">'V'</span><span class="sym">,</span> <span class="num">0.02d0</span><span class="sym">), &amp;
</span>           pair<span class="sym">(</span><span class="str">'W'</span><span class="sym">,</span> <span class="num">0.02d0</span><span class="sym">), &amp;
</span>           pair<span class="sym">(</span><span class="str">'Y'</span><span class="sym">,</span> <span class="num">0.02d0</span><span class="sym">) /)
</span>  call makeCumulative<span class="sym">(</span>iub<span class="sym">)

</span>  call getarg<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>argv<span class="sym">)
</span>  read<span class="sym">(</span>argv<span class="sym">,*)</span> num


  call makeRepeatFasta<span class="sym">(</span><span class="str">'ONE'</span><span class="sym">,</span><span class="str">'Homo sapiens alu'</span><span class="sym">,</span>alu<span class="sym">,</span>num<span class="sym">*</span><span class="num">2</span><span class="sym">)

</span>  call makeRandomFasta<span class="sym">(</span><span class="str">'TWO'</span><span class="sym">,</span><span class="str">'IUB ambiguity codes'</span><span class="sym">,</span>iub<span class="sym">,</span>num<span class="sym">*</span><span class="num">3</span><span class="sym">)

</span>  call makeRandomFasta<span class="sym">(</span><span class="str">'THREE'</span><span class="sym">,</span><span class="str">'Homo sapiens frequency'</span><span class="sym">,</span>homosapiens<span class="sym">,</span>num<span class="sym">*</span><span class="num">5</span><span class="sym">)


</span>contains

  real<span class="sym">*</span><span class="num">8</span> function getRandom <span class="sym">(</span>maxval<span class="sym">)
</span>    real<span class="sym">*</span><span class="num">8</span><span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> maxval
    integer<span class="sym">,</span> save <span class="sym">::</span> last <span class="sym">=</span> <span class="num">42

</span>    last <span class="sym">=</span> mod<span class="sym">(</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">,</span> IM<span class="sym">)
</span>    getRandom <span class="sym">=</span> maxval <span class="sym">*</span> last <span class="sym">/</span> IM

  end function getRandom

  subroutine makeCumulative<span class="sym">(</span>a<span class="sym">)
</span>     type<span class="sym">(</span>pair<span class="sym">),</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>inout<span class="sym">) ::</span> a
     integer i
     real<span class="sym">*</span><span class="num">8</span> <span class="sym">::</span> cp

     cp <span class="sym">=</span> <span class="num">0.0d0
</span>     <span class="kwa">do</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>size<span class="sym">(</span>a<span class="sym">)
</span>        cp <span class="sym">=</span> cp <span class="sym">+</span> a<span class="sym">(</span>i<span class="sym">)%</span>p
        a<span class="sym">(</span>i<span class="sym">)%</span>p <span class="sym">=</span> cp
     end <span class="kwa">do
</span>  end subroutine makeCumulative

  character<span class="sym">(</span>len<span class="sym">=</span><span class="num">1</span><span class="sym">)</span> function selectRandom<span class="sym">(</span>a<span class="sym">)
</span>      type<span class="sym">(</span>pair<span class="sym">),</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>inout<span class="sym">) ::</span> a
     integer i
     real<span class="sym">*</span><span class="num">8</span> <span class="sym">::</span> r

     r <span class="sym">=</span> getRandom<span class="sym">(</span><span class="num">1.0d0</span><span class="sym">)
</span>     selectRandom <span class="sym">=</span> <span class="str">'J'</span>
     <span class="kwa">do</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>size<span class="sym">(</span>a<span class="sym">)
</span>        <span class="kwa">if</span> <span class="sym">(</span>r <span class="sym">&lt;</span> a<span class="sym">(</span>i<span class="sym">)%</span>p<span class="sym">)</span> then
           selectRandom <span class="sym">=</span> a<span class="sym">(</span>i<span class="sym">)%</span>c
           <span class="kwa">return
</span>        end <span class="kwa">if
</span>     end <span class="kwa">do

</span>  end function selectRandom

  subroutine makeRandomFasta<span class="sym">(</span>id<span class="sym">,</span>desc<span class="sym">,</span>a<span class="sym">,</span>n<span class="sym">)
</span>     character<span class="sym">(</span>len<span class="sym">=*),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> id
     character<span class="sym">(</span>len<span class="sym">=*),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> desc
     type<span class="sym">(</span>pair<span class="sym">),</span> dimension<span class="sym">(:),</span> intent<span class="sym">(</span>inout<span class="sym">) ::</span> a
     integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> n
     integer <span class="sym">::</span> todo<span class="sym">,</span> i
     integer<span class="sym">,</span> parameter <span class="sym">::</span> length <span class="sym">=</span> <span class="num">60
</span>     character<span class="sym">(</span>len<span class="sym">=</span>length<span class="sym">) ::</span> buff

     write<span class="sym">(*,</span><span class="str">'(4a)'</span><span class="sym">)</span> <span class="str">'&gt;'</span><span class="sym">,</span>id<span class="sym">,</span><span class="str">' '</span><span class="sym">,</span>desc
     todo <span class="sym">=</span> n
     <span class="kwa">do
        if</span> <span class="sym">(</span>todo <span class="sym">&lt;=</span> <span class="num">0</span><span class="sym">)</span> exit
        <span class="kwa">if</span> <span class="sym">(</span>todo <span class="sym">&lt;</span> length<span class="sym">)</span> then
           m <span class="sym">=</span> todo
        <span class="kwa">else
</span>           m <span class="sym">=</span> length
        end <span class="kwa">if
        do</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>m
           buff<span class="sym">(</span>i<span class="sym">:</span>i<span class="sym">) =</span> selectRandom<span class="sym">(</span>a<span class="sym">)
</span>        end <span class="kwa">do
</span>        write<span class="sym">(*,</span><span class="str">'(a)'</span><span class="sym">)</span> buff<span class="sym">(</span><span class="num">1</span><span class="sym">:</span>m<span class="sym">)
</span>        todo <span class="sym">=</span> todo <span class="sym">-</span> length
     end <span class="kwa">do
</span>  end subroutine makeRandomFasta

  subroutine makeRepeatFasta<span class="sym">(</span>id<span class="sym">,</span>desc<span class="sym">,</span>s<span class="sym">,</span>n<span class="sym">)
</span>     character<span class="sym">(</span>len<span class="sym">=*),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> id
     character<span class="sym">(</span>len<span class="sym">=*),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> desc
     character<span class="sym">(</span>len<span class="sym">=*),</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> s
     integer<span class="sym">,</span> intent<span class="sym">(</span>in<span class="sym">) ::</span> n
     integer <span class="sym">::</span> todo<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">,</span> k<span class="sym">,</span> kn
     integer<span class="sym">,</span> parameter <span class="sym">::</span> length <span class="sym">=</span> <span class="num">60
</span>     character<span class="sym">(</span>len<span class="sym">=</span>length<span class="sym">) ::</span> buff
     intrinsic len

     write<span class="sym">(*,</span><span class="str">'(4a)'</span><span class="sym">)</span> <span class="str">'&gt;'</span><span class="sym">,</span>id<span class="sym">,</span><span class="str">' '</span><span class="sym">,</span>desc
     todo <span class="sym">=</span> n<span class="sym">;</span> k <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> kn <span class="sym">=</span> len<span class="sym">(</span>s<span class="sym">)
</span>     <span class="kwa">do
        if</span> <span class="sym">(</span>todo <span class="sym">&lt;=</span> <span class="num">0</span><span class="sym">)</span> exit
        <span class="kwa">if</span> <span class="sym">(</span>todo <span class="sym">&lt;</span> length<span class="sym">)</span> then
           m <span class="sym">=</span> todo
        <span class="kwa">else
</span>           m <span class="sym">=</span> length
        end <span class="kwa">if
        do</span> j<span class="sym">=</span><span class="num">1</span><span class="sym">,</span>m
           <span class="kwa">if</span> <span class="sym">(</span>k <span class="sym">&gt;</span> kn<span class="sym">)</span> then
              k <span class="sym">=</span> <span class="num">1
</span>           endif
           buff<span class="sym">(</span>j<span class="sym">:</span>j<span class="sym">) =</span> s<span class="sym">(</span>k<span class="sym">:</span>k<span class="sym">)
</span>           k <span class="sym">=</span> k <span class="sym">+</span> <span class="num">1
</span>        end <span class="kwa">do
</span>        write<span class="sym">(*,</span><span class="str">'(a)'</span><span class="sym">)</span> buff<span class="sym">(</span><span class="num">1</span><span class="sym">:</span>m<span class="sym">)
</span>        todo <span class="sym">=</span> todo <span class="sym">-</span> length
     end <span class="kwa">do

</span>  end subroutine makeRepeatFasta

end program fasta
