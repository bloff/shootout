<span class="dir">#!/bin/env groovy
</span><span class="com">/*
	$Id: tcpecho-groovy.code,v 1.4 2005-09-25 22:25:57 bfulgham Exp $

	The Great Computer Language Shootout
	http://shootout.alioth.debian.org/

	contributed by Jochen Hinrichsen
*/</span>

<span class="kwc">class</span> Server implements Runnable <span class="sym">{

</span>	<span class="kwc">public</span> port<span class="sym">,</span> reply

	<span class="kwc">public</span> <span class="kwb">void</span> run<span class="sym">() {
</span>		def replyBuffer <span class="sym">=</span> java<span class="sym">.</span>nio<span class="sym">.</span>ByteBuffer<span class="sym">.</span>wrap<span class="sym">(</span>reply<span class="sym">.</span>getBytes<span class="sym">())
</span>		def serverBuffer <span class="sym">=</span> java<span class="sym">.</span>nio<span class="sym">.</span>ByteBuffer<span class="sym">.</span>allocateDirect<span class="sym">(</span>reply<span class="sym">.</span>size<span class="sym">())

</span>		def ssc <span class="sym">=</span> java<span class="sym">.</span>nio<span class="sym">.</span>channels<span class="sym">.</span>ServerSocketChannel<span class="sym">.</span>open<span class="sym">()
</span>		ssc<span class="sym">.</span>socket<span class="sym">().</span>bind<span class="sym">(</span><span class="kwa">new</span> InetSocketAddress<span class="sym">(</span>InetAddress<span class="sym">.</span>getLocalHost<span class="sym">(),</span> port<span class="sym">))
</span>		def socketChannel <span class="sym">=</span> ssc<span class="sym">.</span>accept<span class="sym">()

</span>		<span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">) {
</span>   	     	serverBuffer<span class="sym">.</span>clear<span class="sym">();
</span>        	<span class="kwa">if</span> <span class="sym">(</span>socketChannel<span class="sym">.</span>read<span class="sym">(</span>serverBuffer<span class="sym">) == -</span><span class="num">1</span><span class="sym">)</span>  <span class="kwa">break

</span>			socketChannel<span class="sym">.</span>write<span class="sym">(</span>replyBuffer<span class="sym">)
</span>			replyBuffer<span class="sym">.</span>rewind<span class="sym">()
        }
</span>		socketChannel<span class="sym">.</span>close<span class="sym">()
	}
}

</span><span class="kwc">class</span> Client implements Runnable <span class="sym">{

</span>	<span class="kwc">public</span> N<span class="sym">,</span> M<span class="sym">,</span> port<span class="sym">,</span> request

	<span class="kwc">public</span> <span class="kwb">void</span> run<span class="sym">() {
</span>		def requestBuffer <span class="sym">=</span> java<span class="sym">.</span>nio<span class="sym">.</span>ByteBuffer<span class="sym">.</span>wrap<span class="sym">(</span>request<span class="sym">.</span>getBytes<span class="sym">())
</span>		def replyBuffer <span class="sym">=</span> java<span class="sym">.</span>nio<span class="sym">.</span>ByteBuffer<span class="sym">.</span>allocateDirect<span class="sym">(</span><span class="num">64</span><span class="sym">)

</span>		def channel <span class="sym">=</span> java<span class="sym">.</span>nio<span class="sym">.</span>channels<span class="sym">.</span>SocketChannel<span class="sym">.</span>open<span class="sym">()
</span>		channel<span class="sym">.</span>connect<span class="sym">(</span><span class="kwa">new</span> InetSocketAddress<span class="sym">(</span>InetAddress<span class="sym">.</span>getLocalHost<span class="sym">(),</span> port<span class="sym">))

</span>        def replies <span class="sym">=</span> bytes <span class="sym">=</span> <span class="num">0
</span>        <span class="sym">(</span><span class="num">1</span><span class="sym">..</span>N<span class="sym">*</span>M<span class="sym">).</span>each<span class="sym">() {
</span>			requestBuffer<span class="sym">.</span>rewind<span class="sym">()
</span>            channel<span class="sym">.</span>write<span class="sym">(</span>requestBuffer<span class="sym">)
</span>			replyBuffer<span class="sym">.</span>clear<span class="sym">()
</span>            bytes <span class="sym">+=</span> channel<span class="sym">.</span>read<span class="sym">(</span>replyBuffer<span class="sym">)
</span>            replies<span class="sym">++
        }
</span>        channel<span class="sym">.</span>close<span class="sym">()
</span>        println <span class="str">&quot;replies: ${replies}</span><span class="esc">\t</span><span class="str">bytes: ${bytes}&quot;</span>
	<span class="sym">}
}


</span>def N <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span> ? <span class="num">10</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">])
</span>def server <span class="sym">=</span> <span class="kwa">new</span> Server<span class="sym">(</span>port<span class="sym">:</span><span class="num">11000</span><span class="sym">,</span> reply<span class="sym">:</span> <span class="str">'x'</span><span class="sym">*</span><span class="num">64</span><span class="sym">)
</span><span class="kwa">new</span> Thread<span class="sym">(</span>server<span class="sym">).</span>start<span class="sym">()

</span>def client <span class="sym">=</span> <span class="kwa">new</span> Client<span class="sym">(</span>N<span class="sym">:</span>N<span class="sym">,</span> M<span class="sym">:</span><span class="num">6400</span><span class="sym">,</span> port<span class="sym">:</span><span class="num">11000</span><span class="sym">,</span> request<span class="sym">:</span> <span class="str">'x'</span><span class="sym">*</span><span class="num">64</span><span class="sym">)
</span><span class="kwa">new</span> Thread<span class="sym">(</span>client<span class="sym">).</span>start<span class="sym">()

</span><span class="slc">// EOF
</span>
