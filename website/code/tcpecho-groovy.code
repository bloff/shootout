<span class="com">/*</span>
<span class="com">	The Computer Language Shootout</span>
<span class="com">	http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">	contributed by Jochen Hinrichsen</span>
<span class="com">*/</span>

<span class="kwc">class</span> Server implements Runnable <span class="sym">{</span>

	<span class="kwc">public</span> port<span class="sym">,</span> reply

	<span class="kwc">public</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">() {</span>
		def replyBuffer <span class="sym">=</span> java<span class="sym">.</span>nio<span class="sym">.</span>ByteBuffer<span class="sym">.</span><span class="kwd">wrap</span><span class="sym">(</span>reply<span class="sym">.</span><span class="kwd">getBytes</span><span class="sym">())</span>
		def serverBuffer <span class="sym">=</span> java<span class="sym">.</span>nio<span class="sym">.</span>ByteBuffer<span class="sym">.</span><span class="kwd">allocateDirect</span><span class="sym">(</span>reply<span class="sym">.</span><span class="kwd">size</span><span class="sym">())</span>

		def ssc <span class="sym">=</span> java<span class="sym">.</span>nio<span class="sym">.</span>channels<span class="sym">.</span>ServerSocketChannel<span class="sym">.</span><span class="kwd">open</span><span class="sym">()</span>
		ssc<span class="sym">.</span><span class="kwd">socket</span><span class="sym">().</span><span class="kwd">bind</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwd">InetSocketAddress</span><span class="sym">(</span>InetAddress<span class="sym">.</span><span class="kwd">getLocalHost</span><span class="sym">(),</span> port<span class="sym">))</span>
		def socketChannel <span class="sym">=</span> ssc<span class="sym">.</span><span class="kwd">accept</span><span class="sym">()</span>

		<span class="kwa">while</span> <span class="sym">(</span><span class="kwa">true</span><span class="sym">) {</span>
   	     	serverBuffer<span class="sym">.</span><span class="kwd">clear</span><span class="sym">();</span>
        	<span class="kwa">if</span> <span class="sym">(</span>socketChannel<span class="sym">.</span><span class="kwd">read</span><span class="sym">(</span>serverBuffer<span class="sym">) == -</span><span class="num">1</span><span class="sym">)</span>  <span class="kwa">break</span>

			socketChannel<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>replyBuffer<span class="sym">)</span>
			replyBuffer<span class="sym">.</span><span class="kwd">rewind</span><span class="sym">()</span>
        <span class="sym">}</span>
		socketChannel<span class="sym">.</span><span class="kwd">close</span><span class="sym">()</span>
	<span class="sym">}</span>
<span class="sym">}</span>

<span class="kwc">class</span> Client implements Runnable <span class="sym">{</span>

	<span class="kwc">public</span> N<span class="sym">,</span> M<span class="sym">,</span> port<span class="sym">,</span> request

	<span class="kwc">public</span> <span class="kwb">void</span> <span class="kwd">run</span><span class="sym">() {</span>
		def requestBuffer <span class="sym">=</span> java<span class="sym">.</span>nio<span class="sym">.</span>ByteBuffer<span class="sym">.</span><span class="kwd">wrap</span><span class="sym">(</span>request<span class="sym">.</span><span class="kwd">getBytes</span><span class="sym">())</span>
		def replyBuffer <span class="sym">=</span> java<span class="sym">.</span>nio<span class="sym">.</span>ByteBuffer<span class="sym">.</span><span class="kwd">allocateDirect</span><span class="sym">(</span><span class="num">64</span><span class="sym">)</span>

		def channel <span class="sym">=</span> java<span class="sym">.</span>nio<span class="sym">.</span>channels<span class="sym">.</span>SocketChannel<span class="sym">.</span><span class="kwd">open</span><span class="sym">()</span>
		channel<span class="sym">.</span><span class="kwd">connect</span><span class="sym">(</span><span class="kwa">new</span> <span class="kwd">InetSocketAddress</span><span class="sym">(</span>InetAddress<span class="sym">.</span><span class="kwd">getLocalHost</span><span class="sym">(),</span> port<span class="sym">))</span>

        def replies <span class="sym">=</span> bytes <span class="sym">=</span> <span class="num">0</span>
        <span class="sym">(</span><span class="num">1</span><span class="sym">..</span>N<span class="sym">*</span>M<span class="sym">).</span><span class="kwd">each</span><span class="sym">() {</span>
			requestBuffer<span class="sym">.</span><span class="kwd">rewind</span><span class="sym">()</span>
            channel<span class="sym">.</span><span class="kwd">write</span><span class="sym">(</span>requestBuffer<span class="sym">)</span>
			replyBuffer<span class="sym">.</span><span class="kwd">clear</span><span class="sym">()</span>
            bytes <span class="sym">+=</span> channel<span class="sym">.</span><span class="kwd">read</span><span class="sym">(</span>replyBuffer<span class="sym">)</span>
            replies<span class="sym">++</span>
        <span class="sym">}</span>
        channel<span class="sym">.</span><span class="kwd">close</span><span class="sym">()</span>
        println <span class="str">&quot;replies: ${replies}</span><span class="esc">\t</span><span class="str">bytes: ${bytes}&quot;</span>
	<span class="sym">}</span>
<span class="sym">}</span>


def N <span class="sym">= (</span>args<span class="sym">.</span>length <span class="sym">==</span> <span class="num">0</span> ? <span class="num">10</span> <span class="sym">:</span> args<span class="sym">[</span><span class="num">0</span><span class="sym">])</span>
def server <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Server</span><span class="sym">(</span>port<span class="sym">:</span><span class="num">11000</span><span class="sym">,</span> reply<span class="sym">:</span> <span class="str">'x'</span><span class="sym">*</span><span class="num">64</span><span class="sym">)</span>
<span class="kwa">new</span> <span class="kwd">Thread</span><span class="sym">(</span>server<span class="sym">).</span><span class="kwd">start</span><span class="sym">()</span>

def client <span class="sym">=</span> <span class="kwa">new</span> <span class="kwd">Client</span><span class="sym">(</span>N<span class="sym">:</span>N<span class="sym">,</span> M<span class="sym">:</span><span class="num">6400</span><span class="sym">,</span> port<span class="sym">:</span><span class="num">11000</span><span class="sym">,</span> request<span class="sym">:</span> <span class="str">'x'</span><span class="sym">*</span><span class="num">64</span><span class="sym">)</span>
<span class="kwa">new</span> <span class="kwd">Thread</span><span class="sym">(</span>client<span class="sym">).</span><span class="kwd">start</span><span class="sym">()</span>

<span class="slc">// EOF</span>

