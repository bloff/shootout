<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy
*/</span>

<span class="kwa">using</span> System<span class="sym">;
</span><span class="kwa">using</span> System<span class="sym">.</span>Collections<span class="sym">;

</span><span class="kwc">class</span> Lists
<span class="sym">{

</span>   <span class="kwb">static void</span> Main<span class="sym">(</span>string<span class="sym">[]</span> args<span class="sym">)
   {
</span>      <span class="kwb">const int</span> nSize <span class="sym">=</span> <span class="num">10000</span><span class="sym">;
</span>      <span class="kwb">int</span> L1Count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);

</span>      <span class="kwa">while</span> <span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">)
      {
</span>         <span class="slc">// initialize L1
</span>         ArrayList L1 <span class="sym">=</span> <span class="kwa">new</span> ArrayList<span class="sym">(</span>nSize<span class="sym">);
</span>         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> j <span class="sym">&lt;=</span> nSize<span class="sym">;</span> j<span class="sym">++)</span> L1<span class="sym">.</span>Add<span class="sym">(</span>j<span class="sym">);

</span>         <span class="slc">// copy L1 to L2
</span>         ArrayList L2 <span class="sym">= (</span>ArrayList<span class="sym">)</span>L1<span class="sym">.</span>Clone<span class="sym">();

</span>         <span class="slc">// remove from left of L2 add to right of L3
</span>         Object item<span class="sym">;
</span>         ArrayList L3 <span class="sym">=</span> <span class="kwa">new</span> ArrayList<span class="sym">(</span>nSize<span class="sym">);
</span>         <span class="kwa">while</span> <span class="sym">(</span>L2<span class="sym">.</span>Count <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">) {
</span>            item <span class="sym">=</span> L2<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span>            L2<span class="sym">.</span>RemoveAt<span class="sym">(</span><span class="num">0</span><span class="sym">);
</span>            L3<span class="sym">.</span>Add<span class="sym">(</span>item<span class="sym">);
         }

</span>         <span class="slc">// remove from right of L3 add to right of L2
</span>         <span class="kwb">int</span> index<span class="sym">;
</span>         <span class="kwa">while</span> <span class="sym">( (</span>index <span class="sym">=</span> L3<span class="sym">.</span>Count<span class="sym">) &gt;</span> <span class="num">0</span><span class="sym">) {
</span>            index <span class="sym">=</span> index <span class="num">- 1</span><span class="sym">;
</span>            item <span class="sym">=</span> L3<span class="sym">[</span>index<span class="sym">];
</span>            L3<span class="sym">.</span>RemoveAt<span class="sym">(</span>index<span class="sym">);
</span>            L2<span class="sym">.</span>Add<span class="sym">(</span>item<span class="sym">);
         }

</span>         <span class="slc">// reverse L1
</span>         L1<span class="sym">.</span>Reverse<span class="sym">();

</span>         <span class="slc">// check that first item is now SIZE
</span>         <span class="kwa">if</span> <span class="sym">((</span><span class="kwb">int</span><span class="sym">)</span>L1<span class="sym">[</span><span class="num">0</span><span class="sym">] !=</span> nSize<span class="sym">)</span> Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;First item of L1 != SIZE&quot;</span><span class="sym">);

</span>         <span class="slc">// check that L1 == L2
</span>         <span class="kwa">if</span> <span class="sym">(!</span>Lists<span class="sym">.</span>areEqual<span class="sym">(</span>L1<span class="sym">,</span>L2<span class="sym">))</span> Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;L1 != L2&quot;</span><span class="sym">);

</span>         L1Count <span class="sym">=</span> L1<span class="sym">.</span>Count<span class="sym">;
      }
</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span>L1Count<span class="sym">);
   }

</span>   <span class="kwb">static bool</span> areEqual<span class="sym">(</span>ArrayList list1<span class="sym">,</span> ArrayList list2<span class="sym">){
</span>      <span class="kwa">if</span> <span class="sym">(</span>list1<span class="sym">.</span>Count <span class="sym">==</span> list2<span class="sym">.</span>Count<span class="sym">){
</span>         <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>list1<span class="sym">.</span>Count<span class="sym">;</span> i<span class="sym">++)
</span>            <span class="kwa">if</span> <span class="sym">((</span><span class="kwb">int</span><span class="sym">)</span>list1<span class="sym">[</span>i<span class="sym">] != (</span><span class="kwb">int</span><span class="sym">)</span>list2<span class="sym">[</span>i<span class="sym">])</span> <span class="kwa">return false</span><span class="sym">;
</span>         <span class="kwa">return true</span><span class="sym">;
      }
</span>      <span class="kwa">else
         return false</span><span class="sym">;
   }

}</span>
