<span class="slc">%  The Computer Language Shootout</span>
<span class="slc">%  http://shootout.alioth.debian.org/</span>
<span class="slc">%  contributed by Kostis Sagonas</span>
<span class="slc">%  modified by Per Gustafsson</span>

<span class="sym">-</span><span class="kwa">module</span><span class="sym">(</span>nsievebits<span class="sym">).</span>
<span class="sym">-</span><span class="kwa">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">]).</span>

<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
  N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),</span>
  lists<span class="sym">:</span><span class="kwd">foreach</span><span class="sym">(</span><span class="kwa">fun</span><span class="sym">(</span>I<span class="sym">) -&gt;</span> <span class="kwd">nsieve</span><span class="sym">(</span><span class="num">10000</span> <span class="kwa">bsl</span> <span class="sym">(</span>N<span class="sym">-</span>I<span class="sym">))</span> <span class="kwa">end</span><span class="sym">, [</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">,</span><span class="num">2</span><span class="sym">]),</span>
  <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">).</span>

<span class="kwd">nsieve</span><span class="sym">(</span>M<span class="sym">) -&gt;</span>
  io<span class="sym">:</span><span class="kwd">format</span><span class="sym">(</span><span class="str">&quot;Primes up to ~8w ~8w</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">, [</span>M<span class="sym">,</span> <span class="kwd">nsieve</span><span class="sym">(</span><span class="kwd">array</span><span class="sym">(</span>M<span class="sym">),</span> <span class="num">2</span><span class="sym">,</span> M<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> <span class="num">0</span><span class="sym">)]).</span>

<span class="kwd">nsieve</span><span class="sym">(</span>A<span class="sym">,</span> P<span class="sym">,</span> Sz<span class="sym">,</span> C<span class="sym">)</span> <span class="kwa">when</span> P <span class="sym">=&lt;</span> Sz <span class="sym">-&gt;</span>
  NC <span class="sym">=</span> <span class="kwa">case</span> <span class="sym">(</span>hipe_bifs<span class="sym">:</span><span class="kwd">bytearray_sub</span><span class="sym">(</span>A<span class="sym">, (</span>P <span class="kwa">bsr</span> <span class="num">3</span><span class="sym">))</span> <span class="kwa">band</span> <span class="sym">(</span><span class="num">1</span> <span class="kwa">bsl</span> <span class="sym">(</span>P <span class="kwa">band</span> <span class="num">7</span><span class="sym">)))</span> <span class="kwa">of</span>
	   <span class="num">0</span> <span class="sym">-&gt;</span> C<span class="sym">;</span>
	   _ <span class="sym">-&gt;</span> <span class="kwd">nsieve_sub</span><span class="sym">(</span>A<span class="sym">,</span> P<span class="sym">+</span>P<span class="sym">,</span> Sz<span class="sym">,</span> P<span class="sym">),</span> C<span class="sym">+</span><span class="num">1</span>
       <span class="kwa">end</span><span class="sym">,</span>
  <span class="kwd">nsieve</span><span class="sym">(</span>A<span class="sym">,</span> P<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> Sz<span class="sym">,</span> NC<span class="sym">);</span>
<span class="kwd">nsieve</span><span class="sym">(</span>_A<span class="sym">,</span> _P<span class="sym">,</span> _M<span class="sym">,</span> C<span class="sym">) -&gt;</span> C<span class="sym">.</span>

<span class="kwd">nsieve_sub</span><span class="sym">(</span>A<span class="sym">,</span> I<span class="sym">,</span> Sz<span class="sym">,</span> P<span class="sym">)</span> <span class="kwa">when</span> I <span class="sym">=&lt;</span> Sz <span class="sym">-&gt;</span>
  IC <span class="sym">= (</span>I <span class="kwa">bsr</span> <span class="num">3</span><span class="sym">),</span>
  Val <span class="sym">= (</span>hipe_bifs<span class="sym">:</span><span class="kwd">bytearray_sub</span><span class="sym">(</span>A<span class="sym">,</span> IC<span class="sym">)</span> <span class="kwa">band bnot</span><span class="sym">(</span><span class="num">1</span> <span class="kwa">bsl</span> <span class="sym">(</span>I <span class="kwa">band</span> <span class="num">7</span><span class="sym">))),</span>
  hipe_bifs<span class="sym">:</span><span class="kwd">bytearray_update</span><span class="sym">(</span>A<span class="sym">,</span> IC<span class="sym">,</span> Val<span class="sym">),</span>
  <span class="kwd">nsieve_sub</span><span class="sym">(</span>A<span class="sym">,</span> I<span class="sym">+</span>P<span class="sym">,</span> Sz<span class="sym">,</span> P<span class="sym">);</span>
<span class="kwd">nsieve_sub</span><span class="sym">(</span>_<span class="sym">,</span> _<span class="sym">,</span> _<span class="sym">,</span> _<span class="sym">) -&gt;</span> ok<span class="sym">.</span>

<span class="kwd">array</span><span class="sym">(</span>M<span class="sym">) -&gt;</span> hipe_bifs<span class="sym">:</span><span class="kwd">bytearray</span><span class="sym">((</span>M <span class="kwa">bsr</span> <span class="num">3</span><span class="sym">)+</span><span class="num">1</span><span class="sym">,</span> <span class="num">16</span>#ff<span class="sym">).</span>
