#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="sym">-</span>e main <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="slc">;;; $Id: regexmatch-guile.code,v 1.6 2005-11-06 23:11:31 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="sym">-</span><span class="num">9</span> format<span class="sym">))</span>
<span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="sym">-</span><span class="num">9</span> regex<span class="sym">))</span>

<span class="sym">(</span>define regexp
  <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span>
   <span class="str">&quot;(^|[^0-9</span><span class="esc">\\</span><span class="str">(])&quot;</span>			<span class="slc">; (1) preceeding non-digit or bol</span>
   <span class="str">&quot;(&quot;</span>					<span class="slc">; (2) area code</span>
   <span class="str">&quot;</span><span class="esc">\\</span><span class="str">(([0-9][0-9][0-9])</span><span class="esc">\\</span><span class="str">)&quot;</span>		<span class="slc">; (3) is either 3 digits in parens</span>
   <span class="str">&quot;|&quot;</span>					<span class="slc">; or</span>
   <span class="str">&quot;([0-9][0-9][0-9])&quot;</span>			<span class="slc">; (4) just 3 digits</span>
   <span class="str">&quot;)&quot;</span>					<span class="slc">; end of area code</span>
   <span class="str">&quot; &quot;</span>					<span class="slc">; area code is followed by one space</span>
   <span class="str">&quot;([0-9][0-9][0-9])&quot;</span>			<span class="slc">; (5) exchange is 3 digits</span>
   <span class="str">&quot;[ -]&quot;</span>				<span class="slc">; separator is either space or dash</span>
   <span class="str">&quot;([0-9][0-9][0-9][0-9])&quot;</span>		<span class="slc">; (6) last 4 digits</span>
   <span class="str">&quot;([^0-9]|$)&quot;</span>				<span class="slc">; must be followed by a non-digit</span>
   <span class="sym">))</span>


<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">))</span>
	<span class="sym">(</span>phonelines <span class="str">'())</span>
<span class="str">	(rx (make-regexp regexp))</span>
<span class="str">	(count 0))</span>
<span class="str">    (let loop ((line (read-line)))</span>
<span class="str">      (cond ((eof-object? line) #f)</span>
<span class="str">	    (else</span>
<span class="str">	     (set! phonelines (append phonelines (list line)))</span>
<span class="str">	     (loop (read-line)))))</span>
<span class="str">    (while (&gt; n 0)</span>
<span class="str">	   (set! n (- n 1))</span>
<span class="str">	   (let loop ((phones phonelines)</span>
<span class="str">		      (count 0))</span>
<span class="str">	     (if (null? phones)</span>
<span class="str">		 count</span>
<span class="str">		 (let ((match (regexp-exec rx (car phones))))</span>
<span class="str">		   (if match</span>
<span class="str">		       (let* ((area (if (match:start match 3)</span>
<span class="str">					(match:substring match 3)</span>
<span class="str">					(match:substring match 4)))</span>
<span class="str">			      (exch (match:substring match 5))</span>
<span class="str">			      (numb (match:substring match 6))</span>
<span class="str">			      (num (string-append &quot;(&quot; area &quot;) &quot; exch &quot;-&quot; numb)))</span>
<span class="str">			 (set! count (+ count 1))</span>
<span class="str">			 (if (= 0 n)</span>
<span class="str">			      (display (format &quot;~D: ~a</span><span class="esc">\n</span><span class="str">&quot; count num)))))</span>
<span class="str">		   (loop (cdr phones) count)))))))</span>
<span class="str"></span>
