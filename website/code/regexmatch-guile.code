#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="sym">-</span>e main <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="slc">;;; $Id: regexmatch-guile.code,v 1.5 2005-04-13 15:29:24 bfulgham Exp $
</span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span>
<span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="num">-9</span> format<span class="sym">))
(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="num">-9</span> regex<span class="sym">))

(</span>define regexp
  <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append
</span>   <span class="str">&quot;(^|[^0-9</span><span class="esc">\\</span><span class="str">(])&quot;</span>			<span class="slc">; (1) preceeding non-digit or bol
</span>   <span class="str">&quot;(&quot;</span>					<span class="slc">; (2) area code
</span>   <span class="str">&quot;</span><span class="esc">\\</span><span class="str">(([0-9][0-9][0-9])</span><span class="esc">\\</span><span class="str">)&quot;</span>		<span class="slc">; (3) is either 3 digits in parens
</span>   <span class="str">&quot;|&quot;</span>					<span class="slc">; or
</span>   <span class="str">&quot;([0-9][0-9][0-9])&quot;</span>			<span class="slc">; (4) just 3 digits
</span>   <span class="str">&quot;)&quot;</span>					<span class="slc">; end of area code
</span>   <span class="str">&quot; &quot;</span>					<span class="slc">; area code is followed by one space
</span>   <span class="str">&quot;([0-9][0-9][0-9])&quot;</span>			<span class="slc">; (5) exchange is 3 digits
</span>   <span class="str">&quot;[ -]&quot;</span>				<span class="slc">; separator is either space or dash
</span>   <span class="str">&quot;([0-9][0-9][0-9][0-9])&quot;</span>		<span class="slc">; (6) last 4 digits
</span>   <span class="str">&quot;([^0-9]|$)&quot;</span>				<span class="slc">; must be followed by a non-digit
</span>   <span class="sym">))


(</span>define <span class="sym">(</span>main args<span class="sym">)
  (</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">))
	(</span>phonelines <span class="str">'())
	(rx (make-regexp regexp))
	(count 0))
    (let loop ((line (read-line)))
      (cond ((eof-object? line) #f)
	    (else
	     (set! phonelines (append phonelines (list line)))
	     (loop (read-line)))))
    (while (&gt; n 0)
	   (set! n (- n 1))
	   (let loop ((phones phonelines)
		      (count 0))
	     (if (null? phones)
		 count
		 (let ((match (regexp-exec rx (car phones))))
		   (if match
		       (let* ((area (if (match:start match 3)
					(match:substring match 3)
					(match:substring match 4)))
			      (exch (match:substring match 5))
			      (numb (match:substring match 6))
			      (num (string-append &quot;(&quot; area &quot;) &quot; exch &quot;-&quot; numb)))
			 (set! count (+ count 1))
			 (if (= 0 n)
			      (display (format &quot;~D: ~a</span><span class="esc">\n</span><span class="str">&quot; count num)))))
		   (loop (cdr phones) count)))))))
</span>
