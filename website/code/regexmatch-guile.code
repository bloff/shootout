<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/usr/bin/guile \
-e main -s
!#

<I><FONT COLOR="#B22222">;;; $Id: regexmatch-guile.code,v 1.2 2004-11-08 08:15:19 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://www.bagley.org/~doug/shootout/
</FONT></I>
(use-modules (ice-9 format))
(use-modules (ice-9 regex))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">regexp</FONT></B>
  (string-append
   <B><FONT COLOR="#BC8F8F">&quot;(^|[^0-9\\(])&quot;</FONT></B>			<I><FONT COLOR="#B22222">; (1) preceeding non-digit or bol
</FONT></I>   <B><FONT COLOR="#BC8F8F">&quot;(&quot;</FONT></B>					<I><FONT COLOR="#B22222">; (2) area code
</FONT></I>   <B><FONT COLOR="#BC8F8F">&quot;\\(([0-9][0-9][0-9])\\)&quot;</FONT></B>		<I><FONT COLOR="#B22222">; (3) is either 3 digits in parens
</FONT></I>   <B><FONT COLOR="#BC8F8F">&quot;|&quot;</FONT></B>					<I><FONT COLOR="#B22222">; or
</FONT></I>   <B><FONT COLOR="#BC8F8F">&quot;([0-9][0-9][0-9])&quot;</FONT></B>			<I><FONT COLOR="#B22222">; (4) just 3 digits
</FONT></I>   <B><FONT COLOR="#BC8F8F">&quot;)&quot;</FONT></B>					<I><FONT COLOR="#B22222">; end of area code
</FONT></I>   <B><FONT COLOR="#BC8F8F">&quot; &quot;</FONT></B>					<I><FONT COLOR="#B22222">; area code is followed by one space
</FONT></I>   <B><FONT COLOR="#BC8F8F">&quot;([0-9][0-9][0-9])&quot;</FONT></B>			<I><FONT COLOR="#B22222">; (5) exchange is 3 digits
</FONT></I>   <B><FONT COLOR="#BC8F8F">&quot;[ -]&quot;</FONT></B>				<I><FONT COLOR="#B22222">; separator is either space or dash
</FONT></I>   <B><FONT COLOR="#BC8F8F">&quot;([0-9][0-9][0-9][0-9])&quot;</FONT></B>		<I><FONT COLOR="#B22222">; (6) last 4 digits
</FONT></I>   <B><FONT COLOR="#BC8F8F">&quot;([^0-9]|$)&quot;</FONT></B>				<I><FONT COLOR="#B22222">; must be followed by a non-digit
</FONT></I>   ))


(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> args)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((n (<B><FONT COLOR="#A020F0">or</FONT></B> (<B><FONT COLOR="#A020F0">and</FONT></B> (= (length args) 2) (string-&gt;number (cadr args))) 1))
	(phonelines '())
	(rx (make-regexp regexp))
	(count 0))
    (<B><FONT COLOR="#A020F0">let</FONT></B> loop ((line (read-line)))
      (<B><FONT COLOR="#A020F0">cond</FONT></B> ((eof-object? line) #f)
	    (<B><FONT COLOR="#A020F0">else</FONT></B>
	     (<B><FONT COLOR="#A020F0">set!</FONT></B> phonelines (append phonelines (list line)))
	     (loop (read-line)))))
    (while (&gt; n 0)
	   (<B><FONT COLOR="#A020F0">set!</FONT></B> n (- n 1))
	   (<B><FONT COLOR="#A020F0">let</FONT></B> loop ((phones phonelines)
		      (count 0))
	     (<B><FONT COLOR="#A020F0">if</FONT></B> (null? phones)
		 count
		 (<B><FONT COLOR="#A020F0">let</FONT></B> ((match (regexp-exec rx (car phones))))
		   (<B><FONT COLOR="#A020F0">if</FONT></B> match
		       (<B><FONT COLOR="#A020F0">let*</FONT></B> ((area (<B><FONT COLOR="#A020F0">if</FONT></B> (match:start match 3)
					(match:substring match 3)
					(match:substring match 4)))
			      (exch (match:substring match 5))
			      (numb (match:substring match 6))
			      (num (string-append <B><FONT COLOR="#BC8F8F">&quot;(&quot;</FONT></B> area <B><FONT COLOR="#BC8F8F">&quot;) &quot;</FONT></B> exch <B><FONT COLOR="#BC8F8F">&quot;-&quot;</FONT></B> numb)))
			 (<B><FONT COLOR="#A020F0">set!</FONT></B> count (+ count 1))
			 (<B><FONT COLOR="#A020F0">if</FONT></B> (= 0 n)
			      (display (format <B><FONT COLOR="#BC8F8F">&quot;~D: ~a\n&quot;</FONT></B> count num)))))
		   (loop (cdr phones) count)))))))
</pre></td></tr></table>
