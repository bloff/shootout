<span class="com">(*</span>
<span class="com">   The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Anthony Borla</span>
<span class="com">*)</span>

<span class="kwa">structure</span> Test <span class="sym">:</span> <span class="kwa">sig</span>
  <span class="kwa">val</span> main <span class="sym">: (</span><span class="kwb">string</span> <span class="sym">*</span> <span class="kwb">string</span> list<span class="sym">) -&gt;</span> OS.Process.status
<span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct</span>

  <span class="kwa">fun</span> ack <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> y<span class="sym">) =</span> y <span class="sym">+</span> <span class="num">1</span>
    <span class="sym">|</span> ack <span class="sym">(</span>x<span class="sym">,</span> <span class="num">0</span><span class="sym">) =</span> ack <span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
    <span class="sym">|</span> ack <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">) =</span> ack <span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">, (</span>ack <span class="sym">(</span>x<span class="sym">,</span> y <span class="sym">-</span> <span class="num">1</span><span class="sym">)))</span>

  <span class="kwa">fun</span> fib <span class="sym">(</span>n <span class="sym">:</span> <span class="kwb">int</span><span class="sym">) :</span> <span class="kwb">int</span> <span class="sym">=</span>
    <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">2</span> <span class="kwa">then</span>
      <span class="num">1</span>
    <span class="kwa">else</span>
      fib <span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">) +</span> fib <span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>

  <span class="kwa">fun</span> fibf <span class="sym">(</span>n <span class="sym">:</span> <span class="kwb">real</span><span class="sym">) :</span> <span class="kwb">real</span> <span class="sym">=</span>
    <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">2.0</span> <span class="kwa">then</span>
      <span class="num">1.0</span>
    <span class="kwa">else</span>
      fibf <span class="sym">(</span>n <span class="sym">-</span> <span class="num">2.0</span><span class="sym">) +</span> fibf <span class="sym">(</span>n <span class="sym">-</span> <span class="num">1.0</span><span class="sym">)</span>

  <span class="kwa">fun</span> tak <span class="sym">(</span>x <span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> y <span class="sym">:</span> <span class="kwb">int</span><span class="sym">,</span> z <span class="sym">:</span> <span class="kwb">int</span><span class="sym">) :</span> <span class="kwb">int</span> <span class="sym">=</span>
    <span class="kwa">if</span> y <span class="sym">&lt;</span> x <span class="kwa">then</span>
      tak <span class="sym">(</span>tak <span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> tak <span class="sym">(</span>y <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> tak <span class="sym">(</span>z <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">))</span>
    <span class="kwa">else</span>
      z

  <span class="kwa">fun</span> takf <span class="sym">(</span>x <span class="sym">:</span> <span class="kwb">real</span><span class="sym">,</span> y <span class="sym">:</span> <span class="kwb">real</span><span class="sym">,</span> z <span class="sym">:</span> <span class="kwb">real</span><span class="sym">) :</span> <span class="kwb">real</span> <span class="sym">=</span>
    <span class="kwa">if</span> y <span class="sym">&lt;</span> x <span class="kwa">then</span>
      takf <span class="sym">(</span>takf <span class="sym">(</span>x <span class="sym">-</span> <span class="num">1.0</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> takf <span class="sym">(</span>y <span class="sym">-</span> <span class="num">1.0</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> takf <span class="sym">(</span>z <span class="sym">-</span> <span class="num">1.0</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">))</span>
    <span class="kwa">else</span>
      z

  <span class="kwa">fun</span> main' n <span class="sym">=</span>
    <span class="kwa">let</span>
      <span class="kwa">val</span> ak <span class="sym">=</span> ack <span class="sym">(</span><span class="num">3</span><span class="sym">,</span> n<span class="sym">)</span>

      <span class="kwa">val</span> f27 <span class="sym">=</span> <span class="num">27.0</span> <span class="sym">+ (</span><span class="kwa">Real</span>.fromInt n<span class="sym">)</span>
      <span class="kwa">val</span> fb <span class="sym">=</span> fibf<span class="sym">(</span><span class="num">27.0</span> <span class="sym">+ (</span><span class="kwa">Real</span>.fromInt n<span class="sym">))</span>

      <span class="kwa">val</span> n1 <span class="sym">=</span> n <span class="sym">-</span> <span class="num">1</span>

      <span class="kwa">val</span> t2 <span class="sym">=</span> n1 <span class="sym">*</span> <span class="num">2</span>
      <span class="kwa">val</span> t3 <span class="sym">=</span> n1 <span class="sym">*</span> <span class="num">3</span>
      <span class="kwa">val</span> tk <span class="sym">=</span> tak<span class="sym">(</span>n1 <span class="sym">*</span> <span class="num">3</span><span class="sym">,</span> n1 <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> n1<span class="sym">)</span>

      <span class="kwa">val</span> fb3 <span class="sym">=</span> fib<span class="sym">(</span><span class="num">3</span><span class="sym">)</span>

      <span class="kwa">val</span> tk3 <span class="sym">=</span> takf<span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">,</span> <span class="num">1.0</span><span class="sym">)</span>

      <span class="kwa">open</span> Format
    <span class="kwa">in</span>
      formatf <span class="str">&quot;Ack(3,%d): %d</span><span class="esc">\n\</span>
<span class="str"></span>              <span class="esc">\F</span><span class="str">ib(%.1f): %.1f</span><span class="esc">\n\</span>
<span class="str"></span>              <span class="esc">\T</span><span class="str">ak(%d,%d,%d): %d</span><span class="esc">\n\</span>
<span class="str"></span>              <span class="esc">\F</span><span class="str">ib(3): %d</span><span class="esc">\n\</span>
<span class="str"></span>              <span class="esc">\T</span><span class="str">ak(3.0,2.0,1.0): %.1f</span><span class="esc">\n</span><span class="str">&quot;</span>

      print <span class="sym">[</span>INT n<span class="sym">,</span> INT ak<span class="sym">,</span>
             REAL f27<span class="sym">,</span> REAL fb<span class="sym">,</span>
             INT t3<span class="sym">,</span> INT t2<span class="sym">,</span> INT n1<span class="sym">,</span> INT tk<span class="sym">,</span>
             INT fb3<span class="sym">,</span>
             REAL tk3<span class="sym">];</span>

      OS.Process.success
    <span class="kwa">end</span>

  <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1</span>
    <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>

<span class="kwa">end</span>

