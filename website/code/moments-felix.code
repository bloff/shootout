<span class="line">    1 </span><span class="slc">//
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// Contributed by John Skaller
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">//
</span><span class="line">    4 </span><span class="slc"></span><span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;
</span><span class="line">    5 </span><span class="sym"></span>n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);
</span><span class="line">    6 </span><span class="sym"></span><span class="kwa">include</span> <span class="str">&quot;stl&quot;</span><span class="sym">;
</span><span class="line">    7 </span><span class="sym"></span><span class="slc">// adapted from C solution
</span><span class="line">    8 </span><span class="slc"></span>
<span class="line">    9 </span><span class="com">/* kmedian permutes elements of a to get
</span><span class="line">   10 </span><span class="com">   a[i]&lt;=a[k] for i&lt;k
</span><span class="line">   11 </span><span class="com">   a[i]&gt;=a[k] for i&gt;k
</span><span class="line">   12 </span><span class="com">        See. N. Wirth, Algorithms+data structures = Programs
</span><span class="line">   13 </span><span class="com">*/</span>
<span class="line">   14 </span>
<span class="line">   15 </span><span class="kwa">open</span> Stl<span class="sym">;
</span><span class="line">   16 </span><span class="sym"></span><span class="kwa">open</span> Stl<span class="sym">::</span>Vector<span class="sym">;
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym"></span><span class="kwa">proc</span> printf<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="str">'printf(&quot;%f&quot;,$1);'</span><span class="sym">;
</span><span class="line">   19 </span><span class="sym">
</span><span class="line">   20 </span><span class="sym"></span><span class="kwa">proc</span> kmedian<span class="sym">(</span>v<span class="sym">:</span> stl_vector<span class="sym">[</span><span class="kwb">double</span><span class="sym">],</span> mid<span class="sym">:</span><span class="kwb">int</span><span class="sym">)
</span><span class="line">   21 </span><span class="sym">{
</span><span class="line">   22 </span><span class="sym"></span>  <span class="kwa">var</span> a <span class="sym">=</span> begin v<span class="sym">;
</span><span class="line">   23 </span><span class="sym"></span>  <span class="kwa">var</span> k <span class="sym">=</span> mid<span class="sym">;
</span><span class="line">   24 </span><span class="sym"></span>  <span class="kwa">var</span> n <span class="sym">=</span> len v<span class="sym">;
</span><span class="line">   25 </span><span class="sym"></span>  whilst <span class="kwa">true</span> do
<span class="line">   26 </span>    <span class="kwa">var</span> j <span class="sym">=</span> Cstdlib<span class="sym">::</span>rand<span class="sym">() %</span> n<span class="sym">;
</span><span class="line">   27 </span><span class="sym"></span>    b <span class="sym">:=</span> a.<span class="sym">[</span>j<span class="sym">];
</span><span class="line">   28 </span><span class="sym"></span>    <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>    j <span class="sym">=</span> n<span class="num">-1</span><span class="sym">;
</span><span class="line">   30 </span><span class="sym"></span>    <span class="kwa">var</span> flag <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;
</span><span class="line">   31 </span><span class="sym"></span>    whilst flag do
<span class="line">   32 </span>      whilst  a.<span class="sym">[</span>i<span class="sym">] &lt;</span> b do i<span class="sym">++;</span> done<span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>      whilst  a.<span class="sym">[</span>j<span class="sym">] &gt;</span> b do j<span class="sym">--;</span> done<span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span>      <span class="kwa">if</span> i<span class="sym">&lt;</span>j do
<span class="line">   35 </span>        a.<span class="sym">[</span>i<span class="sym">] &lt;-&gt;</span> a.<span class="sym">[</span>j<span class="sym">];
</span><span class="line">   36 </span><span class="sym"></span>        i<span class="sym">++;
</span><span class="line">   37 </span><span class="sym"></span>        j<span class="sym">--;
</span><span class="line">   38 </span><span class="sym"></span>      <span class="kwa">else
</span><span class="line">   39 </span><span class="kwa">        if</span> a.<span class="sym">[</span>j<span class="sym">] &lt;</span> b do j<span class="sym">++;</span> done<span class="sym">;
</span><span class="line">   40 </span><span class="sym"></span>        <span class="kwa">if</span> a.<span class="sym">[</span>i<span class="sym">] &gt;</span> b do i<span class="sym">--;</span> done<span class="sym">;
</span><span class="line">   41 </span><span class="sym"></span>        flag <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;
</span><span class="line">   42 </span><span class="sym"></span>      done<span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>    done<span class="sym">;
</span><span class="line">   44 </span><span class="sym">
</span><span class="line">   45 </span><span class="sym"></span>    <span class="kwa">if</span> i<span class="sym">&lt;</span>k do
<span class="line">   46 </span>      k <span class="sym">-=</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">;
</span><span class="line">   47 </span><span class="sym"></span>      n <span class="sym">-=</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">;
</span><span class="line">   48 </span><span class="sym"></span>      a <span class="sym">+=</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">;
</span><span class="line">   49 </span><span class="sym"></span>    <span class="kwa">elif</span> j<span class="sym">&gt;</span>k do
<span class="line">   50 </span>      n<span class="sym">=</span>j<span class="sym">;
</span><span class="line">   51 </span><span class="sym"></span>    <span class="kwa">else return</span><span class="sym">;
</span><span class="line">   52 </span><span class="sym"></span>    done<span class="sym">;
</span><span class="line">   53 </span><span class="sym"></span>  done<span class="sym">;
</span><span class="line">   54 </span><span class="sym">}
</span><span class="line">   55 </span><span class="sym">
</span><span class="line">   56 </span><span class="sym"></span><span class="kwa">fun</span> max<span class="sym">(</span>a<span class="sym">:</span>stl_vector<span class="sym">[</span><span class="kwb">double</span><span class="sym">],</span> n<span class="sym">:</span><span class="kwb">int</span><span class="sym">):</span><span class="kwb">double</span> <span class="sym">=
</span><span class="line">   57 </span><span class="sym">{
</span><span class="line">   58 </span><span class="sym"></span>  <span class="kwa">var</span> temp<span class="sym">=</span>a.<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="line">   59 </span><span class="sym"></span>  <span class="kwa">var</span> j <span class="sym">=</span> n<span class="num">-1</span><span class="sym">;
</span><span class="line">   60 </span><span class="sym"></span>  until j <span class="sym">==</span> <span class="num">0</span> do
<span class="line">   61 </span>    <span class="kwa">if</span> a.<span class="sym">[</span>j<span class="sym">]&gt;</span>temp do temp<span class="sym">=</span>a.<span class="sym">[</span>j<span class="sym">];</span> done<span class="sym">;
</span><span class="line">   62 </span><span class="sym">    --</span>j<span class="sym">;
</span><span class="line">   63 </span><span class="sym"></span>  done<span class="sym">;
</span><span class="line">   64 </span><span class="sym"></span>  <span class="kwa">return</span> temp<span class="sym">;
</span><span class="line">   65 </span><span class="sym">}
</span><span class="line">   66 </span><span class="sym">
</span><span class="line">   67 </span><span class="sym">
</span><span class="line">   68 </span><span class="sym"></span><span class="kwa">var</span> sum <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="line">   69 </span><span class="sym"></span><span class="kwa">var</span> average_deviation <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="line">   70 </span><span class="sym"></span><span class="kwa">var</span> standard_deviation <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="line">   71 </span><span class="sym"></span><span class="kwa">var</span> variance <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="line">   72 </span><span class="sym"></span><span class="kwa">var</span> skew <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="line">   73 </span><span class="sym"></span><span class="kwa">var</span> kurtosis <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="line">   74 </span><span class="sym"></span><span class="kwa">var</span> median <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="line">   75 </span><span class="sym"></span><span class="kwa">var</span> deviation <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="line">   76 </span><span class="sym">
</span><span class="line">   77 </span><span class="sym"></span><span class="kwa">var</span> nums<span class="sym">:</span>stl_vector<span class="sym">[</span><span class="kwb">double</span><span class="sym">];
</span><span class="line">   78 </span><span class="sym">
</span><span class="line">   79 </span><span class="sym"></span><span class="kwa">var</span> line <span class="sym">=</span> Text_file<span class="sym">::</span>readln Text_file<span class="sym">::</span>stdin<span class="sym">;
</span><span class="line">   80 </span><span class="sym"></span>until line <span class="sym">==</span> <span class="str">&quot;&quot;</span> do
<span class="line">   81 </span>  v <span class="sym">:=</span> String<span class="sym">::</span>atof line<span class="sym">;
</span><span class="line">   82 </span><span class="sym"></span>  sum <span class="sym">+=</span> v<span class="sym">;
</span><span class="line">   83 </span><span class="sym"></span>  push_back <span class="sym">(</span>nums<span class="sym">,</span>v<span class="sym">);
</span><span class="line">   84 </span><span class="sym"></span>  line <span class="sym">=</span> Text_file<span class="sym">::</span>readln Text_file<span class="sym">::</span>stdin<span class="sym">;
</span><span class="line">   85 </span><span class="sym"></span>done<span class="sym">;
</span><span class="line">   86 </span><span class="sym">
</span><span class="line">   87 </span><span class="sym"></span>m <span class="sym">:=</span> len nums<span class="sym">;
</span><span class="line">   88 </span><span class="sym"></span>mean <span class="sym">:=</span> sum<span class="sym">/</span>double_of m<span class="sym">;
</span><span class="line">   89 </span><span class="sym"></span><span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> until i <span class="sym">==</span> m do
<span class="line">   90 </span>  dev <span class="sym">:=</span> nums.<span class="sym">[</span>i<span class="sym">] -</span> mean<span class="sym">;
</span><span class="line">   91 </span><span class="sym"></span>  dev2 <span class="sym">:=</span> dev<span class="sym">*</span>dev<span class="sym">;
</span><span class="line">   92 </span><span class="sym"></span>  dev3 <span class="sym">:=</span> dev2<span class="sym">*</span>dev<span class="sym">;
</span><span class="line">   93 </span><span class="sym"></span>  dev4 <span class="sym">:=</span> dev3<span class="sym">*</span>dev<span class="sym">;
</span><span class="line">   94 </span><span class="sym"></span>  average_deviation <span class="sym">+=</span> fabs dev<span class="sym">;
</span><span class="line">   95 </span><span class="sym"></span>  variance <span class="sym">+=</span> dev2 <span class="com">/*pow(deviation,2)*/</span><span class="sym">;
</span><span class="line">   96 </span><span class="sym"></span>  skew <span class="sym">+=</span> dev3 <span class="com">/* pow(deviation,3) */</span><span class="sym">;
</span><span class="line">   97 </span><span class="sym"></span>  kurtosis <span class="sym">+=</span> dev4 <span class="com">/* pow(deviation,4) */</span><span class="sym">;
</span><span class="line">   98 </span><span class="sym">  ++</span>i<span class="sym">;
</span><span class="line">   99 </span><span class="sym"></span>done<span class="sym">;
</span><span class="line">  100 </span><span class="sym">
</span><span class="line">  101 </span><span class="sym"></span>average_deviation <span class="sym">/=</span> double_of m<span class="sym">;
</span><span class="line">  102 </span><span class="sym"></span>variance <span class="sym">/=</span> double_of <span class="sym">(</span>m <span class="num">- 1</span><span class="sym">);
</span><span class="line">  103 </span><span class="sym"></span>standard_deviation <span class="sym">=</span> sqrt variance<span class="sym">;
</span><span class="line">  104 </span><span class="sym"></span><span class="kwa">if</span> variance <span class="sym">!=</span> <span class="num">0.0</span> do
<span class="line">  105 </span>  skew <span class="sym">/=</span> double_of m <span class="sym">*</span> variance <span class="sym">*</span> standard_deviation<span class="sym">;
</span><span class="line">  106 </span><span class="sym"></span>  kurtosis <span class="sym">=</span> kurtosis<span class="sym">/(</span>double_of m <span class="sym">*</span> variance <span class="sym">*</span> variance<span class="sym">) -</span> <span class="num">3.0</span><span class="sym">;
</span><span class="line">  107 </span><span class="sym"></span>done<span class="sym">;
</span><span class="line">  108 </span><span class="sym">
</span><span class="line">  109 </span><span class="sym"></span>mid <span class="sym">:=</span> m <span class="sym">/</span> <span class="num">2</span><span class="sym">;
</span><span class="line">  110 </span><span class="sym"></span>kmedian<span class="sym">(</span>nums<span class="sym">,</span> mid<span class="sym">);
</span><span class="line">  111 </span><span class="sym"></span>median <span class="sym">=
</span><span class="line">  112 </span><span class="sym"></span>  <span class="kwa">if</span> m <span class="sym">%</span> <span class="num">2</span> <span class="sym">==</span> <span class="num">1</span> <span class="kwa">then</span> nums.<span class="sym">[</span>mid<span class="sym">]</span>          <span class="slc">// odd
</span><span class="line">  113 </span><span class="slc"></span>  <span class="kwa">else</span> <span class="sym">(</span>nums.<span class="sym">[</span>mid<span class="sym">] +</span> max <span class="sym">(</span>nums<span class="sym">,</span>mid<span class="sym">))/</span><span class="num">2.0</span> <span class="slc">// even
</span><span class="line">  114 </span><span class="slc"></span>  <span class="kwa">endif
</span><span class="line">  115 </span><span class="kwa"></span><span class="sym">;
</span><span class="line">  116 </span><span class="sym">
</span><span class="line">  117 </span><span class="sym"></span><span class="kwa">print</span> <span class="str">&quot;n:                  &quot;</span><span class="sym">;</span> <span class="kwa">print</span> m<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="line">  118 </span><span class="sym"></span><span class="kwa">print</span> <span class="str">&quot;median:             &quot;</span><span class="sym">;</span> printf median<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="line">  119 </span><span class="sym"></span><span class="kwa">print</span> <span class="str">&quot;mean:               &quot;</span><span class="sym">;</span> printf mean<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="line">  120 </span><span class="sym"></span><span class="kwa">print</span> <span class="str">&quot;average_deviation:  &quot;</span><span class="sym">;</span> printf average_deviation<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="line">  121 </span><span class="sym"></span><span class="kwa">print</span> <span class="str">&quot;standard_deviation: &quot;</span><span class="sym">;</span> printf standard_deviation<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="line">  122 </span><span class="sym"></span><span class="kwa">print</span> <span class="str">&quot;variance:           &quot;</span><span class="sym">;</span> printf variance<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="line">  123 </span><span class="sym"></span><span class="kwa">print</span> <span class="str">&quot;skew:               &quot;</span><span class="sym">;</span> printf skew<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="line">  124 </span><span class="sym"></span><span class="kwa">print</span> <span class="str">&quot;kurtosis:           &quot;</span><span class="sym">;</span> printf kurtosis<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="line">  125 </span><span class="sym"></span>
