<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">//
</FONT></I><I><FONT COLOR="#B22222">// Contributed by John Skaller
</FONT></I><I><FONT COLOR="#B22222">//
</FONT></I>include <B><FONT COLOR="#BC8F8F">&quot;std&quot;</FONT></B>;
n := atoi(System::argv 1);
include <B><FONT COLOR="#BC8F8F">&quot;stl&quot;</FONT></B>;
<I><FONT COLOR="#B22222">// adapted from C solution
</FONT></I>
<I><FONT COLOR="#B22222">/* kmedian permutes elements of a to get
   a[i]&lt;=a[k] for i&lt;k
   a[i]&gt;=a[k] for i&gt;k
        See. N. Wirth, Algorithms+data structures = Programs
*/</FONT></I>

open Stl;
open Stl::Vector;

proc printf: <B><FONT COLOR="#228B22">double</FONT></B> = 'printf(<B><FONT COLOR="#BC8F8F">&quot;%f&quot;</FONT></B>,$1);';

proc <B><FONT COLOR="#0000FF">kmedian</FONT></B>(v: stl_vector[<B><FONT COLOR="#228B22">double</FONT></B>], mid:<B><FONT COLOR="#228B22">int</FONT></B>)
{
  var a = begin v;
  var k = mid;
  var n = len v;
  whilst true <B><FONT COLOR="#A020F0">do</FONT></B>
    var j = Cstdlib::rand() % n;
    b := a.[j];
    var i = 0;
    j = n-1;
    var flag = true;
    whilst flag <B><FONT COLOR="#A020F0">do</FONT></B>
      whilst  a.[i] &lt; b <B><FONT COLOR="#A020F0">do</FONT></B> i++; done;
      whilst  a.[j] &gt; b <B><FONT COLOR="#A020F0">do</FONT></B> j--; done;
      <B><FONT COLOR="#A020F0">if</FONT></B> i&lt;j <B><FONT COLOR="#A020F0">do</FONT></B>
        a.[i] &lt;-&gt; a.[j];
        i++;
        j--;
      <B><FONT COLOR="#A020F0">else</FONT></B>
        <B><FONT COLOR="#A020F0">if</FONT></B> a.[j] &lt; b <B><FONT COLOR="#A020F0">do</FONT></B> j++; done;
        <B><FONT COLOR="#A020F0">if</FONT></B> a.[i] &gt; b <B><FONT COLOR="#A020F0">do</FONT></B> i--; done;
        flag = false;
      done;
    done;

    <B><FONT COLOR="#A020F0">if</FONT></B> i&lt;k <B><FONT COLOR="#A020F0">do</FONT></B>
      k -= i+1;
      n -= i+1;
      a += i+1;
    elif j&gt;k <B><FONT COLOR="#A020F0">do</FONT></B>
      n=j;
    <B><FONT COLOR="#A020F0">else</FONT></B> <B><FONT COLOR="#A020F0">return</FONT></B>;
    done;
  done;
}

fun <B><FONT COLOR="#0000FF">max</FONT></B>(a:stl_vector[<B><FONT COLOR="#228B22">double</FONT></B>], n:<B><FONT COLOR="#228B22">int</FONT></B>):<B><FONT COLOR="#228B22">double</FONT></B> =
{
  var temp=a.[0];
  var j = n-1;
  until j == 0 <B><FONT COLOR="#A020F0">do</FONT></B>
    <B><FONT COLOR="#A020F0">if</FONT></B> a.[j]&gt;temp <B><FONT COLOR="#A020F0">do</FONT></B> temp=a.[j]; done;
    --j;
  done;
  <B><FONT COLOR="#A020F0">return</FONT></B> temp;
}


var sum = 0.0;
var average_deviation = 0.0;
var standard_deviation = 0.0;
var variance = 0.0;
var skew = 0.0;
var kurtosis = 0.0;
var median = 0.0;
var deviation = 0.0;

var nums:stl_vector[<B><FONT COLOR="#228B22">double</FONT></B>];

var line = Text_file::readln Text_file::stdin;
until line == <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B> <B><FONT COLOR="#A020F0">do</FONT></B>
  v := String::atof line;
  sum += v;
  push_back (nums,v);
  line = Text_file::readln Text_file::stdin;
done;

m := len nums;
mean := sum/double_of m;
var i = 0; until i == m <B><FONT COLOR="#A020F0">do</FONT></B>
  dev := nums.[i] - mean;
  dev2 := dev*dev;
  dev3 := dev2*dev;
  dev4 := dev3*dev;
  average_deviation += fabs dev;
  variance += dev2 <I><FONT COLOR="#B22222">/*pow(deviation,2)*/</FONT></I>;
  skew += dev3 <I><FONT COLOR="#B22222">/* pow(deviation,3) */</FONT></I>;
  kurtosis += dev4 <I><FONT COLOR="#B22222">/* pow(deviation,4) */</FONT></I>;
  ++i;
done;

average_deviation /= double_of m;
variance /= double_of (m - 1);
standard_deviation = sqrt variance;
<B><FONT COLOR="#A020F0">if</FONT></B> variance != 0.0 <B><FONT COLOR="#A020F0">do</FONT></B>
  skew /= double_of m * variance * standard_deviation;
  kurtosis = kurtosis/(double_of m * variance * variance) - 3.0;
done;

mid := m / 2;
<B><FONT COLOR="#0000FF">kmedian</FONT></B>(nums, mid);
median =
  <B><FONT COLOR="#A020F0">if</FONT></B> m % 2 == 1 then nums.[mid]          <I><FONT COLOR="#B22222">// odd
</FONT></I>  <B><FONT COLOR="#A020F0">else</FONT></B> (nums.[mid] + max (nums,mid))/2.0 <I><FONT COLOR="#B22222">// even
</FONT></I>  endif
;

print <B><FONT COLOR="#BC8F8F">&quot;n:                  &quot;</FONT></B>; print m; endl;
print <B><FONT COLOR="#BC8F8F">&quot;median:             &quot;</FONT></B>; printf median; endl;
print <B><FONT COLOR="#BC8F8F">&quot;mean:               &quot;</FONT></B>; printf mean; endl;
print <B><FONT COLOR="#BC8F8F">&quot;average_deviation:  &quot;</FONT></B>; printf average_deviation; endl;
print <B><FONT COLOR="#BC8F8F">&quot;standard_deviation: &quot;</FONT></B>; printf standard_deviation; endl;
print <B><FONT COLOR="#BC8F8F">&quot;variance:           &quot;</FONT></B>; printf variance; endl;
print <B><FONT COLOR="#BC8F8F">&quot;skew:               &quot;</FONT></B>; printf skew; endl;
print <B><FONT COLOR="#BC8F8F">&quot;kurtosis:           &quot;</FONT></B>; printf kurtosis; endl;
</pre></td></tr></table>
