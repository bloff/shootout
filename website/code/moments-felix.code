<span class="slc">//
</span><span class="slc">// Contributed by John Skaller
</span><span class="slc">//
</span><span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;
</span>n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);
</span><span class="kwa">include</span> <span class="str">&quot;stl&quot;</span><span class="sym">;
</span><span class="slc">// adapted from C solution
</span>
<span class="com">/* kmedian permutes elements of a to get
   a[i]&lt;=a[k] for i&lt;k
   a[i]&gt;=a[k] for i&gt;k
        See. N. Wirth, Algorithms+data structures = Programs
*/</span>

<span class="kwa">open</span> Stl<span class="sym">;
</span><span class="kwa">open</span> Stl<span class="sym">::</span>Vector<span class="sym">;

</span><span class="kwa">proc</span> printf<span class="sym">:</span> <span class="kwb">double</span> <span class="sym">=</span> <span class="str">'printf(&quot;%f&quot;,$1);'</span><span class="sym">;

</span><span class="kwa">proc</span> kmedian<span class="sym">(</span>v<span class="sym">:</span> stl_vector<span class="sym">[</span><span class="kwb">double</span><span class="sym">],</span> mid<span class="sym">:</span><span class="kwb">int</span><span class="sym">)
{
</span>  <span class="kwa">var</span> a <span class="sym">=</span> begin v<span class="sym">;
</span>  <span class="kwa">var</span> k <span class="sym">=</span> mid<span class="sym">;
</span>  <span class="kwa">var</span> n <span class="sym">=</span> len v<span class="sym">;
</span>  whilst <span class="kwa">true</span> do
    <span class="kwa">var</span> j <span class="sym">=</span> Cstdlib<span class="sym">::</span>rand<span class="sym">() %</span> n<span class="sym">;
</span>    b <span class="sym">:=</span> a.<span class="sym">[</span>j<span class="sym">];
</span>    <span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    j <span class="sym">=</span> n<span class="num">-1</span><span class="sym">;
</span>    <span class="kwa">var</span> flag <span class="sym">=</span> <span class="kwa">true</span><span class="sym">;
</span>    whilst flag do
      whilst  a.<span class="sym">[</span>i<span class="sym">] &lt;</span> b do i<span class="sym">++;</span> done<span class="sym">;
</span>      whilst  a.<span class="sym">[</span>j<span class="sym">] &gt;</span> b do j<span class="sym">--;</span> done<span class="sym">;
</span>      <span class="kwa">if</span> i<span class="sym">&lt;</span>j do
        a.<span class="sym">[</span>i<span class="sym">] &lt;-&gt;</span> a.<span class="sym">[</span>j<span class="sym">];
</span>        i<span class="sym">++;
</span>        j<span class="sym">--;
</span>      <span class="kwa">else
        if</span> a.<span class="sym">[</span>j<span class="sym">] &lt;</span> b do j<span class="sym">++;</span> done<span class="sym">;
</span>        <span class="kwa">if</span> a.<span class="sym">[</span>i<span class="sym">] &gt;</span> b do i<span class="sym">--;</span> done<span class="sym">;
</span>        flag <span class="sym">=</span> <span class="kwa">false</span><span class="sym">;
</span>      done<span class="sym">;
</span>    done<span class="sym">;

</span>    <span class="kwa">if</span> i<span class="sym">&lt;</span>k do
      k <span class="sym">-=</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">;
</span>      n <span class="sym">-=</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">;
</span>      a <span class="sym">+=</span> i<span class="sym">+</span><span class="num">1</span><span class="sym">;
</span>    <span class="kwa">elif</span> j<span class="sym">&gt;</span>k do
      n<span class="sym">=</span>j<span class="sym">;
</span>    <span class="kwa">else return</span><span class="sym">;
</span>    done<span class="sym">;
</span>  done<span class="sym">;
}

</span><span class="kwa">fun</span> max<span class="sym">(</span>a<span class="sym">:</span>stl_vector<span class="sym">[</span><span class="kwb">double</span><span class="sym">],</span> n<span class="sym">:</span><span class="kwb">int</span><span class="sym">):</span><span class="kwb">double</span> <span class="sym">=
{
</span>  <span class="kwa">var</span> temp<span class="sym">=</span>a.<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span>  <span class="kwa">var</span> j <span class="sym">=</span> n<span class="num">-1</span><span class="sym">;
</span>  until j <span class="sym">==</span> <span class="num">0</span> do
    <span class="kwa">if</span> a.<span class="sym">[</span>j<span class="sym">]&gt;</span>temp do temp<span class="sym">=</span>a.<span class="sym">[</span>j<span class="sym">];</span> done<span class="sym">;
    --</span>j<span class="sym">;
</span>  done<span class="sym">;
</span>  <span class="kwa">return</span> temp<span class="sym">;
}


</span><span class="kwa">var</span> sum <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="kwa">var</span> average_deviation <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="kwa">var</span> standard_deviation <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="kwa">var</span> variance <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="kwa">var</span> skew <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="kwa">var</span> kurtosis <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="kwa">var</span> median <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;
</span><span class="kwa">var</span> deviation <span class="sym">=</span> <span class="num">0.0</span><span class="sym">;

</span><span class="kwa">var</span> nums<span class="sym">:</span>stl_vector<span class="sym">[</span><span class="kwb">double</span><span class="sym">];

</span><span class="kwa">var</span> line <span class="sym">=</span> Text_file<span class="sym">::</span>readln Text_file<span class="sym">::</span>stdin<span class="sym">;
</span>until line <span class="sym">==</span> <span class="str">&quot;&quot;</span> do
  v <span class="sym">:=</span> String<span class="sym">::</span>atof line<span class="sym">;
</span>  sum <span class="sym">+=</span> v<span class="sym">;
</span>  push_back <span class="sym">(</span>nums<span class="sym">,</span>v<span class="sym">);
</span>  line <span class="sym">=</span> Text_file<span class="sym">::</span>readln Text_file<span class="sym">::</span>stdin<span class="sym">;
</span>done<span class="sym">;

</span>m <span class="sym">:=</span> len nums<span class="sym">;
</span>mean <span class="sym">:=</span> sum<span class="sym">/</span>double_of m<span class="sym">;
</span><span class="kwa">var</span> i <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> until i <span class="sym">==</span> m do
  dev <span class="sym">:=</span> nums.<span class="sym">[</span>i<span class="sym">] -</span> mean<span class="sym">;
</span>  dev2 <span class="sym">:=</span> dev<span class="sym">*</span>dev<span class="sym">;
</span>  dev3 <span class="sym">:=</span> dev2<span class="sym">*</span>dev<span class="sym">;
</span>  dev4 <span class="sym">:=</span> dev3<span class="sym">*</span>dev<span class="sym">;
</span>  average_deviation <span class="sym">+=</span> fabs dev<span class="sym">;
</span>  variance <span class="sym">+=</span> dev2 <span class="com">/*pow(deviation,2)*/</span><span class="sym">;
</span>  skew <span class="sym">+=</span> dev3 <span class="com">/* pow(deviation,3) */</span><span class="sym">;
</span>  kurtosis <span class="sym">+=</span> dev4 <span class="com">/* pow(deviation,4) */</span><span class="sym">;
  ++</span>i<span class="sym">;
</span>done<span class="sym">;

</span>average_deviation <span class="sym">/=</span> double_of m<span class="sym">;
</span>variance <span class="sym">/=</span> double_of <span class="sym">(</span>m <span class="num">- 1</span><span class="sym">);
</span>standard_deviation <span class="sym">=</span> sqrt variance<span class="sym">;
</span><span class="kwa">if</span> variance <span class="sym">!=</span> <span class="num">0.0</span> do
  skew <span class="sym">/=</span> double_of m <span class="sym">*</span> variance <span class="sym">*</span> standard_deviation<span class="sym">;
</span>  kurtosis <span class="sym">=</span> kurtosis<span class="sym">/(</span>double_of m <span class="sym">*</span> variance <span class="sym">*</span> variance<span class="sym">) -</span> <span class="num">3.0</span><span class="sym">;
</span>done<span class="sym">;

</span>mid <span class="sym">:=</span> m <span class="sym">/</span> <span class="num">2</span><span class="sym">;
</span>kmedian<span class="sym">(</span>nums<span class="sym">,</span> mid<span class="sym">);
</span>median <span class="sym">=
</span>  <span class="kwa">if</span> m <span class="sym">%</span> <span class="num">2</span> <span class="sym">==</span> <span class="num">1</span> <span class="kwa">then</span> nums.<span class="sym">[</span>mid<span class="sym">]</span>          <span class="slc">// odd
</span>  <span class="kwa">else</span> <span class="sym">(</span>nums.<span class="sym">[</span>mid<span class="sym">] +</span> max <span class="sym">(</span>nums<span class="sym">,</span>mid<span class="sym">))/</span><span class="num">2.0</span> <span class="slc">// even
</span>  <span class="kwa">endif
</span><span class="sym">;

</span><span class="kwa">print</span> <span class="str">&quot;n:                  &quot;</span><span class="sym">;</span> <span class="kwa">print</span> m<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="kwa">print</span> <span class="str">&quot;median:             &quot;</span><span class="sym">;</span> printf median<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="kwa">print</span> <span class="str">&quot;mean:               &quot;</span><span class="sym">;</span> printf mean<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="kwa">print</span> <span class="str">&quot;average_deviation:  &quot;</span><span class="sym">;</span> printf average_deviation<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="kwa">print</span> <span class="str">&quot;standard_deviation: &quot;</span><span class="sym">;</span> printf standard_deviation<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="kwa">print</span> <span class="str">&quot;variance:           &quot;</span><span class="sym">;</span> printf variance<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="kwa">print</span> <span class="str">&quot;skew:               &quot;</span><span class="sym">;</span> printf skew<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span><span class="kwa">print</span> <span class="str">&quot;kurtosis:           &quot;</span><span class="sym">;</span> printf kurtosis<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;
</span>
