<span class="kwa">import</span> Data.Array.Unboxed
<span class="kwa">import</span> Data.List
<span class="kwa">import</span> System.Environment <span class="sym">(</span>getArgs<span class="sym">)</span>

main <span class="sym">::</span> IO <span class="sym">()</span>
main <span class="sym">=</span> getArgs <span class="sym">&gt;&gt;=</span> return . read . head <span class="sym">&gt;&gt;=</span> msquare

msquare <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> IO <span class="sym">()</span>
msquare n <span class="sym">=</span> <span class="kwa">let</span> mn <span class="sym">= (</span>n<span class="sym">*(</span>n<span class="sym">*</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">))</span> `quot` <span class="num">2</span>
                grd <span class="sym">=</span> listArray <span class="sym">((</span><span class="num">1</span><span class="sym">,</span><span class="num">1</span><span class="sym">),(</span>n<span class="sym">,</span>n<span class="sym">)) (</span>repeat <span class="num">0</span><span class="sym">)</span>
                unus <span class="sym">= [</span><span class="num">1</span> .. n<span class="sym">*</span>n<span class="sym">]</span>
                ff  <span class="sym">=</span> findFewestMoves n mn grd unus
                ini <span class="sym">=</span> Square grd unus ff <span class="sym">(</span><span class="num">2</span><span class="sym">*</span>n<span class="sym">*</span>n<span class="sym">)</span>
                allSquares <span class="sym">=</span> bestFirst <span class="sym">(</span>successorNodes n mn<span class="sym">) [</span>ini<span class="sym">]</span>
            <span class="kwa">in</span>  putStrLn $ showGrid n . grid $ head allSquares

<span class="kwa">data</span> Square <span class="sym">=</span> Square { grid <span class="sym">::</span> UArray <span class="sym">(</span><span class="kwb">Int</span><span class="sym">,</span><span class="kwb">Int</span><span class="sym">)</span> <span class="kwb">Int</span>
                     <span class="sym">,</span> unused <span class="sym">:: [</span><span class="kwb">Int</span><span class="sym">]</span>
                     <span class="sym">,</span> ffm <span class="sym">:: ([</span><span class="kwb">Int</span><span class="sym">],</span> <span class="kwb">Int</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">,</span> <span class="kwb">Int</span><span class="sym">)</span>
                     <span class="sym">,</span> priority <span class="sym">:: !</span><span class="kwb">Int</span>
                     } <span class="kwa">deriving</span> Eq

<span class="kwa">instance</span> Ord Square <span class="kwa">where</span>
    compare <span class="sym">(</span>Square g1 _ _ p1<span class="sym">) (</span>Square g2 _ _ p2<span class="sym">)</span>
        <span class="sym">=</span> <span class="kwa">case</span> compare p1 p2 <span class="kwa">of</span>
            EQ <span class="sym">-&gt;</span> compare g1 g2
            ot <span class="sym">-&gt;</span> ot

showMat <span class="sym">:: [[</span><span class="kwb">Int</span><span class="sym">]] -&gt;</span> ShowS
showMat lns <span class="sym">=</span> foldr1 <span class="sym">((</span>.<span class="sym">)</span> . <span class="sym">(</span>. showChar <span class="str">'\n'</span><span class="sym">))</span> $ showLns
              <span class="kwa">where</span>
                showLns <span class="sym">=</span>
			map <span class="sym">(</span>foldr1 <span class="sym">((</span>.<span class="sym">)</span> . <span class="sym">(</span>. showChar <span class="str">' '</span><span class="sym">))</span> . map shows<span class="sym">)</span> lns

showGrid <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> UArray <span class="sym">(</span><span class="kwb">Int</span><span class="sym">,</span><span class="kwb">Int</span><span class="sym">)</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> String
showGrid n g <span class="sym">=</span> showMat <span class="sym">[[</span>g <span class="sym">! (</span>r<span class="sym">,</span>c<span class="sym">) |</span> c <span class="sym">&lt;- [</span><span class="num">1</span> .. n<span class="sym">]] |</span> r <span class="sym">&lt;- [</span><span class="num">1</span> .. n<span class="sym">]]</span> <span class="str">&quot;&quot;</span>

bestFirst <span class="sym">:: (</span>Square <span class="sym">-&gt; [</span>Square<span class="sym">]) -&gt; [</span>Square<span class="sym">] -&gt; [</span>Square<span class="sym">]</span>
bestFirst _ <span class="sym">[] = []</span>
bestFirst successors <span class="sym">(</span>front<span class="sym">:</span>queue<span class="sym">)</span>
    <span class="sym">|</span> priority front <span class="sym">==</span> <span class="num">0</span> <span class="sym">=</span> front <span class="sym">:</span> bestFirst successors queue
    <span class="sym">|</span> otherwise <span class="sym">=</span> bestFirst successors $ foldr insert queue <span class="sym">(</span>successors front<span class="sym">)</span>

successorNodes n mn sq
    <span class="sym">=</span> map <span class="sym">(</span>place sq n mn <span class="sym">(</span>r<span class="sym">,</span>c<span class="sym">))</span> possibilities
      <span class="kwa">where</span>
        <span class="sym">(</span>possibilities<span class="sym">,</span>_<span class="sym">,</span>r<span class="sym">,</span>c<span class="sym">) =</span> ffm sq

place <span class="sym">::</span> Square <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt; (</span><span class="kwb">Int</span><span class="sym">,</span><span class="kwb">Int</span><span class="sym">) -&gt;</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> Square
place <span class="sym">(</span>Square grd unus _ _<span class="sym">)</span> n mn <span class="sym">(</span>r<span class="sym">,</span>c<span class="sym">)</span> k
    <span class="sym">=</span> Square grd<span class="str">' uns moveChoices p</span>
<span class="str">      where</span>
<span class="str">        grd'</span> <span class="sym">=</span> grd<span class="sym">//[((</span>r<span class="sym">,</span>c<span class="sym">),</span>k<span class="sym">)]</span>
        moveChoices&#64;<span class="sym">(</span>_<span class="sym">,</span>len<span class="sym">,</span>_<span class="sym">,</span>_<span class="sym">) =</span> findFewestMoves n mn grd<span class="str">' uns</span>
<span class="str">        uns = delete k unus</span>
<span class="str">        p = length uns + len</span>
<span class="str"></span>
<span class="str">findFewestMoves :: Int -&gt; Int -&gt; UArray (Int,Int) Int -&gt; [Int] -&gt; ([Int],Int,Int,Int)</span>
<span class="str">findFewestMoves n mn grid unus</span>
<span class="str">    | null unus = ([],0,0,0)</span>
<span class="str">    | otherwise = (movelist, length movelist, mr, mc)</span>
<span class="str">      where</span>
<span class="str">        openSquares = [(r,c) | r &lt;- [1 .. n], c &lt;- [1 .. n], grid ! (r,c) == 0]</span>
<span class="str">        pm = possibleMoves n mn grid unus</span>
<span class="str">        openMap = map (\(x,y) -&gt; (pm x y,x,y)) openSquares</span>
<span class="str">        mycompare (a,_,_) (b,_,_) = compare (length a) (length b)</span>
<span class="str">        (movelist,mr,mc) = minimumBy mycompare openMap</span>
<span class="str"></span>
<span class="str">possibleMoves :: Int -&gt; Int -&gt; UArray (Int,Int) Int -&gt; [Int] -&gt; Int -&gt; Int -&gt; [Int]</span>
<span class="str">possibleMoves n mn grid unus r c</span>
<span class="str">    | grid ! (r,c) /= 0 = []</span>
<span class="str">    | otherwise = takeWhile (&lt;= ma) $ dropWhile (&lt; mi) unus</span>
<span class="str">      where</span>
<span class="str">        cellGroups</span>
<span class="str">            | r == c &amp;&amp; r + c == n + 1 = [d1, d2, theRow, theCol]</span>
<span class="str">            | r == c = [d1, theRow, theCol]</span>
<span class="str">            | r + c == n + 1 = [d2, theRow, theCol]</span>
<span class="str">            | otherwise = [theRow, theCol]</span>
<span class="str">        d1 = diag1 grid n</span>
<span class="str">        d2 = diag2 grid n</span>
<span class="str">        theRow = gridRow grid n r</span>
<span class="str">        theCol = gridCol grid n c</span>
<span class="str">        lows = scanl (+) 0 unus</span>
<span class="str">        higs = scanl (+) 0 $ reverse unus</span>
<span class="str">        rge :: [Int] -&gt; (Int,Int)</span>
<span class="str">        rge cg = let k = count0s cg - 1</span>
<span class="str">                     lft = mn - sum cg</span>
<span class="str">                 in (lft - (higs!!k),lft - (lows!!k))</span>
<span class="str">        (mi,ma) = foldr1 mima $ map rge cellGroups</span>
<span class="str">        mima (a,b) (c,d) = (max a c, min b d)</span>
<span class="str"></span>
<span class="str">gridRow, gridCol :: UArray (Int,Int) Int -&gt; Int -&gt; Int -&gt; [Int]</span>
<span class="str">diag1, diag2 :: UArray (Int,Int) Int -&gt; Int -&gt; [Int]</span>
<span class="str">gridRow grid n r = [grid ! (r,i) | i &lt;- [1 .. n]]</span>
<span class="str">gridCol grid n c = [grid ! (i,c) | i &lt;- [1 .. n]]</span>
<span class="str">diag1 grid n     = [grid ! (i,i) | i &lt;- [1 .. n]]</span>
<span class="str">diag2 grid n     = [grid ! (i,n+1-i) | i &lt;- [1 .. n]]</span>
<span class="str">count0s :: [Int] -&gt; Int</span>
<span class="str">count0s = length . filter (== 0)</span>
<span class="str"></span>
