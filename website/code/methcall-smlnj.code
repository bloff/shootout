<span class="com">(* methcall.sml</span>
<span class="com"> *</span>
<span class="com"> *   Simple &quot;method call&quot; benchmark.</span>
<span class="com"> *</span>
<span class="com"> * Copyright (c) 2004 by The Fellowship of SML/NJ</span>
<span class="com"> *</span>
<span class="com"> * Author: Matthias Blume (blume&#64;tti-c.org)</span>
<span class="com"> *)</span>
<span class="kwa">structure</span> Test<span class="sym">:</span><span class="kwa">sig val</span> main<span class="sym">:</span><span class="kwb">string</span><span class="sym">*</span><span class="kwb">string</span> list<span class="sym">-&gt;</span>OS.Process.status <span class="kwa">end</span> <span class="sym">=</span> <span class="kwa">struct</span>

    <span class="com">(* the &quot;methods&quot; (work for both Toggle and NthToggle &quot;objects&quot;) *)</span>
    <span class="kwa">fun</span> Activate <span class="sym">(</span>t <span class="kwa">as</span> <span class="sym">{</span> a<span class="sym">,</span> r <span class="sym">}) = (</span>a <span class="sym">();</span> t<span class="sym">)</span>
    <span class="kwa">fun</span> Value <span class="sym">{</span> a<span class="sym">,</span> r <span class="sym">} = !</span>r

    <span class="com">(* constructor for Toggle *)</span>
    <span class="kwa">fun</span> Toggle b <span class="sym">=</span> <span class="kwa">let val</span> r <span class="sym">=</span> ref b <span class="kwa">in</span> <span class="sym">{</span> a <span class="sym">=</span> <span class="kwa">fn</span><span class="sym">() =&gt;</span> r<span class="sym">:=</span>not<span class="sym">(!</span>r<span class="sym">),</span> r <span class="sym">=</span> r <span class="sym">}</span> <span class="kwa">end</span>

    <span class="com">(* constructor for NthToggle *)</span>
    <span class="kwa">fun</span> NthToggle <span class="sym">(</span>b<span class="sym">,</span> m<span class="sym">) =</span>
	<span class="kwa">let val</span> <span class="sym">({</span> r<span class="sym">,</span> a <span class="sym">},</span> n<span class="sym">) = (</span>Toggle b<span class="sym">,</span> ref <span class="num">0</span><span class="sym">)</span>
	    <span class="kwa">fun</span> a' <span class="sym">() =</span>
		<span class="kwa">let val</span> i <span class="sym">= !</span>n<span class="sym">+</span><span class="num">1</span> <span class="kwa">in if</span> i<span class="sym">&gt;=</span>m <span class="kwa">then</span> <span class="sym">(</span>a<span class="sym">();</span> n<span class="sym">:=</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">else</span> n<span class="sym">:=</span>i <span class="kwa">end</span>
	<span class="kwa">in</span> <span class="sym">{</span> a <span class="sym">=</span> a'<span class="sym">,</span> r <span class="sym">=</span> r <span class="sym">}</span> <span class="kwa">end</span>

    <span class="com">(* activate n times, then print the value *)</span>
    <span class="kwa">fun</span> loop t <span class="sym">=</span> <span class="kwa">let fun</span> l <span class="num">0</span> <span class="sym">=</span> print <span class="sym">(</span><span class="kwa">Bool</span>.toString <span class="sym">(</span>Value t<span class="sym">)</span> ^ <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span>
		       <span class="sym">|</span> l i <span class="sym">= (</span>ignore <span class="sym">(</span>Value <span class="sym">(</span>Activate t<span class="sym">));</span> l <span class="sym">(</span>i<span class="sym">-</span><span class="num">1</span><span class="sym">))</span>
		 <span class="kwa">in</span> l <span class="kwa">end</span>

    <span class="com">(* try first for a Toggle object, then for an NthToggle object... *)</span>
    <span class="kwa">fun</span> main' n <span class="sym">=</span>
	<span class="sym">(</span>loop <span class="sym">(</span>Toggle <span class="kwa">true</span><span class="sym">)</span> n<span class="sym">;</span> loop <span class="sym">(</span>NthToggle <span class="sym">(</span><span class="kwa">true</span><span class="sym">,</span> <span class="num">3</span><span class="sym">))</span> n<span class="sym">;</span> OS.Process.success<span class="sym">)</span>

    <span class="com">(* driver: *)</span>
    <span class="kwa">fun</span> main <span class="sym">(</span>_<span class="sym">, []) =</span> main' <span class="num">1</span>
      <span class="sym">|</span> main <span class="sym">(</span>_<span class="sym">,</span> arg <span class="sym">::</span> _<span class="sym">) =</span> main' <span class="sym">(</span>getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString arg<span class="sym">,</span> <span class="num">1</span><span class="sym">))</span>
<span class="kwa">end</span>
