<span class="slc">// -*- mode: c++ -*-</span>
<span class="slc">// $Id: heapsort-gpp.code,v 1.16 2006-09-20 05:51:32 bfulgham Exp $</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// C++-ified by Brent Fulgham</span>

<span class="dir">#include &lt;iomanip&gt;</span>
<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;stdlib.h&gt;</span>
<span class="dir">#include &lt;math.h&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="dir">#define IM 139968</span>
<span class="dir">#define IA   3877</span>
<span class="dir">#define IC  29573</span>

<span class="kwb">double</span> <span class="kwd">gen_random</span><span class="sym">(</span><span class="kwb">double</span> max<span class="sym">) {</span>
    <span class="kwb">static long</span> last <span class="sym">=</span> <span class="num">42</span><span class="sym">;</span>
    <span class="kwa">return</span><span class="sym">(</span> max <span class="sym">* (</span>last <span class="sym">= (</span>last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">) %</span> IM<span class="sym">) /</span> IM <span class="sym">);</span>
<span class="sym">}</span>

<span class="kwb">void</span> <span class="kwd">heapsort</span><span class="sym">(</span><span class="kwb">int</span> n<span class="sym">,</span> <span class="kwb">double</span> <span class="sym">*</span>ra<span class="sym">) {</span>
    <span class="kwb">int</span> i<span class="sym">,</span> j<span class="sym">;</span>
    <span class="kwb">int</span> ir <span class="sym">=</span> n<span class="sym">;</span>
    <span class="kwb">int</span> l <span class="sym">= (</span>n <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;</span>
    <span class="kwb">double</span> rra<span class="sym">;</span>

    <span class="kwa">for</span> <span class="sym">(;;) {</span>
	<span class="kwa">if</span> <span class="sym">(</span>l <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">) {</span>
	    rra <span class="sym">=</span> ra<span class="sym">[--</span>l<span class="sym">];</span>
	<span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
	    rra <span class="sym">=</span> ra<span class="sym">[</span>ir<span class="sym">];</span>
	    ra<span class="sym">[</span>ir<span class="sym">] =</span> ra<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
	    <span class="kwa">if</span> <span class="sym">(--</span>ir <span class="sym">==</span> <span class="num">1</span><span class="sym">) {</span>
		ra<span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> rra<span class="sym">;</span>
		<span class="kwa">return</span><span class="sym">;</span>
	    <span class="sym">}</span>
	<span class="sym">}</span>
	i <span class="sym">=</span> l<span class="sym">;</span>
	j <span class="sym">=</span> l <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;</span>
	<span class="kwa">while</span> <span class="sym">(</span>j <span class="sym">&lt;=</span> ir<span class="sym">) {</span>
	    <span class="kwa">if</span> <span class="sym">(</span>j <span class="sym">&lt;</span> ir <span class="sym">&amp;&amp;</span> ra<span class="sym">[</span>j<span class="sym">] &lt;</span> ra<span class="sym">[</span>j<span class="sym">+</span><span class="num">1</span><span class="sym">]) { ++</span>j<span class="sym">; }</span>
	    <span class="kwa">if</span> <span class="sym">(</span>rra <span class="sym">&lt;</span> ra<span class="sym">[</span>j<span class="sym">]) {</span>
		ra<span class="sym">[</span>i<span class="sym">] =</span> ra<span class="sym">[</span>j<span class="sym">];</span>
		j <span class="sym">+= (</span>i <span class="sym">=</span> j<span class="sym">);</span>
	    <span class="sym">}</span> <span class="kwa">else</span> <span class="sym">{</span>
		j <span class="sym">=</span> ir <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
	    <span class="sym">}</span>
	<span class="sym">}</span>
	ra<span class="sym">[</span>i<span class="sym">] =</span> rra<span class="sym">;</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {</span>
    <span class="kwb">int</span> N <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? <span class="kwd">atoi</span><span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);</span>

    <span class="com">/* create an array of N random doubles */</span>
    <span class="kwb">double</span> <span class="sym">*</span>ary <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">double</span><span class="sym">[</span> N<span class="sym">+</span><span class="num">1</span> <span class="sym">];</span>
    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>N<span class="sym">;</span> i<span class="sym">++) {</span>
	ary<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwd">gen_random</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwd">heapsort</span><span class="sym">(</span>N<span class="sym">,</span> ary<span class="sym">);</span>

    cout <span class="sym">&lt;&lt;</span> std<span class="sym">::</span>fixed <span class="sym">&lt;&lt;</span> std<span class="sym">::</span><span class="kwd">setprecision</span><span class="sym">(</span><span class="num">10</span><span class="sym">);</span>
    cout <span class="sym">&lt;&lt;</span> ary<span class="sym">[</span>N<span class="sym">] &lt;&lt;</span> endl<span class="sym">;</span>

    <span class="kwa">delete</span><span class="sym">[]</span> ary<span class="sym">;</span>
    <span class="kwa">return</span><span class="sym">(</span><span class="num">0</span><span class="sym">);</span>
<span class="sym">}</span>

