<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// -*- mode: c++ -*-
</FONT></I><I><FONT COLOR="#B22222">// $Id: heapsort-gpp.code,v 1.1 2004-11-08 14:59:27 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://www.bagley.org/~doug/shootout/
</FONT></I>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;iostream&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;stdlib.h&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;math.h&gt;</FONT></B>

using namespace std;

#<B><FONT COLOR="#5F9EA0">define</FONT></B> <FONT COLOR="#B8860B">IM</FONT> 139968
#<B><FONT COLOR="#5F9EA0">define</FONT></B> <FONT COLOR="#B8860B">IA</FONT>   3877
#<B><FONT COLOR="#5F9EA0">define</FONT></B> <FONT COLOR="#B8860B">IC</FONT>  29573

<B><FONT COLOR="#228B22">double</FONT></B>
<B><FONT COLOR="#0000FF">gen_random</FONT></B>(<B><FONT COLOR="#228B22">double</FONT></B> max) {
    <B><FONT COLOR="#228B22">static</FONT></B> <B><FONT COLOR="#228B22">long</FONT></B> last = 42;
    <B><FONT COLOR="#A020F0">return</FONT></B>( max * (last = (last * IA + IC) % IM) / IM );
}

<B><FONT COLOR="#228B22">void</FONT></B>
<B><FONT COLOR="#0000FF">heapsort</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> n, <B><FONT COLOR="#228B22">double</FONT></B> *ra) {
    <B><FONT COLOR="#228B22">int</FONT></B> i, j;
    <B><FONT COLOR="#228B22">int</FONT></B> ir = n;
    <B><FONT COLOR="#228B22">int</FONT></B> l = (n &gt;&gt; 1) + 1;
    <B><FONT COLOR="#228B22">double</FONT></B> rra;

    <B><FONT COLOR="#A020F0">for</FONT></B> (;;) {
	<B><FONT COLOR="#A020F0">if</FONT></B> (l &gt; 1) {
	    rra = ra[--l];
	} <B><FONT COLOR="#A020F0">else</FONT></B> {
	    rra = ra[ir];
	    ra[ir] = ra[1];
	    <B><FONT COLOR="#A020F0">if</FONT></B> (--ir == 1) {
		ra[1] = rra;
		<B><FONT COLOR="#A020F0">return</FONT></B>;
	    }
	}
	i = l;
	j = l &lt;&lt; 1;
	<B><FONT COLOR="#A020F0">while</FONT></B> (j &lt;= ir) {
	    <B><FONT COLOR="#A020F0">if</FONT></B> (j &lt; ir &amp;&amp; ra[j] &lt; ra[j+1]) { ++j; }
	    <B><FONT COLOR="#A020F0">if</FONT></B> (rra &lt; ra[j]) {
		ra[i] = ra[j];
		j += (i = j);
	    } <B><FONT COLOR="#A020F0">else</FONT></B> {
		j = ir + 1;
	    }
	}
	ra[i] = rra;
    }
}

<B><FONT COLOR="#228B22">int</FONT></B>
<B><FONT COLOR="#0000FF">main</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> argc, <B><FONT COLOR="#228B22">char</FONT></B> *argv[]) {
    <B><FONT COLOR="#228B22">int</FONT></B> N = ((argc == 2) ? atoi(argv[1]) : 1);
    <B><FONT COLOR="#228B22">double</FONT></B> *ary;
    <B><FONT COLOR="#228B22">int</FONT></B> i;
    
    <I><FONT COLOR="#B22222">/* create an array of N random doubles */</FONT></I>
    ary = (<B><FONT COLOR="#228B22">double</FONT></B> *)malloc((N+1) * <B><FONT COLOR="#A020F0">sizeof</FONT></B>(<B><FONT COLOR="#228B22">double</FONT></B>));
    <B><FONT COLOR="#A020F0">for</FONT></B> (i=1; i&lt;=N; i++) {
	ary[i] = gen_random(1);
    }

    heapsort(N, ary);

    printf(<B><FONT COLOR="#BC8F8F">&quot;%.10f\n&quot;</FONT></B>, ary[N]);
    free(ary);
    <B><FONT COLOR="#A020F0">return</FONT></B>(0);
}
</pre></td></tr></table>
