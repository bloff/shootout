<span class="com">(* regexmatch.ml</span>
<span class="com"> *</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Troestler Christophe</span>
<span class="com"> * This program uses the Str module that comes with OCaml standard</span>
<span class="com"> * distribution.</span>
<span class="com"> *)</span>

<span class="kwa">open</span> Printf

<span class="kwa">let</span> re <span class="sym">=</span> Str.<span class="kwd">regexp</span> <span class="sym">(</span>
  <span class="str">&quot;[^0-9(]*&quot;</span> <span class="com">(* must be preceded by non-digit *)</span>
  ^ <span class="str">&quot;</span><span class="esc">\\</span><span class="str">(([0-9][0-9][0-9])</span><span class="esc">\\</span><span class="str">|[0-9][0-9][0-9]</span><span class="esc">\\</span><span class="str">)&quot;</span> <span class="com">(* match1: area code *)</span>
  ^ <span class="str">&quot;</span> <span class="esc">\\</span><span class="str">([0-9][0-9][0-9]</span><span class="esc">\\</span><span class="str">)[ -]&quot;</span> <span class="com">(* space, prefix=3 digits, separator *)</span>
  ^ <span class="str">&quot;</span><span class="esc">\\</span><span class="str">([0-9][0-9][0-9][0-9]</span><span class="esc">\\</span><span class="str">)</span><span class="esc">\\</span><span class="str">([^0-9]</span><span class="esc">\\</span><span class="str">|$</span><span class="esc">\\</span><span class="str">)&quot;</span> <span class="com">(* 4 digits, non-digit *)</span>
<span class="sym">)</span>

<span class="com">(* Read all the lines from stdin *)</span>
<span class="kwa">let</span> phones <span class="sym">=</span>
  <span class="kwa">let</span> lines <span class="sym">=</span> ref <span class="sym">[]</span> <span class="kwa">in</span>
  <span class="kwa">try  while true do</span> lines <span class="sym">:= (</span>input_line stdin<span class="sym">) :: !</span>lines <span class="kwa">done</span><span class="sym">;</span> <span class="kwa">assert</span><span class="sym">(</span><span class="kwa">false</span><span class="sym">)</span>
  <span class="kwa">with</span> End_of_file <span class="sym">-&gt;</span> List.rev <span class="sym">!</span>lines

<span class="kwa">let</span> check_phone must_print count line <span class="sym">=</span>
  <span class="kwa">if</span> Str.string_match re line <span class="num">0</span> <span class="kwa">then</span> <span class="sym">(</span>
    <span class="kwa">let</span> area <span class="sym">=</span> Str.matched_group <span class="num">1</span> line
    <span class="kwa">and</span> prefix <span class="sym">=</span> Str.matched_group <span class="num">2</span> line
    <span class="kwa">and</span> digits <span class="sym">=</span> Str.matched_group <span class="num">3</span> line <span class="kwa">in</span>
    <span class="kwa">let</span> num <span class="sym">= (</span><span class="kwa">if</span> area.<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="str">'('</span> <span class="kwa">then</span> sprintf <span class="str">&quot;%s %s-%s&quot;</span>
	       <span class="kwa">else</span> sprintf <span class="str">&quot;(%s) %s-%s&quot;</span><span class="sym">)</span> area prefix digits <span class="kwa">in</span>
    <span class="kwa">if</span> must_print <span class="kwa">then</span> <span class="sym">(</span>incr count<span class="sym">;</span> printf <span class="str">&quot;%i: %s</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">!</span>count num<span class="sym">)</span>
  <span class="sym">)</span>

<span class="kwa">let</span> <span class="sym">() =</span>
  <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">try</span> <span class="kwd">int_of_string</span><span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">1</span> <span class="kwa">in</span>
  List.<span class="kwd">iter</span> <span class="sym">(</span>check_phone <span class="kwa">true</span> <span class="sym">(</span>ref <span class="num">0</span><span class="sym">))</span> phones<span class="sym">;</span>
  <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">2</span> <span class="kwa">to</span> n <span class="kwa">do</span> List.<span class="kwd">iter</span> <span class="sym">(</span>check_phone <span class="kwa">false</span> <span class="sym">(</span>ref <span class="num">0</span><span class="sym">))</span> phones <span class="kwa">done</span>

