#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="sym">-</span>e main <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="slc">;;; $Id: except-guile.code,v 1.5 2005-04-13 15:28:57 bfulgham Exp $
</span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span>
<span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="num">-9</span> format<span class="sym">))

(</span>define HI <span class="num">0</span><span class="sym">)
(</span>define LO <span class="num">0</span><span class="sym">)

(</span>define <span class="sym">(</span>some_fun n<span class="sym">)
  (</span>catch #t
	 <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">() (</span>hi_fun n<span class="sym">))
	 (</span><span class="kwa">lambda</span> args #f<span class="sym">)))

(</span>define <span class="sym">(</span>hi_fun n<span class="sym">)
  (</span>catch <span class="str">'Hi_Exception
	 (lambda () (lo_fun n))
	 (lambda args (set! HI (+ HI 1)))))

(define (lo_fun n)
  (catch '</span>Lo_Exception
	 <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">() (</span>blowup n<span class="sym">))
	 (</span><span class="kwa">lambda</span> args <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> LO <span class="sym">(+</span> LO <span class="num">1</span><span class="sym">)))))

(</span>define <span class="sym">(</span>blowup n<span class="sym">)
  (</span><span class="kwa">if</span> <span class="sym">(=</span> <span class="num">0</span> <span class="sym">(</span>modulo n <span class="num">2</span><span class="sym">))
      (</span>throw <span class="str">'Hi_Exception)
      (throw '</span>Lo_Exception<span class="sym">)))

(</span>define <span class="sym">(</span>main args<span class="sym">)
  (</span>let<span class="sym">* ((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">)))
    (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
	((=</span> i n<span class="sym">))
      (</span>some_fun i<span class="sym">)))
  (</span>display <span class="sym">(</span>format <span class="str">&quot;Exceptions: HI=~D / LO=~D</span><span class="esc">\n</span><span class="str">&quot;</span> HI LO<span class="sym">)))
</span>
