<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; Random implementation, by Jens Axel Sogaard</span>
<span class="slc">;;;</span>
<span class="slc">;;; Modified for proper string output by Brent Fulgham</span>

<span class="sym">(</span>module random mzscheme
  <span class="sym">(</span>provide main<span class="sym">)</span>

  <span class="sym">(</span>define IM <span class="num">139968</span><span class="sym">)</span>
  <span class="sym">(</span>define IA   <span class="num">3877</span><span class="sym">)</span>
  <span class="sym">(</span>define IC  <span class="num">29573</span><span class="sym">)</span>

  <span class="sym">(</span>define gen_random
    <span class="sym">(</span>let <span class="sym">((</span>LAST <span class="num">42</span><span class="sym">))</span>
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span><span class="kwa">max</span><span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> LAST <span class="sym">(</span>modulo <span class="sym">(+ (*</span> LAST IA<span class="sym">)</span> IC<span class="sym">)</span> IM<span class="sym">))</span>
	<span class="sym">(/ (*</span> <span class="kwa">max</span> LAST<span class="sym">)</span> IM<span class="sym">))))</span>

  <span class="slc">;;; Stupid boiler-plate for formatting floating point value</span>
  <span class="sym">(</span>define <span class="sym">(</span>roundto digits n<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ([</span>e <span class="sym">(</span><span class="kwa">expt</span> <span class="num">10</span> digits<span class="sym">)]</span>
           <span class="sym">[</span>num <span class="sym">(</span>round <span class="sym">(</span><span class="kwa">abs</span> <span class="sym">(*</span> e <span class="sym">(</span>inexact<span class="sym">-&gt;</span>exact n<span class="sym">))))]</span>
           <span class="sym">[</span>str <span class="sym">(</span>number<span class="sym">-&gt;</span>string <span class="sym">(</span>remainder num e<span class="sym">))])</span>
      <span class="sym">(</span>format <span class="str">&quot;~a~a.~a~a&quot;</span>
              <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>negative? n<span class="sym">)</span> <span class="str">&quot;-&quot;</span> <span class="str">&quot;&quot;</span><span class="sym">)</span>
              <span class="sym">(</span>quotient num e<span class="sym">)</span>
              <span class="sym">(</span>make<span class="sym">-</span>string <span class="sym">(-</span> digits <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> str<span class="sym">))</span> #\0<span class="sym">)</span>
              str<span class="sym">)))</span>

  <span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(= (</span>vector<span class="sym">-</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">0</span><span class="sym">)</span>
		 <span class="num">1</span>
		 <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref args <span class="num">0</span><span class="sym">)))))</span>
      <span class="sym">(</span>let loop <span class="sym">((</span>iter n<span class="sym">))</span>
	<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&gt;</span> iter <span class="num">1</span><span class="sym">)</span>
	    <span class="sym">(</span>begin
	      <span class="sym">(</span>gen_random <span class="num">100.0</span><span class="sym">)</span>
	      <span class="sym">(</span>loop <span class="sym">(-</span> iter <span class="num">1</span><span class="sym">)))))</span>
      <span class="sym">(</span>printf <span class="str">&quot;~a~%&quot;</span>
	      <span class="sym">(</span>roundto <span class="num">9</span> <span class="sym">(</span>gen_random <span class="num">100.0</span><span class="sym">)))))</span>

  <span class="sym">(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)))</span>
