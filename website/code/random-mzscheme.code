<span class="line">    1 </span>#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>r
<span class="line">    2 </span>
<span class="line">    3 </span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">;;; Random implementation, by Jens Axel Sogaard
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="sym">(</span>module random mzscheme
<span class="line">    7 </span>   <span class="sym">(</span>provide main<span class="sym">)
</span><span class="line">    8 </span><span class="sym"></span>   <span class="slc">; (define-constant name val) &quot;replaces&quot; all occurences
</span><span class="line">    9 </span><span class="slc"></span>   <span class="slc">; of name with val.
</span><span class="line">   10 </span><span class="slc"></span>   <span class="sym">(</span>define<span class="sym">-</span>syntax <span class="sym">(</span>define<span class="sym">-</span>constant stx<span class="sym">)
</span><span class="line">   11 </span><span class="sym">     (</span>syntax<span class="sym">-</span>case stx <span class="sym">()
</span><span class="line">   12 </span><span class="sym">       ((</span>define<span class="sym">-</span>constant id val<span class="sym">)
</span><span class="line">   13 </span><span class="sym">        (</span>syntax <span class="sym">(</span>define<span class="sym">-</span>syntax id <span class="sym">(</span>syntax<span class="sym">-</span>id<span class="sym">-</span>rules <span class="sym">() (</span>_ val<span class="sym">)))))))
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym">   (</span>define<span class="sym">-</span>constant IM <span class="num">139968</span><span class="sym">)
</span><span class="line">   16 </span><span class="sym">   (</span>define<span class="sym">-</span>constant IA   <span class="num">3877</span><span class="sym">)
</span><span class="line">   17 </span><span class="sym">   (</span>define<span class="sym">-</span>constant IC  <span class="num">29573</span><span class="sym">)
</span><span class="line">   18 </span><span class="sym">
</span><span class="line">   19 </span><span class="sym">   (</span>define gen_random
<span class="line">   20 </span>     <span class="sym">(</span>let <span class="sym">((</span>LAST <span class="num">42</span><span class="sym">))
</span><span class="line">   21 </span><span class="sym">       (</span><span class="kwa">lambda</span> <span class="sym">(</span><span class="kwa">max</span><span class="sym">)
</span><span class="line">   22 </span><span class="sym">         (</span><span class="kwa">set</span><span class="sym">!</span> LAST <span class="sym">(</span>modulo <span class="sym">(+ (*</span> LAST IA<span class="sym">)</span> IC<span class="sym">)</span> IM<span class="sym">))
</span><span class="line">   23 </span><span class="sym">         (/ (*</span> <span class="kwa">max</span> LAST<span class="sym">)</span> IM<span class="sym">))))
</span><span class="line">   24 </span><span class="sym">
</span><span class="line">   25 </span><span class="sym">   (</span>define <span class="sym">(</span>main args<span class="sym">)
</span><span class="line">   26 </span><span class="sym">     (</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(= (</span>vector<span class="sym">-</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">0</span><span class="sym">)
</span><span class="line">   27 </span><span class="sym"></span>                  <span class="num">1
</span><span class="line">   28 </span><span class="num"></span>                  <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref args <span class="num">0</span><span class="sym">)))))
</span><span class="line">   29 </span><span class="sym">       (</span>let loop <span class="sym">((</span>iter n<span class="sym">))
</span><span class="line">   30 </span><span class="sym">         (</span><span class="kwa">if</span> <span class="sym">(&gt;</span> iter <span class="num">1</span><span class="sym">)
</span><span class="line">   31 </span><span class="sym">             (</span>begin
<span class="line">   32 </span>               <span class="sym">(</span>gen_random <span class="num">100.0</span><span class="sym">)
</span><span class="line">   33 </span><span class="sym">               (</span>loop <span class="sym">(-</span> iter <span class="num">1</span><span class="sym">)))))
</span><span class="line">   34 </span><span class="sym">       (</span>display <span class="sym">(</span>gen_random <span class="num">100.0</span><span class="sym">))
</span><span class="line">   35 </span><span class="sym">       (</span>newline<span class="sym">))))
</span><span class="line">   36 </span><span class="sym">
</span><span class="line">   37 </span><span class="sym">(</span>require random<span class="sym">)
</span><span class="line">   38 </span><span class="sym">(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))
</span><span class="line">   39 </span><span class="sym"></span>
