<span class="line">    1 </span><span class="slc">%%% $Id: prodcons-oz.code,v 1.4 2004-11-13 07:42:28 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">%%% http://dada.perl.it/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">%%%
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">%%% contributed by Isaac Gouy
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="slc">%%  Section 11.5 of the Oz Tutorial provides these
</span><span class="line">    7 </span><span class="slc"></span><span class="slc">%%  implementations of Event and UnitBufferM and states:
</span><span class="line">    8 </span><span class="slc"></span><span class="slc">%%  in Oz, it is very rare to write programs in the
</span><span class="line">    9 </span><span class="slc"></span><span class="slc">%%  (traditional) monitor style shown above. In general
</span><span class="line">   10 </span><span class="slc"></span><span class="slc">%%  it is very awkward.
</span><span class="line">   11 </span><span class="slc"></span><span class="slc">%%
</span><span class="line">   12 </span><span class="slc"></span><span class="slc">%%  There's an extensive treatment of Oz concurrency in
</span><span class="line">   13 </span><span class="slc"></span><span class="slc">%%  the book 'Concepts, Techniques, and Models of Computer
</span><span class="line">   14 </span><span class="slc"></span><span class="slc">%%  Programming' - find it online with google.
</span><span class="line">   15 </span><span class="slc"></span><span class="slc">%%
</span><span class="line">   16 </span><span class="slc"></span><span class="slc">%%  Usage: start from command line with
</span><span class="line">   17 </span><span class="slc"></span><span class="slc">%%     ozc -x prodcons.oz -o prodcons.oz.exe
</span><span class="line">   18 </span><span class="slc"></span><span class="slc">%%     prodcons.oz.exe 100000
</span><span class="line">   19 </span><span class="slc"></span>
<span class="line">   20 </span><span class="kwa">functor
</span><span class="line">   21 </span><span class="kwa">import</span> System Application
<span class="line">   22 </span>
<span class="line">   23 </span><span class="kwb">define
</span><span class="line">   24 </span><span class="kwb">
</span><span class="line">   25 </span><span class="kwb"></span>Produced
<span class="line">   26 </span>Consumed
<span class="line">   27 </span>
<span class="line">   28 </span><span class="kwa">class</span> Event <span class="kwb">from</span> BaseObject
<span class="line">   29 </span>   <span class="kwa">prop</span> locking
<span class="line">   30 </span>   <span class="kwa">attr</span> f r
<span class="line">   31 </span>   <span class="kwb">meth</span> init
<span class="line">   32 </span>      X <span class="kwb">in</span> f <span class="sym">&lt;-</span> X r <span class="sym">&lt;-</span> X
<span class="line">   33 </span>   <span class="kwb">end
</span><span class="line">   34 </span><span class="kwb">   meth</span> put<span class="sym">(</span>I<span class="sym">)
</span><span class="line">   35 </span><span class="sym"></span>      X <span class="kwb">in lock</span> &#64;r<span class="sym">=</span>I<span class="sym">|</span>X r<span class="sym">&lt;-</span>X <span class="kwb">end
</span><span class="line">   36 </span><span class="kwb">   end
</span><span class="line">   37 </span><span class="kwb">   meth</span> get<span class="sym">(</span>?I<span class="sym">)
</span><span class="line">   38 </span><span class="sym"></span>      X <span class="kwb">in lock</span> &#64;f<span class="sym">=</span>I<span class="sym">|</span>X f<span class="sym">&lt;-</span>X <span class="kwb">end</span> <span class="sym">{</span>Wait I<span class="sym">}
</span><span class="line">   39 </span><span class="sym"></span>   <span class="kwb">end
</span><span class="line">   40 </span><span class="kwb">   meth</span> wait
<span class="line">   41 </span>      <span class="sym">{</span>self get<span class="sym">(</span>_<span class="sym">)}
</span><span class="line">   42 </span><span class="sym"></span>   <span class="kwb">end
</span><span class="line">   43 </span><span class="kwb">   meth</span> notify
<span class="line">   44 </span>      <span class="sym">{</span>self put<span class="sym">(</span>unit<span class="sym">)}
</span><span class="line">   45 </span><span class="sym"></span>   <span class="kwb">end
</span><span class="line">   46 </span><span class="kwb">end
</span><span class="line">   47 </span><span class="kwb">
</span><span class="line">   48 </span><span class="kwb">
</span><span class="line">   49 </span><span class="kwb"></span><span class="kwa">class</span> UnitBufferM
<span class="line">   50 </span>   <span class="kwa">attr</span> item empty psignal csignal
<span class="line">   51 </span>   <span class="kwa">prop</span> locking
<span class="line">   52 </span>   <span class="kwb">meth</span> init
<span class="line">   53 </span>      empty <span class="sym">&lt;-</span> true
<span class="line">   54 </span>      psignal <span class="sym">&lt;- {</span>New Event init<span class="sym">}
</span><span class="line">   55 </span><span class="sym"></span>      csignal <span class="sym">&lt;- {</span>New Event init<span class="sym">}
</span><span class="line">   56 </span><span class="sym"></span>   <span class="kwb">end
</span><span class="line">   57 </span><span class="kwb">   meth</span> put<span class="sym">(</span>I<span class="sym">)
</span><span class="line">   58 </span><span class="sym"></span>      X <span class="kwb">in
</span><span class="line">   59 </span><span class="kwb">      lock
</span><span class="line">   60 </span><span class="kwb">         if</span> &#64;empty <span class="kwb">then
</span><span class="line">   61 </span><span class="kwb"></span>            item <span class="sym">&lt;-</span> I
<span class="line">   62 </span>            empty <span class="sym">&lt;-</span> false
<span class="line">   63 </span>            X <span class="sym">=</span> yes
<span class="line">   64 </span>            <span class="sym">{</span>&#64;csignal notify<span class="sym">}
</span><span class="line">   65 </span><span class="sym"></span>         <span class="kwb">else</span> X <span class="sym">=</span> no <span class="kwb">end
</span><span class="line">   66 </span><span class="kwb">      end
</span><span class="line">   67 </span><span class="kwb">      if</span> X <span class="sym">==</span> no <span class="kwb">then
</span><span class="line">   68 </span><span class="kwb"></span>         <span class="sym">{</span>&#64;psignal wait<span class="sym">}
</span><span class="line">   69 </span><span class="sym">         {</span>self put<span class="sym">(</span>I<span class="sym">)}
</span><span class="line">   70 </span><span class="sym"></span>      <span class="kwb">end
</span><span class="line">   71 </span><span class="kwb">   end
</span><span class="line">   72 </span><span class="kwb">   meth</span> get<span class="sym">(</span>I<span class="sym">)
</span><span class="line">   73 </span><span class="sym"></span>      X <span class="kwb">in
</span><span class="line">   74 </span><span class="kwb">      lock
</span><span class="line">   75 </span><span class="kwb">         if</span> <span class="sym">{</span>Not &#64;empty<span class="sym">}</span> <span class="kwb">then
</span><span class="line">   76 </span><span class="kwb"></span>            I <span class="sym">=</span> &#64;item
<span class="line">   77 </span>            empty <span class="sym">&lt;-</span> true
<span class="line">   78 </span>            <span class="sym">{</span>&#64;psignal notify<span class="sym">}
</span><span class="line">   79 </span><span class="sym"></span>            X <span class="sym">=</span> yes
<span class="line">   80 </span>         <span class="kwb">else</span> X <span class="sym">=</span> no <span class="kwb">end
</span><span class="line">   81 </span><span class="kwb">      end
</span><span class="line">   82 </span><span class="kwb">      if</span> X <span class="sym">==</span> no <span class="kwb">then
</span><span class="line">   83 </span><span class="kwb"></span>         <span class="sym">{</span>&#64;csignal wait<span class="sym">}
</span><span class="line">   84 </span><span class="sym">         {</span>self get<span class="sym">(</span>I<span class="sym">)}
</span><span class="line">   85 </span><span class="sym"></span>      <span class="kwb">end
</span><span class="line">   86 </span><span class="kwb">   end
</span><span class="line">   87 </span><span class="kwb">end
</span><span class="line">   88 </span><span class="kwb">
</span><span class="line">   89 </span><span class="kwb">
</span><span class="line">   90 </span><span class="kwb">proc</span> <span class="sym">{</span>Producer N I B<span class="sym">}
</span><span class="line">   91 </span><span class="sym"></span>   <span class="kwb">if</span> N <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwb">then
</span><span class="line">   92 </span><span class="kwb"></span>      <span class="sym">{</span>B put<span class="sym">(</span>I<span class="sym">)}
</span><span class="line">   93 </span><span class="sym"></span>      <span class="slc">%% {System.showInfo 'Produced '#I} %% just to check synchronization
</span><span class="line">   94 </span><span class="slc"></span>      <span class="sym">{</span>Producer N<span class="num">-1</span> I<span class="sym">+</span><span class="num">1</span> B<span class="sym">}
</span><span class="line">   95 </span><span class="sym"></span>   <span class="kwb">else</span> Produced <span class="sym">= {</span>NewCell I<span class="sym">}</span> <span class="kwb">end
</span><span class="line">   96 </span><span class="kwb">end
</span><span class="line">   97 </span><span class="kwb">
</span><span class="line">   98 </span><span class="kwb">
</span><span class="line">   99 </span><span class="kwb">proc</span> <span class="sym">{</span>Consumer N I B<span class="sym">}
</span><span class="line">  100 </span><span class="sym"></span>   <span class="kwb">if</span> N <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwb">then
</span><span class="line">  101 </span><span class="kwb"></span>      <span class="sym">{</span>B get<span class="sym">(</span>I<span class="sym">)}
</span><span class="line">  102 </span><span class="sym"></span>      <span class="slc">%% {System.showInfo 'Consumed '#I} %% just to check synchronization
</span><span class="line">  103 </span><span class="slc"></span>      <span class="sym">{</span>Consumer N<span class="num">-1</span> I<span class="sym">+</span><span class="num">1</span> B<span class="sym">}
</span><span class="line">  104 </span><span class="sym"></span>   <span class="kwb">else</span> Consumed <span class="sym">= {</span>NewCell I<span class="sym">}</span> <span class="kwb">end
</span><span class="line">  105 </span><span class="kwb">end
</span><span class="line">  106 </span><span class="kwb">
</span><span class="line">  107 </span><span class="kwb">
</span><span class="line">  108 </span><span class="kwb">in
</span><span class="line">  109 </span><span class="kwb"></span>   <span class="kwa">local</span> Args N UB <span class="kwb">in
</span><span class="line">  110 </span><span class="kwb"></span>      <span class="sym">[</span>Args<span class="sym">] = {</span>Application.getArgs plain<span class="sym">}
</span><span class="line">  111 </span><span class="sym"></span>      N <span class="sym">= {</span>String.toInt Args<span class="sym">}
</span><span class="line">  112 </span><span class="sym">
</span><span class="line">  113 </span><span class="sym"></span>      UB <span class="sym">= {</span>New UnitBufferM init<span class="sym">}
</span><span class="line">  114 </span><span class="sym"></span>      <span class="kwb">thread</span> <span class="sym">{</span>Producer N <span class="num">0</span> UB<span class="sym">}</span> <span class="kwb">end
</span><span class="line">  115 </span><span class="kwb">      thread</span> <span class="sym">{</span>Consumer N <span class="num">0</span> UB<span class="sym">}</span> <span class="kwb">end
</span><span class="line">  116 </span><span class="kwb">
</span><span class="line">  117 </span><span class="kwb"></span>         <span class="slc">%% Oz is a dataflow language.
</span><span class="line">  118 </span><span class="slc"></span>         <span class="slc">%% The main thread will wait until logic variables
</span><span class="line">  119 </span><span class="slc"></span>         <span class="slc">%% Produced and Consumed have been given values
</span><span class="line">  120 </span><span class="slc"></span>      <span class="sym">{</span>System.showInfo <span class="sym">{</span>Access Produced<span class="sym">}</span>#<span class="str">' '</span>#<span class="sym">{</span>Access Consumed<span class="sym">}}
</span><span class="line">  121 </span><span class="sym"></span>   <span class="kwb">end
</span><span class="line">  122 </span><span class="kwb"></span>   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}
</span><span class="line">  123 </span><span class="sym"></span><span class="kwb">end
</span><span class="line">  124 </span><span class="kwb">
</span><span class="line">  125 </span><span class="kwb"></span>
