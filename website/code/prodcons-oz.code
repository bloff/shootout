<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">%%% $Id: prodcons-oz.code,v 1.2 2004-11-08 08:15:18 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">%%% http://dada.perl.it/shootout/
</FONT></I><I><FONT COLOR="#B22222">%%%
</FONT></I><I><FONT COLOR="#B22222">%%% contributed by Isaac Gouy
</FONT></I>
<I><FONT COLOR="#B22222">%%  Section 11.5 of the Oz Tutorial provides these
</FONT></I><I><FONT COLOR="#B22222">%%  implementations of Event and UnitBufferM and states:
</FONT></I><I><FONT COLOR="#B22222">%%  in Oz, it is very rare to write programs in the 
</FONT></I><I><FONT COLOR="#B22222">%%  (traditional) monitor style shown above. In general
</FONT></I><I><FONT COLOR="#B22222">%%  it is very awkward.
</FONT></I><I><FONT COLOR="#B22222">%%
</FONT></I><I><FONT COLOR="#B22222">%%  There's an extensive treatment of Oz concurrency in 
</FONT></I><I><FONT COLOR="#B22222">%%  the book 'Concepts, Techniques, and Models of Computer 
</FONT></I><I><FONT COLOR="#B22222">%%  Programming' - find it online with google.
</FONT></I><I><FONT COLOR="#B22222">%%
</FONT></I><I><FONT COLOR="#B22222">%%  Usage: start from command line with
</FONT></I><I><FONT COLOR="#B22222">%%     ozc -x prodcons.oz -o prodcons.oz.exe
</FONT></I><I><FONT COLOR="#B22222">%%     prodcons.oz.exe 100000
</FONT></I>
<B><FONT COLOR="#228B22">functor</FONT></B>
<B><FONT COLOR="#5F9EA0">import</FONT></B> System Application

<B><FONT COLOR="#A020F0">define</FONT></B>

Produced
Consumed

<B><FONT COLOR="#228B22">class</FONT></B> Event <B><FONT COLOR="#A020F0">from</FONT></B> BaseObject 
   <B><FONT COLOR="#228B22">prop</FONT></B> locking
   <B><FONT COLOR="#228B22">attr</FONT></B> f r
   <B><FONT COLOR="#A020F0">meth</FONT></B> init 
      X <B><FONT COLOR="#A020F0">in</FONT></B> f <B><FONT COLOR="#5F9EA0">&lt;-</FONT></B> X r <B><FONT COLOR="#5F9EA0">&lt;-</FONT></B> X
   <B><FONT COLOR="#A020F0">end</FONT></B> 
   <B><FONT COLOR="#A020F0">meth</FONT></B> put(I)
      X <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">lock</FONT></B> @r<B><FONT COLOR="#5F9EA0">=</FONT></B>I<B><FONT COLOR="#5F9EA0">|</FONT></B>X r<B><FONT COLOR="#5F9EA0">&lt;-</FONT></B>X <B><FONT COLOR="#A020F0">end</FONT></B> 
   <B><FONT COLOR="#A020F0">end</FONT></B> 
   <B><FONT COLOR="#A020F0">meth</FONT></B> get(?I)
      X <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">lock</FONT></B> @f<B><FONT COLOR="#5F9EA0">=</FONT></B>I<B><FONT COLOR="#5F9EA0">|</FONT></B>X f<B><FONT COLOR="#5F9EA0">&lt;-</FONT></B>X <B><FONT COLOR="#A020F0">end</FONT></B> {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Wait</FONT></I></B></FONT></B> I}
   <B><FONT COLOR="#A020F0">end</FONT></B>
   <B><FONT COLOR="#A020F0">meth</FONT></B> wait 
      {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">self</FONT></I></B></FONT></B> get(_)}
   <B><FONT COLOR="#A020F0">end</FONT></B> 
   <B><FONT COLOR="#A020F0">meth</FONT></B> notify 
      {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">self</FONT></I></B></FONT></B> put(unit)}
   <B><FONT COLOR="#A020F0">end</FONT></B>    
<B><FONT COLOR="#A020F0">end</FONT></B>


<B><FONT COLOR="#228B22">class</FONT></B> UnitBufferM 
   <B><FONT COLOR="#228B22">attr</FONT></B> item empty psignal csignal
   <B><FONT COLOR="#228B22">prop</FONT></B> locking
   <B><FONT COLOR="#A020F0">meth</FONT></B> init 
      empty <B><FONT COLOR="#5F9EA0">&lt;-</FONT></B> true 
      psignal <B><FONT COLOR="#5F9EA0">&lt;-</FONT></B> {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">New</FONT></I></B></FONT></B> Event init}
      csignal <B><FONT COLOR="#5F9EA0">&lt;-</FONT></B> {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">New</FONT></I></B></FONT></B> Event init}
   <B><FONT COLOR="#A020F0">end</FONT></B> 
   <B><FONT COLOR="#A020F0">meth</FONT></B> put(I)
      X <B><FONT COLOR="#A020F0">in</FONT></B> 
      <B><FONT COLOR="#A020F0">lock</FONT></B> 
         <B><FONT COLOR="#A020F0">if</FONT></B> @empty <B><FONT COLOR="#A020F0">then</FONT></B> 
            item <B><FONT COLOR="#5F9EA0">&lt;-</FONT></B> I
            empty <B><FONT COLOR="#5F9EA0">&lt;-</FONT></B> false 
            X <B><FONT COLOR="#5F9EA0">=</FONT></B> yes
            {@csignal notify}
         <B><FONT COLOR="#A020F0">else</FONT></B> X <B><FONT COLOR="#5F9EA0">=</FONT></B> no <B><FONT COLOR="#A020F0">end</FONT></B> 
      <B><FONT COLOR="#A020F0">end</FONT></B> 
      <B><FONT COLOR="#A020F0">if</FONT></B> X <B><FONT COLOR="#5F9EA0">==</FONT></B> no <B><FONT COLOR="#A020F0">then</FONT></B> 
         {@psignal wait}
         {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">self</FONT></I></B></FONT></B> put(I)}
      <B><FONT COLOR="#A020F0">end</FONT></B> 
   <B><FONT COLOR="#A020F0">end</FONT></B> 
   <B><FONT COLOR="#A020F0">meth</FONT></B> get(I)
      X <B><FONT COLOR="#A020F0">in</FONT></B> 
      <B><FONT COLOR="#A020F0">lock</FONT></B> 
         <B><FONT COLOR="#A020F0">if</FONT></B> {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Not</FONT></I></B></FONT></B> @empty} <B><FONT COLOR="#A020F0">then</FONT></B> 
            I <B><FONT COLOR="#5F9EA0">=</FONT></B> @item
            empty <B><FONT COLOR="#5F9EA0">&lt;-</FONT></B> true 
            {@psignal notify}
            X <B><FONT COLOR="#5F9EA0">=</FONT></B> yes
         <B><FONT COLOR="#A020F0">else</FONT></B> X <B><FONT COLOR="#5F9EA0">=</FONT></B> no <B><FONT COLOR="#A020F0">end</FONT></B> 
      <B><FONT COLOR="#A020F0">end</FONT></B> 
      <B><FONT COLOR="#A020F0">if</FONT></B> X <B><FONT COLOR="#5F9EA0">==</FONT></B> no <B><FONT COLOR="#A020F0">then</FONT></B> 
         {@csignal wait}
         {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">self</FONT></I></B></FONT></B> get(I)}
      <B><FONT COLOR="#A020F0">end</FONT></B> 
   <B><FONT COLOR="#A020F0">end</FONT></B> 
<B><FONT COLOR="#A020F0">end</FONT></B>


<B><FONT COLOR="#A020F0">proc</FONT></B> {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Producer</FONT></I></B></FONT></B> N I B}
   <B><FONT COLOR="#A020F0">if</FONT></B> N &gt; 0 <B><FONT COLOR="#A020F0">then</FONT></B>
      {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">B</FONT></I></B></FONT></B> put(I)}
      <I><FONT COLOR="#B22222">%% {System.showInfo 'Produced '#I} %% just to check synchronization
</FONT></I>      {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Producer</FONT></I></B></FONT></B> N-1 I+1 B}
   <B><FONT COLOR="#A020F0">else</FONT></B> Produced <B><FONT COLOR="#5F9EA0">=</FONT></B> {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">NewCell</FONT></I></B></FONT></B> I} <B><FONT COLOR="#A020F0">end</FONT></B>
<B><FONT COLOR="#A020F0">end</FONT></B> 


<B><FONT COLOR="#A020F0">proc</FONT></B> {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Consumer</FONT></I></B></FONT></B> N I B}
   <B><FONT COLOR="#A020F0">if</FONT></B> N &gt; 0 <B><FONT COLOR="#A020F0">then</FONT></B>
      {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">B</FONT></I></B></FONT></B> get(I)}
      <I><FONT COLOR="#B22222">%% {System.showInfo 'Consumed '#I} %% just to check synchronization
</FONT></I>      {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Consumer</FONT></I></B></FONT></B> N-1 I+1 B}
   <B><FONT COLOR="#A020F0">else</FONT></B> Consumed <B><FONT COLOR="#5F9EA0">=</FONT></B> {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">NewCell</FONT></I></B></FONT></B> I} <B><FONT COLOR="#A020F0">end</FONT></B>
<B><FONT COLOR="#A020F0">end</FONT></B> 


<B><FONT COLOR="#A020F0">in</FONT></B>
   <B><FONT COLOR="#5F9EA0">local</FONT></B> Args N UB <B><FONT COLOR="#A020F0">in</FONT></B>
      [Args] <B><FONT COLOR="#5F9EA0">=</FONT></B> {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Application</FONT></I></B></FONT></B>.getArgs plain}
      N <B><FONT COLOR="#5F9EA0">=</FONT></B> {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">String</FONT></I></B></FONT></B>.toInt Args}

      UB <B><FONT COLOR="#5F9EA0">=</FONT></B> {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">New</FONT></I></B></FONT></B> UnitBufferM init}
      <B><FONT COLOR="#A020F0">thread</FONT></B> {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Producer</FONT></I></B></FONT></B> N 0 UB} <B><FONT COLOR="#A020F0">end</FONT></B>
      <B><FONT COLOR="#A020F0">thread</FONT></B> {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Consumer</FONT></I></B></FONT></B> N 0 UB} <B><FONT COLOR="#A020F0">end</FONT></B>

         <I><FONT COLOR="#B22222">%% Oz is a dataflow language.
</FONT></I>         <I><FONT COLOR="#B22222">%% The main thread will wait until logic variables  
</FONT></I>         <I><FONT COLOR="#B22222">%% Produced and Consumed have been given values
</FONT></I>      {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">System</FONT></I></B></FONT></B>.showInfo {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Access</FONT></I></B></FONT></B> Produced}#<B><FONT COLOR="#BC8F8F">' '</FONT></B>#{<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Access</FONT></I></B></FONT></B> Consumed}}
   <B><FONT COLOR="#A020F0">end</FONT></B>
   {<B><FONT COLOR="#0000FF"><B><I><FONT COLOR="#000000">Application</FONT></I></B></FONT></B>.exit 0}
<B><FONT COLOR="#A020F0">end</FONT></B>

</pre></td></tr></table>
