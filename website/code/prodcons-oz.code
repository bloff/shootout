<span class="slc">%%% $Id: prodcons-oz.code,v 1.5 2006-02-10 07:03:47 bfulgham Exp $</span>
<span class="slc">%%% http://dada.perl.it/shootout/</span>
<span class="slc">%%%</span>
<span class="slc">%%% contributed by Isaac Gouy</span>

<span class="slc">%%  Section 11.5 of the Oz Tutorial provides these</span>
<span class="slc">%%  implementations of Event and UnitBufferM and states:</span>
<span class="slc">%%  in Oz, it is very rare to write programs in the</span>
<span class="slc">%%  (traditional) monitor style shown above. In general</span>
<span class="slc">%%  it is very awkward.</span>
<span class="slc">%%</span>
<span class="slc">%%  There's an extensive treatment of Oz concurrency in</span>
<span class="slc">%%  the book 'Concepts, Techniques, and Models of Computer</span>
<span class="slc">%%  Programming' - find it online with google.</span>
<span class="slc">%%</span>
<span class="slc">%%  Usage: start from command line with</span>
<span class="slc">%%     ozc -x prodcons.oz -o prodcons.oz.exe</span>
<span class="slc">%%     prodcons.oz.exe 100000</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> System Application

<span class="kwb">define</span>

Produced
Consumed

<span class="kwa">class</span> Event <span class="kwb">from</span> BaseObject
   <span class="kwa">prop</span> locking
   <span class="kwa">attr</span> f r
   <span class="kwb">meth</span> init
      X <span class="kwb">in</span> f <span class="sym">&lt;-</span> X r <span class="sym">&lt;-</span> X
   <span class="kwb">end</span>
   <span class="kwb">meth</span> put<span class="sym">(</span>I<span class="sym">)</span>
      X <span class="kwb">in lock</span> &#64;r<span class="sym">=</span>I<span class="sym">|</span>X r<span class="sym">&lt;-</span>X <span class="kwb">end</span>
   <span class="kwb">end</span>
   <span class="kwb">meth</span> get<span class="sym">(</span>?I<span class="sym">)</span>
      X <span class="kwb">in lock</span> &#64;f<span class="sym">=</span>I<span class="sym">|</span>X f<span class="sym">&lt;-</span>X <span class="kwb">end</span> <span class="sym">{</span>Wait I<span class="sym">}</span>
   <span class="kwb">end</span>
   <span class="kwb">meth</span> wait
      <span class="sym">{</span>self get<span class="sym">(</span>_<span class="sym">)}</span>
   <span class="kwb">end</span>
   <span class="kwb">meth</span> notify
      <span class="sym">{</span>self put<span class="sym">(</span>unit<span class="sym">)}</span>
   <span class="kwb">end</span>
<span class="kwb">end</span>


<span class="kwa">class</span> UnitBufferM
   <span class="kwa">attr</span> item empty psignal csignal
   <span class="kwa">prop</span> locking
   <span class="kwb">meth</span> init
      empty <span class="sym">&lt;-</span> true
      psignal <span class="sym">&lt;- {</span>New Event init<span class="sym">}</span>
      csignal <span class="sym">&lt;- {</span>New Event init<span class="sym">}</span>
   <span class="kwb">end</span>
   <span class="kwb">meth</span> put<span class="sym">(</span>I<span class="sym">)</span>
      X <span class="kwb">in</span>
      <span class="kwb">lock</span>
         <span class="kwb">if</span> &#64;empty <span class="kwb">then</span>
            item <span class="sym">&lt;-</span> I
            empty <span class="sym">&lt;-</span> false
            X <span class="sym">=</span> yes
            <span class="sym">{</span>&#64;csignal notify<span class="sym">}</span>
         <span class="kwb">else</span> X <span class="sym">=</span> no <span class="kwb">end</span>
      <span class="kwb">end</span>
      <span class="kwb">if</span> X <span class="sym">==</span> no <span class="kwb">then</span>
         <span class="sym">{</span>&#64;psignal wait<span class="sym">}</span>
         <span class="sym">{</span>self put<span class="sym">(</span>I<span class="sym">)}</span>
      <span class="kwb">end</span>
   <span class="kwb">end</span>
   <span class="kwb">meth</span> get<span class="sym">(</span>I<span class="sym">)</span>
      X <span class="kwb">in</span>
      <span class="kwb">lock</span>
         <span class="kwb">if</span> <span class="sym">{</span>Not &#64;empty<span class="sym">}</span> <span class="kwb">then</span>
            I <span class="sym">=</span> &#64;item
            empty <span class="sym">&lt;-</span> true
            <span class="sym">{</span>&#64;psignal notify<span class="sym">}</span>
            X <span class="sym">=</span> yes
         <span class="kwb">else</span> X <span class="sym">=</span> no <span class="kwb">end</span>
      <span class="kwb">end</span>
      <span class="kwb">if</span> X <span class="sym">==</span> no <span class="kwb">then</span>
         <span class="sym">{</span>&#64;csignal wait<span class="sym">}</span>
         <span class="sym">{</span>self get<span class="sym">(</span>I<span class="sym">)}</span>
      <span class="kwb">end</span>
   <span class="kwb">end</span>
<span class="kwb">end</span>


<span class="kwb">proc</span> <span class="sym">{</span>Producer N I B<span class="sym">}</span>
   <span class="kwb">if</span> N <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwb">then</span>
      <span class="sym">{</span>B put<span class="sym">(</span>I<span class="sym">)}</span>
      <span class="slc">%% {System.showInfo 'Produced '#I} %% just to check synchronization</span>
      <span class="sym">{</span>Producer N<span class="sym">-</span><span class="num">1</span> I<span class="sym">+</span><span class="num">1</span> B<span class="sym">}</span>
   <span class="kwb">else</span> Produced <span class="sym">= {</span>NewCell I<span class="sym">}</span> <span class="kwb">end</span>
<span class="kwb">end</span>


<span class="kwb">proc</span> <span class="sym">{</span>Consumer N I B<span class="sym">}</span>
   <span class="kwb">if</span> N <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwb">then</span>
      <span class="sym">{</span>B get<span class="sym">(</span>I<span class="sym">)}</span>
      <span class="slc">%% {System.showInfo 'Consumed '#I} %% just to check synchronization</span>
      <span class="sym">{</span>Consumer N<span class="sym">-</span><span class="num">1</span> I<span class="sym">+</span><span class="num">1</span> B<span class="sym">}</span>
   <span class="kwb">else</span> Consumed <span class="sym">= {</span>NewCell I<span class="sym">}</span> <span class="kwb">end</span>
<span class="kwb">end</span>


<span class="kwb">in</span>
   <span class="kwa">local</span> Args N UB <span class="kwb">in</span>
      <span class="sym">[</span>Args<span class="sym">] = {</span>Application.getArgs plain<span class="sym">}</span>
      N <span class="sym">= {</span>String.toInt Args<span class="sym">}</span>

      UB <span class="sym">= {</span>New UnitBufferM init<span class="sym">}</span>
      <span class="kwb">thread</span> <span class="sym">{</span>Producer N <span class="num">0</span> UB<span class="sym">}</span> <span class="kwb">end</span>
      <span class="kwb">thread</span> <span class="sym">{</span>Consumer N <span class="num">0</span> UB<span class="sym">}</span> <span class="kwb">end</span>

         <span class="slc">%% Oz is a dataflow language.</span>
         <span class="slc">%% The main thread will wait until logic variables</span>
         <span class="slc">%% Produced and Consumed have been given values</span>
      <span class="sym">{</span>System.showInfo <span class="sym">{</span>Access Produced<span class="sym">}</span>#<span class="str">' '</span>#<span class="sym">{</span>Access Consumed<span class="sym">}}</span>
   <span class="kwb">end</span>
   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>


