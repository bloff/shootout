<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy (Scala novice)</span>
<span class="com">*/</span>

<span class="kwa">import</span> scala<span class="sym">.</span>collection<span class="sym">.</span>mutable<span class="sym">.</span><span class="kwc">HashMap</span><span class="sym">;</span>

<span class="kwa">object</span> hash <span class="sym">{</span>
   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> n <span class="sym">=</span> toPositiveInt<span class="sym">(</span>args<span class="sym">);</span>
      <span class="kwa">var</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
      <span class="kwa">val</span> table <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">HashMap</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">,</span>Int<span class="sym">]();</span>

      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> <span class="kwc">Iterator</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">))</span>
         table <span class="sym">+=</span> <span class="kwc">Integer</span><span class="sym">.</span>toString<span class="sym">(</span>i<span class="sym">,</span> <span class="num">16</span><span class="sym">) -&gt;</span> i<span class="sym">;</span>

      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> <span class="kwc">Iterator</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">1</span><span class="sym">,</span>n<span class="sym">+</span><span class="num">1</span><span class="sym">))</span>
         <span class="kwa">if</span> <span class="sym">(</span>table contains <span class="kwc">Integer</span><span class="sym">.</span>toString<span class="sym">(</span>i<span class="sym">,</span> <span class="num">10</span><span class="sym">))</span>
            count <span class="sym">=</span> count <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>

      Console println<span class="sym">(</span>count<span class="sym">);</span>
   <span class="sym">}</span>


   <span class="kwa">private def</span> toPositiveInt<span class="sym">(</span>s<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> i <span class="sym">=</span>
        <span class="kwa">try</span> <span class="sym">{</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>s<span class="sym">(</span><span class="num">0</span><span class="sym">)); }</span>
        <span class="kwa">catch</span> <span class="sym">{</span> <span class="kwa">case</span> e<span class="sym">:</span> <span class="kwc">Exception</span> <span class="sym">=&gt;</span> <span class="num">1</span> <span class="sym">}</span>

      <span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">)</span> i<span class="sym">;</span> <span class="kwa">else</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>

<span class="sym">}</span>



