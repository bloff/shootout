<span class="slc"># The Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc"># contributed by Charles Evans 1-1-2006</span>
<span class="slc"># based on revcomp.py by Jacob Lee, Steven Bethard, et al</span>

<span class="kwa">procedure</span> main<span class="sym">()</span>
 l<span class="sym">:=[]</span>
 <span class="kwa">while</span> line<span class="sym">:=</span>read<span class="sym">()</span> <span class="kwa">do</span>
      <span class="kwa">if</span> line<span class="sym">[</span><span class="num">1</span><span class="sym">] == !</span><span class="str">&quot;&gt;;&quot;</span> <span class="kwa">then</span> <span class="sym">{</span>
		wrap<span class="sym">(</span>reverse<span class="sym">(</span>poppend<span class="sym">(</span>l<span class="sym">)),</span><span class="num">60</span><span class="sym">)</span>
		write<span class="sym">(</span>line<span class="sym">)</span>
	<span class="sym">}</span>
      <span class="kwa">else</span>
  	  put<span class="sym">(</span>l<span class="sym">,</span>map<span class="sym">(</span>line<span class="sym">,</span><span class="str">&quot;ACBDGHKMNSRUTWVYacbdghkmnsrutwvy&quot;</span><span class="sym">,</span><span class="str">&quot;TGVHCDMKNSYAAWBRTGVHCDMKNSYAAWBR&quot;</span><span class="sym">))</span>
 wrap<span class="sym">(</span>reverse<span class="sym">(</span>poppend<span class="sym">(</span>l<span class="sym">)),</span><span class="num">60</span><span class="sym">)</span>
<span class="slc"># write(&amp;errout, &amp;time)</span>
<span class="slc"># every write(&amp;errout, &amp;collections)</span>
<span class="kwa">end</span>

<span class="kwa">procedure</span> wrap<span class="sym">(</span>s<span class="sym">,</span>width<span class="sym">)</span>
 s ? <span class="kwa">while</span> write<span class="sym">(</span> move<span class="sym">(</span>width<span class="sym">)) |</span> <span class="kwa">return</span> pos<span class="sym">(</span><span class="num">0</span><span class="sym">)|</span> write<span class="sym">(</span>tab<span class="sym">(</span><span class="num">0</span><span class="sym">))</span>
<span class="kwa">end</span>

<span class="kwa">procedure</span> poppend<span class="sym">(</span>l<span class="sym">)</span>
 <span class="kwa">local</span> st
 st<span class="sym">:=</span><span class="str">&quot;&quot;</span><span class="sym">; *</span>l<span class="sym">&gt;</span><span class="num">0</span> <span class="sym">|</span> <span class="kwa">fail</span>
 <span class="kwa">while</span> st<span class="sym">||:=</span>pop<span class="sym">(</span>l<span class="sym">) |</span> <span class="kwa">return</span> st
<span class="kwa">end</span>
