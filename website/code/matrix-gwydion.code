<span class="line">    1 </span><span class="kwb">module</span><span class="sym">:</span>     matrix
<span class="line">    2 </span><span class="kwb">synopsis</span><span class="sym">:</span>   implementation of <span class="str">&quot;Matrix Multiplication&quot;</span> benchmark
<span class="line">    3 </span><span class="kwb">author</span><span class="sym">:</span>     Peter Hinely
<span class="line">    4 </span><span class="kwb">copyright</span><span class="sym">:</span>  public <span class="kwa">domain
</span><span class="line">    5 </span><span class="kwa">
</span><span class="line">    6 </span><span class="kwa">
</span><span class="line">    7 </span><span class="kwa">define constant</span> <span class="kwa">&lt;vector-of-integers&gt;</span> <span class="sym">=</span> limited<span class="sym">(</span><span class="kwa">&lt;simple-vector&gt;</span><span class="sym">,</span> of<span class="sym">:</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">);
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym"></span><span class="kwa">define class</span> <span class="kwa">&lt;matrix&gt;</span> <span class="sym">(</span><span class="kwa">&lt;object&gt;</span><span class="sym">)
</span><span class="line">   10 </span><span class="sym"></span>  <span class="kwa">slot</span> rows <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> rows<span class="sym">:;
</span><span class="line">   11 </span><span class="sym"></span>  <span class="kwa">slot</span> columns <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> columns<span class="sym">:;
</span><span class="line">   12 </span><span class="sym"></span>  <span class="kwa">slot</span> elements <span class="sym">::</span> <span class="kwa">&lt;vector-of-integers&gt;</span><span class="sym">;
</span><span class="line">   13 </span><span class="sym"></span><span class="kwa">end class</span><span class="sym">;
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym"></span><span class="kwa">define sealed domain</span> make <span class="sym">(</span><span class="kwa">singleton</span><span class="sym">(</span><span class="kwa">&lt;matrix&gt;</span><span class="sym">));
</span><span class="line">   16 </span><span class="sym">
</span><span class="line">   17 </span><span class="sym"></span><span class="kwa">define sealed method</span> initialize <span class="sym">(</span>matrix <span class="sym">::</span> <span class="kwa">&lt;matrix&gt;</span><span class="sym">,</span> #key rows <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> columns <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; <span class="sym">()
</span><span class="line">   18 </span><span class="sym"></span>  matrix.elements <span class="sym">:=</span> make<span class="sym">(</span><span class="kwa">&lt;vector-of-integers&gt;</span><span class="sym">,</span> size<span class="sym">: (</span>rows <span class="sym">*</span> columns<span class="sym">),</span> fill<span class="sym">:</span> <span class="num">0</span><span class="sym">);
</span><span class="line">   19 </span><span class="sym"></span><span class="kwa">end method</span><span class="sym">;
</span><span class="line">   20 </span><span class="sym">
</span><span class="line">   21 </span><span class="sym"></span><span class="kwa">define inline function</span> ele <span class="sym">(</span>matrix <span class="sym">::</span> <span class="kwa">&lt;matrix&gt;</span><span class="sym">,</span> row <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> column <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; value <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">;
</span><span class="line">   22 </span><span class="sym"></span>  matrix.elements<span class="sym">[(</span>row <span class="sym">*</span> matrix.columns<span class="sym">) +</span> column<span class="sym">];
</span><span class="line">   23 </span><span class="sym"></span><span class="kwa">end function</span><span class="sym">;
</span><span class="line">   24 </span><span class="sym">
</span><span class="line">   25 </span><span class="sym"></span><span class="kwa">define inline function</span> ele<span class="sym">-</span>setter <span class="sym">(</span>new<span class="sym">-</span>value <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> matrix <span class="sym">::</span> <span class="kwa">&lt;matrix&gt;</span><span class="sym">,</span> row <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> column <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; new<span class="sym">-</span>value <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">;
</span><span class="line">   26 </span><span class="sym"></span>  matrix.elements<span class="sym">[(</span>row <span class="sym">*</span> matrix.columns<span class="sym">) +</span> column<span class="sym">] :=</span> new<span class="sym">-</span>value<span class="sym">;
</span><span class="line">   27 </span><span class="sym"></span><span class="kwa">end function</span><span class="sym">;
</span><span class="line">   28 </span><span class="sym">
</span><span class="line">   29 </span><span class="sym"></span><span class="kwa">define function create</span><span class="sym">-</span>matrix <span class="sym">(</span>rows <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> columns <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; m <span class="sym">::</span> <span class="kwa">&lt;matrix&gt;</span><span class="sym">;
</span><span class="line">   30 </span><span class="sym"></span>  <span class="kwa">let</span> m <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;matrix&gt;</span><span class="sym">,</span> rows<span class="sym">:</span> rows<span class="sym">,</span> columns<span class="sym">:</span> columns<span class="sym">);
</span><span class="line">   31 </span><span class="sym"></span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> m.elements.size<span class="sym">)
</span><span class="line">   32 </span><span class="sym"></span>    m.elements<span class="sym">[</span>i<span class="sym">] :=</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   33 </span><span class="sym"></span>  <span class="kwa">end for</span><span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span>  m<span class="sym">;
</span><span class="line">   35 </span><span class="sym"></span><span class="kwa">end function</span><span class="sym">;
</span><span class="line">   36 </span><span class="sym">
</span><span class="line">   37 </span><span class="sym"></span><span class="kwa">define sealed method</span> \<span class="sym">* (</span>m1 <span class="sym">::</span> <span class="kwa">&lt;matrix&gt;</span><span class="sym">,</span> m2 <span class="sym">::</span> <span class="kwa">&lt;matrix&gt;</span><span class="sym">) =</span>&gt; m <span class="sym">::</span> <span class="kwa">&lt;matrix&gt;</span><span class="sym">;
</span><span class="line">   38 </span><span class="sym"></span>  <span class="kwa">unless</span> <span class="sym">(</span>m1.columns <span class="sym">==</span> m2.rows<span class="sym">)
</span><span class="line">   39 </span><span class="sym"></span>    error<span class="sym">(</span><span class="str">&quot;the number of columns of %= must equals the number of rows of %m=&quot;</span><span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">);
</span><span class="line">   40 </span><span class="sym"></span>  <span class="kwa">end</span><span class="sym">;
</span><span class="line">   41 </span><span class="sym">
</span><span class="line">   42 </span><span class="sym"></span>  <span class="kwa">let</span> rows <span class="sym">=</span> m1.rows<span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>  <span class="kwa">let</span> columns <span class="sym">=</span> m2.columns<span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>  <span class="kwa">let</span> m3 <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;matrix&gt;</span><span class="sym">,</span> rows<span class="sym">:</span> rows<span class="sym">,</span> columns<span class="sym">:</span> columns<span class="sym">);
</span><span class="line">   45 </span><span class="sym">
</span><span class="line">   46 </span><span class="sym"></span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> rows<span class="sym">)
</span><span class="line">   47 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span>j <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> columns<span class="sym">)
</span><span class="line">   48 </span><span class="sym"></span>      <span class="kwa">let</span> value <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   49 </span><span class="sym"></span>      <span class="kwa">for</span> <span class="sym">(</span>k <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> columns<span class="sym">)
</span><span class="line">   50 </span><span class="sym"></span>        value <span class="sym">:=</span> value <span class="sym">+</span> ele<span class="sym">(</span>m1<span class="sym">,</span> i<span class="sym">,</span> k<span class="sym">) *</span> ele<span class="sym">(</span>m2<span class="sym">,</span> k<span class="sym">,</span> j<span class="sym">);
</span><span class="line">   51 </span><span class="sym"></span>      <span class="kwa">end</span><span class="sym">;
</span><span class="line">   52 </span><span class="sym"></span>      ele<span class="sym">(</span>m3<span class="sym">,</span> i<span class="sym">,</span> j<span class="sym">) :=</span> value<span class="sym">;
</span><span class="line">   53 </span><span class="sym"></span>    <span class="kwa">end for</span><span class="sym">;
</span><span class="line">   54 </span><span class="sym"></span>  <span class="kwa">end for</span><span class="sym">;
</span><span class="line">   55 </span><span class="sym"></span>  m3<span class="sym">;
</span><span class="line">   56 </span><span class="sym"></span><span class="kwa">end method</span><span class="sym">;
</span><span class="line">   57 </span><span class="sym">
</span><span class="line">   58 </span><span class="sym"></span><span class="kwa">define function</span> main <span class="sym">() =</span>&gt; <span class="sym">()
</span><span class="line">   59 </span><span class="sym"></span>  <span class="kwa">let</span> arg <span class="sym">=</span> string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">(</span>element<span class="sym">(</span>application<span class="sym">-</span>arguments<span class="sym">(),</span> <span class="num">0</span><span class="sym">,</span> default<span class="sym">:</span> <span class="str">&quot;1&quot;</span><span class="sym">));
</span><span class="line">   60 </span><span class="sym">
</span><span class="line">   61 </span><span class="sym"></span>  <span class="kwa">let</span> size <span class="sym">=</span> <span class="num">30</span><span class="sym">;
</span><span class="line">   62 </span><span class="sym"></span>  <span class="kwa">let</span> m1 <span class="sym">=</span> <span class="kwa">create</span><span class="sym">-</span>matrix<span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">);
</span><span class="line">   63 </span><span class="sym"></span>  <span class="kwa">let</span> m2 <span class="sym">=</span> <span class="kwa">create</span><span class="sym">-</span>matrix<span class="sym">(</span>size<span class="sym">,</span> size<span class="sym">);
</span><span class="line">   64 </span><span class="sym">
</span><span class="line">   65 </span><span class="sym"></span>  <span class="kwa">let</span> mm <span class="sym">=</span> #f<span class="sym">;
</span><span class="line">   66 </span><span class="sym"></span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> arg<span class="sym">)
</span><span class="line">   67 </span><span class="sym"></span>    mm <span class="sym">:=</span> m1 <span class="sym">*</span> m2<span class="sym">;
</span><span class="line">   68 </span><span class="sym"></span>  <span class="kwa">end</span><span class="sym">;
</span><span class="line">   69 </span><span class="sym"></span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;%= %= %= %=</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> ele<span class="sym">(</span>mm<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> <span class="num">0</span><span class="sym">),</span> ele<span class="sym">(</span>mm<span class="sym">,</span> <span class="num">2</span><span class="sym">,</span> <span class="num">3</span><span class="sym">),</span> ele<span class="sym">(</span>mm<span class="sym">,</span> <span class="num">3</span><span class="sym">,</span> <span class="num">2</span><span class="sym">),</span> ele<span class="sym">(</span>mm<span class="sym">,</span> <span class="num">4</span><span class="sym">,</span> <span class="num">4</span><span class="sym">));
</span><span class="line">   70 </span><span class="sym"></span><span class="kwa">end function</span><span class="sym">;
</span><span class="line">   71 </span><span class="sym">
</span><span class="line">   72 </span><span class="sym"></span>main<span class="sym">();</span>
