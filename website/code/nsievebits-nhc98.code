<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org/</span>
<span class="slc">-- Contributed by (c) Simon Marlow 2005</span>

<span class="kwa">import</span> Data.Array.IO
<span class="kwa">import</span> System
<span class="kwa">import</span> IO
<span class="kwa">import</span> Monad
<span class="kwa">import</span> Data.Bits
<span class="kwa">import</span> Text.Printf

main <span class="sym">=</span> <span class="kwa">do</span>
  <span class="kwa">as</span> <span class="sym">&lt;-</span> getArgs
  <span class="kwa">case as of</span>
    <span class="sym">[</span>m<span class="sym">] -&gt;</span> <span class="kwa">do let</span> n <span class="sym">=</span> read m <span class="sym">::</span> <span class="kwb">Int</span>
	      test n
	      when <span class="sym">(</span>n <span class="sym">&gt;=</span> <span class="num">1</span><span class="sym">)</span> $ test <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">)</span>
	      when <span class="sym">(</span>n <span class="sym">&gt;=</span> <span class="num">2</span><span class="sym">)</span> $ test <span class="sym">(</span>n<span class="sym">-</span><span class="num">2</span><span class="sym">)</span>
    _   <span class="sym">-&gt;</span> <span class="kwa">do</span> hPutStrLn stderr <span class="str">&quot;usage: nsieve-bits M&quot;</span>
	      exitWith <span class="sym">(</span>ExitFailure <span class="num">1</span><span class="sym">)</span>

test <span class="sym">::</span> <span class="kwb">Int</span> <span class="sym">-&gt;</span> IO <span class="sym">()</span>
test n <span class="sym">=</span> <span class="kwa">do</span>
  <span class="kwa">let</span> m <span class="sym">= (</span><span class="num">1</span> `shiftL` n<span class="sym">) *</span> <span class="num">10000</span>
  arr <span class="sym">&lt;-</span> newArray <span class="sym">(</span><span class="num">0</span><span class="sym">,</span>m<span class="sym">)</span> <span class="kwa">False</span> <span class="sym">::</span> IO <span class="sym">(</span>IOUArray <span class="kwb">Int Bool</span><span class="sym">)</span>
  <span class="kwa">let</span> for i count
	<span class="sym">|</span> count `seq` <span class="kwa">False</span> <span class="sym">=</span> undefined	<span class="slc">-- strictness hack</span>
	<span class="sym">|</span> i <span class="sym">&gt;</span> m <span class="sym">=</span> return count
	<span class="sym">|</span> otherwise <span class="sym">=</span> <span class="kwa">do</span>
		x <span class="sym">&lt;-</span> readArray arr i
		if x
		  <span class="kwa">then</span> for <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> count
		  <span class="kwa">else let</span> for<span class="str">' j | j &gt; m = for (i+1) (count+1)</span>
<span class="str">			    	  | otherwise = do</span>
<span class="str">			     		writeArray arr j True</span>
<span class="str">			     		for'</span> <span class="sym">(</span>j <span class="sym">+</span> i<span class="sym">)</span>
		       <span class="kwa">in</span> for<span class="str">' (i*2)</span>
<span class="str">  r &lt;- for 2 0</span>
<span class="str">  printf &quot;Primes up to %8d %8d\n&quot; (m::Int) (r::Int)</span>
