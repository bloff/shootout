<span class="slc">-- $Id: methcall-gnat.code,v 1.13 2006-09-20 05:51:56 bfulgham Exp $</span>
<span class="slc">-- http://dada.perl.it/shootout/</span>
<span class="slc">-- Ada 95 code by C.C.</span>

<span class="kwa">with</span> Text_IO<span class="sym">,</span> Ada.Command_Line<span class="sym">,</span> Ada.Characters.Handling<span class="sym">;</span>

<span class="kwa">procedure</span> MethCall <span class="kwa">is</span>
   <span class="kwa">package</span> Toggles <span class="kwa">is</span>
      <span class="kwa">type</span> A_Rec <span class="kwa">is</span>                          <span class="slc">--  'tagged' implies hidden field,</span>
         <span class="kwa">tagged record</span>                       <span class="slc">--   and can append new fields</span>
            Value       <span class="sym">:</span> <span class="kwb">Boolean</span> <span class="sym">:=</span> True<span class="sym">;</span>
         <span class="kwa">end record</span><span class="sym">;</span>

      <span class="kwa">procedure</span> Activate <span class="sym">(</span>A <span class="sym">:</span> <span class="kwa">in out</span> A_Rec<span class="sym">);</span>

      <span class="kwa">type</span> B_Rec <span class="kwa">is new</span> A_Rec <span class="kwa">with</span>                 <span class="slc">--  Add more fields to A_Rec</span>
         <span class="kwa">record</span>
            Flip_Period <span class="sym">:</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">1</span><span class="sym">;</span>
            Count       <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
         <span class="kwa">end record</span><span class="sym">;</span>

      <span class="kwa">procedure</span> Activate <span class="sym">(</span>B <span class="sym">:</span> <span class="kwa">in out</span> B_Rec<span class="sym">);</span>
      <span class="kwa">pragma</span> Inline <span class="sym">(</span>Activate<span class="sym">);</span>
   <span class="kwa">end</span> Toggles<span class="sym">;</span>

   <span class="kwa">package body</span> Toggles <span class="kwa">is</span>
      <span class="kwa">procedure</span> Activate <span class="sym">(</span>A <span class="sym">:</span> <span class="kwa">in out</span> A_Rec<span class="sym">)</span> <span class="kwa">is</span>
      <span class="kwa">begin</span>
         A.Value <span class="sym">:=</span> <span class="kwa">not</span> A.Value<span class="sym">;</span>
      <span class="kwa">end</span> Activate<span class="sym">;</span>

      <span class="kwa">procedure</span> Activate <span class="sym">(</span>B <span class="sym">:</span> <span class="kwa">in out</span> B_Rec<span class="sym">)</span> <span class="kwa">is</span>
      <span class="kwa">begin</span>
         B.Count <span class="sym">:=</span> B.Count <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
         <span class="kwa">if</span> B.Count <span class="sym">=</span> B.Flip_Period <span class="kwa">then</span>
            B.Count <span class="sym">:=</span> <span class="num">0</span><span class="sym">;</span>
            B.Value <span class="sym">:=</span> <span class="kwa">not</span> B.Value<span class="sym">;</span>
         <span class="kwa">end if</span><span class="sym">;</span>
      <span class="kwa">end</span> Activate<span class="sym">;</span>
   <span class="kwa">end</span> Toggles<span class="sym">;</span>

   X        <span class="sym">:</span> Toggles.A_Rec <span class="sym">:= (</span>Value <span class="sym">=&gt;</span> True<span class="sym">);</span>
   Y        <span class="sym">:</span> Toggles.B_Rec <span class="sym">:= (</span>Value <span class="sym">=&gt;</span> True<span class="sym">,</span> Count <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">,</span> Flip_Period <span class="sym">=&gt;</span> <span class="num">3</span><span class="sym">);</span>
   Val      <span class="sym">:</span> <span class="kwb">Boolean</span><span class="sym">;</span>
   N        <span class="sym">:</span> <span class="kwb">Positive</span> <span class="sym">:=</span> <span class="num">1</span><span class="sym">;</span>
<span class="kwa">begin</span>
   <span class="kwa">begin</span>
      N <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value <span class="sym">(</span>Ada.Command_Line.Argument <span class="sym">(</span><span class="num">1</span><span class="sym">));</span>
   <span class="kwa">exception</span>
      <span class="kwa">when</span> Constraint_Error <span class="sym">=&gt;</span> <span class="kwa">null</span><span class="sym">;</span>
   <span class="kwa">end</span><span class="sym">;</span>
   <span class="kwa">for</span> Iter <span class="kwa">in</span> <span class="num">1</span> .. N <span class="kwa">loop</span>
      Toggles.Activate <span class="sym">(</span>X<span class="sym">);</span>
      Val <span class="sym">:=</span> X.Value<span class="sym">;</span>
   <span class="kwa">end loop</span><span class="sym">;</span>
   Text_IO.Put_Line <span class="sym">(</span>Ada.Characters.Handling.To_Lower <span class="sym">(</span><span class="kwb">Boolean</span><span class="sym">'</span>Image <span class="sym">(</span>Val<span class="sym">)));</span>
   <span class="kwa">for</span> Iter <span class="kwa">in</span> <span class="num">1</span> .. N <span class="kwa">loop</span>
      Toggles.Activate <span class="sym">(</span>Y<span class="sym">);</span>
      Val <span class="sym">:=</span> Y.Value<span class="sym">;</span>
   <span class="kwa">end loop</span><span class="sym">;</span>
   Text_IO.Put_Line <span class="sym">(</span>Ada.Characters.Handling.To_Lower <span class="sym">(</span><span class="kwb">Boolean</span><span class="sym">'</span>Image <span class="sym">(</span>Val<span class="sym">)));</span>
<span class="kwa">end</span> MethCall<span class="sym">;</span>
