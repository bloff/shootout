<span class="slc">#!/usr/bin/python</span>
<span class="slc"># $Id: wordfreq-python.code,v 1.12 2007-05-18 03:10:04 bfulgham Exp $</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># adapted from Bill Lear's original python word frequency counter</span>
<span class="slc">#</span>
<span class="slc"># Joel Rosdahl suggested using translate table to speed up</span>
<span class="slc"># word splitting.  That change alone sped this program up by</span>
<span class="slc"># at least a factor of 3.</span>
<span class="slc">#</span>
<span class="slc"># with further speedups from Mark Baker</span>

<span class="kwa">import</span> sys

<span class="kwa">def</span> <span class="kwd">main</span><span class="sym">():</span>
    count <span class="sym">= {}</span>
    i_r <span class="sym">=</span> <span class="kwb">map</span><span class="sym">(</span><span class="kwb">chr</span><span class="sym">,</span> <span class="kwb">range</span><span class="sym">(</span><span class="num">256</span><span class="sym">))</span>

    trans <span class="sym">= [</span><span class="str">' '</span><span class="sym">] *</span> <span class="num">256</span>
    o_a<span class="sym">,</span> o_z <span class="sym">=</span> <span class="kwb">ord</span><span class="sym">(</span><span class="str">'a'</span><span class="sym">), (</span><span class="kwb">ord</span><span class="sym">(</span><span class="str">'z'</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)</span>
    trans<span class="sym">[</span><span class="kwb">ord</span><span class="sym">(</span><span class="str">'A'</span><span class="sym">):(</span><span class="kwb">ord</span><span class="sym">(</span><span class="str">'Z'</span><span class="sym">)+</span><span class="num">1</span><span class="sym">)] =</span> i_r<span class="sym">[</span>o_a<span class="sym">:</span>o_z<span class="sym">]</span>
    trans<span class="sym">[</span>o_a<span class="sym">:</span>o_z<span class="sym">] =</span> i_r<span class="sym">[</span>o_a<span class="sym">:</span>o_z<span class="sym">]</span>
    trans <span class="sym">=</span> <span class="str">''</span><span class="sym">.</span><span class="kwd">join</span><span class="sym">(</span>trans<span class="sym">)</span>

    rl <span class="sym">=</span> sys<span class="sym">.</span>stdin<span class="sym">.</span>readlines

    lines <span class="sym">=</span> <span class="kwd">rl</span><span class="sym">(</span><span class="num">4095</span><span class="sym">)</span>
    <span class="kwa">while</span> lines<span class="sym">:</span>
        <span class="kwa">for</span> line <span class="kwa">in</span> lines<span class="sym">:</span>
            <span class="kwa">for</span> word <span class="kwa">in</span> line<span class="sym">.</span><span class="kwd">translate</span><span class="sym">(</span>trans<span class="sym">).</span><span class="kwd">split</span><span class="sym">():</span>
                <span class="kwa">try</span><span class="sym">:</span>
                    count<span class="sym">[</span>word<span class="sym">] +=</span> <span class="num">1</span>
                <span class="kwa">except</span> <span class="kwc">KeyError</span><span class="sym">:</span>
                    count<span class="sym">[</span>word<span class="sym">] =</span> <span class="num">1</span>
        lines <span class="sym">=</span> <span class="kwd">rl</span><span class="sym">(</span><span class="num">4095</span><span class="sym">)</span>

    l <span class="sym">=</span> <span class="kwb">zip</span><span class="sym">(</span>count<span class="sym">.</span><span class="kwd">values</span><span class="sym">(),</span> count<span class="sym">.</span><span class="kwd">keys</span><span class="sym">())</span>
    l<span class="sym">.</span><span class="kwd">sort</span><span class="sym">()</span>
    l<span class="sym">.</span><span class="kwd">reverse</span><span class="sym">()</span>

    <span class="kwa">print</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">.</span><span class="kwd">join</span><span class="sym">([</span><span class="str">&quot;%7s %s&quot;</span> <span class="sym">% (</span>count<span class="sym">,</span> word<span class="sym">)</span> <span class="kwa">for</span> <span class="sym">(</span>count<span class="sym">,</span> word<span class="sym">)</span> <span class="kwa">in</span> l<span class="sym">])</span>

<span class="kwd">main</span><span class="sym">()</span>
