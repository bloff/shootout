<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy

To compile:	
   nicec --sourcepath=.. -d=. -a random.jar random

To run:
   java -ea -jar random.jar 900000
*/</FONT></I>


<B><FONT COLOR="#A020F0">import</FONT></B> java.text.*;

<B><FONT COLOR="#A020F0">import</FONT></B> ackermann; <I><FONT COLOR="#B22222">// reuse toSinglePositiveInt
</FONT></I>
<B><FONT COLOR="#A020F0">void</FONT></B> main(String[] args){
   var n = toSinglePositiveInt(args);
   var result = 0.0d;

   <B><FONT COLOR="#A020F0">while</FONT></B> (n-- &gt; 0) result = gen_random(100.0);

   println(floatFormat(9).format(result));
}


let <B><FONT COLOR="#A020F0">int</FONT></B> IM = 139968;
let <B><FONT COLOR="#A020F0">int</FONT></B> IA = 3877;
let <B><FONT COLOR="#A020F0">int</FONT></B> IC = 29573;
var <B><FONT COLOR="#A020F0">int</FONT></B> seed = 42;


<B><FONT COLOR="#A020F0">double</FONT></B> gen_random(<B><FONT COLOR="#A020F0">double</FONT></B> max) {        
   seed = (seed * IA + IC) % IM;
   <B><FONT COLOR="#A020F0">return</FONT></B>( max * seed / IM );
}


NumberFormat floatFormat(<B><FONT COLOR="#A020F0">int</FONT></B> digits){
   let f = NumberFormat.getInstance();
   f.setGroupingUsed(<B><FONT COLOR="#A020F0">false</FONT></B>);
   f.setMaximumFractionDigits(digits);
   f.setMinimumFractionDigits(digits);
   <B><FONT COLOR="#A020F0">return</FONT></B> f;
} </pre></td></tr></table>
