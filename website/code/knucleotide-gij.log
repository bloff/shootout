BUILD COMMANDS FOR: knucleotide.gij

Sun Dec  2 23:13:52 PST 2007

if [ ! -d knucleotide.gij_run ] ; then mkdir knucleotide.gij_run ; fi
cp /opt/shootout/shootout/bench/knucleotide/knucleotide.gij knucleotide.gij_run/knucleotide.java
( cd knucleotide.gij_run ; /usr/bin/gcj-4.2 -C -classpath '.' knucleotide.java )
knucleotide.java:49: warning: Map is a raw type. References to generic type Map<K,V> should be parameterized
	Map frequencies = calculateFrequencies(nucleotideLength);
	^^^
knucleotide.java:50: warning: ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized
	ArrayList list = new ArrayList(frequencies.size());
	^^^^^^^^^
knucleotide.java:50: warning: ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized
	ArrayList list = new ArrayList(frequencies.size());
	                     ^^^^^^^^^
knucleotide.java:51: warning: Iterator is a raw type. References to generic type Iterator<E> should be parameterized
	Iterator it = frequencies.entrySet().iterator();
	^^^^^^^^
knucleotide.java:54: warning: Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized
	knucleotide fragment = (knucleotide)((Map.Entry)it.next()).getValue();
	                                      ^^^^^^^^^
knucleotide.java:55: warning: Type safety: The method add(Object) belongs to the raw type ArrayList. References to generic type ArrayList<E> should be parameterized
	list.add(fragment);
	^^^^^^^^^^^^^^^^^^
knucleotide.java:58: warning: Type safety: Unchecked invocation sort(List, Comparator) of the generic method sort(List<T>, Comparator<? super T>) of type Collections
	Collections.sort(list, new Comparator() {
        public int compare(Object o1, Object o2) {
          int c = ((knucleotide)o2).count - ((knucleotide)o1).count;
          if (c == 0) {
            c = ((knucleotide)o1).sequence.compareTo(((knucleotide)o2).sequence);
          }
          return c;
        }
      });
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
knucleotide.java:58: warning: Type safety: The expression of type ArrayList needs unchecked conversion to conform to List<T>
	Collections.sort(list, new Comparator() {
	                 ^^^^
knucleotide.java:58: warning: Type safety: The expression of type new Comparator(){} needs unchecked conversion to conform to Comparator<? super T>
	Collections.sort(list, new Comparator() {
        public int compare(Object o1, Object o2) {
          int c = ((knucleotide)o2).count - ((knucleotide)o1).count;
          if (c == 0) {
            c = ((knucleotide)o1).sequence.compareTo(((knucleotide)o2).sequence);
          }
          return c;
        }
      });
	                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
knucleotide.java:58: warning: Comparator is a raw type. References to generic type Comparator<T> should be parameterized
	Collections.sort(list, new Comparator() {
	                           ^^^^^^^^^^
knucleotide.java:83: warning: Map is a raw type. References to generic type Map<K,V> should be parameterized
	Map frequencies = calculateFrequencies(nucleotideFragment.length());
	^^^
knucleotide.java:90: warning: Map is a raw type. References to generic type Map<K,V> should be parameterized
	Map calculateFrequencies(int fragmentLength) {
	^^^
knucleotide.java:91: warning: HashMap is a raw type. References to generic type HashMap<K,V> should be parameterized
	HashMap map = new HashMap();
	^^^^^^^
knucleotide.java:91: warning: HashMap is a raw type. References to generic type HashMap<K,V> should be parameterized
	HashMap map = new HashMap();
	                  ^^^^^^^
knucleotide.java:101: warning: Map is a raw type. References to generic type Map<K,V> should be parameterized
	void calculateFrequencies(Map map, int offset, int fragmentLength) {
	                          ^^^
knucleotide.java:109: warning: Type safety: The method put(Object, Object) belongs to the raw type Map. References to generic type Map<K,V> should be parameterized
	map.put(temp, new knucleotide(temp));
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 problems (16 warnings)
touch knucleotide.gij_run

=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/gij-4.1 --classpath knucleotide.gij_run knucleotide %A


PROGRAM OUTPUT
==============
A 30.296
T 30.155
C 19.796
G 19.752

AA 9.177
TA 9.134
AT 9.133
TT 9.094
CA 6.001
AC 6.000
AG 5.986
GA 5.984
TC 5.971
CT 5.970
GT 5.957
TG 5.956
CC 3.916
GC 3.909
CG 3.908
GG 3.902

58888	GGT
17865	GGTA
1893	GGTATT
36	GGTATTTTAATT
36	GGTATTTTAATTTATAGT
