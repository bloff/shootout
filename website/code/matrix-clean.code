<span class="sym">/*</span> The Great Computer Language Shootout
   http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/

</span>   contributed by Isaac Gouy <span class="sym">(</span>Clean novice<span class="sym">)
*/

</span><span class="kwa">module</span> matrix
<span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout

SIZE <span class="sym">:==</span> <span class="num">30

</span>Start <span class="sym">=</span> resultString <span class="sym">(</span>mmultLoop argi SIZE SIZE a b c<span class="sym">)
</span>   <span class="kwa">where
</span>      a <span class="sym">=</span> initm <span class="sym">(</span>mkm SIZE SIZE<span class="sym">)</span> <span class="num">0 1</span> SIZE SIZE
      b <span class="sym">=</span> initm <span class="sym">(</span>mkm SIZE SIZE<span class="sym">)</span> <span class="num">0 1</span> SIZE SIZE
      c <span class="sym">=</span> mkm SIZE SIZE

      mkm <span class="sym">::</span> <span class="kwb">Int Int</span> <span class="sym">-&gt;</span> {#.{#<span class="kwb">Int</span>}}
      mkm nrows ncols <span class="sym">=</span> {createArray ncols <span class="num">0</span> \\ i<span class="sym">&lt;-[</span><span class="num">0</span>..nrows<span class="num">-1</span><span class="sym">]</span>}

      initm m i count nrows ncols
         <span class="sym">|</span> i<span class="sym">&lt;</span>nrows <span class="sym">=</span> initm {m<span class="sym">&amp;[</span>i<span class="sym">,</span>j<span class="sym">]=</span>count<span class="sym">+</span>j \\ j<span class="sym">&lt;-[</span><span class="num">0</span>..ncols<span class="num">-1</span><span class="sym">]</span>}
            <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">) (</span>count<span class="sym">+</span>ncols<span class="sym">)</span> nrows ncols
         <span class="sym">=</span> m

      resultString a <span class="sym">=
</span>         toString<span class="sym">(</span>a.<span class="sym">[</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">]) +++</span> <span class="str">&quot; &quot;</span> <span class="sym">+++
</span>         toString<span class="sym">(</span>a.<span class="sym">[</span><span class="num">2</span><span class="sym">,</span><span class="num">3</span><span class="sym">]) +++</span> <span class="str">&quot; &quot;</span> <span class="sym">+++
</span>         toString<span class="sym">(</span>a.<span class="sym">[</span><span class="num">3</span><span class="sym">,</span><span class="num">2</span><span class="sym">]) +++</span> <span class="str">&quot; &quot;</span> <span class="sym">+++
</span>         toString<span class="sym">(</span>a.<span class="sym">[</span><span class="num">4</span><span class="sym">,</span><span class="num">4</span><span class="sym">]) +++</span> <span class="str">&quot;\n&quot;</span>

mmultLoop n nrows ncols a b c
   <span class="sym">|</span> n<span class="sym">==</span><span class="num">0</span> <span class="sym">=</span> c
   <span class="sym">=</span> mmultLoop <span class="sym">(</span>n<span class="num">-1</span><span class="sym">)</span> nrows ncols a b
      <span class="sym">(</span>mmult nrows ncols a <span class="sym">(</span>transpose ncols nrows b<span class="sym">)</span> c<span class="sym">)

</span>mmult nrows ncols a bt c
   <span class="sym">=</span> {c<span class="sym">&amp;[</span>i<span class="sym">,</span>j<span class="sym">]=</span> rmult <span class="num">0</span> ncols <span class="num">0</span> a.<span class="sym">[</span>i<span class="sym">]</span> bt.<span class="sym">[</span>j<span class="sym">]</span> \\ i<span class="sym">&lt;-[</span><span class="num">0</span>..nrows<span class="num">-1</span><span class="sym">],</span> j<span class="sym">&lt;-[</span><span class="num">0</span>..nrows<span class="num">-1</span><span class="sym">]</span>}
   <span class="kwa">where
</span>      rmult <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span>.<span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>{#<span class="kwb">Int</span>} <span class="sym">!</span>{#<span class="kwb">Int</span>} <span class="sym">-&gt;</span> <span class="kwb">Int
</span>      rmult k n v a b
         <span class="sym">|</span> k<span class="sym">&lt;</span>n <span class="sym">=</span> rmult <span class="sym">(</span>k<span class="sym">+</span><span class="num">1</span><span class="sym">)</span> n <span class="sym">(</span>v <span class="sym">+</span> a.<span class="sym">[</span>k<span class="sym">]*</span>b.<span class="sym">[</span>k<span class="sym">])</span> a b
         <span class="sym">=</span> v

transpose <span class="sym">:: !</span><span class="kwb">Int</span> <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>{#.{#<span class="kwb">Int</span>}} <span class="sym">-&gt;</span> {#.{#<span class="kwb">Int</span>}}
transpose nrows ncols m <span class="sym">=</span> { {m.<span class="sym">[</span>i<span class="sym">,</span>j<span class="sym">]</span> \\ i<span class="sym">&lt;-[</span><span class="num">0</span>..nrows<span class="num">-1</span><span class="sym">]</span>} \\ j<span class="sym">&lt;-[</span><span class="num">0</span>..ncols<span class="num">-1</span><span class="sym">]</span>}

