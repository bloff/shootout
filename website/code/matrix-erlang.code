<span class="slc">%% The Great Computer Language Shootout
</span><span class="slc">%% http://shootout.alioth.debian.org/
</span>
<span class="slc">%% contributed by Alexey Shchepin &lt;alexey&#64;sevcom.net&gt;
</span><span class="slc">%% modified by Isaac Gouy
</span>
<span class="sym">-</span>module<span class="sym">(</span>matrix<span class="sym">)</span>.
<span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

<span class="sym">-</span>define<span class="sym">(</span>SIZE<span class="sym">,</span> <span class="num">30</span><span class="sym">)</span>.

main<span class="sym">() -&gt;</span> main<span class="sym">([</span><span class="str">&quot;1&quot;</span><span class="sym">])</span>.
main<span class="sym">([</span>Arg<span class="sym">]) -&gt;
</span>    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),
</span>    M1 <span class="sym">=</span> mkmatrix<span class="sym">(</span>?SIZE<span class="sym">,</span> ?SIZE<span class="sym">),
</span>    M2 <span class="sym">=</span> mkmatrix<span class="sym">(</span>?SIZE<span class="sym">,</span> ?SIZE<span class="sym">),
</span>    mmult_n<span class="sym">(</span>N<span class="sym">,</span> M1<span class="sym">,</span> M2<span class="sym">),
</span>    <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.

mmult_n<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> M1<span class="sym">,</span> M2<span class="sym">) -&gt;
</span>    M3 <span class="sym">=</span> mmult<span class="sym">(</span>M1<span class="sym">,</span> M2<span class="sym">),
</span>    io<span class="sym">:</span>format<span class="sym">(</span><span class="str">&quot;~p ~p ~p ~p~n&quot;</span><span class="sym">, [</span><span class="kwb">element</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="kwb">element</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> M3<span class="sym">)),
</span>			        <span class="kwb">element</span><span class="sym">(</span><span class="num">4</span><span class="sym">,</span> <span class="kwb">element</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> M3<span class="sym">)),
</span>			        <span class="kwb">element</span><span class="sym">(</span><span class="num">3</span><span class="sym">,</span> <span class="kwb">element</span><span class="sym">(</span><span class="num">4</span><span class="sym">,</span> M3<span class="sym">)),
</span>			        <span class="kwb">element</span><span class="sym">(</span><span class="num">5</span><span class="sym">,</span> <span class="kwb">element</span><span class="sym">(</span><span class="num">5</span><span class="sym">,</span> M3<span class="sym">))]);
</span>mmult_n<span class="sym">(</span>N<span class="sym">,</span> M1<span class="sym">,</span> M2<span class="sym">) -&gt;
</span>    mmult<span class="sym">(</span>M1<span class="sym">,</span> M2<span class="sym">),
</span>    mmult_n<span class="sym">(</span>N<span class="num">-1</span><span class="sym">,</span> M1<span class="sym">,</span> M2<span class="sym">)</span>.

mkmatrix<span class="sym">(</span>Rows<span class="sym">,</span> Cols<span class="sym">) -&gt;
</span>    <span class="kwb">list_to_tuple</span><span class="sym">(
</span>      lists<span class="sym">:</span>map<span class="sym">(</span><span class="kwa">fun</span><span class="sym">(</span>Row<span class="sym">) -&gt;
</span>			<span class="kwb">list_to_tuple</span><span class="sym">(</span>lists<span class="sym">:</span>seq<span class="sym">(</span>Row <span class="sym">*</span> Cols <span class="sym">+</span> <span class="num">1</span><span class="sym">,
</span>						Row <span class="sym">*</span> Cols <span class="sym">+</span> Cols<span class="sym">))
</span>		<span class="kwa">end</span><span class="sym">,</span> lists<span class="sym">:</span>seq<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> Rows <span class="num">- 1</span><span class="sym">)))</span>.


mmult<span class="sym">(</span>M1<span class="sym">,</span> M2<span class="sym">) -&gt;
</span>    mmult1<span class="sym">(</span>?SIZE<span class="sym">,</span> M1<span class="sym">,</span> M2<span class="sym">, [])</span>.

mmult1<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> M1<span class="sym">,</span> M2<span class="sym">,</span> M3<span class="sym">) -&gt;
</span>    <span class="kwb">list_to_tuple</span><span class="sym">(</span>M3<span class="sym">);
</span>mmult1<span class="sym">(</span>Row<span class="sym">,</span> M1<span class="sym">,</span> M2<span class="sym">,</span> M3<span class="sym">) -&gt;
</span>    M1R <span class="sym">=</span> <span class="kwb">element</span><span class="sym">(</span>Row<span class="sym">,</span> M1<span class="sym">),
</span>    mmult1<span class="sym">(</span>Row <span class="num">- 1</span><span class="sym">,</span> M1<span class="sym">,</span> M2<span class="sym">,
	   [</span>mmult2<span class="sym">(</span>?SIZE<span class="sym">,</span> Row<span class="sym">,</span> M1R<span class="sym">,</span> M2<span class="sym">, []) |</span> M3<span class="sym">])</span>.

mmult2<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> Row<span class="sym">,</span> M1R<span class="sym">,</span> M2<span class="sym">,</span> R<span class="sym">) -&gt;
</span>    <span class="kwb">list_to_tuple</span><span class="sym">(</span>R<span class="sym">);
</span>mmult2<span class="sym">(</span>Col<span class="sym">,</span> Row<span class="sym">,</span> M1R<span class="sym">,</span> M2<span class="sym">,</span> R<span class="sym">) -&gt;
</span>    mmult2<span class="sym">(</span>Col <span class="num">- 1</span><span class="sym">,</span> Row<span class="sym">,</span> M1R<span class="sym">,</span> M2<span class="sym">,
	   [</span>inner_loop<span class="sym">(</span>?SIZE<span class="sym">,</span> Col<span class="sym">,</span> Row<span class="sym">,</span> M1R<span class="sym">,</span> M2<span class="sym">,</span> <span class="num">0</span><span class="sym">) |</span> R<span class="sym">])</span>.

inner_loop<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> Col<span class="sym">,</span> Row<span class="sym">,</span> M1R<span class="sym">,</span> M2<span class="sym">,</span> Sum<span class="sym">) -&gt;
</span>    Sum<span class="sym">;
</span>inner_loop<span class="sym">(</span>I<span class="sym">,</span> Col<span class="sym">,</span> Row<span class="sym">,</span> M1R<span class="sym">,</span> M2<span class="sym">,</span> Sum<span class="sym">) -&gt;
</span>    inner_loop<span class="sym">(</span>I <span class="num">- 1</span><span class="sym">,</span> Col<span class="sym">,</span> Row<span class="sym">,</span> M1R<span class="sym">,</span> M2<span class="sym">,
</span>	       Sum <span class="sym">+</span> <span class="kwb">element</span><span class="sym">(</span>I<span class="sym">,</span> M1R<span class="sym">) *</span> <span class="kwb">element</span><span class="sym">(</span>Col<span class="sym">,</span> <span class="kwb">element</span><span class="sym">(</span>I<span class="sym">,</span> M2<span class="sym">)))</span>.



