<span class="com">(* The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> * contributed by Jon Harrop, 2005</span>
<span class="com"> * substantially stylistically modified by sweeks&#64;sweeks.com, with no</span>
<span class="com"> *   major speed change, only a slight speedup, probably due to using a vector</span>
<span class="com"> *   instead of a list for &quot;group&quot; scenes.</span>
<span class="com"> *)</span>

<span class="kwa">fun</span> <span class="kwb">real</span> n <span class="sym">=</span> <span class="kwa">Real</span>.fromInt n
<span class="kwa">val</span> delta <span class="sym">=</span> <span class="num">0.00000001</span>
<span class="kwa">val</span> infinity <span class="sym">=</span> <span class="kwa">Real</span>.posInf

<span class="kwa">structure</span> Vec <span class="sym">=</span>
   <span class="kwa">struct</span>
      <span class="kwa">datatype</span> t <span class="sym">=</span> T <span class="kwa">of</span> <span class="kwb">real</span> <span class="sym">*</span> <span class="kwb">real</span> <span class="sym">*</span> <span class="kwb">real</span>

      <span class="kwa">val</span> origin <span class="sym">=</span> T <span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">)</span>

      <span class="kwa">fun</span> scale <span class="sym">(</span>T <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> s<span class="sym">) =</span> T <span class="sym">(</span>s <span class="sym">*</span> x<span class="sym">,</span> s <span class="sym">*</span> y<span class="sym">,</span> s <span class="sym">*</span> z<span class="sym">)</span>

      <span class="kwa">fun</span> dot <span class="sym">(</span>T <span class="sym">(</span>x1<span class="sym">,</span> y1<span class="sym">,</span> z1<span class="sym">),</span> T <span class="sym">(</span>x2<span class="sym">,</span> y2<span class="sym">,</span> z2<span class="sym">)) =</span> x1 <span class="sym">*</span> x2 <span class="sym">+</span> y1 <span class="sym">*</span> y2 <span class="sym">+</span> z1 <span class="sym">*</span> z2

      <span class="kwa">fun</span> length v <span class="sym">=</span> Math.sqrt <span class="sym">(</span>dot <span class="sym">(</span>v<span class="sym">,</span> v<span class="sym">))</span>

      <span class="kwa">fun</span> unitise v <span class="sym">=</span> scale <span class="sym">(</span>v<span class="sym">,</span> <span class="num">1.0</span> <span class="sym">/</span> length v<span class="sym">)</span>

      <span class="kwa">local</span>
	 <span class="kwa">fun</span> make f <span class="sym">(</span>T <span class="sym">(</span>x1<span class="sym">,</span> y1<span class="sym">,</span> z1<span class="sym">),</span> T <span class="sym">(</span>x2<span class="sym">,</span> y2<span class="sym">,</span> z2<span class="sym">)) =</span>
	    T <span class="sym">(</span>f <span class="sym">(</span>x1<span class="sym">,</span> x2<span class="sym">),</span> f <span class="sym">(</span>y1<span class="sym">,</span> y2<span class="sym">),</span> f <span class="sym">(</span>z1<span class="sym">,</span> z2<span class="sym">))</span>
      <span class="kwa">in</span>
	 <span class="kwa">val op</span> <span class="sym">+ =</span> make <span class="sym">(</span><span class="kwa">op</span> <span class="sym">+)</span>
	 <span class="kwa">val op</span> <span class="sym">- =</span> make <span class="sym">(</span><span class="kwa">op</span> <span class="sym">-)</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

<span class="kwa">structure</span> Sphere <span class="sym">=</span>
   <span class="kwa">struct</span>
      <span class="kwa">datatype</span> t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>center<span class="sym">:</span> Vec.t<span class="sym">,</span> radius<span class="sym">:</span> <span class="kwb">real</span><span class="sym">}</span>
   <span class="kwa">end</span>

<span class="kwa">structure</span> Ray <span class="sym">=</span>
   <span class="kwa">struct</span>
      <span class="kwa">datatype</span> t <span class="sym">=</span> T <span class="kwa">of</span> <span class="sym">{</span>dir<span class="sym">:</span> Vec.t<span class="sym">,</span> orig<span class="sym">:</span> Vec.t<span class="sym">}</span>

      <span class="kwa">local</span>
	 <span class="kwa">fun</span> disc <span class="sym">(</span>T <span class="sym">{</span>dir<span class="sym">,</span> orig<span class="sym">},</span> Sphere.T <span class="sym">{</span>center<span class="sym">,</span> radius<span class="sym">}) =</span>
	    <span class="kwa">let</span>
	       <span class="kwa">val</span> v <span class="sym">=</span> Vec.<span class="sym">- (</span>center<span class="sym">,</span> orig<span class="sym">)</span>
	       <span class="kwa">val</span> b <span class="sym">=</span> Vec.dot <span class="sym">(</span>v<span class="sym">,</span> dir<span class="sym">)</span>
	    <span class="kwa">in</span>
	       <span class="sym">(</span>b<span class="sym">,</span> b <span class="sym">*</span> b <span class="sym">-</span> Vec.dot <span class="sym">(</span>v<span class="sym">,</span> v<span class="sym">) +</span> radius <span class="sym">*</span> radius<span class="sym">)</span>
	    <span class="kwa">end</span>
      <span class="kwa">in</span>
	 <span class="kwa">fun</span> doesHitSphere <span class="sym">(</span>r<span class="sym">,</span> s<span class="sym">):</span> <span class="kwb">bool</span> <span class="sym">=</span>
	    <span class="kwa">let</span>
	       <span class="kwa">val</span> <span class="sym">(</span>b<span class="sym">,</span> disc<span class="sym">) =</span> disc <span class="sym">(</span>r<span class="sym">,</span> s<span class="sym">)</span>
	    <span class="kwa">in</span>
	       disc <span class="sym">&gt;=</span> <span class="num">0.0</span> <span class="kwa">andalso</span> b <span class="sym">+</span> Math.sqrt disc <span class="sym">&gt;=</span> <span class="num">0.0</span>
	    <span class="kwa">end</span>
	 <span class="kwa">fun</span> hitSphere <span class="sym">(</span>r<span class="sym">,</span> s<span class="sym">):</span> <span class="kwb">real</span> <span class="sym">=</span>
	    <span class="kwa">let</span>
	       <span class="kwa">val</span> <span class="sym">(</span>b<span class="sym">,</span> disc<span class="sym">) =</span> disc <span class="sym">(</span>r<span class="sym">,</span> s<span class="sym">)</span>
	    <span class="kwa">in</span>
	       <span class="kwa">if</span> disc <span class="sym">&lt;</span> <span class="num">0.0</span> <span class="kwa">then</span> infinity
	       <span class="kwa">else let</span>
		       <span class="kwa">val</span> disc <span class="sym">=</span> Math.sqrt disc
		    <span class="kwa">in</span>
		       <span class="kwa">let</span>
			  <span class="kwa">val</span> t2 <span class="sym">=</span> b <span class="sym">+</span> disc
		       <span class="kwa">in</span>
			  <span class="kwa">if</span> t2 <span class="sym">&lt;</span> <span class="num">0.0</span> <span class="kwa">then</span> infinity
			  <span class="kwa">else</span>
			     <span class="kwa">let</span>
				<span class="kwa">val</span> t1 <span class="sym">=</span> b <span class="sym">-</span> disc
			     <span class="kwa">in</span>
				<span class="kwa">if</span> t1 <span class="sym">&gt;</span> <span class="num">0.0</span> <span class="kwa">then</span> t1 <span class="kwa">else</span> t2
			     <span class="kwa">end</span>
		       <span class="kwa">end</span>
		    <span class="kwa">end</span>
	    <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

<span class="kwa">structure</span> Scene <span class="sym">=</span>
   <span class="kwa">struct</span>
      <span class="kwa">datatype</span> t <span class="sym">=</span>
	 Group <span class="kwa">of</span> <span class="sym">{</span>bound<span class="sym">:</span> Sphere.t<span class="sym">,</span>
		   scenes<span class="sym">:</span> t vector<span class="sym">}</span>
       <span class="sym">|</span> Sphere <span class="kwa">of</span> Sphere.t

      <span class="kwa">fun</span> doesIntersect <span class="sym">(</span>s<span class="sym">:</span> t<span class="sym">,</span> r<span class="sym">:</span> Ray.t<span class="sym">):</span> <span class="kwb">bool</span> <span class="sym">=</span>
	 <span class="kwa">let</span>
	    <span class="kwa">val rec</span> loop<span class="sym">:</span> t <span class="sym">-&gt;</span> <span class="kwb">bool</span> <span class="sym">=</span>
	       <span class="kwa">fn</span> Group <span class="sym">{</span>bound<span class="sym">,</span> scenes<span class="sym">} =&gt;</span>
	             Ray.doesHitSphere <span class="sym">(</span>r<span class="sym">,</span> bound<span class="sym">)</span>
		     <span class="kwa">andalso Vector</span>.exists loop scenes
		<span class="sym">|</span>  Sphere s <span class="sym">=&gt;</span> Ray.doesHitSphere <span class="sym">(</span>r<span class="sym">,</span> s<span class="sym">)</span>
	 <span class="kwa">in</span>
	    loop s
	 <span class="kwa">end</span>

      <span class="kwa">val</span> intersect<span class="sym">:</span> t <span class="sym">*</span> Ray.t <span class="sym">-&gt;</span> <span class="kwb">real</span> <span class="sym">*</span> Vec.t <span class="sym">=</span>
	 <span class="kwa">fn</span> <span class="sym">(</span>scene<span class="sym">,</span> r <span class="kwa">as</span> Ray.T <span class="sym">{</span>orig<span class="sym">,</span> dir<span class="sym">}) =&gt;</span>
	 <span class="kwa">let</span>
	    <span class="kwa">fun</span> loop <span class="sym">(</span>scene<span class="sym">, (</span>l<span class="sym">,</span> n<span class="sym">)) =</span>
	       <span class="kwa">case</span> scene <span class="kwa">of</span>
		  Group <span class="sym">{</span>bound<span class="sym">,</span> scenes<span class="sym">} =&gt;</span>
		     <span class="kwa">if</span> l <span class="sym">&lt;=</span> Ray.hitSphere <span class="sym">(</span>r<span class="sym">,</span> bound<span class="sym">)</span>
			<span class="kwa">then</span> <span class="sym">(</span>l<span class="sym">,</span> n<span class="sym">)</span>
		     <span class="kwa">else Vector</span>.foldl loop <span class="sym">(</span>l<span class="sym">,</span> n<span class="sym">)</span> scenes
		<span class="sym">|</span> Sphere <span class="sym">(</span>sphere <span class="kwa">as</span> Sphere.T <span class="sym">{</span>center<span class="sym">,</span> ...<span class="sym">}) =&gt;</span>
		     <span class="kwa">let</span>
			<span class="kwa">val</span> l' <span class="sym">=</span> Ray.hitSphere <span class="sym">(</span>r<span class="sym">,</span> sphere<span class="sym">)</span>
			<span class="kwa">open</span> Vec
		     <span class="kwa">in</span>
			<span class="kwa">if</span> l' <span class="sym">&gt;=</span> l <span class="kwa">then</span> <span class="sym">(</span>l<span class="sym">,</span> n<span class="sym">)</span>
			<span class="kwa">else</span> <span class="sym">(</span>l'<span class="sym">,</span> unitise <span class="sym">(</span>orig <span class="sym">+</span> scale <span class="sym">(</span>dir<span class="sym">,</span> l'<span class="sym">) -</span> center<span class="sym">))</span>
		     <span class="kwa">end</span>
	 <span class="kwa">in</span>
	    loop <span class="sym">(</span>scene<span class="sym">, (</span>infinity<span class="sym">,</span> Vec.origin<span class="sym">))</span>
	 <span class="kwa">end</span>

      <span class="kwa">val</span> negLight <span class="sym">=</span> Vec.unitise <span class="sym">(</span>Vec.T <span class="sym">(</span><span class="num">1.0</span><span class="sym">,</span> <span class="num">3.0</span><span class="sym">,</span> ~<span class="num">2.0</span><span class="sym">))</span>

      <span class="kwa">val</span> rayTrace<span class="sym">:</span> t <span class="sym">*</span> Ray.t <span class="sym">-&gt;</span> <span class="kwb">real</span> <span class="sym">=</span>
	 <span class="kwa">fn</span> <span class="sym">(</span>scene<span class="sym">,</span> ray <span class="kwa">as</span> Ray.T <span class="sym">{</span>dir<span class="sym">,</span> orig<span class="sym">}) =&gt;</span>
	 <span class="kwa">let</span>
	    <span class="kwa">val</span> <span class="sym">(</span>lambda<span class="sym">,</span> n<span class="sym">) =</span> intersect <span class="sym">(</span>scene<span class="sym">,</span> ray<span class="sym">)</span>
	 <span class="kwa">in</span>
	    <span class="kwa">if</span> lambda <span class="sym">&gt;=</span> infinity <span class="kwa">then</span> <span class="num">0.0</span>
	    <span class="kwa">else</span>
	       <span class="kwa">let</span>
		  <span class="kwa">val</span> g <span class="sym">=</span> Vec.dot <span class="sym">(</span>n<span class="sym">,</span> negLight<span class="sym">)</span>
	       <span class="kwa">in</span>
		  <span class="kwa">if</span> g <span class="sym">&lt;=</span> <span class="num">0.0</span> <span class="kwa">then</span> <span class="num">0.0</span>
		  <span class="kwa">else</span>
		     <span class="kwa">let</span>
			<span class="kwa">open</span> Vec
			<span class="kwa">val</span> orig <span class="sym">=</span> orig <span class="sym">+</span> scale <span class="sym">(</span>dir<span class="sym">,</span> lambda<span class="sym">) +</span> scale <span class="sym">(</span>n<span class="sym">,</span> delta<span class="sym">)</span>
		     <span class="kwa">in</span>
			<span class="kwa">if</span> doesIntersect <span class="sym">(</span>scene<span class="sym">,</span>
					  Ray.T <span class="sym">{</span>dir <span class="sym">=</span> negLight<span class="sym">,</span> orig <span class="sym">=</span> orig<span class="sym">})</span>
			   <span class="kwa">then</span> <span class="num">0.0</span>
			<span class="kwa">else</span> g
		     <span class="kwa">end</span>
	       <span class="kwa">end</span>
	 <span class="kwa">end</span>

      <span class="kwa">fun</span> bound <span class="sym">(</span>s<span class="sym">:</span> t<span class="sym">,</span> sphere <span class="kwa">as</span> Sphere.T <span class="sym">{</span>center <span class="sym">=</span> c<span class="sym">,</span> radius <span class="sym">=</span> r<span class="sym">}):</span> Sphere.t <span class="sym">=</span>
	 <span class="kwa">case</span> s <span class="kwa">of</span>
	    Group <span class="sym">{</span>scenes<span class="sym">,</span> ...<span class="sym">} =&gt;</span> <span class="kwa">Vector</span>.foldl bound sphere scenes
	  <span class="sym">|</span> Sphere <span class="sym">(</span>Sphere.T <span class="sym">{</span>center <span class="sym">=</span> c'<span class="sym">,</span> radius <span class="sym">=</span> r'<span class="sym">}) =&gt;</span>
	       Sphere.T <span class="sym">{</span>center <span class="sym">=</span> c<span class="sym">,</span>
			 radius <span class="sym">=</span> <span class="kwa">Real</span>.max <span class="sym">(</span>r<span class="sym">,</span> Vec.length <span class="sym">(</span>Vec.<span class="sym">- (</span>c<span class="sym">,</span> c'<span class="sym">)) +</span> r'<span class="sym">)}</span>

      <span class="kwa">fun</span> create <span class="sym">(</span>level<span class="sym">,</span> r<span class="sym">,</span> v<span class="sym">:</span> Vec.t<span class="sym">):</span> t <span class="sym">=</span>
	 <span class="kwa">let</span>
	    <span class="kwa">val</span> obj <span class="sym">=</span> Sphere <span class="sym">(</span>Sphere.T <span class="sym">{</span>center <span class="sym">=</span> v<span class="sym">,</span> radius <span class="sym">=</span> r<span class="sym">})</span>
	 <span class="kwa">in</span>
	    <span class="kwa">if</span> level <span class="sym">=</span> <span class="num">1</span> <span class="kwa">then</span> obj
	    <span class="kwa">else</span>
	       <span class="kwa">let</span>
		  <span class="kwa">val</span> r' <span class="sym">=</span> <span class="num">3.0</span> <span class="sym">*</span> r <span class="sym">/</span> Math.sqrt <span class="num">12.0</span>
		  <span class="kwa">fun</span> aux <span class="sym">(</span>x'<span class="sym">,</span> z'<span class="sym">) =</span>
		     create <span class="sym">(</span>level <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">0.5</span> <span class="sym">*</span> r<span class="sym">,</span> Vec.<span class="sym">+ (</span>v<span class="sym">,</span> Vec.T <span class="sym">(</span>~x'<span class="sym">,</span> r'<span class="sym">,</span> z'<span class="sym">)))</span>
		  <span class="kwa">val</span> scenes <span class="sym">=</span>
<span class="com">(*		     Vector.fromList [aux (r', r'), aux (~r', r'),</span>
<span class="com"> *				      aux (r', ~r'), aux (~r', ~r'), obj]</span>
<span class="com"> *)</span>
		     <span class="kwa">Vector</span>.fromList <span class="sym">[</span>obj<span class="sym">,</span> aux <span class="sym">(</span>~r'<span class="sym">,</span> ~r'<span class="sym">),</span> aux <span class="sym">(</span>r'<span class="sym">,</span> ~r'<span class="sym">),</span>
				      aux <span class="sym">(</span>~r'<span class="sym">,</span> r'<span class="sym">),</span> aux <span class="sym">(</span>r'<span class="sym">,</span> r'<span class="sym">)]</span>
		  <span class="kwa">val</span> bound <span class="sym">=</span>
		     <span class="kwa">Vector</span>.foldl bound
		     <span class="sym">(</span>Sphere.T <span class="sym">{</span>center <span class="sym">=</span> Vec.<span class="sym">+ (</span>v<span class="sym">,</span> Vec.T <span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> r<span class="sym">,</span> <span class="num">0.0</span><span class="sym">)),</span>
				radius <span class="sym">=</span> <span class="num">0.0</span><span class="sym">})</span>
		     scenes
	       <span class="kwa">in</span>
		  Group <span class="sym">{</span>bound <span class="sym">=</span> bound<span class="sym">,</span> scenes <span class="sym">=</span> scenes<span class="sym">}</span>
	       <span class="kwa">end</span>
	 <span class="kwa">end</span>
   <span class="kwa">end</span>

<span class="kwa">fun</span> fold2 <span class="sym">(</span>n<span class="sym">,</span> ac<span class="sym">,</span> f<span class="sym">) =</span>
   <span class="kwa">Int</span>.fold <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">,</span> ac<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">(</span>y<span class="sym">,</span> ac<span class="sym">) =&gt;</span>
	     <span class="kwa">let</span>
		<span class="kwa">val</span> y <span class="sym">=</span> <span class="kwb">real</span> y
	     <span class="kwa">in</span>
		<span class="kwa">Int</span>.fold <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">,</span> ac<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">(</span>x<span class="sym">,</span> ac<span class="sym">) =&gt;</span> f <span class="sym">(</span><span class="kwb">real</span> x<span class="sym">,</span> y<span class="sym">,</span> ac<span class="sym">))</span>
	     <span class="kwa">end</span><span class="sym">)</span>

<span class="kwa">fun</span> for2 <span class="sym">(</span>n<span class="sym">,</span> f<span class="sym">) =</span> fold2 <span class="sym">(</span>n<span class="sym">, (),</span> <span class="kwa">fn</span> <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">, ()) =&gt;</span> f <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">))</span>

<span class="kwa">fun</span> eyeRay <span class="sym">(</span>scene<span class="sym">,</span> n<span class="sym">,</span> ss<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> g<span class="sym">,</span> dx<span class="sym">,</span> dy<span class="sym">) =</span>
   <span class="kwa">let</span>
      <span class="kwa">val</span> dir <span class="sym">=</span> Vec.unitise <span class="sym">(</span>Vec.T <span class="sym">(</span>x <span class="sym">+</span> dx <span class="sym">/</span> ss<span class="sym">,</span> y <span class="sym">+</span> dy <span class="sym">/</span> ss<span class="sym">,</span> n<span class="sym">))</span>
   <span class="kwa">in</span>
      g <span class="sym">+</span> Scene.rayTrace <span class="sym">(</span>scene<span class="sym">,</span> Ray.T <span class="sym">{</span>dir <span class="sym">=</span> dir<span class="sym">,</span>
					orig <span class="sym">=</span> Vec.T <span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> ~<span class="num">4.0</span><span class="sym">)})</span>
   <span class="kwa">end</span>

<span class="kwa">fun</span> pixel <span class="sym">(</span>scene<span class="sym">,</span> n<span class="sym">,</span> ss<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">) =</span>
    <span class="kwa">let</span>
       <span class="kwa">val</span> <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">) = (</span>x <span class="sym">-</span> n <span class="sym">/</span> <span class="num">2.0</span><span class="sym">, (</span>n <span class="sym">-</span> <span class="num">2.0</span><span class="sym">) /</span> <span class="num">2.0</span> <span class="sym">-</span> y<span class="sym">)</span>
       <span class="kwa">val</span> g <span class="sym">=</span> fold2 <span class="sym">(</span>ss<span class="sym">,</span> <span class="num">0.0</span><span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">(</span>dx<span class="sym">,</span> dy<span class="sym">,</span> g<span class="sym">) =&gt;</span>
		      eyeRay <span class="sym">(</span>scene<span class="sym">,</span> n<span class="sym">,</span> <span class="kwb">real</span> ss<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">,</span> g<span class="sym">,</span> dx<span class="sym">,</span> dy<span class="sym">))</span>
    <span class="kwa">in</span>
       print <span class="sym">(</span>str <span class="sym">(</span>chr <span class="sym">(</span><span class="kwa">Real</span>.round <span class="sym">(</span><span class="num">255.0</span> <span class="sym">*</span> g <span class="sym">/</span> <span class="kwb">real</span> <span class="sym">(</span>ss <span class="sym">*</span> ss<span class="sym">)))))</span>
    <span class="kwa">end</span>

<span class="kwa">val</span> <span class="sym">() =</span>
   <span class="kwa">let</span>
      <span class="kwa">val</span> level <span class="sym">=</span> <span class="num">6</span>
      <span class="kwa">val</span> n <span class="sym">=</span> getOpt <span class="sym">(</span><span class="kwa">Int</span>.fromString <span class="sym">(</span><span class="kwa">List</span>.hd <span class="sym">(</span>CommandLine.arguments <span class="sym">())),</span> <span class="num">256</span><span class="sym">)</span>
      <span class="kwa">val</span> ss <span class="sym">=</span> <span class="num">4</span>
      <span class="kwa">val</span> scene <span class="sym">=</span> Scene.create <span class="sym">(</span>level<span class="sym">,</span> <span class="num">1.0</span><span class="sym">,</span> Vec.T <span class="sym">(</span><span class="num">0.0</span><span class="sym">,</span> ~<span class="num">1.0</span><span class="sym">,</span> <span class="num">0.0</span><span class="sym">))</span>
      <span class="kwa">val</span> s <span class="sym">=</span> <span class="kwa">Int</span>.toString n
      <span class="kwa">val</span> <span class="sym">() =</span> print <span class="sym">(</span>concat <span class="sym">[</span><span class="str">&quot;P5</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> s<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> s<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">255</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">])</span>
      <span class="kwa">val</span> n' <span class="sym">=</span> <span class="kwb">real</span> n
   <span class="kwa">in</span>
      for2 <span class="sym">(</span>n<span class="sym">,</span> <span class="kwa">fn</span> <span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">) =&gt;</span> pixel <span class="sym">(</span>scene<span class="sym">,</span> n'<span class="sym">,</span> ss<span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">))</span>
   <span class="kwa">end</span>
