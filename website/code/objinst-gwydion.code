<span class="kwb">module</span><span class="sym">:</span>     objinst
<span class="kwb">synopsis</span><span class="sym">:</span>   implementation of <span class="str">&quot;Object Instantiation&quot;</span> benchmark
<span class="kwb">author</span><span class="sym">:</span>     Peter Hinely
<span class="kwb">copyright</span><span class="sym">:</span>  public <span class="kwa">domain


define sealed domain</span> make <span class="sym">(</span><span class="kwa">subclass</span><span class="sym">(</span><span class="kwa">&lt;toggle&gt;</span><span class="sym">));
</span><span class="kwa">define sealed domain</span> initialize <span class="sym">(</span><span class="kwa">&lt;toggle&gt;</span><span class="sym">);


</span><span class="kwa">define class</span> <span class="kwa">&lt;toggle&gt;</span> <span class="sym">(</span><span class="kwa">&lt;object&gt;</span><span class="sym">)
</span>  <span class="kwa">slot</span> value <span class="sym">::</span> <span class="kwa">&lt;boolean&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> start<span class="sym">-</span>state<span class="sym">:;
</span><span class="kwa">end class</span><span class="sym">;


</span><span class="kwa">define class</span> <span class="kwa">&lt;nth-toggle&gt;</span> <span class="sym">(</span><span class="kwa">&lt;toggle&gt;</span><span class="sym">)
</span>  <span class="kwa">slot</span> counter <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>  <span class="kwa">slot</span> counter<span class="sym">-</span>maxiumum <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> counter<span class="sym">-</span>maxiumum<span class="sym">:;
</span><span class="kwa">end class</span><span class="sym">;


</span><span class="kwa">define method</span> activate <span class="sym">(</span>t <span class="sym">::</span> <span class="kwa">&lt;toggle&gt;</span><span class="sym">) =</span>&gt; t <span class="sym">::</span> <span class="kwa">&lt;toggle&gt;</span><span class="sym">;
</span>  t.value <span class="sym">:=</span> ~t.value<span class="sym">;
</span>  t<span class="sym">;
</span><span class="kwa">end method</span><span class="sym">;


</span><span class="kwa">define method</span> activate <span class="sym">(</span>t <span class="sym">::</span> <span class="kwa">&lt;nth-toggle&gt;</span><span class="sym">) =</span>&gt; t <span class="sym">::</span> <span class="kwa">&lt;toggle&gt;</span><span class="sym">;
</span>  t.counter <span class="sym">:=</span> t.counter <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>  <span class="kwa">if</span> <span class="sym">(</span>t.counter &gt;<span class="sym">=</span> t.counter<span class="sym">-</span>maxiumum<span class="sym">)
</span>    t.value <span class="sym">:=</span> ~t.value<span class="sym">;
</span>    t.counter <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>  <span class="kwa">end</span><span class="sym">;
</span>  t<span class="sym">;
</span><span class="kwa">end method</span><span class="sym">;


</span><span class="kwa">define function</span> main <span class="sym">()
</span>  <span class="kwa">let</span> arg <span class="sym">=</span> string<span class="sym">-</span><span class="kwa">to</span><span class="sym">-</span>integer<span class="sym">(</span>element<span class="sym">(</span>application<span class="sym">-</span>arguments<span class="sym">(),</span> <span class="num">0</span><span class="sym">,</span> default<span class="sym">:</span> <span class="str">&quot;1&quot;</span><span class="sym">));

</span>  <span class="kwa">let</span> toggle <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;toggle&gt;</span><span class="sym">,</span> start<span class="sym">-</span>state<span class="sym">:</span> #t<span class="sym">);

</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> <span class="num">5</span><span class="sym">)
</span>    format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwa">if</span> <span class="sym">(</span>activate<span class="sym">(</span>toggle<span class="sym">)</span>.value<span class="sym">)</span> <span class="str">&quot;true&quot;</span> <span class="kwa">else</span> <span class="str">&quot;false&quot;</span> <span class="kwa">end</span><span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;

</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> arg<span class="sym">)
</span>    toggle <span class="sym">:=</span> make<span class="sym">(</span><span class="kwa">&lt;toggle&gt;</span><span class="sym">,</span> start<span class="sym">-</span>state<span class="sym">:</span> #t<span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;

</span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);

</span>  <span class="kwa">let</span> nth<span class="sym">-</span>toggle <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;nth-toggle&gt;</span><span class="sym">,</span> start<span class="sym">-</span>state<span class="sym">:</span> #t<span class="sym">,</span> counter<span class="sym">-</span>maxiumum<span class="sym">:</span> <span class="num">3</span><span class="sym">);

</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> <span class="num">8</span><span class="sym">)
</span>    format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwa">if</span> <span class="sym">(</span>activate<span class="sym">(</span>nth<span class="sym">-</span>toggle<span class="sym">)</span>.value<span class="sym">)</span> <span class="str">&quot;true&quot;</span> <span class="kwa">else</span> <span class="str">&quot;false&quot;</span> <span class="kwa">end</span><span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;

</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">1</span> <span class="kwa">to</span> arg<span class="sym">)
</span>    nth<span class="sym">-</span>toggle <span class="sym">:=</span> make<span class="sym">(</span><span class="kwa">&lt;nth-toggle&gt;</span><span class="sym">,</span> start<span class="sym">-</span>state<span class="sym">:</span> #t<span class="sym">,</span> counter<span class="sym">-</span>maxiumum<span class="sym">:</span> <span class="num">3</span><span class="sym">);
</span>  <span class="kwa">end</span><span class="sym">;
</span><span class="kwa">end function</span> main<span class="sym">;


</span>main<span class="sym">();</span>
