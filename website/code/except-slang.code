<span class="sym">%</span> Stricly speaking<span class="sym">,</span> slang does <span class="kwa">not</span> have exceptions<span class="sym">.</span>  It uses error blocks<span class="sym">.
</span>variable HI <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> LO <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>variable  Hi_exception <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>variable  Lo_exception <span class="sym">=</span> <span class="num">2</span><span class="sym">;
</span>variable Exception<span class="sym">;

()=</span>fclose <span class="sym">(</span>stderr<span class="sym">);
</span>_traceback<span class="sym">=</span><span class="num">0</span><span class="sym">;
</span>define <span class="kwa">throw</span> <span class="sym">(</span>e<span class="sym">)
{
</span>   Exception <span class="sym">=</span> e<span class="sym">;
</span>   error <span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);
}

</span>define blowup <span class="sym">(</span>n<span class="sym">)
{
</span>   <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&amp;</span> <span class="num">1</span><span class="sym">)
</span>     <span class="kwa">throw</span> <span class="sym">(</span>Lo_exception<span class="sym">);

</span>   <span class="kwa">throw</span> <span class="sym">(</span>Hi_exception<span class="sym">);
}

</span>define lo_function <span class="sym">(</span>n<span class="sym">)
{
</span>   ERROR_BLOCK
     <span class="sym">{
</span>	<span class="kwa">if</span> <span class="sym">(</span>Exception <span class="sym">==</span> Lo_exception<span class="sym">)
	  {
</span>	     LO<span class="sym">++;
</span>	     _clear_error <span class="sym">();
	  }
     }
</span>   blowup<span class="sym">(</span>n<span class="sym">);
}

</span>define hi_function <span class="sym">(</span>n<span class="sym">)
{
</span>   ERROR_BLOCK
     <span class="sym">{
</span>	<span class="kwa">if</span> <span class="sym">(</span>Exception <span class="sym">==</span> Hi_exception<span class="sym">)
	  {
</span>	     HI<span class="sym">++;
</span>	     _clear_error <span class="sym">();
	  }
     }
</span>   lo_function<span class="sym">(</span>n<span class="sym">);
}

</span>define some_function <span class="sym">(</span>n<span class="sym">)
{
</span>   hi_function<span class="sym">(</span>n<span class="sym">);
}

</span>define main <span class="sym">()
{
</span>   variable N <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> N <span class="sym">=</span> integer <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);

</span>   <span class="kwa">while</span> <span class="sym">(</span>N<span class="sym">)
     {
</span>	some_function<span class="sym">(</span>N<span class="sym">);
</span>	N<span class="sym">--;
     }
</span>    fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;Exceptions: HI=%d / LO=%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> HI<span class="sym">,</span> LO<span class="sym">);
}
</span>main <span class="sym">();</span>
