<span class="line">    1 </span><span class="sym">%</span> Stricly speaking<span class="sym">,</span> slang does <span class="kwa">not</span> have exceptions<span class="sym">.</span>  It uses error blocks<span class="sym">.
</span><span class="line">    2 </span><span class="sym"></span>variable HI <span class="sym">=</span> <span class="num">0</span><span class="sym">,</span> LO <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">    3 </span><span class="sym"></span>variable  Hi_exception <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">    4 </span><span class="sym"></span>variable  Lo_exception <span class="sym">=</span> <span class="num">2</span><span class="sym">;
</span><span class="line">    5 </span><span class="sym"></span>variable Exception<span class="sym">;
</span><span class="line">    6 </span><span class="sym">
</span><span class="line">    7 </span><span class="sym">()=</span>fclose <span class="sym">(</span>stderr<span class="sym">);
</span><span class="line">    8 </span><span class="sym"></span>_traceback<span class="sym">=</span><span class="num">0</span><span class="sym">;
</span><span class="line">    9 </span><span class="sym"></span>define <span class="kwa">throw</span> <span class="sym">(</span>e<span class="sym">)
</span><span class="line">   10 </span><span class="sym">{
</span><span class="line">   11 </span><span class="sym"></span>   Exception <span class="sym">=</span> e<span class="sym">;
</span><span class="line">   12 </span><span class="sym"></span>   error <span class="sym">(</span><span class="str">&quot;&quot;</span><span class="sym">);
</span><span class="line">   13 </span><span class="sym">}
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym"></span>define blowup <span class="sym">(</span>n<span class="sym">)
</span><span class="line">   16 </span><span class="sym">{
</span><span class="line">   17 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>n <span class="sym">&amp;</span> <span class="num">1</span><span class="sym">)
</span><span class="line">   18 </span><span class="sym"></span>     <span class="kwa">throw</span> <span class="sym">(</span>Lo_exception<span class="sym">);
</span><span class="line">   19 </span><span class="sym">
</span><span class="line">   20 </span><span class="sym"></span>   <span class="kwa">throw</span> <span class="sym">(</span>Hi_exception<span class="sym">);
</span><span class="line">   21 </span><span class="sym">}
</span><span class="line">   22 </span><span class="sym">
</span><span class="line">   23 </span><span class="sym"></span>define lo_function <span class="sym">(</span>n<span class="sym">)
</span><span class="line">   24 </span><span class="sym">{
</span><span class="line">   25 </span><span class="sym"></span>   ERROR_BLOCK
<span class="line">   26 </span>     <span class="sym">{
</span><span class="line">   27 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>Exception <span class="sym">==</span> Lo_exception<span class="sym">)
</span><span class="line">   28 </span><span class="sym">          {
</span><span class="line">   29 </span><span class="sym"></span>             LO<span class="sym">++;
</span><span class="line">   30 </span><span class="sym"></span>             _clear_error <span class="sym">();
</span><span class="line">   31 </span><span class="sym">          }
</span><span class="line">   32 </span><span class="sym">     }
</span><span class="line">   33 </span><span class="sym"></span>   blowup<span class="sym">(</span>n<span class="sym">);
</span><span class="line">   34 </span><span class="sym">}
</span><span class="line">   35 </span><span class="sym">
</span><span class="line">   36 </span><span class="sym"></span>define hi_function <span class="sym">(</span>n<span class="sym">)
</span><span class="line">   37 </span><span class="sym">{
</span><span class="line">   38 </span><span class="sym"></span>   ERROR_BLOCK
<span class="line">   39 </span>     <span class="sym">{
</span><span class="line">   40 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>Exception <span class="sym">==</span> Hi_exception<span class="sym">)
</span><span class="line">   41 </span><span class="sym">          {
</span><span class="line">   42 </span><span class="sym"></span>             HI<span class="sym">++;
</span><span class="line">   43 </span><span class="sym"></span>             _clear_error <span class="sym">();
</span><span class="line">   44 </span><span class="sym">          }
</span><span class="line">   45 </span><span class="sym">     }
</span><span class="line">   46 </span><span class="sym"></span>   lo_function<span class="sym">(</span>n<span class="sym">);
</span><span class="line">   47 </span><span class="sym">}
</span><span class="line">   48 </span><span class="sym">
</span><span class="line">   49 </span><span class="sym"></span>define some_function <span class="sym">(</span>n<span class="sym">)
</span><span class="line">   50 </span><span class="sym">{
</span><span class="line">   51 </span><span class="sym"></span>   hi_function<span class="sym">(</span>n<span class="sym">);
</span><span class="line">   52 </span><span class="sym">}
</span><span class="line">   53 </span><span class="sym">
</span><span class="line">   54 </span><span class="sym"></span>define main <span class="sym">()
</span><span class="line">   55 </span><span class="sym">{
</span><span class="line">   56 </span><span class="sym"></span>   variable N <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   57 </span><span class="sym"></span>   <span class="kwa">if</span> <span class="sym">(</span>__argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> N <span class="sym">=</span> integer <span class="sym">(</span>__argv<span class="sym">[</span><span class="num">1</span><span class="sym">]);
</span><span class="line">   58 </span><span class="sym">
</span><span class="line">   59 </span><span class="sym"></span>   <span class="kwa">while</span> <span class="sym">(</span>N<span class="sym">)
</span><span class="line">   60 </span><span class="sym">     {
</span><span class="line">   61 </span><span class="sym"></span>        some_function<span class="sym">(</span>N<span class="sym">);
</span><span class="line">   62 </span><span class="sym"></span>        N<span class="sym">--;
</span><span class="line">   63 </span><span class="sym">     }
</span><span class="line">   64 </span><span class="sym"></span>    fprintf <span class="sym">(</span>stdout<span class="sym">,</span> <span class="str">&quot;Exceptions: HI=%d / LO=%d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> HI<span class="sym">,</span> LO<span class="sym">);
</span><span class="line">   65 </span><span class="sym">}
</span><span class="line">   66 </span><span class="sym"></span>main <span class="sym">();</span>
