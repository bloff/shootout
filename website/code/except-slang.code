<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
% Stricly speaking, slang does not have exceptions.  It uses error blocks.
variable HI = 0, LO = 0;
variable  Hi_exception = 1;
variable  Lo_exception = 2;
variable Exception;

()=fclose (stderr);
_traceback=0;
define <B><FONT COLOR="#0000FF">throw</FONT></B> (e)
{
   Exception = e;
   error (<B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B>);
}
 
define <B><FONT COLOR="#0000FF">blowup</FONT></B> (n) 
{
   <B><FONT COLOR="#A020F0">if</FONT></B> (n &amp; 1) 
     throw (Lo_exception);

   throw (Hi_exception);
}

define <B><FONT COLOR="#0000FF">lo_function</FONT></B> (n)
{
   ERROR_BLOCK
     {
	<B><FONT COLOR="#A020F0">if</FONT></B> (Exception == Lo_exception)
	  {
	     LO++;
	     _clear_error ();
	  }
     }
   blowup(n);
}

define <B><FONT COLOR="#0000FF">hi_function</FONT></B> (n)
{
   ERROR_BLOCK
     {
	<B><FONT COLOR="#A020F0">if</FONT></B> (Exception == Hi_exception)
	  {
	     HI++;
	     _clear_error ();
	  }
     }
   lo_function(n);
}

define <B><FONT COLOR="#0000FF">some_function</FONT></B> (n)
{
   hi_function(n);
}

define <B><FONT COLOR="#0000FF">main</FONT></B> ()
{
   variable N = 1;
   <B><FONT COLOR="#A020F0">if</FONT></B> (__argc == 2) N = integer (__argv[1]);

   <B><FONT COLOR="#A020F0">while</FONT></B> (N) 
     {
	some_function(N);
	N--;
     }
    fprintf (stdout, <B><FONT COLOR="#BC8F8F">&quot;Exceptions: HI=%d / LO=%d\n&quot;</FONT></B>, HI, LO);
}
<B><FONT COLOR="#0000FF">main</FONT></B> ();</pre></td></tr></table>
