<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">//
</FONT></I><I><FONT COLOR="#B22222">// Contributed by John Skaller
</FONT></I><I><FONT COLOR="#B22222">//
</FONT></I>include <B><FONT COLOR="#BC8F8F">&quot;std&quot;</FONT></B>;
n := atoi(System::argv 1);
include <B><FONT COLOR="#BC8F8F">&quot;stl&quot;</FONT></B>;
open Stl;
open Stl::HashMap;
open Text_file;
open Lexer;

requires ext_string_hash;

regexp upper = [<B><FONT COLOR="#BC8F8F">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</FONT></B>];
regexp lower = [<B><FONT COLOR="#BC8F8F">&quot;abcdefghijklmnopqrstuvwxyz&quot;</FONT></B>];
regexp wrd = ( upper | lower) +;

fun <B><FONT COLOR="#0000FF">lexit</FONT></B> (start:iterator, finish:iterator): iterator * bool =&gt;
  reglex start to finish with
  | wrd =&gt; true
  | _ =&gt; false
  endmatch
;

var dict = HashMap::create[string,<B><FONT COLOR="#228B22">int</FONT></B>]();
proc <B><FONT COLOR="#0000FF">add_word</FONT></B>(s:iterator, e:iterator)
{
  word := string_between(s,e);
  p := find (dict,word);
  <B><FONT COLOR="#A020F0">if</FONT></B> p == end dict <B><FONT COLOR="#A020F0">do</FONT></B>
    insert (dict,word,1);
  <B><FONT COLOR="#A020F0">else</FONT></B>
    k,j := deref p;
    insert (dict, word, j + 1);
  done;
}

var data = readln stdin;
until data == <B><FONT COLOR="#BC8F8F">&quot;&quot;</FONT></B> <B><FONT COLOR="#A020F0">do</FONT></B>
  first := start_iterator data;
  last := end_iterator data;

  var current = first;
  var next = first;
  var isword : bool;
  until current == last <B><FONT COLOR="#A020F0">do</FONT></B>
    next, isword = lexit(current, last);
    <B><FONT COLOR="#A020F0">if</FONT></B> isword <B><FONT COLOR="#A020F0">do</FONT></B>
      add_word(current,next);
      current = next;
    <B><FONT COLOR="#A020F0">else</FONT></B>
      ++current;
    done;
  done;
  data = readln stdin;
done;
</pre></td></tr></table>
