<span class="line">    1 </span><span class="slc">//
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// Contributed by John Skaller
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">//
</span><span class="line">    4 </span><span class="slc"></span><span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;
</span><span class="line">    5 </span><span class="sym"></span>n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);
</span><span class="line">    6 </span><span class="sym"></span><span class="kwa">include</span> <span class="str">&quot;stl&quot;</span><span class="sym">;
</span><span class="line">    7 </span><span class="sym"></span><span class="kwa">open</span> Stl<span class="sym">;
</span><span class="line">    8 </span><span class="sym"></span><span class="kwa">open</span> Stl<span class="sym">::</span>HashMap<span class="sym">;
</span><span class="line">    9 </span><span class="sym"></span><span class="kwa">open</span> Text_file<span class="sym">;
</span><span class="line">   10 </span><span class="sym"></span><span class="kwa">open</span> Lexer<span class="sym">;
</span><span class="line">   11 </span><span class="sym">
</span><span class="line">   12 </span><span class="sym"></span>requires ext_string_hash<span class="sym">;
</span><span class="line">   13 </span><span class="sym">
</span><span class="line">   14 </span><span class="sym"></span><span class="kwa">regexp</span> upper <span class="sym">= [</span><span class="str">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="sym">];
</span><span class="line">   15 </span><span class="sym"></span><span class="kwa">regexp</span> lower <span class="sym">= [</span><span class="str">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><span class="sym">];
</span><span class="line">   16 </span><span class="sym"></span><span class="kwa">regexp</span> wrd <span class="sym">= (</span> upper <span class="sym">|</span> lower<span class="sym">) +;
</span><span class="line">   17 </span><span class="sym">
</span><span class="line">   18 </span><span class="sym"></span><span class="kwa">fun</span> lexit <span class="sym">(</span>start<span class="sym">:</span>iterator<span class="sym">,</span> finish<span class="sym">:</span>iterator<span class="sym">):</span> iterator <span class="sym">*</span> <span class="kwb">bool</span> <span class="sym">=&gt;
</span><span class="line">   19 </span><span class="sym"></span>  reglex start <span class="kwa">to</span> finish <span class="kwa">with
</span><span class="line">   20 </span><span class="kwa"></span>  <span class="sym">|</span> wrd <span class="sym">=&gt;</span> <span class="kwa">true
</span><span class="line">   21 </span><span class="kwa"></span>  <span class="sym">|</span> _ <span class="sym">=&gt;</span> <span class="kwa">false
</span><span class="line">   22 </span><span class="kwa">  endmatch
</span><span class="line">   23 </span><span class="kwa"></span><span class="sym">;
</span><span class="line">   24 </span><span class="sym">
</span><span class="line">   25 </span><span class="sym"></span><span class="kwa">var</span> dict <span class="sym">=</span> HashMap<span class="sym">::</span>create<span class="sym">[</span><span class="kwb">string</span><span class="sym">,</span><span class="kwb">int</span><span class="sym">]();
</span><span class="line">   26 </span><span class="sym"></span><span class="kwa">proc</span> add_word<span class="sym">(</span>s<span class="sym">:</span>iterator<span class="sym">,</span> e<span class="sym">:</span>iterator<span class="sym">)
</span><span class="line">   27 </span><span class="sym">{
</span><span class="line">   28 </span><span class="sym"></span>  word <span class="sym">:=</span> string_between<span class="sym">(</span>s<span class="sym">,</span>e<span class="sym">);
</span><span class="line">   29 </span><span class="sym"></span>  p <span class="sym">:=</span> find <span class="sym">(</span>dict<span class="sym">,</span>word<span class="sym">);
</span><span class="line">   30 </span><span class="sym"></span>  <span class="kwa">if</span> p <span class="sym">==</span> end dict do
<span class="line">   31 </span>    insert <span class="sym">(</span>dict<span class="sym">,</span>word<span class="sym">,</span><span class="num">1</span><span class="sym">);
</span><span class="line">   32 </span><span class="sym"></span>  <span class="kwa">else
</span><span class="line">   33 </span><span class="kwa"></span>    k<span class="sym">,</span>j <span class="sym">:=</span> deref p<span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span>    insert <span class="sym">(</span>dict<span class="sym">,</span> word<span class="sym">,</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   35 </span><span class="sym"></span>  done<span class="sym">;
</span><span class="line">   36 </span><span class="sym">}
</span><span class="line">   37 </span><span class="sym">
</span><span class="line">   38 </span><span class="sym"></span><span class="kwa">var</span> data <span class="sym">=</span> readln stdin<span class="sym">;
</span><span class="line">   39 </span><span class="sym"></span>until data <span class="sym">==</span> <span class="str">&quot;&quot;</span> do
<span class="line">   40 </span>  first <span class="sym">:=</span> start_iterator data<span class="sym">;
</span><span class="line">   41 </span><span class="sym"></span>  last <span class="sym">:=</span> end_iterator data<span class="sym">;
</span><span class="line">   42 </span><span class="sym">
</span><span class="line">   43 </span><span class="sym"></span>  <span class="kwa">var</span> current <span class="sym">=</span> first<span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>  <span class="kwa">var</span> next <span class="sym">=</span> first<span class="sym">;
</span><span class="line">   45 </span><span class="sym"></span>  <span class="kwa">var</span> isword <span class="sym">:</span> <span class="kwb">bool</span><span class="sym">;
</span><span class="line">   46 </span><span class="sym"></span>  until current <span class="sym">==</span> last do
<span class="line">   47 </span>    next<span class="sym">,</span> isword <span class="sym">=</span> lexit<span class="sym">(</span>current<span class="sym">,</span> last<span class="sym">);
</span><span class="line">   48 </span><span class="sym"></span>    <span class="kwa">if</span> isword do
<span class="line">   49 </span>      add_word<span class="sym">(</span>current<span class="sym">,</span>next<span class="sym">);
</span><span class="line">   50 </span><span class="sym"></span>      current <span class="sym">=</span> next<span class="sym">;
</span><span class="line">   51 </span><span class="sym"></span>    <span class="kwa">else
</span><span class="line">   52 </span><span class="kwa"></span>      <span class="sym">++</span>current<span class="sym">;
</span><span class="line">   53 </span><span class="sym"></span>    done<span class="sym">;
</span><span class="line">   54 </span><span class="sym"></span>  done<span class="sym">;
</span><span class="line">   55 </span><span class="sym"></span>  data <span class="sym">=</span> readln stdin<span class="sym">;
</span><span class="line">   56 </span><span class="sym"></span>done<span class="sym">;
</span><span class="line">   57 </span><span class="sym"></span>
