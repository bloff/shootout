<span class="slc">//</span>
<span class="slc">// Contributed by John Skaller</span>
<span class="slc">//</span>
<span class="kwa">include</span> <span class="str">&quot;std&quot;</span><span class="sym">;</span>
n <span class="sym">:=</span> atoi<span class="sym">(</span>System<span class="sym">::</span>argv <span class="num">1</span><span class="sym">);</span>
<span class="kwa">include</span> <span class="str">&quot;stl&quot;</span><span class="sym">;</span>
<span class="kwa">open</span> Stl<span class="sym">;</span>
<span class="kwa">open</span> Stl<span class="sym">::</span>HashMap<span class="sym">;</span>
<span class="kwa">open</span> Stl<span class="sym">::</span>Set<span class="sym">;</span>
<span class="kwa">open</span> Text_file<span class="sym">;</span>
<span class="kwa">open</span> Lexer<span class="sym">;</span>

<span class="kwa">body</span> lt_cmp<span class="sym">[</span>t<span class="sym">]</span> <span class="str">&quot;&quot;&quot;</span>
<span class="str">  namespace std {</span>
<span class="str">    template&lt;&gt;</span>
<span class="str">    bool less&lt;?1&gt; :: operator()(?1 const &amp;a, ?1 const &amp;b)const {</span>
<span class="str">     return a.mem_0 == b.mem_0 ?? a.mem_1 &lt; b.mem_1 : a.mem_0 &gt; b.mem_0;</span>
<span class="str">    }</span>
<span class="str">  }</span>
<span class="str">&quot;&quot;&quot;</span><span class="sym">;</span>

<span class="kwa">proc</span> tolower <span class="sym">:</span> lvalue<span class="sym">[</span><span class="kwb">string</span><span class="sym">] =</span> <span class="str">&quot;tol($1);&quot;</span> requires
  <span class="kwa">body</span> <span class="str">&quot;&quot;&quot;</span>
<span class="str">    void tol(std::string &amp;x) {</span>
<span class="str">      std::string::iterator e = x.end();</span>
<span class="str">      for(std::string::iterator i = x.begin(); i != e; ++i)</span>
<span class="str">        *i = tolower (*i);</span>
<span class="str">    }</span>
<span class="str">  &quot;&quot;&quot;</span><span class="sym">,</span>
  cctype_hxx
<span class="sym">;</span>

requires ext_string_hash<span class="sym">;</span>
requires lt_cmp<span class="sym">[</span><span class="kwb">int</span> <span class="sym">*</span> <span class="kwb">string</span><span class="sym">];</span>

<span class="kwa">regexp</span> upper <span class="sym">= [</span><span class="str">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="sym">];</span>
<span class="kwa">regexp</span> lower <span class="sym">= [</span><span class="str">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><span class="sym">];</span>
<span class="kwa">regexp</span> wrd <span class="sym">= (</span> upper <span class="sym">|</span> lower<span class="sym">) +;</span>

<span class="kwa">fun</span> lexit <span class="sym">(</span>start<span class="sym">:</span>iterator<span class="sym">,</span> finish<span class="sym">:</span>iterator<span class="sym">):</span> iterator <span class="sym">*</span> <span class="kwb">bool</span> <span class="sym">=&gt;</span>
  reglex start <span class="kwa">to</span> finish <span class="kwa">with</span>
  <span class="sym">|</span> wrd <span class="sym">=&gt;</span> <span class="kwa">true</span>
  <span class="sym">|</span> _ <span class="sym">=&gt;</span> <span class="kwa">false</span>
  <span class="kwa">endmatch</span>
<span class="sym">;</span>

<span class="kwa">var</span> dict <span class="sym">=</span> HashMap<span class="sym">::</span>create<span class="sym">[</span><span class="kwb">string</span><span class="sym">,</span><span class="kwb">int</span><span class="sym">]();</span>
<span class="kwa">proc</span> add_word<span class="sym">(</span>s<span class="sym">:</span>iterator<span class="sym">,</span> e<span class="sym">:</span>iterator<span class="sym">)</span>
<span class="sym">{</span>
  <span class="kwa">var</span> word <span class="sym">=</span> string_between<span class="sym">(</span>s<span class="sym">,</span>e<span class="sym">);</span>
  tolower word<span class="sym">;</span>
  p <span class="sym">:=</span> find <span class="sym">(</span>dict<span class="sym">,</span>word<span class="sym">);</span>
  <span class="kwa">if</span> p <span class="sym">==</span> end dict do
    insert <span class="sym">(</span>dict<span class="sym">,</span>word<span class="sym">,</span><span class="num">1</span><span class="sym">);</span>
  <span class="kwa">else</span>
    k<span class="sym">,</span>j <span class="sym">:=</span> deref p<span class="sym">;</span>
    <span class="sym">(</span>deref p<span class="sym">)</span>.<span class="sym">(</span><span class="num">1</span><span class="sym">) ++;</span>
  done<span class="sym">;</span>
<span class="sym">};</span>

<span class="sym">{</span>
  <span class="kwa">var</span> data <span class="sym">=</span> readln stdin<span class="sym">;</span>
  until data <span class="sym">==</span> <span class="str">&quot;&quot;</span> do
    first <span class="sym">:=</span> start_iterator data<span class="sym">;</span>
    last <span class="sym">:=</span> end_iterator data<span class="sym">;</span>

    <span class="kwa">var</span> current <span class="sym">=</span> first<span class="sym">;</span>
    <span class="kwa">var</span> next <span class="sym">=</span> first<span class="sym">;</span>
    <span class="kwa">var</span> isword <span class="sym">:</span> <span class="kwb">bool</span><span class="sym">;</span>
    until current <span class="sym">==</span> last do
      next<span class="sym">,</span> isword <span class="sym">=</span> lexit<span class="sym">(</span>current<span class="sym">,</span> last<span class="sym">);</span>
      <span class="kwa">if</span> isword do
        add_word<span class="sym">(</span>current<span class="sym">,</span>next<span class="sym">);</span>
        current <span class="sym">=</span> next<span class="sym">;</span>
      <span class="kwa">else</span>
        <span class="sym">++</span>current<span class="sym">;</span>
      done<span class="sym">;</span>
    done<span class="sym">;</span>
    data <span class="sym">=</span> readln stdin<span class="sym">;</span>
  done<span class="sym">;</span>
<span class="sym">};</span>

<span class="kwa">var</span> wmap <span class="sym">=</span> Set<span class="sym">::</span>create<span class="sym">[</span><span class="kwb">int</span> <span class="sym">*</span> <span class="kwb">string</span><span class="sym">] ();</span>
<span class="sym">{</span>
  <span class="kwa">var</span> cur <span class="sym">=</span> begin dict<span class="sym">;</span>
  dlast <span class="sym">:=</span> end dict<span class="sym">;</span>
  until cur <span class="sym">==</span> dlast do
    word<span class="sym">,</span> count <span class="sym">:=</span> deref cur<span class="sym">;</span>
    insert <span class="sym">(</span>wmap<span class="sym">,(</span>count<span class="sym">,</span>word<span class="sym">));</span>
    <span class="sym">++</span>cur<span class="sym">;</span>
  done<span class="sym">;</span>
<span class="sym">};</span>

<span class="sym">{</span>
  <span class="kwa">var</span> cur <span class="sym">=</span> begin wmap<span class="sym">;</span>
  last <span class="sym">:=</span> end wmap<span class="sym">;</span>
  until cur <span class="sym">==</span> last do
    count<span class="sym">,</span> word <span class="sym">:=</span> deref cur<span class="sym">;</span>
    <span class="kwa">print</span> <span class="sym">(</span><span class="str">&quot;       &quot;</span> <span class="sym">+</span> str count<span class="sym">)</span>.<span class="sym">[-</span><span class="num">7</span> <span class="kwa">to</span><span class="sym">];</span> <span class="kwa">print</span> <span class="str">&quot; &quot;</span><span class="sym">;</span> <span class="kwa">print</span> word<span class="sym">;</span> <span class="kwa">endl</span><span class="sym">;</span>
    <span class="sym">++</span>cur<span class="sym">;</span>
  done<span class="sym">;</span>
<span class="sym">};</span>

