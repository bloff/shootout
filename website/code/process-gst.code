<span class="str">&quot;  The Great Computer Language Shootout</span>
<span class="str">   http://shootout.alioth.debian.org/</span>
<span class="str"></span>
<span class="str">   contributed by Isaac Gouy</span>
<span class="str"></span>
<span class="str">   To run: gst -QI /usr/local/share/smalltalk/gst.im process.st -a 10</span>
<span class="str">&quot;</span>


Object subclass<span class="sym">:</span> <span class="slc">#LinkedProcess</span>
instanceVariableNames<span class="sym">:</span> <span class="str">'message next sum'</span>
classVariableNames<span class="sym">:</span> <span class="str">''</span>
poolDictionaries<span class="sym">:</span> <span class="str">''</span>
category<span class="sym">:</span> nil <span class="sym">!</span>

<span class="sym">!</span>LinkedProcess class methodsFor<span class="sym">:</span> <span class="str">'instance creation'</span><span class="sym">!</span>

with<span class="sym">:</span> aLinkedProcess
   ^self new initializeWith<span class="sym">:</span> aLinkedProcess <span class="sym">! !</span>


<span class="sym">!</span>LinkedProcess methodsFor<span class="sym">:</span> <span class="str">'initialize-release'</span><span class="sym">!</span>

initializeWith<span class="sym">:</span> aLinkedProcess
   <span class="kwa">next</span> <span class="sym">:=</span> aLinkedProcess.
   message <span class="sym">:=</span> SharedQueue new.
   sum <span class="sym">:=</span> <span class="num">0</span> <span class="sym">! !</span>

<span class="sym">!</span>LinkedProcess methodsFor<span class="sym">:</span> <span class="str">'accessing'</span><span class="sym">!</span>

put<span class="sym">:</span> aValue
   message nextPut<span class="sym">:</span> aValue <span class="sym">!</span>

take
   ^message <span class="kwa">next</span> <span class="sym">+</span> <span class="num">1</span> <span class="sym">!</span>

sum
   ^sum <span class="sym">! !</span>

<span class="sym">!</span>LinkedProcess methodsFor<span class="sym">:</span> <span class="str">'run'</span><span class="sym">!</span>

runUntil<span class="sym">:</span> anInteger then<span class="sym">:</span> aSemaphore
   <span class="sym">[</span>
      <span class="kwa">next</span><span class="sym">==</span>nil <span class="str">&quot;the last process checks if we're finished&quot;</span>
         ifTrue<span class="sym">: [</span>
            sum <span class="sym">:=</span> sum <span class="sym">+</span> self take.
            <span class="sym">(</span>sum <span class="sym">&lt;</span> anInteger<span class="sym">)</span> ifFalse<span class="sym">: [</span>aSemaphore signal<span class="sym">] ]</span>

         ifFalse<span class="sym">: [</span>
            <span class="kwa">next</span> put<span class="sym">:</span> self take<span class="sym">]</span>.

      Processor yield <span class="str">&quot;give other processes a chance to run&quot;</span>
   <span class="sym">]</span> repeat <span class="sym">! !</span>


<span class="sym">|</span> n join <span class="kwa">last</span> p <span class="sym">|</span>
n <span class="sym">:=</span> Smalltalk arguments first asInteger.
join <span class="sym">:=</span> Semaphore new.

n timesRepeat<span class="sym">: [</span>
   p <span class="sym">:=</span> LinkedProcess with<span class="sym">:</span> p.
   <span class="kwa">last</span> isNil ifTrue<span class="sym">: [</span><span class="kwa">last</span> <span class="sym">:=</span> p<span class="sym">]</span>.
   <span class="sym">[</span>p runUntil<span class="sym">:</span> n then<span class="sym">:</span> join<span class="sym">]</span> fork.
<span class="sym">]</span>.
p put<span class="sym">:</span> <span class="num">0</span>.

join wait.
<span class="kwa">last</span> sum displayNl<span class="sym">!</span>
