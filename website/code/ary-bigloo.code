<span class="slc">;;; -*- mode: scheme -*-</span>
<span class="slc">;;; $Id: ary-bigloo.code,v 1.7 2006-09-20 05:51:00 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>

<span class="slc">;;; this program is modified from:</span>
<span class="slc">;;;   http://cm.bell-labs.com/cm/cs/who/bwk/interps/pap.html</span>
<span class="slc">;;; Timing Trials, or, the Trials of Timing: Experiments with Scripting</span>
<span class="slc">;;; and User-Interface Languages&lt;/a&gt; by Brian W. Kernighan and</span>
<span class="slc">;;; Christopher J. Van Wyk.</span>

<span class="sym">(</span>module ary
	<span class="sym">(</span>main main<span class="sym">)</span>
	<span class="sym">(</span>option <span class="sym">(</span><span class="kwa">set</span><span class="sym">! *</span>genericity<span class="sym">*</span> #f<span class="sym">)))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">))</span>
	 <span class="sym">(</span>x <span class="sym">(</span>make<span class="sym">-</span>vector n <span class="num">0</span><span class="sym">))</span>
	 <span class="sym">(</span>y <span class="sym">(</span>make<span class="sym">-</span>vector n <span class="num">0</span><span class="sym">))</span>
	 <span class="sym">(</span><span class="kwa">last</span> <span class="sym">(-</span> n <span class="num">1</span><span class="sym">)))</span>
    <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
	<span class="sym">((=</span> i n<span class="sym">))</span>
      <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> x i <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))</span>
    <span class="sym">(</span>do <span class="sym">((</span>k <span class="num">0</span> <span class="sym">(+</span> k <span class="num">1</span><span class="sym">)))</span>
	<span class="sym">((=</span> k <span class="num">1000</span><span class="sym">))</span>
      <span class="sym">(</span>do <span class="sym">((</span>i <span class="kwa">last</span> <span class="sym">(-</span> i <span class="num">1</span><span class="sym">)))</span>
	  <span class="sym">((&lt;</span> i <span class="num">0</span><span class="sym">))</span>
	<span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> y i <span class="sym">(+ (</span>vector<span class="sym">-</span>ref x i<span class="sym">) (</span>vector<span class="sym">-</span>ref y i<span class="sym">)))))</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span><span class="kwa">list</span> <span class="sym">(</span>vector<span class="sym">-</span>ref y <span class="num">0</span><span class="sym">)</span> <span class="str">&quot; &quot;</span> <span class="sym">(</span>vector<span class="sym">-</span>ref y <span class="kwa">last</span><span class="sym">))))</span>

<span class="sym">(</span>define <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span><span class="kwa">list</span> . items<span class="sym">) (</span>for<span class="sym">-</span>each display items<span class="sym">) (</span>newline<span class="sym">))</span>
