#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>qu

<span class="sym">(</span>module hash2 mzscheme
  <span class="sym">(</span>define <span class="sym">(</span>main argv<span class="sym">)</span>
    <span class="sym">(</span>let<span class="sym">* ([</span>n <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref argv <span class="num">0</span><span class="sym">))]</span>
	   <span class="sym">[</span>hash1 <span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="str">'equal)]</span>
<span class="str">	   [hash2 (make-hash-table '</span><span class="kwa">equal</span><span class="sym">)]</span>
	   <span class="sym">[</span>zero <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">()</span> <span class="num">0</span><span class="sym">)])</span>
      <span class="sym">(</span>let loop <span class="sym">([</span>i <span class="num">0</span><span class="sym">])</span>
	<span class="sym">(</span>unless <span class="sym">(=</span> i <span class="num">10000</span><span class="sym">)</span>
	  <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>put<span class="sym">!</span> hash1 <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span> <span class="str">&quot;foo_&quot;</span> <span class="sym">(</span>number<span class="sym">-&gt;</span>string i<span class="sym">))</span> i<span class="sym">)</span>
	  <span class="sym">(</span>loop <span class="sym">(</span>add1 i<span class="sym">))))</span>
      <span class="sym">(</span>let loop <span class="sym">([</span>i <span class="num">0</span><span class="sym">])</span>
	<span class="sym">(</span>unless <span class="sym">(=</span> i n<span class="sym">)</span>
	  <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>for<span class="sym">-</span>each hash1 <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>key value<span class="sym">)</span>
				       <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>put<span class="sym">!</span>
					hash2
					key
					<span class="sym">(+ (</span>hash<span class="sym">-</span>table<span class="sym">-</span>get hash2 key zero<span class="sym">)</span> value<span class="sym">))))</span>
	  <span class="sym">(</span>loop <span class="sym">(</span>add1 i<span class="sym">))))</span>
      <span class="sym">(</span>printf <span class="str">&quot;~s ~s ~s ~s~n&quot;</span>
	      <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>get hash1 <span class="str">&quot;foo_1&quot;</span><span class="sym">)</span>
	      <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>get hash1 <span class="str">&quot;foo_9999&quot;</span><span class="sym">)</span>
	      <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>get hash2 <span class="str">&quot;foo_1&quot;</span><span class="sym">)</span>
	      <span class="sym">(</span>hash<span class="sym">-</span>table<span class="sym">-</span>get hash2 <span class="str">&quot;foo_9999&quot;</span><span class="sym">))))</span>

  <span class="sym">(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)))</span>
