<span class="slc">// The Great Computer Language Shootout
</span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="slc">//
</span><span class="slc">// modified by Isaac Gouy
</span>

<span class="kwa">function</span> pad<span class="sym">(</span>number<span class="sym">,</span>width<span class="sym">){
</span>   <span class="kwa">var</span> s <span class="sym">=</span> number.toString<span class="sym">();
</span>   <span class="kwa">var</span> prefixWidth <span class="sym">=</span> width <span class="sym">-</span> s.length<span class="sym">;
</span>   <span class="kwa">if</span> <span class="sym">(</span>prefixWidth<span class="sym">&gt;</span><span class="num">0</span><span class="sym">){
</span>      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">var</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>prefixWidth<span class="sym">;</span> i<span class="sym">++)</span> s <span class="sym">=</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span> s<span class="sym">;
   }
</span>   <span class="kwa">return</span> s<span class="sym">;
}

</span><span class="kwa">function</span> nsieve<span class="sym">(</span>m<span class="sym">,</span> isPrime<span class="sym">){
</span>   <span class="kwa">var</span> i<span class="sym">,</span> k<span class="sym">,</span> count<span class="sym">;

</span>   <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i<span class="sym">&lt;=</span>m<span class="sym">;</span> i<span class="sym">++) {</span> isPrime<span class="sym">[</span>i<span class="sym">] =</span> <span class="kwa">true</span><span class="sym">; }
</span>   count <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>   <span class="kwa">for</span> <span class="sym">(</span>i<span class="sym">=</span><span class="num">2</span><span class="sym">;</span> i<span class="sym">&lt;=</span>m<span class="sym">;</span> i<span class="sym">++){
</span>      <span class="kwa">if</span> <span class="sym">(</span>isPrime<span class="sym">[</span>i<span class="sym">]) {
</span>         <span class="kwa">for</span> <span class="sym">(</span>k<span class="sym">=</span>i<span class="sym">+</span>i<span class="sym">;</span> k<span class="sym">&lt;=</span>m<span class="sym">;</span> k<span class="sym">+=</span>i<span class="sym">)</span> isPrime<span class="sym">[</span>k<span class="sym">] =</span> <span class="kwa">false</span><span class="sym">;
</span>         count<span class="sym">++;
      }
   }
</span>   <span class="kwa">return</span> count<span class="sym">;
}


</span><span class="kwa">var</span> n <span class="sym">=</span> arguments<span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="kwa">if</span> <span class="sym">(</span>n<span class="sym">&lt;</span><span class="num">2</span><span class="sym">)</span> n <span class="sym">=</span> <span class="num">2</span><span class="sym">;

</span><span class="kwa">var</span> m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="sym">)*</span><span class="num">10000</span><span class="sym">;
</span><span class="kwa">var</span> flags <span class="sym">=</span> Array<span class="sym">(</span>m<span class="sym">+</span><span class="num">1</span><span class="sym">);

</span>print<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span> <span class="sym">+</span> pad<span class="sym">(</span>m<span class="sym">,</span><span class="num">8</span><span class="sym">) +</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span>  pad<span class="sym">(</span>nsieve<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">),</span><span class="num">8</span><span class="sym">));

</span>m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="num">-1</span><span class="sym">)*</span><span class="num">10000</span><span class="sym">;
</span>print<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span> <span class="sym">+</span> pad<span class="sym">(</span>m<span class="sym">,</span><span class="num">8</span><span class="sym">) +</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span>  pad<span class="sym">(</span>nsieve<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">),</span><span class="num">8</span><span class="sym">));

</span>m <span class="sym">= (</span><span class="num">1</span><span class="sym">&lt;&lt;</span>n<span class="num">-2</span><span class="sym">)*</span><span class="num">10000</span><span class="sym">;
</span>print<span class="sym">(</span><span class="str">&quot;Primes up to &quot;</span> <span class="sym">+</span> pad<span class="sym">(</span>m<span class="sym">,</span><span class="num">8</span><span class="sym">) +</span> <span class="str">&quot; &quot;</span> <span class="sym">+</span>  pad<span class="sym">(</span>nsieve<span class="sym">(</span>m<span class="sym">,</span>flags<span class="sym">),</span><span class="num">8</span><span class="sym">));
</span>
