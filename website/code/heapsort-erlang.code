<span class="slc">%% The Great Computer Language Shootout
</span><span class="slc">%% http://shootout.alioth.debian.org/
</span><span class="slc">%% contributed by Isaac Gouy (Erlang novice)
</span><span class="slc">%% 20040619: Nicolas Niclausse: use ets instead of tuples.
</span><span class="slc">%% 20040721: Alexey Shchepin: use process dictionary instead of ets.
</span><span class="slc">%%
</span><span class="slc">%% Quick and Dirty transliteration from the Mercury solution
</span><span class="slc">%% with +1 adjustment for array indexes.
</span><span class="slc">%% Mercury uses 0..N-1 and Erlang uses 1..N
</span><span class="slc">%%
</span><span class="slc">%% Usage: start from command line with
</span><span class="slc">%%     erlc heapsort.erl
</span><span class="slc">%%     erl -noinput -s heapsort main 10000
</span>
<span class="sym">-</span>module<span class="sym">(</span>heapsort<span class="sym">)</span>.
<span class="sym">-</span>export<span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

random_heap<span class="sym">(</span>I<span class="sym">,</span> Seed<span class="sym">,</span> N<span class="sym">) -&gt;
</span>    <span class="kwa">case</span> I <span class="sym">&lt;</span> N <span class="kwa">of
</span>        true <span class="sym">-&gt;
            {</span>NextSeed<span class="sym">,</span> R<span class="sym">} =</span> gen_random<span class="sym">(</span>Seed<span class="sym">),
</span>	    up_heap<span class="sym">(</span>I<span class="sym">,</span> R<span class="sym">),
</span>            random_heap<span class="sym">(</span>I<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> NextSeed<span class="sym">,</span> N<span class="sym">);
</span>        false <span class="sym">-&gt;</span> ok
    <span class="kwa">end</span>.

up_heap<span class="sym">(</span>N<span class="sym">,</span> Y<span class="sym">) -&gt;
</span>    HalfN <span class="sym">=</span> N div <span class="num">2</span><span class="sym">,
</span>    X <span class="sym">=</span> <span class="kwb">get</span><span class="sym">(</span>HalfN<span class="sym">+</span><span class="num">1</span><span class="sym">),</span> <span class="slc">%%%% +1
</span>    <span class="kwa">case</span> <span class="num">0</span> <span class="sym">&lt;</span> N andalso X <span class="sym">&lt;</span> Y <span class="kwa">of
</span>        true <span class="sym">-&gt;
</span>	    <span class="kwb">put</span><span class="sym">(</span>N<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> X<span class="sym">),</span> <span class="slc">%%%% +1
</span>	    up_heap<span class="sym">(</span>HalfN<span class="sym">,</span> Y<span class="sym">);
</span>        false <span class="sym">-&gt;
</span>	    <span class="kwb">put</span><span class="sym">(</span>N<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> Y<span class="sym">)</span> <span class="slc">%%%% +1
</span>    <span class="kwa">end</span>.

heapsort<span class="sym">(</span><span class="num">0</span><span class="sym">) -&gt;</span> ok<span class="sym">;
</span>heapsort<span class="sym">(</span>N<span class="sym">) -&gt;
</span>    remove_greatest<span class="sym">(</span>N<span class="sym">),
</span>    heapsort<span class="sym">(</span>N<span class="num">-1</span><span class="sym">)</span>.

remove_greatest<span class="sym">(</span>N<span class="sym">) -&gt;
</span>    X <span class="sym">=</span> <span class="kwb">get</span><span class="sym">(</span><span class="num">0</span><span class="sym">+</span><span class="num">1</span><span class="sym">),</span> <span class="slc">%%%% +1
</span>    Y <span class="sym">=</span> <span class="kwb">get</span><span class="sym">(</span>N<span class="sym">+</span><span class="num">1</span><span class="sym">),</span> <span class="slc">%%%% +1
</span>    <span class="kwb">put</span><span class="sym">(</span>N<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> X<span class="sym">),</span> <span class="slc">%%%% +1
</span>    down_heap<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> N<span class="num">-1</span><span class="sym">,</span> Y<span class="sym">)</span>.

down_heap<span class="sym">(</span>I<span class="sym">,</span> N<span class="sym">,</span> X<span class="sym">) -&gt;
</span>    L <span class="sym">=</span> I <span class="sym">+</span> I <span class="sym">+</span> <span class="num">1</span><span class="sym">,
</span>    R <span class="sym">=</span> L <span class="sym">+</span> <span class="num">1</span><span class="sym">,
</span>    <span class="kwa">case</span> N <span class="sym">&lt;</span> L <span class="kwa">of
</span>        true <span class="sym">-&gt;
</span>            <span class="kwb">put</span><span class="sym">(</span>I<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> X<span class="sym">);</span> <span class="slc">%%%% +1
</span>        false <span class="sym">-&gt;
	    {</span>J<span class="sym">,</span> Y<span class="sym">} =</span> <span class="kwa">if
</span>			 R <span class="sym">&lt;</span> N <span class="sym">-&gt;
</span>			     RV <span class="sym">=</span> <span class="kwb">get</span><span class="sym">(</span>R<span class="sym">+</span><span class="num">1</span><span class="sym">),
</span>			     LV <span class="sym">=</span> <span class="kwb">get</span><span class="sym">(</span>L<span class="sym">+</span><span class="num">1</span><span class="sym">),
</span>			     <span class="kwa">if
</span>				 RV <span class="sym">&gt;</span> LV <span class="sym">-&gt;
				     {</span>R<span class="sym">,</span> RV<span class="sym">};
</span>				 true <span class="sym">-&gt;
				     {</span>L<span class="sym">,</span> LV<span class="sym">}
</span>			     <span class="kwa">end</span><span class="sym">;
</span>			 true <span class="sym">-&gt;
			     {</span>L<span class="sym">,</span> <span class="kwb">get</span><span class="sym">(</span>L<span class="sym">+</span><span class="num">1</span><span class="sym">)}
</span>		     <span class="kwa">end</span><span class="sym">,
</span>            <span class="kwa">case</span> X <span class="sym">&gt;</span> Y <span class="kwa">of
</span>	        true <span class="sym">-&gt;</span> <span class="kwb">put</span><span class="sym">(</span>I<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> X<span class="sym">);</span> <span class="slc">%%%% +1
</span>                false <span class="sym">-&gt;
</span>		    <span class="kwb">put</span><span class="sym">(</span>I<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> Y<span class="sym">),</span> <span class="slc">%%%% +1
</span>		    down_heap<span class="sym">(</span>J<span class="sym">,</span> N<span class="sym">,</span> X<span class="sym">)
</span>            <span class="kwa">end
    end</span>.

clear_ets_array<span class="sym">(</span><span class="num">0</span><span class="sym">) -&gt;</span> ok<span class="sym">;
</span>clear_ets_array<span class="sym">(</span>I<span class="sym">) -&gt;
</span>    <span class="kwb">put</span><span class="sym">(</span>I<span class="sym">,</span> <span class="num">0</span><span class="sym">),
</span>    clear_ets_array<span class="sym">(</span>I <span class="num">- 1</span><span class="sym">)</span>.

gen_random<span class="sym">(</span>Seed<span class="sym">) -&gt;
</span>    IM <span class="sym">=</span> <span class="num">139968</span><span class="sym">,</span> IA <span class="sym">=</span> <span class="num">3877</span><span class="sym">,</span> IC <span class="sym">=</span> <span class="num">29573</span><span class="sym">,
</span>    S <span class="sym">= ((</span>Seed <span class="sym">*</span> IA<span class="sym">) +</span> IC<span class="sym">)</span> rem IM<span class="sym">,
    {</span>S<span class="sym">,</span> S<span class="sym">/</span>IM<span class="sym">}</span>.

main<span class="sym">([</span>Arg<span class="sym">]) -&gt;
</span>    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span><span class="kwb">atom_to_list</span><span class="sym">(</span>Arg<span class="sym">)),
</span>    clear_ets_array<span class="sym">(</span>N<span class="sym">),
</span>    random_heap<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> <span class="num">42</span><span class="sym">,</span> N<span class="sym">),
</span>    heapsort<span class="sym">(</span>N<span class="num">-1</span><span class="sym">),
</span>    io<span class="sym">:</span>fwrite<span class="sym">(</span><span class="str">&quot;~.10f~n&quot;</span><span class="sym">, [</span><span class="kwb">get</span><span class="sym">(</span>N<span class="sym">)]),
</span>    <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.
