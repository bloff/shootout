<span class="slc">-- -*- mode: eiffel -*-</span>
<span class="slc">-- $Id: except-se.code,v 1.11 2005-12-31 16:45:33 bfulgham Exp $</span>
<span class="slc">-- http://www.bagley.org/~doug/shootout/</span>
<span class="slc">-- from: Friedrich Dominicus</span>

<span class="slc">-- &lt;LOC-OFF&gt;</span>
<span class="kwa">indexing</span>
	description<span class="sym">:</span> <span class="str">&quot;Eiffel implementation of the Exceptions &quot;</span>
                 <span class="str">&quot;in the shootout examples&quot;</span><span class="sym">;</span>
	note<span class="sym">:</span> <span class="str">&quot;Tested with SmallEiffel and ISE-Eiffel&quot;</span>
<span class="slc">-- &lt;LOC-ON&gt;</span>

<span class="kwa">class</span>
	EXCEPT

insert
    ARGUMENTS

creation <span class="sym">{</span>ANY<span class="sym">}</span>
	make

<span class="kwa">feature</span> <span class="sym">{</span>ANY<span class="sym">}</span>  <span class="slc">-- Initialization</span>

    high<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span>
    low<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span>

    high_exception<span class="sym">:</span> STRING <span class="kwa">is</span> <span class="str">&quot;high_exception&quot;</span><span class="sym">;</span>
    low_exception<span class="sym">:</span> STRING <span class="kwa">is</span> <span class="str">&quot;low_exception&quot;</span><span class="sym">;</span>

    run_n<span class="sym">,</span> outer_i<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">;</span>


    exc<span class="sym">:</span> EXCEPTIONS<span class="sym">;</span>

	make <span class="kwa">is</span>
        <span class="kwa">do</span>
            <span class="kwa">create</span> exc<span class="sym">;</span>
            <span class="kwa">if</span> argument_count <span class="sym">/=</span> <span class="num">1</span> <span class="kwa">then</span>
                io.<span class="kwd">put_string</span><span class="sym">(</span><span class="str">&quot;exception_test &lt;integer&gt;%N&quot;</span><span class="sym">);</span>
                exc.<span class="kwd">die</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
            <span class="kwa">end</span><span class="sym">;</span>
            <span class="kwa">if</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.is_integer <span class="kwa">then</span>
                run_n <span class="sym">:=</span> <span class="kwd">argument</span><span class="sym">(</span><span class="num">1</span><span class="sym">)</span>.to_integer<span class="sym">;</span>
            <span class="kwa">else</span>
                io.<span class="kwd">put_string</span><span class="sym">(</span><span class="str">&quot;Argument wasn't an integer, giving up%N&quot;</span><span class="sym">);</span>
                exc.<span class="kwd">die</span><span class="sym">(</span><span class="num">1</span><span class="sym">);</span>
            <span class="kwa">end</span><span class="sym">;</span>
            outer_i <span class="sym">:=</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwd">some_fun</span><span class="sym">(</span>run_n<span class="sym">);</span>
        <span class="kwa">end</span><span class="sym">;</span>

    <span class="kwd">some_fun</span><span class="sym">(</span>n<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is</span>
        <span class="kwa">do</span>
            <span class="kwa">from</span>
            <span class="kwa">invariant</span>
                i_in_bounds<span class="sym">:</span> outer_i <span class="sym">&gt;=</span> <span class="num">1</span> <span class="kwa">and then</span> outer_i <span class="sym">&lt;=</span> n <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            variant
                really_decreasing<span class="sym">:</span> n <span class="sym">-</span> outer_i <span class="sym">+</span> <span class="num">1</span>
            until outer_i <span class="sym">&gt;</span> run_n
            <span class="kwa">loop</span>
                <span class="kwd">high_fun</span><span class="sym">(</span>outer_i<span class="sym">);</span>
                <span class="slc">-- an exception should be raised somwehere below</span>
                <span class="slc">-- `high_fun' in the call chain</span>
                exc.<span class="kwd">raise</span><span class="sym">(</span><span class="str">&quot;should not come here%N&quot;</span><span class="sym">)</span>
                <span class="slc">-- outer_i := outer_i + 1</span>
            <span class="kwa">end</span><span class="sym">;</span>
            io.<span class="kwd">put_string</span><span class="sym">(</span><span class="str">&quot;Exceptions: HI=&quot;</span><span class="sym">);</span>
            io.<span class="kwd">put_integer</span><span class="sym">(</span>high<span class="sym">);</span>
            io.<span class="kwd">put_string</span><span class="sym">(</span><span class="str">&quot; / LO=&quot;</span><span class="sym">);</span>
            io.<span class="kwd">put_integer</span><span class="sym">(</span>low<span class="sym">);</span>
            io.<span class="kwd">put_character</span><span class="sym">(</span><span class="str">'%N'</span><span class="sym">);</span>
        <span class="kwa">rescue</span>
            outer_i <span class="sym">:=</span> outer_i <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">retry</span><span class="sym">;</span>
        <span class="kwa">end</span><span class="sym">;</span>


    <span class="kwd">high_fun</span> <span class="sym">(</span>i<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is</span>
        <span class="kwa">do</span>
            <span class="kwd">low_fun</span><span class="sym">(</span>i<span class="sym">);</span>
        <span class="kwa">rescue</span>
            <span class="kwa">if</span> exc.developer_exception_name.<span class="kwd">is_equal</span><span class="sym">(</span>high_exception<span class="sym">)</span>
<span class="kwa">then</span>
                high <span class="sym">:=</span> high <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">end</span>
        <span class="kwa">end</span><span class="sym">;</span>


    <span class="kwd">low_fun</span> <span class="sym">(</span>i<span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is</span>
        <span class="kwa">do</span>
            <span class="slc">-- exc.catch(exc.Developer_exception);</span>
            <span class="kwd">blow_up</span><span class="sym">(</span>i<span class="sym">);</span>
        <span class="kwa">rescue</span>
            <span class="kwa">if</span> exc.developer_exception_name.<span class="kwd">is_equal</span><span class="sym">(</span>low_exception<span class="sym">)</span> <span class="kwa">then</span>
                low <span class="sym">:=</span> low <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>
            <span class="kwa">end</span>
        <span class="kwa">end</span><span class="sym">;</span>


    <span class="kwd">blow_up</span> <span class="sym">(</span>i <span class="sym">:</span> <span class="kwb">INTEGER</span><span class="sym">)</span> <span class="kwa">is</span>
        <span class="kwa">do</span>
            <span class="kwa">if</span> <span class="sym">((</span>i \\ <span class="num">2</span><span class="sym">) =</span> <span class="num">0</span><span class="sym">)</span> <span class="kwa">then</span>
                exc.<span class="kwd">raise</span><span class="sym">(</span>low_exception<span class="sym">);</span>
            <span class="kwa">else</span>
                exc.<span class="kwd">raise</span><span class="sym">(</span>high_exception<span class="sym">);</span>
            <span class="kwa">end</span><span class="sym">;</span>
        <span class="kwa">end</span><span class="sym">;</span>

<span class="kwa">end</span> <span class="slc">-- class EXCEPT</span>
