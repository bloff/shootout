<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
#!/usr/bin/guile \
-e main -s
!#

<I><FONT COLOR="#B22222">;;; $Id: strcat-guile.code,v 1.2 2004-11-08 08:15:53 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">;;; from Benedikt Rosenau
</FONT></I>
(use-modules (oop goops))

(define-class &lt;buffer&gt; ()
  (siz #:getter buffer-size #:init-value 64)
  (len #:getter buffer-length #:init-value 0)
  (field #:init-value (make-string 64)))

(define-method (buffer-&gt;string (b &lt;buffer&gt;))
  (substring (slot-ref b 'field) 0 (buffer-length b)))

(define-method (buffer-append! (b &lt;buffer&gt;) (s &lt;string&gt;))
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((length-b (buffer-length b))
         (size-b (buffer-size b))
         (length-s (string-length s))
         (new-length (+ length-b length-s)))
    (<B><FONT COLOR="#A020F0">if</FONT></B> (&gt; new-length size-b)
      (<B><FONT COLOR="#A020F0">let*</FONT></B> ((new-size (+ size-b (max length-b length-s)))
             (new-field (make-string new-size)))
        (substring-move-left! (slot-ref b 'field) 0 length-b new-field 0)
        (slot-set! b 'field new-field)
        (slot-set! b 'siz new-size)))
    (substring-move-left! s 0 length-s (slot-ref b 'field) length-b)
    (slot-set! b 'len new-length)
     b))


(define-method (main (args &lt;list&gt;))
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((n (<B><FONT COLOR="#A020F0">or</FONT></B> (<B><FONT COLOR="#A020F0">and</FONT></B> (= (length args) 2) (string-&gt;number (cadr args))) 1))
	(buf (make &lt;buffer&gt;)))
    (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 0 (+ i 1))) ((= i n))
        (buffer-append! buf <B><FONT COLOR="#BC8F8F">&quot;hello\n&quot;</FONT></B>))
    (display (buffer-length buf))
    (newline)))</pre></td></tr></table>
