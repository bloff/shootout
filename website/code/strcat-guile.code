#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="sym">-</span>e main <span class="sym">-</span>s
<span class="sym">!</span>#

<span class="slc">;;; $Id: strcat-guile.code,v 1.10 2006-09-20 05:52:40 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>
<span class="slc">;;; from Benedikt Rosenau</span>

<span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>oop goops<span class="sym">))</span>

<span class="sym">(</span>define<span class="sym">-</span>class <span class="sym">&lt;</span>buffer<span class="sym">&gt; ()</span>
  <span class="sym">(</span>siz #<span class="sym">:</span>getter buffer<span class="sym">-</span>size #<span class="sym">:</span>init<span class="sym">-</span>value <span class="num">64</span><span class="sym">)</span>
  <span class="sym">(</span>len #<span class="sym">:</span>getter buffer<span class="sym">-</span><span class="kwa">length</span> #<span class="sym">:</span>init<span class="sym">-</span>value <span class="num">0</span><span class="sym">)</span>
  <span class="sym">(</span>field #<span class="sym">:</span>init<span class="sym">-</span>value <span class="sym">(</span>make<span class="sym">-</span>string <span class="num">64</span><span class="sym">)))</span>

<span class="sym">(</span>define<span class="sym">-</span>method <span class="sym">(</span>buffer<span class="sym">-&gt;</span>string <span class="sym">(</span>b <span class="sym">&lt;</span>buffer<span class="sym">&gt;))</span>
  <span class="sym">(</span>substring <span class="sym">(</span>slot<span class="sym">-</span>ref b <span class="str">'field) 0 (buffer-length b)))</span>
<span class="str"></span>
<span class="str">(define-method (buffer-append! (b &lt;buffer&gt;) (s &lt;string&gt;))</span>
<span class="str">  (let* ((length-b (buffer-length b))</span>
<span class="str">         (size-b (buffer-size b))</span>
<span class="str">         (length-s (string-length s))</span>
<span class="str">         (new-length (+ length-b length-s)))</span>
<span class="str">    (if (&gt; new-length size-b)</span>
<span class="str">      (let* ((new-size (+ size-b (max length-b length-s)))</span>
<span class="str">             (new-field (make-string new-size)))</span>
<span class="str">        (substring-move-left! (slot-ref b '</span>field<span class="sym">)</span> <span class="num">0</span> <span class="kwa">length</span><span class="sym">-</span>b new<span class="sym">-</span>field <span class="num">0</span><span class="sym">)</span>
        <span class="sym">(</span>slot<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> b <span class="str">'field new-field)</span>
<span class="str">        (slot-set! b '</span>siz new<span class="sym">-</span>size<span class="sym">)))</span>
    <span class="sym">(</span>substring<span class="sym">-</span>move<span class="sym">-</span>left<span class="sym">!</span> s <span class="num">0</span> <span class="kwa">length</span><span class="sym">-</span>s <span class="sym">(</span>slot<span class="sym">-</span>ref b <span class="str">'field) length-b)</span>
<span class="str">    (slot-set! b '</span>len new<span class="sym">-</span><span class="kwa">length</span><span class="sym">)</span>
     b<span class="sym">))</span>


<span class="sym">(</span>define<span class="sym">-</span>method <span class="sym">(</span>main <span class="sym">(</span>args <span class="sym">&lt;</span><span class="kwa">list</span><span class="sym">&gt;))</span>
  <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">))</span>
	<span class="sym">(</span>buf <span class="sym">(</span>make <span class="sym">&lt;</span>buffer<span class="sym">&gt;)))</span>
    <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">))) ((=</span> i n<span class="sym">))</span>
        <span class="sym">(</span>buffer<span class="sym">-</span><span class="kwa">append</span><span class="sym">!</span> buf <span class="str">&quot;hello</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">))</span>
    <span class="sym">(</span>display <span class="sym">(</span>buffer<span class="sym">-</span><span class="kwa">length</span> buf<span class="sym">))</span>
    <span class="sym">(</span>newline<span class="sym">)))</span>
