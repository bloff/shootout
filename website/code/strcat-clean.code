<span class="sym">/*</span> The Computer Language Shootout
   http<span class="sym">://</span>shootout.alioth.debian.org<span class="sym">/</span>
   contributed by Isaac Gouy <span class="sym">(</span>Clean novice<span class="sym">)</span>
   Updated by John van Groningen
<span class="sym">*/</span>

<span class="kwa">module</span> strcat
<span class="kwa">import</span> StdEnv<span class="sym">,</span> LanguageShootout

Start <span class="sym">=</span>  toString <span class="sym">(</span>sbLength <span class="sym">(</span>appendLoop argi sbNew<span class="sym">)) +++</span> <span class="str">&quot;\n&quot;</span>

appendLoop n sb
   <span class="sym">|</span> n<span class="sym">&gt;</span><span class="num">0</span>   <span class="sym">=</span> appendLoop <span class="sym">(</span>n<span class="sym">-</span><span class="num">1</span><span class="sym">) (</span>sbAppend sb <span class="str">&quot;hello\n&quot;</span><span class="sym">)</span>
   <span class="sym">=</span> sb

<span class="sym">//</span> To <span class="kwa">do</span> this <span class="kwa">in</span> the <span class="str">&quot;same way&quot;</span> we need to define a StringBuffer

<span class="sym">::</span> StringBuffer <span class="sym">=</span> Sb <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!</span>.String

sbNew <span class="sym">=</span> Sb <span class="num">0</span> <span class="sym">(</span>createArray <span class="num">32</span> ' '<span class="sym">)</span>

sbAppend <span class="sym">(</span>Sb n b<span class="sym">)</span> s
   <span class="sym">=</span> if <span class="sym">(</span>minsize <span class="sym">&gt;</span> size b<span class="sym">)</span>
      <span class="sym">(</span>Sb minsize <span class="sym">(</span>copyTo s n <span class="sym">(</span>resize b minsize<span class="sym">) ))</span>
      <span class="sym">(</span>Sb minsize <span class="sym">(</span>copyTo s n b<span class="sym">))</span>
   <span class="kwa">where</span>
      minsize <span class="sym">=</span> n <span class="sym">+</span> size s

      copyTo <span class="sym">:: !</span>.{#<span class="kwb">Char</span>} <span class="sym">!</span><span class="kwb">Int</span> <span class="sym">!*</span>{#<span class="kwb">Char</span>} <span class="sym">-&gt;</span> .{#<span class="kwb">Char</span>}
      copyTo s n a <span class="sym">=</span> {a <span class="sym">&amp; [</span>n<span class="sym">+</span>i<span class="sym">] =</span> s.<span class="sym">[</span>i<span class="sym">]</span> \\ i <span class="sym">&lt;- [</span><span class="num">0</span>..size s <span class="sym">-</span> <span class="num">1</span><span class="sym">]</span>}

      resize b min
         <span class="sym">=</span> if <span class="sym">(</span>newsize <span class="sym">&lt;</span> min<span class="sym">)</span>
            <span class="sym">(</span>copyTo b <span class="num">0</span> <span class="sym">(</span>createArray min ' '<span class="sym">))</span>
            <span class="sym">(</span>copyTo b <span class="num">0</span> <span class="sym">(</span>createArray newsize ' '<span class="sym">))</span>

         <span class="kwa">where</span> newsize <span class="sym">=</span> size b <span class="sym">*</span> <span class="num">2</span> <span class="sym">+</span> <span class="num">5</span>

sbLength <span class="sym">(</span>Sb n b<span class="sym">) =</span> n

