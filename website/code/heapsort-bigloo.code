<span class="slc">;;; -*- mode: scheme -*-</span>
<span class="slc">;;; $Id: heapsort-bigloo.code,v 1.5 2006-02-10 07:03:39 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>

<span class="sym">(</span>module heapsort
        <span class="sym">(</span>main main<span class="sym">)</span>
        <span class="sym">(</span>extern <span class="sym">(</span>macro printf<span class="sym">::</span>int <span class="sym">(</span>string double<span class="sym">)</span> <span class="str">&quot;printf&quot;</span><span class="sym">)</span>
                <span class="sym">(</span><span class="kwa">type</span> double<span class="sym">* (</span>pointer double<span class="sym">)</span> <span class="str">&quot;double *&quot;</span><span class="sym">)))</span>

<span class="sym">(</span>define IM   <span class="num">139968</span><span class="sym">)</span>
<span class="sym">(</span>define IA     <span class="num">3877</span><span class="sym">)</span>
<span class="sym">(</span>define IC    <span class="num">29573</span><span class="sym">)</span>
<span class="sym">(</span>define IM<span class="sym">-</span>f <span class="sym">(</span>fixnum<span class="sym">-&gt;</span>flonum IM<span class="sym">))</span>

<span class="sym">(</span>define LAST <span class="num">42</span><span class="sym">)</span>
<span class="sym">(</span>define <span class="sym">(</span>gen_random<span class="sym">::</span>double <span class="kwa">max</span><span class="sym">::</span>double<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> LAST <span class="sym">(</span>modulo <span class="sym">(+</span>fx <span class="sym">(*</span>fx LAST IA<span class="sym">)</span> IC<span class="sym">)</span> IM<span class="sym">))</span>
  <span class="sym">(/</span>fl <span class="sym">(*</span>fl <span class="kwa">max</span> <span class="sym">(</span>fixnum<span class="sym">-&gt;</span>flonum LAST<span class="sym">))</span> IM<span class="sym">-</span>f<span class="sym">))</span>

<span class="sym">(</span>define <span class="sym">(</span>heapsort n<span class="sym">::</span>int ra<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>ir<span class="sym">::</span>int n<span class="sym">)</span>
        <span class="sym">(</span>l<span class="sym">::</span>int <span class="sym">(+ (</span>bit<span class="sym">-</span>rsh n <span class="num">1</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))</span>
        <span class="sym">(</span>i<span class="sym">::</span>int <span class="num">0</span><span class="sym">)</span>
        <span class="sym">(</span>j<span class="sym">::</span>int <span class="num">0</span><span class="sym">)</span>
        <span class="sym">(</span>rra<span class="sym">::</span>double <span class="num">0.0</span><span class="sym">))</span>
    <span class="sym">(</span>bind<span class="sym">-</span><span class="kwa">exit</span> <span class="sym">(</span>return<span class="sym">)</span>
               <span class="sym">(</span>do <span class="sym">()</span>
                 <span class="sym">(</span>#f<span class="sym">)</span>
                 <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&gt;</span>fx l <span class="num">1</span><span class="sym">)</span>
                        <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> l <span class="sym">(-</span>fx l <span class="num">1</span><span class="sym">))</span>
                        <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> rra <span class="sym">(</span>double<span class="sym">*-</span>ref ra l<span class="sym">)))</span>
                       <span class="sym">(</span>else
                         <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> rra <span class="sym">(</span>double<span class="sym">*-</span>ref ra ir<span class="sym">))</span>
                         <span class="sym">(</span>double<span class="sym">*-</span><span class="kwa">set</span><span class="sym">!</span> ra ir <span class="sym">(</span>double<span class="sym">*-</span>ref ra <span class="num">1</span><span class="sym">))</span>
                         <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> ir <span class="sym">(-</span>fx ir <span class="num">1</span><span class="sym">))</span>
                         <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((=</span>fx ir <span class="num">1</span><span class="sym">)</span>
                                <span class="sym">(</span>double<span class="sym">*-</span><span class="kwa">set</span><span class="sym">!</span> ra <span class="num">1</span> rra<span class="sym">)</span>
                                <span class="sym">(</span>return #t<span class="sym">)))))</span>
                 <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> i l<span class="sym">)</span>
                 <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(</span>bit<span class="sym">-</span><span class="kwa">lsh</span> l <span class="num">1</span><span class="sym">))</span>
                 <span class="sym">(</span>do <span class="sym">()</span>
                   <span class="sym">((&gt;</span>fx j ir<span class="sym">))</span>
                   <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">and</span> <span class="sym">(&lt;</span>fx j ir<span class="sym">) (&lt;</span>fl <span class="sym">(</span>double<span class="sym">*-</span>ref ra j<span class="sym">) (</span>double<span class="sym">*-</span>ref ra <span class="sym">(+</span>fx j <span class="num">1</span><span class="sym">))))</span>
                          <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span>fx j <span class="num">1</span><span class="sym">))))</span>
                   <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&lt;</span>fl rra <span class="sym">(</span>double<span class="sym">*-</span>ref ra j<span class="sym">))</span>
                          <span class="sym">(</span>double<span class="sym">*-</span><span class="kwa">set</span><span class="sym">!</span> ra i <span class="sym">(</span>double<span class="sym">*-</span>ref ra j<span class="sym">))</span>
                          <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> i j<span class="sym">)</span>
                          <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span>fx j i<span class="sym">)))</span>
                         <span class="sym">(</span>else
                           <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span>fx ir <span class="num">1</span><span class="sym">)))))</span>
                 <span class="sym">(</span>double<span class="sym">*-</span><span class="kwa">set</span><span class="sym">!</span> ra i rra<span class="sym">)))))</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>n<span class="sym">::</span>int <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">))</span>
         <span class="sym">(</span><span class="kwa">last</span><span class="sym">::</span>int <span class="sym">(+</span>fx n <span class="num">1</span><span class="sym">))</span>
         <span class="sym">(</span>ary <span class="sym">(</span>make<span class="sym">-</span>double<span class="sym">*</span> <span class="kwa">last</span><span class="sym">)))</span>
    <span class="sym">(</span>do <span class="sym">((</span>i<span class="sym">::</span>int <span class="num">1</span> <span class="sym">(+</span>fx i <span class="num">1</span><span class="sym">)))</span>
      <span class="sym">((=</span>fx i <span class="kwa">last</span><span class="sym">))</span>
      <span class="sym">(</span>double<span class="sym">*-</span><span class="kwa">set</span><span class="sym">!</span> ary i <span class="sym">(</span>gen_random <span class="num">1.0</span><span class="sym">)))</span>
    <span class="sym">(</span>heapsort n ary<span class="sym">)</span>
    <span class="sym">(</span>printf #<span class="str">&quot;%.10f</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>double<span class="sym">*-</span>ref ary n<span class="sym">))))</span>
