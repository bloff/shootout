<span class="line">    1 </span><span class="slc">;;; -*- mode: scheme -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; $Id: heapsort-bigloo.code,v 1.3 2004-11-11 07:13:58 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="sym">(</span>module heapsort
<span class="line">    6 </span>        <span class="sym">(</span>main main<span class="sym">)
</span><span class="line">    7 </span><span class="sym">        (</span>extern <span class="sym">(</span>macro printf<span class="sym">::</span>int <span class="sym">(</span>string double<span class="sym">)</span> <span class="str">&quot;printf&quot;</span><span class="sym">)
</span><span class="line">    8 </span><span class="sym">                (</span><span class="kwa">type</span> double<span class="sym">* (</span>pointer double<span class="sym">)</span> <span class="str">&quot;double *&quot;</span><span class="sym">)))
</span><span class="line">    9 </span><span class="sym">
</span><span class="line">   10 </span><span class="sym">(</span>define IM   <span class="num">139968</span><span class="sym">)
</span><span class="line">   11 </span><span class="sym">(</span>define IA     <span class="num">3877</span><span class="sym">)
</span><span class="line">   12 </span><span class="sym">(</span>define IC    <span class="num">29573</span><span class="sym">)
</span><span class="line">   13 </span><span class="sym">(</span>define IM<span class="sym">-</span>f <span class="sym">(</span>fixnum<span class="sym">-&gt;</span>flonum IM<span class="sym">))
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym">(</span>define LAST <span class="num">42</span><span class="sym">)
</span><span class="line">   16 </span><span class="sym">(</span>define <span class="sym">(</span>gen_random<span class="sym">::</span>double <span class="kwa">max</span><span class="sym">::</span>double<span class="sym">)
</span><span class="line">   17 </span><span class="sym">  (</span><span class="kwa">set</span><span class="sym">!</span> LAST <span class="sym">(</span>modulo <span class="sym">(+</span>fx <span class="sym">(*</span>fx LAST IA<span class="sym">)</span> IC<span class="sym">)</span> IM<span class="sym">))
</span><span class="line">   18 </span><span class="sym">  (/</span>fl <span class="sym">(*</span>fl <span class="kwa">max</span> <span class="sym">(</span>fixnum<span class="sym">-&gt;</span>flonum LAST<span class="sym">))</span> IM<span class="sym">-</span>f<span class="sym">))
</span><span class="line">   19 </span><span class="sym">
</span><span class="line">   20 </span><span class="sym">(</span>define <span class="sym">(</span>heapsort n<span class="sym">::</span>int ra<span class="sym">)
</span><span class="line">   21 </span><span class="sym">  (</span>let <span class="sym">((</span>ir<span class="sym">::</span>int n<span class="sym">)
</span><span class="line">   22 </span><span class="sym">        (</span>l<span class="sym">::</span>int <span class="sym">(+ (</span>bit<span class="sym">-</span>rsh n <span class="num">1</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   23 </span><span class="sym">        (</span>i<span class="sym">::</span>int <span class="num">0</span><span class="sym">)
</span><span class="line">   24 </span><span class="sym">        (</span>j<span class="sym">::</span>int <span class="num">0</span><span class="sym">)
</span><span class="line">   25 </span><span class="sym">        (</span>rra<span class="sym">::</span>double <span class="num">0.0</span><span class="sym">))
</span><span class="line">   26 </span><span class="sym">    (</span>bind<span class="sym">-</span><span class="kwa">exit</span> <span class="sym">(</span>return<span class="sym">)
</span><span class="line">   27 </span><span class="sym">               (</span>do <span class="sym">()
</span><span class="line">   28 </span><span class="sym">                 (</span>#f<span class="sym">)
</span><span class="line">   29 </span><span class="sym">                 (</span><span class="kwa">cond</span> <span class="sym">((&gt;</span>fx l <span class="num">1</span><span class="sym">)
</span><span class="line">   30 </span><span class="sym">                        (</span><span class="kwa">set</span><span class="sym">!</span> l <span class="sym">(-</span>fx l <span class="num">1</span><span class="sym">))
</span><span class="line">   31 </span><span class="sym">                        (</span><span class="kwa">set</span><span class="sym">!</span> rra <span class="sym">(</span>double<span class="sym">*-</span>ref ra l<span class="sym">)))
</span><span class="line">   32 </span><span class="sym">                       (</span>else
<span class="line">   33 </span>                         <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> rra <span class="sym">(</span>double<span class="sym">*-</span>ref ra ir<span class="sym">))
</span><span class="line">   34 </span><span class="sym">                         (</span>double<span class="sym">*-</span><span class="kwa">set</span><span class="sym">!</span> ra ir <span class="sym">(</span>double<span class="sym">*-</span>ref ra <span class="num">1</span><span class="sym">))
</span><span class="line">   35 </span><span class="sym">                         (</span><span class="kwa">set</span><span class="sym">!</span> ir <span class="sym">(-</span>fx ir <span class="num">1</span><span class="sym">))
</span><span class="line">   36 </span><span class="sym">                         (</span><span class="kwa">cond</span> <span class="sym">((=</span>fx ir <span class="num">1</span><span class="sym">)
</span><span class="line">   37 </span><span class="sym">                                (</span>double<span class="sym">*-</span><span class="kwa">set</span><span class="sym">!</span> ra <span class="num">1</span> rra<span class="sym">)
</span><span class="line">   38 </span><span class="sym">                                (</span>return #t<span class="sym">)))))
</span><span class="line">   39 </span><span class="sym">                 (</span><span class="kwa">set</span><span class="sym">!</span> i l<span class="sym">)
</span><span class="line">   40 </span><span class="sym">                 (</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(</span>bit<span class="sym">-</span><span class="kwa">lsh</span> l <span class="num">1</span><span class="sym">))
</span><span class="line">   41 </span><span class="sym">                 (</span>do <span class="sym">()
</span><span class="line">   42 </span><span class="sym">                   ((&gt;</span>fx j ir<span class="sym">))
</span><span class="line">   43 </span><span class="sym">                   (</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">and</span> <span class="sym">(&lt;</span>fx j ir<span class="sym">) (&lt;</span>fl <span class="sym">(</span>double<span class="sym">*-</span>ref ra j<span class="sym">) (</span>double<span class="sym">*-</span>ref ra <span class="sym">(+</span>fx j <span class="num">1</span><span class="sym">))))
</span><span class="line">   44 </span><span class="sym">                          (</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span>fx j <span class="num">1</span><span class="sym">))))
</span><span class="line">   45 </span><span class="sym">                   (</span><span class="kwa">cond</span> <span class="sym">((&lt;</span>fl rra <span class="sym">(</span>double<span class="sym">*-</span>ref ra j<span class="sym">))
</span><span class="line">   46 </span><span class="sym">                          (</span>double<span class="sym">*-</span><span class="kwa">set</span><span class="sym">!</span> ra i <span class="sym">(</span>double<span class="sym">*-</span>ref ra j<span class="sym">))
</span><span class="line">   47 </span><span class="sym">                          (</span><span class="kwa">set</span><span class="sym">!</span> i j<span class="sym">)
</span><span class="line">   48 </span><span class="sym">                          (</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span>fx j i<span class="sym">)))
</span><span class="line">   49 </span><span class="sym">                         (</span>else
<span class="line">   50 </span>                           <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span>fx ir <span class="num">1</span><span class="sym">)))))
</span><span class="line">   51 </span><span class="sym">                 (</span>double<span class="sym">*-</span><span class="kwa">set</span><span class="sym">!</span> ra i rra<span class="sym">)))))
</span><span class="line">   52 </span><span class="sym">
</span><span class="line">   53 </span><span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)
</span><span class="line">   54 </span><span class="sym">  (</span>let<span class="sym">* ((</span>n<span class="sym">::</span>int <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   55 </span><span class="sym">         (</span><span class="kwa">last</span><span class="sym">::</span>int <span class="sym">(+</span>fx n <span class="num">1</span><span class="sym">))
</span><span class="line">   56 </span><span class="sym">         (</span>ary <span class="sym">(</span>make<span class="sym">-</span>double<span class="sym">*</span> <span class="kwa">last</span><span class="sym">)))
</span><span class="line">   57 </span><span class="sym">    (</span>do <span class="sym">((</span>i<span class="sym">::</span>int <span class="num">1</span> <span class="sym">(+</span>fx i <span class="num">1</span><span class="sym">)))
</span><span class="line">   58 </span><span class="sym">      ((=</span>fx i <span class="kwa">last</span><span class="sym">))
</span><span class="line">   59 </span><span class="sym">      (</span>double<span class="sym">*-</span><span class="kwa">set</span><span class="sym">!</span> ary i <span class="sym">(</span>gen_random <span class="num">1.0</span><span class="sym">)))
</span><span class="line">   60 </span><span class="sym">    (</span>heapsort n ary<span class="sym">)
</span><span class="line">   61 </span><span class="sym">    (</span>printf #<span class="str">&quot;%.10f</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>double<span class="sym">*-</span>ref ary n<span class="sym">))))</span>
