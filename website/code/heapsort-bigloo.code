<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">;;; -*- mode: scheme -*-
</FONT></I><I><FONT COLOR="#B22222">;;; $Id: heapsort-bigloo.code,v 1.2 2004-11-08 08:15:14 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://shootout.alioth.debian.org/
</FONT></I>
(module heapsort
        (main main)
        (extern (macro printf::int (string double) <B><FONT COLOR="#BC8F8F">&quot;printf&quot;</FONT></B>)
                (type double* (pointer double) <B><FONT COLOR="#BC8F8F">&quot;double *&quot;</FONT></B>)))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">IM</FONT></B>   139968)
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">IA</FONT></B>     3877)
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">IC</FONT></B>    29573)
(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">IM-f</FONT></B> (fixnum-&gt;flonum IM))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">LAST</FONT></B> 42)
(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">gen_random::double</FONT></B> max::double)
  (<B><FONT COLOR="#A020F0">set!</FONT></B> LAST (modulo (+fx (*fx LAST IA) IC) IM))
  (/fl (*fl max (fixnum-&gt;flonum LAST)) IM-f))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">heapsort</FONT></B> n::int ra)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((ir::int n)
        (l::int (+ (bit-rsh n 1) 1))
        (i::int 0)
        (j::int 0)
        (rra::double 0.0))
    (bind-exit (return)
               (<B><FONT COLOR="#A020F0">do</FONT></B> ()
                 (#f)
                 (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&gt;fx l 1)
                        (<B><FONT COLOR="#A020F0">set!</FONT></B> l (-fx l 1))
                        (<B><FONT COLOR="#A020F0">set!</FONT></B> rra (double*-ref ra l)))
                       (<B><FONT COLOR="#A020F0">else</FONT></B>
                         (<B><FONT COLOR="#A020F0">set!</FONT></B> rra (double*-ref ra ir))
                         (double*-set! ra ir (double*-ref ra 1))
                         (<B><FONT COLOR="#A020F0">set!</FONT></B> ir (-fx ir 1))
                         (<B><FONT COLOR="#A020F0">cond</FONT></B> ((=fx ir 1)
                                (double*-set! ra 1 rra)
                                (return #t)))))
                 (<B><FONT COLOR="#A020F0">set!</FONT></B> i l)
                 (<B><FONT COLOR="#A020F0">set!</FONT></B> j (bit-lsh l 1))
                 (<B><FONT COLOR="#A020F0">do</FONT></B> ()
                   ((&gt;fx j ir))
                   (<B><FONT COLOR="#A020F0">cond</FONT></B> ((<B><FONT COLOR="#A020F0">and</FONT></B> (&lt;fx j ir) (&lt;fl (double*-ref ra j) (double*-ref ra (+fx j 1))))
                          (<B><FONT COLOR="#A020F0">set!</FONT></B> j (+fx j 1))))
                   (<B><FONT COLOR="#A020F0">cond</FONT></B> ((&lt;fl rra (double*-ref ra j))
                          (double*-set! ra i (double*-ref ra j))
                          (<B><FONT COLOR="#A020F0">set!</FONT></B> i j)
                          (<B><FONT COLOR="#A020F0">set!</FONT></B> j (+fx j i)))
                         (<B><FONT COLOR="#A020F0">else</FONT></B>
                           (<B><FONT COLOR="#A020F0">set!</FONT></B> j (+fx ir 1)))))
                 (double*-set! ra i rra)))))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> args)
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((n::int (<B><FONT COLOR="#A020F0">or</FONT></B> (<B><FONT COLOR="#A020F0">and</FONT></B> (= (length args) 2) (string-&gt;number (cadr args))) 1))
         (last::int (+fx n 1))
         (ary (make-double* last)))
    (<B><FONT COLOR="#A020F0">do</FONT></B> ((i::int 1 (+fx i 1)))
      ((=fx i last))
      (double*-set! ary i (gen_random 1.0)))
    (heapsort n ary)
    (printf #<B><FONT COLOR="#BC8F8F">&quot;%.10f\n&quot;</FONT></B> (double*-ref ary n))))</pre></td></tr></table>
