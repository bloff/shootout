<span class="slc">;; ---------------------------------------------------------------------</span>
<span class="slc">;; The Great Computer Language Shootout</span>
<span class="slc">;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Anthony Borla</span>
<span class="slc">;; ---------------------------------------------------------------------</span>

<span class="sym">(</span>require<span class="sym">-</span>extension format<span class="sym">)</span>

<span class="sym">(</span>declare <span class="sym">(</span>disable<span class="sym">-</span>interrupts<span class="sym">) (</span>unsafe<span class="sym">) (</span>block<span class="sym">) (</span><span class="kwa">lambda</span><span class="sym">-</span>lift<span class="sym">))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>n <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">null</span>? args<span class="sym">)</span>
              <span class="num">1</span>
              <span class="sym">(</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">car</span> args<span class="sym">))))</span>

    <span class="sym">(</span>two<span class="sym">-</span>thirds <span class="sym">(/</span> <span class="num">2 3</span><span class="sym">))</span>

    <span class="sym">(</span>s <span class="sym">(</span>let loop <span class="sym">((</span>d <span class="num">1</span><span class="sym">) (</span>alt <span class="num">1</span><span class="sym">) (</span>s0 <span class="num">0</span><span class="sym">) (</span>s1 <span class="num">0</span><span class="sym">) (</span>s2 <span class="num">0</span><span class="sym">) (</span>s3 <span class="num">0</span><span class="sym">) (</span>s4 <span class="num">0</span><span class="sym">) (</span>s5 <span class="num">0</span><span class="sym">) (</span>s6 <span class="num">0</span><span class="sym">) (</span>s7 <span class="num">0</span><span class="sym">) (</span>s8 <span class="num">0</span><span class="sym">))</span>
         <span class="sym">(</span><span class="kwa">cond</span>
           <span class="sym">((=</span> n d<span class="sym">)</span>
             <span class="sym">(</span><span class="kwa">list</span>
               <span class="sym">(</span><span class="kwa">cons</span> <span class="str">&quot;~,9F</span><span class="esc">\t</span><span class="str">(2/3)^k~%&quot;</span> s0<span class="sym">)</span>
               <span class="sym">(</span><span class="kwa">cons</span> <span class="str">&quot;~,9F</span><span class="esc">\t</span><span class="str">k^-0.5~%&quot;</span> s1<span class="sym">)</span>
               <span class="sym">(</span><span class="kwa">cons</span> <span class="str">&quot;~,9F</span><span class="esc">\t</span><span class="str">1/k(k+1)~%&quot;</span> s2<span class="sym">)</span>
               <span class="sym">(</span><span class="kwa">cons</span> <span class="str">&quot;~,9F</span><span class="esc">\t</span><span class="str">Flint Hills~%&quot;</span> s3<span class="sym">)</span>
               <span class="sym">(</span><span class="kwa">cons</span> <span class="str">&quot;~,9F</span><span class="esc">\t</span><span class="str">Cookson Hills~%&quot;</span> s4<span class="sym">)</span>
               <span class="sym">(</span><span class="kwa">cons</span> <span class="str">&quot;~,9F</span><span class="esc">\t</span><span class="str">Harmonic~%&quot;</span> s5<span class="sym">)</span>
               <span class="sym">(</span><span class="kwa">cons</span> <span class="str">&quot;~,9F</span><span class="esc">\t</span><span class="str">Riemann Zeta~%&quot;</span> s6<span class="sym">)</span>
               <span class="sym">(</span><span class="kwa">cons</span> <span class="str">&quot;~,9F</span><span class="esc">\t</span><span class="str">Alternating Harmonic~%&quot;</span> s7<span class="sym">)</span>
               <span class="sym">(</span><span class="kwa">cons</span> <span class="str">&quot;~,9F</span><span class="esc">\t</span><span class="str">Gregory~%&quot;</span> s8<span class="sym">)))</span>
           <span class="sym">(</span>else
             <span class="sym">(</span>let<span class="sym">* ((</span>d2 <span class="sym">(*</span> d d<span class="sym">)) (</span>d3 <span class="sym">(*</span> d2 d<span class="sym">)) (</span>ds <span class="sym">(</span><span class="kwa">sin</span> d<span class="sym">)) (</span>dc <span class="sym">(</span><span class="kwa">cos</span> d<span class="sym">)))</span>
               <span class="sym">(</span>loop
                 <span class="sym">(+</span> d <span class="num">1</span><span class="sym">)</span>
                 <span class="sym">(-</span> alt<span class="sym">)</span>
                 <span class="sym">(+</span> s0 <span class="sym">(</span><span class="kwa">expt</span> two<span class="sym">-</span>thirds <span class="sym">(-</span> d <span class="num">1</span><span class="sym">)))</span>
                 <span class="sym">(+</span> s1 <span class="sym">(/</span> <span class="num">1</span> <span class="sym">(</span><span class="kwa">sqrt</span> d<span class="sym">)))</span>
                 <span class="sym">(+</span> s2 <span class="sym">(/</span> <span class="num">1</span> <span class="sym">(*</span> d <span class="sym">(+</span> d <span class="num">1</span><span class="sym">))))</span>
                 <span class="sym">(+</span> s3 <span class="sym">(/</span> <span class="num">1</span> <span class="sym">(*</span> d3 <span class="sym">(*</span> ds ds<span class="sym">))))</span>
                 <span class="sym">(+</span> s4 <span class="sym">(/</span> <span class="num">1</span> <span class="sym">(*</span> d3 <span class="sym">(*</span> dc dc<span class="sym">))))</span>
                 <span class="sym">(+</span> s5 <span class="sym">(/</span> <span class="num">1</span> d<span class="sym">))</span>
                 <span class="sym">(+</span> s6 <span class="sym">(/</span> <span class="num">1</span> d2<span class="sym">))</span>
                 <span class="sym">(+</span> s7 <span class="sym">(/</span> alt d<span class="sym">))</span>
                 <span class="sym">(+</span> s8 <span class="sym">(/</span> alt <span class="sym">(- (*</span> <span class="num">2</span> d<span class="sym">)</span> <span class="num">1</span><span class="sym">))) ))))) ))</span>

    <span class="sym">(</span>for<span class="sym">-</span>each
      <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>value<span class="sym">) (</span>format #t <span class="sym">(</span><span class="kwa">car</span> value<span class="sym">) (</span><span class="kwa">cdr</span> value<span class="sym">)))</span>
      s<span class="sym">)))</span>

<span class="slc">; -------------------------------</span>

<span class="sym">(</span>main <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">))</span>

