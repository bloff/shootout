<span class="line">    1 </span>#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>guile \
<span class="line">    2 </span><span class="sym">-</span>e main <span class="sym">-</span>s
<span class="line">    3 </span><span class="sym">!</span>#
<span class="line">    4 </span>
<span class="line">    5 </span><span class="slc">;;; $Id: strcat-guile-2.code,v 1.3 2004-11-11 07:14:19 bfulgham Exp $
</span><span class="line">    6 </span><span class="slc"></span><span class="slc">;;; http://shootout.alioth.debian.org/
</span><span class="line">    7 </span><span class="slc"></span>
<span class="line">    8 </span><span class="slc">;;; this version uses guile's &quot;native&quot; string concatention function
</span><span class="line">    9 </span><span class="slc"></span>
<span class="line">   10 </span><span class="sym">(</span>use<span class="sym">-</span>modules <span class="sym">(</span>ice<span class="num">-9</span> format<span class="sym">))
</span><span class="line">   11 </span><span class="sym">
</span><span class="line">   12 </span><span class="sym">(</span>define hello <span class="str">&quot;hello
</span><span class="line">   13 </span><span class="str">&quot;</span><span class="sym">)
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)
</span><span class="line">   16 </span><span class="sym">  (</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">))
</span><span class="line">   17 </span><span class="sym">        (</span>str <span class="str">&quot;&quot;</span><span class="sym">))
</span><span class="line">   18 </span><span class="sym">    (</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
</span><span class="line">   19 </span><span class="sym">        ((=</span> i n<span class="sym">))
</span><span class="line">   20 </span><span class="sym">      (</span><span class="kwa">set</span><span class="sym">!</span> str <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span> str hello<span class="sym">)))
</span><span class="line">   21 </span><span class="sym">    (</span>display <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">length</span> str<span class="sym">))
</span><span class="line">   22 </span><span class="sym">    (</span>newline<span class="sym">)))</span>
