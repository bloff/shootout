<span class="line">    1 </span><span class="slc">;;; -*- mode: scheme -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; $Id: regexmatch-bigloo.code,v 1.5 2004-11-13 07:42:31 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="slc"></span>
<span class="line">    5 </span><span class="sym">(</span>module regexmatch
<span class="line">    6 </span>        <span class="sym">(</span>main main<span class="sym">))
</span><span class="line">    7 </span><span class="sym">
</span><span class="line">    8 </span><span class="sym">(</span>define match<span class="sym">-</span>phone
<span class="line">    9 </span>  <span class="sym">(</span>let <span class="sym">((</span><span class="kwa">last</span><span class="sym">-</span>char<span class="sym">-</span>is<span class="sym">-</span>non<span class="sym">-</span>digit #t<span class="sym">)
</span><span class="line">   10 </span><span class="sym">        (</span>found #f<span class="sym">)
</span><span class="line">   11 </span><span class="sym">        (</span>parts <span class="str">'()))
</span><span class="line">   12 </span><span class="str">    (regular-grammar ((non-digit (out (&quot;09&quot;) #</span><span class="esc">\( </span> <span class="str">))
</span><span class="line">   13 </span><span class="str">                      (area-code (= 3 digit))
</span><span class="line">   14 </span><span class="str">                      (exchange (= 3 digit))
</span><span class="line">   15 </span><span class="str">                      (separator (in (&quot; -&quot;)))
</span><span class="line">   16 </span><span class="str">                      (number (= 4 digit))
</span><span class="line">   17 </span><span class="str">
</span><span class="line">   18 </span><span class="str">                      ;; parts of phone number begins with a 3-digit area code
</span><span class="line">   19 </span><span class="str">                      (phone-parts (: (or (: &quot;(&quot; (submatch area-code) &quot;)&quot;)
</span><span class="line">   20 </span><span class="str">                                          (submatch area-code))
</span><span class="line">   21 </span><span class="str">                                      ;; the area code is followed by one space
</span><span class="line">   22 </span><span class="str">                                      space
</span><span class="line">   23 </span><span class="str">                                      ;; which is followed by the 3 digits of the exchange
</span><span class="line">   24 </span><span class="str">                                      (submatch exchange)
</span><span class="line">   25 </span><span class="str">                                      ;; the exchange is followed by a space or hyphen [ -]
</span><span class="line">   26 </span><span class="str">                                      separator
</span><span class="line">   27 </span><span class="str">                                      ;; which is followed by the last 4 digits: DDDD
</span><span class="line">   28 </span><span class="str">                                      (submatch number))))
</span><span class="line">   29 </span><span class="str">
</span><span class="line">   30 </span><span class="str">                     ;; a telephone number must be preceeded by a non-digit (or bol).
</span><span class="line">   31 </span><span class="str">                     ;; and followed by a non-digit (or eol).
</span><span class="line">   32 </span><span class="str">
</span><span class="line">   33 </span><span class="str">                     ;; scanned a non-digit char
</span><span class="line">   34 </span><span class="str">                     ((: non-digit)
</span><span class="line">   35 </span><span class="str">                      (set! last-char-is-non-digit #t)
</span><span class="line">   36 </span><span class="str">                      (if found (begin (set! found #f) parts) (ignore)))
</span><span class="line">   37 </span><span class="str">                     ;; scanned a digit char
</span><span class="line">   38 </span><span class="str">                     ((: digit)
</span><span class="line">   39 </span><span class="str">                      (set! last-char-is-non-digit #f)
</span><span class="line">   40 </span><span class="str">                      (if found (begin (set! found #f) '</span><span class="sym">()) (</span>ignore<span class="sym">)))
</span><span class="line">   41 </span><span class="sym">                     ((</span>when <span class="kwa">last</span><span class="sym">-</span>char<span class="sym">-</span>is<span class="sym">-</span>non<span class="sym">-</span>digit <span class="sym">(:</span> phone<span class="sym">-</span>parts<span class="sym">))
</span><span class="line">   42 </span><span class="sym">                      (</span><span class="kwa">set</span><span class="sym">!</span> found #t<span class="sym">)
</span><span class="line">   43 </span><span class="sym">                      (</span><span class="kwa">set</span><span class="sym">!</span> parts <span class="sym">(</span><span class="kwa">list</span> <span class="sym">(</span>the<span class="sym">-</span>submatch <span class="num">1</span><span class="sym">)
</span><span class="line">   44 </span><span class="sym">                                        (</span>the<span class="sym">-</span>submatch <span class="num">2</span><span class="sym">)
</span><span class="line">   45 </span><span class="sym">                                        (</span>the<span class="sym">-</span>submatch <span class="num">3</span><span class="sym">)
</span><span class="line">   46 </span><span class="sym">                                        (</span>the<span class="sym">-</span>submatch <span class="num">4</span><span class="sym">)))
</span><span class="line">   47 </span><span class="sym">                      (</span>ignore<span class="sym">))
</span><span class="line">   48 </span><span class="sym">                     (</span>else
<span class="line">   49 </span>                      <span class="slc">;; possibly get here on eol
</span><span class="line">   50 </span><span class="slc"></span>                      <span class="sym">(</span><span class="kwa">if</span> found <span class="sym">(</span>begin <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> found #f<span class="sym">)</span> parts<span class="sym">)</span> <span class="str">'())))))
</span><span class="line">   51 </span><span class="str">
</span><span class="line">   52 </span><span class="str">
</span><span class="line">   53 </span><span class="str">(define (main args)
</span><span class="line">   54 </span><span class="str">  (let ((n (or (and (= (length args) 2) (string-&gt;number (cadr args))) 1))
</span><span class="line">   55 </span><span class="str">        (phonelines '</span><span class="sym">())
</span><span class="line">   56 </span><span class="sym">        (</span>count <span class="num">0</span><span class="sym">))
</span><span class="line">   57 </span><span class="sym">    (</span>let loop <span class="sym">((</span><span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))
</span><span class="line">   58 </span><span class="sym">      (</span><span class="kwa">cond</span> <span class="sym">((</span>eof<span class="sym">-</span>object? <span class="kwa">line</span><span class="sym">)</span> #f<span class="sym">)
</span><span class="line">   59 </span><span class="sym">            (</span>else
<span class="line">   60 </span>             <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> phonelines <span class="sym">(</span><span class="kwa">append</span> phonelines <span class="sym">(</span><span class="kwa">list line</span><span class="sym">)))
</span><span class="line">   61 </span><span class="sym">             (</span>loop <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">)))))
</span><span class="line">   62 </span><span class="sym">
</span><span class="line">   63 </span><span class="sym">    (</span>do <span class="sym">((</span>i n <span class="sym">(-</span> i <span class="num">1</span><span class="sym">)))
</span><span class="line">   64 </span><span class="sym">        ((=</span> i <span class="num">0</span><span class="sym">))
</span><span class="line">   65 </span><span class="sym">      (</span>let <span class="sym">((</span>count <span class="num">0</span><span class="sym">))
</span><span class="line">   66 </span><span class="sym">        (</span>for<span class="sym">-</span>each <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>phone<span class="sym">)
</span><span class="line">   67 </span><span class="sym">                    (</span>let<span class="sym">* ((</span>port <span class="sym">(</span><span class="kwa">open</span><span class="sym">-</span>input<span class="sym">-</span>string phone<span class="sym">))
</span><span class="line">   68 </span><span class="sym">                           (</span>match<span class="sym">-</span>parts <span class="sym">(</span><span class="kwa">read</span><span class="sym">/</span>rp match<span class="sym">-</span>phone port<span class="sym">)))
</span><span class="line">   69 </span><span class="sym">                      (</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span><span class="kwa">null</span>? match<span class="sym">-</span>parts<span class="sym">))
</span><span class="line">   70 </span><span class="sym">                               (=</span> <span class="num">1</span> i<span class="sym">))
</span><span class="line">   71 </span><span class="sym">                          (</span>begin
<span class="line">   72 </span>                            <span class="sym">(</span>let<span class="sym">* ((</span>area
<span class="line">   73 </span>                                    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>string<span class="sym">=</span>? <span class="sym">(</span><span class="kwa">car</span> match<span class="sym">-</span>parts<span class="sym">)</span> <span class="str">&quot;&quot;</span><span class="sym">)
</span><span class="line">   74 </span><span class="sym">                                        (</span><span class="kwa">cadr</span> match<span class="sym">-</span>parts<span class="sym">)
</span><span class="line">   75 </span><span class="sym">                                        (</span><span class="kwa">car</span> match<span class="sym">-</span>parts<span class="sym">)))
</span><span class="line">   76 </span><span class="sym">                                   (</span>exch <span class="sym">(</span><span class="kwa">caddr</span> match<span class="sym">-</span>parts<span class="sym">))
</span><span class="line">   77 </span><span class="sym">                                   (</span>numb <span class="sym">(</span><span class="kwa">cadddr</span> match<span class="sym">-</span>parts<span class="sym">))
</span><span class="line">   78 </span><span class="sym">                                   (</span>num <span class="sym">(</span>string<span class="sym">-</span><span class="kwa">append</span> <span class="str">&quot;(&quot;</span> area <span class="str">&quot;) &quot;</span> exch <span class="str">&quot;-&quot;</span> numb<span class="sym">)))
</span><span class="line">   79 </span><span class="sym">                              (</span><span class="kwa">set</span><span class="sym">!</span> count <span class="sym">(+</span> count <span class="num">1</span><span class="sym">))
</span><span class="line">   80 </span><span class="sym">                              (</span><span class="kwa">print</span> count <span class="str">&quot;: &quot;</span> num<span class="sym">))))))
</span><span class="line">   81 </span><span class="sym"></span>                  phonelines<span class="sym">)))))</span>
