<span class="slc">% The Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Contributed by YANG Shouxun</span>


<span class="kwa">functor</span>
<span class="kwa">import</span>
   System<span class="sym">(</span>showInfo printInfo<span class="sym">)</span> Application<span class="sym">(</span>exit getArgs<span class="sym">)</span>

<span class="kwa">define</span>
   <span class="kwa">fun</span> <span class="sym">{</span>Next Z<span class="sym">}</span>
      <span class="kwa">case</span> Z <span class="kwa">of</span> <span class="sym">[</span>Q R S T<span class="sym">]</span> <span class="kwa">then</span> <span class="sym">(</span><span class="num">3</span><span class="sym">*</span>Q <span class="sym">+</span> R<span class="sym">)</span> div <span class="sym">(</span><span class="num">3</span><span class="sym">*</span>S <span class="sym">+</span> T<span class="sym">)</span>
      <span class="kwa">else raise</span> invalidArg<span class="sym">(</span>Z<span class="sym">)</span> <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>Safe Z N<span class="sym">}</span>
      <span class="kwa">case</span> Z <span class="kwa">of</span> <span class="sym">[</span>Q R S T<span class="sym">]</span> <span class="kwa">then</span> N <span class="sym">== ((</span><span class="num">4</span><span class="sym">*</span>Q <span class="sym">+</span> R<span class="sym">)</span> div <span class="sym">(</span><span class="num">4</span><span class="sym">*</span>S <span class="sym">+</span> T<span class="sym">))</span>
      <span class="kwa">else raise</span> invalidArg<span class="sym">(</span>Z<span class="sym">)</span> <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>Comp Z1 Z2<span class="sym">}</span>
      <span class="kwa">case</span> Z1<span class="sym">#</span>Z2
      <span class="kwa">of</span> <span class="sym">[</span>Q1 R1 S1 T1<span class="sym">]#[</span>Q2 R2 S2 T2<span class="sym">]</span> <span class="kwa">then</span>
	 <span class="sym">[(</span>Q1<span class="sym">*</span>Q2<span class="sym">+</span>R1<span class="sym">*</span>S2<span class="sym">) (</span>Q1<span class="sym">*</span>R2<span class="sym">+</span>R1<span class="sym">*</span>T2<span class="sym">) (</span>S1<span class="sym">*</span>Q2<span class="sym">+</span>T1<span class="sym">*</span>S2<span class="sym">) (</span>S1<span class="sym">*</span>R2<span class="sym">+</span>T1<span class="sym">*</span>T2<span class="sym">)]</span>
      <span class="kwa">else raise</span> invalidArg<span class="sym">(</span>Z1<span class="sym">#</span>Z2<span class="sym">)</span> <span class="kwa">end</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>Prod Z N<span class="sym">} {</span>Comp <span class="sym">[</span><span class="num">10</span> <span class="sym">~</span><span class="num">10</span><span class="sym">*</span>N <span class="num">0 1</span><span class="sym">]</span> Z<span class="sym">}</span> <span class="kwa">end</span>

   <span class="kwa">fun</span> <span class="sym">{</span>Cons Z K<span class="sym">} {</span>Comp Z <span class="sym">[</span>K <span class="num">4</span><span class="sym">*</span>K<span class="sym">+</span><span class="num">2 0 2</span><span class="sym">*</span>K<span class="sym">+</span><span class="num">1</span><span class="sym">]}</span> <span class="kwa">end</span>

   <span class="kwa">proc</span> <span class="sym">{</span>PrintNSpace N<span class="sym">}</span>
      <span class="kwa">proc</span> <span class="sym">{</span>Aux _<span class="sym">} {</span>System<span class="sym">.</span>printInfo &quot; &quot;<span class="sym">}</span> <span class="kwa">end</span>
   <span class="kwa">in</span> <span class="sym">{</span>For <span class="num">1</span> N <span class="num">1</span> Aux<span class="sym">}</span> <span class="kwa">end</span>

   <span class="kwa">proc</span> <span class="sym">{</span>Digit K Z N Row Col<span class="sym">}</span>
      <span class="kwa">if</span> N <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span> Y <span class="kwa">in</span>
	 Y <span class="sym">= {</span>Next Z<span class="sym">}</span>
	 <span class="kwa">if</span> <span class="sym">{</span>Safe Z Y<span class="sym">}</span> <span class="kwa">then</span>
	    <span class="kwa">if</span> Col <span class="sym">==</span> <span class="num">10</span> <span class="kwa">then</span>
	       <span class="sym">{</span>System<span class="sym">.</span>printInfo &quot;<span class="sym">\</span>t<span class="sym">:</span>&quot;<span class="sym">#(</span><span class="num">10</span><span class="sym">+</span>Row<span class="sym">)#</span>&quot;<span class="sym">\</span>n&quot;<span class="sym">#</span>Y<span class="sym">}</span>
	       <span class="sym">{</span>Digit K <span class="sym">{</span>Prod Z Y<span class="sym">}</span> N<span class="sym">-</span><span class="num">1 10</span><span class="sym">+</span>Row <span class="num">1</span><span class="sym">}</span>
	    <span class="kwa">else</span>
	       <span class="sym">{</span>System<span class="sym">.</span>printInfo Y<span class="sym">}</span>
	       <span class="sym">{</span>Digit K <span class="sym">{</span>Prod Z Y<span class="sym">}</span> N<span class="sym">-</span><span class="num">1</span> Row Col<span class="sym">+</span><span class="num">1</span><span class="sym">}</span>
	    <span class="kwa">end</span>
	 <span class="kwa">else</span>
	    <span class="sym">{</span>Digit K<span class="sym">+</span><span class="num">1</span> <span class="sym">{</span>Cons Z K<span class="sym">}</span> N Row Col<span class="sym">}</span>
	 <span class="kwa">end</span>
      <span class="kwa">else</span>
	 <span class="sym">{</span>PrintNSpace <span class="num">10</span><span class="sym">-</span>Col<span class="sym">}</span>
	 <span class="sym">{</span>System<span class="sym">.</span>showInfo &quot;<span class="sym">\</span>t<span class="sym">:</span>&quot;<span class="sym">#(</span>Row<span class="sym">+</span>Col<span class="sym">)}</span>
      <span class="kwa">end</span>
   <span class="kwa">end</span>

   <span class="kwa">proc</span> <span class="sym">{</span>Digits N<span class="sym">} {</span>Digit <span class="num">1</span> <span class="sym">[</span><span class="num">1 0 0 1</span><span class="sym">]</span> N <span class="num">0 0</span><span class="sym">}</span> <span class="kwa">end</span>

<span class="kwa">in</span>
   <span class="sym">{</span>Digits <span class="sym">{</span>String<span class="sym">.</span>toInt <span class="sym">{</span>Application<span class="sym">.</span>getArgs plain<span class="sym">}</span><span class="num">.1</span><span class="sym">}}</span>
   <span class="sym">{</span>Application<span class="sym">.</span>exit <span class="num">0</span><span class="sym">}</span>
<span class="kwa">end</span>
