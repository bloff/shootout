<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy

To compile:
   nicec --sourcepath=.. -d=. -a tcpecho.jar tcpecho

To run:
   java -jar tcpecho.jar 10
*/</span>


<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;
</span><span class="kwa">import</span> java<span class="sym">.</span>net<span class="sym">.*;


</span><span class="kwa">let</span> <span class="kwb">int</span> M <span class="sym">=</span> <span class="num">6400</span><span class="sym">;</span> <span class="slc">// multiplier
</span><span class="kwa">let</span> <span class="kwb">int</span> REPLY_SIZE <span class="sym">=</span> <span class="num">64</span><span class="sym">;
</span><span class="kwa">let</span> <span class="kwb">int</span> REQUEST_SIZE <span class="sym">=</span> <span class="num">64</span><span class="sym">;


</span><span class="kwa">let</span> <span class="kwb">int</span> BUFFER_SIZE <span class="sym">=</span> <span class="num">1024</span><span class="sym">;
</span><span class="kwa">let</span> <span class="kwb">byte</span><span class="sym">[]</span> REPLY <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>REPLY_SIZE<span class="sym">];
</span><span class="kwa">let</span> <span class="kwb">byte</span><span class="sym">[]</span> REQUEST <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>REQUEST_SIZE<span class="sym">];


</span><span class="kwb">void</span> main<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> args<span class="sym">){
</span>   <span class="kwa">let</span> n <span class="sym">=</span> toSinglePositiveInt<span class="sym">(</span>args<span class="sym">) *</span> M<span class="sym">;
</span>   <span class="kwa">let</span> server <span class="sym">=</span> <span class="kwa">new</span> TcpServer<span class="sym">(</span>port<span class="sym">:</span> <span class="num">0</span><span class="sym">);
</span>   <span class="kwa">let</span> client <span class="sym">=</span> <span class="kwa">new</span> TcpClient<span class="sym">(
</span>      address<span class="sym">:</span> <span class="kwc">InetAddress</span><span class="sym">.</span>getLocalHost<span class="sym">(),
</span>      port<span class="sym">:</span> server<span class="sym">.</span>getPort<span class="sym">,
</span>      repeat<span class="sym">:</span> n
   <span class="sym">);
</span>   client<span class="sym">.</span>start<span class="sym">;
}


</span><span class="kwa">class</span> TcpClient <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{
</span>   <span class="kwc">InetAddress</span> address<span class="sym">;
</span>   <span class="kwb">int</span> port<span class="sym">;
</span>   <span class="kwb">int</span> repeat<span class="sym">;

</span>   run<span class="sym">() {
</span>      <span class="kwa">let</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>BUFFER_SIZE<span class="sym">];
</span>      var replies <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> var bytes <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      var ?<span class="kwc">Socket</span> serverSocket <span class="sym">=</span> null<span class="sym">;

</span>      <span class="kwa">try</span> <span class="sym">{
</span>         var byteCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>         <span class="kwa">let</span> socket <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">Socket</span><span class="sym">(</span>address<span class="sym">,</span> port<span class="sym">);
</span>         serverSocket <span class="sym">=</span> socket<span class="sym">;

</span>         <span class="kwa">let</span> in <span class="sym">=</span> socket<span class="sym">.</span>getInputStream<span class="sym">;
</span>         <span class="kwa">let</span> out <span class="sym">=</span> socket<span class="sym">.</span>getOutputStream<span class="sym">;

</span>         <span class="kwa">while</span> <span class="sym">(</span>repeat<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">) {
</span>            out<span class="sym">.</span>write<span class="sym">(</span>REQUEST<span class="sym">);
</span>            out<span class="sym">.</span>flush<span class="sym">;

</span>            <span class="kwa">while</span> <span class="sym">( (</span>byteCount <span class="sym">+=</span> in<span class="sym">.</span>read<span class="sym">(</span>buffer<span class="sym">)) &lt;</span> REPLY_SIZE <span class="sym">) {}
</span>            bytes <span class="sym">+=</span> byteCount<span class="sym">;
</span>            byteCount <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>            replies<span class="sym">++;
         }
      }
</span>      <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) {</span> e<span class="sym">.</span>printStackTrace<span class="sym">; }
</span>      <span class="kwa">finally</span> <span class="sym">{</span> notNull<span class="sym">(</span>serverSocket<span class="sym">).</span>close<span class="sym">; }

</span>      println<span class="sym">(</span><span class="str">&quot;replies: &quot;</span> <span class="sym">+</span> replies <span class="sym">+</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">bytes: &quot;</span> <span class="sym">+</span> bytes<span class="sym">);
   }
}


</span><span class="kwa">class</span> TcpServer <span class="kwa">extends</span> <span class="kwc">Thread</span> <span class="sym">{
</span>   ?<span class="kwc">ServerSocket</span> socket <span class="sym">=</span> null<span class="sym">;
</span>   <span class="kwb">int</span> port<span class="sym">;

   {
</span>      socket <span class="sym">=</span> <span class="kwa">new</span> <span class="kwc">ServerSocket</span><span class="sym">(</span>port<span class="sym">);
</span>      port <span class="sym">=</span> notNull<span class="sym">(</span>socket<span class="sym">).</span>getLocalPort<span class="sym">;
</span>      <span class="kwa">this</span><span class="sym">.</span>start<span class="sym">;
   }

</span>   <span class="kwb">int</span> getPort<span class="sym">();</span> getPort<span class="sym">() =</span> port<span class="sym">;

</span>   run<span class="sym">() {
</span>      <span class="kwa">let</span> buffer <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">byte</span><span class="sym">[</span>BUFFER_SIZE<span class="sym">];

</span>      <span class="kwa">try</span> <span class="sym">{
</span>         <span class="kwa">let</span> socketClient <span class="sym">=</span> notNull<span class="sym">(</span>socket<span class="sym">).</span>accept<span class="sym">;
</span>         <span class="kwa">let</span> in <span class="sym">=</span> socketClient<span class="sym">.</span>getInputStream<span class="sym">;
</span>         <span class="kwa">let</span> out <span class="sym">=</span> socketClient<span class="sym">.</span>getOutputStream<span class="sym">;

</span>         <span class="kwa">while</span> <span class="sym">((</span>in<span class="sym">.</span>read<span class="sym">(</span>buffer<span class="sym">,</span><span class="num">0</span><span class="sym">,</span>REQUEST_SIZE<span class="sym">)) &gt; -</span><span class="num">1</span><span class="sym">) {
</span>            out<span class="sym">.</span>write<span class="sym">(</span>REPLY<span class="sym">);
</span>            out<span class="sym">.</span>flush<span class="sym">;
         }
      }</span> <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">) {</span> e<span class="sym">.</span>printStackTrace<span class="sym">; }
   }
}


</span><span class="kwb">int</span> toSinglePositiveInt<span class="sym">(</span><span class="kwc">String</span><span class="sym">[]</span> s<span class="sym">){
</span>   <span class="kwa">try</span> <span class="sym">{
</span>      <span class="kwb">int</span> i <span class="sym">=</span>  <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>s<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>      <span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">return</span> i<span class="sym">;</span> <span class="kwa">else return</span> <span class="num">1</span><span class="sym">;
    }
</span>   <span class="kwa">catch</span> <span class="sym">(</span><span class="kwc">Exception</span> e<span class="sym">){</span> <span class="kwa">return</span> <span class="num">1</span><span class="sym">; } }
</span>
