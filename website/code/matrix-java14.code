<span class="slc">// $Id: matrix-java14.code,v 1.1 2006-03-31 16:08:49 bfulgham Exp $</span>
<span class="slc">// http://www.bagley.org/~doug/shootout/</span>
<span class="slc">// modified to use a little less memory by Thomas Holenstein</span>

<span class="kwa">import</span> java<span class="sym">.</span>io<span class="sym">.*;</span>
<span class="kwa">import</span> java<span class="sym">.</span>util<span class="sym">.*;</span>

<span class="kwa">public class</span> matrix <span class="sym">{</span>
    <span class="kwa">static</span> <span class="kwb">int</span> SIZE <span class="sym">=</span> <span class="num">30</span><span class="sym">;</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwc">String</span> args<span class="sym">[]) {</span>
	<span class="kwb">int</span> n <span class="sym">=</span> <span class="kwc">Integer</span><span class="sym">.</span><span class="kwd">parseInt</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);</span>
	<span class="kwb">int</span> m1<span class="sym">[][] =</span> <span class="kwd">mkmatrix</span><span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);</span>
	<span class="kwb">int</span> m2<span class="sym">[][] =</span> <span class="kwd">mkmatrix</span><span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">);</span>
	<span class="kwb">int</span> mm<span class="sym">[][] =</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>SIZE<span class="sym">][</span>SIZE<span class="sym">];</span>
	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>n<span class="sym">;</span> i<span class="sym">++) {</span>
	    <span class="kwd">mmult</span><span class="sym">(</span>SIZE<span class="sym">,</span> SIZE<span class="sym">,</span> m1<span class="sym">,</span> m2<span class="sym">,</span> mm<span class="sym">);</span>
	<span class="sym">}</span>
	<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">print</span><span class="sym">(</span>mm<span class="sym">[</span><span class="num">0</span><span class="sym">][</span><span class="num">0</span><span class="sym">]);</span>
	<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">print</span><span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);</span>
	<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">print</span><span class="sym">(</span>mm<span class="sym">[</span><span class="num">2</span><span class="sym">][</span><span class="num">3</span><span class="sym">]);</span>
	<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">print</span><span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);</span>
	<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">print</span><span class="sym">(</span>mm<span class="sym">[</span><span class="num">3</span><span class="sym">][</span><span class="num">2</span><span class="sym">]);</span>
	<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">print</span><span class="sym">(</span><span class="str">&quot; &quot;</span><span class="sym">);</span>
	<span class="kwc">System</span><span class="sym">.</span>out<span class="sym">.</span><span class="kwd">println</span><span class="sym">(</span>mm<span class="sym">[</span><span class="num">4</span><span class="sym">][</span><span class="num">4</span><span class="sym">]);</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> <span class="kwb">int</span><span class="sym">[][]</span> <span class="kwd">mkmatrix</span> <span class="sym">(</span><span class="kwb">int</span> rows<span class="sym">,</span> <span class="kwb">int</span> cols<span class="sym">) {</span>
	<span class="kwb">int</span> count <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span>
	<span class="kwb">int</span> m<span class="sym">[][] =</span> <span class="kwa">new</span> <span class="kwb">int</span><span class="sym">[</span>rows<span class="sym">][</span>cols<span class="sym">];</span>
	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>rows<span class="sym">;</span> i<span class="sym">++) {</span>
	    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>cols<span class="sym">;</span> j<span class="sym">++) {</span>
		m<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> count<span class="sym">++;</span>
	    <span class="sym">}</span>
	<span class="sym">}</span>
	<span class="kwa">return</span><span class="sym">(</span>m<span class="sym">);</span>
    <span class="sym">}</span>

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">mmult</span> <span class="sym">(</span><span class="kwb">int</span> rows<span class="sym">,</span> <span class="kwb">int</span> cols<span class="sym">,</span>
	                      <span class="kwb">int</span><span class="sym">[][]</span> m1<span class="sym">,</span> <span class="kwb">int</span><span class="sym">[][]</span> m2<span class="sym">,</span> <span class="kwb">int</span><span class="sym">[][]</span> m3<span class="sym">) {</span>
	<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">&lt;</span>rows<span class="sym">;</span> i<span class="sym">++) {</span>
	    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> j<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> j<span class="sym">&lt;</span>cols<span class="sym">;</span> j<span class="sym">++) {</span>
		<span class="kwb">int</span> val <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
		<span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> k<span class="sym">=</span><span class="num">0</span><span class="sym">;</span> k<span class="sym">&lt;</span>cols<span class="sym">;</span> k<span class="sym">++) {</span>
		    val <span class="sym">+=</span> m1<span class="sym">[</span>i<span class="sym">][</span>k<span class="sym">] *</span> m2<span class="sym">[</span>k<span class="sym">][</span>j<span class="sym">];</span>
		<span class="sym">}</span>
		m3<span class="sym">[</span>i<span class="sym">][</span>j<span class="sym">] =</span> val<span class="sym">;</span>
	    <span class="sym">}</span>
	<span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
