<span class="slc">%%% $Id: methcall-oz.code,v 1.5 2006-02-10 07:03:42 bfulgham Exp $</span>
<span class="slc">%%% http://dada.perl.it/shootout/</span>
<span class="slc">%%%</span>
<span class="slc">%%% contributed by Isaac Gouy</span>

<span class="slc">%%  Usage: start from command line with</span>
<span class="slc">%%     ozc -x methcall.oz -o methcall.oz.exe</span>
<span class="slc">%%     methcall.oz.exe 1000000</span>

<span class="kwa">functor</span>
<span class="kwa">import</span> System Application

<span class="kwb">define</span>

<span class="kwa">class</span> Toggle
   <span class="kwa">attr</span> state<span class="sym">:</span> true
   <span class="kwb">meth</span> state<span class="sym">(</span>V<span class="sym">)</span>
     V <span class="sym">=</span> &#64;state
   <span class="kwb">end</span>
   <span class="kwb">meth</span> activate
      state <span class="sym">&lt;- {</span>Not &#64;state<span class="sym">}</span>
   <span class="kwb">end</span>
   <span class="kwb">meth</span> init<span class="sym">(</span>State<span class="sym">)</span>
      state <span class="sym">&lt;-</span> State
   <span class="kwb">end</span>
<span class="kwb">end</span>

<span class="kwa">class</span> NthToggle <span class="kwb">from</span> Toggle
   <span class="kwa">attr</span> trigger<span class="sym">:</span><span class="num">0</span> count<span class="sym">:</span><span class="num">0</span>
   <span class="kwb">meth</span> activate
      count <span class="sym">&lt;-</span> &#64;count <span class="sym">+</span> <span class="num">1</span>
      <span class="kwb">if</span> &#64;count <span class="sym">&gt;=</span> &#64;trigger <span class="kwb">then</span>
     state <span class="sym">&lt;- {</span>Not &#64;state<span class="sym">}</span>
     count <span class="sym">&lt;-</span> <span class="num">0</span>
      <span class="kwb">end</span>
   <span class="kwb">end</span>
   <span class="kwb">meth</span> init<span class="sym">(</span>State Trigger<span class="sym">)</span>
      Toggle<span class="sym">,</span>init<span class="sym">(</span>State<span class="sym">)</span>
      trigger <span class="sym">&lt;-</span> Trigger
      count <span class="sym">&lt;-</span> <span class="num">0</span>
   <span class="kwb">end</span>
<span class="kwb">end</span>

<span class="kwb">fun</span> <span class="sym">{</span>MethodSends N T<span class="sym">}</span>
   <span class="kwa">local</span> V <span class="kwb">in</span>
      <span class="kwb">if</span> N<span class="sym">==</span><span class="num">0</span> <span class="kwb">then</span> <span class="sym">{</span>T state<span class="sym">(</span>V<span class="sym">)}</span> V
      <span class="kwb">else</span>
     <span class="sym">{</span>T activate<span class="sym">}{</span>T state<span class="sym">(</span>V<span class="sym">)}</span>
     <span class="sym">{</span>MethodSends N<span class="sym">-</span><span class="num">1</span> T<span class="sym">}</span>
      <span class="kwb">end</span>
   <span class="kwb">end</span>
<span class="kwb">end</span>

<span class="kwb">in</span>
   <span class="kwa">local</span> Args N <span class="kwb">in</span>
      <span class="sym">[</span>Args<span class="sym">] = {</span>Application.getArgs plain<span class="sym">}</span>
      N <span class="sym">= {</span>String.toInt Args<span class="sym">}</span>
      <span class="sym">{</span>System.show <span class="sym">{</span>MethodSends N <span class="sym">{</span>New Toggle init<span class="sym">(</span>true<span class="sym">)}}}</span>
      <span class="sym">{</span>System.show <span class="sym">{</span>MethodSends N <span class="sym">{</span>New NthToggle init<span class="sym">(</span>true <span class="num">3</span><span class="sym">)}}}</span>
   <span class="kwb">end</span>
   <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>
