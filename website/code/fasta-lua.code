<span class="slc">-- The Great Computer Language Shootout
</span><span class="slc">-- http://shootout.alioth.debian.org/
</span><span class="slc">--
</span><span class="slc">-- contributed by Isaac Gouy
</span>
<span class="slc">-- The usual pseudo-random number generator
</span>
<span class="kwa">local</span> IM <span class="sym">=</span> <span class="num">139968
</span><span class="kwa">local</span> IA <span class="sym">=</span> <span class="num">3877
</span><span class="kwa">local</span> IC <span class="sym">=</span> <span class="num">29573
</span><span class="kwa">local</span> Last <span class="sym">=</span> <span class="num">42

</span><span class="kwa">local function random</span><span class="sym">(</span><span class="kwa">max</span><span class="sym">)
</span>   Last <span class="sym">=</span> math.<span class="kwa">mod</span><span class="sym">((</span>Last <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">),</span> IM<span class="sym">)
</span>   <span class="kwa">return</span><span class="sym">( (</span><span class="kwa">max</span> <span class="sym">*</span> Last<span class="sym">) /</span> IM <span class="sym">)
</span><span class="kwa">end


</span><span class="slc">-- Weighted selection from alphabet
</span>
<span class="kwa">local function</span> makeCumulative<span class="sym">(</span>a<span class="sym">)
</span>   <span class="kwa">local</span> cp <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>   <span class="kwa">for</span> i<span class="sym">,</span>v <span class="kwa">in</span> ipairs<span class="sym">(</span>a<span class="sym">)</span> <span class="kwa">do
</span>      cp <span class="sym">=</span> cp <span class="sym">+</span> v.p<span class="sym">;
</span>      a<span class="sym">[</span>i<span class="sym">]</span>.p <span class="sym">=</span> cp
   <span class="kwa">end
end

local function</span> selectRandom<span class="sym">(</span>a<span class="sym">)
</span>   <span class="kwa">local</span> r <span class="sym">=</span> <span class="kwa">random</span><span class="sym">(</span><span class="num">1</span><span class="sym">)
</span>   <span class="kwa">for</span> i<span class="sym">,</span>v <span class="kwa">in</span> ipairs<span class="sym">(</span>a<span class="sym">)</span> <span class="kwa">do
      if</span> r <span class="sym">&lt;</span> v.p <span class="kwa">then return</span> v.c <span class="kwa">end
   end
end


</span><span class="slc">-- Generate and write FASTA format
</span>
<span class="kwa">local function</span> makeRandomFasta<span class="sym">(</span>id<span class="sym">,</span>desc<span class="sym">,</span>a<span class="sym">,</span>n<span class="sym">)
</span>   io.<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">,</span>id<span class="sym">,</span><span class="str">&quot; &quot;</span><span class="sym">,</span>desc<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)

</span>   <span class="kwa">local</span> todo<span class="sym">,</span> length <span class="sym">=</span> n<span class="sym">,</span> <span class="num">60
</span>   <span class="kwa">while</span> todo <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">do
      local</span> m
      <span class="kwa">if</span> todo <span class="sym">&lt;</span> length <span class="kwa">then</span> m <span class="sym">=</span> todo <span class="kwa">else</span> m <span class="sym">=</span> length <span class="kwa">end
      for</span> _ <span class="sym">=</span> <span class="num">1</span><span class="sym">,</span>m <span class="kwa">do</span> io.<span class="kwa">write</span><span class="sym">(</span>selectRandom<span class="sym">(</span>a<span class="sym">))</span> <span class="kwa">end
</span>      io.<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)
</span>      todo <span class="sym">=</span> todo <span class="sym">-</span> length
   <span class="kwa">end
</span>   io.<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)
</span><span class="kwa">end


local function</span> makeRepeatFasta<span class="sym">(</span>id<span class="sym">,</span>desc<span class="sym">,</span>s<span class="sym">,</span>n<span class="sym">)
</span>   io.<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;&gt;&quot;</span><span class="sym">,</span>id<span class="sym">,</span><span class="str">&quot; &quot;</span><span class="sym">,</span>desc<span class="sym">,</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)

</span>   <span class="kwa">local</span> todo<span class="sym">,</span> length<span class="sym">,</span> k<span class="sym">,</span> kn <span class="sym">=</span> n<span class="sym">,</span> <span class="num">60</span><span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> <span class="kwb">string</span>.len<span class="sym">(</span>s<span class="sym">)
</span>   <span class="kwa">while</span> todo <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">do
      local</span> j<span class="sym">,</span> m <span class="sym">=</span> <span class="num">1
</span>      <span class="kwa">if</span> todo <span class="sym">&lt;</span> length <span class="kwa">then</span> m <span class="sym">=</span> todo <span class="kwa">else</span> m <span class="sym">=</span> length <span class="kwa">end
      while</span> j <span class="sym">&lt;=</span> m <span class="kwa">do
         if</span> k <span class="sym">&gt;</span> kn <span class="kwa">then</span> k <span class="sym">=</span> <span class="num">1</span> <span class="kwa">end
</span>         io.<span class="kwa">write</span><span class="sym">(</span> <span class="kwb">string</span>.sub<span class="sym">(</span>s<span class="sym">,</span>k<span class="sym">,</span>k<span class="sym">) );
</span>         j <span class="sym">=</span> j <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span> k <span class="sym">=</span> k <span class="sym">+</span> <span class="num">1
</span>      <span class="kwa">end
</span>      io.<span class="kwa">write</span><span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)
</span>      todo <span class="sym">=</span> todo <span class="sym">-</span> length
   <span class="kwa">end
end


</span><span class="slc">-- Main -- define alphabets, make 3 fragments
</span>
<span class="kwa">local</span> alu <span class="sym">=
</span>   <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> ..
   <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> ..
   <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> ..
   <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> ..
   <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> ..
   <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> ..
   <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>


<span class="kwa">local</span> iub <span class="sym">= {
    {</span> c <span class="sym">=</span> <span class="str">&quot;a&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.270</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;c&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.125</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;g&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.125</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;t&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.270</span> <span class="sym">}

   ,{</span> c <span class="sym">=</span> <span class="str">&quot;B&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.02</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;D&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.02</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;H&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.02</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;K&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.02</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;M&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.02</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;N&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.02</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;R&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.02</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;S&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.02</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;V&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.02</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;W&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.02</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;Y&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.02</span> <span class="sym">}
  }
</span>makeCumulative<span class="sym">(</span>iub<span class="sym">)


</span><span class="kwa">local</span> homosapiens <span class="sym">= {
    {</span> c <span class="sym">=</span> <span class="str">&quot;a&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.3029549426680</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;c&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.1979883004921</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;g&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.1975473066391</span> <span class="sym">}
   ,{</span> c <span class="sym">=</span> <span class="str">&quot;t&quot;</span><span class="sym">,</span> p <span class="sym">=</span> <span class="num">0.3015094502008</span> <span class="sym">}
  }
</span>makeCumulative<span class="sym">(</span>homosapiens<span class="sym">)


</span><span class="kwa">local</span> n <span class="sym">=</span> <span class="kwa">tonumber</span><span class="sym">(</span>arg <span class="kwa">and</span> arg<span class="sym">[</span><span class="num">1</span><span class="sym">])</span> <span class="kwa">or</span> <span class="num">1000

</span>makeRepeatFasta<span class="sym">(</span><span class="str">'ONE'</span><span class="sym">,</span><span class="str">'Homo sapiens alu'</span><span class="sym">,</span>alu<span class="sym">,</span>n<span class="sym">*</span><span class="num">2</span><span class="sym">)

</span>makeRandomFasta<span class="sym">(</span><span class="str">'TWO'</span><span class="sym">,</span><span class="str">'IUB ambiguity codes'</span><span class="sym">,</span>iub<span class="sym">,</span>n<span class="sym">*</span><span class="num">3</span><span class="sym">)

</span>makeRandomFasta<span class="sym">(</span><span class="str">'THREE'</span><span class="sym">,</span><span class="str">'Homo sapiens frequency'</span><span class="sym">,</span>homosapiens<span class="sym">,</span>n<span class="sym">*</span><span class="num">5</span><span class="sym">)</span>
