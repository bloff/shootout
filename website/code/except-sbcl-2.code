<span class="slc">;;; -*- mode: lisp -*-</span>
<span class="slc">;;; $Id: except-sbcl-2.code,v 1.4 2005-11-13 04:35:25 bfulgham Exp $</span>
<span class="slc">;;; http://shootout.alioth.debian.org/</span>
<span class="slc">;;; from Paul Foley</span>
<span class="slc">;;; Multi-lisp modifications by Brent Fulgham</span>

<span class="sym">(</span><span class="kwa">defun command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>argument <span class="sym">()</span>
  <span class="sym">(</span>parse<span class="sym">-</span>integer <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">car</span> <span class="sym">(</span><span class="kwa">last</span> #<span class="sym">+</span>sbcl sb<span class="sym">-</span>ext<span class="sym">:*</span>posix<span class="sym">-</span>argv<span class="sym">*</span>
                                #<span class="sym">+</span>cmu  ext<span class="sym">:*</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>strings<span class="sym">*))</span> <span class="str">&quot;1&quot;</span><span class="sym">)))</span>

<span class="sym">(</span>defvar <span class="sym">*</span>hi<span class="sym">*</span> <span class="num">0</span><span class="sym">)</span>
<span class="sym">(</span>defvar <span class="sym">*</span>lo<span class="sym">*</span> <span class="num">0</span><span class="sym">)</span>

<span class="sym">(</span>define<span class="sym">-</span>condition hi<span class="sym">-</span>exception <span class="sym">(</span>simple<span class="sym">-</span>error<span class="sym">)</span>
  <span class="sym">())</span>

<span class="sym">(</span>define<span class="sym">-</span>condition lo<span class="sym">-</span>exception <span class="sym">(</span>simple<span class="sym">-</span>error<span class="sym">)</span>
  <span class="sym">())</span>

<span class="sym">(</span><span class="kwa">defun</span> blow<span class="sym">-</span>up <span class="sym">(</span>n<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>evenp <span class="sym">(</span>the fixnum n<span class="sym">))</span>
      <span class="sym">(</span>error <span class="str">'hi-exception)</span>
<span class="str">    (error '</span>lo<span class="sym">-</span>exception<span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> lo<span class="sym">-</span>fun <span class="sym">(</span>n<span class="sym">)</span>
  <span class="sym">(</span>handler<span class="sym">-</span>case
      <span class="sym">(</span>blow<span class="sym">-</span>up n<span class="sym">)</span>
    <span class="sym">(</span>lo<span class="sym">-</span>exception <span class="sym">()</span>
		  <span class="sym">(</span>incf <span class="sym">*</span>lo<span class="sym">*))))</span>

<span class="sym">(</span><span class="kwa">defun</span> hi<span class="sym">-</span>fun <span class="sym">(</span>n<span class="sym">)</span>
  <span class="sym">(</span>handler<span class="sym">-</span>case
      <span class="sym">(</span>lo<span class="sym">-</span>fun n<span class="sym">)</span>
    <span class="sym">(</span>hi<span class="sym">-</span>exception <span class="sym">()</span>
		  <span class="sym">(</span>incf <span class="sym">*</span>hi<span class="sym">*))))</span>

<span class="sym">(</span><span class="kwa">defun</span> some<span class="sym">-</span>fun <span class="sym">(</span>n<span class="sym">)</span>
  <span class="sym">(</span>hi<span class="sym">-</span>fun n<span class="sym">))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">(&amp;</span>optional <span class="sym">(</span>n <span class="sym">(</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>argument<span class="sym">)))</span>
  <span class="sym">(</span>declare <span class="sym">(</span>fixnum n<span class="sym">))</span>
  <span class="sym">(</span>dotimes <span class="sym">(</span>i n<span class="sym">) (</span>some<span class="sym">-</span>fun i<span class="sym">))</span>
  <span class="sym">(</span>format t <span class="str">&quot;Exceptions: HI=~A / LO=~A~%&quot;</span> <span class="sym">*</span>hi<span class="sym">* *</span>lo<span class="sym">*))</span>
