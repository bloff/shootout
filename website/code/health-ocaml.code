<span class="com">(* health.ml
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Troestler Christophe
 * This is a first implementation to be refined for speed.
 *)</span>

<span class="kwa">let</span> <span class="sym">() =</span> Gc.set <span class="sym">{ (</span>Gc.get<span class="sym">())</span> <span class="kwa">with</span> Gc.minor_heap_size <span class="sym">=</span> <span class="num">1024</span> <span class="sym">*</span> <span class="num">1024</span> <span class="sym">*</span> <span class="num">4</span> <span class="sym">}


</span><span class="kwa">type</span> patient <span class="sym">= {
</span>  <span class="kwa">mutable</span> remaining_time <span class="sym">:</span> <span class="kwb">int</span><span class="sym">;
</span>  <span class="kwa">mutable</span> hospital_time <span class="sym">:</span> <span class="kwb">int</span><span class="sym">;
</span>  <span class="kwa">mutable</span> hospital_visits <span class="sym">:</span> <span class="kwb">int</span><span class="sym">; }

</span><span class="kwa">type</span> totals <span class="sym">=</span> <span class="kwb">int</span> <span class="sym">*</span> <span class="kwb">int</span> <span class="sym">*</span> <span class="kwb">int</span> <span class="com">(* patients, hospital time, hospital visits *)</span>

<span class="kwa">let</span> add_patient <span class="sym">(</span>n<span class="sym">,</span> t<span class="sym">,</span> v<span class="sym">)</span> p <span class="sym">=
  (</span>n <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> t <span class="sym">+</span> p.hospital_time<span class="sym">,</span> v <span class="sym">+</span> p.hospital_visits<span class="sym">)

</span><span class="kwa">let</span> <span class="sym">( ++ ) (</span>n0<span class="sym">,</span> t0<span class="sym">,</span> v0<span class="sym">) (</span>n1<span class="sym">,</span> t1<span class="sym">,</span> v1<span class="sym">) = (</span>n0 <span class="sym">+</span> n1<span class="sym">,</span> t0 <span class="sym">+</span> t1<span class="sym">,</span> v0 <span class="sym">+</span> v1<span class="sym">)


</span><span class="kwa">module</span> Hospital <span class="sym">=
</span><span class="kwa">struct
  type</span> t <span class="sym">= {
</span>    <span class="kwa">mutable</span> triage <span class="sym">:</span> patient list<span class="sym">;
</span>    <span class="kwa">mutable</span> examination <span class="sym">:</span> patient list<span class="sym">;
</span>    <span class="kwa">mutable</span> treatement <span class="sym">:</span> patient list<span class="sym">;
</span>    <span class="kwa">mutable</span> discharged <span class="sym">:</span> totals<span class="sym">;

</span>    <span class="kwa">mutable</span> available_staff <span class="sym">:</span> <span class="kwb">int</span><span class="sym">;
</span>    <span class="kwa">mutable</span> seed <span class="sym">:</span> <span class="kwb">int</span><span class="sym">;
</span>    has_no_regional_hospital <span class="sym">:</span> <span class="kwb">bool</span><span class="sym">;</span> <span class="com">(* i.e. &quot;top&quot; one *)</span>
    <span class="kwa">mutable</span> transfers <span class="sym">:</span> patient list<span class="sym">;
  }

</span>  <span class="com">(* Shootout random generator, but with hospital seed *)</span>
  <span class="kwa">let</span> im <span class="sym">=</span> <span class="num">139968</span> <span class="kwa">and</span> ia <span class="sym">=</span> <span class="num">3877</span> <span class="kwa">and</span> ic <span class="sym">=</span> <span class="num">29573
</span>  <span class="kwa">let</span> inv_im <span class="sym">=</span> <span class="num">1</span>. <span class="sym">/</span>. <span class="kwb">float</span> im

  <span class="kwa">let</span> random h max <span class="sym">=
</span>    h.seed <span class="sym">&lt;- (</span>h.seed <span class="sym">*</span> ia <span class="sym">+</span> ic<span class="sym">)</span> <span class="kwa">mod</span> im<span class="sym">;
</span>    max <span class="sym">*</span>. <span class="kwb">float</span> h.seed <span class="sym">*</span>. inv_im

  <span class="kwa">let</span> make has_no_regional_hospital level seed <span class="sym">=
    {</span> triage <span class="sym">= [];</span>  examination <span class="sym">= [];</span>  treatement <span class="sym">= [];</span> discharged <span class="sym">= (</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">);
</span>      available_staff <span class="sym">=</span> <span class="num">1</span> <span class="kwa">lsl</span> <span class="sym">(</span>level <span class="num">- 1</span><span class="sym">);
</span>      seed <span class="sym">=</span> seed<span class="sym">;</span>  has_no_regional_hospital <span class="sym">=</span> has_no_regional_hospital<span class="sym">;
</span>      transfers <span class="sym">= []; }

</span>  <span class="kwa">let</span> totals h <span class="sym">=
</span>    <span class="kwa">let</span> tot <span class="sym">=</span> List.fold_left add_patient <span class="sym">(</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">)</span> h.triage <span class="kwa">in
    let</span> tot <span class="sym">=</span> List.fold_left add_patient tot h.examination <span class="kwa">in
    let</span> tot <span class="sym">=</span> List.fold_left add_patient tot h.treatement <span class="kwa">in
</span>    tot <span class="sym">++</span> h.discharged

  <span class="kwa">let</span> new_arrival h p <span class="sym">=
</span>    p.hospital_visits <span class="sym">&lt;-</span> p.hospital_visits <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwa">if</span> h.available_staff <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">(
</span>      h.available_staff <span class="sym">&lt;-</span> h.available_staff <span class="num">- 1</span><span class="sym">;
</span>      h.examination <span class="sym">&lt;-</span> p <span class="sym">::</span> h.examination<span class="sym">;
</span>      p.remaining_time <span class="sym">&lt;-</span> <span class="num">3</span><span class="sym">;
</span>      p.hospital_time <span class="sym">&lt;-</span> p.hospital_time <span class="sym">+</span> <span class="num">3</span><span class="sym">;
    )
</span>    <span class="kwa">else</span> h.triage <span class="sym">&lt;-</span> p <span class="sym">::</span> h.triage

  <span class="kwa">let</span> discharge_patients h <span class="sym">=
</span>    <span class="kwa">let</span> treat p <span class="sym">=
</span>      p.remaining_time <span class="sym">&lt;-</span> p.remaining_time <span class="num">- 1</span><span class="sym">;
</span>      <span class="kwa">if</span> p.remaining_time <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then true else</span> <span class="sym">(
</span>	h.available_staff <span class="sym">&lt;-</span> h.available_staff <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>	h.discharged <span class="sym">&lt;-</span> add_patient h.discharged p<span class="sym">;
</span>	<span class="kwa">false
</span>      <span class="sym">)</span> <span class="kwa">in
</span>    h.treatement <span class="sym">&lt;-</span> List.filter treat h.treatement

  <span class="kwa">let</span> treat_or_transfer_patients h <span class="sym">=
</span>    <span class="kwa">let</span> examine p <span class="sym">=
</span>      p.remaining_time <span class="sym">&lt;-</span> p.remaining_time <span class="num">- 1</span><span class="sym">;
</span>      <span class="kwa">if</span> p.remaining_time <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then true else</span> <span class="sym">(
</span>	<span class="kwa">if</span> random h <span class="num">1.0</span> <span class="sym">&gt;</span> <span class="num">0.1</span> <span class="sym">||</span> h.has_no_regional_hospital <span class="kwa">then</span> <span class="sym">(
</span>	  <span class="com">(* No transfer *)</span>
	  h.treatement <span class="sym">&lt;-</span> p <span class="sym">::</span> h.treatement<span class="sym">;
</span>	  p.remaining_time <span class="sym">&lt;-</span> <span class="num">10</span><span class="sym">;
</span>	  p.hospital_time <span class="sym">&lt;-</span> p.hospital_time <span class="sym">+</span> <span class="num">10</span><span class="sym">;
	)
</span>	<span class="kwa">else</span> <span class="sym">(
</span>	  <span class="com">(* Transfer to regional hospital *)</span>
	  h.available_staff <span class="sym">&lt;-</span> h.available_staff <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>	  h.transfers <span class="sym">&lt;-</span> p <span class="sym">::</span> h.transfers<span class="sym">;
	);
</span>	<span class="kwa">false
</span>      <span class="sym">)</span> <span class="kwa">in
</span>    h.examination <span class="sym">&lt;-</span> List.filter examine h.examination

  <span class="kwa">let</span> triage_patients h <span class="sym">=
</span>    <span class="kwa">let</span> triage p <span class="sym">=
</span>      <span class="kwa">if</span> h.available_staff <span class="sym">&gt;</span> <span class="num">0</span> <span class="kwa">then</span> <span class="sym">(
</span>	h.available_staff <span class="sym">&lt;-</span> h.available_staff <span class="num">- 1</span><span class="sym">;
</span>	p.remaining_time <span class="sym">&lt;-</span> <span class="num">3</span><span class="sym">;
</span>	p.hospital_time <span class="sym">&lt;-</span> p.hospital_time <span class="sym">+</span> <span class="num">3</span><span class="sym">;
</span>	h.examination <span class="sym">&lt;-</span> p <span class="sym">::</span> h.examination<span class="sym">;
</span>	<span class="kwa">false
</span>      <span class="sym">)
</span>      <span class="kwa">else</span> <span class="sym">(
</span>	p.hospital_time <span class="sym">&lt;-</span> p.hospital_time <span class="sym">+</span> <span class="num">1</span><span class="sym">;</span>  <span class="kwa">true
</span>      <span class="sym">)</span> <span class="kwa">in
</span>    h.triage <span class="sym">&lt;-</span> List.filter triage h.triage

  <span class="kwa">let</span> triage_examination_treatment h <span class="sym">=
</span>    discharge_patients h<span class="sym">;
</span>    treat_or_transfer_patients h<span class="sym">;
</span>    triage_patients h<span class="sym">;
</span>    <span class="kwa">if</span> random h <span class="num">1.0</span> <span class="sym">&gt;</span> <span class="num">0.7</span> <span class="kwa">then</span> new_arrival h <span class="sym">{
</span>      remaining_time <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> hospital_time <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span> hospital_visits <span class="sym">=</span> <span class="num">0</span> <span class="sym">}
</span><span class="kwa">end


</span><span class="com">(* Hierarchical health care: a region consisting of a hospital and
   (possibly) some districts. *)</span>
<span class="kwa">type</span> health_care <span class="sym">=</span> Region <span class="kwa">of</span> Hospital.t <span class="sym">* (</span>health_care array<span class="sym">)

</span><span class="kwa">let</span> levels <span class="sym">=</span> <span class="num">5
</span><span class="kwa">let</span> districts <span class="sym">=</span> <span class="num">4

</span><span class="kwa">let rec</span> create_health_care level seed1 seed2 <span class="sym">=
</span>  <span class="kwa">let</span> hospital <span class="sym">=</span> Hospital.make <span class="sym">(</span>level <span class="sym">=</span> levels<span class="sym">)</span> level <span class="sym">(</span>seed1 <span class="sym">*</span> seed2<span class="sym">)</span> <span class="kwa">in
  let</span> create i <span class="sym">=</span> create_health_care <span class="sym">(</span>level <span class="num">- 1</span><span class="sym">) (</span><span class="num">4</span> <span class="sym">*</span> seed1 <span class="sym">+</span> i <span class="sym">+</span> <span class="num">1</span><span class="sym">)</span> seed2 <span class="kwa">in
</span>  Region<span class="sym">(</span>hospital<span class="sym">,</span> Array.init <span class="sym">(</span><span class="kwa">if</span> level <span class="sym">&lt;=</span> <span class="num">1</span> <span class="kwa">then</span> <span class="num">0</span> <span class="kwa">else</span> districts<span class="sym">)</span> create<span class="sym">)

</span><span class="kwa">let rec</span> transfer_patients <span class="sym">(</span>Region<span class="sym">(</span>h<span class="sym">,</span> districts<span class="sym">)) =
</span>  <span class="kwa">let</span> transfer d <span class="sym">=
</span>    List.iter <span class="sym">(</span><span class="kwa">fun</span> p <span class="sym">-&gt;</span> Hospital.new_arrival h p<span class="sym">) (</span>transfer_patients d<span class="sym">)</span> <span class="kwa">in
</span>  Array.iter transfer districts<span class="sym">;
</span>  Hospital.triage_examination_treatment h<span class="sym">;
</span>  <span class="com">(* Return the transfer queue -- leaving the one of [h] empty. *)</span>
  <span class="kwa">let</span> patients_to_transfer <span class="sym">=</span> h.Hospital.transfers <span class="kwa">in
</span>  h.Hospital.transfers <span class="sym">&lt;- [];
</span>  patients_to_transfer

<span class="kwa">let rec</span> accumulate_totals <span class="sym">(</span>Region<span class="sym">(</span>h<span class="sym">,</span> districts<span class="sym">)) =
</span>  Array.fold_left <span class="sym">(</span><span class="kwa">fun</span> tot d <span class="sym">-&gt;</span> tot <span class="sym">++</span> accumulate_totals d<span class="sym">) (</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">0</span><span class="sym">)</span> districts
  <span class="sym">++</span> Hospital.totals h

<span class="kwa">let</span> <span class="sym">() =
</span>  <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">try</span> int_of_string<span class="sym">(</span>Array.get Sys.argv <span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">100</span> <span class="kwa">in
  let</span> hc <span class="sym">=</span> create_health_care levels <span class="num">0 42</span> <span class="kwa">in
  for</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">to</span> n <span class="kwa">do</span> ignore<span class="sym">(</span>transfer_patients hc<span class="sym">)</span> <span class="kwa">done</span><span class="sym">;
</span>  <span class="kwa">let</span> <span class="sym">(</span>patients<span class="sym">,</span> time<span class="sym">,</span> visits<span class="sym">) =</span> accumulate_totals hc <span class="kwa">in
</span>  Printf.printf <span class="str">&quot;Patients: %i</span><span class="esc">\n</span><span class="str">Time:     %i</span><span class="esc">\n</span><span class="str">Visits:   %i</span><span class="esc">\n</span><span class="str">&quot;</span> patients time visits
