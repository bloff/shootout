<span class="com">(* fannkuch.ml

   ocamlopt -dtypes -o fannkuch.com -inline 3 -unsafe fannkuch.ml
*)</span>

<span class="com">(* Monomorphic version for speed *)</span>
<span class="kwa">let</span> int_max <span class="sym">(</span>x <span class="sym">:</span> <span class="kwb">int</span><span class="sym">)</span> y <span class="sym">=</span> <span class="kwa">if</span> x <span class="sym">&lt;</span> y <span class="kwa">then</span> y <span class="kwa">else</span> x

<span class="kwa">let</span> pfannkuchen n <span class="sym">=
</span>  <span class="kwa">let</span> a <span class="sym">=</span> Array.init n <span class="sym">(</span><span class="kwa">fun</span> i <span class="sym">-&gt;</span> i<span class="sym">)
</span>  <span class="kwa">and</span> b <span class="sym">=</span> Array.make n <span class="num">0</span> <span class="kwa">in
  let rec</span> reverse i j <span class="sym">=
</span>    <span class="kwa">let</span> t <span class="sym">=</span> b.<span class="sym">(</span>i<span class="sym">)</span> <span class="kwa">and</span> i<span class="str">' = i + 1 and j'</span> <span class="sym">=</span> j <span class="num">- 1</span> <span class="kwa">in
</span>    b.<span class="sym">(</span>i<span class="sym">) &lt;-</span> b.<span class="sym">(</span>j<span class="sym">);</span>  b.<span class="sym">(</span>j<span class="sym">) &lt;-</span> t<span class="sym">;</span>  <span class="kwa">if</span> i<span class="str">' &lt; j'</span> <span class="kwa">then</span> reverse i<span class="str">' j'</span> <span class="kwa">in
  let rec</span> count_flips c <span class="sym">=
</span>    <span class="kwa">let</span> b0 <span class="sym">=</span> b.<span class="sym">(</span><span class="num">0</span><span class="sym">)</span> <span class="kwa">in
    if</span> b0 <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> c <span class="kwa">else</span> <span class="sym">(</span>reverse <span class="num">0</span> b0<span class="sym">;</span> count_flips<span class="sym">(</span>c<span class="sym">+</span><span class="num">1</span><span class="sym">))</span> <span class="kwa">in
  let</span> maxc <span class="sym">=</span> ref <span class="num">0</span> <span class="kwa">in
  let</span> f <span class="sym">() =
</span>    <span class="kwa">for</span> i <span class="sym">=</span> <span class="num">0</span> <span class="kwa">to</span> n <span class="num">- 1</span> <span class="kwa">do</span> b.<span class="sym">(</span>i<span class="sym">) &lt;-</span> a.<span class="sym">(</span>i<span class="sym">)</span> <span class="kwa">done</span><span class="sym">;
</span>    maxc <span class="sym">:=</span> int_max <span class="sym">(</span>count_flips <span class="num">0</span><span class="sym">) !</span>maxc <span class="kwa">in
</span>  <span class="com">(* Generate the n! permutations *)</span>
  <span class="kwa">let</span> swap i j <span class="sym">=</span> <span class="kwa">let</span> t <span class="sym">=</span> a.<span class="sym">(</span>i<span class="sym">)</span> <span class="kwa">in</span> a.<span class="sym">(</span>i<span class="sym">) &lt;-</span> a.<span class="sym">(</span>j<span class="sym">);</span> a.<span class="sym">(</span>j<span class="sym">) &lt;-</span> t <span class="kwa">in
  let rec</span> go <span class="sym">=</span> <span class="kwa">function
</span>    <span class="sym">|</span> <span class="num">0</span> <span class="sym">-&gt;</span> f<span class="sym">()
    |</span> <span class="num">1</span> <span class="sym">-&gt;</span> f<span class="sym">();</span> swap <span class="num">0 1</span><span class="sym">;</span> f<span class="sym">()
    |</span> n <span class="sym">-&gt;
</span>	<span class="kwa">let</span> n<span class="str">' = n - 1 in
	for c = 0 to n do ge n'</span><span class="sym">;</span> swap <span class="num">0</span> n<span class="sym">;</span> <span class="kwa">done
  and</span> ge <span class="sym">=</span> <span class="kwa">function
</span>    <span class="sym">|</span> <span class="num">0</span> <span class="sym">-&gt;</span> f<span class="sym">()
    |</span> <span class="num">1</span> <span class="sym">-&gt;</span> f<span class="sym">();</span> swap <span class="num">0 1</span><span class="sym">;</span> f<span class="sym">()
    |</span> n <span class="sym">-&gt;
</span>	<span class="kwa">let</span> n<span class="str">' = n - 1 in
	for c = 0 to n do go n'</span><span class="sym">;</span> swap c n<span class="sym">;</span> <span class="kwa">done  in
  let</span> n <span class="sym">=</span> Array.length a <span class="kwa">in
  if</span> n <span class="kwa">mod</span> <span class="num">2</span> <span class="sym">=</span> <span class="num">0</span> <span class="kwa">then</span> ge<span class="sym">(</span>n <span class="num">- 1</span><span class="sym">)</span> <span class="kwa">else</span> go<span class="sym">(</span>n <span class="num">- 1</span><span class="sym">);
  !</span>maxc

<span class="kwa">let</span> <span class="sym">() =
</span>  <span class="kwa">let</span> n <span class="sym">=</span> <span class="kwa">try</span> int_of_string Sys.argv.<span class="sym">(</span><span class="num">1</span><span class="sym">)</span> <span class="kwa">with</span> _ <span class="sym">-&gt;</span> <span class="num">1</span> <span class="kwa">in
</span>  Printf.printf <span class="str">&quot;Pfannkuchen(%i) = %i</span><span class="esc">\n</span><span class="str">&quot;</span> n <span class="sym">(</span>pfannkuchen n<span class="sym">)
</span>
