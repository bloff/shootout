<span class="line">    1 </span><span class="slc">;;; -*- mode: scheme -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">;;; $Id: lists-bigloo.code,v 1.4 2004-11-13 07:41:44 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">;;; from Sven Hartrumpf
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span><span class="sym">(</span>module lists
<span class="line">    7 </span>        <span class="sym">(</span>option <span class="sym">(</span><span class="kwa">set</span><span class="sym">! *</span>genericity<span class="sym">*</span> #f<span class="sym">))
</span><span class="line">    8 </span><span class="sym">        (</span>main main<span class="sym">))
</span><span class="line">    9 </span><span class="sym">
</span><span class="line">   10 </span><span class="sym">(</span>define SIZE <span class="num">10000</span><span class="sym">)
</span><span class="line">   11 </span><span class="sym">
</span><span class="line">   12 </span><span class="sym">(</span>define <span class="sym">(</span>test<span class="sym">-</span>lists<span class="sym">)
</span><span class="line">   13 </span><span class="sym">  (</span>let<span class="sym">* ((</span>l1 <span class="sym">(</span>integer<span class="sym">-</span><span class="kwa">list</span> <span class="num">1</span> SIZE<span class="sym">))
</span><span class="line">   14 </span><span class="sym">         (</span>l2 <span class="sym">(</span><span class="kwa">list</span><span class="sym">-</span>copy l1<span class="sym">)))
</span><span class="line">   15 </span><span class="sym"></span>    <span class="slc">;; move-left-to-right from l2 to l3
</span><span class="line">   16 </span><span class="slc"></span>    <span class="sym">(</span>let <span class="sym">((</span>l3 <span class="str">'()))
</span><span class="line">   17 </span><span class="str">      (let iter ((l3-run l3))
</span><span class="line">   18 </span><span class="str">        (cond ((pair? l2)
</span><span class="line">   19 </span><span class="str">               (cond ((pair? l3-run)        ; not the first element moved
</span><span class="line">   20 </span><span class="str">                      (let ((l3-run-new (list (car l2))))
</span><span class="line">   21 </span><span class="str">                        (set! l2 (cdr l2))
</span><span class="line">   22 </span><span class="str">                        (set-cdr! l3-run l3-run-new)
</span><span class="line">   23 </span><span class="str">                        (iter l3-run-new)))
</span><span class="line">   24 </span><span class="str">                     (else                ; the first element moved
</span><span class="line">   25 </span><span class="str">                      (set! l3 (list (car l2)))
</span><span class="line">   26 </span><span class="str">                      (set! l2 (cdr l2))
</span><span class="line">   27 </span><span class="str">                      (iter l3))))))
</span><span class="line">   28 </span><span class="str">      ;; move-right-to-left from l3 to l2
</span><span class="line">   29 </span><span class="str">      (let ((l2-run #f))                ; the last pair of l2 during construction
</span><span class="line">   30 </span><span class="str">        (let move-last ((l3-run l3)
</span><span class="line">   31 </span><span class="str">                        (l3-last-pair #f))
</span><span class="line">   32 </span><span class="str">          (cond ((pair? l3-run)                ; last element of l3 not reached
</span><span class="line">   33 </span><span class="str">                 (let ((l3-last-element (car l3-run))) ; store current element
</span><span class="line">   34 </span><span class="str">                   (set! l2-run (move-last (cdr l3-run) l3-run))
</span><span class="line">   35 </span><span class="str">                   (let ((l2-run-new (list l3-last-element)))
</span><span class="line">   36 </span><span class="str">                     (cond (l2-run        ; not the first element moved
</span><span class="line">   37 </span><span class="str">                            (set-cdr! l2-run l2-run-new)
</span><span class="line">   38 </span><span class="str">                            (cond ((pair? l3-last-pair)
</span><span class="line">   39 </span><span class="str">                                   (set-cdr! l3-last-pair '</span><span class="sym">()))
</span><span class="line">   40 </span><span class="sym">                                  (</span>else
<span class="line">   41 </span>                                   <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> l3 <span class="str">'()))))
</span><span class="line">   42 </span><span class="str">                           (else        ; the first element moved
</span><span class="line">   43 </span><span class="str">                            (set! l2 l2-run-new)))
</span><span class="line">   44 </span><span class="str">                     l2-run-new)))
</span><span class="line">   45 </span><span class="str">                (else
</span><span class="line">   46 </span><span class="str">                 #f))))
</span><span class="line">   47 </span><span class="str">      (set! l1 (reverse! l1))
</span><span class="line">   48 </span><span class="str">      (cond ((every-2? = l1 l2)
</span><span class="line">   49 </span><span class="str">             (length l1))
</span><span class="line">   50 </span><span class="str">            (else
</span><span class="line">   51 </span><span class="str">             #f)))))
</span><span class="line">   52 </span><span class="str">
</span><span class="line">   53 </span><span class="str">(define (main args)
</span><span class="line">   54 </span><span class="str">  (let ((n (or (and (= (length args) 2) (string-&gt;number (cadr args))) 1)))
</span><span class="line">   55 </span><span class="str">    (let (result)
</span><span class="line">   56 </span><span class="str">      (do ((i 0 (+ i 1)))
</span><span class="line">   57 </span><span class="str">          ((= i n))
</span><span class="line">   58 </span><span class="str">        (set! result (test-lists)))
</span><span class="line">   59 </span><span class="str">      (display result)
</span><span class="line">   60 </span><span class="str">      (newline))))
</span><span class="line">   61 </span><span class="str">
</span><span class="line">   62 </span><span class="str">(define every-2? (lambda (test l1 l2)
</span><span class="line">   63 </span><span class="str">  (or (null? l1)
</span><span class="line">   64 </span><span class="str">      (and (test (car l1) (car l2))
</span><span class="line">   65 </span><span class="str">           (every-2? test (cdr l1) (cdr l2))))))
</span><span class="line">   66 </span><span class="str">
</span><span class="line">   67 </span><span class="str">(define integer-list (lambda (i j)
</span><span class="line">   68 </span><span class="str">  (if (&gt; i j)
</span><span class="line">   69 </span><span class="str">      '</span><span class="sym">()
</span><span class="line">   70 </span><span class="sym">      (</span><span class="kwa">cons</span> i <span class="sym">(</span>integer<span class="sym">-</span><span class="kwa">list</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)</span> j<span class="sym">)))))
</span><span class="line">   71 </span><span class="sym">
</span><span class="line">   72 </span><span class="sym">(</span>define <span class="kwa">list</span><span class="sym">-</span>copy <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>l<span class="sym">)
</span><span class="line">   73 </span><span class="sym">  (</span><span class="kwa">append</span> l <span class="str">'())))</span>
