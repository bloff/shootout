<span class="slc">;;; -*- mode: scheme -*-</span>
<span class="slc">;;; $Id: lists-bigloo.code,v 1.7 2006-09-20 05:51:43 bfulgham Exp $</span>
<span class="slc">;;; http://www.bagley.org/~doug/shootout/</span>
<span class="slc">;;; from Sven Hartrumpf</span>

<span class="sym">(</span>module lists
	<span class="sym">(</span>option <span class="sym">(</span><span class="kwa">set</span><span class="sym">! *</span>genericity<span class="sym">*</span> #f<span class="sym">))</span>
	<span class="sym">(</span>main main<span class="sym">))</span>

<span class="sym">(</span>define SIZE <span class="num">10000</span><span class="sym">)</span>

<span class="sym">(</span>define <span class="sym">(</span>test<span class="sym">-</span>lists<span class="sym">)</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>l1 <span class="sym">(</span>integer<span class="sym">-</span><span class="kwa">list</span> <span class="num">1</span> SIZE<span class="sym">))</span>
	 <span class="sym">(</span>l2 <span class="sym">(</span><span class="kwa">list</span><span class="sym">-</span>copy l1<span class="sym">)))</span>
    <span class="slc">;; move-left-to-right from l2 to l3</span>
    <span class="sym">(</span>let <span class="sym">((</span>l3 <span class="str">'()))</span>
<span class="str">      (let iter ((l3-run l3))</span>
<span class="str">	(cond ((pair? l2)</span>
<span class="str">	       (cond ((pair? l3-run)	; not the first element moved</span>
<span class="str">		      (let ((l3-run-new (list (car l2))))</span>
<span class="str">			(set! l2 (cdr l2))</span>
<span class="str">			(set-cdr! l3-run l3-run-new)</span>
<span class="str">			(iter l3-run-new)))</span>
<span class="str">		     (else		; the first element moved</span>
<span class="str">		      (set! l3 (list (car l2)))</span>
<span class="str">		      (set! l2 (cdr l2))</span>
<span class="str">		      (iter l3))))))</span>
<span class="str">      ;; move-right-to-left from l3 to l2</span>
<span class="str">      (let ((l2-run #f))		; the last pair of l2 during construction</span>
<span class="str">	(let move-last ((l3-run l3)</span>
<span class="str">			(l3-last-pair #f))</span>
<span class="str">	  (cond ((pair? l3-run)		; last element of l3 not reached</span>
<span class="str">		 (let ((l3-last-element (car l3-run))) ; store current element</span>
<span class="str">		   (set! l2-run (move-last (cdr l3-run) l3-run))</span>
<span class="str">		   (let ((l2-run-new (list l3-last-element)))</span>
<span class="str">		     (cond (l2-run	; not the first element moved</span>
<span class="str">			    (set-cdr! l2-run l2-run-new)</span>
<span class="str">			    (cond ((pair? l3-last-pair)</span>
<span class="str">				   (set-cdr! l3-last-pair '</span><span class="sym">()))</span>
				  <span class="sym">(</span>else
				   <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> l3 <span class="str">'()))))</span>
<span class="str">			   (else	; the first element moved</span>
<span class="str">			    (set! l2 l2-run-new)))</span>
<span class="str">		     l2-run-new)))</span>
<span class="str">		(else</span>
<span class="str">		 #f))))</span>
<span class="str">      (set! l1 (reverse! l1))</span>
<span class="str">      (cond ((every-2? = l1 l2)</span>
<span class="str">	     (length l1))</span>
<span class="str">	    (else</span>
<span class="str">	     #f)))))</span>
<span class="str"></span>
<span class="str">(define (main args)</span>
<span class="str">  (let ((n (or (and (= (length args) 2) (string-&gt;number (cadr args))) 1)))</span>
<span class="str">    (let (result)</span>
<span class="str">      (do ((i 0 (+ i 1)))</span>
<span class="str">	  ((= i n))</span>
<span class="str">	(set! result (test-lists)))</span>
<span class="str">      (display result)</span>
<span class="str">      (newline))))</span>
<span class="str"></span>
<span class="str">(define every-2? (lambda (test l1 l2)</span>
<span class="str">  (or (null? l1)</span>
<span class="str">      (and (test (car l1) (car l2))</span>
<span class="str">           (every-2? test (cdr l1) (cdr l2))))))</span>
<span class="str"></span>
<span class="str">(define integer-list (lambda (i j)</span>
<span class="str">  (if (&gt; i j)</span>
<span class="str">      '</span><span class="sym">()</span>
      <span class="sym">(</span><span class="kwa">cons</span> i <span class="sym">(</span>integer<span class="sym">-</span><span class="kwa">list</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)</span> j<span class="sym">)))))</span>

<span class="sym">(</span>define <span class="kwa">list</span><span class="sym">-</span>copy <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>l<span class="sym">)</span>
  <span class="sym">(</span><span class="kwa">append</span> l <span class="str">'())))</span>
