<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">;;; -*- mode: scheme -*-
</FONT></I><I><FONT COLOR="#B22222">;;; $Id: lists-bigloo.code,v 1.1 2004-11-02 08:52:32 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">;;; http://www.bagley.org/~doug/shootout/
</FONT></I><I><FONT COLOR="#B22222">;;; from Sven Hartrumpf
</FONT></I>
(module lists
	(option (<B><FONT COLOR="#A020F0">set!</FONT></B> *genericity* #f))
	(main main))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">SIZE</FONT></B> 10000)

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">test-lists</FONT></B>)
  (<B><FONT COLOR="#A020F0">let*</FONT></B> ((l1 (integer-list 1 SIZE))
	 (l2 (list-copy l1)))
    <I><FONT COLOR="#B22222">;; move-left-to-right from l2 to l3
</FONT></I>    (<B><FONT COLOR="#A020F0">let</FONT></B> ((l3 '()))
      (<B><FONT COLOR="#A020F0">let</FONT></B> iter ((l3-run l3))
	(<B><FONT COLOR="#A020F0">cond</FONT></B> ((pair? l2)
	       (<B><FONT COLOR="#A020F0">cond</FONT></B> ((pair? l3-run)	<I><FONT COLOR="#B22222">; not the first element moved
</FONT></I>		      (<B><FONT COLOR="#A020F0">let</FONT></B> ((l3-run-new (list (car l2))))
			(<B><FONT COLOR="#A020F0">set!</FONT></B> l2 (cdr l2))
			(set-cdr! l3-run l3-run-new)
			(iter l3-run-new)))
		     (<B><FONT COLOR="#A020F0">else</FONT></B>		<I><FONT COLOR="#B22222">; the first element moved
</FONT></I>		      (<B><FONT COLOR="#A020F0">set!</FONT></B> l3 (list (car l2)))
		      (<B><FONT COLOR="#A020F0">set!</FONT></B> l2 (cdr l2))
		      (iter l3))))))
      <I><FONT COLOR="#B22222">;; move-right-to-left from l3 to l2
</FONT></I>      (<B><FONT COLOR="#A020F0">let</FONT></B> ((l2-run #f))		<I><FONT COLOR="#B22222">; the last pair of l2 during construction
</FONT></I>	(<B><FONT COLOR="#A020F0">let</FONT></B> move-last ((l3-run l3)
			(l3-last-pair #f))
	  (<B><FONT COLOR="#A020F0">cond</FONT></B> ((pair? l3-run)		<I><FONT COLOR="#B22222">; last element of l3 not reached
</FONT></I>		 (<B><FONT COLOR="#A020F0">let</FONT></B> ((l3-last-element (car l3-run))) <I><FONT COLOR="#B22222">; store current element
</FONT></I>		   (<B><FONT COLOR="#A020F0">set!</FONT></B> l2-run (move-last (cdr l3-run) l3-run))
		   (<B><FONT COLOR="#A020F0">let</FONT></B> ((l2-run-new (list l3-last-element)))
		     (<B><FONT COLOR="#A020F0">cond</FONT></B> (l2-run	<I><FONT COLOR="#B22222">; not the first element moved
</FONT></I>			    (set-cdr! l2-run l2-run-new)
			    (<B><FONT COLOR="#A020F0">cond</FONT></B> ((pair? l3-last-pair)
				   (set-cdr! l3-last-pair '()))
				  (<B><FONT COLOR="#A020F0">else</FONT></B>
				   (<B><FONT COLOR="#A020F0">set!</FONT></B> l3 '()))))
			   (<B><FONT COLOR="#A020F0">else</FONT></B>	<I><FONT COLOR="#B22222">; the first element moved
</FONT></I>			    (<B><FONT COLOR="#A020F0">set!</FONT></B> l2 l2-run-new)))
		     l2-run-new)))
		(<B><FONT COLOR="#A020F0">else</FONT></B>
		 #f))))
      (<B><FONT COLOR="#A020F0">set!</FONT></B> l1 (reverse! l1))
      (<B><FONT COLOR="#A020F0">cond</FONT></B> ((every-2? = l1 l2)
	     (length l1))
	    (<B><FONT COLOR="#A020F0">else</FONT></B>
	     #f)))))

(<B><FONT COLOR="#A020F0">define</FONT></B> (<B><FONT COLOR="#0000FF">main</FONT></B> args)
  (<B><FONT COLOR="#A020F0">let</FONT></B> ((n (<B><FONT COLOR="#A020F0">or</FONT></B> (<B><FONT COLOR="#A020F0">and</FONT></B> (= (length args) 2) (string-&gt;number (cadr args))) 1)))
    (<B><FONT COLOR="#A020F0">let</FONT></B> (result)
      (<B><FONT COLOR="#A020F0">do</FONT></B> ((i 0 (+ i 1)))
	  ((= i n))
	(<B><FONT COLOR="#A020F0">set!</FONT></B> result (test-lists)))
      (display result)
      (newline))))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">every-2?</FONT></B> (<B><FONT COLOR="#A020F0">lambda</FONT></B> (test l1 l2)
  (<B><FONT COLOR="#A020F0">or</FONT></B> (null? l1)
      (<B><FONT COLOR="#A020F0">and</FONT></B> (test (car l1) (car l2))
           (every-2? test (cdr l1) (cdr l2))))))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">integer-list</FONT></B> (<B><FONT COLOR="#A020F0">lambda</FONT></B> (i j)
  (<B><FONT COLOR="#A020F0">if</FONT></B> (&gt; i j)
      '()
      (cons i (integer-list (+ i 1) j)))))

(<B><FONT COLOR="#A020F0">define</FONT></B> <B><FONT COLOR="#0000FF">list-copy</FONT></B> (<B><FONT COLOR="#A020F0">lambda</FONT></B> (l)
  (append l '())))</pre></td></tr></table>
