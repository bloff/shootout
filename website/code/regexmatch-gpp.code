<span class="line">    1 </span><span class="slc">// -*- mode: c++ -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// $Id: regexmatch-gpp.code,v 1.3 2004-11-11 07:14:05 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// http://shootout.alioth.debian.org/
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">// From Bill Lear
</span><span class="line">    5 </span><span class="slc"></span>
<span class="line">    6 </span>
<span class="line">    7 </span><span class="dir">#include &lt;iostream&gt;
</span><span class="line">    8 </span><span class="dir"></span><span class="dir">#include &lt;zopyra/regx&gt;
</span><span class="line">    9 </span><span class="dir"></span>
<span class="line">   10 </span><span class="kwa">using namespace</span> std<span class="sym">;
</span><span class="line">   11 </span><span class="sym">
</span><span class="line">   12 </span><span class="sym"></span><span class="kwc">typedef</span> pair<span class="sym">&lt;</span><span class="kwb">const char</span><span class="sym">*,</span> <span class="kwb">const char</span><span class="sym">*&gt;</span> span<span class="sym">;
</span><span class="line">   13 </span><span class="sym">
</span><span class="line">   14 </span><span class="sym"></span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">int</span> ac<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> av<span class="sym">[]) {
</span><span class="line">   15 </span><span class="sym"></span>    zopyra<span class="sym">::</span>regx re<span class="sym">(
</span><span class="line">   16 </span><span class="sym"></span>        <span class="str">&quot;(?x)                  # set extended flag for embedded comment fun</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   17 </span>        <span class="str">&quot;(?:^|[^</span><span class="esc">\\</span><span class="str">d(])    # must be preceded by non-digit</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   18 </span>        <span class="str">&quot;([(])?           # match 1: possible initial left paren</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   19 </span>        <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d{3})         # match 2: area code is 3 digits</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   20 </span>        <span class="str">&quot;(?(1)[)])        # if match1 then match right paren</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   21 </span>        <span class="str">&quot;[ ]              # area code followed by one space</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   22 </span>        <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d{3})         # match 3: prefix of 3 digits</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   23 </span>        <span class="str">&quot;[- ]             # separator is either space or dash</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   24 </span>        <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d{4})         # match 4: last 4 digits</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   25 </span>        <span class="str">&quot;(?:</span><span class="esc">\\</span><span class="str">D|</span><span class="esc">\\</span><span class="str">b)      # followed by non-digit or break</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="line">   26 </span>        <span class="sym">);
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym"></span>    string line<span class="sym">;
</span><span class="line">   29 </span><span class="sym"></span>    vector<span class="sym">&lt;</span>span<span class="sym">&gt;</span> lines<span class="sym">;
</span><span class="line">   30 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">(</span>getline<span class="sym">(</span>cin<span class="sym">,</span> line<span class="sym">)) {
</span><span class="line">   31 </span><span class="sym"></span>        <span class="kwb">char</span><span class="sym">*</span> phone <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span>line<span class="sym">.</span>size<span class="sym">()];
</span><span class="line">   32 </span><span class="sym"></span>        copy<span class="sym">(</span>line<span class="sym">.</span>begin<span class="sym">(),</span> line<span class="sym">.</span>end<span class="sym">(),</span> phone<span class="sym">);
</span><span class="line">   33 </span><span class="sym"></span>        lines<span class="sym">.</span>push_back<span class="sym">(</span>span<span class="sym">(</span>phone<span class="sym">,</span> phone <span class="sym">+</span> line<span class="sym">.</span>size<span class="sym">()));
</span><span class="line">   34 </span><span class="sym">    }
</span><span class="line">   35 </span><span class="sym">
</span><span class="line">   36 </span><span class="sym"></span>    <span class="kwb">size_t</span> ITER <span class="sym">= (</span>ac <span class="sym">==</span> <span class="num">2</span> ? <span class="sym">(</span>atoi<span class="sym">(</span>av<span class="sym">[</span><span class="num">1</span><span class="sym">]) &lt;</span> <span class="num">1</span> ? <span class="num">1</span> <span class="sym">:</span> atoi<span class="sym">(</span>av<span class="sym">[</span><span class="num">1</span><span class="sym">])):</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   37 </span><span class="sym">
</span><span class="line">   38 </span><span class="sym"></span>    <span class="kwb">char</span> num<span class="sym">[</span><span class="num">13</span><span class="sym">];
</span><span class="line">   39 </span><span class="sym"></span>    num<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="str">'('</span><span class="sym">;
</span><span class="line">   40 </span><span class="sym"></span>    num<span class="sym">[</span><span class="num">4</span><span class="sym">] =</span> <span class="str">')'</span><span class="sym">;
</span><span class="line">   41 </span><span class="sym"></span>    num<span class="sym">[</span><span class="num">5</span><span class="sym">] =</span> <span class="str">' '</span><span class="sym">;
</span><span class="line">   42 </span><span class="sym"></span>    num<span class="sym">[</span><span class="num">9</span><span class="sym">] =</span> <span class="str">'-'</span><span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>    <span class="kwb">size_t</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   44 </span><span class="sym"></span>    <span class="kwa">while</span> <span class="sym">(</span>ITER<span class="sym">--) {
</span><span class="line">   45 </span><span class="sym"></span>        vector<span class="sym">&lt;</span>span<span class="sym">&gt;::</span>iterator end <span class="sym">=</span> lines<span class="sym">.</span>end<span class="sym">();
</span><span class="line">   46 </span><span class="sym"></span>        <span class="kwa">for</span> <span class="sym">(</span>vector<span class="sym">&lt;</span>span<span class="sym">&gt;::</span>iterator i <span class="sym">=</span> lines<span class="sym">.</span>begin<span class="sym">();</span> i <span class="sym">!=</span> end<span class="sym">; ++</span>i<span class="sym">) {
</span><span class="line">   47 </span><span class="sym"></span>            zopyra<span class="sym">::</span>regx<span class="sym">::</span>iterator p <span class="sym">=</span> re<span class="sym">.</span>find<span class="sym">(</span>i<span class="sym">-&gt;</span>first<span class="sym">,</span> i<span class="sym">-&gt;</span>second<span class="sym">);
</span><span class="line">   48 </span><span class="sym"></span>            <span class="kwa">if</span> <span class="sym">(</span>p<span class="sym">++ !=</span> re<span class="sym">.</span>end<span class="sym">()) {
</span><span class="line">   49 </span><span class="sym"></span>                <span class="kwb">char</span><span class="sym">*</span> num_p <span class="sym">= &amp;</span>num<span class="sym">[</span><span class="num">1</span><span class="sym">];
</span><span class="line">   50 </span><span class="sym">                ++</span>p<span class="sym">;
</span><span class="line">   51 </span><span class="sym"></span>                copy<span class="sym">(</span>p<span class="sym">-&gt;</span>first<span class="sym">,</span> p<span class="sym">-&gt;</span>second<span class="sym">,</span> num_p<span class="sym">);
</span><span class="line">   52 </span><span class="sym">
</span><span class="line">   53 </span><span class="sym"></span>                num_p <span class="sym">= &amp;</span>num<span class="sym">[</span><span class="num">6</span><span class="sym">];
</span><span class="line">   54 </span><span class="sym">                ++</span>p<span class="sym">;
</span><span class="line">   55 </span><span class="sym"></span>                copy<span class="sym">(</span>p<span class="sym">-&gt;</span>first<span class="sym">,</span> p<span class="sym">-&gt;</span>second<span class="sym">,</span> num_p<span class="sym">);
</span><span class="line">   56 </span><span class="sym">
</span><span class="line">   57 </span><span class="sym"></span>                num_p <span class="sym">= &amp;</span>num<span class="sym">[</span><span class="num">10</span><span class="sym">];
</span><span class="line">   58 </span><span class="sym">                ++</span>p<span class="sym">;
</span><span class="line">   59 </span><span class="sym"></span>                copy<span class="sym">(</span>p<span class="sym">-&gt;</span>first<span class="sym">,</span> p<span class="sym">-&gt;</span>second<span class="sym">,</span> num_p<span class="sym">);
</span><span class="line">   60 </span><span class="sym">
</span><span class="line">   61 </span><span class="sym"></span>                <span class="kwa">if</span> <span class="sym">(!</span>ITER<span class="sym">) {
</span><span class="line">   62 </span><span class="sym"></span>                    cout <span class="sym">&lt;&lt; ++</span>count <span class="sym">&lt;&lt;</span> <span class="str">&quot;: &quot;</span><span class="sym">;
</span><span class="line">   63 </span><span class="sym"></span>                    copy<span class="sym">(</span>num<span class="sym">,</span> num <span class="sym">+</span> <span class="num">14</span><span class="sym">,</span> ostream_iterator<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">&gt;(</span>cout<span class="sym">));
</span><span class="line">   64 </span><span class="sym"></span>                    cout <span class="sym">&lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;
</span><span class="line">   65 </span><span class="sym">                }
</span><span class="line">   66 </span><span class="sym">            }
</span><span class="line">   67 </span><span class="sym">        }
</span><span class="line">   68 </span><span class="sym">    }
</span><span class="line">   69 </span><span class="sym">}</span>
