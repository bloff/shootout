<span class="slc">// -*- mode: c++ -*-</span>
<span class="slc">// $Id: regexmatch-gpp.code,v 1.16 2006-09-30 16:39:42 bfulgham Exp $</span>
<span class="slc">// http://shootout.alioth.debian.org/</span>
<span class="slc">// From Bill Lear</span>


<span class="dir">#include &lt;iostream&gt;</span>
<span class="dir">#include &lt;zopyra/regx&gt;</span>

<span class="kwa">using namespace</span> std<span class="sym">;</span>

<span class="kwc">typedef</span> pair<span class="sym">&lt;</span><span class="kwb">const char</span><span class="sym">*,</span> <span class="kwb">const char</span><span class="sym">*&gt;</span> span<span class="sym">;</span>

<span class="kwb">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwb">int</span> ac<span class="sym">,</span> <span class="kwb">char</span><span class="sym">*</span> av<span class="sym">[]) {</span>
    zopyra<span class="sym">::</span>regx <span class="kwd">re</span><span class="sym">(</span>
	<span class="str">&quot;(?x)	          # set extended flag for embedded comment fun</span><span class="esc">\n</span><span class="str">&quot;</span>
        <span class="str">&quot;(?:^|[^</span><span class="esc">\\</span><span class="str">d(])    # must be preceded by non-digit</span><span class="esc">\n</span><span class="str">&quot;</span>
        <span class="str">&quot;([(])?           # match 1: possible initial left paren</span><span class="esc">\n</span><span class="str">&quot;</span>
        <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d{3})         # match 2: area code is 3 digits</span><span class="esc">\n</span><span class="str">&quot;</span>
        <span class="str">&quot;(?(1)[)])        # if match1 then match right paren</span><span class="esc">\n</span><span class="str">&quot;</span>
        <span class="str">&quot;[ ]              # area code followed by one space</span><span class="esc">\n</span><span class="str">&quot;</span>
        <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d{3})         # match 3: prefix of 3 digits</span><span class="esc">\n</span><span class="str">&quot;</span>
        <span class="str">&quot;[- ]             # separator is either space or dash</span><span class="esc">\n</span><span class="str">&quot;</span>
        <span class="str">&quot;(</span><span class="esc">\\</span><span class="str">d{4})         # match 4: last 4 digits</span><span class="esc">\n</span><span class="str">&quot;</span>
        <span class="str">&quot;(?:</span><span class="esc">\\</span><span class="str">D|</span><span class="esc">\\</span><span class="str">b)      # followed by non-digit or break</span><span class="esc">\n</span><span class="str">&quot;</span>
	<span class="sym">);</span>

    string line<span class="sym">;</span>
    vector<span class="sym">&lt;</span>span<span class="sym">&gt;</span> lines<span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span><span class="kwd">getline</span><span class="sym">(</span>cin<span class="sym">,</span> line<span class="sym">)) {</span>
        <span class="kwb">char</span><span class="sym">*</span> phone <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">char</span><span class="sym">[</span>line<span class="sym">.</span><span class="kwd">size</span><span class="sym">()];</span>
        <span class="kwd">copy</span><span class="sym">(</span>line<span class="sym">.</span><span class="kwd">begin</span><span class="sym">(),</span> line<span class="sym">.</span><span class="kwd">end</span><span class="sym">(),</span> phone<span class="sym">);</span>
        lines<span class="sym">.</span><span class="kwd">push_back</span><span class="sym">(</span><span class="kwd">span</span><span class="sym">(</span>phone<span class="sym">,</span> phone <span class="sym">+</span> line<span class="sym">.</span><span class="kwd">size</span><span class="sym">()));</span>
    <span class="sym">}</span>

    <span class="kwb">size_t</span> ITER <span class="sym">= (</span>ac <span class="sym">==</span> <span class="num">2</span> ? <span class="sym">(</span><span class="kwd">atoi</span><span class="sym">(</span>av<span class="sym">[</span><span class="num">1</span><span class="sym">]) &lt;</span> <span class="num">1</span> ? <span class="num">1</span> <span class="sym">:</span> <span class="kwd">atoi</span><span class="sym">(</span>av<span class="sym">[</span><span class="num">1</span><span class="sym">])):</span> <span class="num">1</span><span class="sym">);</span>

    <span class="kwb">char</span> num<span class="sym">[</span><span class="num">13</span><span class="sym">];</span>
    num<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="str">'('</span><span class="sym">;</span>
    num<span class="sym">[</span><span class="num">4</span><span class="sym">] =</span> <span class="str">')'</span><span class="sym">;</span>
    num<span class="sym">[</span><span class="num">5</span><span class="sym">] =</span> <span class="str">' '</span><span class="sym">;</span>
    num<span class="sym">[</span><span class="num">9</span><span class="sym">] =</span> <span class="str">'-'</span><span class="sym">;</span>
    <span class="kwb">size_t</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">while</span> <span class="sym">(</span>ITER<span class="sym">--) {</span>
        vector<span class="sym">&lt;</span>span<span class="sym">&gt;::</span>iterator end <span class="sym">=</span> lines<span class="sym">.</span><span class="kwd">end</span><span class="sym">();</span>
        <span class="kwa">for</span> <span class="sym">(</span>vector<span class="sym">&lt;</span>span<span class="sym">&gt;::</span>iterator i <span class="sym">=</span> lines<span class="sym">.</span><span class="kwd">begin</span><span class="sym">();</span> i <span class="sym">!=</span> end<span class="sym">; ++</span>i<span class="sym">) {</span>
            zopyra<span class="sym">::</span>regx<span class="sym">::</span>iterator p <span class="sym">=</span> re<span class="sym">.</span><span class="kwd">find</span><span class="sym">(</span>i<span class="sym">-&gt;</span>first<span class="sym">,</span> i<span class="sym">-&gt;</span>second<span class="sym">);</span>
            <span class="kwa">if</span> <span class="sym">(</span>p<span class="sym">++ !=</span> re<span class="sym">.</span><span class="kwd">end</span><span class="sym">()) {</span>
                <span class="kwb">char</span><span class="sym">*</span> num_p <span class="sym">= &amp;</span>num<span class="sym">[</span><span class="num">1</span><span class="sym">];</span>
                <span class="sym">++</span>p<span class="sym">;</span>
                <span class="kwd">copy</span><span class="sym">(</span>p<span class="sym">-&gt;</span>first<span class="sym">,</span> p<span class="sym">-&gt;</span>second<span class="sym">,</span> num_p<span class="sym">);</span>

                num_p <span class="sym">= &amp;</span>num<span class="sym">[</span><span class="num">6</span><span class="sym">];</span>
                <span class="sym">++</span>p<span class="sym">;</span>
                <span class="kwd">copy</span><span class="sym">(</span>p<span class="sym">-&gt;</span>first<span class="sym">,</span> p<span class="sym">-&gt;</span>second<span class="sym">,</span> num_p<span class="sym">);</span>

                num_p <span class="sym">= &amp;</span>num<span class="sym">[</span><span class="num">10</span><span class="sym">];</span>
                <span class="sym">++</span>p<span class="sym">;</span>
                <span class="kwd">copy</span><span class="sym">(</span>p<span class="sym">-&gt;</span>first<span class="sym">,</span> p<span class="sym">-&gt;</span>second<span class="sym">,</span> num_p<span class="sym">);</span>

                <span class="kwa">if</span> <span class="sym">(!</span>ITER<span class="sym">) {</span>
                    cout <span class="sym">&lt;&lt; ++</span>count <span class="sym">&lt;&lt;</span> <span class="str">&quot;: &quot;</span><span class="sym">;</span>
                    <span class="kwd">copy</span><span class="sym">(</span>num<span class="sym">,</span> num <span class="sym">+</span> <span class="num">14</span><span class="sym">,</span> ostream_iterator<span class="sym">&lt;</span><span class="kwb">char</span><span class="sym">&gt;(</span>cout<span class="sym">));</span>
                    cout <span class="sym">&lt;&lt;</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span><span class="sym">;</span>
                <span class="sym">}</span>
            <span class="sym">}</span>
        <span class="sym">}</span>
    <span class="sym">}</span>
<span class="sym">}</span>
