<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   Contributed by Dennis Decker Jensen
*/</span>

parse arg num <span class="sym">.
</span>maxflips <span class="sym">=</span> <span class="num">0
</span>f<span class="num">.0</span> <span class="sym">=</span> num<span class="sym">;</span> p<span class="num">.0</span> <span class="sym">=</span> num
<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> num<span class="sym">;</span> p<span class="sym">.</span>i <span class="sym">=</span> i<span class="sym">;</span> end<span class="sym">;

</span>call pfannkuch_permutations num
say <span class="str">&quot;Pfannkuchen(&quot;</span> <span class="sym">||</span> num <span class="sym">||</span> <span class="str">&quot;) = &quot;</span> <span class="sym">||</span> maxflips
exit<span class="sym">(</span><span class="num">0</span><span class="sym">)

</span>pfannkuch_permutations<span class="sym">:</span> procedure expose f<span class="sym">.</span> p<span class="sym">.</span> maxflips
arg n
<span class="kwa">if</span> n <span class="sym">=</span> <span class="num">1</span> then <span class="kwa">do
</span>	f<span class="num">.0</span> <span class="sym">=</span> p<span class="num">.0
</span>	<span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> p<span class="num">.0</span><span class="sym">;</span> f<span class="sym">.</span>i <span class="sym">=</span> p<span class="sym">.</span>i<span class="sym">;</span> end
	maxflips <span class="sym">=</span> max<span class="sym">(</span>nflips<span class="sym">(),</span> maxflips<span class="sym">)
</span>end
<span class="kwa">else do
	do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> n
		call pfannkuch_permutations n<span class="num">-1
</span>		m <span class="sym">=</span> p<span class="num">.1</span>		<span class="com">/* roll */</span>
		<span class="kwa">do</span> j <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> n
			k <span class="sym">=</span> j <span class="sym">+</span> <span class="num">1
</span>			p<span class="sym">.</span>j <span class="sym">=</span> p<span class="sym">.</span>k
		end
		p<span class="sym">.</span>n <span class="sym">=</span> m
	end
end
<span class="kwa">return</span> maxflips

nflips<span class="sym">:</span> procedure expose f<span class="sym">.
</span>n <span class="sym">=</span> <span class="num">0
</span><span class="kwa">do while</span> f<span class="num">.1</span> \<span class="sym">=</span> <span class="num">1
</span>	call reverse f<span class="num">.1
</span>	n <span class="sym">=</span> n <span class="sym">+</span> <span class="num">1
</span>end
<span class="kwa">return</span> n

reverse<span class="sym">:</span> procedure expose f<span class="sym">.
</span>arg n
k <span class="sym">=</span> n <span class="sym">%</span> <span class="num">2
</span><span class="kwa">do</span> i <span class="sym">=</span> <span class="num">1</span> <span class="kwa">for</span> k
	parse value f<span class="sym">.</span>i f<span class="sym">.</span>n with f<span class="sym">.</span>n f<span class="sym">.</span>i
	n <span class="sym">=</span> n <span class="num">- 1
</span>end
<span class="kwa">return
</span>
