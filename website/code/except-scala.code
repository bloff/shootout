<span class="com">/* The Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy (Scala novice)</span>
<span class="com">*/</span>

<span class="kwa">object</span> except <span class="sym">{</span>

   <span class="kwa">var</span> Lo <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
   <span class="kwa">var</span> Hi <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>

   <span class="kwa">def</span> main<span class="sym">(</span>args<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> n <span class="sym">=</span> toPositiveInt<span class="sym">(</span>args<span class="sym">);</span>

      <span class="kwa">for</span> <span class="sym">(</span><span class="kwa">val</span> i <span class="sym">&lt;-</span> <span class="kwc">Iterator</span><span class="sym">.</span>range<span class="sym">(</span><span class="num">0</span><span class="sym">,</span>n<span class="sym">))</span>
         someFunction<span class="sym">(</span>i<span class="sym">);</span>

      Console print<span class="sym">(</span><span class="str">&quot;Exceptions: HI=&quot;</span> <span class="sym">+</span> Hi<span class="sym">);</span>
      Console println<span class="sym">(</span><span class="str">&quot; / LO=&quot;</span> <span class="sym">+</span> Lo<span class="sym">);</span>
   <span class="sym">}</span>


   <span class="kwa">def</span> blowup<span class="sym">(</span>n<span class="sym">:</span> Int<span class="sym">) = {</span>
      <span class="kwa">if</span> <span class="sym">((</span>n <span class="sym">%</span> <span class="num">2</span><span class="sym">) ==</span> <span class="num">0</span><span class="sym">)</span>
         <span class="kwa">throw new</span> LoException<span class="sym">();</span>
      <span class="kwa">else</span>
         <span class="kwa">throw new</span> HiException<span class="sym">();   }</span>


   <span class="kwa">def</span> loFunction<span class="sym">(</span>n<span class="sym">:</span> Int<span class="sym">) = {</span>
      <span class="kwa">try</span> <span class="sym">{</span> blowup<span class="sym">(</span>n<span class="sym">); }</span>
      <span class="kwa">catch</span> <span class="sym">{</span> <span class="kwa">case</span> _<span class="sym">:</span> LoException <span class="sym">=&gt;</span> Lo <span class="sym">=</span> Lo <span class="sym">+</span> <span class="num">1</span><span class="sym">; }</span>
   <span class="sym">}</span>


   <span class="kwa">def</span> hiFunction<span class="sym">(</span>n<span class="sym">:</span> Int<span class="sym">) = {</span>
      <span class="kwa">try</span> <span class="sym">{</span> loFunction<span class="sym">(</span>n<span class="sym">); }</span>
      <span class="kwa">catch</span> <span class="sym">{</span> <span class="kwa">case</span> _<span class="sym">:</span> HiException <span class="sym">=&gt;</span> Hi <span class="sym">=</span> Hi <span class="sym">+</span> <span class="num">1</span><span class="sym">; }</span>
   <span class="sym">}</span>


   <span class="kwa">def</span> someFunction<span class="sym">(</span>n<span class="sym">:</span> Int<span class="sym">) = {</span>
      <span class="kwa">try</span> <span class="sym">{</span> hiFunction<span class="sym">(</span>n<span class="sym">); }</span>
      <span class="kwa">catch</span> <span class="sym">{</span> <span class="kwa">case</span> e<span class="sym">:</span> <span class="kwc">Exception</span> <span class="sym">=&gt;</span>
         Console println<span class="sym">(</span><span class="str">&quot;We shouldn't get here: &quot;</span> <span class="sym">+</span> e<span class="sym">);</span>
      <span class="sym">}</span>
   <span class="sym">}</span>


   <span class="kwa">def</span> toPositiveInt<span class="sym">(</span>s<span class="sym">:</span> <span class="kwc">Array</span><span class="sym">[</span><span class="kwc">String</span><span class="sym">]) = {</span>
      <span class="kwa">val</span> i <span class="sym">=</span>
         <span class="kwa">try</span> <span class="sym">{</span> <span class="kwc">Integer</span><span class="sym">.</span>parseInt<span class="sym">(</span>s<span class="sym">(</span><span class="num">0</span><span class="sym">)); }</span>
         <span class="kwa">catch</span> <span class="sym">{</span> <span class="kwa">case</span> _ <span class="sym">=&gt;</span> <span class="num">1</span> <span class="sym">}</span>
      <span class="kwa">if</span> <span class="sym">(</span>i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">)</span> i<span class="sym">;</span> <span class="kwa">else</span> <span class="num">1</span><span class="sym">;</span>
   <span class="sym">}</span>

<span class="sym">}</span>

<span class="kwa">private class</span> LoException <span class="kwa">extends</span> <span class="kwc">Exception</span> <span class="sym">{}</span>
<span class="kwa">private class</span> HiException <span class="kwa">extends</span> <span class="kwc">Exception</span> <span class="sym">{}</span>
