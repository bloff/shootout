<span class="slc">%%% -*- mode: erlang -*-</span>
<span class="slc">%%% $Id: wordfreq-erlang.code,v 1.10 2005-12-08 06:41:40 bfulgham Exp $</span>
<span class="slc">%%% http://shootout.alioth.debian.org/</span>
<span class="slc">%%%</span>
<span class="slc">%%% Contributed by Bengt Kleberg (Erlang Guru!)</span>
<span class="slc">%%% Updated by Alexey Shchepin &lt;alexey&#64;sevcom.net&gt;</span>

<span class="sym">-</span><span class="kwd">module</span><span class="sym">(</span>wordfreq<span class="sym">)</span>.
<span class="sym">-</span><span class="kwd">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">0</span><span class="sym">,</span> main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

<span class="sym">-</span><span class="kwd">define</span><span class="sym">(</span>BUFSIZE<span class="sym">,</span> <span class="num">4096</span><span class="sym">)</span>.

<span class="slc">%% ignore program argument</span>
<span class="kwd">main</span><span class="sym">() -&gt;</span> <span class="kwd">main</span><span class="sym">([</span><span class="str">'1'</span><span class="sym">])</span>.
<span class="kwd">main</span><span class="sym">(</span>_Args<span class="sym">) -&gt;</span>
    ets<span class="sym">:</span><span class="kwd">new</span><span class="sym">(</span>freqtab<span class="sym">, [</span>set<span class="sym">,</span> named_table<span class="sym">]),</span>
    ok <span class="sym">=</span> io<span class="sym">:</span><span class="kwd">setopts</span><span class="sym">([</span><span class="kwb">binary</span><span class="sym">]),</span>
    <span class="kwd">insert_input</span><span class="sym">(</span>io<span class="sym">:</span><span class="kwd">get_chars</span><span class="sym">(</span><span class="str">''</span><span class="sym">,</span> ?BUFSIZE<span class="sym">),</span> <span class="str">&quot;&quot;</span><span class="sym">),</span>
    List <span class="sym">=</span> <span class="kwd">sort</span><span class="sym">(),</span>
    <span class="kwd">print</span><span class="sym">(</span>List<span class="sym">),</span>
    <span class="kwb">halt</span><span class="sym">()</span>.


<span class="kwd">insert_input</span><span class="sym">(</span>eof<span class="sym">,</span> _Prev<span class="sym">) -&gt;</span> ok<span class="sym">;</span>
<span class="kwd">insert_input</span><span class="sym">(</span>Buf<span class="sym">,</span> Prev<span class="sym">) -&gt;</span>
    Suffix <span class="sym">=</span> <span class="kwd">words1</span><span class="sym">(</span>Prev <span class="sym">++</span> <span class="kwb">binary_to_list</span><span class="sym">(</span>Buf<span class="sym">)),</span>
    <span class="kwd">insert_input</span><span class="sym">(</span>io<span class="sym">:</span><span class="kwd">get_chars</span><span class="sym">(</span><span class="str">''</span><span class="sym">,</span> ?BUFSIZE<span class="sym">),</span> Suffix<span class="sym">)</span>.


<span class="kwd">words1</span><span class="sym">([</span>C <span class="sym">|</span> S<span class="sym">]) -&gt;</span>
    <span class="kwa">if</span>
	<span class="sym">(</span>C <span class="sym">&gt;=</span> $a<span class="sym">)</span> <span class="kwd">and</span> <span class="sym">(</span>C <span class="sym">=&lt;</span> $z<span class="sym">) -&gt;</span> <span class="kwd">words2</span><span class="sym">(</span>S<span class="sym">, [</span>C<span class="sym">]);</span>
	<span class="sym">(</span>C <span class="sym">&gt;=</span> $A<span class="sym">)</span> <span class="kwd">and</span> <span class="sym">(</span>C <span class="sym">=&lt;</span> $Z<span class="sym">) -&gt;</span> <span class="kwd">words2</span><span class="sym">(</span>S<span class="sym">, [</span>C <span class="sym">+</span> <span class="num">32</span><span class="sym">]);</span>
	true <span class="sym">-&gt;</span> <span class="kwd">words1</span><span class="sym">(</span>S<span class="sym">)</span>
    <span class="kwa">end</span><span class="sym">;</span>
<span class="kwd">words1</span><span class="sym">([]) -&gt;</span>
    <span class="str">&quot;&quot;</span>.

<span class="kwd">words2</span><span class="sym">([</span>C <span class="sym">|</span> S<span class="sym">],</span> Cs<span class="sym">) -&gt;</span>
    <span class="kwa">if</span>
	<span class="sym">(</span>C <span class="sym">&gt;=</span> $a<span class="sym">)</span> <span class="kwd">and</span> <span class="sym">(</span>C <span class="sym">=&lt;</span> $z<span class="sym">) -&gt;</span> <span class="kwd">words2</span><span class="sym">(</span>S<span class="sym">, [</span>C <span class="sym">|</span> Cs<span class="sym">]);</span>
	<span class="sym">(</span>C <span class="sym">&gt;=</span> $A<span class="sym">)</span> <span class="kwd">and</span> <span class="sym">(</span>C <span class="sym">=&lt;</span> $Z<span class="sym">) -&gt;</span> <span class="kwd">words2</span><span class="sym">(</span>S<span class="sym">, [</span>C <span class="sym">+</span> <span class="num">32</span> <span class="sym">|</span> Cs<span class="sym">]);</span>
	true <span class="sym">-&gt;</span>
	    <span class="kwd">update_count</span><span class="sym">(</span>Cs<span class="sym">),</span>
	    <span class="kwd">words1</span><span class="sym">(</span>S<span class="sym">)</span>
    <span class="kwa">end</span><span class="sym">;</span>
<span class="kwd">words2</span><span class="sym">([],</span> Cs<span class="sym">) -&gt;</span>
    lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">(</span>Cs<span class="sym">)</span>.


<span class="kwd">update_count</span><span class="sym">(</span>Word<span class="sym">) -&gt;</span>
    <span class="kwa">case</span> <span class="sym">(</span><span class="kwa">catch</span> ets<span class="sym">:</span><span class="kwd">update_counter</span><span class="sym">(</span>freqtab<span class="sym">,</span> Word<span class="sym">,</span> <span class="num">1</span><span class="sym">))</span> <span class="kwa">of</span>
        <span class="sym">{</span><span class="str">'EXIT'</span><span class="sym">, {</span>badarg<span class="sym">,</span> _<span class="sym">}} -&gt;</span>
	    true <span class="sym">=</span> ets<span class="sym">:</span><span class="kwd">insert</span><span class="sym">(</span>freqtab<span class="sym">, {</span>Word<span class="sym">,</span> <span class="num">1</span><span class="sym">});</span>
	_Integer <span class="sym">-&gt;</span>
	    ok
    <span class="kwa">end</span>.

<span class="kwd">sort</span><span class="sym">() -&gt;</span>
    Rev <span class="sym">= [{</span>C<span class="sym">,</span> lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">(</span>W<span class="sym">)} || {</span>W<span class="sym">,</span> C<span class="sym">} &lt;-</span> ets<span class="sym">:</span><span class="kwd">tab2list</span><span class="sym">(</span>freqtab<span class="sym">)],</span>
    lists<span class="sym">:</span><span class="kwd">reverse</span><span class="sym">(</span>lists<span class="sym">:</span><span class="kwd">sort</span><span class="sym">(</span>Rev<span class="sym">))</span>.

<span class="kwd">print</span><span class="sym">(</span>List<span class="sym">) -&gt;</span>
    Fun <span class="sym">=</span> <span class="kwa">fun</span><span class="sym">({</span>Count<span class="sym">,</span> Word<span class="sym">}) -&gt;</span>
		  io<span class="sym">:</span><span class="kwd">format</span><span class="sym">(</span><span class="str">&quot;~7w ~s~n&quot;</span><span class="sym">, [</span>Count<span class="sym">,</span> Word<span class="sym">])</span>
	  <span class="kwa">end</span><span class="sym">,</span>
    lists<span class="sym">:</span><span class="kwd">foreach</span><span class="sym">(</span>Fun<span class="sym">,</span> List<span class="sym">)</span>.

