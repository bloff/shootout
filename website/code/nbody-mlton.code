<span class="com">(*</span>
<span class="com"> * The Great Computer Language Shootout</span>
<span class="com"> * http://shootout.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Christoph Bauer</span>
<span class="com"> *)</span>


<span class="kwa">val</span> pi <span class="sym">=</span> <span class="num">3.141592653589793</span>
<span class="kwa">val</span> solar_mass <span class="sym">=</span> <span class="num">4.0</span> <span class="sym">*</span> pi <span class="sym">*</span> pi
<span class="kwa">val</span> days_per_year <span class="sym">=</span> <span class="num">365.24</span>

<span class="kwa">type</span> planet <span class="sym">= {</span>
  x <span class="sym">:</span> <span class="kwb">real</span> ref<span class="sym">,</span>
  y <span class="sym">:</span> <span class="kwb">real</span> ref<span class="sym">,</span>
  z <span class="sym">:</span> <span class="kwb">real</span> ref<span class="sym">,</span>
  vx<span class="sym">:</span> <span class="kwb">real</span> ref<span class="sym">,</span>
  vy<span class="sym">:</span> <span class="kwb">real</span> ref<span class="sym">,</span>
  vz<span class="sym">:</span> <span class="kwb">real</span> ref<span class="sym">,</span>
  mass <span class="sym">:</span> <span class="kwb">real</span>
<span class="sym">}</span>

<span class="kwa">fun</span> advance <span class="sym">(</span>bodies <span class="sym">:</span> planet array<span class="sym">)</span> dt <span class="sym">=</span>
  <span class="kwa">let</span>
     <span class="kwa">val</span> n <span class="sym">=</span> Array.length bodies
  <span class="kwa">in</span>
   for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span>
   <span class="kwa">let</span>
      <span class="kwa">val</span> b <span class="sym">=</span> Array.sub <span class="sym">(</span>bodies<span class="sym">,</span> i<span class="sym">)</span>
   <span class="kwa">in</span>
     for <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">fn</span> j <span class="sym">=&gt;</span>
         <span class="kwa">let</span>
           <span class="kwa">val</span> b' <span class="sym">=</span> Array.sub <span class="sym">(</span>bodies<span class="sym">,</span> j<span class="sym">)</span>
           <span class="kwa">val</span> dx <span class="sym">= !(</span>#x b<span class="sym">) - !(</span>#x b'<span class="sym">)</span>
           <span class="kwa">val</span> dy <span class="sym">= !(</span>#y b<span class="sym">) - !(</span>#y b'<span class="sym">)</span>
           <span class="kwa">val</span> dz <span class="sym">= !(</span>#z b<span class="sym">) - !(</span>#z b'<span class="sym">)</span>
           <span class="kwa">val</span> distance <span class="sym">=</span> Math.sqrt<span class="sym">(</span>dx <span class="sym">*</span> dx <span class="sym">+</span> dy <span class="sym">*</span> dy <span class="sym">+</span> dz <span class="sym">*</span> dz<span class="sym">)</span>
           <span class="kwa">val</span> mag <span class="sym">=</span> dt <span class="sym">/ (</span>distance <span class="sym">*</span> distance <span class="sym">*</span> distance<span class="sym">)</span>
         <span class="kwa">in</span>
           #vx b <span class="sym">:= !(</span>#vx b<span class="sym">) -</span> dx <span class="sym">* (</span>#mass b'<span class="sym">) *</span> mag<span class="sym">;</span>
           #vy b <span class="sym">:= !(</span>#vy b<span class="sym">) -</span> dy <span class="sym">* (</span>#mass b'<span class="sym">) *</span> mag<span class="sym">;</span>
           #vz b <span class="sym">:= !(</span>#vz b<span class="sym">) -</span> dz <span class="sym">* (</span>#mass b'<span class="sym">) *</span> mag<span class="sym">;</span>

           #vx b' <span class="sym">:= !(</span>#vx b'<span class="sym">) +</span> dx <span class="sym">* (</span>#mass b<span class="sym">) *</span> mag<span class="sym">;</span>
           #vy b' <span class="sym">:= !(</span>#vy b'<span class="sym">) +</span> dy <span class="sym">* (</span>#mass b<span class="sym">) *</span> mag<span class="sym">;</span>
           #vz b' <span class="sym">:= !(</span>#vz b'<span class="sym">) +</span> dz <span class="sym">* (</span>#mass b<span class="sym">) *</span> mag
        <span class="kwa">end</span><span class="sym">)</span>
  <span class="kwa">end</span><span class="sym">);</span>

  for<span class="sym">(</span> <span class="num">0</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span>
    <span class="kwa">let</span>
       <span class="kwa">val</span> b <span class="sym">=</span> Array.sub <span class="sym">(</span>bodies<span class="sym">,</span> i<span class="sym">)</span>
    <span class="kwa">in</span>
	#x b <span class="sym">:= !(</span>#x b<span class="sym">) +</span> dt <span class="sym">* !(</span>#vx b<span class="sym">);</span>
	#y b <span class="sym">:= !(</span>#y b<span class="sym">) +</span> dt <span class="sym">* !(</span>#vy b<span class="sym">);</span>
	#z b <span class="sym">:= !(</span>#z b<span class="sym">) +</span> dt <span class="sym">* !(</span>#vz b<span class="sym">)</span>
    <span class="kwa">end</span><span class="sym">)</span>
<span class="kwa">end</span>

<span class="kwa">fun</span> energy <span class="sym">(</span>bodies <span class="sym">:</span> planet array<span class="sym">) =</span>
  <span class="kwa">let</span>
     <span class="kwa">val</span> e <span class="sym">=</span> ref <span class="num">0.0</span>
  <span class="kwa">in</span>
    for<span class="sym">(</span><span class="num">0</span><span class="sym">,</span> Array.length bodies<span class="sym">,</span> <span class="kwa">fn</span> i <span class="sym">=&gt;</span>
    <span class="kwa">let</span>
        <span class="kwa">val</span> b <span class="sym">=</span> Array.sub <span class="sym">(</span>bodies<span class="sym">,</span> i<span class="sym">)</span>
    <span class="kwa">in</span>
       e <span class="sym">:= !</span>e <span class="sym">+</span> <span class="num">0.5</span> <span class="sym">* (</span>#mass b<span class="sym">) *</span>
		 <span class="sym">(!(</span>#vx b<span class="sym">) * !(</span>#vx b<span class="sym">) + !(</span>#vy b<span class="sym">)</span>
		  <span class="sym">* !(</span>#vy b<span class="sym">) + !(</span>#vz b<span class="sym">) * !(</span>#vz b<span class="sym">));</span>
       for <span class="sym">(</span>i<span class="sym">+</span><span class="num">1</span><span class="sym">,</span> Array.length bodies<span class="sym">,</span> <span class="kwa">fn</span> j <span class="sym">=&gt;</span>
         <span class="kwa">let</span>
            <span class="kwa">val</span> b' <span class="sym">=</span> Array.sub <span class="sym">(</span>bodies<span class="sym">,</span> j<span class="sym">)</span>
            <span class="kwa">val</span> dx <span class="sym">= !(</span>#x b<span class="sym">) - !(</span>#x b'<span class="sym">)</span>
            <span class="kwa">val</span> dy <span class="sym">= !(</span>#y b<span class="sym">) - !(</span>#y b'<span class="sym">)</span>
            <span class="kwa">val</span> dz <span class="sym">= !(</span>#z b<span class="sym">) - !(</span>#z b'<span class="sym">)</span>
            <span class="kwa">val</span> distance <span class="sym">=</span> Math.sqrt<span class="sym">(</span>dx <span class="sym">*</span> dx <span class="sym">+</span> dy <span class="sym">*</span> dy <span class="sym">+</span> dz <span class="sym">*</span> dz<span class="sym">)</span>
         <span class="kwa">in</span>
             e <span class="sym">:= !</span>e <span class="sym">- ((</span>#mass b<span class="sym">) * (</span>#mass b'<span class="sym">)) /</span> distance
         <span class="kwa">end</span><span class="sym">)</span>
   <span class="kwa">end</span><span class="sym">);</span>
   <span class="sym">!</span>e
  <span class="kwa">end</span>



<span class="kwa">fun</span> offset_momentum <span class="sym">(</span>bodies <span class="sym">:</span> planet array<span class="sym">) =</span>
  <span class="kwa">let</span>
      <span class="kwa">val</span> px <span class="sym">=</span> ref <span class="num">0.0</span>
      <span class="kwa">val</span> py <span class="sym">=</span> ref <span class="num">0.0</span>
      <span class="kwa">val</span> pz <span class="sym">=</span> ref <span class="num">0.0</span>
   <span class="kwa">in</span>
     for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> Array.length bodies<span class="sym">,</span>
	  <span class="kwa">fn</span> i <span class="sym">=&gt;</span>
	     <span class="sym">(</span>px <span class="sym">:= !</span>px <span class="sym">+ !(</span>#vx <span class="sym">(</span>Array.sub <span class="sym">(</span>bodies<span class="sym">,</span> i<span class="sym">))) * (</span>#mass <span class="sym">(</span>Array.sub <span class="sym">(</span>bodies<span class="sym">,</span> i<span class="sym">)));</span>
	      py <span class="sym">:= !</span>py <span class="sym">+ !(</span>#vy <span class="sym">(</span>Array.sub <span class="sym">(</span>bodies<span class="sym">,</span> i<span class="sym">))) * (</span>#mass <span class="sym">(</span>Array.sub <span class="sym">(</span>bodies<span class="sym">,</span> i<span class="sym">)));</span>
	      pz <span class="sym">:= !</span>pz <span class="sym">+ !(</span>#vz <span class="sym">(</span>Array.sub <span class="sym">(</span>bodies<span class="sym">,</span> i<span class="sym">))) * (</span>#mass <span class="sym">(</span>Array.sub <span class="sym">(</span>bodies<span class="sym">,</span> i<span class="sym">)))));</span>
     #vx <span class="sym">(</span>Array.sub <span class="sym">(</span>bodies<span class="sym">,</span> <span class="num">0</span><span class="sym">)) :=</span> ~ <span class="sym">(!</span>px <span class="sym">/</span> solar_mass<span class="sym">);</span>
     #vy <span class="sym">(</span>Array.sub <span class="sym">(</span>bodies<span class="sym">,</span> <span class="num">0</span><span class="sym">)) :=</span> ~ <span class="sym">(!</span>py <span class="sym">/</span> solar_mass<span class="sym">);</span>
     #vz <span class="sym">(</span>Array.sub <span class="sym">(</span>bodies<span class="sym">,</span> <span class="num">0</span><span class="sym">)) :=</span> ~ <span class="sym">(!</span>pz <span class="sym">/</span> solar_mass<span class="sym">)</span>
  <span class="kwa">end</span>

<span class="kwa">val</span> jupiter <span class="sym">= {</span>
  x <span class="sym">=</span> ref <span class="num">4.84143144246472090</span><span class="sym">,</span>
  y <span class="sym">=</span> ref ~<span class="num">1.16032004402742839</span><span class="sym">,</span>
  z <span class="sym">=</span> ref ~<span class="num">1.03622044471123109</span>e~<span class="num">1</span><span class="sym">,</span>
  vx <span class="sym">=</span> ref <span class="sym">(</span><span class="num">1.66007664274403694</span>e~<span class="num">3</span> <span class="sym">*</span> days_per_year<span class="sym">),</span>
  vy <span class="sym">=</span> ref <span class="sym">(</span><span class="num">7.69901118419740425</span>e~<span class="num">3</span> <span class="sym">*</span> days_per_year<span class="sym">),</span>
  vz <span class="sym">=</span> ref <span class="sym">(</span>~<span class="num">6.90460016972063023</span>e~<span class="num">5</span> <span class="sym">*</span> days_per_year<span class="sym">),</span>
  mass <span class="sym">=</span> <span class="num">9.54791938424326609</span>e~<span class="num">4</span> <span class="sym">*</span> solar_mass
<span class="sym">}</span>

<span class="kwa">val</span> saturn <span class="sym">= {</span>
  x <span class="sym">=</span> ref <span class="num">8.34336671824457987</span><span class="sym">,</span>
  y <span class="sym">=</span> ref <span class="num">4.12479856412430479</span>e00<span class="sym">,</span>
  z <span class="sym">=</span> ref ~<span class="num">4.03523417114321381</span>e~<span class="num">01</span><span class="sym">,</span>
  vx <span class="sym">=</span> ref <span class="sym">(</span>~<span class="num">2.76742510726862411</span>e~<span class="num">03</span> <span class="sym">*</span> days_per_year<span class="sym">),</span>
  vy <span class="sym">=</span> ref <span class="sym">(</span><span class="num">4.99852801234917238</span>e~<span class="num">03</span> <span class="sym">*</span> days_per_year<span class="sym">),</span>
  vz <span class="sym">=</span> ref <span class="sym">(</span><span class="num">2.30417297573763929</span>e~<span class="num">05</span> <span class="sym">*</span> days_per_year<span class="sym">),</span>
  mass <span class="sym">=</span> <span class="num">2.85885980666130812</span>e~<span class="num">04</span> <span class="sym">*</span> solar_mass
<span class="sym">}</span>

<span class="kwa">val</span> uranus <span class="sym">= {</span>
  x <span class="sym">=</span> ref <span class="num">1.28943695621391310</span>e01<span class="sym">,</span>
  y <span class="sym">=</span> ref ~<span class="num">1.51111514016986312</span>e01<span class="sym">,</span>
  z <span class="sym">=</span> ref ~<span class="num">2.23307578892655734</span>e~<span class="num">01</span><span class="sym">,</span>
  vx <span class="sym">=</span> ref <span class="sym">(</span><span class="num">2.96460137564761618</span>e~<span class="num">03</span> <span class="sym">*</span> days_per_year<span class="sym">),</span>
  vy <span class="sym">=</span> ref <span class="sym">(</span><span class="num">2.37847173959480950</span>e~<span class="num">03</span> <span class="sym">*</span> days_per_year<span class="sym">),</span>
  vz <span class="sym">=</span> ref <span class="sym">(</span>~<span class="num">2.96589568540237556</span>e~<span class="num">05</span> <span class="sym">*</span> days_per_year<span class="sym">),</span>
  mass <span class="sym">=</span> <span class="num">4.36624404335156298</span>e~<span class="num">05</span> <span class="sym">*</span> solar_mass
<span class="sym">}</span>

<span class="kwa">val</span> neptune <span class="sym">= {</span>
  x <span class="sym">=</span> ref <span class="num">1.53796971148509165</span>e01<span class="sym">,</span>
  y <span class="sym">=</span> ref ~<span class="num">2.59193146099879641</span>e01<span class="sym">,</span>
  z <span class="sym">=</span> ref <span class="num">1.79258772950371181</span>e~<span class="num">01</span><span class="sym">,</span>
  vx <span class="sym">=</span> ref <span class="sym">(</span><span class="num">2.68067772490389322</span>e~<span class="num">03</span> <span class="sym">*</span> days_per_year<span class="sym">),</span>
  vy <span class="sym">=</span> ref <span class="sym">(</span><span class="num">1.62824170038242295</span>e~<span class="num">03</span> <span class="sym">*</span> days_per_year<span class="sym">),</span>
  vz <span class="sym">=</span> ref <span class="sym">(</span>~<span class="num">9.51592254519715870</span>e~<span class="num">05</span> <span class="sym">*</span> days_per_year<span class="sym">),</span>
  mass <span class="sym">=</span> <span class="num">5.15138902046611451</span>e~<span class="num">05</span> <span class="sym">*</span> solar_mass
<span class="sym">}</span>

<span class="kwa">val</span> sun <span class="sym">= {</span>
  x <span class="sym">=</span> ref <span class="num">0.0</span><span class="sym">,</span>  y <span class="sym">=</span> ref <span class="num">0.0</span><span class="sym">,</span>  z <span class="sym">=</span> ref <span class="num">0.0</span><span class="sym">,</span>  vx <span class="sym">=</span> ref <span class="num">0.0</span><span class="sym">,</span>  vy <span class="sym">=</span> ref <span class="num">0.0</span><span class="sym">,</span> vz <span class="sym">=</span> ref <span class="num">0.0</span><span class="sym">,</span>
  mass<span class="sym">=</span> solar_mass
<span class="sym">}</span>



<span class="kwa">fun</span> printr r <span class="sym">=</span>
  <span class="kwa">let</span>
    <span class="kwa">val</span> <span class="sym">(</span>absr<span class="sym">,</span> sign<span class="sym">) =</span> <span class="kwa">if</span> r <span class="sym">&lt;</span> <span class="num">0.0</span> <span class="kwa">then</span> <span class="sym">(</span>~r<span class="sym">,</span><span class="str">&quot;-&quot;</span><span class="sym">)</span> <span class="kwa">else</span> <span class="sym">(</span>r<span class="sym">,</span> <span class="str">&quot;&quot;</span><span class="sym">)</span>
    <span class="kwa">val</span> s <span class="sym">=</span> <span class="kwa">Real</span>.fmt <span class="sym">(</span><span class="kwa">StringCvt</span>.FIX <span class="sym">(</span>SOME <span class="num">9</span><span class="sym">))</span> absr
  <span class="kwa">in</span> <span class="sym">(</span>print sign<span class="sym">;</span> print s<span class="sym">;</span> print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">)</span> <span class="kwa">end</span>

<span class="kwa">val</span> bodies <span class="sym">=</span> Array.fromList <span class="sym">[</span> sun<span class="sym">,</span> jupiter<span class="sym">,</span> saturn<span class="sym">,</span> uranus<span class="sym">,</span> neptune <span class="sym">]</span>


<span class="kwa">fun</span> main args <span class="sym">=</span>
    <span class="kwa">let</span>
	<span class="kwa">val</span> n <span class="sym">=</span>
	    <span class="kwa">case Int</span>.fromString <span class="sym">(</span><span class="kwa">List</span>.hd args<span class="sym">)</span> <span class="kwa">of</span>
		SOME i <span class="sym">=&gt;</span> i
	      <span class="sym">|</span> NONE <span class="sym">=&gt;</span> <span class="num">0</span>

    <span class="kwa">in</span>
	offset_momentum bodies<span class="sym">;</span>
	printr <span class="sym">(</span>energy bodies<span class="sym">);</span>
	for <span class="sym">(</span><span class="num">0</span><span class="sym">,</span> n<span class="sym">,</span> <span class="kwa">fn</span> _ <span class="sym">=&gt;</span> advance bodies <span class="num">0.01</span><span class="sym">);</span>
	printr <span class="sym">(</span>energy bodies<span class="sym">)</span>
    <span class="kwa">end</span>

<span class="kwa">val</span> _ <span class="sym">=</span> main <span class="sym">(</span>CommandLine.arguments <span class="sym">())</span>
