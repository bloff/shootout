<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">// -*- mode: c++ -*-
</FONT></I><I><FONT COLOR="#B22222">// $Id: hash-gpp.code,v 1.2 2004-11-10 07:10:35 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">// http://shootout.alioth.debian.org
</FONT></I><I><FONT COLOR="#B22222">//
</FONT></I><I><FONT COLOR="#B22222">// Improved by Brad Knotwell to use memory constraints
</FONT></I>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;stdio.h&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;iostream&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;memory&gt;</FONT></B>
#<B><FONT COLOR="#5F9EA0">include</FONT></B> <B><FONT COLOR="#BC8F8F">&lt;ext/hash_map&gt;</FONT></B>

using namespace std;
using namespace __gnu_cxx;

<B><FONT COLOR="#228B22">struct</FONT></B> eqstr {
    <B><FONT COLOR="#228B22">bool</FONT></B> <B><FONT COLOR="#A020F0">operator</FONT></B>()(<B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>* s1, <B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>* s2) <B><FONT COLOR="#228B22">const</FONT></B> {
	<B><FONT COLOR="#A020F0">return</FONT></B> strcmp(s1, s2) == 0;
    }
};

<B><FONT COLOR="#228B22">int</FONT></B>
<B><FONT COLOR="#0000FF">main</FONT></B>(<B><FONT COLOR="#228B22">int</FONT></B> argc, <B><FONT COLOR="#228B22">char</FONT></B> *argv[]) {
    <B><FONT COLOR="#228B22">int</FONT></B> n = ((argc == 2) ? atoi(argv[1]) : 1);
    <B><FONT COLOR="#228B22">char</FONT></B> buf[16];
    <B><FONT COLOR="#228B22">typedef</FONT></B> hash_map&lt;<B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>*, <B><FONT COLOR="#228B22">int</FONT></B>, hash&lt;<B><FONT COLOR="#228B22">const</FONT></B> <B><FONT COLOR="#228B22">char</FONT></B>*&gt;, eqstr, __single_client_alloc&gt; HM;
    HM X;

    <B><FONT COLOR="#A020F0">for</FONT></B> (<B><FONT COLOR="#228B22">int</FONT></B> i=1; i&lt;=n; i++) {
	sprintf(buf, <B><FONT COLOR="#BC8F8F">&quot;%x&quot;</FONT></B>, i);
	X[strdup(buf)] = i;
    }

    <B><FONT COLOR="#228B22">int</FONT></B> c = 0;
    <B><FONT COLOR="#A020F0">for</FONT></B> (<B><FONT COLOR="#228B22">int</FONT></B> i=n; i&gt;0; i--) {
	sprintf(buf, <B><FONT COLOR="#BC8F8F">&quot;%d&quot;</FONT></B>, i);
	<B><FONT COLOR="#A020F0">if</FONT></B> (X.find(buf) != X.end()) c++;
    }

    cout &lt;&lt; c &lt;&lt; endl;
}</pre></td></tr></table>
