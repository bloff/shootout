<span class="line">    1 </span><span class="slc">// -*- mode: c++ -*-
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">// $Id: hash-gpp.code,v 1.4 2004-11-13 07:41:35 bfulgham Exp $
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">// http://shootout.alioth.debian.org
</span><span class="line">    4 </span><span class="slc"></span><span class="slc">//
</span><span class="line">    5 </span><span class="slc"></span><span class="slc">// Improved by Brad Knotwell to use memory constraints
</span><span class="line">    6 </span><span class="slc"></span>
<span class="line">    7 </span><span class="dir">#include &lt;stdio.h&gt;
</span><span class="line">    8 </span><span class="dir"></span><span class="dir">#include &lt;iostream&gt;
</span><span class="line">    9 </span><span class="dir"></span><span class="dir">#include &lt;memory&gt;
</span><span class="line">   10 </span><span class="dir"></span><span class="dir">#include &lt;ext/hash_map&gt;
</span><span class="line">   11 </span><span class="dir"></span>
<span class="line">   12 </span><span class="kwa">using namespace</span> std<span class="sym">;
</span><span class="line">   13 </span><span class="sym"></span><span class="kwa">using namespace</span> __gnu_cxx<span class="sym">;
</span><span class="line">   14 </span><span class="sym">
</span><span class="line">   15 </span><span class="sym"></span><span class="kwb">struct</span> eqstr <span class="sym">{
</span><span class="line">   16 </span><span class="sym"></span>    <span class="kwb">bool</span> <span class="kwc">operator</span><span class="sym">()(</span><span class="kwb">const char</span><span class="sym">*</span> s1<span class="sym">,</span> <span class="kwb">const char</span><span class="sym">*</span> s2<span class="sym">)</span> <span class="kwb">const</span> <span class="sym">{
</span><span class="line">   17 </span><span class="sym"></span>        <span class="kwa">return</span> strcmp<span class="sym">(</span>s1<span class="sym">,</span> s2<span class="sym">) ==</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   18 </span><span class="sym">    }
</span><span class="line">   19 </span><span class="sym">};
</span><span class="line">   20 </span><span class="sym">
</span><span class="line">   21 </span><span class="sym"></span><span class="kwb">int
</span><span class="line">   22 </span><span class="kwb"></span>main<span class="sym">(</span><span class="kwb">int</span> argc<span class="sym">,</span> <span class="kwb">char</span> <span class="sym">*</span>argv<span class="sym">[]) {
</span><span class="line">   23 </span><span class="sym"></span>    <span class="kwb">int</span> n <span class="sym">= ((</span>argc <span class="sym">==</span> <span class="num">2</span><span class="sym">)</span> ? atoi<span class="sym">(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">);
</span><span class="line">   24 </span><span class="sym"></span>    <span class="kwb">char</span> buf<span class="sym">[</span><span class="num">16</span><span class="sym">];
</span><span class="line">   25 </span><span class="sym"></span>    <span class="kwc">typedef</span> hash_map<span class="sym">&lt;</span><span class="kwb">const char</span><span class="sym">*,</span> <span class="kwb">int</span><span class="sym">,</span> hash<span class="sym">&lt;</span><span class="kwb">const char</span><span class="sym">*&gt;,</span> eqstr<span class="sym">,</span> __single_client_alloc<span class="sym">&gt;</span> HM<span class="sym">;
</span><span class="line">   26 </span><span class="sym"></span>    HM X<span class="sym">;
</span><span class="line">   27 </span><span class="sym">
</span><span class="line">   28 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span><span class="num">1</span><span class="sym">;</span> i<span class="sym">&lt;=</span>n<span class="sym">;</span> i<span class="sym">++) {
</span><span class="line">   29 </span><span class="sym"></span>        sprintf<span class="sym">(</span>buf<span class="sym">,</span> <span class="str">&quot;%x&quot;</span><span class="sym">,</span> i<span class="sym">);
</span><span class="line">   30 </span><span class="sym"></span>        X<span class="sym">[</span>strdup<span class="sym">(</span>buf<span class="sym">)] =</span> i<span class="sym">;
</span><span class="line">   31 </span><span class="sym">    }
</span><span class="line">   32 </span><span class="sym">
</span><span class="line">   33 </span><span class="sym"></span>    <span class="kwb">int</span> c <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   34 </span><span class="sym"></span>    <span class="kwa">for</span> <span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span>n<span class="sym">;</span> i<span class="sym">&gt;</span><span class="num">0</span><span class="sym">;</span> i<span class="sym">--) {
</span><span class="line">   35 </span><span class="sym"></span>        sprintf<span class="sym">(</span>buf<span class="sym">,</span> <span class="str">&quot;%d&quot;</span><span class="sym">,</span> i<span class="sym">);
</span><span class="line">   36 </span><span class="sym"></span>        <span class="kwa">if</span> <span class="sym">(</span>X<span class="sym">.</span>find<span class="sym">(</span>buf<span class="sym">) !=</span> X<span class="sym">.</span>end<span class="sym">())</span> c<span class="sym">++;
</span><span class="line">   37 </span><span class="sym">    }
</span><span class="line">   38 </span><span class="sym">
</span><span class="line">   39 </span><span class="sym"></span>    cout <span class="sym">&lt;&lt;</span> c <span class="sym">&lt;&lt;</span> endl<span class="sym">;
</span><span class="line">   40 </span><span class="sym">}</span>
