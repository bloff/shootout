<span class="slc">#!/usr/bin/perl
</span><span class="slc"># $Id: heapsort-perl.code,v 1.5 2005-04-04 14:56:45 bfulgham Exp $
</span><span class="slc"># http://www.bagley.org/~doug/shootout/
</span><span class="slc"># Matt Harris suggested passing the array via typeglob
</span>
<span class="kwa">use</span> strict<span class="sym">;

</span><span class="kwa">use</span> constant IM <span class="sym">=&gt;</span> <span class="num">139968</span><span class="sym">;
</span><span class="kwa">use</span> constant IA <span class="sym">=&gt;</span>   <span class="num">3877</span><span class="sym">;
</span><span class="kwa">use</span> constant IC <span class="sym">=&gt;</span>  <span class="num">29573</span><span class="sym">;

</span><span class="kwa">use</span> vars qw<span class="sym">(</span>&#64;ra<span class="sym">);

</span><span class="kwc">my</span> <span class="kwb">$LAST</span> <span class="sym">=</span> <span class="num">42</span><span class="sym">;
</span><span class="kwa">sub</span> gen_random <span class="sym">{ (</span><span class="kwb">$_</span><span class="sym">[</span><span class="num">0</span><span class="sym">] * (</span><span class="kwb">$LAST</span> <span class="sym">= (</span><span class="kwb">$LAST</span> <span class="sym">*</span> IA <span class="sym">+</span> IC<span class="sym">)</span> % IM<span class="sym">)) /</span> IM <span class="sym">}

</span><span class="kwa">sub</span> heapsort <span class="sym">(</span><span class="kwb">$</span>\&#64;<span class="sym">) {
</span>    <span class="kwc">my</span> <span class="kwb">$n</span> <span class="sym">=</span> shift<span class="sym">;
</span>    <span class="slc"># use typeglob ra to refer to array.
</span>    <span class="kwc">local</span> <span class="sym">*</span>ra <span class="sym">=</span> shift<span class="sym">;

</span>    <span class="kwc">my</span><span class="sym">(</span><span class="kwb">$rra</span><span class="sym">,</span> <span class="kwb">$i</span><span class="sym">,</span> <span class="kwb">$j</span><span class="sym">);

</span>    <span class="kwc">my</span> <span class="kwb">$l</span> <span class="sym">= (</span><span class="kwb">$n</span> <span class="sym">&gt;&gt;</span> <span class="num">1</span><span class="sym">) +</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwc">my</span> <span class="kwb">$ir</span> <span class="sym">=</span> <span class="kwb">$n</span><span class="sym">;
</span>    <span class="kwa">while</span> <span class="sym">(</span><span class="num">1</span><span class="sym">) {
</span>	<span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$l</span> <span class="sym">&gt;</span> <span class="num">1</span><span class="sym">) {
</span>	    <span class="kwb">$rra</span> <span class="sym">=</span> <span class="kwb">$ra</span><span class="sym">[--</span><span class="kwb">$l</span><span class="sym">];
	}</span> <span class="kwa">else</span> <span class="sym">{
</span>	    <span class="kwb">$rra</span> <span class="sym">=</span> <span class="kwb">$ra</span><span class="sym">[</span><span class="kwb">$ir</span><span class="sym">];
</span>	    <span class="kwb">$ra</span><span class="sym">[</span><span class="kwb">$ir</span><span class="sym">] =</span> <span class="kwb">$ra</span><span class="sym">[</span><span class="num">1</span><span class="sym">];
</span>	    <span class="kwa">if</span> <span class="sym">(--</span><span class="kwb">$ir</span> <span class="sym">==</span> <span class="num">1</span><span class="sym">) {
</span>		<span class="kwb">$ra</span><span class="sym">[</span><span class="num">1</span><span class="sym">] =</span> <span class="kwb">$rra</span><span class="sym">;
</span>		<span class="kwa">return</span><span class="sym">;
	    }
	}
</span>	<span class="kwb">$i</span> <span class="sym">=</span> <span class="kwb">$l</span><span class="sym">;
</span>	<span class="kwb">$j</span> <span class="sym">=</span> <span class="kwb">$l</span> <span class="sym">&lt;&lt;</span> <span class="num">1</span><span class="sym">;
</span>	<span class="kwa">while</span> <span class="sym">(</span><span class="kwb">$j</span> <span class="sym">&lt;=</span> <span class="kwb">$ir</span><span class="sym">) {
</span>	    <span class="kwb">$j</span><span class="sym">++</span> <span class="kwa">if</span> <span class="sym">((</span><span class="kwb">$j</span> <span class="sym">&lt;</span> <span class="kwb">$ir</span><span class="sym">) &amp;&amp; (</span><span class="kwb">$ra</span><span class="sym">[</span><span class="kwb">$j</span><span class="sym">] &lt;</span> <span class="kwb">$ra</span><span class="sym">[</span><span class="kwb">$j</span><span class="sym">+</span><span class="num">1</span><span class="sym">]));
</span>	    <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$rra</span> <span class="sym">&lt;</span> <span class="kwb">$ra</span><span class="sym">[</span><span class="kwb">$j</span><span class="sym">]) {
</span>		<span class="kwb">$ra</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">] =</span> <span class="kwb">$ra</span><span class="sym">[</span><span class="kwb">$j</span><span class="sym">];
</span>		<span class="kwb">$j</span> <span class="sym">+= (</span><span class="kwb">$i</span> <span class="sym">=</span> <span class="kwb">$j</span><span class="sym">);
	    }</span> <span class="kwa">else</span> <span class="sym">{
</span>		<span class="kwb">$j</span> <span class="sym">=</span> <span class="kwb">$ir</span> <span class="sym">+</span> <span class="num">1</span><span class="sym">;
	    }
	}
</span>	<span class="kwb">$ra</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">] =</span> <span class="kwb">$rra</span><span class="sym">;
    }
}


</span><span class="kwc">my</span> <span class="kwb">$N</span> <span class="sym">=</span> <span class="kwb">$ARGV</span><span class="sym">[</span><span class="num">0</span><span class="sym">];
</span><span class="kwb">$N</span> <span class="sym">=</span> <span class="num">1</span> <span class="kwa">if</span> <span class="sym">(</span><span class="kwb">$N</span> <span class="sym">&lt;</span> <span class="num">1</span><span class="sym">);

</span><span class="slc"># create an array of N random doubles
</span><span class="kwc">my</span> &#64;ary <span class="sym">= ();
</span><span class="kwa">for</span> <span class="sym">(</span><span class="kwc">my</span> <span class="kwb">$i</span><span class="sym">=</span><span class="num">1</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">&lt;=</span><span class="kwb">$N</span><span class="sym">;</span> <span class="kwb">$i</span><span class="sym">++) {
</span>    <span class="kwb">$ary</span><span class="sym">[</span><span class="kwb">$i</span><span class="sym">] =</span> gen_random<span class="sym">(</span><span class="num">1.0</span><span class="sym">);
}

</span>heapsort<span class="sym">(</span><span class="kwb">$N</span><span class="sym">,</span> &#64;ary<span class="sym">);

</span>printf<span class="sym">(</span><span class="str">&quot;%.10f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="kwb">$ary</span><span class="sym">[-</span><span class="num">1</span><span class="sym">]);
</span>
