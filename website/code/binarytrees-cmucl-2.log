BUILD COMMANDS FOR: binarytrees.cmucl-2.cmucl

Fri Nov  4 23:12:58 PST 2005

CMUCL built with: /usr/bin/lisp -noinit -batch -eval '(load "binarytrees.cmucl-2.cmucl_compile")'
### START binarytrees.cmucl-2.cmucl_compile
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(compile-file "binarytrees.cmucl-2.cmucl" :block-compile t  :entry-points '(main))
(quit)
### END binarytrees.cmucl-2.cmucl_compile

; Loading #P"/opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.cmucl-2.cmucl_compile".

; Python version 1.1, VM version Intel x86 on 04 NOV 05 11:12:58 pm.
; Compiling: /opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.cmucl-2.cmucl 04 NOV 05 11:12:58 pm

; Converted BUILD-BTREE.
; Converted CHECK-NODE.
; Converted LOOP-DEPTHS.
; Converted MAIN.
; Compiling DEFUN MAIN: 

; 
; 
; File: /opt/shootout/shootout/bench/binarytrees/tmp/binarytrees.cmucl-2.cmucl

; In: DEFUN LOOP-DEPTHS

;   (LOOP FOR D FROM MIN-DEPTH...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> D #:G0)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a REAL, not a FLOAT.
; 
;   (+ MAX-DEPTH MIN-DEPTH (- D))
; --> + 
; ==>
;   (+ MAX-DEPTH MIN-DEPTH)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; ==>
;   (+ (+ MAX-DEPTH MIN-DEPTH) (- D))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a RATIONAL.
;     The second argument is a REAL, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
;     The second argument is a REAL, not a RATIONAL.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a SINGLE-FLOAT.
;     The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a DOUBLE-FLOAT.
;     The second argument is a REAL, not a SINGLE-FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (LOOP FOR D FROM MIN-DEPTH...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ SETQ 
; ==>
;   (+ D 2)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
;   (LOOP FOR I FROM 1...)
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY SETQ 
; ==>
;   (+ #:G2 (CHECK-NODE #))
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 

; In: DEFUN MAIN

;   (1+ N)
; ==>
;   (+ N 1)
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a FLOAT.
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; Note: Unable to optimize due to type uncertainty:
;     The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 

; In: DEFUN LOOP-DEPTHS

;   (LOOP FOR D FROM MIN-DEPTH...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> D #:G0)
; Note: Forced to do GENERIC-> (cost 10).
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a REAL, not a FIXNUM.
; 
;   (+ MAX-DEPTH MIN-DEPTH (- D))
; --> + 
; ==>
;   (+ MAX-DEPTH MIN-DEPTH)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 
;   (- D)
; ==>
;   (KERNEL:%NEGATE D)
; Note: Forced to do GENERIC-NEGATE (cost 10).
;     Unable to do inline float arithmetic (cost 1) because:
;     The first argument is a REAL, not a DOUBLE-FLOAT.
;     The result is a REAL, not a DOUBLE-FLOAT.
;     Unable to do inline float arithmetic (cost 1) because:
;     The first argument is a REAL, not a SINGLE-FLOAT.
;     The result is a REAL, not a SINGLE-FLOAT.
;     etc.
; 
;   (ASH 1 (+ MAX-DEPTH MIN-DEPTH #))
; Note: Forced to do full call.
;     Unable to do inline ASH (cost 3) because:
;     The second argument is a INTEGER, not a (UNSIGNED-BYTE 29).
;     The result is a UNSIGNED-BYTE, not a FIXNUM.
;     Unable to do inline ASH (cost 4) because:
;     The second argument is a INTEGER, not a (UNSIGNED-BYTE 29).
;     The result is a UNSIGNED-BYTE, not a (UNSIGNED-BYTE 32).
;     etc.
; 
;   (* ITERATIONS 2)
; ==>
;   (ASH C::X 1)
; Note: Forced to do full call.
;     Unable to do inline ASH (cost 2) because:
;     The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;     The result is a UNSIGNED-BYTE, not a FIXNUM.
;     Unable to do inline ASH (cost 3) because:
;     The first argument is a UNSIGNED-BYTE, not a (UNSIGNED-BYTE 32).
;     The result is a UNSIGNED-BYTE, not a (UNSIGNED-BYTE 32).
;     etc.
; 
;   (LOOP FOR I FROM 1...)
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> I #:G1)
; Note: Forced to do GENERIC-> (cost 10).
;     Unable to do inline fixnum comparison (cost 4) because:
;     The first argument is a (INTEGER -536870906 536870912), not a FIXNUM.
;     The second argument is a UNSIGNED-BYTE, not a FIXNUM.
; 
;   (LOOP FOR D FROM MIN-DEPTH...)
; --> BLOCK LET ANSI-LOOP::LOOP-BODY TAGBODY ANSI-LOOP::LOOP-REALLY-DESETQ SETQ 
; ==>
;   (+ D 2)
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 1) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     etc.
; 
;   (LOOP FOR I FROM 1...)
; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY SETQ 
; ==>
;   (+ #:G2 (CHECK-NODE #))
; Note: Forced to do GENERIC-+ (cost 10).
;     Unable to do inline fixnum arithmetic (cost 2) because:
;     The first argument is a NUMBER, not a FIXNUM.
;     The result is a NUMBER, not a FIXNUM.
;     Unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;     The first argument is a NUMBER, not a (SIGNED-BYTE 32).
;     The result is a NUMBER, not a (SIGNED-BYTE 32).
;     etc.
; ; [Last message occurs 2 times]

; --> BLOCK LET LET ANSI-LOOP::LOOP-BODY TAGBODY WHEN COND IF 
; ==>
;   (> I #:G1)
; Note: Doing signed word to integer coercion (cost 20) from I, for:
;     The first argument of GENERIC->.
; 
; Byte Compiling Top-Level Form: 

; Compilation unit finished.
;   36 notes


; binarytrees.cmucl-2.x86f written.
; Compilation finished in 0:00:00.
### START binarytrees.cmucl-2.cmucl_run
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
(setq *gc-verbose* nil)
(load "binarytrees.cmucl-2.x86f" :verbose nil :print nil)
(main) (quit)
### END binarytrees.cmucl-2.cmucl_run


=================================================================
COMMAND LINE (%A is single numeric argument):

 /usr/bin/lisp -noinit -batch -eval '(load "binarytrees.cmucl-2.cmucl_run" :verbose nil :print nil)' %A


PROGRAM OUTPUT
==============
stretch tree of depth 17	 check: -1
131072	 trees of depth 4	 check: -131072
32768	 trees of depth 6	 check: -32768
8192	 trees of depth 8	 check: -8192
2048	 trees of depth 10	 check: -2048
512	 trees of depth 12	 check: -512
128	 trees of depth 14	 check: -128
32	 trees of depth 16	 check: -32
long lived tree of depth 16	 check: -1
