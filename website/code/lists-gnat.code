<span class="line">    1 </span><span class="slc">-- $Id: lists-gnat.code,v 1.3 2004-11-11 07:13:59 bfulgham Exp $
</span><span class="line">    2 </span><span class="slc"></span><span class="slc">-- http://dada.perl.it/shootout/
</span><span class="line">    3 </span><span class="slc"></span><span class="slc">-- by James S. Rogers
</span><span class="line">    4 </span><span class="slc"></span><span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Text_Io<span class="sym">;
</span><span class="line">    5 </span><span class="sym"></span><span class="kwa">with</span> Ada.Integer_Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Integer_Text_IO<span class="sym">;
</span><span class="line">    6 </span><span class="sym"></span><span class="kwa">with</span> Ada.Unchecked_Deallocation<span class="sym">;
</span><span class="line">    7 </span><span class="sym"></span><span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span> <span class="kwa">use</span> Ada.Command_Line<span class="sym">;
</span><span class="line">    8 </span><span class="sym">
</span><span class="line">    9 </span><span class="sym"></span><span class="kwa">procedure</span> Listoperations <span class="kwa">is
</span><span class="line">   10 </span><span class="kwa">   pragma</span> suppress<span class="sym">(</span>All_Checks<span class="sym">);
</span><span class="line">   11 </span><span class="sym"></span>   <span class="kwa">package</span> Listops <span class="kwa">is
</span><span class="line">   12 </span><span class="kwa"></span>      Empty_List_Error <span class="sym">:</span> <span class="kwa">exception</span><span class="sym">;
</span><span class="line">   13 </span><span class="sym"></span>      <span class="kwa">type</span> List <span class="kwa">is private</span><span class="sym">;
</span><span class="line">   14 </span><span class="sym"></span>      <span class="kwa">function</span> Length<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Natural</span><span class="sym">;
</span><span class="line">   15 </span><span class="sym"></span>      <span class="kwa">function</span> Is_Empty<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Boolean</span><span class="sym">;
</span><span class="line">   16 </span><span class="sym"></span>      <span class="kwa">type</span> List_Element <span class="kwa">is private</span><span class="sym">;
</span><span class="line">   17 </span><span class="sym"></span>      <span class="kwa">type</span> Element_Access <span class="kwa">is access</span> List_Element<span class="sym">;
</span><span class="line">   18 </span><span class="sym"></span>      <span class="kwa">function</span> First<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">return</span> List_Element<span class="sym">;
</span><span class="line">   19 </span><span class="sym"></span>      <span class="kwa">function</span> Last<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">return</span> List_Element<span class="sym">;
</span><span class="line">   20 </span><span class="sym"></span>      <span class="kwa">procedure</span> Push_Tail<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">Integer</span><span class="sym">);
</span><span class="line">   21 </span><span class="sym"></span>      <span class="kwa">procedure</span> Pop_Tail<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Integer</span><span class="sym">);
</span><span class="line">   22 </span><span class="sym"></span>      <span class="kwa">procedure</span> Push_Head<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">Integer</span><span class="sym">);
</span><span class="line">   23 </span><span class="sym"></span>      <span class="kwa">procedure</span> Pop_Head<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Integer</span><span class="sym">);
</span><span class="line">   24 </span><span class="sym"></span>      <span class="kwa">function</span> <span class="str">&quot;=&quot;</span><span class="sym">(</span>Left<span class="sym">,</span> Right <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Boolean</span><span class="sym">;
</span><span class="line">   25 </span><span class="sym"></span>      <span class="kwa">function</span> New_List <span class="kwa">return</span> List<span class="sym">;
</span><span class="line">   26 </span><span class="sym"></span>      <span class="kwa">function</span> Sequence<span class="sym">(</span>From<span class="sym">,</span> To <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">return</span> List<span class="sym">;
</span><span class="line">   27 </span><span class="sym"></span>      <span class="kwa">function</span> Copy<span class="sym">(</span>Source <span class="sym">:</span> List<span class="sym">)</span> <span class="kwa">return</span> List<span class="sym">;
</span><span class="line">   28 </span><span class="sym"></span>      <span class="kwa">procedure</span> List_Reverse<span class="sym">(</span>Source <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">);
</span><span class="line">   29 </span><span class="sym"></span>      <span class="kwa">procedure</span> Empty_List<span class="sym">(</span>Source <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">);
</span><span class="line">   30 </span><span class="sym"></span>      <span class="kwa">procedure</span> Print<span class="sym">(</span>Msg <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">String</span><span class="sym">;</span> Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">);
</span><span class="line">   31 </span><span class="sym"></span>      <span class="kwa">function</span> Test_Lists <span class="kwa">return</span> <span class="kwb">Integer</span><span class="sym">;
</span><span class="line">   32 </span><span class="sym"></span>   <span class="kwa">private
</span><span class="line">   33 </span><span class="kwa">      type</span> List_Element <span class="kwa">is record
</span><span class="line">   34 </span><span class="kwa"></span>         Value <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   35 </span><span class="sym"></span>         Previous <span class="sym">:</span> Element_Access <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span><span class="line">   36 </span><span class="sym"></span>         Next     <span class="sym">:</span> Element_Access <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span><span class="line">   37 </span><span class="sym"></span>      <span class="kwa">end record</span><span class="sym">;
</span><span class="line">   38 </span><span class="sym"></span>      <span class="kwa">type</span> List <span class="kwa">is record
</span><span class="line">   39 </span><span class="kwa"></span>         Length <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   40 </span><span class="sym"></span>         Head   <span class="sym">:</span> Element_Access <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span><span class="line">   41 </span><span class="sym"></span>         Tail   <span class="sym">:</span> Element_Access <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span><span class="line">   42 </span><span class="sym"></span>      <span class="kwa">end record</span><span class="sym">;
</span><span class="line">   43 </span><span class="sym"></span>   <span class="kwa">end</span> Listops<span class="sym">;
</span><span class="line">   44 </span><span class="sym">
</span><span class="line">   45 </span><span class="sym"></span>   <span class="kwa">package body</span> Listops <span class="kwa">is
</span><span class="line">   46 </span><span class="kwa">      function</span> Length<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Natural</span> <span class="kwa">is
</span><span class="line">   47 </span><span class="kwa">      begin
</span><span class="line">   48 </span><span class="kwa">         return</span> Item.Length<span class="sym">;
</span><span class="line">   49 </span><span class="sym"></span>      <span class="kwa">end</span> Length<span class="sym">;
</span><span class="line">   50 </span><span class="sym"></span>      <span class="kwa">function</span> Is_Empty<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Boolean</span> <span class="kwa">is
</span><span class="line">   51 </span><span class="kwa">      begin
</span><span class="line">   52 </span><span class="kwa">         return</span> Item.Length <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span><span class="line">   53 </span><span class="sym"></span>      <span class="kwa">end</span> Is_Empty<span class="sym">;
</span><span class="line">   54 </span><span class="sym"></span>      <span class="kwa">function</span> First<span class="sym">(</span>Item <span class="sym">:</span> List<span class="sym">)</span> <span class="kwa">return</span> List_Element <span class="kwa">is
</span><span class="line">   55 </span><span class="kwa">      begin
</span><span class="line">   56 </span><span class="kwa">         if</span> Is_Empty<span class="sym">(</span>Item<span class="sym">)</span> <span class="kwa">then
</span><span class="line">   57 </span><span class="kwa">            raise</span> Empty_List_Error<span class="sym">;
</span><span class="line">   58 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   59 </span><span class="sym"></span>         <span class="kwa">return</span> Item.Head.<span class="kwa">All</span><span class="sym">;
</span><span class="line">   60 </span><span class="sym"></span>      <span class="kwa">end</span> First<span class="sym">;
</span><span class="line">   61 </span><span class="sym"></span>      <span class="kwa">function</span> Last<span class="sym">(</span>Item <span class="sym">:</span> List<span class="sym">)</span> <span class="kwa">return</span> List_Element <span class="kwa">is
</span><span class="line">   62 </span><span class="kwa">      begin
</span><span class="line">   63 </span><span class="kwa">         if</span> Is_Empty<span class="sym">(</span>Item<span class="sym">)</span> <span class="kwa">then
</span><span class="line">   64 </span><span class="kwa">            raise</span> Empty_List_Error<span class="sym">;
</span><span class="line">   65 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   66 </span><span class="sym"></span>         <span class="kwa">return</span> Item.Tail.<span class="kwa">All</span><span class="sym">;
</span><span class="line">   67 </span><span class="sym"></span>      <span class="kwa">end</span> Last<span class="sym">;
</span><span class="line">   68 </span><span class="sym"></span>      <span class="kwa">procedure</span> Push_Tail<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">is
</span><span class="line">   69 </span><span class="kwa"></span>         Tail <span class="sym">:</span> Element_Access <span class="sym">:=</span> Item.Tail<span class="sym">;
</span><span class="line">   70 </span><span class="sym"></span>         Temp <span class="sym">:</span> Element_Access <span class="sym">:=</span> <span class="kwa">new</span> List_Element<span class="sym">;
</span><span class="line">   71 </span><span class="sym"></span>      <span class="kwa">begin
</span><span class="line">   72 </span><span class="kwa"></span>         Temp.Value <span class="sym">:=</span> Element<span class="sym">;
</span><span class="line">   73 </span><span class="sym"></span>         Item.Length <span class="sym">:=</span> Item.Length <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">   74 </span><span class="sym"></span>         Item.Tail <span class="sym">:=</span> Temp<span class="sym">;
</span><span class="line">   75 </span><span class="sym"></span>         <span class="kwa">if</span> Tail <span class="sym">/=</span> <span class="kwa">null then
</span><span class="line">   76 </span><span class="kwa"></span>            Temp.Previous <span class="sym">:=</span> Tail<span class="sym">;
</span><span class="line">   77 </span><span class="sym"></span>            Tail.Next <span class="sym">:=</span> Temp<span class="sym">;
</span><span class="line">   78 </span><span class="sym"></span>         <span class="kwa">else
</span><span class="line">   79 </span><span class="kwa"></span>            Item.Head <span class="sym">:=</span> Temp<span class="sym">;
</span><span class="line">   80 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   81 </span><span class="sym"></span>      <span class="kwa">end</span> Push_Tail<span class="sym">;
</span><span class="line">   82 </span><span class="sym"></span>      <span class="kwa">procedure</span> Pop_Tail<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">is
</span><span class="line">   83 </span><span class="kwa">         procedure</span> Free <span class="kwa">is new</span> Ada.Unchecked_Deallocation<span class="sym">(</span>List_Element<span class="sym">,
</span><span class="line">   84 </span><span class="sym"></span>Element_Access<span class="sym">);
</span><span class="line">   85 </span><span class="sym"></span>         Temp <span class="sym">:</span> Element_Access <span class="sym">:=</span> Item.Tail<span class="sym">;
</span><span class="line">   86 </span><span class="sym"></span>      <span class="kwa">begin
</span><span class="line">   87 </span><span class="kwa">         if</span> Item.Length <span class="sym">&gt;=</span> <span class="num">1</span> <span class="kwa">then
</span><span class="line">   88 </span><span class="kwa"></span>            Item.Length <span class="sym">:=</span> Item.Length <span class="num">- 1</span><span class="sym">;
</span><span class="line">   89 </span><span class="sym"></span>            Element <span class="sym">:=</span> Item.Tail.Value<span class="sym">;
</span><span class="line">   90 </span><span class="sym"></span>            Item.Tail <span class="sym">:=</span> Item.Tail.Previous<span class="sym">;
</span><span class="line">   91 </span><span class="sym"></span>            <span class="kwa">if</span> Item.Tail <span class="sym">/=</span> <span class="kwa">null then
</span><span class="line">   92 </span><span class="kwa"></span>               Item.Tail.Next <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span><span class="line">   93 </span><span class="sym"></span>            <span class="kwa">else
</span><span class="line">   94 </span><span class="kwa"></span>               Item.Head <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span><span class="line">   95 </span><span class="sym"></span>            <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   96 </span><span class="sym"></span>            <span class="kwa">if</span> Temp <span class="sym">/=</span> <span class="kwa">null then
</span><span class="line">   97 </span><span class="kwa"></span>               Free<span class="sym">(</span>Temp<span class="sym">);
</span><span class="line">   98 </span><span class="sym"></span>            <span class="kwa">end if</span><span class="sym">;
</span><span class="line">   99 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  100 </span><span class="sym"></span>      <span class="kwa">end</span> Pop_Tail<span class="sym">;
</span><span class="line">  101 </span><span class="sym"></span>      <span class="kwa">procedure</span> Push_Head<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">is
</span><span class="line">  102 </span><span class="kwa"></span>         Head <span class="sym">:</span> Element_Access <span class="sym">:=</span> Item.Head<span class="sym">;
</span><span class="line">  103 </span><span class="sym"></span>         Temp <span class="sym">:</span> Element_Access <span class="sym">:=</span> <span class="kwa">new</span> List_Element<span class="sym">;
</span><span class="line">  104 </span><span class="sym"></span>      <span class="kwa">begin
</span><span class="line">  105 </span><span class="kwa"></span>         Temp.Value <span class="sym">:=</span> Element<span class="sym">;
</span><span class="line">  106 </span><span class="sym"></span>         Item.Length <span class="sym">:=</span> Item.Length <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span><span class="line">  107 </span><span class="sym"></span>         Temp.Next <span class="sym">:=</span> Head<span class="sym">;
</span><span class="line">  108 </span><span class="sym"></span>         Item.Head <span class="sym">:=</span> Temp<span class="sym">;
</span><span class="line">  109 </span><span class="sym"></span>         <span class="kwa">if</span> Head <span class="sym">/=</span> <span class="kwa">null then
</span><span class="line">  110 </span><span class="kwa"></span>            Head.Previous <span class="sym">:=</span> Temp<span class="sym">;
</span><span class="line">  111 </span><span class="sym"></span>         <span class="kwa">else
</span><span class="line">  112 </span><span class="kwa"></span>            Item.Tail <span class="sym">:=</span> Temp<span class="sym">;
</span><span class="line">  113 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  114 </span><span class="sym"></span>      <span class="kwa">end</span> Push_Head<span class="sym">;
</span><span class="line">  115 </span><span class="sym"></span>      <span class="kwa">procedure</span> Pop_Head<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">is
</span><span class="line">  116 </span><span class="kwa">         procedure</span> Free <span class="kwa">is new</span> Ada.Unchecked_Deallocation<span class="sym">(</span>List_Element<span class="sym">,
</span><span class="line">  117 </span><span class="sym"></span>Element_Access<span class="sym">);
</span><span class="line">  118 </span><span class="sym"></span>            Head <span class="sym">:</span> Element_Access <span class="sym">:=</span> Item.Head<span class="sym">;
</span><span class="line">  119 </span><span class="sym"></span>         <span class="kwa">begin
</span><span class="line">  120 </span><span class="kwa">            if</span> Head <span class="sym">/=</span> <span class="kwa">null then
</span><span class="line">  121 </span><span class="kwa"></span>               Element <span class="sym">:=</span> Head.Value<span class="sym">;
</span><span class="line">  122 </span><span class="sym"></span>               Item.Head <span class="sym">:=</span> Item.Head.Next<span class="sym">;
</span><span class="line">  123 </span><span class="sym"></span>               Item.Length <span class="sym">:=</span> Item.Length <span class="num">- 1</span><span class="sym">;
</span><span class="line">  124 </span><span class="sym"></span>               <span class="kwa">if</span> Item.Head <span class="sym">=</span> <span class="kwa">null then
</span><span class="line">  125 </span><span class="kwa"></span>                  Item.Tail <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span><span class="line">  126 </span><span class="sym"></span>               <span class="kwa">else
</span><span class="line">  127 </span><span class="kwa"></span>                  Item.Head.Previous <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span><span class="line">  128 </span><span class="sym"></span>               <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  129 </span><span class="sym"></span>               Free<span class="sym">(</span>Head<span class="sym">);
</span><span class="line">  130 </span><span class="sym"></span>            <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  131 </span><span class="sym"></span>         <span class="kwa">end</span> Pop_Head<span class="sym">;
</span><span class="line">  132 </span><span class="sym"></span>      <span class="kwa">function</span> <span class="str">&quot;=&quot;</span><span class="sym">(</span>Left<span class="sym">,</span> Right <span class="sym">:</span> List<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Boolean</span> <span class="kwa">is
</span><span class="line">  133 </span><span class="kwa"></span>         Left_Ptr <span class="sym">:</span> Element_Access <span class="sym">:=</span> Left.Head<span class="sym">;
</span><span class="line">  134 </span><span class="sym"></span>         Right_Ptr <span class="sym">:</span> Element_Access <span class="sym">:=</span> Right.Head<span class="sym">;
</span><span class="line">  135 </span><span class="sym"></span>         Result <span class="sym">:</span> <span class="kwb">Boolean</span> <span class="sym">:=</span> True<span class="sym">;
</span><span class="line">  136 </span><span class="sym"></span>      <span class="kwa">begin
</span><span class="line">  137 </span><span class="kwa">         if</span> Left.Length <span class="sym">=</span> Right.Length <span class="kwa">then
</span><span class="line">  138 </span><span class="kwa">            while</span> Left_Ptr <span class="sym">/=</span> <span class="kwa">null loop
</span><span class="line">  139 </span><span class="kwa">               if</span> Left_Ptr.Value <span class="sym">/=</span> Right_Ptr.Value <span class="kwa">then
</span><span class="line">  140 </span><span class="kwa"></span>                  Result <span class="sym">:=</span> False<span class="sym">;
</span><span class="line">  141 </span><span class="sym"></span>                  <span class="kwa">exit</span><span class="sym">;
</span><span class="line">  142 </span><span class="sym"></span>               <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  143 </span><span class="sym"></span>               Left_Ptr <span class="sym">:=</span> Left_Ptr.Next<span class="sym">;
</span><span class="line">  144 </span><span class="sym"></span>               Right_Ptr <span class="sym">:=</span> Right_Ptr.Next<span class="sym">;
</span><span class="line">  145 </span><span class="sym"></span>            <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">  146 </span><span class="sym"></span>         <span class="kwa">else
</span><span class="line">  147 </span><span class="kwa"></span>            Result <span class="sym">:=</span> False<span class="sym">;
</span><span class="line">  148 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  149 </span><span class="sym"></span>         <span class="kwa">return</span> Result<span class="sym">;
</span><span class="line">  150 </span><span class="sym"></span>      <span class="kwa">end</span> <span class="str">&quot;=&quot;</span><span class="sym">;
</span><span class="line">  151 </span><span class="sym"></span>      <span class="kwa">function</span> New_List <span class="kwa">return</span> List <span class="kwa">is
</span><span class="line">  152 </span><span class="kwa"></span>         Result <span class="sym">:</span> List<span class="sym">;
</span><span class="line">  153 </span><span class="sym"></span>      <span class="kwa">begin
</span><span class="line">  154 </span><span class="kwa">         return</span> Result<span class="sym">;
</span><span class="line">  155 </span><span class="sym"></span>      <span class="kwa">end</span> New_List<span class="sym">;
</span><span class="line">  156 </span><span class="sym"></span>      <span class="kwa">function</span> Sequence<span class="sym">(</span>From<span class="sym">,</span> To <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">return</span> List <span class="kwa">is
</span><span class="line">  157 </span><span class="kwa"></span>         Result <span class="sym">:</span> List<span class="sym">;
</span><span class="line">  158 </span><span class="sym"></span>         Temp <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span><span class="line">  159 </span><span class="sym"></span>         Low <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> From<span class="sym">;
</span><span class="line">  160 </span><span class="sym"></span>         High <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> To<span class="sym">;
</span><span class="line">  161 </span><span class="sym"></span>      <span class="kwa">begin
</span><span class="line">  162 </span><span class="kwa">         if</span> From <span class="sym">&gt;</span> To <span class="kwa">then
</span><span class="line">  163 </span><span class="kwa"></span>            Temp <span class="sym">:=</span> From<span class="sym">;
</span><span class="line">  164 </span><span class="sym"></span>            Low <span class="sym">:=</span> To<span class="sym">;
</span><span class="line">  165 </span><span class="sym"></span>            High <span class="sym">:=</span> Temp<span class="sym">;
</span><span class="line">  166 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  167 </span><span class="sym"></span>         <span class="kwa">for</span> Val <span class="kwa">in</span> Low..High <span class="kwa">loop
</span><span class="line">  168 </span><span class="kwa"></span>            Push_Tail<span class="sym">(</span>Result<span class="sym">,</span> Val<span class="sym">);
</span><span class="line">  169 </span><span class="sym"></span>         <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">  170 </span><span class="sym"></span>         <span class="kwa">return</span> Result<span class="sym">;
</span><span class="line">  171 </span><span class="sym"></span>      <span class="kwa">end</span> Sequence<span class="sym">;
</span><span class="line">  172 </span><span class="sym"></span>      <span class="kwa">function</span> Copy<span class="sym">(</span>Source <span class="sym">:</span> List<span class="sym">)</span> <span class="kwa">return</span> List <span class="kwa">is
</span><span class="line">  173 </span><span class="kwa"></span>         Result <span class="sym">:</span> List<span class="sym">;
</span><span class="line">  174 </span><span class="sym"></span>         Source_Ptr <span class="sym">:</span> Element_Access <span class="sym">:=</span> Source.Head<span class="sym">;
</span><span class="line">  175 </span><span class="sym"></span>      <span class="kwa">begin
</span><span class="line">  176 </span><span class="kwa">         while</span> Source_Ptr <span class="sym">/=</span> <span class="kwa">null loop
</span><span class="line">  177 </span><span class="kwa"></span>            Push_Tail<span class="sym">(</span>Item <span class="sym">=&gt;</span> Result<span class="sym">,</span> Element <span class="sym">=&gt;</span> Source_Ptr.Value<span class="sym">);
</span><span class="line">  178 </span><span class="sym"></span>            Source_Ptr <span class="sym">:=</span> Source_Ptr.Next<span class="sym">;
</span><span class="line">  179 </span><span class="sym"></span>         <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">  180 </span><span class="sym"></span>         <span class="kwa">return</span> Result<span class="sym">;
</span><span class="line">  181 </span><span class="sym"></span>      <span class="kwa">end</span> Copy<span class="sym">;
</span><span class="line">  182 </span><span class="sym"></span>      <span class="kwa">procedure</span> List_Reverse<span class="sym">(</span>Source <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">)</span> <span class="kwa">is
</span><span class="line">  183 </span><span class="kwa"></span>         Head <span class="sym">:</span> Element_Access <span class="sym">:=</span> Source.Head<span class="sym">;
</span><span class="line">  184 </span><span class="sym"></span>         Temp <span class="sym">:</span> Element_Access<span class="sym">;
</span><span class="line">  185 </span><span class="sym"></span>      <span class="kwa">begin
</span><span class="line">  186 </span><span class="kwa"></span>         Temp <span class="sym">:=</span> Source.Head<span class="sym">;
</span><span class="line">  187 </span><span class="sym"></span>         Source.Head <span class="sym">:=</span> Source.Tail<span class="sym">;
</span><span class="line">  188 </span><span class="sym"></span>         Source.Tail <span class="sym">:=</span> Temp<span class="sym">;
</span><span class="line">  189 </span><span class="sym"></span>         <span class="kwa">if</span> Head <span class="sym">=</span> <span class="kwa">null then
</span><span class="line">  190 </span><span class="kwa">            raise</span> Empty_List_Error<span class="sym">;
</span><span class="line">  191 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  192 </span><span class="sym"></span>         <span class="kwa">loop
</span><span class="line">  193 </span><span class="kwa"></span>            Temp <span class="sym">:=</span> Head.Next<span class="sym">;
</span><span class="line">  194 </span><span class="sym"></span>            Head.Next <span class="sym">:=</span> Head.Previous<span class="sym">;
</span><span class="line">  195 </span><span class="sym"></span>            Head.Previous <span class="sym">:=</span> Temp<span class="sym">;
</span><span class="line">  196 </span><span class="sym"></span>            Head <span class="sym">:=</span> Temp<span class="sym">;
</span><span class="line">  197 </span><span class="sym"></span>            <span class="kwa">exit when</span> Head <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;
</span><span class="line">  198 </span><span class="sym"></span>         <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">  199 </span><span class="sym"></span>      <span class="kwa">end</span> List_Reverse<span class="sym">;
</span><span class="line">  200 </span><span class="sym"></span>      <span class="kwa">procedure</span> Empty_List<span class="sym">(</span>Source <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">)</span> <span class="kwa">is
</span><span class="line">  201 </span><span class="kwa">         procedure</span> Free <span class="kwa">is new</span> Ada.Unchecked_Deallocation<span class="sym">(</span>List_Element<span class="sym">,
</span><span class="line">  202 </span><span class="sym"></span>Element_Access<span class="sym">);
</span><span class="line">  203 </span><span class="sym"></span>         Source_Ptr <span class="sym">:</span> Element_Access <span class="sym">:=</span> Source.Head<span class="sym">;
</span><span class="line">  204 </span><span class="sym"></span>         Temp <span class="sym">:</span> Element_Access<span class="sym">;
</span><span class="line">  205 </span><span class="sym"></span>      <span class="kwa">begin
</span><span class="line">  206 </span><span class="kwa">         while</span> Source_Ptr <span class="sym">/=</span> <span class="kwa">null loop
</span><span class="line">  207 </span><span class="kwa"></span>            Temp <span class="sym">:=</span> Source_Ptr<span class="sym">;
</span><span class="line">  208 </span><span class="sym"></span>            Source_Ptr <span class="sym">:=</span> Source_Ptr.Next<span class="sym">;
</span><span class="line">  209 </span><span class="sym"></span>            Free<span class="sym">(</span>Temp<span class="sym">);
</span><span class="line">  210 </span><span class="sym"></span>         <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">  211 </span><span class="sym"></span>         Source <span class="sym">:=</span> New_List<span class="sym">;
</span><span class="line">  212 </span><span class="sym"></span>      <span class="kwa">end</span> Empty_List<span class="sym">;
</span><span class="line">  213 </span><span class="sym"></span>      <span class="kwa">procedure</span> Print<span class="sym">(</span>Msg <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">String</span><span class="sym">;</span> Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">is
</span><span class="line">  214 </span><span class="kwa"></span>         Source_Ptr <span class="sym">:</span> Element_Access <span class="sym">:=</span> Item.Head<span class="sym">;
</span><span class="line">  215 </span><span class="sym"></span>      <span class="kwa">begin
</span><span class="line">  216 </span><span class="kwa"></span>         Put_Line<span class="sym">(</span>Msg<span class="sym">);
</span><span class="line">  217 </span><span class="sym"></span>         Put_Line<span class="sym">(</span><span class="str">&quot;Length:&quot;</span> <span class="sym">&amp;</span> <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>Length<span class="sym">(</span>Item<span class="sym">)));
</span><span class="line">  218 </span><span class="sym"></span>         <span class="kwa">while</span> Source_Ptr <span class="sym">/=</span> <span class="kwa">null loop
</span><span class="line">  219 </span><span class="kwa">            if</span> Source_Ptr.Previous <span class="sym">/=</span> <span class="kwa">null then
</span><span class="line">  220 </span><span class="kwa"></span>               Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Source_Ptr.Previous.Value<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">6</span><span class="sym">);
</span><span class="line">  221 </span><span class="sym"></span>            <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  222 </span><span class="sym"></span>            Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Source_Ptr.Value<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">6</span><span class="sym">);
</span><span class="line">  223 </span><span class="sym"></span>            <span class="kwa">if</span> Source_Ptr.Next <span class="sym">/=</span> <span class="kwa">null then
</span><span class="line">  224 </span><span class="kwa"></span>               Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Source_Ptr.Next.Value<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">6</span><span class="sym">);
</span><span class="line">  225 </span><span class="sym"></span>            <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  226 </span><span class="sym"></span>            New_Line<span class="sym">;
</span><span class="line">  227 </span><span class="sym"></span>            Source_Ptr <span class="sym">:=</span> Source_Ptr.Next<span class="sym">;
</span><span class="line">  228 </span><span class="sym"></span>         <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">  229 </span><span class="sym"></span>      <span class="kwa">end</span> Print<span class="sym">;
</span><span class="line">  230 </span><span class="sym"></span>      <span class="kwa">function</span> Test_Lists <span class="kwa">return</span> <span class="kwb">Integer</span> <span class="kwa">is
</span><span class="line">  231 </span><span class="kwa"></span>         Size <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">10_000</span><span class="sym">;
</span><span class="line">  232 </span><span class="sym"></span>         Li1<span class="sym">,</span> Li2<span class="sym">,</span> Li3 <span class="sym">:</span> List<span class="sym">;</span> <span class="slc">-- all are created as empty lists
</span><span class="line">  233 </span><span class="slc"></span>         Temp_Element <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span><span class="line">  234 </span><span class="sym"></span>         Len <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span><span class="line">  235 </span><span class="sym"></span>      <span class="kwa">begin
</span><span class="line">  236 </span><span class="kwa"></span>         <span class="slc">-- Create a list of integers from 1 to Size
</span><span class="line">  237 </span><span class="slc"></span>         Li1 <span class="sym">:=</span> Sequence<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> Size<span class="sym">);
</span><span class="line">  238 </span><span class="sym"></span>         <span class="slc">-- Copy the list to Li2
</span><span class="line">  239 </span><span class="slc"></span>         Li2 <span class="sym">:=</span> Copy<span class="sym">(</span>Li1<span class="sym">);
</span><span class="line">  240 </span><span class="sym"></span>         <span class="slc">-- Compare Li1 and Li2 for equality
</span><span class="line">  241 </span><span class="slc"></span>         <span class="kwa">if</span> Li1 <span class="sym">/=</span> Li2 <span class="kwa">then
</span><span class="line">  242 </span><span class="kwa"></span>            Put_Line<span class="sym">(</span><span class="str">&quot;Li1 and Li2 are not equal!&quot;</span><span class="sym">);
</span><span class="line">  243 </span><span class="sym"></span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span><span class="line">  244 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  245 </span><span class="sym"></span>         <span class="kwa">while not</span> Is_Empty<span class="sym">(</span>Li2<span class="sym">)</span> <span class="kwa">loop
</span><span class="line">  246 </span><span class="kwa"></span>            Pop_Head<span class="sym">(</span>Li2<span class="sym">,</span> Temp_Element<span class="sym">);
</span><span class="line">  247 </span><span class="sym"></span>            Push_Tail<span class="sym">(</span>Li3<span class="sym">,</span> Temp_Element<span class="sym">);
</span><span class="line">  248 </span><span class="sym"></span>         <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">  249 </span><span class="sym"></span>         <span class="slc">-- Li2 must be empty now
</span><span class="line">  250 </span><span class="slc"></span>         <span class="kwa">if not</span> Is_Empty<span class="sym">(</span>Li2<span class="sym">)</span> <span class="kwa">then
</span><span class="line">  251 </span><span class="kwa"></span>            Put_Line<span class="sym">(</span><span class="str">&quot;Li2 should be empty now!&quot;</span><span class="sym">);
</span><span class="line">  252 </span><span class="sym"></span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span><span class="line">  253 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  254 </span><span class="sym"></span>         <span class="slc">-- Append each item from Li3 to Li2
</span><span class="line">  255 </span><span class="slc"></span>         <span class="slc">-- reversing the list
</span><span class="line">  256 </span><span class="slc"></span>         <span class="kwa">while not</span> Is_Empty<span class="sym">(</span>Li3<span class="sym">)</span> <span class="kwa">loop
</span><span class="line">  257 </span><span class="kwa"></span>            Pop_Tail<span class="sym">(</span>Li3<span class="sym">,</span> Temp_Element<span class="sym">);
</span><span class="line">  258 </span><span class="sym"></span>            Push_Tail<span class="sym">(</span>Li2<span class="sym">,</span> Temp_Element<span class="sym">);
</span><span class="line">  259 </span><span class="sym"></span>         <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">  260 </span><span class="sym"></span>         <span class="slc">-- Li3 must be empty now
</span><span class="line">  261 </span><span class="slc"></span>         <span class="kwa">if not</span> Is_Empty<span class="sym">(</span>Li3<span class="sym">)</span> <span class="kwa">then
</span><span class="line">  262 </span><span class="kwa"></span>            Put_Line<span class="sym">(</span><span class="str">&quot;Li3 should be empty now!&quot;</span><span class="sym">);
</span><span class="line">  263 </span><span class="sym"></span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span><span class="line">  264 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  265 </span><span class="sym"></span>         <span class="slc">-- reverse Li1 in place
</span><span class="line">  266 </span><span class="slc"></span>         List_Reverse<span class="sym">(</span>Li1<span class="sym">);
</span><span class="line">  267 </span><span class="sym"></span>         <span class="slc">-- check that Li1's first item is still Size
</span><span class="line">  268 </span><span class="slc"></span>         <span class="kwa">if</span> First<span class="sym">(</span>Li1<span class="sym">)</span>.Value <span class="sym">/=</span> Size <span class="kwa">then
</span><span class="line">  269 </span><span class="kwa"></span>            Put_Line<span class="sym">(</span><span class="str">&quot;First Li1 value wrong. Wanted&quot;</span> <span class="sym">&amp;</span> <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>Size<span class="sym">) &amp;
</span><span class="line">  270 </span><span class="sym"></span>               <span class="str">&quot; got&quot;</span> <span class="sym">&amp;</span> <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>First<span class="sym">(</span>Li1<span class="sym">)</span>.Value<span class="sym">));
</span><span class="line">  271 </span><span class="sym"></span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span><span class="line">  272 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  273 </span><span class="sym"></span>         <span class="slc">-- Ensure Li1 last value is now 1
</span><span class="line">  274 </span><span class="slc"></span>         <span class="kwa">if</span> Last<span class="sym">(</span>Li1<span class="sym">)</span>.Value <span class="sym">/=</span> <span class="num">1</span> <span class="kwa">then
</span><span class="line">  275 </span><span class="kwa"></span>            Put_Line<span class="sym">(</span><span class="str">&quot;Last Li1 value wrong, wanted 1, got&quot;</span> <span class="sym">&amp;
</span><span class="line">  276 </span><span class="sym"></span>               <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>Last<span class="sym">(</span>Li1<span class="sym">)</span>.Value<span class="sym">));
</span><span class="line">  277 </span><span class="sym"></span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span><span class="line">  278 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  279 </span><span class="sym"></span>         <span class="slc">-- Check that Li2's first value is now Size
</span><span class="line">  280 </span><span class="slc"></span>         <span class="kwa">if</span> First<span class="sym">(</span>Li2<span class="sym">)</span>.Value <span class="sym">/=</span> Size <span class="kwa">then
</span><span class="line">  281 </span><span class="kwa"></span>            Put_Line<span class="sym">(</span><span class="str">&quot;First Li2 value wrong, wanted&quot;</span> <span class="sym">&amp;
</span><span class="line">  282 </span><span class="sym"></span>               <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>Size<span class="sym">) &amp;</span> <span class="str">&quot; got&quot;</span> <span class="sym">&amp;
</span><span class="line">  283 </span><span class="sym"></span>               <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>First<span class="sym">(</span>Li2<span class="sym">)</span>.Value<span class="sym">));
</span><span class="line">  284 </span><span class="sym"></span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span><span class="line">  285 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  286 </span><span class="sym"></span>         <span class="slc">-- Check that Li2's last item is now 1
</span><span class="line">  287 </span><span class="slc"></span>         <span class="kwa">if</span> Last<span class="sym">(</span>Li2<span class="sym">)</span>.Value <span class="sym">/=</span> <span class="num">1</span> <span class="kwa">then
</span><span class="line">  288 </span><span class="kwa"></span>            Put_Line<span class="sym">(</span><span class="str">&quot;Last Li2 value wrong, wanted 1&quot;</span><span class="sym">);
</span><span class="line">  289 </span><span class="sym"></span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span><span class="line">  290 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  291 </span><span class="sym"></span>         <span class="slc">-- Check that Li1's size is still Size
</span><span class="line">  292 </span><span class="slc"></span>         <span class="kwa">if</span> Length<span class="sym">(</span>Li1<span class="sym">) /=</span> Size <span class="kwa">then
</span><span class="line">  293 </span><span class="kwa"></span>            Put_Line<span class="sym">(</span><span class="str">&quot;Li1 size wrong, wanted&quot;</span> <span class="sym">&amp;
</span><span class="line">  294 </span><span class="sym"></span>               <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>Size<span class="sym">) &amp;</span> <span class="str">&quot; got&quot;</span> <span class="sym">&amp;
</span><span class="line">  295 </span><span class="sym"></span>               <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>Length<span class="sym">(</span>Li1<span class="sym">)));
</span><span class="line">  296 </span><span class="sym"></span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span><span class="line">  297 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  298 </span><span class="sym"></span>         <span class="slc">-- compare Li1 and Li2 for equality
</span><span class="line">  299 </span><span class="slc"></span>         <span class="kwa">if</span> Li1 <span class="sym">/=</span> Li2 <span class="kwa">then
</span><span class="line">  300 </span><span class="kwa"></span>            Put_Line<span class="sym">(</span><span class="str">&quot;Li1 and Li2 are not equal.&quot;</span><span class="sym">);
</span><span class="line">  301 </span><span class="sym"></span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span><span class="line">  302 </span><span class="sym"></span>         <span class="kwa">end if</span><span class="sym">;
</span><span class="line">  303 </span><span class="sym"></span>         Len <span class="sym">:=</span> Length<span class="sym">(</span>Li1<span class="sym">);
</span><span class="line">  304 </span><span class="sym"></span>         Empty_List<span class="sym">(</span>Li1<span class="sym">);
</span><span class="line">  305 </span><span class="sym"></span>         Empty_List<span class="sym">(</span>Li2<span class="sym">);
</span><span class="line">  306 </span><span class="sym"></span>         Empty_List<span class="sym">(</span>Li3<span class="sym">);
</span><span class="line">  307 </span><span class="sym"></span>         <span class="kwa">return</span> Len<span class="sym">;
</span><span class="line">  308 </span><span class="sym"></span>      <span class="kwa">end</span> Test_Lists<span class="sym">;
</span><span class="line">  309 </span><span class="sym"></span>   <span class="kwa">end</span> Listops<span class="sym">;
</span><span class="line">  310 </span><span class="sym"></span>   Max <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">;
</span><span class="line">  311 </span><span class="sym"></span>   Result <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;
</span><span class="line">  312 </span><span class="sym"></span><span class="kwa">begin
</span><span class="line">  313 </span><span class="kwa">   begin
</span><span class="line">  314 </span><span class="kwa"></span>      Max <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value<span class="sym">(</span>Argument<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span><span class="line">  315 </span><span class="sym"></span>   <span class="kwa">exception
</span><span class="line">  316 </span><span class="kwa">      when others</span> <span class="sym">=&gt;
</span><span class="line">  317 </span><span class="sym"></span>         Max <span class="sym">:=</span> <span class="num">16</span><span class="sym">;
</span><span class="line">  318 </span><span class="sym"></span>   <span class="kwa">end</span><span class="sym">;
</span><span class="line">  319 </span><span class="sym"></span>   <span class="kwa">for</span> Iter <span class="kwa">in</span> <span class="num">1</span>..Max <span class="kwa">loop
</span><span class="line">  320 </span><span class="kwa"></span>      Result <span class="sym">:=</span> Listops.Test_Lists<span class="sym">;
</span><span class="line">  321 </span><span class="sym"></span>   <span class="kwa">end loop</span><span class="sym">;
</span><span class="line">  322 </span><span class="sym"></span>   Ada.Integer_Text_IO.Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Result<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span><span class="line">  323 </span><span class="sym"></span>   Ada.Text_IO.New_Line<span class="sym">;
</span><span class="line">  324 </span><span class="sym"></span><span class="kwa">end</span> Listoperations<span class="sym">;
</span><span class="line">  325 </span><span class="sym">
</span><span class="line">  326 </span><span class="sym"></span>
