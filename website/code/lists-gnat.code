<table width="100%" border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF"><pre>
<I><FONT COLOR="#B22222">-- $Id: lists-gnat.code,v 1.2 2004-11-08 08:15:15 bfulgham Exp $
</FONT></I><I><FONT COLOR="#B22222">-- http://dada.perl.it/shootout/
</FONT></I><I><FONT COLOR="#B22222">-- by James S. Rogers
</FONT></I><B><FONT COLOR="#A020F0">with</FONT></B> Ada.Text_Io; <B><FONT COLOR="#A020F0">use</FONT></B> Ada.Text_Io;
<B><FONT COLOR="#A020F0">with</FONT></B> Ada.Integer_Text_Io; <B><FONT COLOR="#A020F0">use</FONT></B> Ada.Integer_Text_IO;
<B><FONT COLOR="#A020F0">with</FONT></B> Ada.Unchecked_Deallocation;
<B><FONT COLOR="#A020F0">with</FONT></B> Ada.Command_Line; <B><FONT COLOR="#A020F0">use</FONT></B> Ada.Command_Line;

<B><FONT COLOR="#A020F0">procedure</FONT></B> Listoperations <B><FONT COLOR="#A020F0">is</FONT></B>
   <B><FONT COLOR="#A020F0">pragma</FONT></B> suppress(All_Checks);
   <B><FONT COLOR="#A020F0">package</FONT></B> Listops <B><FONT COLOR="#A020F0">is</FONT></B>
      Empty_List_Error : <B><FONT COLOR="#A020F0">exception</FONT></B>;
      <B><FONT COLOR="#A020F0">type</FONT></B> List <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">private</FONT></B>;
      <B><FONT COLOR="#A020F0">function</FONT></B> Length(Item : <B><FONT COLOR="#A020F0">in</FONT></B> List) <B><FONT COLOR="#A020F0">return</FONT></B> Natural;
      <B><FONT COLOR="#A020F0">function</FONT></B> Is_Empty(Item : <B><FONT COLOR="#A020F0">in</FONT></B> List) <B><FONT COLOR="#A020F0">return</FONT></B> Boolean;
      <B><FONT COLOR="#A020F0">type</FONT></B> List_Element <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">private</FONT></B>;
      <B><FONT COLOR="#A020F0">type</FONT></B> Element_Access <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">access</FONT></B> List_Element;
      <B><FONT COLOR="#A020F0">function</FONT></B> First(Item : <B><FONT COLOR="#A020F0">in</FONT></B> List) <B><FONT COLOR="#A020F0">return</FONT></B> List_Element;
      <B><FONT COLOR="#A020F0">function</FONT></B> Last(Item : <B><FONT COLOR="#A020F0">in</FONT></B> List) <B><FONT COLOR="#A020F0">return</FONT></B> List_Element;
      <B><FONT COLOR="#A020F0">procedure</FONT></B> Push_Tail(Item : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> List; Element : <B><FONT COLOR="#A020F0">in</FONT></B> Integer);
      <B><FONT COLOR="#A020F0">procedure</FONT></B> Pop_Tail(Item : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> List; Element : <B><FONT COLOR="#A020F0">out</FONT></B> Integer);
      <B><FONT COLOR="#A020F0">procedure</FONT></B> Push_Head(Item : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> List; Element : <B><FONT COLOR="#A020F0">in</FONT></B> Integer);
      <B><FONT COLOR="#A020F0">procedure</FONT></B> Pop_Head(Item : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> List; Element : <B><FONT COLOR="#A020F0">out</FONT></B> Integer);
      <B><FONT COLOR="#A020F0">function</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;=&quot;</FONT></B>(Left, Right : <B><FONT COLOR="#A020F0">in</FONT></B> List) <B><FONT COLOR="#A020F0">return</FONT></B> Boolean;
      <B><FONT COLOR="#A020F0">function</FONT></B> New_List <B><FONT COLOR="#A020F0">return</FONT></B> List;
      <B><FONT COLOR="#A020F0">function</FONT></B> Sequence(From, To : Integer) <B><FONT COLOR="#A020F0">return</FONT></B> List;
      <B><FONT COLOR="#A020F0">function</FONT></B> Copy(Source : List) <B><FONT COLOR="#A020F0">return</FONT></B> List;
      <B><FONT COLOR="#A020F0">procedure</FONT></B> List_Reverse(Source : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> List);
      <B><FONT COLOR="#A020F0">procedure</FONT></B> Empty_List(Source : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> List);
      <B><FONT COLOR="#A020F0">procedure</FONT></B> Print(Msg : <B><FONT COLOR="#A020F0">in</FONT></B> String; Item : <B><FONT COLOR="#A020F0">in</FONT></B> List);
      <B><FONT COLOR="#A020F0">function</FONT></B> Test_Lists <B><FONT COLOR="#A020F0">return</FONT></B> Integer;
   <B><FONT COLOR="#A020F0">private</FONT></B>
      <B><FONT COLOR="#A020F0">type</FONT></B> List_Element <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">record</FONT></B>
         Value : Integer := 0;
         Previous : Element_Access := <B><FONT COLOR="#A020F0">null</FONT></B>;
         Next     : Element_Access := <B><FONT COLOR="#A020F0">null</FONT></B>;
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">record</FONT></B>;
      <B><FONT COLOR="#A020F0">type</FONT></B> List <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">record</FONT></B>
         Length : Natural := 0;
         Head   : Element_Access := <B><FONT COLOR="#A020F0">null</FONT></B>;
         Tail   : Element_Access := <B><FONT COLOR="#A020F0">null</FONT></B>;
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">record</FONT></B>;
   <B><FONT COLOR="#A020F0">end</FONT></B> Listops;

   <B><FONT COLOR="#A020F0">package</FONT></B> <B><FONT COLOR="#A020F0">body</FONT></B> Listops <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">function</FONT></B> Length(Item : <B><FONT COLOR="#A020F0">in</FONT></B> List) <B><FONT COLOR="#A020F0">return</FONT></B> Natural <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         <B><FONT COLOR="#A020F0">return</FONT></B> Item.Length;
      <B><FONT COLOR="#A020F0">end</FONT></B> Length;
      <B><FONT COLOR="#A020F0">function</FONT></B> Is_Empty(Item : <B><FONT COLOR="#A020F0">in</FONT></B> List) <B><FONT COLOR="#A020F0">return</FONT></B> Boolean <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         <B><FONT COLOR="#A020F0">return</FONT></B> Item.Length = 0;
      <B><FONT COLOR="#A020F0">end</FONT></B> Is_Empty;
      <B><FONT COLOR="#A020F0">function</FONT></B> First(Item : List) <B><FONT COLOR="#A020F0">return</FONT></B> List_Element <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         <B><FONT COLOR="#A020F0">if</FONT></B> Is_Empty(Item) <B><FONT COLOR="#A020F0">then</FONT></B>
            <B><FONT COLOR="#A020F0">raise</FONT></B> Empty_List_Error;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <B><FONT COLOR="#A020F0">return</FONT></B> Item.Head.All;
      <B><FONT COLOR="#A020F0">end</FONT></B> First;
      <B><FONT COLOR="#A020F0">function</FONT></B> Last(Item : List) <B><FONT COLOR="#A020F0">return</FONT></B> List_Element <B><FONT COLOR="#A020F0">is</FONT></B>
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         <B><FONT COLOR="#A020F0">if</FONT></B> Is_Empty(Item) <B><FONT COLOR="#A020F0">then</FONT></B>
            <B><FONT COLOR="#A020F0">raise</FONT></B> Empty_List_Error;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <B><FONT COLOR="#A020F0">return</FONT></B> Item.Tail.All;
      <B><FONT COLOR="#A020F0">end</FONT></B> Last;
      <B><FONT COLOR="#A020F0">procedure</FONT></B> Push_Tail(Item : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> List; Element : <B><FONT COLOR="#A020F0">in</FONT></B> Integer) <B><FONT COLOR="#A020F0">is</FONT></B>
         Tail : Element_Access := Item.Tail;
         Temp : Element_Access := <B><FONT COLOR="#A020F0">new</FONT></B> List_Element;
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         Temp.Value := Element;
         Item.Length := Item.Length + 1;
         Item.Tail := Temp;
         <B><FONT COLOR="#A020F0">if</FONT></B> Tail /= <B><FONT COLOR="#A020F0">null</FONT></B> <B><FONT COLOR="#A020F0">then</FONT></B>
            Temp.Previous := Tail;
            Tail.Next := Temp;
         <B><FONT COLOR="#A020F0">else</FONT></B>
            Item.Head := Temp;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
      <B><FONT COLOR="#A020F0">end</FONT></B> Push_Tail;
      <B><FONT COLOR="#A020F0">procedure</FONT></B> Pop_Tail(Item : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> List; Element : <B><FONT COLOR="#A020F0">out</FONT></B> Integer) <B><FONT COLOR="#A020F0">is</FONT></B>
         <B><FONT COLOR="#A020F0">procedure</FONT></B> Free <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">new</FONT></B> Ada.Unchecked_Deallocation(List_Element,
Element_Access);
         Temp : Element_Access := Item.Tail;
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         <B><FONT COLOR="#A020F0">if</FONT></B> Item.Length &gt;= 1 <B><FONT COLOR="#A020F0">then</FONT></B>
            Item.Length := Item.Length - 1;
            Element := Item.Tail.Value;
            Item.Tail := Item.Tail.Previous;
            <B><FONT COLOR="#A020F0">if</FONT></B> Item.Tail /= <B><FONT COLOR="#A020F0">null</FONT></B> <B><FONT COLOR="#A020F0">then</FONT></B>
               Item.Tail.Next := <B><FONT COLOR="#A020F0">null</FONT></B>;
            <B><FONT COLOR="#A020F0">else</FONT></B>
               Item.Head := <B><FONT COLOR="#A020F0">null</FONT></B>;
            <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
            <B><FONT COLOR="#A020F0">if</FONT></B> Temp /= <B><FONT COLOR="#A020F0">null</FONT></B> <B><FONT COLOR="#A020F0">then</FONT></B>
               Free(Temp);
            <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
      <B><FONT COLOR="#A020F0">end</FONT></B> Pop_Tail;
      <B><FONT COLOR="#A020F0">procedure</FONT></B> Push_Head(Item : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> List; Element : <B><FONT COLOR="#A020F0">in</FONT></B> Integer) <B><FONT COLOR="#A020F0">is</FONT></B>
         Head : Element_Access := Item.Head;
         Temp : Element_Access := <B><FONT COLOR="#A020F0">new</FONT></B> List_Element;
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         Temp.Value := Element;
         Item.Length := Item.Length + 1;
         Temp.Next := Head;
         Item.Head := Temp;
         <B><FONT COLOR="#A020F0">if</FONT></B> Head /= <B><FONT COLOR="#A020F0">null</FONT></B> <B><FONT COLOR="#A020F0">then</FONT></B>
            Head.Previous := Temp;
         <B><FONT COLOR="#A020F0">else</FONT></B>
            Item.Tail := Temp;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
      <B><FONT COLOR="#A020F0">end</FONT></B> Push_Head;
      <B><FONT COLOR="#A020F0">procedure</FONT></B> Pop_Head(Item : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> List; Element : <B><FONT COLOR="#A020F0">out</FONT></B> Integer) <B><FONT COLOR="#A020F0">is</FONT></B>
         <B><FONT COLOR="#A020F0">procedure</FONT></B> Free <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">new</FONT></B> Ada.Unchecked_Deallocation(List_Element,
Element_Access);
            Head : Element_Access := Item.Head;
         <B><FONT COLOR="#A020F0">begin</FONT></B>
            <B><FONT COLOR="#A020F0">if</FONT></B> Head /= <B><FONT COLOR="#A020F0">null</FONT></B> <B><FONT COLOR="#A020F0">then</FONT></B>
               Element := Head.Value;
               Item.Head := Item.Head.Next;
               Item.Length := Item.Length - 1;
               <B><FONT COLOR="#A020F0">if</FONT></B> Item.Head = <B><FONT COLOR="#A020F0">null</FONT></B> <B><FONT COLOR="#A020F0">then</FONT></B>
                  Item.Tail := <B><FONT COLOR="#A020F0">null</FONT></B>;
               <B><FONT COLOR="#A020F0">else</FONT></B>
                  Item.Head.Previous := <B><FONT COLOR="#A020F0">null</FONT></B>;
               <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
               Free(Head);
            <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <B><FONT COLOR="#A020F0">end</FONT></B> Pop_Head;
      <B><FONT COLOR="#A020F0">function</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;=&quot;</FONT></B>(Left, Right : List) <B><FONT COLOR="#A020F0">return</FONT></B> Boolean <B><FONT COLOR="#A020F0">is</FONT></B>
         Left_Ptr : Element_Access := Left.Head;
         Right_Ptr : Element_Access := Right.Head;
         Result : Boolean := True;
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         <B><FONT COLOR="#A020F0">if</FONT></B> Left.Length = Right.Length <B><FONT COLOR="#A020F0">then</FONT></B>
            <B><FONT COLOR="#A020F0">while</FONT></B> Left_Ptr /= <B><FONT COLOR="#A020F0">null</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>
               <B><FONT COLOR="#A020F0">if</FONT></B> Left_Ptr.Value /= Right_Ptr.Value <B><FONT COLOR="#A020F0">then</FONT></B>
                  Result := False;
                  <B><FONT COLOR="#A020F0">exit</FONT></B>;
               <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
               Left_Ptr := Left_Ptr.Next;
               Right_Ptr := Right_Ptr.Next;
            <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
         <B><FONT COLOR="#A020F0">else</FONT></B>
            Result := False;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <B><FONT COLOR="#A020F0">return</FONT></B> Result;
      <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#BC8F8F">&quot;=&quot;</FONT></B>;
      <B><FONT COLOR="#A020F0">function</FONT></B> New_List <B><FONT COLOR="#A020F0">return</FONT></B> List <B><FONT COLOR="#A020F0">is</FONT></B>
         Result : List;
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         <B><FONT COLOR="#A020F0">return</FONT></B> Result;
      <B><FONT COLOR="#A020F0">end</FONT></B> New_List;
      <B><FONT COLOR="#A020F0">function</FONT></B> Sequence(From, To : Integer) <B><FONT COLOR="#A020F0">return</FONT></B> List <B><FONT COLOR="#A020F0">is</FONT></B>
         Result : List;
         Temp : Integer;
         Low : Integer := From;
         High : Integer := To;
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         <B><FONT COLOR="#A020F0">if</FONT></B> From &gt; To <B><FONT COLOR="#A020F0">then</FONT></B>
            Temp := From;
            Low := To;
            High := Temp;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <B><FONT COLOR="#A020F0">for</FONT></B> Val <B><FONT COLOR="#A020F0">in</FONT></B> Low..High <B><FONT COLOR="#A020F0">loop</FONT></B>
            Push_Tail(Result, Val);
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
         <B><FONT COLOR="#A020F0">return</FONT></B> Result;
      <B><FONT COLOR="#A020F0">end</FONT></B> Sequence;
      <B><FONT COLOR="#A020F0">function</FONT></B> Copy(Source : List) <B><FONT COLOR="#A020F0">return</FONT></B> List <B><FONT COLOR="#A020F0">is</FONT></B>
         Result : List;
         Source_Ptr : Element_Access := Source.Head;
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         <B><FONT COLOR="#A020F0">while</FONT></B> Source_Ptr /= <B><FONT COLOR="#A020F0">null</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>
            Push_Tail(Item =&gt; Result, Element =&gt; Source_Ptr.Value);
            Source_Ptr := Source_Ptr.Next;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
         <B><FONT COLOR="#A020F0">return</FONT></B> Result;
      <B><FONT COLOR="#A020F0">end</FONT></B> Copy;
      <B><FONT COLOR="#A020F0">procedure</FONT></B> List_Reverse(Source : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> List) <B><FONT COLOR="#A020F0">is</FONT></B>
         Head : Element_Access := Source.Head;
         Temp : Element_Access;
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         Temp := Source.Head;
         Source.Head := Source.Tail;
         Source.Tail := Temp;
         <B><FONT COLOR="#A020F0">if</FONT></B> Head = <B><FONT COLOR="#A020F0">null</FONT></B> <B><FONT COLOR="#A020F0">then</FONT></B>
            <B><FONT COLOR="#A020F0">raise</FONT></B> Empty_List_Error;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <B><FONT COLOR="#A020F0">loop</FONT></B>
            Temp := Head.Next;
            Head.Next := Head.Previous;
            Head.Previous := Temp;
            Head := Temp;
            <B><FONT COLOR="#A020F0">exit</FONT></B> <B><FONT COLOR="#A020F0">when</FONT></B> Head = <B><FONT COLOR="#A020F0">null</FONT></B>;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
      <B><FONT COLOR="#A020F0">end</FONT></B> List_Reverse;
      <B><FONT COLOR="#A020F0">procedure</FONT></B> Empty_List(Source : <B><FONT COLOR="#A020F0">in</FONT></B> <B><FONT COLOR="#A020F0">out</FONT></B> List) <B><FONT COLOR="#A020F0">is</FONT></B>
         <B><FONT COLOR="#A020F0">procedure</FONT></B> Free <B><FONT COLOR="#A020F0">is</FONT></B> <B><FONT COLOR="#A020F0">new</FONT></B> Ada.Unchecked_Deallocation(List_Element,
Element_Access);
         Source_Ptr : Element_Access := Source.Head;
         Temp : Element_Access;
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         <B><FONT COLOR="#A020F0">while</FONT></B> Source_Ptr /= <B><FONT COLOR="#A020F0">null</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>
            Temp := Source_Ptr;
            Source_Ptr := Source_Ptr.Next;
            Free(Temp);
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
         Source := New_List;
      <B><FONT COLOR="#A020F0">end</FONT></B> Empty_List;
      <B><FONT COLOR="#A020F0">procedure</FONT></B> Print(Msg : <B><FONT COLOR="#A020F0">in</FONT></B> String; Item : <B><FONT COLOR="#A020F0">in</FONT></B> List) <B><FONT COLOR="#A020F0">is</FONT></B>
         Source_Ptr : Element_Access := Item.Head;
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         Put_Line(Msg);
         Put_Line(<B><FONT COLOR="#BC8F8F">&quot;Length:&quot;</FONT></B> &amp; Integer'Image(Length(Item)));
         <B><FONT COLOR="#A020F0">while</FONT></B> Source_Ptr /= <B><FONT COLOR="#A020F0">null</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>
            <B><FONT COLOR="#A020F0">if</FONT></B> Source_Ptr.Previous /= <B><FONT COLOR="#A020F0">null</FONT></B> <B><FONT COLOR="#A020F0">then</FONT></B>
               Put(Item =&gt; Source_Ptr.Previous.Value, Width =&gt; 6);
            <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
            Put(Item =&gt; Source_Ptr.Value, Width =&gt; 6);
            <B><FONT COLOR="#A020F0">if</FONT></B> Source_Ptr.Next /= <B><FONT COLOR="#A020F0">null</FONT></B> <B><FONT COLOR="#A020F0">then</FONT></B>
               Put(Item =&gt; Source_Ptr.Next.Value, Width =&gt; 6);
            <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
            New_Line;
            Source_Ptr := Source_Ptr.Next;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
      <B><FONT COLOR="#A020F0">end</FONT></B> Print;
      <B><FONT COLOR="#A020F0">function</FONT></B> Test_Lists <B><FONT COLOR="#A020F0">return</FONT></B> Integer <B><FONT COLOR="#A020F0">is</FONT></B>
         Size : <B><FONT COLOR="#A020F0">constant</FONT></B> Integer := 10_000;
         Li1, Li2, Li3 : List; <I><FONT COLOR="#B22222">-- all are created as empty lists
</FONT></I>         Temp_Element : Integer;
         Len : Integer;
      <B><FONT COLOR="#A020F0">begin</FONT></B>
         <I><FONT COLOR="#B22222">-- Create a list of integers from 1 to Size
</FONT></I>         Li1 := Sequence(1, Size);
         <I><FONT COLOR="#B22222">-- Copy the list to Li2
</FONT></I>         Li2 := Copy(Li1);
         <I><FONT COLOR="#B22222">-- Compare Li1 and Li2 for equality
</FONT></I>         <B><FONT COLOR="#A020F0">if</FONT></B> Li1 /= Li2 <B><FONT COLOR="#A020F0">then</FONT></B>
            Put_Line(<B><FONT COLOR="#BC8F8F">&quot;Li1 and Li2 are not equal!&quot;</FONT></B>);
            <B><FONT COLOR="#A020F0">return</FONT></B> -1;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <B><FONT COLOR="#A020F0">while</FONT></B> <B><FONT COLOR="#A020F0">not</FONT></B> Is_Empty(Li2) <B><FONT COLOR="#A020F0">loop</FONT></B>
            Pop_Head(Li2, Temp_Element);
            Push_Tail(Li3, Temp_Element);
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
         <I><FONT COLOR="#B22222">-- Li2 must be empty now
</FONT></I>         <B><FONT COLOR="#A020F0">if</FONT></B> <B><FONT COLOR="#A020F0">not</FONT></B> Is_Empty(Li2) <B><FONT COLOR="#A020F0">then</FONT></B>
            Put_Line(<B><FONT COLOR="#BC8F8F">&quot;Li2 should be empty now!&quot;</FONT></B>);
            <B><FONT COLOR="#A020F0">return</FONT></B> -1;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <I><FONT COLOR="#B22222">-- Append each item from Li3 to Li2
</FONT></I>         <I><FONT COLOR="#B22222">-- reversing the list
</FONT></I>         <B><FONT COLOR="#A020F0">while</FONT></B> <B><FONT COLOR="#A020F0">not</FONT></B> Is_Empty(Li3) <B><FONT COLOR="#A020F0">loop</FONT></B>
            Pop_Tail(Li3, Temp_Element);
            Push_Tail(Li2, Temp_Element);
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
         <I><FONT COLOR="#B22222">-- Li3 must be empty now
</FONT></I>         <B><FONT COLOR="#A020F0">if</FONT></B> <B><FONT COLOR="#A020F0">not</FONT></B> Is_Empty(Li3) <B><FONT COLOR="#A020F0">then</FONT></B>
            Put_Line(<B><FONT COLOR="#BC8F8F">&quot;Li3 should be empty now!&quot;</FONT></B>);
            <B><FONT COLOR="#A020F0">return</FONT></B> -1;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <I><FONT COLOR="#B22222">-- reverse Li1 in place
</FONT></I>         List_Reverse(Li1);
         <I><FONT COLOR="#B22222">-- check that Li1's first item is still Size
</FONT></I>         <B><FONT COLOR="#A020F0">if</FONT></B> First(Li1).Value /= Size <B><FONT COLOR="#A020F0">then</FONT></B>
            Put_Line(<B><FONT COLOR="#BC8F8F">&quot;First Li1 value wrong. Wanted&quot;</FONT></B> &amp; Integer'Image(Size) &amp;
               <B><FONT COLOR="#BC8F8F">&quot; got&quot;</FONT></B> &amp; Integer'Image(First(Li1).Value));
            <B><FONT COLOR="#A020F0">return</FONT></B> -1;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <I><FONT COLOR="#B22222">-- Ensure Li1 last value is now 1
</FONT></I>         <B><FONT COLOR="#A020F0">if</FONT></B> Last(Li1).Value /= 1 <B><FONT COLOR="#A020F0">then</FONT></B>
            Put_Line(<B><FONT COLOR="#BC8F8F">&quot;Last Li1 value wrong, wanted 1, got&quot;</FONT></B> &amp;
               Integer'Image(Last(Li1).Value));
            <B><FONT COLOR="#A020F0">return</FONT></B> -1;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <I><FONT COLOR="#B22222">-- Check that Li2's first value is now Size
</FONT></I>         <B><FONT COLOR="#A020F0">if</FONT></B> First(Li2).Value /= Size <B><FONT COLOR="#A020F0">then</FONT></B>
            Put_Line(<B><FONT COLOR="#BC8F8F">&quot;First Li2 value wrong, wanted&quot;</FONT></B> &amp;
               Integer'Image(Size) &amp; <B><FONT COLOR="#BC8F8F">&quot; got&quot;</FONT></B> &amp;
               Integer'Image(First(Li2).Value));
            <B><FONT COLOR="#A020F0">return</FONT></B> -1;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <I><FONT COLOR="#B22222">-- Check that Li2's last item is now 1
</FONT></I>         <B><FONT COLOR="#A020F0">if</FONT></B> Last(Li2).Value /= 1 <B><FONT COLOR="#A020F0">then</FONT></B>
            Put_Line(<B><FONT COLOR="#BC8F8F">&quot;Last Li2 value wrong, wanted 1&quot;</FONT></B>);
            <B><FONT COLOR="#A020F0">return</FONT></B> -1;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <I><FONT COLOR="#B22222">-- Check that Li1's size is still Size
</FONT></I>         <B><FONT COLOR="#A020F0">if</FONT></B> Length(Li1) /= Size <B><FONT COLOR="#A020F0">then</FONT></B>
            Put_Line(<B><FONT COLOR="#BC8F8F">&quot;Li1 size wrong, wanted&quot;</FONT></B> &amp;
               Integer'Image(Size) &amp; <B><FONT COLOR="#BC8F8F">&quot; got&quot;</FONT></B> &amp;
               Integer'Image(Length(Li1)));
            <B><FONT COLOR="#A020F0">return</FONT></B> -1;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         <I><FONT COLOR="#B22222">-- compare Li1 and Li2 for equality
</FONT></I>         <B><FONT COLOR="#A020F0">if</FONT></B> Li1 /= Li2 <B><FONT COLOR="#A020F0">then</FONT></B>
            Put_Line(<B><FONT COLOR="#BC8F8F">&quot;Li1 and Li2 are not equal.&quot;</FONT></B>);
            <B><FONT COLOR="#A020F0">return</FONT></B> -1;
         <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">if</FONT></B>;
         Len := Length(Li1);
         Empty_List(Li1);
         Empty_List(Li2);
         Empty_List(Li3);
         <B><FONT COLOR="#A020F0">return</FONT></B> Len;
      <B><FONT COLOR="#A020F0">end</FONT></B> Test_Lists;
   <B><FONT COLOR="#A020F0">end</FONT></B> Listops;
   Max : Positive;
   Result : Natural;
<B><FONT COLOR="#A020F0">begin</FONT></B>
   <B><FONT COLOR="#A020F0">begin</FONT></B>
      Max := Positive'Value(Argument(1));
   <B><FONT COLOR="#A020F0">exception</FONT></B>
      <B><FONT COLOR="#A020F0">when</FONT></B> <B><FONT COLOR="#A020F0">others</FONT></B> =&gt;
         Max := 16;
   <B><FONT COLOR="#A020F0">end</FONT></B>;
   <B><FONT COLOR="#A020F0">for</FONT></B> Iter <B><FONT COLOR="#A020F0">in</FONT></B> 1..Max <B><FONT COLOR="#A020F0">loop</FONT></B>
      Result := Listops.Test_Lists;
   <B><FONT COLOR="#A020F0">end</FONT></B> <B><FONT COLOR="#A020F0">loop</FONT></B>;
   Ada.Integer_Text_IO.Put(Item =&gt; Result, Width =&gt; 0);
   Ada.Text_IO.New_Line;
<B><FONT COLOR="#A020F0">end</FONT></B> Listoperations;

</pre></td></tr></table>
