<span class="slc">-- $Id: lists-gnat.code,v 1.8 2005-03-19 07:50:18 bfulgham Exp $
</span><span class="slc">-- http://dada.perl.it/shootout/
</span><span class="slc">-- by James S. Rogers
</span><span class="kwa">with</span> Ada.Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Text_Io<span class="sym">;
</span><span class="kwa">with</span> Ada.Integer_Text_Io<span class="sym">;</span> <span class="kwa">use</span> Ada.Integer_Text_IO<span class="sym">;
</span><span class="kwa">with</span> Ada.Unchecked_Deallocation<span class="sym">;
</span><span class="kwa">with</span> Ada.Command_Line<span class="sym">;</span> <span class="kwa">use</span> Ada.Command_Line<span class="sym">;

</span><span class="kwa">procedure</span> Listoperations <span class="kwa">is
   pragma</span> suppress<span class="sym">(</span>All_Checks<span class="sym">);
</span>   <span class="kwa">package</span> Listops <span class="kwa">is
</span>      Empty_List_Error <span class="sym">:</span> <span class="kwa">exception</span><span class="sym">;
</span>      <span class="kwa">type</span> List <span class="kwa">is private</span><span class="sym">;
</span>      <span class="kwa">function</span> Length<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Natural</span><span class="sym">;
</span>      <span class="kwa">function</span> Is_Empty<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Boolean</span><span class="sym">;
</span>      <span class="kwa">type</span> List_Element <span class="kwa">is private</span><span class="sym">;
</span>      <span class="kwa">type</span> Element_Access <span class="kwa">is access</span> List_Element<span class="sym">;
</span>      <span class="kwa">function</span> First<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">return</span> List_Element<span class="sym">;
</span>      <span class="kwa">function</span> Last<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">return</span> List_Element<span class="sym">;
</span>      <span class="kwa">procedure</span> Push_Tail<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">Integer</span><span class="sym">);
</span>      <span class="kwa">procedure</span> Pop_Tail<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Integer</span><span class="sym">);
</span>      <span class="kwa">procedure</span> Push_Head<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">Integer</span><span class="sym">);
</span>      <span class="kwa">procedure</span> Pop_Head<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Integer</span><span class="sym">);
</span>      <span class="kwa">function</span> <span class="str">&quot;=&quot;</span><span class="sym">(</span>Left<span class="sym">,</span> Right <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Boolean</span><span class="sym">;
</span>      <span class="kwa">function</span> New_List <span class="kwa">return</span> List<span class="sym">;
</span>      <span class="kwa">function</span> Sequence<span class="sym">(</span>From<span class="sym">,</span> To <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">return</span> List<span class="sym">;
</span>      <span class="kwa">function</span> Copy<span class="sym">(</span>Source <span class="sym">:</span> List<span class="sym">)</span> <span class="kwa">return</span> List<span class="sym">;
</span>      <span class="kwa">procedure</span> List_Reverse<span class="sym">(</span>Source <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">);
</span>      <span class="kwa">procedure</span> Empty_List<span class="sym">(</span>Source <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">);
</span>      <span class="kwa">procedure</span> Print<span class="sym">(</span>Msg <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">String</span><span class="sym">;</span> Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">);
</span>      <span class="kwa">function</span> Test_Lists <span class="kwa">return</span> <span class="kwb">Integer</span><span class="sym">;
</span>   <span class="kwa">private
      type</span> List_Element <span class="kwa">is record
</span>         Value <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>         Previous <span class="sym">:</span> Element_Access <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span>         Next     <span class="sym">:</span> Element_Access <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span>      <span class="kwa">end record</span><span class="sym">;
</span>      <span class="kwa">type</span> List <span class="kwa">is record
</span>         Length <span class="sym">:</span> <span class="kwb">Natural</span> <span class="sym">:=</span> <span class="num">0</span><span class="sym">;
</span>         Head   <span class="sym">:</span> Element_Access <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span>         Tail   <span class="sym">:</span> Element_Access <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span>      <span class="kwa">end record</span><span class="sym">;
</span>   <span class="kwa">end</span> Listops<span class="sym">;

</span>   <span class="kwa">package body</span> Listops <span class="kwa">is
      function</span> Length<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Natural</span> <span class="kwa">is
      begin
         return</span> Item.Length<span class="sym">;
</span>      <span class="kwa">end</span> Length<span class="sym">;
</span>      <span class="kwa">function</span> Is_Empty<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Boolean</span> <span class="kwa">is
      begin
         return</span> Item.Length <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwa">end</span> Is_Empty<span class="sym">;
</span>      <span class="kwa">function</span> First<span class="sym">(</span>Item <span class="sym">:</span> List<span class="sym">)</span> <span class="kwa">return</span> List_Element <span class="kwa">is
      begin
         if</span> Is_Empty<span class="sym">(</span>Item<span class="sym">)</span> <span class="kwa">then
            raise</span> Empty_List_Error<span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">return</span> Item.Head.<span class="kwa">All</span><span class="sym">;
</span>      <span class="kwa">end</span> First<span class="sym">;
</span>      <span class="kwa">function</span> Last<span class="sym">(</span>Item <span class="sym">:</span> List<span class="sym">)</span> <span class="kwa">return</span> List_Element <span class="kwa">is
      begin
         if</span> Is_Empty<span class="sym">(</span>Item<span class="sym">)</span> <span class="kwa">then
            raise</span> Empty_List_Error<span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">return</span> Item.Tail.<span class="kwa">All</span><span class="sym">;
</span>      <span class="kwa">end</span> Last<span class="sym">;
</span>      <span class="kwa">procedure</span> Push_Tail<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">is
</span>         Tail <span class="sym">:</span> Element_Access <span class="sym">:=</span> Item.Tail<span class="sym">;
</span>         Temp <span class="sym">:</span> Element_Access <span class="sym">:=</span> <span class="kwa">new</span> List_Element<span class="sym">;
</span>      <span class="kwa">begin
</span>         Temp.Value <span class="sym">:=</span> Element<span class="sym">;
</span>         Item.Length <span class="sym">:=</span> Item.Length <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>         Item.Tail <span class="sym">:=</span> Temp<span class="sym">;
</span>         <span class="kwa">if</span> Tail <span class="sym">/=</span> <span class="kwa">null then
</span>            Temp.Previous <span class="sym">:=</span> Tail<span class="sym">;
</span>            Tail.Next <span class="sym">:=</span> Temp<span class="sym">;
</span>         <span class="kwa">else
</span>            Item.Head <span class="sym">:=</span> Temp<span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>      <span class="kwa">end</span> Push_Tail<span class="sym">;
</span>      <span class="kwa">procedure</span> Pop_Tail<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">is
         procedure</span> Free <span class="kwa">is new</span> Ada.Unchecked_Deallocation<span class="sym">(</span>List_Element<span class="sym">,
</span>Element_Access<span class="sym">);
</span>         Temp <span class="sym">:</span> Element_Access <span class="sym">:=</span> Item.Tail<span class="sym">;
</span>      <span class="kwa">begin
         if</span> Item.Length <span class="sym">&gt;=</span> <span class="num">1</span> <span class="kwa">then
</span>            Item.Length <span class="sym">:=</span> Item.Length <span class="num">- 1</span><span class="sym">;
</span>            Element <span class="sym">:=</span> Item.Tail.Value<span class="sym">;
</span>            Item.Tail <span class="sym">:=</span> Item.Tail.Previous<span class="sym">;
</span>            <span class="kwa">if</span> Item.Tail <span class="sym">/=</span> <span class="kwa">null then
</span>               Item.Tail.Next <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span>            <span class="kwa">else
</span>               Item.Head <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span>            <span class="kwa">end if</span><span class="sym">;
</span>            <span class="kwa">if</span> Temp <span class="sym">/=</span> <span class="kwa">null then
</span>               Free<span class="sym">(</span>Temp<span class="sym">);
</span>            <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>      <span class="kwa">end</span> Pop_Tail<span class="sym">;
</span>      <span class="kwa">procedure</span> Push_Head<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">is
</span>         Head <span class="sym">:</span> Element_Access <span class="sym">:=</span> Item.Head<span class="sym">;
</span>         Temp <span class="sym">:</span> Element_Access <span class="sym">:=</span> <span class="kwa">new</span> List_Element<span class="sym">;
</span>      <span class="kwa">begin
</span>         Temp.Value <span class="sym">:=</span> Element<span class="sym">;
</span>         Item.Length <span class="sym">:=</span> Item.Length <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>         Temp.Next <span class="sym">:=</span> Head<span class="sym">;
</span>         Item.Head <span class="sym">:=</span> Temp<span class="sym">;
</span>         <span class="kwa">if</span> Head <span class="sym">/=</span> <span class="kwa">null then
</span>            Head.Previous <span class="sym">:=</span> Temp<span class="sym">;
</span>         <span class="kwa">else
</span>            Item.Tail <span class="sym">:=</span> Temp<span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>      <span class="kwa">end</span> Push_Head<span class="sym">;
</span>      <span class="kwa">procedure</span> Pop_Head<span class="sym">(</span>Item <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">;</span> Element <span class="sym">:</span> <span class="kwa">out</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">is
         procedure</span> Free <span class="kwa">is new</span> Ada.Unchecked_Deallocation<span class="sym">(</span>List_Element<span class="sym">,
</span>Element_Access<span class="sym">);
</span>            Head <span class="sym">:</span> Element_Access <span class="sym">:=</span> Item.Head<span class="sym">;
</span>         <span class="kwa">begin
            if</span> Head <span class="sym">/=</span> <span class="kwa">null then
</span>               Element <span class="sym">:=</span> Head.Value<span class="sym">;
</span>               Item.Head <span class="sym">:=</span> Item.Head.Next<span class="sym">;
</span>               Item.Length <span class="sym">:=</span> Item.Length <span class="num">- 1</span><span class="sym">;
</span>               <span class="kwa">if</span> Item.Head <span class="sym">=</span> <span class="kwa">null then
</span>                  Item.Tail <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span>               <span class="kwa">else
</span>                  Item.Head.Previous <span class="sym">:=</span> <span class="kwa">null</span><span class="sym">;
</span>               <span class="kwa">end if</span><span class="sym">;
</span>               Free<span class="sym">(</span>Head<span class="sym">);
</span>            <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">end</span> Pop_Head<span class="sym">;
</span>      <span class="kwa">function</span> <span class="str">&quot;=&quot;</span><span class="sym">(</span>Left<span class="sym">,</span> Right <span class="sym">:</span> List<span class="sym">)</span> <span class="kwa">return</span> <span class="kwb">Boolean</span> <span class="kwa">is
</span>         Left_Ptr <span class="sym">:</span> Element_Access <span class="sym">:=</span> Left.Head<span class="sym">;
</span>         Right_Ptr <span class="sym">:</span> Element_Access <span class="sym">:=</span> Right.Head<span class="sym">;
</span>         Result <span class="sym">:</span> <span class="kwb">Boolean</span> <span class="sym">:=</span> True<span class="sym">;
</span>      <span class="kwa">begin
         if</span> Left.Length <span class="sym">=</span> Right.Length <span class="kwa">then
            while</span> Left_Ptr <span class="sym">/=</span> <span class="kwa">null loop
               if</span> Left_Ptr.Value <span class="sym">/=</span> Right_Ptr.Value <span class="kwa">then
</span>                  Result <span class="sym">:=</span> False<span class="sym">;
</span>                  <span class="kwa">exit</span><span class="sym">;
</span>               <span class="kwa">end if</span><span class="sym">;
</span>               Left_Ptr <span class="sym">:=</span> Left_Ptr.Next<span class="sym">;
</span>               Right_Ptr <span class="sym">:=</span> Right_Ptr.Next<span class="sym">;
</span>            <span class="kwa">end loop</span><span class="sym">;
</span>         <span class="kwa">else
</span>            Result <span class="sym">:=</span> False<span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">return</span> Result<span class="sym">;
</span>      <span class="kwa">end</span> <span class="str">&quot;=&quot;</span><span class="sym">;
</span>      <span class="kwa">function</span> New_List <span class="kwa">return</span> List <span class="kwa">is
</span>         Result <span class="sym">:</span> List<span class="sym">;
</span>      <span class="kwa">begin
         return</span> Result<span class="sym">;
</span>      <span class="kwa">end</span> New_List<span class="sym">;
</span>      <span class="kwa">function</span> Sequence<span class="sym">(</span>From<span class="sym">,</span> To <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">)</span> <span class="kwa">return</span> List <span class="kwa">is
</span>         Result <span class="sym">:</span> List<span class="sym">;
</span>         Temp <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span>         Low <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> From<span class="sym">;
</span>         High <span class="sym">:</span> <span class="kwb">Integer</span> <span class="sym">:=</span> To<span class="sym">;
</span>      <span class="kwa">begin
         if</span> From <span class="sym">&gt;</span> To <span class="kwa">then
</span>            Temp <span class="sym">:=</span> From<span class="sym">;
</span>            Low <span class="sym">:=</span> To<span class="sym">;
</span>            High <span class="sym">:=</span> Temp<span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">for</span> Val <span class="kwa">in</span> Low..High <span class="kwa">loop
</span>            Push_Tail<span class="sym">(</span>Result<span class="sym">,</span> Val<span class="sym">);
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>         <span class="kwa">return</span> Result<span class="sym">;
</span>      <span class="kwa">end</span> Sequence<span class="sym">;
</span>      <span class="kwa">function</span> Copy<span class="sym">(</span>Source <span class="sym">:</span> List<span class="sym">)</span> <span class="kwa">return</span> List <span class="kwa">is
</span>         Result <span class="sym">:</span> List<span class="sym">;
</span>         Source_Ptr <span class="sym">:</span> Element_Access <span class="sym">:=</span> Source.Head<span class="sym">;
</span>      <span class="kwa">begin
         while</span> Source_Ptr <span class="sym">/=</span> <span class="kwa">null loop
</span>            Push_Tail<span class="sym">(</span>Item <span class="sym">=&gt;</span> Result<span class="sym">,</span> Element <span class="sym">=&gt;</span> Source_Ptr.Value<span class="sym">);
</span>            Source_Ptr <span class="sym">:=</span> Source_Ptr.Next<span class="sym">;
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>         <span class="kwa">return</span> Result<span class="sym">;
</span>      <span class="kwa">end</span> Copy<span class="sym">;
</span>      <span class="kwa">procedure</span> List_Reverse<span class="sym">(</span>Source <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">)</span> <span class="kwa">is
</span>         Head <span class="sym">:</span> Element_Access <span class="sym">:=</span> Source.Head<span class="sym">;
</span>         Temp <span class="sym">:</span> Element_Access<span class="sym">;
</span>      <span class="kwa">begin
</span>         Temp <span class="sym">:=</span> Source.Head<span class="sym">;
</span>         Source.Head <span class="sym">:=</span> Source.Tail<span class="sym">;
</span>         Source.Tail <span class="sym">:=</span> Temp<span class="sym">;
</span>         <span class="kwa">if</span> Head <span class="sym">=</span> <span class="kwa">null then
            raise</span> Empty_List_Error<span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">loop
</span>            Temp <span class="sym">:=</span> Head.Next<span class="sym">;
</span>            Head.Next <span class="sym">:=</span> Head.Previous<span class="sym">;
</span>            Head.Previous <span class="sym">:=</span> Temp<span class="sym">;
</span>            Head <span class="sym">:=</span> Temp<span class="sym">;
</span>            <span class="kwa">exit when</span> Head <span class="sym">=</span> <span class="kwa">null</span><span class="sym">;
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>      <span class="kwa">end</span> List_Reverse<span class="sym">;
</span>      <span class="kwa">procedure</span> Empty_List<span class="sym">(</span>Source <span class="sym">:</span> <span class="kwa">in out</span> List<span class="sym">)</span> <span class="kwa">is
         procedure</span> Free <span class="kwa">is new</span> Ada.Unchecked_Deallocation<span class="sym">(</span>List_Element<span class="sym">,
</span>Element_Access<span class="sym">);
</span>         Source_Ptr <span class="sym">:</span> Element_Access <span class="sym">:=</span> Source.Head<span class="sym">;
</span>         Temp <span class="sym">:</span> Element_Access<span class="sym">;
</span>      <span class="kwa">begin
         while</span> Source_Ptr <span class="sym">/=</span> <span class="kwa">null loop
</span>            Temp <span class="sym">:=</span> Source_Ptr<span class="sym">;
</span>            Source_Ptr <span class="sym">:=</span> Source_Ptr.Next<span class="sym">;
</span>            Free<span class="sym">(</span>Temp<span class="sym">);
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>         Source <span class="sym">:=</span> New_List<span class="sym">;
</span>      <span class="kwa">end</span> Empty_List<span class="sym">;
</span>      <span class="kwa">procedure</span> Print<span class="sym">(</span>Msg <span class="sym">:</span> <span class="kwa">in</span> <span class="kwb">String</span><span class="sym">;</span> Item <span class="sym">:</span> <span class="kwa">in</span> List<span class="sym">)</span> <span class="kwa">is
</span>         Source_Ptr <span class="sym">:</span> Element_Access <span class="sym">:=</span> Item.Head<span class="sym">;
</span>      <span class="kwa">begin
</span>         Put_Line<span class="sym">(</span>Msg<span class="sym">);
</span>         Put_Line<span class="sym">(</span><span class="str">&quot;Length:&quot;</span> <span class="sym">&amp;</span> <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>Length<span class="sym">(</span>Item<span class="sym">)));
</span>         <span class="kwa">while</span> Source_Ptr <span class="sym">/=</span> <span class="kwa">null loop
            if</span> Source_Ptr.Previous <span class="sym">/=</span> <span class="kwa">null then
</span>               Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Source_Ptr.Previous.Value<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">6</span><span class="sym">);
</span>            <span class="kwa">end if</span><span class="sym">;
</span>            Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Source_Ptr.Value<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">6</span><span class="sym">);
</span>            <span class="kwa">if</span> Source_Ptr.Next <span class="sym">/=</span> <span class="kwa">null then
</span>               Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Source_Ptr.Next.Value<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">6</span><span class="sym">);
</span>            <span class="kwa">end if</span><span class="sym">;
</span>            New_Line<span class="sym">;
</span>            Source_Ptr <span class="sym">:=</span> Source_Ptr.Next<span class="sym">;
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>      <span class="kwa">end</span> Print<span class="sym">;
</span>      <span class="kwa">function</span> Test_Lists <span class="kwa">return</span> <span class="kwb">Integer</span> <span class="kwa">is
</span>         Size <span class="sym">:</span> <span class="kwa">constant</span> <span class="kwb">Integer</span> <span class="sym">:=</span> <span class="num">10_000</span><span class="sym">;
</span>         Li1<span class="sym">,</span> Li2<span class="sym">,</span> Li3 <span class="sym">:</span> List<span class="sym">;</span> <span class="slc">-- all are created as empty lists
</span>         Temp_Element <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span>         Len <span class="sym">:</span> <span class="kwb">Integer</span><span class="sym">;
</span>      <span class="kwa">begin
</span>         <span class="slc">-- Create a list of integers from 1 to Size
</span>         Li1 <span class="sym">:=</span> Sequence<span class="sym">(</span><span class="num">1</span><span class="sym">,</span> Size<span class="sym">);
</span>         <span class="slc">-- Copy the list to Li2
</span>         Li2 <span class="sym">:=</span> Copy<span class="sym">(</span>Li1<span class="sym">);
</span>         <span class="slc">-- Compare Li1 and Li2 for equality
</span>         <span class="kwa">if</span> Li1 <span class="sym">/=</span> Li2 <span class="kwa">then
</span>            Put_Line<span class="sym">(</span><span class="str">&quot;Li1 and Li2 are not equal!&quot;</span><span class="sym">);
</span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="kwa">while not</span> Is_Empty<span class="sym">(</span>Li2<span class="sym">)</span> <span class="kwa">loop
</span>            Pop_Head<span class="sym">(</span>Li2<span class="sym">,</span> Temp_Element<span class="sym">);
</span>            Push_Tail<span class="sym">(</span>Li3<span class="sym">,</span> Temp_Element<span class="sym">);
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>         <span class="slc">-- Li2 must be empty now
</span>         <span class="kwa">if not</span> Is_Empty<span class="sym">(</span>Li2<span class="sym">)</span> <span class="kwa">then
</span>            Put_Line<span class="sym">(</span><span class="str">&quot;Li2 should be empty now!&quot;</span><span class="sym">);
</span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="slc">-- Append each item from Li3 to Li2
</span>         <span class="slc">-- reversing the list
</span>         <span class="kwa">while not</span> Is_Empty<span class="sym">(</span>Li3<span class="sym">)</span> <span class="kwa">loop
</span>            Pop_Tail<span class="sym">(</span>Li3<span class="sym">,</span> Temp_Element<span class="sym">);
</span>            Push_Tail<span class="sym">(</span>Li2<span class="sym">,</span> Temp_Element<span class="sym">);
</span>         <span class="kwa">end loop</span><span class="sym">;
</span>         <span class="slc">-- Li3 must be empty now
</span>         <span class="kwa">if not</span> Is_Empty<span class="sym">(</span>Li3<span class="sym">)</span> <span class="kwa">then
</span>            Put_Line<span class="sym">(</span><span class="str">&quot;Li3 should be empty now!&quot;</span><span class="sym">);
</span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="slc">-- reverse Li1 in place
</span>         List_Reverse<span class="sym">(</span>Li1<span class="sym">);
</span>         <span class="slc">-- check that Li1's first item is still Size
</span>         <span class="kwa">if</span> First<span class="sym">(</span>Li1<span class="sym">)</span>.Value <span class="sym">/=</span> Size <span class="kwa">then
</span>            Put_Line<span class="sym">(</span><span class="str">&quot;First Li1 value wrong. Wanted&quot;</span> <span class="sym">&amp;</span> <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>Size<span class="sym">) &amp;
</span>               <span class="str">&quot; got&quot;</span> <span class="sym">&amp;</span> <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>First<span class="sym">(</span>Li1<span class="sym">)</span>.Value<span class="sym">));
</span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="slc">-- Ensure Li1 last value is now 1
</span>         <span class="kwa">if</span> Last<span class="sym">(</span>Li1<span class="sym">)</span>.Value <span class="sym">/=</span> <span class="num">1</span> <span class="kwa">then
</span>            Put_Line<span class="sym">(</span><span class="str">&quot;Last Li1 value wrong, wanted 1, got&quot;</span> <span class="sym">&amp;
</span>               <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>Last<span class="sym">(</span>Li1<span class="sym">)</span>.Value<span class="sym">));
</span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="slc">-- Check that Li2's first value is now Size
</span>         <span class="kwa">if</span> First<span class="sym">(</span>Li2<span class="sym">)</span>.Value <span class="sym">/=</span> Size <span class="kwa">then
</span>            Put_Line<span class="sym">(</span><span class="str">&quot;First Li2 value wrong, wanted&quot;</span> <span class="sym">&amp;
</span>               <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>Size<span class="sym">) &amp;</span> <span class="str">&quot; got&quot;</span> <span class="sym">&amp;
</span>               <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>First<span class="sym">(</span>Li2<span class="sym">)</span>.Value<span class="sym">));
</span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="slc">-- Check that Li2's last item is now 1
</span>         <span class="kwa">if</span> Last<span class="sym">(</span>Li2<span class="sym">)</span>.Value <span class="sym">/=</span> <span class="num">1</span> <span class="kwa">then
</span>            Put_Line<span class="sym">(</span><span class="str">&quot;Last Li2 value wrong, wanted 1&quot;</span><span class="sym">);
</span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="slc">-- Check that Li1's size is still Size
</span>         <span class="kwa">if</span> Length<span class="sym">(</span>Li1<span class="sym">) /=</span> Size <span class="kwa">then
</span>            Put_Line<span class="sym">(</span><span class="str">&quot;Li1 size wrong, wanted&quot;</span> <span class="sym">&amp;
</span>               <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>Size<span class="sym">) &amp;</span> <span class="str">&quot; got&quot;</span> <span class="sym">&amp;
</span>               <span class="kwb">Integer</span><span class="sym">'</span>Image<span class="sym">(</span>Length<span class="sym">(</span>Li1<span class="sym">)));
</span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         <span class="slc">-- compare Li1 and Li2 for equality
</span>         <span class="kwa">if</span> Li1 <span class="sym">/=</span> Li2 <span class="kwa">then
</span>            Put_Line<span class="sym">(</span><span class="str">&quot;Li1 and Li2 are not equal.&quot;</span><span class="sym">);
</span>            <span class="kwa">return</span> <span class="num">-1</span><span class="sym">;
</span>         <span class="kwa">end if</span><span class="sym">;
</span>         Len <span class="sym">:=</span> Length<span class="sym">(</span>Li1<span class="sym">);
</span>         Empty_List<span class="sym">(</span>Li1<span class="sym">);
</span>         Empty_List<span class="sym">(</span>Li2<span class="sym">);
</span>         Empty_List<span class="sym">(</span>Li3<span class="sym">);
</span>         <span class="kwa">return</span> Len<span class="sym">;
</span>      <span class="kwa">end</span> Test_Lists<span class="sym">;
</span>   <span class="kwa">end</span> Listops<span class="sym">;
</span>   Max <span class="sym">:</span> <span class="kwb">Positive</span><span class="sym">;
</span>   Result <span class="sym">:</span> <span class="kwb">Natural</span><span class="sym">;
</span><span class="kwa">begin
   begin
</span>      Max <span class="sym">:=</span> <span class="kwb">Positive</span><span class="sym">'</span>Value<span class="sym">(</span>Argument<span class="sym">(</span><span class="num">1</span><span class="sym">));
</span>   <span class="kwa">exception
      when others</span> <span class="sym">=&gt;
</span>         Max <span class="sym">:=</span> <span class="num">16</span><span class="sym">;
</span>   <span class="kwa">end</span><span class="sym">;
</span>   <span class="kwa">for</span> Iter <span class="kwa">in</span> <span class="num">1</span>..Max <span class="kwa">loop
</span>      Result <span class="sym">:=</span> Listops.Test_Lists<span class="sym">;
</span>   <span class="kwa">end loop</span><span class="sym">;
</span>   Ada.Integer_Text_IO.Put<span class="sym">(</span>Item <span class="sym">=&gt;</span> Result<span class="sym">,</span> Width <span class="sym">=&gt;</span> <span class="num">0</span><span class="sym">);
</span>   Ada.Text_IO.New_Line<span class="sym">;
</span><span class="kwa">end</span> Listoperations<span class="sym">;

</span>
