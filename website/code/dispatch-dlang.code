<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   C# reference implementation contributed by Isaac Gouy

   converted to D by Dave Fladebo
   compile: dmd -O -inline -release dispatch.d
*/</span>

import std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;

</span><span class="kwb">int</span> main<span class="sym">(</span><span class="kwb">char</span><span class="sym">[][]</span> args<span class="sym">)
{
</span>    <span class="kwb">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? atoi<span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;

</span>    Bottle<span class="sym">[]</span> ba <span class="sym">=</span> <span class="kwa">new</span> Bottle<span class="sym">[</span><span class="num">10</span><span class="sym">];
</span>    foreach<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> inout Bottle b<span class="sym">;</span> ba<span class="sym">)</span> b <span class="sym">=</span> <span class="kwa">new</span> Bottle<span class="sym">(</span>i<span class="sym">);

</span>    PressurizedBottle<span class="sym">[]</span> pa <span class="sym">=</span> <span class="kwa">new</span> PressurizedBottle<span class="sym">[</span><span class="num">10</span><span class="sym">];
</span>    foreach<span class="sym">(</span><span class="kwb">int</span> i<span class="sym">,</span> inout PressurizedBottle p<span class="sym">;</span> pa<span class="sym">)</span> p <span class="sym">=</span> <span class="kwa">new</span> PressurizedBottle<span class="sym">(</span>i<span class="sym">);

</span>    <span class="kwb">int</span> check <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>    <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;=</span> n<span class="sym">;</span> i<span class="sym">++)
    {
</span>        check <span class="sym">+=</span> bottleCheck<span class="sym">(</span>ba<span class="sym">[</span><span class="num">1</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">2</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">3</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">4</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">5</span><span class="sym">],</span>i<span class="sym">);
</span>        check <span class="sym">+=</span> bottleCheck<span class="sym">(</span>ba<span class="sym">[</span><span class="num">6</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">7</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">8</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">9</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">0</span><span class="sym">],</span>i<span class="sym">);

</span>        check <span class="sym">+=</span> bottleCheck<span class="sym">(</span>pa<span class="sym">[</span><span class="num">1</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">2</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">3</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">4</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">5</span><span class="sym">],</span>i<span class="sym">);
</span>        check <span class="sym">-=</span> bottleCheck<span class="sym">(</span>pa<span class="sym">[</span><span class="num">6</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">7</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">8</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">9</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">0</span><span class="sym">],</span>i<span class="sym">);
    }
</span>    writefln<span class="sym">(</span>check<span class="sym">);

</span>    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;
}

</span><span class="kwb">int</span> bottleCheck<span class="sym">(</span>Bottle a1<span class="sym">,</span> Bottle a2<span class="sym">,</span> Bottle a3<span class="sym">,</span> Bottle a4<span class="sym">,</span> Bottle a5<span class="sym">,</span> <span class="kwb">int</span> i<span class="sym">)
{
</span>    a1<span class="sym">.</span>cycle<span class="sym">();</span> a2<span class="sym">.</span>cycle<span class="sym">();</span> a3<span class="sym">.</span>cycle<span class="sym">();</span> a4<span class="sym">.</span>cycle<span class="sym">();</span> a5<span class="sym">.</span>cycle<span class="sym">();

</span>    <span class="kwb">int</span> c <span class="sym">=</span> i <span class="sym">%</span> <span class="num">2</span><span class="sym">;
</span>    <span class="kwa">return</span> a1<span class="sym">.</span>check<span class="sym">(</span>c<span class="sym">) +</span> a2<span class="sym">.</span>check<span class="sym">(</span>c<span class="sym">) +</span> a3<span class="sym">.</span>check<span class="sym">(</span>c<span class="sym">) +</span> a4<span class="sym">.</span>check<span class="sym">(</span>c<span class="sym">) +</span> a5<span class="sym">.</span>check<span class="sym">(</span>c<span class="sym">);
}

</span>interface IBottle
<span class="sym">{
</span>    <span class="kwb">void</span> state<span class="sym">(</span>BottleState s<span class="sym">);
}

</span><span class="kwc">class</span> BottleState
<span class="sym">{
</span><span class="kwc">private</span><span class="sym">:
</span>    <span class="kwb">static</span> EmptyState Empty<span class="sym">;
</span>    <span class="kwb">static</span> FullState Full<span class="sym">;
</span>    <span class="kwb">static</span> SealedState Sealed<span class="sym">;
</span>    <span class="kwb">static</span> <span class="kwa">this</span><span class="sym">()
    {
</span>        Empty <span class="sym">=</span> <span class="kwa">new</span> EmptyState<span class="sym">();
</span>        Full <span class="sym">=</span> <span class="kwa">new</span> FullState<span class="sym">();
</span>        Sealed <span class="sym">=</span> <span class="kwa">new</span> SealedState<span class="sym">();
    }

</span><span class="kwc">protected</span><span class="sym">:
</span>    abstract <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">);
</span>    abstract <span class="kwb">int</span> tag<span class="sym">();

</span><span class="kwc">public</span><span class="sym">:
</span>    <span class="kwb">static</span> BottleState initialState<span class="sym">()
    {
</span>        <span class="kwa">return</span> Empty<span class="sym">;
    }

</span>    <span class="kwb">static</span> <span class="kwc">class</span> EmptyState <span class="sym">:</span> BottleState
    <span class="sym">{
</span>    <span class="kwc">public</span><span class="sym">:
</span>        <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">) {</span> b<span class="sym">.</span>state<span class="sym">(</span>Full<span class="sym">); }
</span>        <span class="kwb">int</span> tag<span class="sym">() {</span> <span class="kwa">return</span> <span class="num">1</span><span class="sym">; }
    }

</span>    <span class="kwb">static</span> <span class="kwc">class</span> FullState <span class="sym">:</span> BottleState
    <span class="sym">{
</span>    <span class="kwc">public</span><span class="sym">:
</span>        <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">) {</span> b<span class="sym">.</span>state<span class="sym">(</span>Sealed<span class="sym">); }
</span>        <span class="kwb">int</span> tag<span class="sym">() {</span> <span class="kwa">return</span> <span class="num">2</span><span class="sym">; }
    }

</span>    <span class="kwb">static</span> <span class="kwc">class</span> SealedState <span class="sym">:</span> BottleState
    <span class="sym">{
</span>    <span class="kwc">public</span><span class="sym">:
</span>        <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">) {</span> b<span class="sym">.</span>state<span class="sym">(</span>Empty<span class="sym">); }
</span>        <span class="kwb">int</span> tag<span class="sym">() {</span> <span class="kwa">return</span> <span class="num">3</span><span class="sym">; }
    }
}

</span><span class="kwc">class</span> PressurizedBottleState <span class="sym">:</span> BottleState
<span class="sym">{
</span><span class="kwc">private</span><span class="sym">:
</span>    <span class="kwb">static</span> UnpressurizedEmptyState UnpressurizedEmpty<span class="sym">;
</span>    <span class="kwb">static</span> UnpressurizedFullState UnpressurizedFull<span class="sym">;
</span>    <span class="kwb">static</span> PressurizedUnsealedState PressurizedUnsealed<span class="sym">;
</span>    <span class="kwb">static</span> PressurizedSealedState PressurizedSealed<span class="sym">;
</span>    <span class="kwb">static</span> <span class="kwa">this</span><span class="sym">()
    {
</span>        UnpressurizedEmpty <span class="sym">=</span> <span class="kwa">new</span> UnpressurizedEmptyState<span class="sym">();
</span>        UnpressurizedFull <span class="sym">=</span> <span class="kwa">new</span> UnpressurizedFullState<span class="sym">();
</span>        PressurizedUnsealed <span class="sym">=</span> <span class="kwa">new</span> PressurizedUnsealedState<span class="sym">();
</span>        PressurizedSealed <span class="sym">=</span> <span class="kwa">new</span> PressurizedSealedState<span class="sym">();
    }

</span><span class="kwc">public</span><span class="sym">:
</span>    <span class="kwb">static</span> BottleState initialState<span class="sym">()
    {
</span>         <span class="kwa">return</span> UnpressurizedEmpty<span class="sym">;
    }

</span>    <span class="kwb">static</span> <span class="kwc">class</span> UnpressurizedEmptyState <span class="sym">:</span> PressurizedBottleState
    <span class="sym">{
</span>    <span class="kwc">public</span><span class="sym">:
</span>        <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">) {</span> b<span class="sym">.</span>state<span class="sym">(</span>UnpressurizedFull<span class="sym">); }
</span>        <span class="kwb">int</span> tag<span class="sym">() {</span> <span class="kwa">return</span> <span class="num">4</span><span class="sym">; }
    }

</span>    <span class="kwb">static</span> <span class="kwc">class</span> UnpressurizedFullState <span class="sym">:</span> PressurizedBottleState
    <span class="sym">{
</span>    <span class="kwc">public</span><span class="sym">:
</span>        <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">) {</span> b<span class="sym">.</span>state<span class="sym">(</span>PressurizedUnsealed<span class="sym">); }
</span>        <span class="kwb">int</span> tag<span class="sym">() {</span> <span class="kwa">return</span> <span class="num">5</span><span class="sym">; }
    }

</span>    <span class="kwb">static</span> <span class="kwc">class</span> PressurizedUnsealedState <span class="sym">:</span> PressurizedBottleState
    <span class="sym">{
</span>    <span class="kwc">public</span><span class="sym">:
</span>        <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">) {</span> b<span class="sym">.</span>state<span class="sym">(</span>PressurizedSealed<span class="sym">); }
</span>        <span class="kwb">int</span> tag<span class="sym">() {</span> <span class="kwa">return</span> <span class="num">6</span><span class="sym">; }
    }

</span>    <span class="kwb">static</span> <span class="kwc">class</span> PressurizedSealedState <span class="sym">:</span> PressurizedBottleState
    <span class="sym">{
</span>    <span class="kwc">public</span><span class="sym">:
</span>        <span class="kwb">void</span> next<span class="sym">(</span>IBottle b<span class="sym">) {</span> b<span class="sym">.</span>state<span class="sym">(</span>UnpressurizedEmpty<span class="sym">); }
</span>        <span class="kwb">int</span> tag<span class="sym">() {</span> <span class="kwa">return</span> <span class="num">7</span><span class="sym">; }
    }
}

</span><span class="kwc">class</span> Bottle <span class="sym">:</span> IBottle
<span class="sym">{
</span><span class="kwc">private</span><span class="sym">:
</span>    <span class="kwb">int</span> id<span class="sym">;

</span>package<span class="sym">:
</span>    BottleState s<span class="sym">;
</span>    <span class="kwb">void</span> empty<span class="sym">() {</span> s<span class="sym">.</span>next<span class="sym">(</span><span class="kwa">this</span><span class="sym">); }
</span>    <span class="kwb">void</span> fill<span class="sym">()  {</span> s<span class="sym">.</span>next<span class="sym">(</span><span class="kwa">this</span><span class="sym">); }
</span>    <span class="kwb">void</span> seal<span class="sym">()  {</span> s<span class="sym">.</span>next<span class="sym">(</span><span class="kwa">this</span><span class="sym">); }

</span><span class="kwc">public</span><span class="sym">:
</span>    <span class="kwa">this</span><span class="sym">(</span><span class="kwb">int</span> id<span class="sym">)
    {
</span>        <span class="kwa">this</span><span class="sym">.</span>id <span class="sym">=</span> id<span class="sym">;
</span>        s <span class="sym">=</span> initialState<span class="sym">();
    }

</span>    <span class="kwb">int</span> check<span class="sym">(</span><span class="kwb">int</span> c<span class="sym">) {</span> <span class="kwa">return</span> s<span class="sym">.</span>tag<span class="sym">() +</span> id <span class="sym">+</span> c<span class="sym">; }

</span>    <span class="kwb">void</span> state<span class="sym">(</span>BottleState s<span class="sym">)
    {
</span>        <span class="kwa">this</span><span class="sym">.</span>s <span class="sym">=</span> s<span class="sym">;
    }

</span>    <span class="kwb">static</span> BottleState initialState<span class="sym">()
    {
</span>        <span class="kwa">return</span> BottleState<span class="sym">.</span>initialState<span class="sym">();
    }

</span>    <span class="kwb">void</span> cycle<span class="sym">()
    {
</span>        fill<span class="sym">();</span> seal<span class="sym">();</span> empty<span class="sym">();
    }
}

</span><span class="kwc">class</span> PressurizedBottle <span class="sym">:</span> Bottle
<span class="sym">{
</span><span class="kwc">private</span><span class="sym">:
</span>    <span class="kwb">void</span> pressurize<span class="sym">() {</span> s<span class="sym">.</span>next<span class="sym">(</span><span class="kwa">this</span><span class="sym">); }

</span><span class="kwc">public</span><span class="sym">:
</span>    <span class="kwa">this</span><span class="sym">(</span><span class="kwb">int</span> id<span class="sym">) {</span> super<span class="sym">(</span>id<span class="sym">); }

</span>    override <span class="kwb">static</span> BottleState initialState<span class="sym">()
    {
</span>        <span class="kwa">return</span> PressurizedBottleState<span class="sym">.</span>initialState<span class="sym">();
    }

</span>    <span class="kwb">void</span> cycle<span class="sym">()
    {
</span>        fill<span class="sym">();</span> pressurize<span class="sym">();</span> seal<span class="sym">();</span> empty<span class="sym">();
    }
}</span>
