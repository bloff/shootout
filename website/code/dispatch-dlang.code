<span class="com">/* The Great Computer Language Shootout</span>
<span class="com">   http://shootout.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   C# reference implementation contributed by Isaac Gouy</span>
<span class="com"></span>
<span class="com">   converted to D by Dave Fladebo</span>
<span class="com">   compile: dmd -O -inline -release dispatch.d</span>
<span class="com">*/</span>

<span class="kwa">import</span> std<span class="sym">.</span>stdio<span class="sym">,</span> std<span class="sym">.</span>string<span class="sym">;</span>

<span class="kwa">int</span> <span class="kwd">main</span><span class="sym">(</span><span class="kwa">char</span><span class="sym">[][]</span> args<span class="sym">)</span>
<span class="sym">{</span>
    <span class="kwa">int</span> n <span class="sym">=</span> args<span class="sym">.</span>length <span class="sym">&gt;</span> <span class="num">1</span> ? <span class="kwd">atoi</span><span class="sym">(</span>args<span class="sym">[</span><span class="num">1</span><span class="sym">]) :</span> <span class="num">1</span><span class="sym">;</span>

    <span class="kwb">B</span>ottle<span class="sym">[]</span> ba <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">B</span>ottle<span class="sym">[</span><span class="num">10</span><span class="sym">];</span>
    <span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">int</span> i<span class="sym">,</span> <span class="kwa">inout</span> <span class="kwb">B</span>ottle b<span class="sym">;</span> ba<span class="sym">)</span> b <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">B</span>ottle<span class="sym">(</span>i<span class="sym">);</span>

    <span class="kwb">P</span>ressurized<span class="kwb">B</span>ottle<span class="sym">[]</span> pa <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">P</span>ressurized<span class="kwb">B</span>ottle<span class="sym">[</span><span class="num">10</span><span class="sym">];</span>
    <span class="kwa">foreach</span><span class="sym">(</span><span class="kwa">int</span> i<span class="sym">,</span> <span class="kwa">inout</span> <span class="kwb">P</span>ressurized<span class="kwb">B</span>ottle p<span class="sym">;</span> pa<span class="sym">)</span> p <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">P</span>ressurized<span class="kwb">B</span>ottle<span class="sym">(</span>i<span class="sym">);</span>

    <span class="kwa">int</span> check <span class="sym">=</span> <span class="num">0</span><span class="sym">;</span>
    <span class="kwa">for</span><span class="sym">(</span><span class="kwa">int</span> i <span class="sym">=</span> <span class="num">1</span><span class="sym">;</span> i <span class="sym">&lt;=</span> n<span class="sym">;</span> i<span class="sym">++)</span>
    <span class="sym">{</span>
        check <span class="sym">+=</span> <span class="kwd">bottleCheck</span><span class="sym">(</span>ba<span class="sym">[</span><span class="num">1</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">2</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">3</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">4</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">5</span><span class="sym">],</span>i<span class="sym">);</span>
        check <span class="sym">+=</span> <span class="kwd">bottleCheck</span><span class="sym">(</span>ba<span class="sym">[</span><span class="num">6</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">7</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">8</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">9</span><span class="sym">],</span>ba<span class="sym">[</span><span class="num">0</span><span class="sym">],</span>i<span class="sym">);</span>

        check <span class="sym">+=</span> <span class="kwd">bottleCheck</span><span class="sym">(</span>pa<span class="sym">[</span><span class="num">1</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">2</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">3</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">4</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">5</span><span class="sym">],</span>i<span class="sym">);</span>
        check <span class="sym">-=</span> <span class="kwd">bottleCheck</span><span class="sym">(</span>pa<span class="sym">[</span><span class="num">6</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">7</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">8</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">9</span><span class="sym">],</span>pa<span class="sym">[</span><span class="num">0</span><span class="sym">],</span>i<span class="sym">);</span>
    <span class="sym">}</span>
    <span class="kwd">writefln</span><span class="sym">(</span>check<span class="sym">);</span>

    <span class="kwa">return</span> <span class="num">0</span><span class="sym">;</span>
<span class="sym">}</span>

<span class="kwa">int</span> <span class="kwd">bottleCheck</span><span class="sym">(</span><span class="kwb">B</span>ottle a1<span class="sym">,</span> <span class="kwb">B</span>ottle a2<span class="sym">,</span> <span class="kwb">B</span>ottle a3<span class="sym">,</span> <span class="kwb">B</span>ottle a4<span class="sym">,</span> <span class="kwb">B</span>ottle a5<span class="sym">,</span> <span class="kwa">int</span> i<span class="sym">)</span>
<span class="sym">{</span>
    a1<span class="sym">.</span><span class="kwd">cycle</span><span class="sym">();</span> a2<span class="sym">.</span><span class="kwd">cycle</span><span class="sym">();</span> a3<span class="sym">.</span><span class="kwd">cycle</span><span class="sym">();</span> a4<span class="sym">.</span><span class="kwd">cycle</span><span class="sym">();</span> a5<span class="sym">.</span><span class="kwd">cycle</span><span class="sym">();</span>

    <span class="kwa">int</span> c <span class="sym">=</span> i <span class="sym">%</span> <span class="num">2</span><span class="sym">;</span>
    <span class="kwa">return</span> a1<span class="sym">.</span><span class="kwd">check</span><span class="sym">(</span>c<span class="sym">) +</span> a2<span class="sym">.</span><span class="kwd">check</span><span class="sym">(</span>c<span class="sym">) +</span> a3<span class="sym">.</span><span class="kwd">check</span><span class="sym">(</span>c<span class="sym">) +</span> a4<span class="sym">.</span><span class="kwd">check</span><span class="sym">(</span>c<span class="sym">) +</span> a5<span class="sym">.</span><span class="kwd">check</span><span class="sym">(</span>c<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">interface</span> <span class="kwb">IB</span>ottle
<span class="sym">{</span>
    <span class="kwa">void</span> <span class="kwd">state</span><span class="sym">(</span><span class="kwb">B</span>ottle<span class="kwb">S</span>tate s<span class="sym">);</span>
<span class="sym">}</span>

<span class="kwa">class</span> <span class="kwb">B</span>ottle<span class="kwb">S</span>tate
<span class="sym">{</span>
<span class="kwa">private</span><span class="sym">:</span>
    <span class="kwa">static</span> <span class="kwb">E</span>mpty<span class="kwb">S</span>tate <span class="kwb">E</span>mpty<span class="sym">;</span>
    <span class="kwa">static</span> <span class="kwb">F</span>ull<span class="kwb">S</span>tate <span class="kwb">F</span>ull<span class="sym">;</span>
    <span class="kwa">static</span> <span class="kwb">S</span>ealed<span class="kwb">S</span>tate <span class="kwb">S</span>ealed<span class="sym">;</span>
    <span class="kwa">static this</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwb">E</span>mpty <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">E</span>mpty<span class="kwb">S</span>tate<span class="sym">();</span>
        <span class="kwb">F</span>ull <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">F</span>ull<span class="kwb">S</span>tate<span class="sym">();</span>
        <span class="kwb">S</span>ealed <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">S</span>ealed<span class="kwb">S</span>tate<span class="sym">();</span>
    <span class="sym">}</span>

<span class="kwa">protected</span><span class="sym">:</span>
    <span class="kwa">abstract void</span> <span class="kwd">next</span><span class="sym">(</span><span class="kwb">IB</span>ottle b<span class="sym">);</span>
    <span class="kwa">abstract int</span> <span class="kwd">tag</span><span class="sym">();</span>

<span class="kwa">public</span><span class="sym">:</span>
    <span class="kwa">static</span> <span class="kwb">B</span>ottle<span class="kwb">S</span>tate <span class="kwd">initialState</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">return</span> <span class="kwb">E</span>mpty<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">static class</span> <span class="kwb">E</span>mpty<span class="kwb">S</span>tate <span class="sym">:</span> <span class="kwb">B</span>ottle<span class="kwb">S</span>tate
    <span class="sym">{</span>
    <span class="kwa">public</span><span class="sym">:</span>
        <span class="kwa">void</span> <span class="kwd">next</span><span class="sym">(</span><span class="kwb">IB</span>ottle b<span class="sym">) {</span> b<span class="sym">.</span><span class="kwd">state</span><span class="sym">(</span><span class="kwb">F</span>ull<span class="sym">); }</span>
        <span class="kwa">int</span> <span class="kwd">tag</span><span class="sym">() {</span> <span class="kwa">return</span> <span class="num">1</span><span class="sym">; }</span>
    <span class="sym">}</span>

    <span class="kwa">static class</span> <span class="kwb">F</span>ull<span class="kwb">S</span>tate <span class="sym">:</span> <span class="kwb">B</span>ottle<span class="kwb">S</span>tate
    <span class="sym">{</span>
    <span class="kwa">public</span><span class="sym">:</span>
        <span class="kwa">void</span> <span class="kwd">next</span><span class="sym">(</span><span class="kwb">IB</span>ottle b<span class="sym">) {</span> b<span class="sym">.</span><span class="kwd">state</span><span class="sym">(</span><span class="kwb">S</span>ealed<span class="sym">); }</span>
        <span class="kwa">int</span> <span class="kwd">tag</span><span class="sym">() {</span> <span class="kwa">return</span> <span class="num">2</span><span class="sym">; }</span>
    <span class="sym">}</span>

    <span class="kwa">static class</span> <span class="kwb">S</span>ealed<span class="kwb">S</span>tate <span class="sym">:</span> <span class="kwb">B</span>ottle<span class="kwb">S</span>tate
    <span class="sym">{</span>
    <span class="kwa">public</span><span class="sym">:</span>
        <span class="kwa">void</span> <span class="kwd">next</span><span class="sym">(</span><span class="kwb">IB</span>ottle b<span class="sym">) {</span> b<span class="sym">.</span><span class="kwd">state</span><span class="sym">(</span><span class="kwb">E</span>mpty<span class="sym">); }</span>
        <span class="kwa">int</span> <span class="kwd">tag</span><span class="sym">() {</span> <span class="kwa">return</span> <span class="num">3</span><span class="sym">; }</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> <span class="kwb">P</span>ressurized<span class="kwb">B</span>ottle<span class="kwb">S</span>tate <span class="sym">:</span> <span class="kwb">B</span>ottle<span class="kwb">S</span>tate
<span class="sym">{</span>
<span class="kwa">private</span><span class="sym">:</span>
    <span class="kwa">static</span> <span class="kwb">U</span>npressurized<span class="kwb">E</span>mpty<span class="kwb">S</span>tate <span class="kwb">U</span>npressurized<span class="kwb">E</span>mpty<span class="sym">;</span>
    <span class="kwa">static</span> <span class="kwb">U</span>npressurized<span class="kwb">F</span>ull<span class="kwb">S</span>tate <span class="kwb">U</span>npressurized<span class="kwb">F</span>ull<span class="sym">;</span>
    <span class="kwa">static</span> <span class="kwb">P</span>ressurized<span class="kwb">U</span>nsealed<span class="kwb">S</span>tate <span class="kwb">P</span>ressurized<span class="kwb">U</span>nsealed<span class="sym">;</span>
    <span class="kwa">static</span> <span class="kwb">P</span>ressurized<span class="kwb">S</span>ealed<span class="kwb">S</span>tate <span class="kwb">P</span>ressurized<span class="kwb">S</span>ealed<span class="sym">;</span>
    <span class="kwa">static this</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwb">U</span>npressurized<span class="kwb">E</span>mpty <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">U</span>npressurized<span class="kwb">E</span>mpty<span class="kwb">S</span>tate<span class="sym">();</span>
        <span class="kwb">U</span>npressurized<span class="kwb">F</span>ull <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">U</span>npressurized<span class="kwb">F</span>ull<span class="kwb">S</span>tate<span class="sym">();</span>
        <span class="kwb">P</span>ressurized<span class="kwb">U</span>nsealed <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">P</span>ressurized<span class="kwb">U</span>nsealed<span class="kwb">S</span>tate<span class="sym">();</span>
        <span class="kwb">P</span>ressurized<span class="kwb">S</span>ealed <span class="sym">=</span> <span class="kwa">new</span> <span class="kwb">P</span>ressurized<span class="kwb">S</span>ealed<span class="kwb">S</span>tate<span class="sym">();</span>
    <span class="sym">}</span>

<span class="kwa">public</span><span class="sym">:</span>
    <span class="kwa">static</span> <span class="kwb">B</span>ottle<span class="kwb">S</span>tate <span class="kwd">initialState</span><span class="sym">()</span>
    <span class="sym">{</span>
         <span class="kwa">return</span> <span class="kwb">U</span>npressurized<span class="kwb">E</span>mpty<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">static class</span> <span class="kwb">U</span>npressurized<span class="kwb">E</span>mpty<span class="kwb">S</span>tate <span class="sym">:</span> <span class="kwb">P</span>ressurized<span class="kwb">B</span>ottle<span class="kwb">S</span>tate
    <span class="sym">{</span>
    <span class="kwa">public</span><span class="sym">:</span>
        <span class="kwa">void</span> <span class="kwd">next</span><span class="sym">(</span><span class="kwb">IB</span>ottle b<span class="sym">) {</span> b<span class="sym">.</span><span class="kwd">state</span><span class="sym">(</span><span class="kwb">U</span>npressurized<span class="kwb">F</span>ull<span class="sym">); }</span>
        <span class="kwa">int</span> <span class="kwd">tag</span><span class="sym">() {</span> <span class="kwa">return</span> <span class="num">4</span><span class="sym">; }</span>
    <span class="sym">}</span>

    <span class="kwa">static class</span> <span class="kwb">U</span>npressurized<span class="kwb">F</span>ull<span class="kwb">S</span>tate <span class="sym">:</span> <span class="kwb">P</span>ressurized<span class="kwb">B</span>ottle<span class="kwb">S</span>tate
    <span class="sym">{</span>
    <span class="kwa">public</span><span class="sym">:</span>
        <span class="kwa">void</span> <span class="kwd">next</span><span class="sym">(</span><span class="kwb">IB</span>ottle b<span class="sym">) {</span> b<span class="sym">.</span><span class="kwd">state</span><span class="sym">(</span><span class="kwb">P</span>ressurized<span class="kwb">U</span>nsealed<span class="sym">); }</span>
        <span class="kwa">int</span> <span class="kwd">tag</span><span class="sym">() {</span> <span class="kwa">return</span> <span class="num">5</span><span class="sym">; }</span>
    <span class="sym">}</span>

    <span class="kwa">static class</span> <span class="kwb">P</span>ressurized<span class="kwb">U</span>nsealed<span class="kwb">S</span>tate <span class="sym">:</span> <span class="kwb">P</span>ressurized<span class="kwb">B</span>ottle<span class="kwb">S</span>tate
    <span class="sym">{</span>
    <span class="kwa">public</span><span class="sym">:</span>
        <span class="kwa">void</span> <span class="kwd">next</span><span class="sym">(</span><span class="kwb">IB</span>ottle b<span class="sym">) {</span> b<span class="sym">.</span><span class="kwd">state</span><span class="sym">(</span><span class="kwb">P</span>ressurized<span class="kwb">S</span>ealed<span class="sym">); }</span>
        <span class="kwa">int</span> <span class="kwd">tag</span><span class="sym">() {</span> <span class="kwa">return</span> <span class="num">6</span><span class="sym">; }</span>
    <span class="sym">}</span>

    <span class="kwa">static class</span> <span class="kwb">P</span>ressurized<span class="kwb">S</span>ealed<span class="kwb">S</span>tate <span class="sym">:</span> <span class="kwb">P</span>ressurized<span class="kwb">B</span>ottle<span class="kwb">S</span>tate
    <span class="sym">{</span>
    <span class="kwa">public</span><span class="sym">:</span>
        <span class="kwa">void</span> <span class="kwd">next</span><span class="sym">(</span><span class="kwb">IB</span>ottle b<span class="sym">) {</span> b<span class="sym">.</span><span class="kwd">state</span><span class="sym">(</span><span class="kwb">U</span>npressurized<span class="kwb">E</span>mpty<span class="sym">); }</span>
        <span class="kwa">int</span> <span class="kwd">tag</span><span class="sym">() {</span> <span class="kwa">return</span> <span class="num">7</span><span class="sym">; }</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> <span class="kwb">B</span>ottle <span class="sym">:</span> <span class="kwb">IB</span>ottle
<span class="sym">{</span>
<span class="kwa">private</span><span class="sym">:</span>
    <span class="kwa">int</span> id<span class="sym">;</span>

<span class="kwa">package</span><span class="sym">:</span>
    <span class="kwb">B</span>ottle<span class="kwb">S</span>tate s<span class="sym">;</span>
    <span class="kwa">void</span> <span class="kwd">empty</span><span class="sym">() {</span> s<span class="sym">.</span><span class="kwd">next</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">); }</span>
    <span class="kwa">void</span> <span class="kwd">fill</span><span class="sym">()  {</span> s<span class="sym">.</span><span class="kwd">next</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">); }</span>
    <span class="kwa">void</span> <span class="kwd">seal</span><span class="sym">()  {</span> s<span class="sym">.</span><span class="kwd">next</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">); }</span>

<span class="kwa">public</span><span class="sym">:</span>
    <span class="kwa">this</span><span class="sym">(</span><span class="kwa">int</span> id<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">this</span><span class="sym">.</span>id <span class="sym">=</span> id<span class="sym">;</span>
        s <span class="sym">=</span> <span class="kwd">initialState</span><span class="sym">();</span>
    <span class="sym">}</span>

    <span class="kwa">int</span> <span class="kwd">check</span><span class="sym">(</span><span class="kwa">int</span> c<span class="sym">) {</span> <span class="kwa">return</span> s<span class="sym">.</span><span class="kwd">tag</span><span class="sym">() +</span> id <span class="sym">+</span> c<span class="sym">; }</span>

    <span class="kwa">void</span> <span class="kwd">state</span><span class="sym">(</span><span class="kwb">B</span>ottle<span class="kwb">S</span>tate s<span class="sym">)</span>
    <span class="sym">{</span>
        <span class="kwa">this</span><span class="sym">.</span>s <span class="sym">=</span> s<span class="sym">;</span>
    <span class="sym">}</span>

    <span class="kwa">static</span> <span class="kwb">B</span>ottle<span class="kwb">S</span>tate <span class="kwd">initialState</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">return</span> <span class="kwb">B</span>ottle<span class="kwb">S</span>tate<span class="sym">.</span><span class="kwd">initialState</span><span class="sym">();</span>
    <span class="sym">}</span>

    <span class="kwa">void</span> <span class="kwd">cycle</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwd">fill</span><span class="sym">();</span> <span class="kwd">seal</span><span class="sym">();</span> <span class="kwd">empty</span><span class="sym">();</span>
    <span class="sym">}</span>
<span class="sym">}</span>

<span class="kwa">class</span> <span class="kwb">P</span>ressurized<span class="kwb">B</span>ottle <span class="sym">:</span> <span class="kwb">B</span>ottle
<span class="sym">{</span>
<span class="kwa">private</span><span class="sym">:</span>
    <span class="kwa">void</span> <span class="kwd">pressurize</span><span class="sym">() {</span> s<span class="sym">.</span><span class="kwd">next</span><span class="sym">(</span><span class="kwa">this</span><span class="sym">); }</span>

<span class="kwa">public</span><span class="sym">:</span>
    <span class="kwa">this</span><span class="sym">(</span><span class="kwa">int</span> id<span class="sym">) {</span> <span class="kwa">super</span><span class="sym">(</span>id<span class="sym">); }</span>

    <span class="kwa">override static</span> <span class="kwb">B</span>ottle<span class="kwb">S</span>tate <span class="kwd">initialState</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwa">return</span> <span class="kwb">P</span>ressurized<span class="kwb">B</span>ottle<span class="kwb">S</span>tate<span class="sym">.</span><span class="kwd">initialState</span><span class="sym">();</span>
    <span class="sym">}</span>

    <span class="kwa">void</span> <span class="kwd">cycle</span><span class="sym">()</span>
    <span class="sym">{</span>
        <span class="kwd">fill</span><span class="sym">();</span> <span class="kwd">pressurize</span><span class="sym">();</span> <span class="kwd">seal</span><span class="sym">();</span> <span class="kwd">empty</span><span class="sym">();</span>
    <span class="sym">}</span>
<span class="sym">}</span>
