<span class="slc">%% The Computer Language Shootout</span>
<span class="slc">%% http://shootout.alioth.debian.org/</span>

<span class="slc">%% Contributed  by Per Gustafsson</span>

<span class="slc">%% compile:  $OTP_ROOT/bin/erlc +native mandelbrot.erl</span>

<span class="slc">%% run: $OTP_ROOT/bin/erl -noinput -noshell -run mandelbrot main %A</span>

<span class="sym">-</span><span class="kwd">module</span><span class="sym">(</span>mandelbrot<span class="sym">)</span>.
<span class="sym">-</span><span class="kwd">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">])</span>.

<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
  N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),</span>
  io<span class="sym">:</span><span class="kwd">fwrite</span><span class="sym">(</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">~w ~w</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,[</span>N<span class="sym">,</span>N<span class="sym">]),</span>
  <span class="kwd">write_lines</span><span class="sym">(</span>N<span class="sym">),</span>
  <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">)</span>.

<span class="sym">-</span><span class="kwd">define</span><span class="sym">(</span>LIMIT<span class="sym">,</span> <span class="num">2.0</span><span class="sym">)</span>.
<span class="sym">-</span><span class="kwd">define</span><span class="sym">(</span>ITER<span class="sym">,</span> <span class="num">50</span><span class="sym">)</span>.
<span class="sym">-</span><span class="kwd">define</span><span class="sym">(</span><span class="kwd">F</span><span class="sym">(</span>X<span class="sym">),</span><span class="kwd">is_float</span><span class="sym">(</span>X<span class="sym">))</span>.
<span class="sym">-</span><span class="kwd">define</span><span class="sym">(</span>SR<span class="sym">, -</span><span class="num">1.5</span><span class="sym">)</span>.
<span class="sym">-</span><span class="kwd">define</span><span class="sym">(</span>SI<span class="sym">, -</span><span class="num">1.0</span><span class="sym">)</span>.

<span class="kwd">write_lines</span><span class="sym">(</span>N<span class="sym">) -&gt;</span>
  Step <span class="sym">=</span> <span class="num">2.0</span><span class="sym">/</span>N<span class="sym">,</span>
  StepList <span class="sym">=</span> lists<span class="sym">:</span><span class="kwd">seq</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>N<span class="sym">-</span><span class="num">1</span><span class="sym">),</span>
  RList <span class="sym">= [</span>?SR <span class="sym">+</span> R<span class="sym">*</span>Step <span class="sym">||</span> R <span class="sym">&lt;-</span> StepList<span class="sym">],</span>
  F <span class="sym">=</span> <span class="kwa">fun</span><span class="sym">(</span>I<span class="sym">) -&gt;</span> <span class="kwd">write_line</span><span class="sym">(</span>RList<span class="sym">,(</span>?SI<span class="sym">+</span>I<span class="sym">*</span>Step<span class="sym">))</span> <span class="kwa">end</span><span class="sym">,</span>
  <span class="kwd">write_lines</span><span class="sym">(</span>F<span class="sym">,</span><span class="num">0</span><span class="sym">,</span>N<span class="sym">)</span>.

<span class="kwd">write_lines</span><span class="sym">(</span>_F<span class="sym">,</span>N<span class="sym">,</span>N<span class="sym">) -&gt;</span>
  ok<span class="sym">;</span>
<span class="kwd">write_lines</span><span class="sym">(</span>F<span class="sym">,</span>I<span class="sym">,</span>N<span class="sym">) -&gt;</span>
  <span class="kwd">F</span><span class="sym">(</span>I<span class="sym">),</span><span class="kwd">write_lines</span><span class="sym">(</span>F<span class="sym">,</span>I<span class="sym">+</span><span class="num">1</span><span class="sym">,</span>N<span class="sym">)</span>.


<span class="kwd">write_line</span><span class="sym">(</span>RList<span class="sym">,</span>I<span class="sym">) -&gt;</span>
  <span class="kwd">write_bits</span><span class="sym">([</span><span class="kwd">mand</span><span class="sym">(</span>R<span class="sym">,</span>I<span class="sym">)||</span>R<span class="sym">&lt;-</span>RList<span class="sym">])</span>.

<span class="kwd">write_bits</span><span class="sym">([</span>X1<span class="sym">,</span>X2<span class="sym">,</span>X3<span class="sym">,</span>X4<span class="sym">,</span>X5<span class="sym">,</span>X6<span class="sym">,</span>X7<span class="sym">,</span>X8<span class="sym">|</span>Rest<span class="sym">]) -&gt;</span>
  io<span class="sym">:</span><span class="kwd">put_chars</span><span class="sym">([(</span>X1 bsl <span class="num">7</span><span class="sym">) + (</span>X2 bsl <span class="num">6</span><span class="sym">) + (</span>X3 bsl <span class="num">5</span><span class="sym">) + (</span>X4 bsl <span class="num">4</span><span class="sym">) +</span>
		<span class="sym">(</span>X5 bsl <span class="num">3</span><span class="sym">) + (</span>X6 bsl <span class="num">2</span><span class="sym">) + (</span>X7 bsl <span class="num">1</span><span class="sym">) + (</span>X8<span class="sym">)]),</span>
  <span class="kwd">write_bits</span><span class="sym">(</span>Rest<span class="sym">);</span>
<span class="kwd">write_bits</span><span class="sym">([]) -&gt;</span> ok<span class="sym">;</span>
<span class="kwd">write_bits</span><span class="sym">(</span>List<span class="sym">) -&gt;</span>
  <span class="kwd">write_bits</span><span class="sym">(</span>List<span class="sym">++</span>lists<span class="sym">:</span><span class="kwd">duplicate</span><span class="sym">(</span><span class="num">8</span><span class="sym">-</span><span class="kwb">length</span><span class="sym">(</span>List<span class="sym">),</span><span class="num">0</span><span class="sym">))</span>.

<span class="kwd">mand</span><span class="sym">(</span>X<span class="sym">,</span>Y<span class="sym">) -&gt;</span> <span class="kwd">mand</span><span class="sym">(</span>?ITER<span class="sym">,</span><span class="num">0.0</span><span class="sym">,</span><span class="num">0.0</span><span class="sym">,</span>X<span class="sym">,</span>Y<span class="sym">)</span>.

<span class="kwd">mand</span><span class="sym">(</span><span class="num">0</span><span class="sym">,</span>R<span class="sym">,</span>I<span class="sym">,</span>_CR<span class="sym">,</span>_CI<span class="sym">) -&gt;</span>
  R2 <span class="sym">=</span> R<span class="sym">*</span>R<span class="sym">,</span> I2 <span class="sym">=</span> I<span class="sym">*</span>I<span class="sym">,</span>
  LimVal <span class="sym">=</span> R2<span class="sym">+</span>I2<span class="sym">,</span>
  <span class="kwa">if</span> LimVal <span class="sym">&gt; (</span>?LIMIT<span class="sym">*</span>?LIMIT<span class="sym">) -&gt;</span> <span class="num">0</span><span class="sym">;</span>
     true <span class="sym">-&gt;</span> <span class="num">1</span>
  <span class="kwa">end</span><span class="sym">;</span>
<span class="kwd">mand</span><span class="sym">(</span>N<span class="sym">,</span>R<span class="sym">,</span>I<span class="sym">,</span>CR<span class="sym">,</span>CI<span class="sym">)</span> <span class="kwa">when</span> ?<span class="kwd">F</span><span class="sym">(</span>R<span class="sym">),</span>?<span class="kwd">F</span><span class="sym">(</span>I<span class="sym">),</span>?<span class="kwd">F</span><span class="sym">(</span>CR<span class="sym">),</span>?<span class="kwd">F</span><span class="sym">(</span>CI<span class="sym">) -&gt;</span>
  R2 <span class="sym">=</span> R<span class="sym">*</span>R<span class="sym">,</span> I2 <span class="sym">=</span> I<span class="sym">*</span>I<span class="sym">,</span>
  LimVal <span class="sym">=</span> R2<span class="sym">+</span>I2<span class="sym">,</span>
  NR <span class="sym">=</span> R2<span class="sym">-</span>I2<span class="sym">+</span>CR<span class="sym">,</span>
  NI <span class="sym">=</span> <span class="num">2</span><span class="sym">*</span>R<span class="sym">*</span>I<span class="sym">+</span>CI<span class="sym">,</span>
  <span class="kwa">if</span> LimVal <span class="sym">&gt; (</span>?LIMIT<span class="sym">*</span>?LIMIT<span class="sym">) -&gt;</span> <span class="num">0</span><span class="sym">;</span>
     true <span class="sym">-&gt;</span> <span class="kwd">mand</span><span class="sym">(</span>N<span class="sym">-</span><span class="num">1</span><span class="sym">,</span>NR<span class="sym">,</span>NI<span class="sym">,</span>CR<span class="sym">,</span>CI<span class="sym">)</span>
  <span class="kwa">end</span>.



