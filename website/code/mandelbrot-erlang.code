<span class="slc">%% The Computer Language Benchmarks Game</span>
<span class="slc">%% http://shootout.alioth.debian.org/</span>
<span class="slc">%% Contributed by Fredrik Svahn based on Per Gustafsson's mandelbrot program</span>

<span class="sym">-</span><span class="kwa">module</span><span class="sym">(</span>mandelbrot<span class="sym">).</span>
<span class="sym">-</span><span class="kwa">export</span><span class="sym">([</span>main<span class="sym">/</span><span class="num">1</span><span class="sym">]).</span>
<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span>LIM_SQR<span class="sym">,</span> <span class="num">4.0</span><span class="sym">).</span>
<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span>ITER<span class="sym">,</span> <span class="num">50</span><span class="sym">).</span>
<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span><span class="kwd">F</span><span class="sym">(</span>X<span class="sym">),</span><span class="kwd">is_float</span><span class="sym">(</span>X<span class="sym">)).</span>
<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span>SR<span class="sym">, -</span><span class="num">1.5</span><span class="sym">).</span>
<span class="sym">-</span><span class="kwa">define</span><span class="sym">(</span>SI<span class="sym">, -</span><span class="num">1</span><span class="sym">).</span>

<span class="kwd">main</span><span class="sym">([</span>Arg<span class="sym">]) -&gt;</span>
    N <span class="sym">=</span> <span class="kwb">list_to_integer</span><span class="sym">(</span>Arg<span class="sym">),</span>
    <span class="kwb">put</span><span class="sym">(</span>port<span class="sym">,</span> <span class="kwb">open_port</span><span class="sym">({</span>fd<span class="sym">,</span><span class="num">0</span><span class="sym">,</span><span class="num">1</span><span class="sym">}, [</span>out<span class="sym">])),</span>
    <span class="kwd">port_command</span><span class="sym">(</span><span class="kwb">get</span><span class="sym">(</span>port<span class="sym">),[</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> Arg<span class="sym">,</span> <span class="str">&quot; &quot;</span><span class="sym">,</span> Arg<span class="sym">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">]),</span>
    <span class="kwd">calc_bits</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">,</span> N<span class="sym">, []),</span>
    <span class="kwb">halt</span><span class="sym">(</span><span class="num">0</span><span class="sym">).</span>

<span class="slc">%Loop over all bits to calculate and print</span>
<span class="kwd">calc_bits</span><span class="sym">(</span>N<span class="sym">,</span> N<span class="sym">,</span> N<span class="sym">,</span> Bits<span class="sym">) -&gt;</span>
    <span class="kwd">print_bytes</span><span class="sym">(</span>Bits<span class="sym">),</span> done<span class="sym">;</span>
<span class="kwd">calc_bits</span><span class="sym">(</span>N<span class="sym">,</span> Y<span class="sym">,</span> N<span class="sym">,</span> Bits<span class="sym">) -&gt;</span>
    <span class="kwd">print_bytes</span><span class="sym">(</span>Bits<span class="sym">),</span> <span class="kwd">calc_bits</span><span class="sym">(</span><span class="num">1</span><span class="sym">,</span> Y <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> N<span class="sym">, []);</span>
<span class="kwd">calc_bits</span><span class="sym">(</span>X<span class="sym">,</span> Y<span class="sym">,</span> N<span class="sym">,</span> Bits<span class="sym">) -&gt;</span>
    <span class="kwd">calc_bits</span><span class="sym">(</span>X <span class="sym">+</span> <span class="num">1</span><span class="sym">,</span> Y<span class="sym">,</span> N<span class="sym">, [</span><span class="kwd">m</span><span class="sym">(?</span>ITER<span class="sym">, ?</span>SR<span class="sym">+(</span>N<span class="sym">-</span>X<span class="sym">-</span><span class="num">1</span><span class="sym">)*</span><span class="num">2</span><span class="sym">/</span>N<span class="sym">, ?</span>SI<span class="sym">+(</span>Y<span class="sym">-</span><span class="num">1</span><span class="sym">)*</span><span class="num">2</span><span class="sym">/</span>N<span class="sym">) |</span> Bits<span class="sym">]).</span>

<span class="slc">%Mandelbrot algorithm</span>
<span class="kwd">m</span><span class="sym">(</span>Iter<span class="sym">,</span> CR<span class="sym">,</span>CI<span class="sym">) -&gt;</span> <span class="kwd">m</span><span class="sym">(</span>Iter <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> CR<span class="sym">,</span> CI<span class="sym">,</span> CR<span class="sym">,</span> CI<span class="sym">).</span>

<span class="kwd">m</span><span class="sym">(</span>Iter<span class="sym">,</span> R<span class="sym">,</span> I<span class="sym">,</span> CR<span class="sym">,</span> CI<span class="sym">)</span> <span class="kwa">when</span> <span class="sym">?</span><span class="kwd">F</span><span class="sym">(</span>R<span class="sym">), ?</span><span class="kwd">F</span><span class="sym">(</span>I<span class="sym">), ?</span><span class="kwd">F</span><span class="sym">(</span>CR<span class="sym">), ?</span><span class="kwd">F</span><span class="sym">(</span>CI<span class="sym">),</span> Iter <span class="sym">&gt;</span> <span class="num">0</span> <span class="sym">-&gt;</span>
    <span class="kwa">case</span> <span class="sym">(</span>R<span class="sym">*</span>R<span class="sym">+</span>I<span class="sym">*</span>I<span class="sym">)</span> <span class="kwa">of</span>
	Lim <span class="kwa">when</span> Lim <span class="sym">=&lt; ?</span>LIM_SQR <span class="sym">-&gt;</span> <span class="kwd">m</span><span class="sym">(</span>Iter<span class="sym">-</span><span class="num">1</span><span class="sym">,</span> R<span class="sym">*</span>R<span class="sym">-</span>I<span class="sym">*</span>I<span class="sym">+</span>CR<span class="sym">,</span> <span class="num">2</span><span class="sym">*</span>R<span class="sym">*</span>I<span class="sym">+</span>CI<span class="sym">,</span> CR<span class="sym">,</span> CI<span class="sym">);</span>
	_ <span class="sym">-&gt;</span> <span class="num">0</span>
    <span class="kwa">end</span><span class="sym">;</span>
<span class="kwd">m</span><span class="sym">(</span>_<span class="sym">,</span>R<span class="sym">,</span>I<span class="sym">,</span>_<span class="sym">,</span>_<span class="sym">)</span> <span class="kwa">when</span> <span class="sym">?</span><span class="kwd">F</span><span class="sym">(</span>R<span class="sym">), ?</span><span class="kwd">F</span><span class="sym">(</span>I<span class="sym">) -&gt;</span>
    <span class="kwa">case</span> <span class="sym">(</span>R<span class="sym">*</span>R<span class="sym">+</span>I<span class="sym">*</span>I<span class="sym">)</span> <span class="kwa">of</span>
	Lim <span class="kwa">when</span> Lim <span class="sym">=&lt; ?</span>LIM_SQR <span class="sym">-&gt;</span> <span class="num">1</span><span class="sym">;</span>
	_ <span class="sym">-&gt;</span> <span class="num">0</span>
    <span class="kwa">end</span><span class="sym">.</span>

<span class="slc">%Print bytes one at a time.</span>
<span class="kwd">print_bytes</span><span class="sym">(</span>Bytes<span class="sym">)-&gt;</span>
    <span class="kwd">print_bytes</span><span class="sym">(</span><span class="kwb">get</span><span class="sym">(</span>port<span class="sym">),</span> Bytes<span class="sym">).</span>
<span class="kwd">print_bytes</span><span class="sym">(</span>_<span class="sym">, []) -&gt;</span> done<span class="sym">;</span>
<span class="kwd">print_bytes</span><span class="sym">(</span>Port<span class="sym">, [</span>B1<span class="sym">,</span> B2<span class="sym">,</span> B3<span class="sym">,</span> B4<span class="sym">,</span> B5<span class="sym">,</span> B6<span class="sym">,</span> B7<span class="sym">,</span> B8 <span class="sym">|</span> RemBytes<span class="sym">]) -&gt;</span>
    <span class="kwd">port_command</span><span class="sym">(</span>Port<span class="sym">, &lt;&lt;</span>B1<span class="sym">:</span><span class="num">1</span><span class="sym">,</span>B2<span class="sym">:</span><span class="num">1</span><span class="sym">,</span>B3<span class="sym">:</span><span class="num">1</span><span class="sym">,</span>B4<span class="sym">:</span><span class="num">1</span><span class="sym">,</span>B5<span class="sym">:</span><span class="num">1</span><span class="sym">,</span>B6<span class="sym">:</span><span class="num">1</span><span class="sym">,</span>B7<span class="sym">:</span><span class="num">1</span><span class="sym">,</span>B8<span class="sym">:</span><span class="num">1</span><span class="sym">&gt;&gt;),</span>
    <span class="kwd">print_bytes</span><span class="sym">(</span>Port<span class="sym">,</span> RemBytes<span class="sym">);</span>
<span class="kwd">print_bytes</span><span class="sym">(</span>Port<span class="sym">,</span> RemBytes<span class="sym">) -&gt;</span>
    <span class="kwd">print_bytes</span><span class="sym">(</span>Port<span class="sym">,</span> RemBytes<span class="sym">++[</span><span class="num">0</span><span class="sym">]).</span>
