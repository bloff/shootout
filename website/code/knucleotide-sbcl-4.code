<span class="slc">;;   The Computer Language Shootout</span>
<span class="slc">;;   http://shootout.alioth.debian.org/</span>
<span class="slc">;;   contributed by Wade Humeniuk</span>
<span class="slc">;;   Thanks to James McIlree and Juho Snellman</span>
<span class="slc">;;   for the previous Lisp SBCL submisson.</span>
<span class="slc">;;</span>
<span class="slc">;;   Thanks to Robert Brown for pointing</span>
<span class="slc">;;   out define-hash-table-test.</span>
<span class="slc">;;</span>
<span class="slc">;;   Use of macros was removed.</span>
<span class="slc">;;</span>

<span class="sym">(</span>defvar <span class="sym">*</span>gene<span class="sym">*</span> nil<span class="sym">)</span>
<span class="sym">(</span>defvar <span class="sym">*</span>k<span class="sym">*</span> <span class="num">0</span><span class="sym">)</span>

<span class="sym">(</span><span class="kwa">defun</span> gene<span class="sym">= (</span>gene1 gene2<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">))</span>
	   <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span><span class="kwa">or</span> simple<span class="sym">-</span>base<span class="sym">-</span>string fixnum<span class="sym">)</span> gene1 gene2<span class="sym">))</span>
  <span class="sym">(</span>when <span class="sym">(</span>stringp gene2<span class="sym">) (</span>rotatef gene1 gene2<span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((</span>gene <span class="sym">*</span>gene<span class="sym">*) (</span>k <span class="sym">*</span>k<span class="sym">*))</span>
    <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> simple<span class="sym">-</span>base<span class="sym">-</span>string gene<span class="sym">)</span>
	     <span class="sym">(</span><span class="kwa">type</span> fixnum k<span class="sym">))</span>
    <span class="sym">(</span>when <span class="sym">(</span>stringp gene2<span class="sym">) (</span>rotatef gene1 gene2<span class="sym">))</span>
    <span class="sym">(</span><span class="kwa">cond</span>
      <span class="sym">((</span><span class="kwa">and</span> <span class="sym">(</span>typep gene1 <span class="sym">'</span>fixnum<span class="sym">) (</span>typep gene2 <span class="sym">'</span>fixnum<span class="sym">))</span>
       <span class="sym">(</span>loop for i1 from gene1 below <span class="sym">(</span>the fixnum <span class="sym">(+</span> gene1 k<span class="sym">))</span>
	     for i2 from gene2 below <span class="sym">(</span>the fixnum <span class="sym">(+</span> gene2 k<span class="sym">))</span>
	     always <span class="sym">(</span>char<span class="sym">= (</span>schar gene i1<span class="sym">) (</span>schar gene i2<span class="sym">))))</span>
      <span class="sym">((</span>typep gene2 <span class="sym">'</span>fixnum<span class="sym">)</span>
       <span class="sym">(</span>loop for c of<span class="sym">-</span><span class="kwa">type</span> base<span class="sym">-</span>char across gene1
	     for i from gene2 below <span class="sym">(</span>the fixnum <span class="sym">(+</span> gene2 k<span class="sym">))</span>
	     always <span class="sym">(</span>char<span class="sym">=</span> c <span class="sym">(</span>schar gene i<span class="sym">))))</span>
      <span class="sym">(</span>t
       <span class="sym">(</span>error <span class="str">&quot;Invalid Gene Comparison&quot;</span><span class="sym">)))))</span>

<span class="sym">(</span><span class="kwa">defun</span> sxhash<span class="sym">-</span>gene <span class="sym">(</span>gene<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">))</span>
	   <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span><span class="kwa">or</span> simple<span class="sym">-</span>base<span class="sym">-</span>string fixnum<span class="sym">)</span> gene<span class="sym">)</span>
	   <span class="sym">(</span><span class="kwa">type</span> simple<span class="sym">-</span>base<span class="sym">-</span>string <span class="sym">*</span>gene<span class="sym">*)</span>
	   <span class="sym">(</span><span class="kwa">type</span> fixnum <span class="sym">*</span>k<span class="sym">*))</span>
  <span class="sym">(</span>macrolet <span class="sym">((</span><span class="kwa">set</span><span class="sym">-</span>result <span class="sym">(</span>form<span class="sym">)</span>
               <span class="sym">`(</span>setf result <span class="sym">(</span>ldb <span class="sym">(</span>byte <span class="num">32 0</span><span class="sym">) ,</span>form<span class="sym">))))</span>
    <span class="sym">(</span>let <span class="sym">((</span>result <span class="num">0</span><span class="sym">))</span>
      <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> <span class="sym">(</span>unsigned<span class="sym">-</span>byte <span class="num">32</span><span class="sym">)</span> result<span class="sym">))</span>
      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span>stringp gene<span class="sym">)</span>
	  <span class="sym">(</span>loop for c of<span class="sym">-</span><span class="kwa">type</span> base<span class="sym">-</span>char across gene do
		<span class="sym">(</span><span class="kwa">set</span><span class="sym">-</span>result <span class="sym">(+</span> result <span class="sym">(</span>char<span class="sym">-</span>code c<span class="sym">)))</span>
		<span class="sym">(</span><span class="kwa">set</span><span class="sym">-</span>result <span class="sym">(+</span> result <span class="sym">(</span>ash result <span class="num">10</span><span class="sym">)))</span>
		<span class="sym">(</span><span class="kwa">set</span><span class="sym">-</span>result <span class="sym">(</span>logxor result <span class="sym">(</span>ash result <span class="sym">-</span><span class="num">6</span><span class="sym">))))</span>
	  <span class="sym">(</span>loop for i from gene below <span class="sym">(</span>the fixnum <span class="sym">(+</span> gene <span class="sym">*</span>k<span class="sym">*))</span> do
		<span class="sym">(</span><span class="kwa">set</span><span class="sym">-</span>result <span class="sym">(+</span> result <span class="sym">(</span>char<span class="sym">-</span>code <span class="sym">(</span>aref <span class="sym">*</span>gene<span class="sym">*</span> i<span class="sym">))))</span>
		<span class="sym">(</span><span class="kwa">set</span><span class="sym">-</span>result <span class="sym">(+</span> result <span class="sym">(</span>ash result <span class="num">10</span><span class="sym">)))</span>
		<span class="sym">(</span><span class="kwa">set</span><span class="sym">-</span>result <span class="sym">(</span>logxor result <span class="sym">(</span>ash result <span class="sym">-</span><span class="num">6</span><span class="sym">)))))</span>
      <span class="sym">(</span><span class="kwa">set</span><span class="sym">-</span>result <span class="sym">(+</span> result <span class="sym">(</span>ash result <span class="num">3</span><span class="sym">)))</span>
      <span class="sym">(</span><span class="kwa">set</span><span class="sym">-</span>result <span class="sym">(</span>logxor result <span class="sym">(</span>ash result <span class="sym">-</span><span class="num">11</span><span class="sym">)))</span>
      <span class="sym">(</span><span class="kwa">set</span><span class="sym">-</span>result <span class="sym">(</span>logxor result <span class="sym">(</span>ash result <span class="num">15</span><span class="sym">)))</span>
      <span class="sym">(</span><span class="kwa">logand</span> result most<span class="sym">-</span>positive<span class="sym">-</span>fixnum<span class="sym">))))</span>

<span class="sym">(</span>sb<span class="sym">-</span>int<span class="sym">:</span>define<span class="sym">-</span>hash<span class="sym">-</span>table<span class="sym">-</span>test <span class="sym">'</span>gene #<span class="sym">'</span>gene<span class="sym">=</span> #<span class="sym">'</span>sxhash<span class="sym">-</span>gene<span class="sym">)</span>

<span class="sym">(</span><span class="kwa">defun</span> slice<span class="sym">-</span><span class="kwa">and</span><span class="sym">-</span>dice <span class="sym">(</span>gene k<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">))</span>
	   <span class="sym">(</span><span class="kwa">type</span> simple<span class="sym">-</span>base<span class="sym">-</span>string gene<span class="sym">)</span>
	   <span class="sym">(</span><span class="kwa">type</span> fixnum k<span class="sym">))</span>
  <span class="sym">(</span>let <span class="sym">((*</span>gene<span class="sym">*</span> gene<span class="sym">)</span>
	<span class="sym">(*</span>k<span class="sym">*</span> k<span class="sym">)</span>
	<span class="sym">(</span>hash<span class="sym">-</span>table <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> k <span class="num">1</span><span class="sym">)</span>
			<span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="sym">:</span>test <span class="sym">'</span>eql<span class="sym">)</span>
			<span class="sym">(</span>make<span class="sym">-</span>hash<span class="sym">-</span>table <span class="sym">:</span>test <span class="sym">'</span>gene<span class="sym">))))</span>
    <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> k <span class="num">1</span><span class="sym">)</span>
	<span class="sym">(</span>loop for i from <span class="num">0</span> to <span class="sym">(</span>the fixnum <span class="sym">(- (</span><span class="kwa">length</span> gene<span class="sym">)</span> k<span class="sym">))</span> do
	      <span class="sym">(</span>incf <span class="sym">(</span>the fixnum <span class="sym">(</span>gethash <span class="sym">(</span>schar gene i<span class="sym">)</span> hash<span class="sym">-</span>table <span class="num">0</span><span class="sym">))))</span>
	<span class="sym">(</span>loop for i from <span class="num">0</span> to <span class="sym">(</span>the fixnum <span class="sym">(- (</span><span class="kwa">length</span> gene<span class="sym">)</span> k<span class="sym">))</span> do
	      <span class="sym">(</span>incf <span class="sym">(</span>the fixnum <span class="sym">(</span>gethash i hash<span class="sym">-</span>table <span class="num">0</span><span class="sym">)))))</span>
    hash<span class="sym">-</span>table<span class="sym">))</span>

<span class="sym">(</span><span class="kwa">defun</span> discard<span class="sym">-</span>data<span class="sym">-</span>header <span class="sym">(</span>stream<span class="sym">)</span>
  <span class="sym">(</span>loop for <span class="kwa">line</span> <span class="sym">= (</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span> stream nil nil<span class="sym">)</span>
	<span class="kwa">while</span> <span class="sym">(</span><span class="kwa">and line</span> <span class="sym">(</span>string<span class="sym">/=</span> <span class="str">&quot;&gt;THREE&quot;</span> <span class="kwa">line</span> <span class="sym">:</span>end2 <span class="num">6</span><span class="sym">))))</span>

<span class="sym">(</span><span class="kwa">defun read</span><span class="sym">-</span>data <span class="sym">(</span>stream<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">3</span><span class="sym">) (</span>safety <span class="num">0</span><span class="sym">) (</span>debug <span class="num">0</span><span class="sym">)))</span>
  <span class="sym">(</span>let <span class="sym">((</span>data <span class="sym">(</span>make<span class="sym">-</span>array <span class="num">0</span> <span class="sym">:</span>element<span class="sym">-</span><span class="kwa">type</span> <span class="sym">'</span>base<span class="sym">-</span>char <span class="sym">:</span>adjustable t <span class="sym">:</span>fill<span class="sym">-</span>pointer <span class="num">0</span><span class="sym">)))</span>
    <span class="sym">(</span>do <span class="sym">((</span><span class="kwa">line</span> <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span> stream nil <span class="sym">'</span>eof<span class="sym">) (</span><span class="kwa">read</span><span class="sym">-</span><span class="kwa">line</span> stream nil <span class="sym">'</span>eof<span class="sym">)))</span>
        <span class="sym">((</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">eq line</span> <span class="sym">'</span>eof<span class="sym">) (</span>char<span class="sym">= (</span>schar <span class="kwa">line</span> <span class="num">0</span><span class="sym">)</span> #\&gt;<span class="sym">)))</span>
      <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(</span><span class="kwa">not</span> <span class="sym">(</span>char<span class="sym">= (</span>schar <span class="kwa">line</span> <span class="num">0</span><span class="sym">)</span> #\;<span class="sym">))</span>
          <span class="sym">(</span>dotimes <span class="sym">(</span>char<span class="sym">-</span>index <span class="sym">(</span><span class="kwa">length line</span><span class="sym">))</span>
            <span class="sym">(</span>vector<span class="sym">-</span>push<span class="sym">-</span>extend <span class="sym">(</span>char<span class="sym">-</span>upcase <span class="sym">(</span>the base<span class="sym">-</span>char <span class="sym">(</span>schar <span class="kwa">line</span> char<span class="sym">-</span>index<span class="sym">)))</span> data<span class="sym">))))</span>
    <span class="sym">(</span>coerce data <span class="sym">'</span>simple<span class="sym">-</span>base<span class="sym">-</span>string<span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun print</span><span class="sym">-</span>precentages <span class="sym">(</span>gene k<span class="sym">)</span>
  <span class="sym">(</span>declare <span class="sym">(</span><span class="kwa">type</span> simple<span class="sym">-</span>base<span class="sym">-</span>string gene<span class="sym">)</span>
	   <span class="sym">(</span><span class="kwa">type</span> fixnum k<span class="sym">))</span>
  <span class="sym">(</span>let<span class="sym">* ((</span>ht <span class="sym">(</span>slice<span class="sym">-</span><span class="kwa">and</span><span class="sym">-</span>dice gene k<span class="sym">))</span>
	 <span class="sym">(</span>sorted<span class="sym">-</span>frequencies<span class="sym">)</span>
	 <span class="sym">(</span>sum <span class="num">0</span><span class="sym">))</span>
    <span class="sym">(</span>maphash <span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>key v<span class="sym">)</span>
	       <span class="sym">(</span>incf sum v<span class="sym">)</span>
	       <span class="sym">(</span>push <span class="sym">(</span><span class="kwa">cons</span> <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(=</span> k <span class="num">1</span><span class="sym">)</span> key
			       <span class="sym">(</span>subseq gene key <span class="sym">(+</span> key k<span class="sym">)))</span>
			   v<span class="sym">)</span>
		     sorted<span class="sym">-</span>frequencies<span class="sym">))</span>
	     ht<span class="sym">)</span>
    <span class="sym">(</span>setf sorted<span class="sym">-</span>frequencies
	  <span class="sym">(</span>sort sorted<span class="sym">-</span>frequencies
		<span class="sym">(</span><span class="kwa">lambda</span> <span class="sym">(</span>v1 v2<span class="sym">)</span>
		  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&gt; (</span><span class="kwa">cdr</span> v1<span class="sym">) (</span><span class="kwa">cdr</span> v2<span class="sym">))</span> t<span class="sym">)</span>
			<span class="sym">((&lt; (</span><span class="kwa">cdr</span> v1<span class="sym">) (</span><span class="kwa">cdr</span> v2<span class="sym">))</span> nil<span class="sym">)</span>
			<span class="sym">(</span>t <span class="sym">(</span>string<span class="sym">&lt; (</span><span class="kwa">car</span> v1<span class="sym">) (</span><span class="kwa">car</span> v2<span class="sym">)))))))</span>
    <span class="sym">(</span>dolist <span class="sym">(</span>entry sorted<span class="sym">-</span>frequencies<span class="sym">)</span>
      <span class="sym">(</span>format t <span class="str">&quot;~A ~,3F~%&quot;</span>
	      <span class="sym">(</span><span class="kwa">car</span> entry<span class="sym">)</span>
	      <span class="sym">(* (/ (</span><span class="kwa">cdr</span> entry<span class="sym">) (</span><span class="kwa">float</span> sum<span class="sym">))</span> <span class="num">100.0</span><span class="sym">)))</span>
    <span class="sym">(</span><span class="kwa">terpri</span><span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun print</span><span class="sym">-</span>occurence <span class="sym">(</span>slice gene<span class="sym">)</span>
  <span class="sym">(</span>let <span class="sym">((</span>ht <span class="sym">(</span>slice<span class="sym">-</span><span class="kwa">and</span><span class="sym">-</span>dice gene <span class="sym">(</span><span class="kwa">length</span> slice<span class="sym">))))</span>
    <span class="sym">(</span>format t <span class="str">&quot;~A~C~A~%&quot;</span> <span class="sym">(</span>gethash slice ht <span class="num">0</span><span class="sym">)</span> #\Tab slice<span class="sym">)))</span>

<span class="sym">(</span><span class="kwa">defun</span> slice <span class="sym">(</span>string<span class="sym">) (</span>coerce string <span class="sym">'</span>simple<span class="sym">-</span>base<span class="sym">-</span>string<span class="sym">))</span>

<span class="sym">(</span><span class="kwa">defun</span> main <span class="sym">()</span>
  <span class="sym">(</span>declare <span class="sym">(</span>optimize <span class="sym">(</span>speed <span class="num">0</span><span class="sym">) (</span>safety <span class="num">1</span><span class="sym">)))</span>
  <span class="sym">(</span>discard<span class="sym">-</span>data<span class="sym">-</span>header <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*)</span>
  <span class="sym">(</span>let <span class="sym">((</span>gene <span class="sym">(</span><span class="kwa">read</span><span class="sym">-</span>data <span class="sym">*</span>standard<span class="sym">-</span>input<span class="sym">*)))</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>precentages gene <span class="num">1</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>precentages gene <span class="num">2</span><span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>occurence <span class="sym">(</span>slice <span class="str">&quot;GGT&quot;</span><span class="sym">)</span> gene<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>occurence <span class="sym">(</span>slice <span class="str">&quot;GGTA&quot;</span><span class="sym">)</span> gene<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>occurence <span class="sym">(</span>slice <span class="str">&quot;GGTATT&quot;</span><span class="sym">)</span> gene<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>occurence <span class="sym">(</span>slice <span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">)</span> gene<span class="sym">)</span>
    <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span>occurence <span class="sym">(</span>slice <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">)</span> gene<span class="sym">)))</span>


<span class="sym">(</span><span class="kwa">defun</span> test <span class="sym">()</span>
  <span class="sym">(</span>with<span class="sym">-</span><span class="kwa">open</span><span class="sym">-</span>file <span class="sym">(*</span>standard<span class="sym">-</span>input<span class="sym">*</span> <span class="str">&quot;/home/wade/lisp/knucleotide/knucleotide-input.txt&quot;</span>
				    <span class="sym">:</span>direction <span class="sym">:</span>input<span class="sym">)</span>
    <span class="sym">(</span>with<span class="sym">-</span><span class="kwa">open</span><span class="sym">-</span>file <span class="sym">(*</span>standard<span class="sym">-</span>output<span class="sym">*</span> <span class="str">&quot;/home/wade/lisp/knucleotide/output.txt&quot;</span>
				       <span class="sym">:</span>direction <span class="sym">:</span>output
				       <span class="sym">:</span><span class="kwa">if</span><span class="sym">-</span>does<span class="sym">-</span><span class="kwa">not</span><span class="sym">-</span>exist <span class="sym">:</span>create
				       <span class="sym">:</span><span class="kwa">if</span><span class="sym">-</span>exists <span class="sym">:</span>supersede<span class="sym">)</span>
      <span class="sym">(</span>main<span class="sym">))))</span>
