<span class="com">/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org

   contributed by Isaac Gouy
*/</span>

<span class="kwa">using</span> System<span class="sym">;

</span><span class="kwc">class</span> Sieve
<span class="sym">{
</span>   <span class="kwc">public</span> <span class="kwb">static void</span> Main<span class="sym">(</span>String<span class="sym">[]</span> args<span class="sym">)
   {
</span>      <span class="kwb">const int</span> start <span class="sym">=</span> <span class="num">2</span><span class="sym">;
</span>      <span class="kwb">const int</span> stop <span class="sym">=</span> <span class="num">8192</span><span class="sym">;
</span>      <span class="kwb">const</span> byte isPrime <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>      <span class="kwb">const</span> byte isNotPrime <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>      byte<span class="sym">[]</span> number <span class="sym">=</span> <span class="kwa">new</span> byte<span class="sym">[</span>stop<span class="sym">+</span><span class="num">1</span><span class="sym">];
</span>      <span class="kwb">int</span> count <span class="sym">=</span> <span class="num">0</span><span class="sym">;

</span>      <span class="kwb">int</span> n <span class="sym">=</span> <span class="num">1</span><span class="sym">;
</span>      <span class="kwa">if</span> <span class="sym">(</span>args<span class="sym">.</span>Length <span class="sym">&gt;</span> <span class="num">0</span><span class="sym">)</span> n <span class="sym">=</span> Int32<span class="sym">.</span>Parse<span class="sym">(</span>args<span class="sym">[</span><span class="num">0</span><span class="sym">]);
</span>      <span class="kwa">while</span><span class="sym">(</span>n<span class="sym">-- &gt;</span> <span class="num">0</span><span class="sym">) {
</span>         count <span class="sym">=</span> <span class="num">0</span><span class="sym">;
</span>         Array<span class="sym">.</span>Clear<span class="sym">(</span>number<span class="sym">,</span> <span class="num">0</span><span class="sym">,</span> stop<span class="sym">+</span><span class="num">1</span><span class="sym">);
</span>         <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> i<span class="sym">=</span>start<span class="sym">;</span> i <span class="sym">&lt;=</span> stop<span class="sym">;</span> i<span class="sym">++)
</span>            <span class="kwa">if</span><span class="sym">(</span>number<span class="sym">[</span>i<span class="sym">] ==</span> isPrime<span class="sym">) {
</span>               <span class="slc">// remove all multiples of prime: i
</span>               <span class="kwa">for</span><span class="sym">(</span><span class="kwb">int</span> k<span class="sym">=</span>i<span class="sym">+</span>i<span class="sym">;</span> k <span class="sym">&lt;=</span> stop<span class="sym">;</span> k<span class="sym">+=</span>i<span class="sym">)</span> number<span class="sym">[</span>k<span class="sym">] =</span> isNotPrime<span class="sym">;
</span>               count<span class="sym">++;
            }
      }
</span>      Console<span class="sym">.</span>WriteLine<span class="sym">(</span><span class="str">&quot;Count: {0}&quot;</span><span class="sym">,</span> count<span class="sym">);
   }
}</span>
