<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>printInfo<span class="sym">)</span> Application<span class="sym">(</span>exit<span class="sym">)</span> Open<span class="sym">(</span>text file<span class="sym">)</span>

<span class="kwb">define</span>
  <span class="kwa">class</span> TextFile_
    <span class="kwb">from</span> Open.file Open.text
  <span class="kwb">end</span>

  <span class="kwb">proc</span> <span class="sym">{</span>ReverseComplement FILE Delimiter OutputLength<span class="sym">}</span>
    <span class="sym">{</span>ReadSegments FILE Delimiter OutputLength <span class="kwa">nil</span><span class="sym">}</span>
  <span class="kwb">end</span>

  <span class="kwb">proc</span> <span class="sym">{</span>ReadSegments FILE Delimiter OutputLength Segment<span class="sym">}</span>
    LINE <span class="sym">= {</span>FILE getS<span class="sym">(</span>$<span class="sym">)}</span>
  <span class="kwb">in</span>
    <span class="kwb">case</span> LINE <span class="kwb">of</span> false <span class="kwb">then</span>
      <span class="sym">{</span>DumpSegment Segment OutputLength<span class="sym">}</span>
    <span class="kwb">elseof</span> <span class="sym">!</span>Delimiter<span class="sym">|</span>_ <span class="kwb">then</span>
      <span class="sym">{</span>DumpSegment Segment OutputLength<span class="sym">}</span>
      <span class="sym">{</span>PrintHeader LINE<span class="sym">}</span>
      <span class="sym">{</span>ReadSegments FILE Delimiter OutputLength <span class="kwa">nil</span><span class="sym">}</span>
    <span class="kwb">else</span>
      <span class="sym">{</span>ReadSegments FILE Delimiter OutputLength <span class="sym">{</span>AddToSegment LINE Segment<span class="sym">}}</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

  <span class="kwa">local</span>
    P <span class="sym">=</span> <span class="kwb">proc</span> <span class="sym">{</span>$ X<span class="sym">} {</span>System.printInfo X # <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">}</span> <span class="kwb">end</span>
  <span class="kwb">in</span>
    <span class="kwb">proc</span> <span class="sym">{</span>DumpSegment Segment OutputLength<span class="sym">}</span>
      <span class="kwb">case</span> Segment <span class="kwb">of</span> <span class="kwa">nil</span> <span class="kwb">then</span>
        skip
      <span class="kwb">else</span>
        <span class="sym">{</span>SplitAndApply <span class="sym">{</span>Map <span class="sym">{</span>Reverse Segment<span class="sym">}</span> Complement<span class="sym">}</span> OutputLength P<span class="sym">}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

  <span class="kwb">proc</span> <span class="sym">{</span>PrintHeader Header<span class="sym">}</span>
    <span class="sym">{</span>System.printInfo Header # <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">}</span>
  <span class="kwb">end</span>

  <span class="kwb">fun</span> <span class="sym">{</span>AddToSegment Item Segment<span class="sym">}</span>
    <span class="sym">{</span>Append Segment Item<span class="sym">}</span>
  <span class="kwb">end</span>

  <span class="kwa">local</span>
    CodeTbl <span class="sym">= {</span>ByteString.make <span class="sym">[</span><span class="num">84 86 71 72 0 0 67 68 0 0 77 0 75 78 0 0 0 89 83 65 65 66 87 0 82 0</span><span class="sym">]}</span>
  <span class="kwb">in</span>
    <span class="kwb">fun</span> <span class="sym">{</span>Complement Code<span class="sym">}</span>
      <span class="sym">{</span>ByteString.get CodeTbl <span class="sym">({</span>Char.toUpper Code<span class="sym">} -</span> <span class="num">65</span><span class="sym">)}</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

  <span class="kwb">proc</span> <span class="sym">{</span>SplitAndApply L N P<span class="sym">}</span>
    X Xs
  <span class="kwb">in</span>
    <span class="kwb">case</span> L <span class="kwb">of</span> <span class="kwa">nil</span> <span class="kwb">then</span>
      skip
    <span class="kwb">else</span>
      <span class="sym">{</span>List.takeDrop L N X Xs<span class="sym">} {</span>P X<span class="sym">} {</span>SplitAndApply Xs N P<span class="sym">}</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>
<span class="kwb">in</span>
  <span class="sym">{</span>ReverseComplement <span class="sym">{</span>New TextFile_ init<span class="sym">(</span>name<span class="sym">:</span>stdin<span class="sym">)} &amp;&gt;</span> <span class="num">60</span><span class="sym">}</span>
  <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>

