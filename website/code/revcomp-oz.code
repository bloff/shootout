<span class="slc">% ----------------------------------------------------------------------</span>
<span class="slc">% The Great Computer Language Shootout</span>
<span class="slc">% http://shootout.alioth.debian.org/</span>
<span class="slc">%</span>
<span class="slc">% Attempt at a faster implementation by:</span>
<span class="slc">%</span>
<span class="slc">% * Avoiding, where possible, the use of list append operations [lists</span>
<span class="slc">%   are stored in a stack rather than being appended]</span>
<span class="slc">% * Restricting the size of lists which are created, thus ensuring</span>
<span class="slc">%   list operations like 'map' and 'reverse' don't 'choke' :)</span>
<span class="slc">%</span>
<span class="slc">% Use made of code from 'Concepts, Techniques and Models of Computer</span>
<span class="slc">% Programming' [CTM] by P. van Roy, S. Haridi.</span>
<span class="slc">%</span>
<span class="slc">% Contributed by Anthony Borla</span>
<span class="slc">% ----------------------------------------------------------------------</span>

<span class="kwa">functor</span>

<span class="kwa">import</span>
  System<span class="sym">(</span>showInfo<span class="sym">)</span> Application<span class="sym">(</span>exit<span class="sym">)</span> Open<span class="sym">(</span>text file<span class="sym">)</span>

<span class="kwb">define</span>
  <span class="kwa">class</span> TextFile_
    <span class="kwb">from</span> Open.file Open.text
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">proc</span> <span class="sym">{</span>ReverseComplement FILE Delimiter OutputLength<span class="sym">}</span>

    <span class="kwb">proc</span> <span class="sym">{</span>ReadSegments Segment<span class="sym">}</span> LINE <span class="sym">= {</span>FILE getS<span class="sym">(</span>$<span class="sym">)}</span> <span class="kwb">in</span>
      <span class="kwb">case</span> LINE <span class="kwb">of</span> false <span class="kwb">then</span>
        <span class="sym">{</span>DumpSegment Segment OutputLength<span class="sym">}</span>
      <span class="kwb">elseof</span> <span class="sym">!</span>Delimiter<span class="sym">|</span>_ <span class="kwb">then</span>
        <span class="sym">{</span>DumpSegment Segment OutputLength<span class="sym">}</span>
        <span class="sym">{</span>PrintHeader LINE<span class="sym">}</span>
        <span class="sym">{</span>ReadSegments Segment<span class="sym">}</span>
      <span class="kwb">else</span>
        <span class="sym">{</span>ReadSegments <span class="sym">{</span>AddToSegment LINE Segment<span class="sym">}}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>
  <span class="kwb">in</span>
    <span class="sym">{</span>ReadSegments <span class="sym">{</span>NewStack<span class="sym">}}</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">proc</span> <span class="sym">{</span>DumpSegment Segment OutputLength<span class="sym">}</span>

    <span class="kwb">proc</span> <span class="sym">{</span>DumpSegment_<span class="sym">}</span>
      <span class="kwb">if</span> <span class="sym">{</span>Segment.isEmpty<span class="sym">}</span> <span class="kwb">then</span>
        <span class="kwb">if</span> &#64;Spill \= <span class="kwa">nil</span> <span class="kwb">then</span> <span class="sym">{</span>System.showInfo &#64;Spill<span class="sym">}</span> Spill <span class="sym">:=</span> <span class="kwa">nil</span> <span class="kwb">end</span>
      <span class="kwb">else</span> OutputLine <span class="kwb">in</span>
        Spill <span class="sym">:= {</span>List.takeDrop <span class="sym">{</span>List.append &#64;Spill <span class="sym">{</span>Segment.pop<span class="sym">}}</span> OutputLength OutputLine<span class="sym">}</span>
        <span class="sym">{</span>System.showInfo OutputLine<span class="sym">}</span>
        <span class="sym">{</span>DumpSegment_<span class="sym">}</span>
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    Spill <span class="sym">= {</span>NewCell <span class="kwa">nil</span><span class="sym">}</span>
  <span class="kwb">in</span>
    <span class="kwb">if</span> <span class="sym">{</span>Not <span class="sym">{</span>Segment.isEmpty<span class="sym">}}</span> <span class="kwb">then</span> Spill <span class="sym">:= {</span>List.append &#64;Spill <span class="sym">{</span>Segment.pop<span class="sym">}}</span> <span class="kwb">end</span>
    <span class="sym">{</span>DumpSegment_<span class="sym">}</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">proc</span> <span class="sym">{</span>PrintHeader Header<span class="sym">}</span>
    <span class="sym">{</span>System.showInfo Header<span class="sym">}</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwb">fun</span> <span class="sym">{</span>AddToSegment Sequence Segment<span class="sym">}</span>
    <span class="sym">{</span>Segment.push <span class="sym">{</span>Map <span class="sym">{</span>Reverse Sequence<span class="sym">}</span> Complement<span class="sym">}}</span>
    Segment
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="kwa">local</span>
    CodeTbl <span class="sym">= {</span>ByteString.make <span class="sym">[</span><span class="num">84 86 71 72 0 0 67 68 0 0 77 0 75 78 0 0 0 89 83 65 65 66 87 0 82 0</span><span class="sym">]}</span>
  <span class="kwb">in</span>
    <span class="kwb">fun</span> <span class="sym">{</span>Complement Code<span class="sym">}</span>
      <span class="sym">{</span>ByteString.get CodeTbl <span class="sym">({</span>Char.toUpper Code<span class="sym">} -</span> <span class="num">65</span><span class="sym">)}</span>
    <span class="kwb">end</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  <span class="slc">%% General Purpose Stateful Stack [CTM implementation]</span>
  <span class="kwb">fun</span> <span class="sym">{</span>NewStack<span class="sym">}</span>
    C <span class="sym">= {</span>NewCell <span class="kwa">nil</span><span class="sym">}</span>

    <span class="kwb">proc</span> <span class="sym">{</span>Push X<span class="sym">}</span> S <span class="kwb">in</span> S <span class="sym">=</span> &#64;C C <span class="sym">:=</span> X<span class="sym">|</span>S <span class="kwb">end</span>

    <span class="kwb">fun</span> <span class="sym">{</span>Pop<span class="sym">}</span> S1 <span class="kwb">in</span>
      S1 <span class="sym">=</span> &#64;C
      <span class="kwb">case</span> S1 <span class="kwb">of</span> X<span class="sym">|</span>S <span class="kwb">then</span>
        C <span class="sym">:=</span> S
        X
      <span class="kwb">end</span>
    <span class="kwb">end</span>

    <span class="kwb">fun</span> <span class="sym">{</span>IsEmpty<span class="sym">}</span> S <span class="kwb">in</span> S <span class="sym">=</span> &#64;C S <span class="sym">==</span> <span class="kwa">nil</span> <span class="kwb">end</span>
  <span class="kwb">in</span>
    ops<span class="sym">(</span>push<span class="sym">:</span>Push pop<span class="sym">:</span>Pop isEmpty<span class="sym">:</span>IsEmpty<span class="sym">)</span>
  <span class="kwb">end</span>

<span class="slc">% ------------- %</span>

  Delimiter <span class="sym">= &amp;&gt;</span> LineLength <span class="sym">=</span> <span class="num">60</span>

<span class="kwb">in</span>
  <span class="sym">{</span>ReverseComplement <span class="sym">{</span>New TextFile_ init<span class="sym">(</span>name<span class="sym">:</span>stdin<span class="sym">)}</span> Delimiter LineLength<span class="sym">}</span>
  <span class="sym">{</span>Application.exit <span class="num">0</span><span class="sym">}</span>
<span class="kwb">end</span>

