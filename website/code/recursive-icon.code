<span class="slc"># ----------------------------------------------------------------------</span>
<span class="slc"># The Great Computer Language Shootout</span>
<span class="slc"># http://shootout.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># Code based on / inspired by existing, relevant Shootout submissions</span>
<span class="slc">#</span>
<span class="slc"># Contributed by Anthony Borla</span>
<span class="slc"># ----------------------------------------------------------------------</span>

<span class="kwa">link</span> printf

<span class="kwa">procedure</span> main<span class="sym">(</span>argv<span class="sym">)</span>
  <span class="kwa">local</span> N <span class="sym">;</span> N <span class="sym">:= +(</span>argv<span class="sym">[</span><span class="num">1</span><span class="sym">])</span>

  printf<span class="sym">(</span><span class="str">&quot;Ack(3,%d): %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> N<span class="sym">,</span> ack<span class="sym">(</span><span class="num">3</span><span class="sym">,</span> N<span class="sym">))</span>
  printf<span class="sym">(</span><span class="str">&quot;Fib(%.1r): %.1r</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> <span class="num">27.0</span> <span class="sym">+</span> N<span class="sym">,</span> fib<span class="sym">(</span><span class="num">27.0</span> <span class="sym">+</span> N<span class="sym">))</span>

  N <span class="sym">-:=</span> <span class="num">1</span>
  printf<span class="sym">(</span><span class="str">&quot;Tak(%d,%d,%d): %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> N <span class="sym">*</span> <span class="num">3</span><span class="sym">,</span> N <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> N<span class="sym">,</span> tak<span class="sym">(</span>N <span class="sym">*</span> <span class="num">3</span><span class="sym">,</span> N <span class="sym">*</span> <span class="num">2</span><span class="sym">,</span> N<span class="sym">))</span>

  printf<span class="sym">(</span><span class="str">&quot;Fib(3): %d</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> fib<span class="sym">(</span><span class="num">3</span><span class="sym">))</span>
  printf<span class="sym">(</span><span class="str">&quot;Tak(3.0,2.0,1.0): %.1r</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> tak<span class="sym">(</span><span class="num">3.0</span><span class="sym">,</span> <span class="num">2.0</span><span class="sym">,</span> <span class="num">1.0</span><span class="sym">))</span>
<span class="kwa">end</span>

<span class="slc"># ---------------------------------</span>

<span class="kwa">procedure</span> ack<span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">)</span>
  <span class="kwa">if</span> x <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then return</span> y <span class="sym">+</span> <span class="num">1</span>
  <span class="kwa">if</span> y <span class="sym">==</span> <span class="num">0</span> <span class="kwa">then return</span> ack<span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> <span class="num">1</span><span class="sym">)</span>
  <span class="kwa">return</span> ack<span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> ack<span class="sym">(</span>x<span class="sym">,</span> y <span class="sym">-</span> <span class="num">1</span><span class="sym">))</span>
<span class="kwa">end</span>

<span class="slc"># ---------------</span>

<span class="kwa">procedure</span> fib<span class="sym">(</span>n<span class="sym">)</span>
  <span class="kwa">if</span> n <span class="sym">&lt;</span> <span class="num">2</span> <span class="kwa">then return</span> <span class="num">1</span>
  <span class="kwa">return</span> fib<span class="sym">(</span>n <span class="sym">-</span> <span class="num">2</span><span class="sym">) +</span> fib<span class="sym">(</span>n <span class="sym">-</span> <span class="num">1</span><span class="sym">)</span>
<span class="kwa">end</span>

<span class="slc"># ---------------</span>

<span class="kwa">procedure</span> tak<span class="sym">(</span>x<span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">)</span>
  <span class="kwa">if</span> y <span class="sym">&lt;</span> x <span class="kwa">then return</span> tak<span class="sym">(</span>tak<span class="sym">(</span>x <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> y<span class="sym">,</span> z<span class="sym">),</span> tak<span class="sym">(</span>y <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> z<span class="sym">,</span> x<span class="sym">),</span> tak<span class="sym">(</span>z <span class="sym">-</span> <span class="num">1</span><span class="sym">,</span> x<span class="sym">,</span> y<span class="sym">))</span>
  <span class="kwa">return</span> z
<span class="kwa">end</span>

