#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>newlisp

# sieve <span class="sym">-</span> benchmark
# requires newLISP v. <span class="num">7.5.2</span> <span class="kwa">or</span> later
#
# Contributed by Lutz Mueller

<span class="sym">(</span>define <span class="sym">(</span>main<span class="sym">)</span>
	<span class="sym">(</span><span class="kwa">set</span> <span class="str">'NUM (integer (nth 2 (main-args))))</span>
<span class="str"></span>
<span class="str">	(dotimes (p NUM)</span>
<span class="str">		(set '</span>flags <span class="sym">(</span>array <span class="num">8193</span> <span class="str">'(1)))</span>
<span class="str">		(set '</span>cnt <span class="num">0</span><span class="sym">)</span>

		<span class="sym">(</span>for <span class="sym">(</span>i <span class="num">2 8192</span><span class="sym">)</span>
			<span class="sym">(</span><span class="kwa">if</span> <span class="sym">(= (</span><span class="kwa">nth</span> i flags<span class="sym">)</span> <span class="num">1</span><span class="sym">)</span>
				<span class="sym">(</span>begin
					<span class="sym">(</span><span class="kwa">set</span> <span class="str">'k (+ i i))</span>
<span class="str">					(while (&lt;= k 8192)</span>
<span class="str">						(nth-set k flags 0)</span>
<span class="str">						(inc '</span>k i<span class="sym">))</span>
					<span class="sym">(</span>inc <span class="str">'cnt)))))</span>
<span class="str"></span>
<span class="str">	(println &quot;Count: &quot; cnt))</span>
<span class="str"></span>
<span class="str">(main)</span>
<span class="str"></span>
<span class="str">(exit)</span>
