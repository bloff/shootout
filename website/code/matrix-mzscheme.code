#<span class="sym">!/</span>usr<span class="sym">/</span>bin<span class="sym">/</span>mzscheme <span class="sym">-</span>qu
<span class="slc">;; Matrix.scm</span>

<span class="sym">(</span>module matrix mzscheme
  <span class="sym">(</span>define size <span class="num">30</span><span class="sym">)</span>

  <span class="sym">(</span>define <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> x<span class="sym">) (+</span> x <span class="num">1</span><span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>mkmatrix rows cols<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>mx <span class="sym">(</span>make<span class="sym">-</span>vector rows <span class="num">0</span><span class="sym">))</span>
	  <span class="sym">(</span>count <span class="num">1</span><span class="sym">))</span>
      <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">)))</span>
	  <span class="sym">((=</span> i rows<span class="sym">))</span>
	<span class="sym">(</span>let <span class="sym">((</span>row <span class="sym">(</span>make<span class="sym">-</span>vector cols <span class="num">0</span><span class="sym">)))</span>
	  <span class="sym">(</span>do <span class="sym">((</span>j <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> j<span class="sym">)))</span>
	      <span class="sym">((=</span> j cols<span class="sym">))</span>
	    <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> row j count<span class="sym">)</span>
	    <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> count <span class="sym">(+</span> count <span class="num">1</span><span class="sym">)))</span>
	  <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> mx i row<span class="sym">)))</span>
      mx<span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>num<span class="sym">-</span>cols mx<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>row <span class="sym">(</span>vector<span class="sym">-</span>ref mx <span class="num">0</span><span class="sym">)))</span>
      <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">length</span> row<span class="sym">)))</span>

  <span class="sym">(</span>define <span class="sym">(</span>num<span class="sym">-</span>rows mx<span class="sym">)</span>
    <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">length</span> mx<span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>mmult rows cols m1 m2<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>m3 <span class="sym">(</span>make<span class="sym">-</span>vector rows <span class="num">0</span><span class="sym">)))</span>
      <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">)))</span>
	  <span class="sym">((=</span> i rows<span class="sym">))</span>
	<span class="sym">(</span>let <span class="sym">((</span>m1i <span class="sym">(</span>vector<span class="sym">-</span>ref m1 i<span class="sym">))</span>
	      <span class="sym">(</span>row <span class="sym">(</span>make<span class="sym">-</span>vector cols <span class="num">0</span><span class="sym">)))</span>
	  <span class="sym">(</span>do <span class="sym">((</span>j <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> j<span class="sym">)))</span>
	      <span class="sym">((=</span> j cols<span class="sym">))</span>
	    <span class="sym">(</span>let <span class="sym">((</span>val <span class="num">0</span><span class="sym">))</span>
	      <span class="sym">(</span>do <span class="sym">((</span>k <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> k<span class="sym">)))</span>
		  <span class="sym">((=</span> k cols<span class="sym">))</span>
		<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> val <span class="sym">(+</span> val <span class="sym">(* (</span>vector<span class="sym">-</span>ref m1i k<span class="sym">)</span>
				    <span class="sym">(</span>vector<span class="sym">-</span>ref <span class="sym">(</span>vector<span class="sym">-</span>ref m2 k<span class="sym">)</span> j<span class="sym">)))))</span>
	      <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> row j val<span class="sym">)))</span>
	  <span class="sym">(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> m3 i row<span class="sym">)))</span>
      m3<span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>matrix<span class="sym">-</span><span class="kwa">print</span> m<span class="sym">)</span>
    <span class="sym">(</span>do <span class="sym">((</span>i <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> i<span class="sym">)))</span>
	<span class="sym">((=</span> i <span class="sym">(</span>num<span class="sym">-</span>rows m<span class="sym">)))</span>
      <span class="sym">(</span>let <span class="sym">((</span>row <span class="sym">(</span>vector<span class="sym">-</span>ref m i<span class="sym">)))</span>
	<span class="sym">(</span>do <span class="sym">((</span>j <span class="num">0</span> <span class="sym">(</span><span class="num">1</span><span class="sym">+</span> j<span class="sym">)))</span>
	    <span class="sym">((=</span> j <span class="sym">(</span>num<span class="sym">-</span>cols m<span class="sym">)))</span>
	  <span class="sym">(</span>display <span class="sym">(</span>vector<span class="sym">-</span>ref row j<span class="sym">))</span>
	  <span class="sym">(</span><span class="kwa">if</span> <span class="sym">(&lt;</span> j <span class="sym">(</span>num<span class="sym">-</span>cols m<span class="sym">))</span>
	      <span class="sym">(</span>display <span class="str">&quot; &quot;</span><span class="sym">)))</span>
	<span class="sym">(</span>newline<span class="sym">))))</span>

  <span class="sym">(</span>define <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span><span class="kwa">list</span> . items<span class="sym">) (</span>for<span class="sym">-</span>each display items<span class="sym">) (</span>newline<span class="sym">))</span>

  <span class="sym">(</span>define <span class="sym">(</span>main args<span class="sym">)</span>
    <span class="sym">(</span>let <span class="sym">((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span>vector<span class="sym">-</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">1</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span>vector<span class="sym">-</span>ref
								  args <span class="num">0</span><span class="sym">)))</span>
		 <span class="num">1</span><span class="sym">)))</span>
      <span class="sym">(</span>let <span class="sym">((</span>mm <span class="num">0</span><span class="sym">)</span>
	    <span class="sym">(</span>m1 <span class="sym">(</span>mkmatrix size size<span class="sym">))</span>
	    <span class="sym">(</span>m2 <span class="sym">(</span>mkmatrix size size<span class="sym">)))</span>
	<span class="sym">(</span>let loop <span class="sym">((</span>iter n<span class="sym">))</span>
	  <span class="sym">(</span><span class="kwa">cond</span> <span class="sym">((&gt;</span> iter <span class="num">0</span><span class="sym">)</span>
		 <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> mm <span class="sym">(</span>mmult size size m1 m2<span class="sym">))</span>
		 <span class="sym">(</span>loop <span class="sym">(-</span> iter <span class="num">1</span><span class="sym">)))))</span>
	<span class="sym">(</span>let <span class="sym">((</span>r0 <span class="sym">(</span>vector<span class="sym">-</span>ref mm <span class="num">0</span><span class="sym">))</span>
	      <span class="sym">(</span>r2 <span class="sym">(</span>vector<span class="sym">-</span>ref mm <span class="num">2</span><span class="sym">))</span>
	      <span class="sym">(</span>r3 <span class="sym">(</span>vector<span class="sym">-</span>ref mm <span class="num">3</span><span class="sym">))</span>
	      <span class="sym">(</span>r4 <span class="sym">(</span>vector<span class="sym">-</span>ref mm <span class="num">4</span><span class="sym">)))</span>
	  <span class="sym">(</span><span class="kwa">print</span><span class="sym">-</span><span class="kwa">list</span> <span class="sym">(</span>vector<span class="sym">-</span>ref r0 <span class="num">0</span><span class="sym">)</span> <span class="str">&quot; &quot;</span> <span class="sym">(</span>vector<span class="sym">-</span>ref r2 <span class="num">3</span><span class="sym">)</span> <span class="str">&quot; &quot;</span>
		      <span class="sym">(</span>vector<span class="sym">-</span>ref r3 <span class="num">2</span><span class="sym">)</span> <span class="str">&quot; &quot;</span> <span class="sym">(</span>vector<span class="sym">-</span>ref r4 <span class="num">4</span><span class="sym">))))))</span>

  <span class="sym">(</span>main <span class="sym">(</span>current<span class="sym">-</span><span class="kwa">command</span><span class="sym">-</span><span class="kwa">line</span><span class="sym">-</span>arguments<span class="sym">)))</span>
