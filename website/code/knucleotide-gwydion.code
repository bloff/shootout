<span class="kwb">module</span><span class="sym">:</span> k<span class="sym">-</span>nucleotide
<span class="kwa">use</span><span class="sym">-</span>libraries<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> io
<span class="kwa">use</span><span class="sym">-</span>modules<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> standard<span class="sym">-</span>io<span class="sym">,</span> streams<span class="sym">,</span> format<span class="sym">-</span>out

<span class="kwa">define sealed class</span> <span class="kwa">&lt;key-value-pair&gt;</span> <span class="sym">(</span><span class="kwa">&lt;object&gt;</span><span class="sym">)
</span>    <span class="kwa">constant slot</span> key <span class="sym">::</span> <span class="kwa">&lt;byte-string&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> key<span class="sym">:;
</span>    <span class="kwa">slot</span> val <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> value<span class="sym">:;
</span><span class="kwa">end class</span> <span class="kwa">&lt;key-value-pair&gt;</span><span class="sym">;

</span><span class="kwa">define sealed inline method</span> make <span class="sym">(</span><span class="kwa">class</span> <span class="sym">==</span> <span class="kwa">&lt;key-value-pair&gt;</span><span class="sym">,
</span>                                  #rest all<span class="sym">-</span>keys<span class="sym">,</span> #key<span class="sym">)
 =</span>&gt; <span class="sym">(</span>res<span class="sym">)
</span>    next<span class="sym">-</span><span class="kwa">method</span><span class="sym">();
</span><span class="kwa">end method</span> make<span class="sym">;

</span><span class="kwa">define function</span> kfrequency
    <span class="sym">(</span>sequence <span class="sym">::</span> <span class="kwa">&lt;byte-string&gt;</span><span class="sym">,
</span>     freq <span class="sym">::</span> <span class="kwa">&lt;string-table&gt;</span><span class="sym">,
</span>     k <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,
</span>     frame <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">)
</span>  <span class="kwa">let</span> n <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="sym">=</span> size<span class="sym">(</span>sequence<span class="sym">) -</span> k <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span> <span class="kwa">from</span> frame <span class="kwa">below</span> n <span class="kwa">by</span> k<span class="sym">)
</span>    <span class="kwa">let</span> sub <span class="sym">::</span> <span class="kwa">&lt;byte-string&gt;</span> <span class="sym">=</span> copy<span class="sym">-</span>sequence<span class="sym">(</span>sequence<span class="sym">,</span> start<span class="sym">:</span> i<span class="sym">,</span> <span class="kwa">end</span><span class="sym">:</span> i <span class="sym">+</span> k<span class="sym">);
</span>    <span class="kwa">let</span> record <span class="sym">::</span> false<span class="sym">-</span>or<span class="sym">(</span><span class="kwa">&lt;key-value-pair&gt;</span><span class="sym">) =</span> element<span class="sym">(</span>freq<span class="sym">,</span> sub<span class="sym">,</span> default<span class="sym">:</span> #f<span class="sym">);
</span>    <span class="kwa">if</span> <span class="sym">(</span>record<span class="sym">)
</span>      <span class="kwa">let</span> tmp <span class="sym">::</span> <span class="kwa">&lt;key-value-pair&gt;</span> <span class="sym">=</span> record<span class="sym">;
</span>      tmp.val <span class="sym">:=</span> tmp.val <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwa">else
</span>      freq<span class="sym">[</span>sub<span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;key-value-pair&gt;</span><span class="sym">,</span> key<span class="sym">:</span> sub<span class="sym">,</span> value<span class="sym">:</span> <span class="num">1</span><span class="sym">);
</span>    <span class="kwa">end if</span><span class="sym">;
</span>  <span class="kwa">end for</span><span class="sym">;
</span><span class="kwa">end function</span> kfrequency<span class="sym">;

</span><span class="slc">/// Yuck! limited(&lt;vector&gt;) broken in d2c, and needed for performance!
</span><span class="slc">//define constant &lt;kv-vector&gt; = limited(&lt;vector&gt;, of: &lt;key-value-pair&gt;);
</span><span class="kwa">define constant</span> <span class="kwa">&lt;kv-vector&gt;</span> <span class="sym">=</span> <span class="kwa">&lt;simple-object-vector&gt;</span><span class="sym">;
</span><span class="kwa">define constant</span> $null<span class="sym">-</span>kv <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;key-value-pair&gt;</span><span class="sym">,</span> key<span class="sym">:</span> <span class="str">&quot;&quot;</span><span class="sym">,</span> value<span class="sym">:</span> <span class="num">0</span><span class="sym">);

</span><span class="kwa">define function</span> frequency<span class="sym">(</span>sequence <span class="sym">::</span> <span class="kwa">&lt;byte-string&gt;</span><span class="sym">,</span> k <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">)
</span>  <span class="kwa">let</span> freq <span class="sym">::</span> <span class="kwa">&lt;string-table&gt;</span> <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;string-table&gt;</span><span class="sym">);
</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> k<span class="sym">)
</span>    kfrequency<span class="sym">(</span>sequence<span class="sym">,</span> freq<span class="sym">,</span> k<span class="sym">,</span> i<span class="sym">);
</span>  <span class="kwa">end for</span><span class="sym">;
</span>  <span class="kwa">let</span> sorted <span class="sym">::</span> <span class="kwa">&lt;kv-vector&gt;</span> <span class="sym">=
</span>    make<span class="sym">(</span><span class="kwa">&lt;kv-vector&gt;</span><span class="sym">,</span> size<span class="sym">:</span> size<span class="sym">(</span>freq<span class="sym">),</span> fill<span class="sym">:</span> $null<span class="sym">-</span>kv<span class="sym">);
</span>  <span class="kwa">let</span> sum <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span> <span class="sym">=</span> <span class="num">0.0d0</span><span class="sym">;
</span>  <span class="kwa">for</span> <span class="sym">(</span>tmp <span class="sym">::</span> <span class="kwa">&lt;key-value-pair&gt;</span> <span class="kwa">in</span> freq<span class="sym">,
</span>       i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> size<span class="sym">(</span>freq<span class="sym">))
</span>    sorted<span class="sym">[</span>i<span class="sym">] :=</span> tmp<span class="sym">;
</span>    sum <span class="sym">:=</span> sum <span class="sym">+</span> as<span class="sym">(</span><span class="kwa">&lt;double-float&gt;</span><span class="sym">,</span> tmp.val<span class="sym">);
</span>  <span class="kwa">end for</span><span class="sym">;
</span>  sorted <span class="sym">:=</span> sort<span class="sym">(</span>sorted<span class="sym">,
</span>                 test<span class="sym">:</span> <span class="kwa">method</span> <span class="sym">(</span>a <span class="sym">::</span> <span class="kwa">&lt;key-value-pair&gt;</span><span class="sym">,
</span>                               b <span class="sym">::</span> <span class="kwa">&lt;key-value-pair&gt;</span><span class="sym">)</span> b.val <span class="kwa">&lt; a.val end);
  for (i :: &lt;key-value-pair&gt;</span> <span class="kwa">in</span> sorted<span class="sym">)
</span>    <span class="kwa">let</span> percent <span class="sym">::</span> <span class="kwa">&lt;double-float&gt;</span> <span class="sym">=</span> as<span class="sym">(</span><span class="kwa">&lt;double-float&gt;</span><span class="sym">,</span> i.val<span class="sym">) *</span> <span class="num">100.0d0</span> <span class="sym">/</span> sum<span class="sym">;
</span>    format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;%s %.2f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> i.key<span class="sym">,</span> percent<span class="sym">);
</span>  <span class="kwa">end for</span><span class="sym">;
</span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">);
</span><span class="kwa">end function</span> frequency<span class="sym">;

</span><span class="kwa">define function</span> count <span class="sym">(</span>sequence <span class="sym">::</span> <span class="kwa">&lt;byte-string&gt;</span><span class="sym">,</span> fragment <span class="sym">::</span> <span class="kwa">&lt;byte-string&gt;</span><span class="sym">)
</span>  <span class="kwa">let</span> freq <span class="sym">::</span> <span class="kwa">&lt;string-table&gt;</span> <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;string-table&gt;</span><span class="sym">);
</span>  <span class="kwa">let</span> k <span class="sym">=</span> size<span class="sym">(</span>fragment<span class="sym">);
</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> k<span class="sym">)
</span>    kfrequency<span class="sym">(</span>sequence<span class="sym">,</span> freq<span class="sym">,</span> k<span class="sym">,</span> i<span class="sym">);
</span>  <span class="kwa">end for</span><span class="sym">;
</span>  <span class="kwa">let</span> record <span class="sym">::</span> false<span class="sym">-</span>or<span class="sym">(</span><span class="kwa">&lt;key-value-pair&gt;</span><span class="sym">) =
</span>    element<span class="sym">(</span>freq<span class="sym">,</span> fragment<span class="sym">,</span> default<span class="sym">:</span> #f<span class="sym">);
</span>  <span class="kwa">if</span> <span class="sym">(</span>record<span class="sym">)
</span>    <span class="kwa">let</span> tmp <span class="sym">::</span> <span class="kwa">&lt;key-value-pair&gt;</span> <span class="sym">=</span> record<span class="sym">;
</span>    format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\t</span><span class="str">%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> tmp.val<span class="sym">,</span> fragment<span class="sym">);
</span>  <span class="kwa">else
</span>    format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;0</span><span class="esc">\t</span><span class="str">%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> fragment<span class="sym">);
</span>  <span class="kwa">end if</span><span class="sym">;
</span><span class="kwa">end function</span> count<span class="sym">;

</span><span class="kwa">define function</span> main <span class="sym">()
</span>  <span class="kwa">let</span> line <span class="sym">::</span> false<span class="sym">-</span>or<span class="sym">(</span><span class="kwa">&lt;byte-string&gt;</span><span class="sym">) =
</span>    read<span class="sym">-</span>line<span class="sym">(*</span>standard<span class="sym">-</span>input<span class="sym">*,</span> on<span class="sym">-</span><span class="kwa">end</span><span class="sym">-</span>of<span class="sym">-</span>stream<span class="sym">:</span> #f<span class="sym">);
</span>  <span class="kwa">let</span> needed<span class="sym">-</span>part <span class="sym">::</span> <span class="kwa">&lt;boolean&gt;</span> <span class="sym">=</span> #f<span class="sym">;
</span>  <span class="kwa">let</span> still<span class="sym">-</span>reading <span class="sym">::</span> <span class="kwa">&lt;boolean&gt;</span> <span class="sym">=</span> #t<span class="sym">;
</span>  <span class="kwa">let</span> sequence <span class="sym">::</span> <span class="kwa">&lt;byte-string&gt;</span> <span class="sym">=</span> <span class="str">&quot;&quot;</span><span class="sym">;
</span>  <span class="kwa">while</span><span class="sym">(</span>line <span class="sym">&amp;</span> still<span class="sym">-</span>reading<span class="sym">)
</span>    <span class="kwa">if</span> <span class="sym">(</span>copy<span class="sym">-</span>sequence<span class="sym">(</span>line<span class="sym">,</span>start<span class="sym">:</span> <span class="num">0</span><span class="sym">,</span> <span class="kwa">end</span><span class="sym">:</span> <span class="num">6</span><span class="sym">) =</span> <span class="str">&quot;&gt;THREE&quot;</span><span class="sym">)
</span>      needed<span class="sym">-</span>part <span class="sym">:=</span> #t<span class="sym">;
</span>      line <span class="sym">:=</span> read<span class="sym">-</span>line<span class="sym">(*</span>standard<span class="sym">-</span>input<span class="sym">*,</span> on<span class="sym">-</span><span class="kwa">end</span><span class="sym">-</span>of<span class="sym">-</span>stream<span class="sym">:</span> #f<span class="sym">);
</span>    <span class="kwa">end if</span><span class="sym">;
</span>    <span class="kwa">if</span> <span class="sym">(</span>needed<span class="sym">-</span>part <span class="sym">&amp;</span> line<span class="sym">)
</span>      <span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">] =</span> <span class="str">'&gt;'</span><span class="sym">)
</span>        still<span class="sym">-</span>reading <span class="sym">:=</span> #f<span class="sym">;
</span>      <span class="kwa">elseif</span> <span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">]</span> ~<span class="sym">=</span> <span class="str">';'</span><span class="sym">)
</span>        sequence <span class="sym">:=</span> concatenate<span class="sym">(</span>sequence<span class="sym">,</span> line<span class="sym">);
</span>      <span class="kwa">end if</span><span class="sym">;
</span>    <span class="kwa">end if</span><span class="sym">;
</span>    line <span class="sym">:=</span> read<span class="sym">-</span>line<span class="sym">(*</span>standard<span class="sym">-</span>input<span class="sym">*,</span> on<span class="sym">-</span><span class="kwa">end</span><span class="sym">-</span>of<span class="sym">-</span>stream<span class="sym">:</span> #f<span class="sym">);
</span>  <span class="kwa">end while</span><span class="sym">;

</span>  sequence <span class="sym">:=</span> as<span class="sym">-</span>uppercase<span class="sym">(</span>sequence<span class="sym">);

</span>  frequency<span class="sym">(</span>sequence<span class="sym">,</span> <span class="num">1</span><span class="sym">);
</span>  frequency<span class="sym">(</span>sequence<span class="sym">,</span> <span class="num">2</span><span class="sym">);

</span>  count<span class="sym">(</span>sequence<span class="sym">,</span> <span class="str">&quot;GGT&quot;</span><span class="sym">);
</span>  count<span class="sym">(</span>sequence<span class="sym">,</span> <span class="str">&quot;GGTA&quot;</span><span class="sym">);
</span>  count<span class="sym">(</span>sequence<span class="sym">,</span> <span class="str">&quot;GGTATT&quot;</span><span class="sym">);
</span>  count<span class="sym">(</span>sequence<span class="sym">,</span> <span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">);
</span>  count<span class="sym">(</span>sequence<span class="sym">,</span> <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">);
</span><span class="kwa">end function</span> main<span class="sym">;

</span><span class="kwa">begin
</span>  main<span class="sym">();
</span><span class="kwa">end</span><span class="sym">;</span>
