<span class="kwb">module</span><span class="sym">:</span> knucleotide
<span class="kwa">use</span><span class="sym">-</span>libraries<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> io<span class="sym">,</span> table<span class="sym">-</span>extensions
<span class="kwa">use</span><span class="sym">-</span>modules<span class="sym">:</span> common<span class="sym">-</span>dylan<span class="sym">,</span> standard<span class="sym">-</span>io<span class="sym">,</span> streams<span class="sym">,</span> format<span class="sym">-</span>out<span class="sym">,</span> table<span class="sym">-</span>extensions

<span class="kwa">define sealed class</span> <span class="kwa">&lt;key-value-pair&gt;</span> <span class="sym">(</span><span class="kwa">&lt;object&gt;</span><span class="sym">)
</span>  <span class="kwa">constant slot</span> key <span class="sym">::</span> <span class="kwa">&lt;byte-string&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> key<span class="sym">:;
</span>  <span class="kwa">slot</span> val <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,</span> required<span class="sym">-</span>init<span class="sym">-</span>keyword<span class="sym">:</span> value<span class="sym">:;
</span><span class="kwa">end class</span> <span class="kwa">&lt;key-value-pair&gt;</span><span class="sym">;

</span><span class="kwa">define sealed domain</span> make<span class="sym">(</span><span class="kwa">singleton</span><span class="sym">(</span><span class="kwa">&lt;key-value-pair&gt;</span><span class="sym">));
</span><span class="kwa">define sealed domain</span> initialize<span class="sym">(</span><span class="kwa">&lt;key-value-pair&gt;</span><span class="sym">);


</span><span class="kwa">define function</span> kfrequency
    <span class="sym">(</span>sequence <span class="sym">::</span> <span class="kwa">&lt;byte-string&gt;</span><span class="sym">,
</span>     freq <span class="sym">::</span> <span class="kwa">&lt;byte-string-table&gt;</span><span class="sym">,
</span>     k <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">,
</span>     frame <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">) =</span>&gt; <span class="sym">();
</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> frame <span class="kwa">below</span> sequence.size <span class="sym">-</span> k <span class="sym">+</span> <span class="num">1</span> <span class="kwa">by</span> k<span class="sym">)
</span>    <span class="kwa">let</span> sub <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;byte-string&gt;</span><span class="sym">,</span> size<span class="sym">:</span> k<span class="sym">);
</span>    <span class="kwa">for</span> <span class="sym">(</span>offset <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> k<span class="sym">)</span> sub<span class="sym">[</span>offset<span class="sym">] :=</span> sequence<span class="sym">[</span>i <span class="sym">+</span> offset<span class="sym">]</span> <span class="kwa">end</span><span class="sym">;
</span>    <span class="kwa">let</span> record <span class="sym">=</span> element<span class="sym">(</span>freq<span class="sym">,</span> sub<span class="sym">,</span> default<span class="sym">:</span> #f<span class="sym">);
</span>    <span class="kwa">if</span> <span class="sym">(</span>record<span class="sym">)
</span>      record.val <span class="sym">:=</span> record.val <span class="sym">+</span> <span class="num">1</span><span class="sym">;
</span>    <span class="kwa">else
</span>      freq<span class="sym">[</span>sub<span class="sym">] :=</span> make<span class="sym">(</span><span class="kwa">&lt;key-value-pair&gt;</span><span class="sym">,</span> key<span class="sym">:</span> sub<span class="sym">,</span> value<span class="sym">:</span> <span class="num">1</span><span class="sym">);
</span>    <span class="kwa">end if</span><span class="sym">;
</span>  <span class="kwa">end for</span><span class="sym">;
</span><span class="kwa">end function</span> kfrequency<span class="sym">;


</span><span class="kwa">define function</span> frequency<span class="sym">(</span>sequence <span class="sym">::</span> <span class="kwa">&lt;byte-string&gt;</span><span class="sym">,</span> k <span class="sym">::</span> <span class="kwa">&lt;integer&gt;</span><span class="sym">)
</span>  <span class="kwa">let</span> freq <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;byte-string-table&gt;</span><span class="sym">);
</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> k<span class="sym">)
</span>    kfrequency<span class="sym">(</span>sequence<span class="sym">,</span> freq<span class="sym">,</span> k<span class="sym">,</span> i<span class="sym">);
</span>  <span class="kwa">end for</span><span class="sym">;

</span>  <span class="kwa">let</span> sorted <span class="sym">=</span> sort<span class="sym">(</span>as<span class="sym">(</span><span class="kwa">&lt;vector&gt;</span><span class="sym">,</span> freq<span class="sym">),
</span>                    test<span class="sym">:</span> <span class="kwa">method</span> <span class="sym">(</span>a <span class="sym">::</span> <span class="kwa">&lt;key-value-pair&gt;</span><span class="sym">,
</span>                                  b <span class="sym">::</span> <span class="kwa">&lt;key-value-pair&gt;</span><span class="sym">)</span> b.val <span class="kwa">&lt; a.val end);
  let sum = reduce(</span><span class="esc">\+</span><span class="kwa">,</span> <span class="num">0</span><span class="kwa">, map(val, sorted));

  for (kvp in sorted)
    format-out(</span><span class="str">&quot;%s %.3f</span><span class="esc">\n</span><span class="str">&quot;</span><span class="kwa">, kvp.key, kvp.val *</span> <span class="num">100.0d0</span> <span class="kwa">/ sum);
  end for;
  format-out(</span><span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="kwa">);
end function frequency;


define function count (sequence :: &lt;byte-string&gt;</span><span class="sym">,</span> fragment <span class="sym">::</span> <span class="kwa">&lt;byte-string&gt;</span><span class="sym">)
</span>  <span class="kwa">let</span> freq <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;byte-string-table&gt;</span><span class="sym">);
</span>  <span class="kwa">for</span> <span class="sym">(</span>i <span class="kwa">from</span> <span class="num">0</span> <span class="kwa">below</span> fragment.size<span class="sym">)
</span>    kfrequency<span class="sym">(</span>sequence<span class="sym">,</span> freq<span class="sym">,</span> fragment.size<span class="sym">,</span> i<span class="sym">);
</span>  <span class="kwa">end for</span><span class="sym">;
</span>  <span class="kwa">let</span> record <span class="sym">=</span> element<span class="sym">(</span>freq<span class="sym">,</span> fragment<span class="sym">,</span> default<span class="sym">:</span> #f<span class="sym">);
</span>  format<span class="sym">-</span>out<span class="sym">(</span><span class="str">&quot;%d</span><span class="esc">\t</span><span class="str">%s</span><span class="esc">\n</span><span class="str">&quot;</span><span class="sym">,</span> record <span class="sym">&amp;</span> record.val <span class="sym">|</span> <span class="num">0</span><span class="sym">,</span> fragment<span class="sym">);
</span><span class="kwa">end function</span> count<span class="sym">;


</span><span class="kwa">begin
  let</span> chars <span class="sym">=</span> make<span class="sym">(</span><span class="kwa">&lt;stretchy-object-vector&gt;</span><span class="sym">);

</span>  <span class="kwa">block</span> <span class="sym">()
</span>    <span class="kwa">for</span> <span class="sym">(</span>line <span class="sym">::</span> <span class="kwa">&lt;byte-string&gt;</span> <span class="sym">=</span> read<span class="sym">-</span>line<span class="sym">(*</span>standard<span class="sym">-</span>input<span class="sym">*),
</span>         <span class="kwa">until</span><span class="sym">:</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span> <span class="sym">&amp;</span> copy<span class="sym">-</span>sequence<span class="sym">(</span>line<span class="sym">,</span>start<span class="sym">:</span> <span class="num">1</span><span class="sym">,</span> <span class="kwa">end</span><span class="sym">:</span> <span class="num">6</span><span class="sym">) =</span> <span class="str">&quot;THREE&quot;</span><span class="sym">)
</span>    <span class="kwa">end</span><span class="sym">;
</span>    <span class="kwa">for</span> <span class="sym">(</span>line <span class="sym">::</span> <span class="kwa">&lt;byte-string&gt;</span> <span class="sym">=</span> read<span class="sym">-</span>line<span class="sym">(*</span>standard<span class="sym">-</span>input<span class="sym">*),
</span>         <span class="kwa">until</span><span class="sym">:</span> line<span class="sym">[</span><span class="num">0</span><span class="sym">] ==</span> <span class="str">'&gt;'</span><span class="sym">)
</span>      <span class="kwa">if</span> <span class="sym">(</span>line<span class="sym">[</span><span class="num">0</span><span class="sym">]</span> ~<span class="sym">==</span> <span class="str">';'</span><span class="sym">)
</span>        <span class="kwa">let</span> old<span class="sym">-</span>size <span class="sym">=</span> chars.size<span class="sym">;
</span>        chars.size <span class="sym">:=</span> old<span class="sym">-</span>size <span class="sym">+</span> line.size<span class="sym">;
</span>        <span class="kwa">for</span> <span class="sym">(</span>ch <span class="kwa">in</span> line<span class="sym">,</span> i <span class="kwa">from</span> old<span class="sym">-</span>size<span class="sym">)
</span>          chars<span class="sym">[</span>i<span class="sym">] :=</span> as<span class="sym">-</span>uppercase<span class="sym">(</span>ch<span class="sym">);
</span>        <span class="kwa">end</span><span class="sym">;
</span>      <span class="kwa">end if</span><span class="sym">;
</span>    <span class="kwa">end for</span><span class="sym">;
</span>  <span class="kwa">exception</span> <span class="sym">(</span>e <span class="sym">::</span> <span class="kwa">&lt;end-of-stream-error&gt;</span><span class="sym">)
</span>  <span class="kwa">end</span><span class="sym">;

</span>  <span class="kwa">let</span> sequence <span class="sym">=</span> as<span class="sym">(</span><span class="kwa">&lt;byte-string&gt;</span><span class="sym">,</span> chars<span class="sym">);

</span>  frequency<span class="sym">(</span>sequence<span class="sym">,</span> <span class="num">1</span><span class="sym">);
</span>  frequency<span class="sym">(</span>sequence<span class="sym">,</span> <span class="num">2</span><span class="sym">);

</span>  count<span class="sym">(</span>sequence<span class="sym">,</span> <span class="str">&quot;GGT&quot;</span><span class="sym">);
</span>  count<span class="sym">(</span>sequence<span class="sym">,</span> <span class="str">&quot;GGTA&quot;</span><span class="sym">);
</span>  count<span class="sym">(</span>sequence<span class="sym">,</span> <span class="str">&quot;GGTATT&quot;</span><span class="sym">);
</span>  count<span class="sym">(</span>sequence<span class="sym">,</span> <span class="str">&quot;GGTATTTTAATT&quot;</span><span class="sym">);
</span>  count<span class="sym">(</span>sequence<span class="sym">,</span> <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="sym">);
</span><span class="kwa">end</span><span class="sym">;</span>
