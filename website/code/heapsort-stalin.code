<span class="slc">;;; -*- mode: scheme -*-
</span><span class="slc">;;; $Id: heapsort-stalin.code,v 1.6 2005-04-13 15:29:04 bfulgham Exp $
</span><span class="slc">;;; http://www.bagley.org/~doug/shootout/
</span>
<span class="sym">(</span>define IM   <span class="num">139968</span><span class="sym">)
(</span>define IA     <span class="num">3877</span><span class="sym">)
(</span>define IC    <span class="num">29573</span><span class="sym">)

(</span>define LAST <span class="num">42</span><span class="sym">)
(</span>define <span class="sym">(</span>gen_random <span class="kwa">max</span><span class="sym">)
  (</span><span class="kwa">set</span><span class="sym">!</span> LAST <span class="sym">(</span>modulo <span class="sym">(+ (*</span> LAST IA<span class="sym">)</span> IC<span class="sym">)</span> IM<span class="sym">))
  (/ (*</span> <span class="kwa">max</span> LAST<span class="sym">)</span> IM<span class="sym">))

(</span>define <span class="sym">(</span>heapsort n ra<span class="sym">)
  (</span>let <span class="sym">((</span>ir n<span class="sym">)
	(</span>l <span class="sym">(+ (</span>bit<span class="sym">-</span>rsh n <span class="num">1</span><span class="sym">)</span> <span class="num">1</span><span class="sym">))
	(</span>i <span class="num">0</span><span class="sym">)
	(</span>j <span class="num">0</span><span class="sym">)
	(</span>rra <span class="num">0.0</span><span class="sym">))
    (</span>bind<span class="sym">-</span><span class="kwa">exit</span> <span class="sym">(</span>return<span class="sym">)
</span>	       <span class="slc">;; how to do an infinite loop in bigloo?
</span>	       <span class="slc">;; (while #t
</span>	       <span class="sym">(</span>do <span class="sym">((</span>bar #t<span class="sym">))
		   ((=</span> <span class="num">1 0</span><span class="sym">))
		 (</span><span class="kwa">cond</span> <span class="sym">((&gt;</span> l <span class="num">1</span><span class="sym">)
			(</span><span class="kwa">set</span><span class="sym">!</span> l <span class="sym">(-</span> l <span class="num">1</span><span class="sym">))
			(</span><span class="kwa">set</span><span class="sym">!</span> rra <span class="sym">(</span>vector<span class="sym">-</span>ref ra l<span class="sym">)))
		       (</span>else
			<span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> rra <span class="sym">(</span>vector<span class="sym">-</span>ref ra ir<span class="sym">))
			(</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ra ir <span class="sym">(</span>vector<span class="sym">-</span>ref ra <span class="num">1</span><span class="sym">))
			(</span><span class="kwa">set</span><span class="sym">!</span> ir <span class="sym">(-</span> ir <span class="num">1</span><span class="sym">))
			(</span><span class="kwa">cond</span> <span class="sym">((=</span> ir <span class="num">1</span><span class="sym">)
			       (</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ra <span class="num">1</span> rra<span class="sym">)
			       (</span>return #t<span class="sym">)))))
		 (</span><span class="kwa">set</span><span class="sym">!</span> i l<span class="sym">)
		 (</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(</span>bit<span class="sym">-</span><span class="kwa">lsh</span> l <span class="num">1</span><span class="sym">))
</span>		 <span class="slc">;; how to do a while loop in bigloo?
</span>		 <span class="slc">;; (while (&lt;= j ir)
</span>		 <span class="sym">(</span>do <span class="sym">((</span>foo #t<span class="sym">))
		     ((&gt;</span> j ir<span class="sym">))
		   (</span><span class="kwa">cond</span> <span class="sym">((</span><span class="kwa">and</span> <span class="sym">(&lt;</span> j ir<span class="sym">) (&lt; (</span>vector<span class="sym">-</span>ref ra j<span class="sym">) (</span>vector<span class="sym">-</span>ref ra <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))))
			  (</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span> j <span class="num">1</span><span class="sym">))))
		   (</span><span class="kwa">cond</span> <span class="sym">((&lt;</span> rra <span class="sym">(</span>vector<span class="sym">-</span>ref ra j<span class="sym">))
			  (</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ra i <span class="sym">(</span>vector<span class="sym">-</span>ref ra j<span class="sym">))
			  (</span><span class="kwa">set</span><span class="sym">!</span> i j<span class="sym">)
			  (</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span> j i<span class="sym">)))
			 (</span>else
			  <span class="sym">(</span><span class="kwa">set</span><span class="sym">!</span> j <span class="sym">(+</span> ir <span class="num">1</span><span class="sym">)))))
		 (</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ra i rra<span class="sym">)))))

(</span>define <span class="sym">(</span>main args<span class="sym">)
  (</span>let<span class="sym">* ((</span>n <span class="sym">(</span><span class="kwa">or</span> <span class="sym">(</span><span class="kwa">and</span> <span class="sym">(= (</span><span class="kwa">length</span> args<span class="sym">)</span> <span class="num">2</span><span class="sym">) (</span>string<span class="sym">-&gt;</span>number <span class="sym">(</span><span class="kwa">cadr</span> args<span class="sym">)))</span> <span class="num">1</span><span class="sym">))
	 (</span><span class="kwa">last</span> <span class="sym">(+</span> n <span class="num">1</span><span class="sym">))
	 (</span>ary <span class="sym">(</span>make<span class="sym">-</span>vector <span class="kwa">last</span> <span class="num">0</span><span class="sym">)))
    (</span>do <span class="sym">((</span>i <span class="num">1</span> <span class="sym">(+</span> i <span class="num">1</span><span class="sym">)))
	((=</span> i <span class="kwa">last</span><span class="sym">))
      (</span>vector<span class="sym">-</span><span class="kwa">set</span><span class="sym">!</span> ary i <span class="sym">(</span>gen_random <span class="num">1.0</span><span class="sym">)))
    (</span>heapsort n ary<span class="sym">)
    (</span>display <span class="sym">(</span>format <span class="str">&quot;~,10F</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="sym">(</span>vector<span class="sym">-</span>ref ary n<span class="sym">)))))

(</span>main <span class="sym">(</span>vector<span class="sym">-&gt;</span><span class="kwa">list</span> argv<span class="sym">))</span>
