/*
   The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by anon
*/


module nbody

import StdEnv
import StdOverloaded
import StdDebug
import ArgEnv
// [!] !!!import M_PI
pi :== 3.1415926535897932384626433832795028841971693993751058209749445

:: Coord :== Real
:: Double :== Real /* for Scaling */
:: Vector3 = Vector3 !Coord !Coord !Coord
/* [!] Vector3 = (Coord, Coord, Coord) !!! */

class Vector3Ops a
where
	dot :: !a !a -> Coord
	magnitude :: !a -> Coord
	magnitude2 :: !a -> Coord
	(*.) infixl 7 :: !a !Double -> a
	(/.) infixl 7 :: !a !Double -> a

instance Vector3Ops Vector3
where	
	dot (Vector3 x1 y1 z1) (Vector3 x2 y2 z2) = (x1*x2) + (y1*y2) + (z1*z2)
	magnitude2 v = dot v v
	magnitude v = sqrt(magnitude2 v)
	(*.) (Vector3 x y z) k = Vector3 (x*k) (y*k) (z*k)
	(/.) (Vector3 x y z) k = Vector3 (x/k) (y/k) (z/k)
instance ~ Vector3
where
	(~) (Vector3 x y z) = Vector3 (~x) (~y) (~z)
instance zero Vector3
where
	zero = Vector3 0.0 0.0 0.0
instance + Vector3
where
	(+) (Vector3 x1 y1 z1) (Vector3 x2 y2 z2) = Vector3 (x1+x2) (y1+y2) (z1+z2)
instance - Vector3
where
	(-) (Vector3 x1 y1 z1) (Vector3 x2 y2 z2) = Vector3 (x1-x2) (y1-y2) (z1-z2)


/* Objects */

:: Mass :== Real
:: DTime :== Real
:: Planet = Planet !Mass !Vector3 !Vector3 /* Mass Position Velocity */
:: Cosmos =
	{	number_of_planets :: Int 
	,	days_per_year :: Real
	,	solar_mass :: Real
	,	planets :: [Planet]
	}

givenCosmos :: *Cosmos
givenCosmos =
	{	number_of_planets = 5
	,	days_per_year = days_per_year
	,	solar_mass = solar_mass
	,	planets =
		[	Planet solar_mass
			(Vector3 0.0 0.0 0.0)
			(Vector3 0.0 0.0 0.0)
		,	Planet (9.54791938424326609E-04*solar_mass)
			(Vector3 4.84143144246472090E+00 -1.16032004402742839E+00 -1.03622044471123109E-01)
			(Vector3 (1.66007664274403694E-03*days_per_year)
			(7.69901118419740425E-03*days_per_year)
			(-6.90460016972063023E-05*days_per_year))
		,	Planet (2.85885980666130812E-04*solar_mass)
			(Vector3 (8.34336671824457987E+00) (4.12479856412430479E+00) (-4.03523417114321381E-01))
			(Vector3 (-2.76742510726862411E-03*days_per_year)
			(4.99852801234917238E-03*days_per_year)
			(2.30417297573763929E-05*days_per_year))
		,	Planet (4.36624404335156298E-05*solar_mass)
			(Vector3 (1.28943695621391310E+01) (-1.51111514016986312E+01) (-2.23307578892655734E-01))
			(Vector3 (2.96460137564761618E-03*days_per_year)
			(2.37847173959480950E-03*days_per_year)
			(-2.96589568540237556E-05*days_per_year))
		,	Planet (5.15138902046611451E-05*solar_mass)
			(Vector3 (1.53796971148509165E+01) (-2.59193146099879641E+01) (1.79258772950371181E-01))
			(Vector3 (2.68067772490389322E-03*days_per_year)
			(1.62824170038242295E-03*days_per_year)
			(-9.51592254519715870E-05*days_per_year))
		]

	}
where
	days_per_year = 365.24
	solar_mass = 4.0*pi*pi

/* == Solution == */

/* Physics */

calcVel :: !DTime !Planet !Planet -> (Planet,Planet)
calcVel delta_time (Planet p1mass p1position p1velocity) (Planet p2mass p2position p2velocity)
	#!	difference = p1position - p2position
		distance_squared = magnitude2(difference)
		distance = sqrt(distance_squared)
		magnitude = delta_time / (distance * distance_squared)
		p2mass_magnitude = p2mass * magnitude
		p1mass_magnitude = p1mass * magnitude
		p1velocity = p1velocity - difference *. p2mass_magnitude
		p2velocity = p2velocity + difference *. p1mass_magnitude
	=	(Planet p1mass p1position p1velocity, Planet p2mass p2position p2velocity)

calcPos :: DTime !Planet -> Planet
calcPos dtime (Planet mass pos vel)
	= Planet mass new_pos vel
where
	new_pos = pos + vel *. dtime

/* End of Physics */

advance :: DTime !*{Planet} -> *{Planet}
advance dtime planets
	# planets = updateHalfCartesian (calcVel dtime) planets
	# planets = updateA (calcPos dtime) planets
	= planets

offset_momentum :: !*{Planet} -> *{Planet}
offset_momentum planets 
	# (m,planets) = collectA getmom zero planets
	# (solar,planets) = uselect planets 0
	# solar = updSolar m solar
	# planets = update planets 0 solar
	= planets
where
	getmom (Planet mass pos vel) acc = acc + vel *. mass
	updSolar momentum (Planet mass pos vel)
		# momentum = momentum - vel *. mass /* correct garbled momentum */
		# vel = ~ momentum /. mass
		= Planet mass pos vel

energy :: !*{Planet} -> (Real,!*{Planet})
energy planets
	#! (cn,planets) = usize planets
	#! (total_energy,planets) = collectA setEnergy 0.0 planets
	#! (total_energy,planets) = collectHalfCartesian calcEnergy total_energy planets
	= (total_energy,planets)
where
	setEnergy (Planet mass pos vel) a = a + 0.5*mass*magnitude2(vel)
	calcEnergy (Planet p1mass p1pos p1vel) (Planet p2mass p2pos p2vel) a
		#! difference = p1pos - p2pos
        #! distance = magnitude(difference)
        = a - (p1mass * p2mass) / distance

/* == Helpers == */

collectHalfCartesian :: (x x a->a) !a !*{x} -> (a,*{x}) | Array {} x
collectHalfCartesian fn a x
	# (sz,x) = usize x
	= iloop a x (sz-2)
where 
	iloop a x i
		| i < 0 = (a,x)
		#! (sz,x) = usize x
		#! (a,x) = jloop a x i (sz-1)
		= iloop a x (i-1)
	jloop a x i j
		| i == j	= (a,x)
		#! (a,x) = cr a x i j
		| otherwise	= jloop a x i (j-1)
	cr a x i j
		#! (xi,x) = uselect x i
		#! (xj,x) = uselect x j
		#! a = fn xi xj a
		= (a,x)		

updateHalfCartesian :: (x x->(x,x)) !*{x} -> *{x} | Array {} x
updateHalfCartesian fn x
	# (sz,x) = usize x
	= iloop x (sz-2)
where 
	iloop x i
		| i < 0 = x
		#! (sz,x) = usize x
		#! x = jloop x i (sz-1)
		= iloop x (i-1)
	jloop x i j
		| i == j	= x
		#! x = cr x i j
		| otherwise	= jloop x i (j-1)
	cr x i j
		#! (xi,x) = uselect x i
		#! (xj,x) = uselect x j
		#! (xi,xj) = fn xi xj
		#! x = update x i xi
		#! x = update x j xj
		= x		


updateA :: (x->x) !*{x} -> *{x} | Array {} x
updateA fn x
		# (sz,x) = usize x
		= loop (sz-1) x
where
	loop n x
		| n < 0 = x
		#! (xn,x) = uselect x n
		#! xn = fn xn
		#! x = update x n xn
		= loop (n-1) x

collectA :: (x a->a) !a !*{x} -> (a,*{x}) | Array {} x
collectA fn a x
		# (sz,x) = usize x
		= loop (sz-1) a x
where
	loop n a x	
		| n < 0 = (a,x)
		#! (xn,x) = uselect x n
		#! a = fn xn a
		= loop (n-1) a x

/* == End of Helpers == */

Start
	# f = stderr
	# planets = { p \\ p <- givenCosmos.planets }
	# cmd = getCommandLine
	# n = if (size cmd < 2) 1 (toInt cmd.[1])

	# planets = offset_momentum planets

	# (e,planets) = energy planets
	# f = fwrites (toString e+++"\n") f

	# planets = advance_loop n 0.01 planets

	# (e,planets) = energy planets
	# f = fwrites (toString e+++"\n") f

 =	f
where
	advance_loop :: !Int !DTime !*{Planet} -> *{Planet}
	advance_loop n dt p
		| n < 0 = p
		# p = advance dt p
		= advance_loop (n-1) dt p


