/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy 
*/

using System;

class NBody {
   public static void Main(String[] args) {        
      int n = 10000;
      if (args.Length > 0) n = Int32.Parse(args[0]);

      NBodySystem bodies = new NBodySystem();

      Console.WriteLine("{0:f9}",bodies.Energy());
      for (int i=0; i<n; i++) 
         bodies.Advance(0.01);
      Console.WriteLine("{0:f9}",bodies.Energy());
   }
}


class NBodySystem {
   private Body[] bodies;
	   	  	
   public NBodySystem() {			
      bodies = new Body[]{
         Body.Sun(),		
         Body.Jupiter(),
         Body.Saturn(),
         Body.Uranus(),
         Body.Neptune()		      		      		      
      };
		
      double px = 0.0;
      double py = 0.0;	
      double pz = 0.0;				
      foreach (Body body in bodies) {			   		         					
         px += body.vx * body.mass;
         py += body.vy * body.mass;		
         pz += body.vz * body.mass;				
      }		
      bodies[0].OffsetMomentum(px,py,pz);
   }
						   	
   public void Advance(double dt) {
      for (int i=0; i < bodies.Length; i++) 
         for (int j=i+1; j < bodies.Length; j++) 
            bodies[i].VelocitiesAfter(bodies[j], dt);		
		
      foreach (Body body in bodies) 
         body.PositionAfter(dt);			
   }			
	
   public double Energy() {		
      double e = 0.0;		   		
      for (int i=0; i < bodies.Length; i++) {
         e += 0.5 * bodies[i].Momo(); 			   
         for (int j=i+1; j < bodies.Length; j++)                                 
            e -= bodies[i].EFactorWith(bodies[j]);
      }
      return e;
   }		      	   	   	      	   		   														           		
}


class Body {
   const double PI = 3.141592653589793;	
   const double SOLAR_MASS = 4 * PI * PI;
   const double DAYS_PER_YEAR = 365.24;

   public double x, y, z, vx, vy, vz, mass;
	
   public Body(){}	
	
   internal static Body Jupiter() {
      Body p = new Body();
      p.x = 4.84143144246472090e+00;
      p.y = -1.16032004402742839e+00;
      p.z = -1.03622044471123109e-01;
      p.vx = 1.66007664274403694e-03 * DAYS_PER_YEAR;
      p.vy = 7.69901118419740425e-03 * DAYS_PER_YEAR;
      p.vz = -6.90460016972063023e-05 * DAYS_PER_YEAR;
      p.mass = 9.54791938424326609e-04 * SOLAR_MASS;	   	   	   
      return p;
   }	
	
   internal static Body Saturn() {
      Body p = new Body();
      p.x = 8.34336671824457987e+00;
      p.y = 4.12479856412430479e+00;
      p.z = -4.03523417114321381e-01;
      p.vx = -2.76742510726862411e-03 * DAYS_PER_YEAR;
      p.vy = 4.99852801234917238e-03 * DAYS_PER_YEAR;
      p.vz = 2.30417297573763929e-05 * DAYS_PER_YEAR;
      p.mass = 2.85885980666130812e-04 * SOLAR_MASS;	   	   	   
      return p;
   }	
	
   internal static Body Uranus() {
      Body p = new Body();
      p.x = 1.28943695621391310e+01;
      p.y = -1.51111514016986312e+01;
      p.z = -2.23307578892655734e-01;
      p.vx = 2.96460137564761618e-03 * DAYS_PER_YEAR;
      p.vy = 2.37847173959480950e-03 * DAYS_PER_YEAR;
      p.vz = -2.96589568540237556e-05 * DAYS_PER_YEAR;
      p.mass = 4.36624404335156298e-05 * SOLAR_MASS;		   	   	   
      return p;
   }		

   internal static Body Neptune() {
      Body p = new Body();
      p.x = 1.53796971148509165e+01;
      p.y = -2.59193146099879641e+01;
      p.z = 1.79258772950371181e-01;
      p.vx = 2.68067772490389322e-03 * DAYS_PER_YEAR;
      p.vy = 1.62824170038242295e-03 * DAYS_PER_YEAR;
      p.vz = -9.51592254519715870e-05 * DAYS_PER_YEAR;
      p.mass = 5.15138902046611451e-05 * SOLAR_MASS;	   	   	   
      return p;
   }
	
   internal static Body Sun() {
      Body p = new Body();
      p.mass = SOLAR_MASS;	   	   	   
      return p;
   }			
	
   internal Body OffsetMomentum(double px, double py, double pz) {
      vx = -px / SOLAR_MASS;
      vy = -py / SOLAR_MASS;
      vz = -pz / SOLAR_MASS;	   
      return this;   
   }			
   
   internal void VelocitiesAfter(Body b, double dt){
      double dx, dy, dz, distance, mag;
      dx = x - b.x;
      dy = y - b.y;
      dz = z - b.z;				
      distance = Math.Sqrt(dx*dx + dy*dy + dz*dz);				   
      mag = dt / (distance * distance * distance);

      this.DecreaseVelocity(dx, dy, dz, b.mass*mag);
      b.IncreaseVelocity(dx, dy, dz, mass*mag);
   }	  	

   internal void DecreaseVelocity(double dx, double dy, double dz, double m){
      vx -= dx * m;
      vy -= dy * m;
      vz -= dz * m;
   }
	
   internal void IncreaseVelocity(double dx, double dy, double dz, double m){
      vx += dx * m;
      vy += dy * m;
      vz += dz * m;
   }

   internal void PositionAfter(double dt){
      x += dt * vx;
      y += dt * vy;
      z += dt * vz;
   }

   internal double Momo(){
      return mass * ((vx * vx) + (vy * vy) + (vz * vz));
   }

   internal double EFactorWith(Body b){
      double dx, dy, dz, distance;
      dx = x - b.x;
      dy = y - b.y;
      dz = z - b.z;	
      distance = Math.Sqrt(dx*dx + dy*dy + dz*dz);	
      return mass * b.mass / distance;
   }	        			
}


