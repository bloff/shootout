{ The Great Computer Language Shootout
  http://shootout.alioth.debian.org

  contributed by Ian Osgood
}
{$mode objfpc}

program nbody;
uses Math, SysUtils;

type Body = record
  x, y, z, vx, vy, vz, mass : double;
end;

const pi = 3.141592653589793;
      solarMass = 4 * sqr(pi);
      daysPerYear = 365.24;

const b : array[1..5] of Body = (
  { Sun }
  ( x:0; y:0; z:0;  vx:0; vy:0; vz:0;  mass: solarMass ),
  { Jupiter }
  ( x:    4.84143144246472090e+00;
    y:   -1.16032004402742839e+00;
    z:   -1.03622044471123109e-01;
    vx:   1.66007664274403694e-03 * daysPerYear;  
    vy:   7.69901118419740425e-03 * daysPerYear;
    vz:  -6.90460016972063023e-05 * daysPerYear;
    mass: 9.54791938424326609e-04 * solarMass ),
  { Saturn }
  ( x:    8.34336671824457987e+00;
    y:    4.12479856412430479e+00;
    z:   -4.03523417114321381e-01;
    vx:  -2.76742510726862411e-03 * daysPerYear;  
    vy:   4.99852801234917238e-03 * daysPerYear;
    vz:   2.30417297573763929e-05 * daysPerYear;
    mass: 2.85885980666130812e-04 * solarMass ),
  { Uranus }
  ( x:    1.28943695621391310e+01;
    y:   -1.51111514016986312e+01;
    z:   -2.23307578892655734e-01;
    vx:   2.96460137564761618e-03 * daysPerYear;  
    vy:   2.37847173959480950e-03 * daysPerYear;
    vz:  -2.96589568540237556e-05 * daysPerYear;
    mass: 4.36624404335156298e-05 * solarMass ),
  { Neptune }
  ( x:    1.53796971148509165e+01;
    y:   -2.59193146099879641e+01;
    z:    1.79258772950371181e-01;
    vx:   2.68067772490389322e-03 * daysPerYear;  
    vy:   1.62824170038242295e-03 * daysPerYear;
    vz:  -9.51592254519715870e-05 * daysPerYear;
    mass: 5.15138902046611451e-05 * solarMass )
);

procedure offsetMomentum;
var px,py,pz : double;
    i : integer;
begin
  px:=0.0; py:=0.0; pz:=0.0;
  for i := low(b)+1 to high(b) do
    with b[i] do
    begin
      px := px - vx * mass;
      py := py - vy * mass;
      pz := pz - vz * mass;
    end;
  b[low(b)].vx := px / solarMass;
  b[low(b)].vy := py / solarMass;
  b[low(b)].vz := pz / solarMass;
end;

function distance(i,j : integer) : double;
begin
  distance := sqrt(sqr(b[i].x-b[j].x) + sqr(b[i].y-b[j].y) + sqr(b[i].z-b[j].z));
end;

function energy : double;
var e : double;
    i,j : integer;
begin
  e := 0.0;
  for i := low(b) to high(b) do
    with b[i] do
    begin
      e := e + mass * (sqr(vx) + sqr(vy) + sqr(vz)) / 2;
      for j := i+1 to high(b) do
        e := e - mass * b[j].mass / distance(i,j);
    end;
  energy := e;
end;

procedure advance(dt : double);
var i,j : integer;
    dx,dy,dz,mag : double;
begin
  for i := low(b) to high(b)-1 do
    for j := i+1 to high(b) do
    begin
      dx := b[i].x - b[j].x;
      dy := b[i].y - b[j].y;
      dz := b[i].z - b[j].z;
      mag := dt / power(sqrt(sqr(dx)+sqr(dy)+sqr(dz)), 3);
      with b[i] do
      begin
        vx := vx - dx * b[j].mass * mag;
        vy := vy - dy * b[j].mass * mag;
        vz := vz - dz * b[j].mass * mag;
      end;
      with b[j] do
      begin
        vx := vx + dx * b[i].mass * mag;
        vy := vy + dy * b[i].mass * mag;
        vz := vz + dz * b[i].mass * mag;
      end;
    end;
  for i := low(b) to high(b) do
    with b[i] do
    begin
      x := x + dt * vx;
      y := y + dt * vy;
      z := z + dt * vz;
    end;
end;

var i : integer;
begin
  offsetMomentum;
  writeln(energy:0:9);
  for i := 1 to StrToInt(paramstr(1)) do advance(0.01);
  writeln(energy:0:9);
end.
