/*
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * contributed by Christoph Bauer
 *
 * C --> C++ mods by David McCombs
 */

#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <iomanip>
using namespace std;

#define pi 3.141592653589793
#define solar_mass (4 * pi * pi)
#define days_per_year 365.24
#define NBODIES 5

class planet {
public:
  double x, y, z;
  double vx, vy, vz;
  double mass;
  planet(){;}
  void set( double x, double y, double z, double vx, double vy,double vz, double mass )
  {
    this->x=x;
    this->y=y;
    this->z=z;
    this->vx=vx;
    this->vy=vy;
    this->vz=vz;
    this->mass=mass;
  }
  ~planet(){;}
};

class theBodies {
public:  
  const int nbodies;
  planet bodies[NBODIES];  
  theBodies():nbodies(NBODIES)
  {  
    bodies[0].set(               // sun
      0, 0, 0, 0, 0, 0, solar_mass );
    bodies[1].set(                // jupiter 
      4.84143144246472090e+00,
      -1.16032004402742839e+00,
      -1.03622044471123109e-01,
      1.66007664274403694e-03 * days_per_year,
      7.69901118419740425e-03 * days_per_year,
      -6.90460016972063023e-05 * days_per_year,
      9.54791938424326609e-04 * solar_mass
    );
    bodies[2].set(                // saturn 
      8.34336671824457987e+00,
      4.12479856412430479e+00,
      -4.03523417114321381e-01,
      -2.76742510726862411e-03 * days_per_year,
      4.99852801234917238e-03 * days_per_year,
      2.30417297573763929e-05 * days_per_year,
      2.85885980666130812e-04 * solar_mass
    );
    bodies[3].set(                // uranus 
      1.28943695621391310e+01,
      -1.51111514016986312e+01,
      -2.23307578892655734e-01,
      2.96460137564761618e-03 * days_per_year,
      2.37847173959480950e-03 * days_per_year,
      -2.96589568540237556e-05 * days_per_year,
      4.36624404335156298e-05 * solar_mass
    );
    bodies[4].set(                // neptune 
      1.53796971148509165e+01,
      -2.59193146099879641e+01,
      1.79258772950371181e-01,
      2.68067772490389322e-03 * days_per_year,
      1.62824170038242295e-03 * days_per_year,
      -9.51592254519715870e-05 * days_per_year,
      5.15138902046611451e-05 * solar_mass
    );  
  }
  ~theBodies(){;}
  
  void advance( double dt)
  {
    int i, j;    
    for (i = 0; i < nbodies; i++) {
      planet & b = bodies[i];
      for (j = i + 1; j < nbodies; j++) {
        planet & b2 = bodies[j];
        double dx = b.x - b2.x;
        double dy = b.y - b2.y;
        double dz = b.z - b2.z;
        double distance = sqrt(dx * dx + dy * dy + dz * dz);
        double mag = dt / (distance * distance * distance);
        b.vx -= dx * b2.mass * mag;
        b.vy -= dy * b2.mass * mag;
        b.vz -= dz * b2.mass * mag;
        b2.vx += dx * b.mass * mag;
        b2.vy += dy * b.mass * mag;
        b2.vz += dz * b.mass * mag;
      }
    }
    for (i = 0; i < nbodies; i++) {
      planet & b = bodies[i];
      b.x += dt * b.vx;
      b.y += dt * b.vy;
      b.z += dt * b.vz;
    }
  }
  double energy(void)
  {
    double e;
    int i, j;
    e = 0.0;
    for (i = 0; i < nbodies; i++) {
      planet & b = bodies[i];
      e += 0.5 * b.mass * (b.vx * b.vx + b.vy * b.vy + b.vz * b.vz);
      for (j = i + 1; j < nbodies; j++) {
        planet & b2 = bodies[j];
        double dx = b.x - b2.x;
        double dy = b.y - b2.y;
        double dz = b.z - b2.z;
        double distance = sqrt(dx * dx + dy * dy + dz * dz);
        e -= (b.mass * b2.mass) / distance;
      }
    }
    return e;
  }
  void offset_momentum(void)
  {
    double px = 0.0, py = 0.0, pz = 0.0;
    int i;
    for (i = 0; i < nbodies; i++) {
      px += bodies[i].vx * bodies[i].mass;
      py += bodies[i].vy * bodies[i].mass;
      pz += bodies[i].vz * bodies[i].mass;
    }
    bodies[0].vx = - px / solar_mass;
    bodies[0].vy = - py / solar_mass;
    bodies[0].vz = - pz / solar_mass;
  }
};

int main(int argc, char ** argv)
{
  int n = atoi(argv[1]);
  int i;
  theBodies bodies;  
  bodies.offset_momentum();  

  cout << setprecision(9) << setiosflags(ios_base::fixed) << bodies.energy() << endl;
    
  for (i = 1; i <= n; i++) bodies.advance(0.01);
    
  cout << bodies.energy() << endl;
  
  return 0;
}
