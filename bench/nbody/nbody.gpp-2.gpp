/* The Computer Language Shootout
   http://shootout.alioth.debian.org/
   originally by: Christoph Bauer & David McCombs
   smaller code: Greg Buchholz */

#include <iostream>  
#include <iomanip>  
#include <numeric>   
#include <valarray> 
#include <vector>

#define solar_mass (4 * M_PI * M_PI)
#define days_per_year 365.24
#define NBODIES 5
#define DIM 3

using namespace std;
typedef valarray<double> V;

template <class T> T mag(const valarray<T>& v){ return sqrt((v*v).sum()); }

class Planet {   
 public: double mass; V pos; V vel;
         Planet () : pos(DIM), vel(DIM) {};
         Planet (double m, double  x, double  y, double  z,
                           double vx, double vy, double vz) : pos(DIM),vel(DIM)
         {
            mass = m; pos[0] =  x; pos[1] =  y; pos[2] =  z;
                      vel[0] = vx; vel[1] = vy; vel[2] = vz;
         };
};

V momentum(V& m, const Planet& p){ return m + p.mass * p.vel; }

void offset_momentum(vector<Planet>& b) 
{
    V z(0.0,DIM);
    b[0].vel = (-1/solar_mass) * accumulate(b.begin()+1,b.end(), z, momentum);
}

double mv_sqrd(double acc, const Planet& p)
{
    return acc + p.mass * (p.vel * p.vel).sum();
}

double energy(const vector<Planet>& b)
{
    double kinetic, potential = 0;

    kinetic = 0.5 * accumulate(b.begin(),b.end(), 0.0, mv_sqrd);
    
    for(int i=0; i<NBODIES; i++)
        for(int j=i+1; j<NBODIES; j++)
            potential += b[i].mass * b[j].mass / mag((V)(b[i].pos - b[j].pos));
    
    return kinetic - potential;
}

void advance(vector<Planet>& b, double dt)
{
    for(int i=0; i<NBODIES; i++)
    {
        for(int j=i+1; j<NBODIES; j++)
        {
            double dx = b[i].pos[0] - b[j].pos[0];
            double dy = b[i].pos[1] - b[j].pos[1];
            double dz = b[i].pos[2] - b[j].pos[2];
            double dist = sqrt(dx*dx + dy*dy + dz*dz);
            double mag  = dt / (dist * dist * dist);
#define up(lidx,n,sign,ridx,v) b[lidx].vel[n] sign##= b[ridx].mass * mag * d##v
            up(i,0,-,j,x); up(i,1,-,j,y); up(i,2,-,j,z);
            up(j,0,+,i,x); up(j,1,+,i,y); up(j,2,+,i,z);
        }
        b[i].pos += dt * b[i].vel;
    }
}

Planet dpy(Planet p) { p.vel *= days_per_year; return p; }

int main(int argc, char *argv[])
{
  Planet sun(solar_mass, 0, 0, 0, 0, 0, 0);
  Planet jupiter( 9.54791938424326609e-04 * solar_mass,
    4.84143144246472090e+00,-1.16032004402742839e+00,-1.03622044471123109e-01,
    1.66007664274403694e-03, 7.69901118419740425e-03,-6.90460016972063023e-05);
  Planet saturn( 2.85885980666130812e-04 * solar_mass,
    8.34336671824457987e+00, 4.12479856412430479e+00,-4.03523417114321381e-01,
   -2.76742510726862411e-03, 4.99852801234917238e-03, 2.30417297573763929e-05); 
  Planet uranus( 4.36624404335156298e-05 * solar_mass,
    1.28943695621391310e+01,-1.51111514016986312e+01,-2.23307578892655734e-01,
    2.96460137564761618e-03, 2.37847173959480950e-03,-2.96589568540237556e-05);
  Planet neptune( 5.15138902046611451e-05 * solar_mass,
    1.53796971148509165e+01,-2.59193146099879641e+01, 1.79258772950371181e-01,
    2.68067772490389322e-03, 1.62824170038242295e-03,-9.51592254519715870e-05);

  Planet tmp[] = {sun, jupiter, saturn, uranus, neptune};
  vector<Planet> bodies(tmp,tmp+NBODIES);
  transform(bodies.begin(),bodies.end(),bodies.begin(),dpy);
  offset_momentum(bodies);
  cout << setprecision(9) << energy(bodies) << endl;
  
  for(long i=atoi(argv[1]); i>0; i--) advance(bodies,0.01);

  cout << energy(bodies) << endl;
 
  return 0;
}
