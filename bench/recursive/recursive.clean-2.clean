/* The Computer Language Shootout 
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy (Clean novice) */
  
module recursive
import StdEnv, LanguageShootout

Start = 
   "Ack(3," +++ (toString n) +++ "): " +++ (toString (ack 3 n)) +++ "\n" +++
   "Fib(" +++ (toStringWith 1 a) +++ "): " +++ (toStringWith 1 (fibr a)) +++ "\n" +++
   "Tak(" +++ csv +++ "): " +++ (toString (tak (3*m)(2*m) m)) +++ "\n" +++
   "Fib(3): " +++ (toString (fib 3)) +++ "\n" +++
   "Tak(3.0,2.0,1.0): " +++ (toStringWith 1 (takr 3.0 2.0 1.0)) +++ "\n"
   where 
   n = argi
   m = n-1
   a = 28.0 + toReal n
   csv = toString (3*m) +++ "," +++ toString (2*m) +++ "," +++ toString m

ack m n
   | m == 0   = n + 1
   | n == 0   = ack (m - 1) 1   
              = ack (m - 1) (ack m (n - 1))
fib n
   | n < 2   = 1
   = fib (n - 1) + fib (n - 2) 
   
fibr n
   | n < 2.0   = 1.0
   = fibr (n - 1.0) + fibr (n - 2.0) 

   
tak x y z
   | y < x   = tak (tak (x-one) y z)(tak (y-one) z x)(tak (z-one) x y)
             = z   
             
takr x y z
   | y < x   = takr (takr (x-1.0) y z)(takr (y-1.0) z x)(takr (z-1.0) x y)
             = z
