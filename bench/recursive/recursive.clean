/* The Computer Language Shootout 
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy (Clean novice) */
  
module recursive
import StdEnv, LanguageShootout

Start = 
   ( line "Ack(3," [n+4] (toString (ack 3 (n+4))) ) +++
   ( line "Fib(" [n+9] (toString (fib (n+9))) ) +++
   ( line "Fib(" [n+32] (toStringWith 1 (fib ((toReal n)+32.0))) ) +++
   ( line "Tak(" [n*3,n*2,n] (toString (tak (n*3) (n*2) n)) ) +++
   ( line "Tak(" [m*3,m*2,m] 
      (toStringWith 1 (tak ((toReal m)*3.0) ((toReal m)*2.0) (toReal m))) )
   where 
   n = argi
   m = n+2   


ack m n
   | m == 0   = n + 1
   | n == 0   = ack (m - 1) 1   
              = ack (m - 1) (ack m (n - 1))
fib n
   | n < two   = unity
   = fib (n - one) + fib (n - two) 
   where 
   unity = (n + one)/(n + one)
   two = one + one
   
tak x y z
   | y < x   = tak (tak (x-one) y z)(tak (y-one) z x)(tak (z-one) x y)
             = z   

line a b c = a +++ csv b +++ "): " +++ c +++ "\n"
csv [a] = toString a
csv [a:b] = toString a +++ "," +++ csv b


