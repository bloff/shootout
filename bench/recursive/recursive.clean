/* The Computer Language Shootout 
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy (Clean novice) */
  
module recursive
import StdEnv, LanguageShootout

Start = 
   ( line "Ack(3," [n] (toString (ack 3 n)) ) +++
   ( line "Fib(" [toStringWith 1 a] (toStringWith 1 (fib a)) ) +++
   ( line "Tak(" [3*m,2*m,m] (toString (tak (3*m) (2*m) m)) ) +++
   "Fib(3): " +++ (toString (fib 3)) +++ "\n" +++
   "Tak(3.0,2.0,1.0): " +++ (toStringWith 1 (tak 3.0 2.0 1.0)) +++ "\n"
   where 
   n = argi
   m = n-1
   a = 28.0 + toReal n

ack m n
   | m == 0   = n + 1
   | n == 0   = ack (m - 1) 1   
              = ack (m - 1) (ack m (n - 1))
fib n
   | n < two   = unity
   = fib (n - one) + fib (n - two) 
   where 
   unity = (n + one)/(n + one)
   two = one + one
   
tak x y z
   | y < x   = tak (tak (x-one) y z)(tak (y-one) z x)(tak (z-one) x y)
             = z   

line a b c = a +++ csv b +++ "): " +++ c +++ "\n"
csv [a] = toString a
csv [a:b] = toString a +++ "," +++ csv b
