;; ---------------------------------------------------------------------
;; The Great Computer Language Shootout
;; http://shootout.alioth.debian.org/
;;
;; Code based on / inspired by existing, relevant Shootout submissions
;;
;; Utilises extension, 'format'. If not available can be installed by
;; issuing the following shell command [as 'root']:
;; 
;; # chicken-setup format
;;
;; Contributed by Anthony Borla
;; ---------------------------------------------------------------------

(require-extension format)

(declare (fixnum) (disable-interrupts) (unsafe) (block))

; -------------------------------

(define (ack m n)
  (cond ((zero? m) (+ n 1))
        ((zero? n) (ack (- m 1) 1))
        (else (ack (- m 1) (ack m (- n 1))))))

(define (fib n)
  (cond ((< n 2) 1)
	(else (+ (fib (- n 2)) (fib (- n 1))))))

(define (tak x y z)
  (cond ((not (< y x)) z)
        (else (tak (tak (- x 1) y z) (tak (- y 1) z x) (tak (- z 1) x y)))))

; -------------------------------

(define (main args)
  (let ((n (if (null? args)
               1
               (string->number (car args)))))

    (format #t "Ack(3,~A): ~A~%" n (ack 3 n))
    (format #t "Fib(~1F): ~,1F~%" (+ 27 n) (fib (+ 27 n)))

    (set! n (- n 1))
    (format #t "Tak(~A,~A,~A): ~A~%" (* n 3) (* n 2) n (tak (* n 3) (* n 2) n))

    (format #t "Fib(3): ~A~%" (fib 3))
    (format #t "Tak(3.0,2.0,1.0): ~,1F~%" (tak 3 2 1))))

; -------------------------------

(main (command-line-arguments))

