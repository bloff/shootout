import Control.Monad
import Data.IORef
import System

class Toggle a where
    activate :: a -> IO ()
    value :: a -> IO Bool

newtype ToggleC    = ToggleC (IORef Bool)
newtype NthToggleC = NthToggleC (IORef (Bool, Int, Int))

newToggle s = newIORef s >>= return . ToggleC
newNthToggle s m = newIORef (s,0,m) >>= return . NthToggleC

instance Toggle ToggleC where 
    activate (ToggleC t) = modifyIORef t not
    value (ToggleC t)    = do { v <- readIORef t;  v `seq` return v }

instance Toggle NthToggleC where
    activate (NthToggleC t) = modifyIORef t (\x@(s,v,m) -> x `seq` if v+1 == m then (not s,0,m) else (s,v+1,m))
    value    (NthToggleC t) = do { (s,_,_) <- readIORef t; s `seq` return s }

out b = putStrLn $ if b then "true" else "false"

main = do [num] <- getArgs
	  toggle<- newToggle True
	  replicateM_ (read num) (activate toggle >> value toggle)
	  value toggle>>= out
	  ntoggle<- newNthToggle True 3
	  replicateM_ (read num) (activate ntoggle >> value ntoggle)
	  value ntoggle>>= out
