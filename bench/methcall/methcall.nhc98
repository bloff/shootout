import System

class Toggle a where
    activate :: a -> a
    value    :: a -> Bool

newtype Simple = Simple Bool
instance Toggle Simple where
    activate (Simple b) = Simple (not b)
    value (Simple b)    = b

data Nth = Nth Simple Int Int
instance Toggle Nth where
    activate (Nth t count lim) | count==lim = Nth (activate t) 1 lim
                               | otherwise  = Nth t (count+1) lim
    value (Nth t count lim)    = value t

newSimple = Simple True
newNth n  = Nth newSimple 1 n

showBool b = if b then "true" else "false"

main = do
    n <- getArgs >>= return . (\a -> case a of [num]-> read num; _->1)
    putStrLn $ showBool $ value $ foldl' (\t _-> activate t) newSimple [1..n]
    putStrLn $ showBool $ value $ foldl' (\t _-> activate t) (newNth 3) [1..n]

foldl' f a []     = a
foldl' f a (x:xs) = let a' = f a x in a' `seq` foldl' f a' xs
