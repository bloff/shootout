#!/usr/bin/mzscheme -r
;;; The Great Computer Language Shootout
;;; http://shootout.alioth.debian.org/
;;;
;;; spellcheck benchmark
;;;
;;; Contributed by Ruhi Bloodworth
;;; Revised for MzScheme by Brent Fulgham

(require (lib "26.ss" "srfi"))

; read the word dictionary
; read words from standard input and print those words 
;    which do not appear in the dictionary
; both the dictionary and standard input have only one word per line
; no line will exceed 128 characters (including newline)

(define dict (make-hash-table 'equal))

;; Note:  Uses text file procedures from the Scheme Cookbook
;; http://schemecookbook.org/Cookbook/FileReadingLines
(define (for-each-line-in-file filename proc . mode)
  (with-input-from-file
   filename
   (lambda () (apply for-each-line proc (current-input-port) mode))))

(define (for-each-line proc . port+mode)
  (let while ()
    (let ((line (apply read-line port+mode)))
      (unless (eof-object? line)
        (proc line)
        (while)))))

(for-each-line-in-file "Usr.Dict.Words" (cute hash-table-put! dict <> #t))

(for-each-line (lambda (word)
		 (hash-table-get dict word
                                 (lambda () (printf "~a~%" word))))
               (current-input-port))

