%% The Great Computer Language Shootout
%% contributed by Isaac Gouy (Erlang novice)
%%
%% http://shootout.alioth.debian.org/
%%
%% Usage: start from command line with
%%     erlc moments.erl
%%     erl -noinput -s moments main < InputFile

-module(moments). 
-export([main/1, init/0]). 
-import(lists, [sort/1, foldl/3, nth/2, sum/1, map/2, tokens/2]).


accumulate([], Mean, Ad, Av, As, Ak) ->
    {Ad, Av, As, Ak};
accumulate([H|T], Mean, Ad, Av, As, Ak) ->
    D = H - Mean,
    D2 = D * D,
    accumulate(T, Mean, Ad + abs(D), Av + D2, As + (D2 * D), Ak + (D2 * D2)).


median(L, N) -> medianS(sort(L), N).


medianS(L, N) ->
    Mid = N div 2,
    case N rem 2 of
        0 -> (nth(Mid, L) + nth(Mid + 1, L)) / 2;
        1 -> nth(Mid, L)
    end.


skew(N, As, V, SD) when V > 0.0 -> As / (N * V * SD);
skew(N, As, V, SD) -> 0.


kurtosis(N, Ak, V) when V > 0.0 -> Ak / (N * V * V) - 3;
kurtosis(N, Ak, V) -> 0.


stats(L) -> 
    N = length(L),
    io:fwrite("~s~w~n", ["n:                  ", N]),
    io:fwrite("~s~f~n", ["median:             ", median(L, N)]),

    Mean = sum(L) / N,
    io:fwrite("~s~f~n", ["mean:               ", Mean]),

    {Ad, Av, As, Ak} = accumulate(L, Mean, 0.0, 0.0, 0.0, 0.0),
    io:fwrite("~s~f~n", ["average_deviation:  ", Ad / N]),

    Variance = Av / (N - 1),
    Standard_deviation = math:sqrt(Variance),
    io:fwrite("~s~f~n", ["standard_deviation: ", Standard_deviation]),
    io:fwrite("~s~f~n", ["variance:           ", Variance]),
    io:fwrite("~s~f~n", ["skew:               ", skew(N, As, Variance, Standard_deviation)]),
    io:fwrite("~s~f~n", ["kurtosis:           ", kurtosis(N, Ak, Variance)]).

main(A) ->
    spawn(?MODULE,init,[]).


init() ->
    Port = open_port({fd, 0, 1},[]),
    receive
	{Port, {data, Chars}} -> Chars
    end,
    L = string:tokens(Chars, "\n"),
    Ints = map(fun(X) -> list_to_integer(X) end, L),
    stats(Ints), 
    halt().
