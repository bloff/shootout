/* The Great Computer Language Shootout 
   contributed by Isaac Gouy (Clean novice)

   http://shootout.alioth.debian.org/

   Partly transliterated from Haskell solution

To compile:	
   cleanIDE.exe --batch-force-build "e:\shoot\contrib\clean\moments.prj"

To run:
   moments.exe -con < input.txt > output.txt
*/


module moments
import StdEnv, StdOverloadedList, LanguageShootout

Start world  
   # (console, world) = stdio world
   # (a,suma) = sumNumbers console 0.0 []
   = resultstring suma a 

   where
   sumNumbers f suma a
      # (ok,r,f) = freadr f
      | not ok = (a, suma)
      = sumNumbers f (suma+r) [r:a]
 
   resultstring suma a = 
      "n:                  " +++ (toString n) +++ "\n" +++ 
      "median:             " +++ (toStringWith 6 median) +++ "\n" +++ 
      "mean:               " +++ (toStringWith 6 mean) +++ "\n" +++ 
      "average_deviation:  " +++ (toStringWith 6 adev) +++ "\n" +++ 
      "standard_deviation: " +++ (toStringWith 6 sdev) +++ "\n" +++ 
      "variance:           " +++ (toStringWith 6 var) +++ "\n" +++ 
      "skew:               " +++ (toStringWith 6 skew) +++ "\n" +++ 
      "kurtosis:           " +++ (toStringWith 6 kurt) +++ "\n"     
      
      where
      n = toReal (Length a)
      mean = suma / n          
      dev = [x - mean \\ x <- a]
      adev = (Sum [abs x \\ x <- dev]) / n      
      var = (Sum [x*x \\ x <- dev]) / (n-1.0)
      sdev = sqrt var
      skew = (Sum [x*x*x \\ x <- dev]) / (n*var*sdev)
      kurt = (Sum [x*x*x*x \\ x <- dev]) / (n*var*var)-3.0

      median = middle (sort a)
         where
         middle b
            | isOdd (entier(n)) = b!!mid
            = (b!!(mid-1) + b!!mid) / 2.0
         mid = entier(n)/2
