/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy

   Transliterated from Java solution
   needs ../Include/jakarta-oro-2.0.7.jar from jakarta-oro-2.0.7.zip

To compile:   
   nicec --sourcepath .. -d . --classpath ..\Include\jakarta-oro-2.0.7.jar -a regexmatch.jar regexmatch
   jar umf ..\Include\oro-classpath.txt regexmatch.jar

To run:
   java -jar regexmatch.jar < input.txt 9000
*/


import java.io.*;
import org.apache.oro.text.regex.*;

import ackermann; // reuse toSinglePositiveInt

void main(String[] args){
   var n = toSinglePositiveInt(args);
   let lines = new ArrayList();

   let in = new BufferedReader(new InputStreamReader(System.in));
   var ?String line;
   while ((line = in.readLine()) != null) 
      lines.add(line);
   in.close;
   
   let regex =
        "(?: ^ | [^\\d\\(])   # must be preceeded by non-digit\n" +
        "(?:                  # area code is 3 digits\n" +
        " \\((\\d\\d\\d)\\)   # match 1: with parens\n" +
        "|                    # or\n" +
        " (\\d\\d\\d)         # match 2: without parens\n" +
        ")                    # if match1 then match right paren\n" +
        "[ ]                  # area code followed by one space\n" +
        "(\\d\\d\\d)          # match 3: prefix of 3 digits\n" +
        "[ -]                 # separator is either space or dash\n" +
        "(\\d\\d\\d\\d)       # match 4: last 4 digits\n" +
        "(?:\\D|$)            # must be followed by a non-digit\n";
   
   let compiler = new Perl5Compiler();
   let pattern = compiler.compile(regex, Perl5Compiler.EXTENDED_MASK);
   
   var matcher = new Perl5Matcher();
   let phoneNumbers = new ArrayList();
   var String s;
   var MatchResult m;

   while (n-- > 0){
      phoneNumbers.clear;
      
      for (each : lines){
         if (matcher.contains(each, pattern)) {
            m = matcher.getMatch();            
            if (m.group(1) != null) 
               s = "(" + m.group(1) + ") " +  m.group(3) + "-" + m.group(4);          
            else 
               s = "(" + m.group(2) + ") " +  m.group(3) + "-" + m.group(4);
				
            phoneNumbers.add(s);
         }      
      }
   }
   
   var count = 0;
   for (each : phoneNumbers) println( ++count + ": " + each);     
}


