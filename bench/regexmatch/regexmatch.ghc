-- By Ray Racine (Haskell newbie)
-- Usage for 10 iterations:: regexp 10 < Input.txt

import Control.Monad
import Data.Maybe
import System (getArgs)
import RegexString (matchRegex, mkRegex)

phoneMatch = matchRegex $ mkRegex regex
	     where regex = 
		       "(^|[^0-9\\(]+)" ++
		       "(" ++ 
	               "\\(([0-9][0-9][0-9])\\)" ++
	               "|" ++
	               "([0-9][0-9][0-9])" ++
	               ")" ++
	               " " ++
	               "([0-9][0-9][0-9])" ++
	               "[ -]"  ++
	               "([0-9][0-9][0-9][0-9])" ++
		       "($|[^0-9])"

canonicalPhone matchGrps = "(" ++ areacode ++ ") " ++ phnum
                           where areacode = let (_,b) = splitAt 2 matchGrps in
					    (head b) ++ (head . tail $ b)
				 phnum = let (_,b) = splitAt 4 matchGrps in
					 (head b) ++ "-" ++ (head . tail) b	

matches l = return $ concatMap (fun . phoneMatch) l
    where fun Nothing = []
	  fun (Just v)= [canonicalPhone v]

main = do [num] <- getArgs
	  lined <- getContents >>= return . lines
	  foldM (\n _ -> matches lined >>= \v -> n `seq` return $ n + length v) 0 [2..(read num)] 
	  matches lined >>= foldM_ (\n v -> putStrLn (show n ++ ": " ++ v) >> return (n+1)) 1
