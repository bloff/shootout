-- $Id: regexmatch.gnat,v 1.1 2005-04-01 13:26:33 obry-guest Exp $
-- http://shootout.alioth.debian.org/
--
-- Contributed by Pascal Obry on 2005/04/01

with Ada.Command_Line;      use Ada.Command_Line;
with Ada.Integer_Text_IO;   use Ada.Integer_Text_IO;
with Ada.Text_IO;           use Ada.Text_IO;
with GNAT.Spitbol.Patterns; use GNAT.Spitbol.Patterns; use GNAT.Spitbol;

procedure Regexmatch is

   N            : constant Positive := Positive'Value (Argument (1));

   Max_Line     : constant := 100;

   Dig_Str      : constant String := "0123456789";
   Dig          : constant Pattern := Any (Dig_Str);
   Not_Dig      : constant Pattern := NotAny (Dig_Str);
   Sep1         : constant Pattern := Any (" ");
   Sep2         : constant Pattern := Any (" -");
   Start        : constant Pattern := Pos (0) or (Not_Dig & NotAny ("("));
   Ending       : constant Pattern := RPos (0);
   Digs3        : constant Pattern := Dig & Dig & Dig;
   Digs4        : constant Pattern := Dig & Dig & Dig & Dig;

   type String_Access is access String;

   Lines   : array (1 .. Max_Line) of String_Access;
   L       : Natural := 0;

   Buffer  : String (1 .. 1_024);
   Last    : Natural;

   Result  : String := ": (...) ...-....";
   Count   : Natural := 0;

   subtype Area_Code is Positive range 4 .. 6;
   subtype Prefix is Positive range 9 .. 11;
   subtype Number is Positive range 13 .. 16;

   S_Area   : aliased VString;
   S_Prefix : aliased VString;
   S_Number : aliased VString;

   Matcher  : constant Pattern :=
                Start & ("(" & Digs3 ** S_Area & ")" or Digs3 ** S_Area)
                & Sep1 & Digs3 ** S_Prefix
                & Sep2 & Digs4 ** S_Number & (Not_Dig or Ending);

begin
   begin
      loop
         Get_Line (Buffer, Last);
         L := L + 1;
         Lines (L) := new String'(Buffer (1 .. Last));
      end loop;
   exception
      when others => null;
   end;

   for Iter in 1 .. N loop
      for K in 1 .. L loop
         if Match (Lines (K).all, Matcher) and then Iter = N then
            Result (Area_Code) := S (S_Area);
            Result (Prefix)    := S (S_Prefix);
            Result (Number)    := S (S_Number);
            Count := Count + 1;
            Put (Count, Width => 0);
            Put_Line (Result);
         end if;
      end loop;
   end loop;
end Regexmatch;
