module mandelbrot

import StdEnv, LanguageShootout

Start world
	# (console, world)	= stdio world
	# width				= argi
	# console			= console <<< "P4\n" <<< width <<< " " <<< width <<< "\n"
	# pbm				= map (makePBM 0 0) (chunk width (fractal (points width width)))
	# pbm				= map toArray pbm
	# console			= seq (map fwrites pbm) console
	# (ok,world)		= fclose console world
	= world

toArray l = {e \\ e <- l}

mandel_iter :: Int
mandel_iter   = 50

points :: Int Int -> [Complex Real]
points width height
	= points` 0.0 0.0
where
	w	= toReal width
	h	= toReal height
	
	points` x y
		| x == w
			= points` 0.0 (y+1.0)
		| y == h
			= []
		= [(2.0*x/w - 1.5, 2.0*y/h - 1.0) : points` x (y+1.0)]

fractal :: [Complex Real] -> [Int]
fractal []
	= []
fractal [p:ps]
	= [fractal` (0.0 , 0.0) mandel_iter p : fractal ps]

fractal` :: !(Complex Real) !Int !(Complex Real) -> Int
fractal` z iter c
	| (((r*r) + (i*i)) > limit)	= 0
	| iter == 1			= mandel_iter
	| otherwise			= fractal` z` (iter-1) c
where
	(r,i)	= z*z+c
	z`		= (r,i)
	limit	= 4.0


makePBM :: Int Int [Int] -> [Char]
makePBM i acc []     = [(toChar (acc * 2^(8-i)))]
makePBM i acc [x:xs] | i==8      = [toChar acc : makePBM 0 0 [x:xs]]
                     | otherwise = makePBM (i+1) n xs
where
	n = if (x==mandel_iter) (acc*2+1) (acc*2)

chunk :: Int [Int] -> [[Int]]
chunk width [] = []
chunk width c  = [fst split : chunk width (snd split)]
where
	split = splitAt width c

// Complex

:: Complex a :== (!a,!a)

instance + (Complex a) | + a
where
	(+) (rl,il) (rr,ir)
		= (rl+rr,il+ir)

instance * (Complex a) | *,+,- a
where
	(*) (rl,il) (rr,ir)
		= (rl*rr - il*ir, rl*ir + rr*il)
