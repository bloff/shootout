;; ---------------------------------------------------------------------
;; The Great Computer Language Shootout
;; http://shootout.alioth.debian.org/
;;
;; Derived from the Chicken variant, which was
;; Contributed by Anthony Borla

(module mandelbrot mzscheme

  ;; -------------------------------
  
  (define +limit-sqr+ 4.0)

  (define +iterations+ 50)

  ;; -------------------------------
  
  (define (mandelbrot iterations x y n)
  (let ((cr (- (/ (* 2.0 x) n) 1.5)) (ci (- (/ (* 2.0 y) n) 1.0)))
    (let loop ((i 0) (zr 0.0) (zi 0.0))
      (let ((zrq (* zr zr)) (ziq (* zi zi)))
        (cond
          ((> i iterations) 1)
          ((> (+ zrq ziq) +limit-sqr+) 0)
          (else (loop (add1 i) (+ (- zrq ziq) cr) (+ (* 2.0 zr zi) ci)))) ))))
  
  ;; -------------------------------
  
  (define (main args)
    (let ((n (string->number (vector-ref args 0)))
	  (bitnum 0)
	  (byteacc 0))

      (printf "P4\n~a ~a\n" n n)

      (let loop-y ((y 0))

	(if (> y (- n 1)) '()
	    ;; else
	    (begin
	      (let loop-x ((x 0))

		(if (> x (- n 1)) '()
		    ;; else
		    (begin
		      (set! bitnum (add1 bitnum))
		      (set! byteacc (+ (* 2 byteacc) (mandelbrot +iterations+ x y n)))

		      (cond
		       ((= bitnum 8)
			(write-byte byteacc)
			(set! bitnum 0)
			(set! byteacc 0))

		       ((= x (- n 1))
			(write-byte (* byteacc (expt 2 (- 8 (modulo n 8)))))
			(set! bitnum 0)
			(set! byteacc 0)))

		      (loop-x (add1 x)) )))

	      (loop-y (add1 y)) ))) ))

  ;; -------------------------------
  
  (main (current-command-line-arguments)))
