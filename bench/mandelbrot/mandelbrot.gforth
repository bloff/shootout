\ The Great Computer Language Shootout
\ http://shootout.alioth.debian.org/
\ 
\ contributed by  Greg Buchholz
\ run: gforth mandel.gforth 600 >out.pbm


4.0e0 fconstant limit_sqr
variable bit_num 0 bit_num !
variable byte_acc 0 byte_acc !

0. argc @ 1- arg >number 2drop drop constant NUM

: s>f s>d d>f ;
: 2*! dup @ 2* swap ! ;
: inc! dup @ 1+ swap ! ;
: 2fdup fover fover ;
: 2fover_swap ( F: a b c d -- F: a b a b c d )
    3 fpick frot frot
    3 fpick frot frot ;
: add_cmplx ( F: Ar Ai Br Bi -- F: Cr Ci )
    frot f+
    frot frot f+ fswap ;
: mag_sqr ( F: Zr Zi -- F: m )
    fdup f* fswap fdup f* f+ ;
: sqr_cmplx ( F: Ar Ai -- F: Br Bi )
    2fdup fdup f* fswap fdup f*
    fswap f- frot frot f* 2.0e0 f* ;
: mandel ( F: Cr Ci Zr Zi -- F: Zr Zi ) 
    sqr_cmplx add_cmplx ;
: iterate 
    50 0 ?do 
           2fover_swap
           mandel 2fdup mag_sqr
           limit_sqr f> if leave endif
         loop ;
: show_byte byte_acc @ emit ;
: preamble ." P4" cr NUM dup . 0 u.r cr ; 
: cmplx_plane ( y x -- F: Cr Ci)
    s>f 2.0e f* NUM s>f f/ 1.5e f-
    s>f 2.0e f* NUM s>f f/ 1.0e f- ;
: for_x NUM 0 ?do dup i
                cmplx_plane
                0.0e0 0.0e0 iterate 
                
                byte_acc 2*!
                mag_sqr limit_sqr f<= if byte_acc inc! endif
                bit_num inc!
                bit_num @ 8 = if show_byte 0 bit_num ! 0 byte_acc !
                              else i NUM 1- = if byte_acc @ 8 NUM 8 mod -  
                                                 lshift byte_acc ! 
                                                 show_byte
                                                 0 bit_num !
                                                 0 byte_acc !
                                              endif
                              endif
                fdrop fdrop
              loop ;
: for_y NUM 0 ?do i for_x loop ;

preamble
for_y
bye
