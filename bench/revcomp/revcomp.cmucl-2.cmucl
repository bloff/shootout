;;; -*- mode: lisp -*-
;;; http://shootout.alioth.debian.org/
;;; written by Patrick Frankenberger
;;; modified by Ralph Richard Cook

(defparameter *line* nil)

(defun complem (code)
  (declare (type base-char code))
  (let ((upcode (char-upcase code)))
    (cond ((char= upcode #\A) #\T)
          ((char= upcode #\C) #\G)
          ((char= upcode #\G) #\C)
          ((char= upcode #\T) #\A)
          ((char= upcode #\U) #\A)
          ((char= upcode #\M) #\K)
          ((char= upcode #\R) #\Y)
          ((char= upcode #\Y) #\R)
          ((char= upcode #\K) #\M)
          ((char= upcode #\V) #\B)
          ((char= upcode #\H) #\D)
          ((char= upcode #\D) #\H)
          ((char= upcode #\B) #\V)
          (t upcode))))


(defun write-fix-lines (data)
  (do ((from 0)
       (to (1- (length data))))
      ((> from to) nil)
      (declare (fixnum from to))
    (let ((fromchar (aref data from))
          (tochar (aref data to)))
      (declare (base-char fromchar tochar))
      (cond ((char= fromchar #\Newline) (incf from))
            ((char= tochar #\Newline) (decf to))
            (t (progn
                 (setf (aref data from) (complem tochar))
                 (setf (aref data to) (complem fromchar))
                 (incf from)
                 (decf to))))))
  (write-string data))

(defun write-reverse-complement (title data)
  (write-line title)
  (write-fix-lines data))

(defun read-pop (stream eof-errorp eof-value)
  (if *line* (pop *line*)
      (read-line stream eof-errorp eof-value)))

(defun get-body ()
  (with-output-to-string (s)
      (let ((line ""))
        (loop 
          (setf line (read-pop *standard-input* nil nil))
          (cond ((null line) (return))
                ((char= (aref line 0) #\>) (progn (push line *line*) (return)))
                (t (progn (write-string line s) (write-char #\Newline s))))))))

(defun main ()
  (do ((title (read-pop *standard-input* nil nil)
              (read-pop *standard-input* nil nil)))
      ((null title) nil)
    (write-reverse-complement title (get-body))))
