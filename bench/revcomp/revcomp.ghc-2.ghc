import Data.Char(toUpper)
import Data.Array
import System.IO

{-  The Computer Language Shootout
    http://shootout.alioth.debian.org/
    contributed by Sebastian Sylvan
-}

complement i = complArr ! i'
             where i' = toUpper i

complArr = array ('A','Z') (self ++ complAssoc)
           where self = az `zip` az
                 az = ['A'..'Z']
complAssoc = [
              ('A','T'),('C','G'),('G','C'),('T','A'),('U','A'),('M','K'),('R','Y'),('W','W'),
              ('S','S'),('Y','R'),('K','M'),('V','B'),('D','H'),('D','H'),('B','V'),('N','N')
             ] 

process header@('>':xs) = putStrLn header
process x = putStrLn (map complement x)
        
loop h = 
    do eof <- hIsEOF h
       case eof of
        True -> return ()
        False -> do xs <- hGetLine h
                    process xs
                    loop h

main = loop stdin
