-----------------------------------------------------------------------
-- The Computer Language Benchmarks Game
-- http://shootout.alioth.debian.org/
--
-- contributed by Jim Rogers
-- gnatmake -gnat05 -O3 -gnatVn -gnatp
-----------------------------------------------------------------------
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Characters.Handling; use Ada.Characters.Handling;
with Ada.Unchecked_Deallocation;

procedure Revcomp is
   type First_Index_Type is range 1..16;
   type Second_Index_Type is range 1..2;
   type Correspondence_Array is array(First_Index_type, Second_Index_type)
                                of Character;

   type Tuple;
   type Tuple_Access is access Tuple;
   type Tuple is record
      Value : Character := 'X';
      Next  : Tuple_Access := null;
   end record;
   Stack : Tuple_Access := null;

   procedure Push(Item : Character) is
      Temp : Tuple_Access := New Tuple'(Item, Stack);
   begin
      Stack := Temp;
   end Push;

   procedure Pop(Item : out Character) is
      procedure Free is new Ada.Unchecked_Deallocation(Tuple, Tuple_Access);
      Temp : Tuple_Access;
   begin
      if Stack /= null then
         Temp := Stack;
         Item := Stack.Value;
         Stack := Stack.Next;
         Free(Temp);
      end if;
   end Pop;

   procedure Print_Stack(Length : Natural) is
      Count : natural := 0;
      Value : Character;
   begin
      While Stack /= null loop
         Count := Count + 1;
         Pop(Value);
         Put(Value);
         if Count >= Length then
            New_Line;
            Count := 0;
         end if;
      end loop;
      if Count > 0 then
         New_Line;
      end if;
   end Print_Stack;

   function Complement(Item : Character) return Character is

      Correspondence : Correspondence_Array := (('A', 'T'),
                                                ('C', 'G'),
                                                ('G', 'C'),
                                                ('T', 'A'),
                                                ('U', 'A'),
                                                ('M', 'K'),
                                                ('R', 'Y'),
                                                ('W', 'W'),
                                                ('S', 'S'),
                                                ('Y', 'R'),
                                                ('K', 'M'),
                                                ('V', 'B'),
                                                ('H', 'D'),
                                                ('D', 'H'),
                                                ('B', 'V'),
                                                ('N', 'N'));
      Temp : Character := To_Upper(Item);
      Result : Character;
   begin
      for I in First_Index_Type'range loop
         if Correspondence(I, 1) = Temp then
            Result := Correspondence(I,2);
            exit;
         end if;
      end loop;
      return Result;
   end Complement;

   Input_String : String(1..120);
   Input_Length : Natural;
   Max_Output_Length : Natural := 0;

begin
   while not End_Of_File(Standard_Input) loop
      Get_Line(Item => Input_String, Last => Input_Length);
      if Input_String(1) = '>' or Input_String(1) = ';' then
         --------------------------------------------------
         -- Print reverse complement in memory, if any
         --------------------------------------------------
         if Max_Output_Length > 0 then
            Print_Stack(Max_Output_Length);
         end if;
         -------------------------------------------------
         -- Print sequence info
         -------------------------------------------------
         Put_Line(Input_String(1..Input_Length));
         Max_Output_Length := 0;
      else
         if Max_Output_Length = 0 then
            Max_Output_Length := Input_Length;
         end if;
         -------------------------------------------------
         -- Push complemented characters on stack
         -------------------------------------------------
         for I in 1..Input_Length loop
            Push(Complement(Input_String(I)));
         end loop;
      end if;
   end loop;
   ----------------------------------------------------
   -- Print reverse complement of last sequence
   ----------------------------------------------------
   if Stack /= null then
      Print_Stack(Max_Output_Length);
   end if;
end Revcomp;
