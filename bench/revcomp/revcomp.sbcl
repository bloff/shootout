;;; -*- mode: lisp -*-
;;; http://shootout.alioth.debian.org/
;;; written by Patrick Frankenberger


(defun complem (code)
  (declare (type base-char code))
  (let ((upcode (char-upcase code)))
    (cond ((char= upcode #\A) #\T)
	  ((char= upcode #\C) #\G)
	  ((char= upcode #\G) #\C)
	  ((char= upcode #\T) #\A)
	  ((char= upcode #\U) #\A)
	  ((char= upcode #\M) #\K)
	  ((char= upcode #\R) #\Y)
	  ((char= upcode #\Y) #\R)
	  ((char= upcode #\K) #\M)
	  ((char= upcode #\V) #\B)
	  ((char= upcode #\H) #\D)
	  ((char= upcode #\D) #\H)
	  ((char= upcode #\B) #\V)
	  (t upcode))))

(defun write-fix-lines (data)
  (let ((written 0))
    (declare (type (mod 1000000) written))
    (dolist (line data)
      (declare (simple-string line))
      (setf line (map-into line #'complem (nreverse line)))
      (dotimes (i (length line))
	(declare (type (mod 1000000) i))
	(write-char (aref line i))
	(when (= (mod (+ written i 1) 60) 0) (write-char #\Newline)))
      (setf written (+ written (length line))))
    (when (/= (mod written 60) 0) (write-char #\Newline))))

(defun write-reverse-complement (title data)
  (write-line title)
  (write-fix-lines data))

(defun main ()
  (let* ((title "")
	 (data nil))
    (setf title (read-line))
    (do ((line (read-line *standard-input*)
	       (read-line *standard-input* nil 'eof)))
	((eq line 'eof) (write-reverse-complement title data))
      (if (char= (aref line 0) #\>)
	  (progn
	    (when data (write-reverse-complement title data))
	    (setf data nil)
	    (setf title line))
	  (push line data)))))