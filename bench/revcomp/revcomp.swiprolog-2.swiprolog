% ----------------------------------------------------------------------
% The Great Computer Language Shootout                              
% http://shootout.alioth.debian.org/                                
%                                                                   
% Assumes execution using the following command-line usage:
%
%   pl -q -g main -t halt -s SOURCENAME -- USERARG1 ... < in > out
%
% Improved version of previous submission [boxed figures show percentage
% runtime improvement due solely to that change]. Changes include:
%
% * [~20%] 'complement' predicate now uses hash table lookups [via 'flag/3']
%   in place of indexed list lookups
% * [~25%] A combination of:
%   - appending cumulative segment to current segment [hence avoiding
%     the complete traversal of an ever-growing segment each iteration]
%   - reversing current segment on each iteration rather than reversing
%     the, quite large, accumulated segment in a single step
%
% Overall, with above changes in place, current version:
%
% * Should be - very roughly - about 50% faster
% * Use considerably less memory, therefore default stack sizes should be
%   more than adequate
%
% Contributed by Anthony Borla
% ----------------------------------------------------------------------

main :-
  prompt(Old, ''),
  revcomp(user_input),
  prompt(_, Old).

% ------------------------------- %

revcomp(S) :- setup_complement, revcomp_(S, []).

% ------------- %

revcomp_(S, Seg) :- at_end_of_stream(S), !, dump_segment(Seg), nl.

revcomp_(S, Seg) :-
  read_line_to_codes(S, L),
  (is_segment_header(L) -> dump_segment(Seg), NewSeg = [], format('~N~s~N', [L]) ; add_to_segment(L, Seg, NewSeg)),
  !, revcomp_(S, NewSeg).

% ------------------------------- %

%% 62 is ASCII code for character '>' 

is_segment_header([62|_]).

% ------------------------------- %

%% 60 is output line length  

dump_segment([]) :- !.

dump_segment(Seg) :- dump_segment_(Seg, 1, 60).

% ------------- %

dump_segment_([], _, _) :- !.

dump_segment_([H|T], A, N) :-
  complement(H, C), put_code(C), (A =:= N -> nl, A1 is 1; A1 is A + 1),
  !, dump_segment_(T, A1, N).

% ------------------------------- %

add_to_segment([], Seg, Seg) :- !.
add_to_segment(L, [], LR) :- !, reverse(L, LR).
add_to_segment(L, Seg, NewSeg) :- reverse(L, LR), append(LR, Seg, NewSeg).

% ------------------------------- %

%%      "wsatug cyrkmb dhvnAT UGCYRK MBDHVN"
%%  to:
%%      "WSTAAC GRYMKV HDBNTA ACGRYM KVHDBN"

setup_complement :-
  flag(65, _, 84), flag(67, _, 71), flag(71, _, 67), flag(84, _, 65), flag(77, _, 75),
  flag(82, _, 89), flag(87, _, 87), flag(83, _, 83), flag(89, _, 82), flag(75, _, 77),
  flag(86, _, 66), flag(72, _, 68), flag(68, _, 72), flag(66, _, 86), flag(78, _, 78). 

% ------------- %

complement(Code, Complement) :-
  (Code > 90 -> CodeIdx is Code - 32 ; CodeIdx = Code),
  flag(CodeIdx, Complement, Complement).

