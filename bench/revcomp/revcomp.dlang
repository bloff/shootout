/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   Contributed by Dave Fladebo

   compile: dmd -O -inline -release knucleotide.d
*/

import std.outbuffer, std.stream, std.string;

void main()
{
    char[4096]      bufr;
    BufferedStream  bsi = new BufferedStream(std.stream.stdin,bufr.length);
    OutBuffer       ob = new OutBuffer();

    char[] line,desc;
    while(!bsi.eof())
    {
        line = bsi.readLine(bufr);
        if(line.length)
        {
            char c = line[0];
            if(c == '>')
            {
                writeRC(desc,ob,line);
            }
            else if(c != ';')
            {
                ob.write(toupper(line));
            }
        }
    }
    writeRC(desc,ob,line);
}

void writeRC(inout char[] desc,inout OutBuffer ob,char[] line)
{
    if(desc.length)
    {
        char[] bufr = ob.toString.reverse;
        const int lineLen = 60;
        int start = 0;

        std.stdio.writefln(desc);
        foreach(int i, inout char c; bufr)
        {
            revComp(c);
            if((i && !(i % lineLen)) || i == (bufr.length-1))
            {
                char[] lineOut;
                if(i == (bufr.length-1))
                {
                    lineOut = bufr[start..bufr.length];
                }
                else
                {
                    lineOut = bufr[start..i];
                    start = i;
                }
                std.stdio.writefln(lineOut);
            }
        }

        ob = new OutBuffer();
    }

    desc = line.dup;
}

void revComp(inout char c)
{
    switch(c)
    {
    case 'A': c = 'T'; break;
    case 'B': c = 'V'; break;
    case 'C': c = 'G'; break;
    case 'D': c = 'H'; break;
    case 'G': c = 'C'; break;
    case 'H': c = 'D'; break;
    case 'K': c = 'M'; break;
    case 'M': c = 'K'; break;
    case 'R': c = 'Y'; break;
    case 'T': c = 'A'; break;
    case 'V': c = 'B'; break;
    case 'Y': c = 'R'; break;
    default : break;
    }
}
