/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   Contributed by Dave Fladebo

   compile: dmd -O -inline -release revcomp.d
*/

import std.ctype, std.outbuffer, std.stdio, std.string;

int main()
{
    char[4096]      bufr;
    int             offset;
    char[]          desc,line,data,rc = new char[char.max];

    for(char c = 0; c < char.max; c++) rc[c] = revComp(c);

    while(fgets(bufr,bufr.length,stdin))
    {
        line = toString(bufr);
        if(line.length)
        {
            line = line[0..length-1];
            if(line[0] == '>')
            {
                writeRC(desc,data[0..offset],line,rc);
                offset = 0;
            }
            else
            {
                int end = offset + line.length;
                if(data.length < end) data.length = end * 2;
                data[offset..end] = line;
                offset += line.length;
            }
        }
    }
    writeRC(desc,data[0..offset],line,rc);

    return 0;
}

void writeRC(inout char[] desc,char[] data,char[] line,char[] rc)
{
    if(desc.length)
    {
        const int lineLen = 60;
        char[lineLen + 1] lineOut;
        int j,k;

        writefln(desc);
        lineOut[lineLen] = 0;
        foreach(int i, inout char c; data.reverse)
        {
            lineOut[k] = c = rc[c];

            k++;
            if(k == lineLen)
            {
                puts(cast(char*)lineOut);
                j = i + 1;
                k = 0;
            }
        }
        if(k > 0) writefln(data[j..data.length]);
    }

    desc = line.dup;
}

char revComp(char c)
{
    c = std.ctype.toupper(c);

    switch(c)
    {
    case 'A': c = 'T'; break;
    case 'B': c = 'V'; break;
    case 'C': c = 'G'; break;
    case 'D': c = 'H'; break;
    case 'G': c = 'C'; break;
    case 'H': c = 'D'; break;
    case 'K': c = 'M'; break;
    case 'M': c = 'K'; break;
    case 'R': c = 'Y'; break;
    case 'T': c = 'A'; break;
    case 'V': c = 'B'; break;
    case 'Y': c = 'R'; break;
    default :          break;
    }

    return c;
}
