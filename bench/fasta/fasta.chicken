; The Great Computer Language Shootout
; http://shootout.alioth.debian.org/
;
; fasta - benchmark
;
; Contributed by Brent Fulgham (based on Felix Winkelmann's
;      Random implementation)
(require-extension format)

(declare (disable-interrupts) (uses srfi-1))

; The usual pseudo-random number generator
(define IM 139968)
(define IA 3877)
(define IC 29573)
(define LAST 42)

(define (gen-random maximum)
	(set! LAST (modulo (+ (* LAST IA) IC) IM))
	(/ (* maximum LAST) IM))
	
;;; Weighted selection from alphabet
(define (mkCumulativeInt orig total new)
    (if (null? orig) (reverse new)
        (let ((val (+ total (cadar orig))))
	  (mkCumulativeInt (cdr orig) val 
	        (cons (list (caar orig) val) new)))))

(define (mkCumulative aslst)
    (mkCumulativeInt aslst 0.0 '()))

(define (selectRandomInternal lst r)
    ;(format #t "lst: ~A r=~A~%" lst r)
    (if (null? lst) "error"
        (let ((curr (car lst)))
	    (if (< r (cadr curr))
                (car curr)
                (selectRandomInternal (cdr lst) r)))))

(define (selectRandom alphabet)
    (selectRandomInternal alphabet (gen-random 1)))
    
;;; Generate and write FASTA format
(define (writeFasta todo alphabet len)
   (let ((end (if (< todo len) todo len)))
     (when (> todo 0)
         (do ((x 0 (+ x 1))) ((= x end))
	   (format #t "~A" (selectRandom alphabet)))
         (newline)
         (writeFasta (- todo len) alphabet len))))

(define (mkFastaFragment id description alphabet num)
    (let ((todo num)
          (len 60))
        (format #t ">~A ~A~%" id description)
	(writeFasta todo alphabet len)))

;;; Define alphabets
(define dna1
    '(("a" 0.3029549426680)
      ("c" 0.1979883004921)
      ("g" 0.1975473066391)
      ("t" 0.3015094502008)))

(define dna2
    '(("a" 0.250)
      ("c" 0.125)
      ("g" 0.125)
      ("t" 0.250)

      ("U" 0.019230769231)
      ("R" 0.019230769231)
      ("Y" 0.019230769231)
      ("K" 0.019230769231)
      ("M" 0.019230769231)
      ("S" 0.019230769231)
      ("W" 0.019230769231)
      ("B" 0.019230769231)
      ("D" 0.019230769231)
      ("H" 0.019230769231)
      ("V" 0.019230769231)
      ("N" 0.019230769231)
      ("-" 0.019230769231)))

(define (main args)
    (let ((n (or (and (= (length args) 2) (string->number (cadr args))) 1))
          (ldna1 (mkCumulative dna1))
	  (ldna2 (mkCumulative dna2)))
      (mkFastaFragment "TestOne" "test fragment" ldna2 (* n 1))
      (mkFastaFragment "TestTwo" "test fragment" ldna1 (* n 2))
      (mkFastaFragment "TestThree" "test fragment" ldna2 (* n 3))
      (mkFastaFragment "TestFour" "test fragment" ldna1 (* n 4))
      (mkFastaFragment "TestFive" "test fragment" ldna2 (* n 5))))
	
(main (argv))

; vim: ts=4 ft=scheme
