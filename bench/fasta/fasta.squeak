"* The Computer Language Shootout
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy *"!

'From Squeak3.9 of 7 November 2006 [latest update: #7067] on 12 April 2007 at 10:04:52 pm'!
Object subclass: #RandomNumber	instanceVariableNames: 'seed scale'	classVariableNames: 'FModulus Increment Modulus Multiplier'	poolDictionaries: ''	category: 'Shootout'!
ReadStream subclass: #RepeatStream	instanceVariableNames: 'repeatPtr repeatLimit'	classVariableNames: ''	poolDictionaries: ''	category: 'Shootout'!
RepeatStream subclass: #RandomStream	instanceVariableNames: 'random percentages'	classVariableNames: ''	poolDictionaries: ''	category: 'Shootout'!
Object subclass: #Tests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Shootout'!!AttachableFileStream methodsFor: 'read, write, position' stamp: '  4/12/2007 13:56'!writeFasta: aString sequence: aStream   | i |   self nextPut: $>; nextPutAll: aString; nextPut: Character lf.   i := 0.   [aStream atEnd] whileFalse: [      (i == 60) ifTrue: [self nextPut: Character lf. i := 0].      self nextPut: aStream next.      i := i + 1.      ].   self nextPut: Character lf! !!RandomNumber methodsFor: 'private' stamp: '  4/12/2007 13:13'!to: anInteger   seed := 42.   scale := anInteger! !!RandomNumber methodsFor: 'accessing' stamp: '  4/12/2007 13:13'!next   seed := (seed * Multiplier + Increment) \\ Modulus.   ^(seed * scale) asFloatD / FModulus! !!RandomNumber class methodsFor: 'class initialization' stamp: '  4/12/2007 13:10'!initialize   super initialize.   FModulus := 139968.0d0.   Increment := 29573.   Modulus := 139968.   Multiplier := 3877.! !!RandomNumber class methodsFor: 'initialize-release' stamp: '  4/12/2007 13:11'!to: anInteger   ^self basicNew to: anInteger! !!RepeatStream methodsFor: 'accessing' stamp: '  4/12/2007 13:02'!next   position >= readLimit ifTrue: [ self position: 0 ].   repeatPtr := repeatPtr + 1.   ^collection at: (position := position + 1)! !!RepeatStream methodsFor: 'testing' stamp: '  4/12/2007 13:02'!atEnd   ^repeatPtr >= repeatLimit! !!RepeatStream methodsFor: 'initialize-release' stamp: '  4/12/2007 13:02'!to: anInteger   repeatPtr := 0.   repeatLimit := anInteger! !!RandomStream methodsFor: 'accessing' stamp: '  4/12/2007 13:15'!next   | r |   r := random next.   repeatPtr := repeatPtr + 1.   1 to: percentages size do: [:i|      (r < (percentages at: i)) ifTrue: [^collection at: i]]! !!RandomStream methodsFor: 'accessing' stamp: '  4/12/2007 13:15'!random: aRandomNumber"* Share the random number generator so we can get the expected results. *"   random := aRandomNumber! !!RandomStream methodsFor: 'initialize-release' stamp: '  4/12/2007 13:36'!on: aCollection   | size cp |   repeatPtr := 0.   random := RandomNumber to: 1.0d0.   size := aCollection size.   percentages := Array new: size.   collection := Array new: size.   cp := 0.0d0.   1 to: size do: [:i|      collection at: i put: (aCollection at: i) key.      percentages at: i put: (cp := cp + (aCollection at: i) value).   ]! !!RepeatStream class methodsFor: 'instance creation' stamp: '  4/12/2007 13:01'!to: anInteger on: aCollection   ^(super on: aCollection) to: anInteger! !!Tests class methodsFor: 'platform' stamp: '  4/12/2007 18:57'!arg   ^(SmalltalkImage current getSystemAttribute: 3) asInteger! !!Tests class methodsFor: 'platform' stamp: '  4/12/2007 19:03'!newline   ^Character lf! !!Tests class methodsFor: 'platform' stamp: '  4/12/2007 18:57'!stdout   ^UnixProcess stdOut! !!Tests class methodsFor: 'benchmark scripts' stamp: '  4/12/2007 22:00'!fasta   | n r s |   n := self arg.   s := self stdout.   s writeFasta: 'ONE Homo sapiens alu' sequence:      ( RepeatStream to: n*2 on:         'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG',         'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA',         'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT',         'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA',         'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG',         'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC',         'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA' ).   r := RandomNumber to: 1. "Shared random sequence"   s writeFasta: 'TWO IUB ambiguity codes' sequence:      (( RandomStream to: n*3 on: (         OrderedCollection new            add: (Association key: $a value: 0.27);            add: (Association key: $c value: 0.12);            add: (Association key: $g value: 0.12);            add: (Association key: $t value: 0.27);            add: (Association key: $B value: 0.02);            add: (Association key: $D value: 0.02);            add: (Association key: $H value: 0.02);            add: (Association key: $K value: 0.02);            add: (Association key: $M value: 0.02);            add: (Association key: $N value: 0.02);            add: (Association key: $R value: 0.02);            add: (Association key: $S value: 0.02);            add: (Association key: $V value: 0.02);            add: (Association key: $W value: 0.02);            add: (Association key: $Y value: 0.02);            yourself )) random: r).   s writeFasta: 'THREE Homo sapiens frequency' sequence:      (( RandomStream to: n*5 on: (         OrderedCollection new            add: (Association key: $a value: 0.3029549426680);            add: (Association key: $c value: 0.1979883004921);            add: (Association key: $g value: 0.1975473066391);            add: (Association key: $t value: 0.3015094502008);            yourself )) random: r).   s flush; close! !RandomNumber initialize!
