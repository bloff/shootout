{- The Computer Language Shootout
   http://shootout.alioth.debian.org/
   contributed by Jeff Newbern
   updated by Spencer Janssen and Don Stewart -}

import System
import qualified Data.ByteString.Char8 as B

randomSequence :: Int -> [(Char,Double)] -> Int -> (B.ByteString, Int)
randomSequence n bf seed = (sequence, seed')
  where (sequence, Just seed') = B.unfoldrN n f seed
        f s = Just (chooseBase bf (normalize s), nextSeed s)

chooseBase :: [(Char,Double)] -> Double -> Char
chooseBase [(b,_)]    _ = b
chooseBase ((b,f):xs) p | p < f     = b
                        | otherwise = chooseBase xs (p-f)

writeFasta label title sequence = do
     putStrLn $ ">" ++ label ++ " " ++ title
     mapM_ B.putStrLn $ split 60 sequence

split n xs | B.null xs = []
           | otherwise = l : split n r
    where (l, r) = B.splitAt n xs

main = do
    n <- getArgs >>= readIO . head
    let aluLen         = 1 + 2 * n `div` B.length alu
        aluSeq         = B.take (2 * n) . B.concat . replicate aluLen $ alu
        (iubSeq, seed) = randomSequence (3 * n) iub         initSeed
        (homSeq, _)    = randomSequence (5 * n) homosapiens seed

    writeFasta "ONE"   "Homo sapiens alu"       aluSeq
    writeFasta "TWO"   "IUB ambiguity codes"    iubSeq
    writeFasta "THREE" "Homo sapiens frequency" homSeq

alu = B.pack
         "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\
         \GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\
         \CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\
         \ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\
         \GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\
         \AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\
         \AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA"

iub = [ ('a', 0.27), ('c', 0.12), ('g', 0.12), ('t', 0.27), ('B', 0.02)
      , ('D', 0.02), ('H', 0.02), ('K', 0.02), ('M', 0.02), ('N', 0.02)
      , ('R', 0.02), ('S', 0.02), ('V', 0.02), ('W', 0.02), ('Y', 0.02) ]

homosapiens = [ ('a', 0.3029549426680), ('c', 0.1979883004921),
                ('g', 0.1975473066391), ('t', 0.3015094502008) ]

im          = 139968
ia          = 3877
ic          = 29573
nextSeed s  = (s * ia + ic) `rem` im
normalize n = (fromIntegral n) * (1.0 / fromIntegral im)
initSeed    = nextSeed 42
