;; ---------------------------------------------------------------------
;; The Great Computer Language Shootout
;; http://shootout.alioth.debian.org/
;;
;; Contributed by Anthony Borla
;; ---------------------------------------------------------------------

(declare (disable-interrupts) (unsafe) (block) (lambda-lift)
         (uses srfi-1 lolevel))

; -------------------------------

(define +alu+
  (string->byte-vector
    (string-append
      "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG"
      "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA"
      "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT"
      "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA"
      "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG"
      "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC"
      "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA")))

; -------------

(define-constant +iub+
  (list
    '(#\a . 0.27) '(#\c . 0.12) '(#\g . 0.12) '(#\t . 0.27) '(#\B . 0.02)
    '(#\D . 0.02) '(#\H . 0.02) '(#\K . 0.02) '(#\M . 0.02) '(#\N . 0.02)
    '(#\R . 0.02) '(#\S . 0.02) '(#\V . 0.02) '(#\W . 0.02) '(#\Y . 0.02)))

(define-constant +homosapien+
  (list
    '(#\a . 0.3029549426680) '(#\c . 0.1979883004921)
    '(#\g . 0.1975473066391) '(#\t . 0.3015094502008)))

; -------------

(define-constant +line-size+ 60)

; -------------------------------

(define (make-random seed)
  (let* ((ia 3877) (ic 29573) (im 139968) (last seed))
    (lambda (max) 
      (set! last (modulo (+ ic (* last ia)) im))
      (/ (* max last) im) )))

; -------------------------------

(define (make-cumulative-table frequency-table)
  (let ((cumulative 0.0))
    (map-in-order
      (lambda (x) (set! cumulative (+ cumulative (cdr x))) (cons (car x) cumulative))
      frequency-table)))

; -------------

(define (make-fasta)
  (let* ((random-next (make-random 42)) (+segmarker+ ">")

    ; -------------

    (select-random
      (lambda (cumulative-table)
        (let ((rvalue (random-next 1.0)))
          (let loop ((table cumulative-table))
            (if (<= rvalue (cdar table)) (caar table)
            ; else
            (loop (cdr table)) )))))

    ; -------------

    (repeat-fasta
      (lambda (id desc n_ sequence line-length)
        (let ((seqlen (string-length sequence)) (k 0))
          (display (string-append +segmarker+ id " " desc "\n"))
          (let loop-o ((n n_))
            (if (<= n 0) '()
            ; else
            (let ((m (min n line-length))) 
              (let loop-i ((i 0))
                (if (>= i m) '()
                ; else
                (begin
                  (if (= k seqlen) (set! k 0))
                  (display (integer->char (byte-vector-ref sequence k)))
                  (set! k (add1 k))
                  (loop-i (add1 i)) )))
                (newline)
                (loop-o (- n line-length)) ))) )))

    ; -------------

    (random-fasta
      (lambda (id desc n_ cumulative-table line-length)
        (display (string-append +segmarker+ id " " desc "\n"))
        (let loop-o ((n n_))
          (if (<= n 0) '()
          ; else
          (let ((m (min n line-length))) 
            (let loop-i ((i 0))
              (if (>= i m) '()
              ; else
              (begin
                (display (select-random cumulative-table))
                (loop-i (add1 i)) )))
              (newline)
              (loop-o (- n line-length)) ))) )))

    ; -------------

    (lambda (op)
      (cond
        ((eq? op 'repeat) repeat-fasta)
        ((eq? op 'random) random-fasta)
        (else (lambda () (display "*** make-fasta:invalid operation ***\n"))))) ))

; -------------------------------

(define (repeat-fasta fasta id desc n sequence line-length)
  (apply (fasta 'repeat)
    (list id desc n sequence line-length)))

; -------------

(define (random-fasta fasta id desc n cumulative-table line-length)
  (apply (fasta 'random)
    (list id desc n cumulative-table line-length)))

; -------------------------------

(define (main args)
  (let ((n (if (null? args)
               1
               (string->number (car args))))

    (fasta (make-fasta)))

    (repeat-fasta fasta
      "ONE" "Homo sapiens alu" (* n 2) +alu+ +line-size+)

    (random-fasta fasta
      "TWO" "IUB ambiguity codes" (* n 3)
      (make-cumulative-table +iub+) +line-size+)

    (random-fasta fasta
      "THREE" "Homo sapiens frequency" (* n 5)
      (make-cumulative-table +homosapien+) +line-size+) ))

; -------------------------------

(main (command-line-arguments))

