/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy 
*/

using System;

class fasta
{
   static void Main(string[] args){
      MakeCumulative(HomoSapiens);
      MakeCumulative(IUB);

      int n = 1000;
      if (args.Length > 0) n = Int32.Parse(args[0]);

      MakeRepeatFasta("ONE", "Homo sapiens alu", ALU, n*2);
      MakeRandomFasta("TWO", "IUB ambiguity codes", IUB, n*3);
      MakeRandomFasta("THREE", "Homo sapiens frequency", HomoSapiens, n*5);
   }


   // The usual pseudo-random number generator

   const int IM = 139968;
   const int IA = 3877;
   const int IC = 29573;
   static int last = 42;

   static double random(double max) 
   {        
      last = (last * IA + IC) % IM;
      return( max * last / IM );
   }


   // Weighted selection from alphabet

   static String ALU = 
      "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG" +
      "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA" +
      "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT" +
      "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA" +
      "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG" +
      "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC" +
      "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA";  

   struct Frequency {
      public char c;
      public double p;

      public Frequency(char c, double p) {
         this.c = c;
         this.p = p;
      }
   }

   static Frequency[] IUB = {
       new Frequency('a', 0.270)
      ,new Frequency('c', 0.125)
      ,new Frequency('g', 0.125)
      ,new Frequency('t', 0.270) 
              
      ,new Frequency('B', 0.02)
      ,new Frequency('D', 0.02)
      ,new Frequency('H', 0.02) 
      ,new Frequency('K', 0.02)
      ,new Frequency('M', 0.02)
      ,new Frequency('N', 0.02) 
      ,new Frequency('R', 0.02)
      ,new Frequency('S', 0.02)
      ,new Frequency('V', 0.02) 
      ,new Frequency('W', 0.02)
      ,new Frequency('Y', 0.02)
   };

   static Frequency[] HomoSapiens = {
       new Frequency('a', 0.3029549426680)
      ,new Frequency('c', 0.1979883004921)
      ,new Frequency('g', 0.1975473066391)
      ,new Frequency('t', 0.3015094502008)               
   };

   static void MakeCumulative(Frequency[] a) {   
      double cp = 0.0;
      for (int i=0; i < a.Length; i++){
         cp += a[i].p;
         a[i].p = cp;
      }
   }

   // naive 
   static char SelectRandom(Frequency[] a) {   
      double r = random(1.0);
      for (int i=0; i < a.Length; i++)
         if (r < a[i].p) return a[i].c;

      return a[a.Length-1].c;
   }


   const int LineLength = 60;

   static void MakeRandomFasta(String id, String desc, Frequency[] a, int n) { 
      int m = 0;
      Console.WriteLine(">{0} {1}", id,desc);

      while (n > 0) {
         if (n < LineLength) m = n; else m = LineLength;
         for (int i=0; i<m; i++) Console.Write(SelectRandom(a));
         Console.Write("\n");
         n -= LineLength;
      }
   }

   static void MakeRepeatFasta(String id, String desc, String s, int n) { 
      int m = 0, k = 0, kn = s.Length;
      Console.WriteLine(">{0} {1}", id,desc);

      while (n > 0) {
         if (n < LineLength) m = n; else m = LineLength;
         for (int i=0; i<m; i++){
            if (k == kn) k = 0;
            Console.Write(s[k]);
            k++;
         }
         Console.Write("\n");
         n -= LineLength;
      }
   }
}

