! -*- mode: f90 -*-

! The Great Computer Language Shootout 
!   http://shootout.alioth.debian.org/

!   contributed by Simon Geard (converted from the C# version)

! $Id: spectralnorm.ifc,v 1.2 2005-05-12 21:51:38 sgeard-guest Exp $ ; $name: $

program spnorm

  real*8  :: sn
  integer :: i, n
  character(len=6) argv
  real*8, allocatable, dimension(:) :: u, v
  intrinsic dot_product

  call getarg(1,argv)
  read(argv,*) n

  allocate(u(n))
  u = (/ (1.0d0,i=1,n) /)

  allocate(v(n))
  v = (/ (0.0d0,i=1,n) /)
  do i=1,10
     call MultiplyAtAv(u,v)
     u = (/ (0.0d0,i=1,n) /)
     call MultiplyAtAv(v,u)
  end do
  
  sn = sqrt(dot_product(u,v)/dot_product(v,v))
  deallocate(u)
  deallocate(v)
  
  write(*,'(f0.9)') sn

  stop

contains

  ! return element i,j of infinite matrix A 
  pure real*8 function A(i, j)
    integer, intent(in) :: i,j
    A = 1.0d0/((i+j)*(i+j+1)/2 +i+1)
  end function A
  
  ! multiply vector v by matrix A
  subroutine MultiplyAv(v, Av)
    real*8, dimension(0:), intent(in) :: v
    real*8, dimension(0:), intent(inout) :: Av ! Zero on entry
    integer :: i, j
    forall (i=0:n-1)
       forall (j = 0:n-1)
          Av(i) = Av(i) + A(i,j)*v(j)
       end forall
    end forall
  end subroutine MultiplyAv

  ! multiply vector v by matrix A transposed
  subroutine MultiplyAtv(v, Atv)
    real*8, dimension(0:), intent(in) :: v
    real*8, dimension(0:), intent(inout) :: Atv ! Zero on entry
    integer :: i, j
    forall (i=0:n-1)
       forall (j=0:n-1)
          Atv(i) = Atv(i) + A(j,i)*v(j)
       end forall
    end forall
  end subroutine MultiplyAtv

  ! multiply vector v by matrix A and then by matrix A transposed
  subroutine MultiplyAtAv(v, AtAv)
    real*8, dimension(:), intent(in) :: v
    real*8, dimension(:), intent(inout) :: AtAv

    real*8, save, allocatable :: u(:)
    if (.not. allocated(u)) then ! Only allocate once
       allocate(u(n))
    end if
    u = (/ (0.0d0,i=1,n) /)
    call MultiplyAv(v,u)
    call MultiplyAtv(u,AtAv)
  end subroutine MultiplyAtAv

end program spnorm
