"* The Computer Language Shootout
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy
    modified by Eliot Miranda *"!

'From Squeak3.9 of 7 November 2006 [latest update: #7067] on 12 April 2007 at 9:31:13 pm'!
Object subclass: #Tests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Shootout'!!Array methodsFor: 'benchmarking' stamp: '  11/29/2006 22:50'!multiplyAtAv   ^(self multiplyAv) multiplyAtv! !!Array methodsFor: 'benchmarking' stamp: '  11/29/2006 22:49'!multiplyAtv   | n atv |   n := self size.   atv := Array new: n withAll: 0.0d0.   1 to: n do: [:i| 	      1 to: n do: [:j|         atv at: i put: (atv at: i) + ((j matrixA: i) * (self at: j)) ]].   ^atv! !!Array methodsFor: 'benchmarking' stamp: '  11/29/2006 22:49'!multiplyAv   | n av |   n := self size.   av := Array new: n withAll: 0.0d0.   1 to: n do: [:i| 	      1 to: n do: [:j|         av at: i put: (av at: i) + ((i matrixA: j) * (self at: j)) ]].   ^av! !
!Float methodsFor: 'platform' stamp: '  4/13/2007 09:51'!asStringWithDecimalPlaces: anInteger   | s |   anInteger <= 0 ifTrue: [^self rounded printString].   s := ((self asFloatD roundTo:       (Utilities floatPrecisionForDecimalPlaces: anInteger)) asString),         ((String new: anInteger) atAllPut: $0).   ^s copyFrom: 1 to: ((s indexOf: $.) + anInteger)! !
!SmallInteger methodsFor: 'benchmarking' stamp: '  11/29/2006 22:48'!matrixA: anInteger"fixup one-based indexing to zero-based indexing - cleanup later"   | i j |   i := self - 1.    j := anInteger - 1.   ^1.0d0 / (i + j * (i + j + 1) /2  + i + 1) asFloat! !!Tests class methodsFor: 'benchmarking' stamp: '  4/12/2007 21:27'!spectralnorm   self stdout      nextPutAll: (self spectralnorm: self arg);      nextPut: Character lf.   ^self postscript! !!Tests class methodsFor: 'benchmarking' stamp: '  4/12/2007 21:27'!spectralnorm: n   | u v vBv vv |   u := Array new: n withAll: 1.0d0.   v := Array new: n withAll: 0.0d0.   10 timesRepeat:      [v := u multiplyAtAv.       u := v multiplyAtAv].   vBv := 0.0d0.   vv := 0.0d0.   1 to: n do:      [:i |       vBv := vBv + ((u at: i) * (v at: i)).       vv := vv + ((v at: i) * (v at: i))].   ^((vBv / vv) sqrt asStringWithDecimalPlaces: 9)! !!Tests class methodsFor: 'platform' stamp: '  4/12/2007 18:57'!arg   ^(SmalltalkImage current getSystemAttribute: 3) asInteger! !!Tests class methodsFor: 'platform' stamp: '  4/13/2007 07:30'!postscript   SmalltalkImage current snapshot: false andQuit: true.   ^''! !
!Tests class methodsFor: 'platform' stamp: '  4/12/2007 18:57'!stdout   ^UnixProcess stdOut! !
