/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy 
*/

using System;
using System.Threading;

class MeetingPlace 
{
   private Colour first, second;
   private bool firstCall = true;
   private bool mustWait = false;
   private int n;
   
   public MeetingPlace(int maxMeetings){ 
      n = maxMeetings; 
   }
   
   public Colour OtherCreaturesColour(Colour me){
      lock(this){ 
         Colour other;         
  
         while (mustWait){
            Monitor.Wait(this); 
         }

         if (firstCall){
            if (n-- > 0){
               first = me;
               firstCall = false;

               while (!firstCall){
                  Monitor.Wait(this);
               }
               mustWait = false;
               other = second;
            }
            else { 
               other = Colour.faded; 
            }
         }

         else { 
            second = me;
            other = first;
            firstCall = true;
            mustWait = true;           
         } 
  
         Monitor.PulseAll(this);
         return other;  
      } 
   }
}


class Creature 
{
   private MeetingPlace m; 
   internal int creaturesMet = 0;
   internal Colour me;

   public Creature(MeetingPlace m, Colour c){
      this.m = m; this.me = c;
   }

   public void Be(){
      while(me != Colour.faded){ MeetOtherCreature(); }
   }

   private void MeetOtherCreature(){
      Colour other = m.OtherCreaturesColour(me);
      if (other == Colour.faded){
         me = other;
      }
      else {
         creaturesMet++; 
         me = Complement(other);
      }
   }

   // don't use arithmetic
   // use if-else or switch/case or pattern-match
   Colour Complement(Colour other){
      if (me == other) return me;
      switch(me){
         case Colour.blue: 
            return other == Colour.red ? Colour.yellow : Colour.red;
         case Colour.red: 
            return other == Colour.blue ? Colour.yellow : Colour.blue;
         case Colour.yellow:
            return other == Colour.blue ? Colour.red : Colour.blue; 
         default: return me;
      }
   }
}


enum Colour { blue, red, yellow, faded }

class chameneos
{
   static Colour[] colours = { Colour.blue, Colour.red, Colour.yellow, Colour.blue };
   static Creature[] creatures = new Creature[colours.Length];
   static Thread[] threads = new Thread[colours.Length];

   public static void Main(String[] args) {        
      int n = Int32.Parse(args[0]);
      MeetingPlace m = new MeetingPlace(n);   
    
      for (int i=0; i<colours.Length; i++){
         creatures[i] = new Creature(m,colours[i]);
         threads[i] = new Thread(new ThreadStart(creatures[i].Be));
      }      
      foreach (Thread t in threads) t.Start();
      foreach (Thread t in threads) t.Join();

      int meetings = 0;
      foreach (Creature c in creatures) meetings += c.creaturesMet;
      Console.WriteLine("{0}",meetings);
   }
}

