# The Computer Language Shootout
# http://shootout.alioth.debian.org/

# contributed by Greg Reynolds

import sys

n_meetings = 5000

if len(sys.argv) == 2:
    n_meetings = eval(sys.argv[1])

import thread
from  threading import Thread
import mutex

class MeetingPlace:
    def __init__(self,n_meetings):
        self.n_meetings = n_meetings
        self.lock = thread.allocate_lock()
        self.waiter = None

    def request_meeting(self,c):
        self.lock.acquire()
        if self.n_meetings > 0:
            if self.waiter == None:
                self.waiter = c
            elif self.waiter != c:
                c.n_meetings = c.n_meetings + 1
                self.waiter.n_meetings = self.waiter.n_meetings + 1
                self.n_meetings = self.n_meetings - 1
                if self.n_meetings == 0:
                    self.waiter.colour = Chameneos.FADED
                    c.colour = Chameneos.FADED
                else:
                    if c.colour != self.waiter.colour:
                        if c.colour==Chameneos.BLUE and self.waiter.colour == Chameneos.YELLOW:
                            c.colour = Chameneos.RED
                            self.waiter.colour = Chameneos.RED
                        elif c.colour==Chameneos.BLUE and self.waiter.colour == Chameneos.RED:
                            c.colour = Chameneos.YELLOW
                            self.waiter.colour = Chameneos.YELLOW
                        elif c.colour==Chameneos.RED and self.waiter.colour == Chameneos.BLUE:
                            c.colour = Chameneos.YELLOW
                            self.waiter.colour = Chameneos.YELLOW
                        elif c.colour==Chameneos.RED and self.waiter.colour == Chameneos.YELLOW:
                            c.colour = Chameneos.BLUE
                            self.waiter.colour = Chameneos.BLUE
                        elif c.colour==Chameneos.YELLOW and self.waiter.colour== Chameneos.BLUE:
                            c.colour = Chameneos.RED
                            self.waiter.colour = Chameneos.RED
                        elif c.colour==Chameneos.YELLOW and self.waiter.colour == Chameneos.RED:
                            c.colour = Chameneos.BLUE
                            self.waiter.colour = Chameneos.BLUE
                        else:
                            c.colour = Chameneos.FADED
                            self.waiter.colour = Chameneos.FADED

                self.waiter = None
        else:
            c.colour = Chameneos.FADED
        self.lock.release()


class Chameneos(Thread):
    YELLOW = 0
    BLUE   = 1
    RED    = 2
    FADED  = 3

    def __init__(self,colour,meeting_place):
        Thread.__init__(self)
        self.colour = colour
        self.meeting_place = meeting_place
        self.n_meetings = 0

    def run(self):
        while self.colour != Chameneos.FADED:
            self.meeting_place.request_meeting(self)

mp = MeetingPlace(n_meetings)
c_list = []
for colour in [Chameneos.BLUE, Chameneos.RED, Chameneos.YELLOW, Chameneos.BLUE]:
    c_list.append(Chameneos(colour,mp))

for c in c_list:
    c.start()

for c in c_list:
    c.join()

print reduce(lambda x, y: x + y.n_meetings,c_list,0)
    
            
        

    
