/* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy

   RendezvousServer and Creature follow the same synchronization
   approach as Mall and Chameneos in ANNEX A: JAVA SOLUTION 
   "Chameneos, a Concurrency Game for Java, Ada and Others"
*/


enum Colour { blue, red, yellow }

Colour complementColour(Colour self, Colour other); 
complementColour(blue,blue) = blue;
complementColour(blue,red) = yellow;
complementColour(blue,yellow) = red;
complementColour(red,red) = red;
complementColour(red,blue) = yellow;
complementColour(red,yellow) = blue;
complementColour(yellow,yellow) = yellow;
complementColour(yellow,blue) = red;
complementColour(yellow,red) = blue;

void checkCreatureColourChanges() {
   let colours = [blue,red,yellow];
   for (self : colours)
      for (other : colours)
         println(self + " + " + other + " -> " + complementColour(self,other));
   println();
}



let Token stopToken = new Token();

class RendezvousServer {
   private Token a = stopToken; 
   private Token b = stopToken; 

   private boolean firstCall = true;
   private boolean mustWait = false;

   private int countdown = n;


   Token notify(Token token) {

      synchronized(this) {

         var other = stopToken;

         while ( mustWait && countdown > 0 ) this.wait();
  
         if ( firstCall ) {
            a = token;
            firstCall = false;

            while ( ! firstCall && countdown > 0 ) this.wait();
            other = b; 
            mustWait = false;
            this.notifyAll();

            --countdown;
         } 

         else {
            b = token;
            other = a;
            firstCall = true;
            mustWait = true; 
            this.notifyAll();               
         } 

         return countdown >= 0 ? other : stopToken;         
      }
   }

}


class Creature extends Thread {
   private int name;
   Colour colour;
   int selfMet = 0; 
   int creaturesMet = 0; 
   private RendezvousServer rendezvous;

   override void run(){ 
      let token = new Token(_name: name, _colour: colour);

      while (true) {
         let other = rendezvous.notify(token);
         if (other == stopToken) break;

         colour = complementColour(colour,other.colour);
         token.colour(colour);
         if (other.name == name) selfMet++;
         creaturesMet++;
       
         Thread.yield();
      }
   }
   
}


class Token {
   private int _name = 0;
   private Colour _colour = blue;

   int name() = _name;
   Colour colour() = _colour;
   void colour(Colour c) { _colour = c; }
}




List<Creature> startRendezvousCreaturesWith(List<Colour> colourList){
   let r = new RendezvousServer();
   var i = 0;
   let rendezvousCreatures = colourList .map(
      Colour c => new Creature(name: ++i, colour: c, rendezvous: r));

   for (c : rendezvousCreatures) c.start();
   for (c : rendezvousCreatures) c.join();
 
   return rendezvousCreatures;
}


void reportRendezvouses(List<Colour> colourList){
   let numbers = ["zero", "one", "two", "three", "four", 
                  "five", "six", "seven", "eight", "nine"];

   String spellout(int k) =
      k .toString .toCharArray .foldLeft(
         (String s, char c) => 
            s + " " + numbers[ Character.getNumericValue(c) ], "");


   for (c : colourList) print(" " + c); println();

   let rendezvousCreatures = startRendezvousCreaturesWith(colourList);

   var sum = 0;
   for (c : rendezvousCreatures){
      sum += c.creaturesMet;
      println(c.creaturesMet + spellout(c.selfMet) );
   }
   println( spellout(sum) );
   println();
}


var int n = 0;

void main(String[] args){
   n = Integer.parseInt(args[0]);

   checkCreatureColourChanges();
   reportRendezvouses([blue,red,yellow]);
   reportRendezvouses([blue,red,yellow,red,yellow,blue,red,yellow,red,blue]);
}
