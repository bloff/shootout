//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
include "stl";
open Stl;
open Stl::HashMap;
open Text_file;
open Lexer;

requires ext_string_hash;

regexp upper = ["ABCDEFGHIJKLMNOPQRSTUVWXYZ"];
regexp lower = ["abcdefghijklmnopqrstuvwxyz"];
regexp wrd = ( upper | lower) +;

fun lexit (start:iterator, finish:iterator): iterator * bool =>
  reglex start to finish with
  | wrd => true
  | _ => false
  endmatch
;

var dict = HashMap::create[string,int]();
proc add_word(s:iterator, e:iterator)
{
  word := string_between(s,e);
  p := find (dict,word);
  if p == end dict do
    insert (dict,word,1);
  else
    k,j := deref p;
    insert (dict, word, j + 1);
  done;
}

var data = readln stdin;
until data == "" do
  first := start_iterator data;
  last := end_iterator data;

  var current = first;
  var next = first;
  var isword : bool;
  until current == last do
    next, isword = lexit(current, last);
    if isword do
      add_word(current,next);
      current = next;
    else
      ++current;
    done;
  done;
  data = readln stdin;
done;

