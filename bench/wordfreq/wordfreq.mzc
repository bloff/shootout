#!/usr/bin/mzscheme -r

(require (lib "pregexp.ss")
         (lib "string.ss")
         (lib "list.ss"))

(define my-hash (make-hash-table 'equal))

(define (print-sorted-hash)
   (let ((kv-lst '())
         (display-elts (lambda (lst) (map (lambda (elt) 
             (printf "~a~a~a~n" (cdr elt) #\tab (car elt))) lst))))

      ; Build a list from the hash table
      (hash-table-for-each my-hash
         (lambda (key val) (set! kv-lst (cons (cons key val) kv-lst))))
      ; Sort the list
      (display-elts (quicksort kv-lst
                       (lambda (a b) (string<? (car a) (car b)))))))

(define (load-hash vals)
   (letrec
     ((do-entry-get (lambda (key)
             (hash-table-get my-hash key
               (lambda () (hash-table-put! my-hash key 0) 0))))
      (do-entry-inc (lambda (key)
             (hash-table-put! my-hash key (+ (do-entry-get key) 1)))))
   (map do-entry-inc vals)))

(define (main args)
  (do ((line (read-line) (read-line)))
      ((eof-object? line) (print-sorted-hash))
      (string-lowercase! line)
      (load-hash (pregexp-split " +"
          (list->string (map (lambda (x)
            (if (char-alphabetic? x) x #\space)) (string->list line)))))))

(main (current-command-line-arguments))
