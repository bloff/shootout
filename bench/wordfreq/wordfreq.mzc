#!/usr/bin/mzscheme -r

;
;  wordfreq.mzscheme by Grzegorz Chrupaa
;

(require (lib "list.ss")
         (lib "string.ss"))

(define port-for-each
  (lambda (processor reader)
    (let loop ((next (reader)))
      (unless (eof-object? next)
        (processor next)
        (loop (reader))))))

(define (hash-table->alist table)
  (let ((alist '()))
    (hash-table-for-each
     table
     (lambda (key value) (set! alist (cons (cons key value) alist))))
    alist))
                         

(define (main . _)
  (define table (make-hash-table 'equal))
  (port-for-each (lambda (line) (parse-line line table)) read-line)
  (hash-table-remove! table "")
  (for-each (lambda (pair)
              (let ((word (car pair))
                    (count (cdr pair)))
                (printf "~a~a~a~n" count #\tab word)))
            (quicksort (hash-table->alist table)
                  (lambda (pair1 pair2)
                    (or (> (cdr pair1) (cdr pair2))
                        (and (= (cdr pair1) (cdr pair2))
                             (string<? (car pair2) (car pair1))))))))

(define rx (regexp "[^a-zA-Z]+"))

(define (parse-line line table)
  (string-lowercase! line)
  (for-each
   (lambda (word)
     (let ((count (hash-table-get table word (lambda () 0))))
       (hash-table-put! table word (+ count 1))))
   (regexp-split rx line)))

(main)
