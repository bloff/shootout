// -*- mode: c++ -*-
// $Id: wordfreq.g++4.g++,v 1.1 2004-05-19 18:14:23 bfulgham Exp $
// http://www.bagley.org/~doug/shootout/
// from Vladimir Schipunov

#include <iostream>
#include <iomanip>
#include <hash_map.h>
#include <vector>
#include <set>
#include <ctype.h>
#include <stdio.h>
using namespace std;

struct integer
{
    int value;
    integer( int x = 0 ) : value(x) {}
    operator int() const { return value; }
};

typedef vector<char,single_client_alloc> word_t;

template <> struct hash<word_t> {
    inline size_t operator()(const word_t& s) const {
        register size_t h = 0;
        register const char* end = s.end();
        for( register const char* i = s.begin(); i != end; i++ )
            h = 5*h + *i;
        return h;
    }
};

int main() {
    word_t buf;
    hash_map<word_t,integer> counts;
    hash_map<word_t,integer>::const_iterator i;
    typedef pair<integer,word_t> result_t;
    set<result_t,greater<result_t> > result;
    set<result_t,greater<result_t> >::const_iterator j;

    char line[4096];
    while( cin.read( line, sizeof(line)).gcount() > 0 ) {
        for( unsigned i = 0; i < cin.gcount(); i++ )
            if( isalpha(line[i]) )
                buf.push_back(tolower(line[i]));
            else {
                if( !buf.empty() ) {
                    counts[buf].value++;
                    buf.clear();
                }
            }
    }
    if( !buf.empty() )
        counts[buf].value++;

    for( i = counts.begin(); i != counts.end(); i++ )
        result.insert( pair<integer,word_t>( (*i).second,(*i).first ));

    for( j = result.begin(); j != result.end(); j++, cout << endl ) {
	    cout << setw(7) << (*j).first << '\t';
	    copy((*j).second.begin(), (*j).second.end(), ostream_iterator<char>(cout));
    }

    return 0;
}
