/* The Great Computer Language Shootout 
 *    http://shootout.alioth.debian.org/
 * 
 * contributed by Isaac Gouy */

using System;
using System.IO;
using System.Collections;

class WordFreq 
{
   static void Main()
   { 
      const int size = 4096;
      Hashtable wordCounts = new Hashtable(4000);      

      using (StreamReader r = new StreamReader(Console.OpenStandardInput(size)))
      {      
         char[] buffer = new char[size];
         int charsRead;    
         Cell count;
         bool insideWord = false;
         string prefix = null;

         while ((charsRead = r.Read(buffer,0,size)) > 0) {
            int i = 0;
            for (int j=0; j<charsRead; j++){
               if (Char.IsLetter(buffer[j])){
                  if (!insideWord){
                     insideWord = true;
                     i = j;
                  }
               }
               else if (insideWord){
                  insideWord = false;
                  string w = (new String(buffer,i,j-i));

                  if (prefix != null){
                     w = string.Concat(prefix,w);
                     prefix = null;
                  }
                  w = w.ToLower();

                  if ((count = (Cell)wordCounts[w]) != null)
                     count.value += 1;
                  else
                     wordCounts[w] = new Cell(1);
               }
            }
            if (insideWord) prefix = (new String(buffer,i,charsRead-i));
         }
      }

      DictionaryEntry[] tuples = new DictionaryEntry[wordCounts.Count];
      wordCounts.CopyTo(tuples, 0);

      Array.Sort(tuples, new SortByFrequencyAndWord() );

      foreach (DictionaryEntry each in tuples) {
         string frequency = ((Cell)each.Value).value.ToString().PadLeft(7);
         string word = (string)each.Key;
         Console.WriteLine("{0} {1}", frequency, word);
      }   
   }
}


class SortByFrequencyAndWord : IComparer
{
   public SortByFrequencyAndWord() {}

   // sort DictionaryEntry by Frequency, then by Word
   int IComparer.Compare(object o1, object o2) {
      DictionaryEntry item1 = (DictionaryEntry)o1;
      DictionaryEntry item2 = (DictionaryEntry)o2;
      string k1 = (string)item1.Key;
      string k2 = (string)item2.Key;
      int v1 = ((Cell)item1.Value).value;
      int v2 = ((Cell)item2.Value).value;

      int comparison = v2.CompareTo(v1);
      if (comparison == 0) return k2.CompareTo(k1);
      else return comparison;
   }
}


class Cell 
{ 
   internal int value; 

   public Cell(int intialValue){
      value = intialValue;
   }
}