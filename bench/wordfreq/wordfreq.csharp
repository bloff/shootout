/* The Great Computer Language Shootout 
   contributed by Isaac Gouy */

using System;
using System.IO;
using System.Collections;
using System.Text;

class wordfreq 
{
   static void Main()
   { 
      const int bufferSize = 4096;
      Encoding code = Encoding.GetEncoding(0);
      Stream s = Console.OpenStandardInput( bufferSize );
      StreamReader stdin = new StreamReader(s, code, false, bufferSize);

      int charValue, newCount;
      char c;
      StringBuilder wordBuffer = new StringBuilder(32);
      Hashtable wordCounts = new Hashtable();
      object count;
      string word;

      while ( (charValue = stdin.Read()) >= 0  ) {
         c = (char)charValue;
         if ( Char.IsLetter(c) )
            wordBuffer.Append(Char.ToLower(c));
         else
            if (wordBuffer.Length > 0) 
         {
            word = wordBuffer.ToString(0, wordBuffer.Length);
            if ((count = wordCounts[word]) == null) newCount = 1; 
            else newCount = (int)count + 1;
            wordCounts[word] = newCount;
            wordBuffer.Length = 0;
         }
      }
      // check that we added the last word in the file
      // could put the repeated code in a method, but it's slower...
      if (wordBuffer.Length > 0) 
      { 
         word = wordBuffer.ToString(0, wordBuffer.Length);
         if ((count = wordCounts[word]) == null) newCount = 1; 
         else newCount = (int)count + 1;
         wordCounts[word] = newCount;
         wordBuffer.Length = 0;
      } 

      DictionaryEntry[] tuples = new DictionaryEntry[wordCounts.Count];
      wordCounts.CopyTo(tuples, 0);

      Array.Sort(tuples, new SortByFrequencyAndWord() );

      string frequency;
      foreach (DictionaryEntry each in tuples) {
         frequency = ((int)each.Value).ToString().PadLeft(7);
         word = (string)each.Key;
         Console.WriteLine("{0}\t{1}", frequency, word);
      }   
   }
}

public class SortByFrequencyAndWord : IComparer
{
   public SortByFrequencyAndWord() {}

   // sort DictionaryEntry by Frequency, then by Word
   int IComparer.Compare(object o1, object o2) {
      DictionaryEntry item1 = (DictionaryEntry)o1;
      DictionaryEntry item2 = (DictionaryEntry)o2;
      int comparison = ((int)item1.Value).CompareTo((int)item2.Value);
      // negate to provide descending order
      if (comparison == 0) return -((string)item1.Key).CompareTo((string)item2.Key);
      else return -comparison;
   }
}
