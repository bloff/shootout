module: wordfreq
use-libraries: common-dylan, io, table-extensions, string-extensions
use-modules: common-dylan, standard-io, streams, format-out, table-extensions, character-type

begin
  let words = make(<case-insensitive-string-table>);
  while(~stream-at-end?(*standard-input*))
    do(method(x)
           unless(x = "")
	     let rx = make(<string>, size: x.size);
	     let j = 0;
	     for (i from 0 below x.size)
	        if (alphabetic?(x[i]) )
		    rx[j] := x[i];
		    j := j + 1;
		end if;
	     end for;
             let count = element(words, rx, default: 0);
             words[rx] := count + 1;
           end unless;
       end method, split(read-line(*standard-input*), ' '));
  end while;
  let results = make(<stretchy-vector>);
  for(w keyed-by k in words)
    add!(results, pair(k, w));
  end for;
  do(method(x)
         format-out("%= %s\n", x.tail, as-lowercase(x.head))
     end method, sort(results, test: method(x, y)
                                         if(x.tail == y.tail)
                                           x.head > y.head
                                         else
                                           x.tail > y.tail
                                         end if; 
                                     end method));
end;
