(* binarytrees.ml
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Troestler Christophe
 *)

type 'a tree = Empty of int | Node of 'a tree * 'a * 'a tree

let rec make item = function
  | 0 -> Empty item
  | depth -> let d = depth - 1 and item2 = 2 * item in
             Node(make (item2 - 1) d, item, make item2 d)

let rec check = function
  | Empty i -> i
  | Node(left, i, right) -> i + check left - check right


let min_depth = 4
let max_depth =
  let n = try int_of_string(Array.get Sys.argv 1) with _ -> 10 in
  max (min_depth + 2) n
let stretch_depth = max_depth + 1

let () =
  let c = check (make 0 stretch_depth) in
  Printf.printf "stretch tree of depth %i\t check: %i\n" stretch_depth c

let long_lived_tree = make 0 max_depth

let rec loop_depths d =
  if d <= max_depth then
    let iterations = 1 lsl (max_depth - d + min_depth) in
    let c = ref 0 in
    for i = 1 to iterations do
      c := !c + check(make i d) + check(make (-i) d)
    done;
    Printf.printf "%i\t trees of depth %i\t check: %i\n" (2 * iterations) d !c;
    loop_depths (d + 2)

let () =
  loop_depths min_depth;
  Printf.printf "long lived tree of depth %i\t check: %i\n"
    max_depth (check long_lived_tree)

