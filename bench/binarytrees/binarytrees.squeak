"*  The Computer Language Shootout
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy *"

!Tests class methodsFor: 'benchmarking' stamp: '  11/29/2006 22:24'!binarytrees   | minDepth n maxDepth stretchDepth check longLivedTree iterations stdout |    minDepth := 4.   n := (SmalltalkImage current getSystemAttribute: 3) asInteger.   maxDepth := minDepth + 2 max: n.   stretchDepth := maxDepth + 1.   stdout := UnixProcess stdOut.   check := (TreeNode bottomUpTree: 0 depth: stretchDepth) itemCheck.   stdout       nextPutAll: 'stretch tree of depth '; nextPutAll: stretchDepth printString; nextPut: Character tab;      nextPutAll: ' check: '; nextPutAll: check printString; nextPut: Character lf.   longLivedTree := TreeNode bottomUpTree: 0 depth: maxDepth.   minDepth to: maxDepth by: 2 do: [:depth|      iterations := 1 bitShift: maxDepth - depth + minDepth.      check := 0.      1 to: iterations do: [:i|         check := check + (TreeNode bottomUpTree: i depth: depth) itemCheck.         check := check + (TreeNode bottomUpTree: -1*i depth: depth) itemCheck.      ].      stdout         nextPutAll:  (2*iterations) printString; nextPut: Character tab;          nextPutAll: ' trees of depth '; nextPutAll: depth printString; nextPut: Character tab;         nextPutAll: ' check: '; nextPutAll: check printString; nextPut: Character lf.   ].   stdout      nextPutAll: 'long lived tree of depth '; nextPutAll: maxDepth printString; nextPut: Character tab;      nextPutAll: ' check: '; nextPutAll: longLivedTree itemCheck printString; nextPut: Character lf. ! !


Object subclass: #TreeNode	instanceVariableNames: 'left right item'	classVariableNames: ''	poolDictionaries: ''	category: 'Shootout'!!TreeNode methodsFor: 'initialize-release' stamp: '  11/29/2006 22:18'!left: leftChild right: rightChild item: anItem   left := leftChild.   right := rightChild.   item := anItem! !!TreeNode methodsFor: 'accessing' stamp: '  11/29/2006 22:18'!itemCheck   ^left isNil       ifTrue: [item] ifFalse: [item + (left itemCheck - right itemCheck)]! !


TreeNode class	instanceVariableNames: ''!!TreeNode class methodsFor: 'instance creation' stamp: '  11/29/2006 22:17'!bottomUpTree: anItem depth: anInteger   ^(anInteger > 0)       ifTrue: [         self             left: (self bottomUpTree: 2*anItem - 1 depth: anInteger - 1)             right: (self bottomUpTree: 2*anItem depth: anInteger - 1)              item: anItem         ]      ifFalse: [self left: nil right: nil item: anItem]! !!TreeNode class methodsFor: 'instance creation' stamp: '  11/29/2006 22:18'!left: leftChild right: rightChild item: anItem         ^(super new) left: leftChild right: rightChild item: anItem! !
