"* The Computer Language Shootout
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy
    modified by Eliot Miranda *"!

'From Squeak3.9 of 7 November 2006 [latest update: #7067] on 12 April 2007 at 8:34:15 pm'!
Object subclass: #Tests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Shootout'!
Object subclass: #TreeNode	instanceVariableNames: 'left right item'	classVariableNames: ''	poolDictionaries: ''	category: 'Shootout'!!Tests class methodsFor: 'benchmarking' stamp: '  4/12/2007 20:31'!binarytrees: n to: output   | minDepth maxDepth stretchDepth check longLivedTree iterations |   minDepth := 4.   maxDepth := minDepth + 2 max: n.   stretchDepth := maxDepth + 1.   check := (TreeNode bottomUpTree: 0 depth: stretchDepth) itemCheck.   output      nextPutAll: 'stretch tree of depth '; print: stretchDepth; tab;      nextPutAll: ' check: '; print: check; nextPut: self newline.   longLivedTree := TreeNode bottomUpTree: 0 depth: maxDepth.   minDepth to: maxDepth by: 2 do: [:depth|      iterations := 1 bitShift: maxDepth - depth + minDepth.      check := 0.      1 to: iterations do: [:i|         check := check + (TreeNode bottomUpTree: i depth: depth) itemCheck.         check := check + (TreeNode bottomUpTree: -1*i depth: depth) itemCheck         ].      output         print:  (2*iterations); tab;         nextPutAll: ' trees of depth '; print: depth; tab;         nextPutAll: ' check: '; print: check;         nextPut: Character lf      ].   output      nextPutAll: 'long lived tree of depth '; print: maxDepth; tab;      nextPutAll: ' check: '; print: longLivedTree itemCheck;       nextPut: self newline! !!Tests class methodsFor: 'platform' stamp: '  4/12/2007 18:57'!arg   ^(SmalltalkImage current getSystemAttribute: 3) asInteger! !
!Tests class methodsFor: 'platform' stamp: '  4/13/2007 07:30'!postscript   SmalltalkImage current snapshot: false andQuit: true.   ^''! !
!Tests class methodsFor: 'platform' stamp: '  4/12/2007 18:57'!stdout   ^UnixProcess stdOut! !!Tests class methodsFor: 'benchmark scripts' stamp: '  4/12/2007 20:32'!binarytrees   self binarytrees: self arg to: self stdout.   ^self postscript! !!TreeNode methodsFor: 'initialize-release' stamp: '  11/29/2006 22:18'!left: leftChild right: rightChild item: anItem   left := leftChild.   right := rightChild.   item := anItem! !!TreeNode methodsFor: 'accessing' stamp: '  11/29/2006 22:18'!itemCheck   ^left isNil       ifTrue: [item] ifFalse: [item + (left itemCheck - right itemCheck)]! !!TreeNode class methodsFor: 'instance creation' stamp: '  11/29/2006 22:17'!bottomUpTree: anItem depth: anInteger   ^(anInteger > 0)       ifTrue: [         self             left: (self bottomUpTree: 2*anItem - 1 depth: anInteger - 1)             right: (self bottomUpTree: 2*anItem depth: anInteger - 1)              item: anItem         ]      ifFalse: [self left: nil right: nil item: anItem]! !!TreeNode class methodsFor: 'instance creation' stamp: '  11/29/2006 22:18'!left: leftChild right: rightChild item: anItem         ^(super new) left: leftChild right: rightChild item: anItem! !
