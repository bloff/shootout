;;; -*- mode: lisp -*-
;;;
;;; http://shootout.alioth.debian.org/
;;;
;;; From: Manuel Giraud
;;; Nicer rewrite: Nicolas Neuss

(defstruct node
  (item 0 :type fixnum)
  left right)

(defun build-btree (item depth)
  (declare (fixnum item depth))
  (if (zerop depth)
      (make-node :item item)
      (let ((item2 (* 2 item))
            (depth-1 (1- depth)))
        (make-node :item item
                   :left (build-btree (1- item2) depth-1)
                   :right (build-btree item2 depth-1)))))

(defun check-node (node)
  (declare (values fixnum) (optimize speed (safety 0)))
  (if node
      (+ (node-item node)
	 (- (check-node (node-left node))
	    (check-node (node-right node))))
      0))

(defun loop-depths (max-depth &key (min-depth 4))
  (loop for d from min-depth by 2 upto max-depth do
        (let ((iterations (ash 1 (+ max-depth min-depth (- d)))))
          (format t "~A~T  trees of depth ~A~T  check: ~A~%"
                  iterations d
                  (loop for i from 1 upto iterations 
                        sum (check-node (build-btree i d))
                        sum (check-node (build-btree (- i) d)))))))

(defun main (&optional (n (parse-integer (car (last ext:*command-line-strings*)))))
  (format t "stretch tree of depth ~A~T  check: ~A~%" (1+ n)
          (check-node (build-btree 0 (1+ n))))
  (let ((long-lived-tree (build-btree 0 n)))
    (loop-depths n)
    (format t "long lived tree of depth ~A~T  check: ~A~%"
            n (check-node long-lived-tree))))

(main)
