#!/usr/bin/mzscheme -r
; The Computer Language Shootout
; http://shootout.alioth.debian.org/ 
; Sven Hartrumpf 2005-04-12
; Implements 'Spigot' algorithm origionally due to Stanly Rabinowitz.
; This program is based on an implementation for SCM by Aubrey Jaffer and
; Jerry D. Hedden.
(module pidigits mzscheme
  (provide main)


  (define (pi n d)
    (let* ((r (inexact->exact (floor (exp (* d (log 10)))))) ; 10^d
           (p (+ (quotient n d) 1))
           (m (quotient (* p d 3322) 1000))
           (a (make-vector (+ m 1) 2))
           (digits 0))
      (vector-set! a m 4)
      (do ((j 1 (+ j 1))
           (q 0 0)
           (b 2 (remainder q r)))
        ((> j p))
        (do ((k m (- k 1)))
          ((zero? k))
          (set! q (+ q (* (vector-ref a k) r)))
          (let ((t (+ (* k 2) 1))) ; maybe use something like bit-lsh
            (vector-set! a k (remainder q t)) ; quotient/remainder like in mzscheme would speedup this and the the next line
            (set! q (* k (quotient q t)))))
        (let* ((s (number->string (+ b (quotient q r))))
               (l (string-length s)))
          (cond ((> j 1)
                 (do ((l l (+ l 1)))
                   ((>= l d))
                   (cond ((< digits n)
                          (write-char #\0)
                          (set! digits (+ digits 1))
                          (cond ((zero? (modulo digits 10))
                                 (display "\t:") (write digits) (newline))))))))
          (do ((i 0 (+ i 1)))
            ((= i l))
            (cond ((< digits n)
                   (write-char (string-ref s i))
                   (set! digits (+ digits 1))
                   (cond ((zero? (modulo digits 10))
                          (display "\t:") (write digits) (newline))))))))))

  (define (main args)
    (let ((n (if (= (vector-length args) 0)
                 1
                 (string->number (vector-ref args 0)))))
      (pi n 10))))

(require pidigits)
(main (current-command-line-arguments))
