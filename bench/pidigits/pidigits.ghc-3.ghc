-- The Great Computer Language Shootout
-- http://shootout.alioth.debian.org/
-- by Don Stewart, Einar Karttunen and Branimir Maksimovic

import System

data LFT = LFT !Integer !Integer !Integer !Integer

floorEx x (LFT q r s t) = (f q * f x + f r) `div` (f s * f x + f t)
    where f = fromInteger

comp (LFT q r s t) (LFT u v w x) = LFT (q*u+r*w) (q*v+r*x) (s*u+t*w) (s*v+t*x)

pi = stream (LFT 1 0 0 1) lfts (floorEx 3) ((==).floorEx 4) prod comp
    where prod z n = comp (LFT 10 (-10*n) 0 1) z
          lfts     = [ LFT k (4*k+2) 0 (2*k+1) | k <- [1..] ]

stream z (x:xs) f g h i
    | g z y     = y : stream (h z y) (x:xs) f g h i 
    | otherwise =     stream (i z x) xs     f g h i where y = f z

main = getArgs >>= loop 10 0 . flip take Main.pi . read . head
  where loop n sum []     = putStrLn $ replicate n ' ' ++ "\t:" ++ show sum
        loop 0 sum xs     = putStrLn ("\t:"++show sum) >> loop 10 sum xs
        loop n sum (x:xs) = putStr (show x)            >> loop (n-1) (sum+1) xs

