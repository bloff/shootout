# $Id: Makefile.mb,v 1.134 2006-05-17 04:30:40 bfulgham Exp $
include ../../../Make.header

############################################################
# common definitions go here 
############################################################
SPLITFILE := ../../../bin/split_file.bash

# Eiffel needs a little work to get it going ...
SmartEiffelPath := /usr/lib/smarteiffel
SE := $(SmartEiffelPath)/bin/compile
CLEAN_SE := $(SmartEiffelPath)/bin/clean
SE_OPTS :=  -boost -no_split -O3 -fomit-frame-pointer -funroll-loops $(SE_OPTS)
HIPE_OPTS := +native +"{hipe, [o3]}"

CLEANOPTS := -l /usr/lib/clean/lib/ArgEnv/ArgEnvC.o -I /usr/lib/clean/lib/ArgEnv \
 -I /usr/lib/clean/lib/stdenv -I ../../Include/clean $(CLEANOPTS)

BIGLOOOPTS := -fsharing -Obench -unsafe $(BIGLOOOPTS)
CHICKENOPTS := -O3 -d0 -lambda-lift -b $(CHICKENOPTS)
DLANGOPTS := -O -inline -release $(DLANGOPTS)
FLXOPTS := -c --optimize --static
FPCOPTS := -XX -Xs -O3p3r
G95OPTS := -pipe -Wall -O3 -fomit-frame-pointer -funroll-loops $(G95OPTS)
GCCOPTS := -pipe -Wall -O3 -fomit-frame-pointer -funroll-loops $(GCCOPTS)
GCJOPTS := -O3 -fomit-frame-pointer -funroll-loops
GFORTRANOPTS := -pipe -Wall -O3 -fomit-frame-pointer -funroll-loops $(GFORTRANOPTS)
GHCOPTS  := -O3 -optc-O3 -fglasgow-exts $(GHCOPTS)
GIJCOPTS := -C
GNATOPTS := -gnatp -Wall -O3 -fomit-frame-pointer -funroll-loops $(GNATOPTS)
GXXOPTS := -pipe -Wall -O3 -static -fomit-frame-pointer -funroll-loops $(GXXOPTS)
GXXLDOPTS := -L/usr/local/lib $(GXXLDOPTS)
OBJCOPTS := -pipe -Wall -O3 -static -fomit-frame-pointer -funroll-loops -lobjc $(OBJCOPTS)
ICCOPTS := -O3 -ip -static -unroll $(ICCOPTS)
IFCOPTS := -O3 -static-libcxa -Wl,-rpath,/opt/intel/fc/9.0/lib $(IFCOPTS)
ICPPOPTS := -O3 -ip -static -unroll $(ICPPOPTS)
IRON_FLAGS := -O $(IRON_FLAGS)
OCAMLOPTS := -noassert -unsafe -I /usr/lib/ocaml/contrib -ccopt -O3 $(OCAMLOPTS)
OCAMLBOPTS := -noassert -unsafe -I /usr/lib/ocaml/contrib $(OCAMLBOPTS)
PARROTOPTS := -j $(PARROTOPTS)
POLYOPTS := -q $(POLYOPTS)
STALINOPTS := -I /usr/lib/stalin -Ob -Om -On -Or -Ot -copt -O3 -copt -fomit-frame-pointer -copt -Wall -copt -freg-struct-return $(STALINOPTS)
TCCOPTS := -pipe -Wall -O3 -fomit-frame-pointer -funroll-loops $(TCCOPTS)
XDSOPTS := =m =a $(XDSOPTS) ../../Include/xds/Shootout


.EXPORT_ALL_VARIABLES:

##################################################
# common rules go here
##################################################

# some definitions used by the rules
.PHONY: plot show clean clobber test

############################################################
# Targets normally called by user
############################################################
show: plot
	@ee data/max.png &
	@ee data/cpu.png &
	@ee data/mem.png &
	@ee data/min.png &

clobber: clean
	@echo "Clobbering data/*"
	@rm -rf data

clean:
	@echo "Cleaning tmp/*"
	@rm -rf tmp

############################################################
# for source files that need to be built/compiled
############################################################

########################################
# bigloo
########################################
%.scm: $(MB_SRCDIR)/%.bigloo $(BIGLOO)
	cp $< $@

.PRECIOUS: %.scm

%.bigloo_run: %.scm
	-rm -f $@
	-$(BIGLOO) $(BIGLOOOPTS) $(<F) -o $(@F)
	-@rm -f $*.o

########################################
# chicken
########################################
%.chicken: $(MB_SRCDIR)/%.chicken $(CHICKEN)
	-cp $< $@

%.chicken_run: %.chicken
	-rm -f $@
	-$(CHICKEN) $< $(CHICKENOPTS) -o $@
	-@rm -f $*.o

########################################
# cyclone
########################################
%.cyc: $(MB_SRCDIR)/%.cyc $(GCC)
	-@cp $< $@

%.cyc_run: %.cyc $(CYCLONE)
	-@rm -f $@
	-$(CYCLONE) $(CYCOPTS) -o $@ $<
	-@rm -f $*.cyc $*.o


########################################
# felix
########################################
%.flx: $(MB_SRCDIR)/%.felix $(FELIX)
	-cp $< $@

%.felix_run: %.flx
	-@rm -f $@
	-$(FELIX) $(FLXOPTS) ./$*
	-@mv $* $@
	-@rm -f $*.o

########################################
# gfortran (GNU Fortran)
########################################
%.f90: $(MB_SRCDIR)/%.gfortran $(GFORTRAN)
	-@cp $< $@

%.gfortran_run: %.f90
	-@rm -f $@
	-$(GFORTRAN) $(GFORTRANOPTS) $< -o $@
	-rm $*.f90
	-@rm -f $*.o


########################################
# g95 (G95 Fortran)
########################################
%.f90: $(MB_SRCDIR)/%.g95 $(G95)
	-@cp $< $@

%.g95_run: %.f90
	-@rm -f $@
	-$(G95) $(G95OPTS) $< -o $@
	-rm $*.f90
	-@rm -f $*.o


########################################
# gcc
########################################
%.c: $(MB_SRCDIR)/%.gcc $(GCC)
	-@cp $< $@

%.gcc_run: %.c $(GCC)
	-@rm -f $@
	-$(GCC) $(GCCOPTS) $< -o $@
	-@rm -f $*.c $*.o


########################################
# icc
########################################
%.c: $(MB_SRCDIR)/%.icc $(ICC)
	-@cp $< $@

%.icc_run: %.c $(ICC)
	-@rm -f $@
	-$(ICC) $(ICCOPTS) $< -o $@
	-@rm -f $*.c $*.o


########################################
# tcc
########################################
%.c: $(MB_SRCDIR)/%.tcc $(TCC)
	-@cp $< $@

%.tcc_run: %.c $(TCC)
	-@rm -f $@
	-$(TCC) $(GCCOPTS) $< -o $@
	-@rm -f $*.c $*.o


########################################
# gcj
########################################
%.java: $(MB_SRCDIR)/%.gcj $(GCJ)
	-@cp $< $@

%.gcj_run: %.java $(GCJ)
	-@rm -f $@
	-$(GCJ) $(GCJOPTS) -o $@ --main=$(TEST) $<
	-@rm -f $*.o


########################################
# gpp
########################################
%.c++: $(MB_SRCDIR)/%.gpp $(GXX)
	-@cp $< $@

%.gpp_run: %.c++
	-@rm -f $@
	-$(GXX) -c $(GXXOPTS) $< -o $<.o &&  \
        $(GXX) $<.o -o $@ $(GXXLDOPTS) 
	-@rm -f $*.c++ $*.c++.o $*.o

########################################
# Intel C++
########################################
%.c++: $(MB_SRCDIR)/%.icpp $(ICPP)
	-@cp $< $@

%.icpp_run: %.c++
	-@rm -f $@
	-$(ICPP) -c $(ICCOPTS) $< -o $<.o &&  \
        $(ICPP) $<.o -o $@ $(ICCOPTS) 
	-@rm $*.c++ $*.c++.o $*.o

########################################
# Mono (C#)
########################################
%.cs: $(MB_SRCDIR)/%.csharp $(MONOC)
	-cp $< $@

%.csharp_run: %.cs
	-rm -f $@
	-$(MONOC) $(MONOOPTS) -out:$@ $<

########################################
# Clean
########################################
%.icl: $(MB_SRCDIR)/%.clean $(CLM)
	-cp $< $(TEST).icl

%.clean_run: %.icl
	-@rm -f $@
	-$(CLM) -b -nt $(CLEANOPTS) $(TEST) -o $@
	-@rm -f *.c *.o *.s

########################################
# CMUCL (Common Lisp)
########################################
# (Note: arg to compile-file for trace: ':trace-file t')
CMUCL_TRACE :=
#CMUCL_TRACE := :trace-file t
%.cmucl_run: $(MB_SRCDIR)/%.cmucl $(CMUCL_SRCS) $(CMUCL)
	-@rm -f $@ ; \
	echo "(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))" > $@ ; \
	echo "(setq *gc-verbose* nil)" >> $@ ; \
	COMPILE=$@; COMPILE=$${COMPILE%_run}_compile ; \
	FILES="" ; \
	for f in $(CMUCL_SRCS) ; do cp $$f . ; FILES="$$FILES $${f##*/}" ; done ; \
	echo "(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))" > $$COMPILE ; \
	for src in $$FILES ; do \
	    echo "(compile-file \"$$src\" :block-compile t $(CMUCL_TRACE)) (load \"$$src\" :verbose nil :print nil)" >> $$COMPILE ; \
	    base=$${src%.*} ; \
	    echo "(load \"$$base.x86f\" :verbose nil :print nil)" >> $@ ; \
	done ; \
	cp $< . ; MAIN=$< ; MAIN=$${MAIN##*/} ; \
	(echo "(compile-file \"$$MAIN\" :block-compile t $(CMUCL_TRACE) :entry-points '(main))"; echo "(quit)") >> $$COMPILE ; \
	MAIN=$${MAIN%.*} ; MAIN="$${MAIN}.x86f" ; echo "(load \"$$MAIN\" :verbose nil :print nil)" >> $@ ; \
	echo "CMUCL built with: $(CMUCL) -noinit -batch -eval '(load \"$$COMPILE\")'" ; \
	echo "### START $$COMPILE" ; cat $$COMPILE ; echo "### END $$COMPILE" ; echo ; \
	$(CMUCL) -noinit -batch -eval "(load \"$$COMPILE\")" ; \
	echo "(main) (quit)" >> $@
	-@echo "### START $@" ; cat $@ ; echo "### END $@" ; echo

########################################
# GNU Common Lisp
########################################
%.gcl_run: $(MB_SRCDIR)/%.gcl $(GCL)
	-@rm -f $@ 
	-@rm -f $*.o
	-cp $< $*.gcl
	-(GCL_ANSI=1; export GCL_ANSI; \
	  $(GCL) -compile $*.gcl)
	-touch $@

########################################
# Curry
########################################
%.curry_run: $(MB_SRCDIR)/%.curry
	-@rm -f $@ 
	-$(CURRY) -o $@ $<
	-@$(RM) ../$*.icurry
	-@rm -f $*.o

########################################
# D Language
########################################
%.d: $(MB_SRCDIR)/%.dlang $(DLANG)
	-cp $< $(TEST).d

%.dlang_run: %.d
	-@rm -f $@ 
	-$(DLANG) $(DLANGOPTS) -of$@ $(TEST).d
	-@rm -f $*.o

########################################
# Elastic
########################################
#%.ec: $(MB_SRCDIR)/%.elastic $(ELASTICC)
%.ec: $(MB_SRCDIR)/%.elastic 
	-cp $< $@

.PRECIOUS: %.ecc

%.ecc: %.ec
	-@rm -f $@ 
	-$(ELASTICC) $< -o $@

%.elastic_run: %.ecc
	@:

########################################
# Erlang
########################################
%.erl: $(MB_SRCDIR)/%.erlang $(ERLC)
	-cp $< $@

%.erlang_run: %.erl
	-@rm -f $@ 
	-(if [ "$*" = "lists" ]; then		\
	    mv lists.erl lists_test.erl;	\
	    $(ERLC) lists_test.erl;		\
	else					\
	    $(ERLC) $<;			\
	fi)

########################################
# Hipe
########################################
%.hipe_run: %.erl
	-@rm -f $@ 
	-$(ERLC) $(HIPE_OPTS) $<
	-touch $@

%.hipe_run: %.erl
	-(if [ "$*" = "lists" ]; then		\
	    mv lists.erl lists_test.erl;	\
	    $(ERLC) $(HIPE_OPTS) lists_test.erl;	\
	else					\
	    $(ERLC) $(HIPE_OPTS) $<;	\
	fi)

########################################
# gforth (GNU Forth)
########################################
%.gforth: $(MB_SRCDIR)/%.gforth $(GFORTH)
	-cp $< $@

%.gforth_run: %.gforth
	-@rm -f $@ 
	-$(GFORTH) $< -e 'savesystem $@ bye'

########################################
# ifc (Intel Fortran)
########################################
%.f90: $(MB_SRCDIR)/%.ifc $(IFC)
	-@cp $< $@

%.ifc_run: %.f90
	-@rm -f $@ 
	-$(IFC) $(IFCOPTS) $< -o $@
	-rm $*.f90
	-@rm -f $*.o


########################################
# ghc (glasgow haskell compiler)
########################################
%.hs: $(MB_SRCDIR)/%.ghc $(GHC)
	-cp $< $@

%.ghc_run: %.hs $(GHC)
	-@rm -f $@ 
	-$(GHC) $(GHCOPTS) $< -o $@
	-@rm -f $*.o

########################################
# nhc98 (York haskell compiler)
########################################
%.nhc98_run: $(MB_SRCDIR)/%.nhc98 $(NHC98)
	-@rm -f $@ 
	-cp $< $*.hs
	-$(NHC98) $(NHC98OPTS) $*.hs -o $@
	-@rm -f $*.o


########################################
# 
########################################
# hugs (Yale haskell interpreter)
########################################
%.hugs_run: $(MB_SRCDIR)/%.hugs $(HUGS)
	-@rm -f $@ 
	-cp $< $*.hs
	-touch $@

.PRECIOUS: %.hs

########################################
# GNAT (GNU Ada)
########################################
%.ada: $(MB_SRCDIR)/%.gnat $(GNATB) $(GNATC) $(GNATL)
	-@rm -f $@
	-cp $< $@

%.gnat_run: %.ada
	-@rm -f $@ 
	-$(GNATCHOP) -w $<
	-$(GNATC) $(GNATOPTS) -f $(TEST).adb -o $@
	-@rm -f $*.o $*.ali

########################################
# Gwydion Dylan
########################################
%.dylan: $(MB_SRCDIR)/%.gwydion $(GWYDION)
	cp $< $@

%.gwydion_run: %.dylan
	-@rm -f $@ 
	-(if [ "$*" = "random" ]; then	\
	    cp random.dylan randum.dylan;	\
	fi)
	-$(GWYDION) -s $(GWYDION_OPTS) $<
	-(if [ "$*" = "random" ]; then	\
	    mv randum $@;		\
	else				\
	    mv $* $@;			\
	fi)
	-rm $*.[co]
	-rm -rf .libs

########################################
# icon
# - Note: I had a conflict with some of the environment
# variables icon uses, so I unset them all to be sure.
# Icon really ought to use less generic names for them.
########################################
%.icn: $(MB_SRCDIR)/%.icon $(ICON)
	-cp $< $@

.PRECIOUS: %.icon_run

%.icon_run: %.icn
	-@rm -f $@ 
	-(unset STRSIZE BLOCKSIZE COEXPSIZE MSTKSIZE TRACE NOERRBUF ; \
	$(ICON) -o $@ $< )

########################################
# java
########################################
%.java_run: $(MB_SRCDIR)/%.java $(JAVAC)
	-@rm -rf $@
	-if [ ! -d $@ ] ; then mkdir $@ ; fi
	-cp $< $@/$(TEST).java
	-$(JAVAC) $(JAVACOPTS) -d $@ $@/$(TEST).java
	-touch $@

%.javaxint_run: $(MB_SRCDIR)/%.javaxint $(JAVAC)
	-@rm -rf $@ 
	-( if [ ! -d $@ ] ; then mkdir $@ ; fi)
	-cp $< $@/$(TEST).java
	-$(JAVAC) $(JAVACOPTS) -d $@ $@/$(TEST).java
	-touch $@

%.javaclient_run: $(MB_SRCDIR)/%.javaclient $(JAVAC)
	-@rm -rf $@ 
	-( if [ ! -d $@ ] ; then mkdir $@ ; fi)
	-cp $< $@/$(TEST).java
	-$(JAVAC) $(JAVACOPTS) -d $@ $@/$(TEST).java
	-touch $@

%.java14_run: $(MB_SRCDIR)/%.java $(JAVAC14)
	-@rm -rf $@
	-if [ ! -d $@ ] ; then mkdir $@ ; fi
	-cp $< $@/$(TEST).java
	-$(JAVAC14) $(JAVAC14OPTS) -d $@ $@/$(TEST).java
	-touch $@


########################################
# gij (GNU Interpreted Java)
########################################
%.gij_run: $(MB_SRCDIR)/%.gij $(GIJ)
	-@rm -rf $@ 
	-if [ ! -d $@ ] ; then mkdir $@ ; fi
	-cp $< $@/$(TEST).java
	-( cd $@ ; $(GCJ) $(GIJCOPTS) -classpath '.' $(TEST).java )
	-touch $@

########################################
# kaffe
########################################
%.kaffe_run: $(MB_SRCDIR)/%.kaffe $(KAFFE)
	-@rm -rf $@ 
	-( if [ ! -d $@ ] ; then mkdir $@ ; fi)
	-cp $< $@/$(TEST).java
	-( cd $@ ; $(JAVAC) $(JAVACOPTS) -classpath '.' $(TEST).java )
	-touch $@

########################################
# nice
########################################

%.nice_run: $(MB_SRCDIR)/%.nice $(NICEC)
	-@rm -rf $*.nice_build $@  
	-( if [ ! -d $@ ] ; then mkdir nice_build ; mkdir nice_build/$* ; fi)
	-cp $< nice_build/$*/$*.nice
	-( cd nice_build/$* ; $(NICEC) -d . --sourcepath "..:../../../.." -a o.jar $* )
	-cp nice_build/$*/o.jar o.jar
	-touch $@

########################################
# lua
########################################
%.lua_run: $(MB_SRCDIR)/%.lua $(LUA)
	-@rm -f $@ 
	-cp $< $@
	-@echo "lua -e NUM=%ARG $@"

########################################
# mercury
########################################
%.mercury_run: $(MB_SRCDIR)/%.mercury $(MERCURY)
	-@rm -f $@ 
	-@( \
	cp $(MB_SRCDIR)/$(TEST).mercury mytest.m && \
	$(MERCURY) $(MERCURYOPTS) mytest.depend && \
	$(MERCURY) $(MERCURYOPTS) mytest || cat mytest.err && \
	mv -f mytest $@ && \
	$(MERCURY) $(MERCURYOPTS) realclean > /dev/null \
	)

########################################
# mlton
########################################
%.mlton_run: $(MB_SRCDIR)/%.mlton $(MLTON)
	-@rm -f $@ 
	-cp $(MB_SRCDIR)/$*.mlton $*.sml
	-(if [ -r $(MB_SRCDIR)/mlb_$*.mlb ]; then			\
			mv $(MB_SRCDIR)/mlb_$*.mlb $*.mlb;		\
		else							\
			echo '../../Include/mlton-src/lib.mlb $*.sml'	\
				 >$*.mlb;				\
		fi)
	-$(MLTON) $(MLTONOPTS) -output $@ $*.mlb
	-rm -f $*.mlb $*.sml

########################################
# MzScheme
########################################
%.ss: $(MB_SRCDIR)/%.mzscheme $(MZSCHEME)
	-cp $< $@

%.mzscheme_run: %.ss
	-@rm -f $@ 
	-cp $< $@

########################################
# MzScheme (Compiled)
########################################
%.mzc_run: %.ss
	-@rm -f $@ 
	-$(MZC) $<
	-echo "#!/usr/bin/mzscheme -r" > $@
	-echo "(load-extension \"$*.so\")" >> $@
	-chmod a+rwx $@


########################################
# Oberon-2 (XDS C)
########################################
%.xds: $(MB_SRCDIR)/%.xds $(XDS)
	-cp $< $*.ob2

%.xds_run: %.xds
	-@rm -f $@ 
	-$(XDS) $(XDSOPTS) $*.ob2
	-@rm -f $*.o $*.sym $*.mkf $*.xds
	-mv $* $@
	
	
########################################
# Oberon-2 (oo2c) 
########################################
%.ooc: $(MB_SRCDIR)/%.ooc $(OOC)
	-cp $< $(TEST).ooc
	
%.ooc_run: %.ooc
	-@rm -f $@ 
	-$(OOC) -r ../../Include/ooc -r . $(OO2COPTS) -M $(TEST).ooc
	-mv bin/* $@
	-rm -rf obj sym bin	
			
				
########################################
# Objective C
########################################
%.m: $(MB_SRCDIR)/%.objc $(OBJC)
	-cp $< $@

%.objc_run: %.m
	-@rm -f $@ 
	-$(OBJC) $(OBJCOPTS) $< -o $@
	-@rm -f $*.o

########################################
# ocaml native code compiler
########################################
%.ml: $(MB_SRCDIR)/%.ocaml $(OCAML)
	-cp $< $@

%.ocaml_run: %.ml
	-@rm -f $@ 
	-$(OCAML) $(OCAMLOPTS) $< -o $@


########################################
# ocaml bytecode compiler
########################################
%.ml: $(MB_SRCDIR)/%.ocamlb $(OCAMLB)
	-cp $< $@

%.ocamlb_run: %.ml
	-@rm -f $@ 
	-$(OCAMLB) $(OCAMLBOPTS) $< -o $@

########################################
# Mozart/Oz compiler
########################################
%.oz: $(MB_SRCDIR)/%.oz $(OZC)
	-cp $< $@

%.oz_run: %.oz
	-@rm -f $@ 
	-$(OZC) $(OZOPTS) -x $<
	-mv $* $@

########################################
# fpascal (Free Pascal Compiler)
########################################
%.pas: $(MB_SRCDIR)/%.fpascal $(FPASCAL)
	-cp $< $@

%.fpascal_run: %.pas
	-@rm -f $@ 
	-$(FPASCAL) $(FPCOPTS) -oFPASCAL_RUN $<
	-mv FPASCAL_RUN $@
	-@rm -f $*.o

########################################
# gpc (GNU Pascal Compiler)
########################################
%.pas: $(MB_SRCDIR)/%.gpc $(GPC)
	-cp $< $@

%.gpc_run: %.pas
	-@rm -f $@ 
	-$(GPC) $(GPCOPTS) $< -o $@
	-@rm -f $*.o

########################################
# Pike
########################################
%.pike_run: $(MB_SRCDIR)/%.pike $(PIKE)
	-@rm -f $@ 
	-rm -f $*.o
	-cp $< $*.pike
	-$(PIKE) -x dump $*.pike
	-touch $@

########################################
# Ciao Prolog
########################################
%.ciao_run: $(MB_SRCDIR)/%.ciao $(CIAOC)
	-@rm -f $@ 
	-rm -f $*.pl
	-cp $< $*.pl
	-$(CIAOC) $(CIAOOPTS) -o $@ $*
	-rm -f $*.p[lo] $*.itf

########################################
# GNU Prolog
########################################
%.gprolog_run: $(MB_SRCDIR)/%.gprolog $(GPLC)
	-@rm -f $@ 
	-rm -f $*.pl
	-cp $< $*.pl
	-$(GPLC) $(GPLCOPTS) -o $@ $*.pl
	-rm -f $*.p[lo]

########################################
# Parrot
########################################
%.parrot_run: $(MB_SRCDIR)/%.parrot $(PARROT)
	-@rm -f $@
	-rm -f $*.pir $*.pbc
	-cp $< $*.pir
	-$(PARROT) -o $*.pbc $*.pir
	-touch $@

########################################
# petit
########################################
%.petitnasm: $(MB_SRCDIR)/%.petitnasm $(PETITNASM)
	-cp $< $@

%.petitnasm_run: %.petitnasm
	-rm -f $@
	-( cd $(PETITNASM) ; ./twobit twobit.heap -args $(MB_SRCDIR)/tmp $*.petitnasm ; cd $(MB_SRCDIR)/tmp )
	-cp .larceny $@
	-@rm -f $*.so $*.o $*.asm

########################################
# Python
########################################
%.python_run: $(MB_SRCDIR)/%.python $(PYTHON)
	-@rm -f $@ 
	-rm -f $*.pyo $*.pyc
	-cp $< $*.py
	-$(PYTHON) -OO -c "from py_compile import compile; compile('$(MB_SRCDIR)/tmp/$*.py')"
	-touch $@

########################################
# Psyco
########################################
%.psyco_run: $(MB_SRCDIR)/%.psyco $(PYTHON)
	-@rm -f $@ 
	-rm -f $*.pyo $*.pyc
	-cp $< $*.py
	-$(PSYCO) -OO -c "from py_compile import compile; compile('$(MB_SRCDIR)/tmp/$*.py')"
	-touch $@

########################################
# IronPython
########################################
%.iron_run: $(MB_SRCDIR)/%.iron $(IRON)
	-@rm -f $@ 
	-rm -f $*.py $*.pyo $*.pyc
	-cp $< $*.iron
	#-$(IRON) -OO -c "from py_compile import compile; compile('$(MB_SRCDIR)/tmp/$*.py')"
	-touch $@

########################################

########################################
# rep
########################################
%.jl: $(MB_SRCDIR)/%.rep $(REP)
	-cp $< $@

.PRECIOUS: %.jlc

%.jcl: %.jl
	-@rm -f $@ 
	-$(REP) --batch --no-rc -l compiler -f compile-batch $<

%.rep_run: %.jcl
	@:

########################################
# sablevm
########################################
%.sablevm_run: $(MB_SRCDIR)/%.sablevm $(JAVA)
	-@rm -rf $@ 
	-( if [ ! -d $@ ] ; then mkdir $@ ; fi )
	-cp $< $@/$(TEST).java
	-( cd $@ ; $(JAVAC) $(JAVACOPTS) -classpath '.' $(TEST).java )
	-touch $@

########################################
# SBCL (Common Lisp)
########################################
# (Note: arg to compile-file for trace: ':trace-file t')
SBCL_TRACE :=
#SBCL_TRACE := :trace-file t
%.sbcl_run: $(MB_SRCDIR)/%.sbcl $(SBCL_SRCS) $(SBCL)
	-@rm -f $@ ; \
	echo "(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))" > $@ ; \
	COMPILE=$@; COMPILE=$${COMPILE%_run}_compile ; \
	FILES="" ; \
	for f in $(SBCL_SRCS) ; do cp $$f . ; FILES="$$FILES $${f##*/}" ; done ; \
	echo "(proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))" > $$COMPILE ; \
	for src in $$FILES ; do \
	    echo "(compile-file \"$$src\" $(SBCL_TRACE)) (load \"$$src\" :verbose nil :print nil)" >> $$COMPILE ; \
	    base=$${src%.*} ; \
	done ; \
	cp $< . ; MAIN=$< ; MAIN=$${MAIN##*/} ; \
	(echo "(handler-bind ((sb-ext:defconstant-uneql " \
              "    (lambda (c) (abort c)))) " \
              "    (load (compile-file \"$$MAIN\" $(SBCL_TRACE))))" \
              "(save-lisp-and-die \"sbcl.core\" :purify t)") >> $$COMPILE ; \
	echo "SBCL built with: $(SBCL) --userinit /dev/null --sysinit /dev/null -batch -eval '(load \"$$COMPILE\")'" ; \
	echo "### START $$COMPILE" ; cat $$COMPILE ; echo "### END $$COMPILE" ; echo ; \
	$(SBCL) --noinform --userinit /dev/null --sysinit /dev/null --disable-debugger --load $$COMPILE; \
	echo "(main) (quit)" >> $@
	-@echo "### START $@" ; cat $@ ; echo "### END $@" ; echo


########################################
# scala
########################################

%.scala_run: $(MB_SRCDIR)/%.scala $(SCALAC)
	-@rm -rf $@ 
	-( if [ ! -d $@ ] ; then mkdir $@ ; fi)
	-cp $< $@/$(TEST).scala
	-( cd $@ ; $(SCALAC) $(TEST).scala )
	-touch $@


########################################
# SmartEiffel
########################################
%.e: $(MB_SRCDIR)/%.se $(SE)
	-@echo "copying $< to $(TEST).e"
	-cp $< $(TEST).e
	-$(SPLITFILE) $< $(TEST).e

%.se_run: %.e
	-rm -f $@
	-$(SE) $(SE_OPTS) -o $@ $(TEST) ; $(CLEAN_SE) $*
	-@rm -f $*.o

########################################
# sml/nj
########################################
%.x86-linux: $(MB_SRCDIR)/%.smlnj $(SMLNJ) $(SMLNJBUILD)
	-@rm -f $@
	-cp $< $*.sml
	-cp $(MB_SRCDIR)/cm_$*.cm $*.cm
	-$(SMLNJBUILD) $*.cm Test.main $*
	-@rm -f $*.sml $*.cm

.PRECIOUS: %.x86-linux

%.smlnj_run: %.x86-linux
	@:

%.test_dbase: $(MB_SRCDIR)/%.poly $(POLY)
	-@rm -f $@
	-echo "PolyML.make_database \"$*.test_dbase\"; PolyML.quit();" \
		| $(POLY)
	-cat $< | $(POLY) $*.test_dbase

.PRECIOUS: %.test_dbase

%.poly_run: %.test_dbase
	@:

########################################
# Stalin
########################################
%.stalin_run.sc: $(MB_SRCDIR)/%.stalin $(STALIN)
	-cp $< $@

%.stalin_run: %.stalin_run.sc
	-rm -f $@
	-$(STALIN) $(STALINOPTS) $<
	-@rm -f $*.o

########################################
# XEmacs :-)
########################################
%.el: $(MB_SRCDIR)/%.xemacs $(XEMACS)
	-cp $< $@

.PRECIOUS: %.elc

%.elc: %.el
	-rm -f $@
	-$(XEMACS) -vanilla -batch -f batch-byte-compile $<

%.xemacs_run: %.elc
	@:


