;;   The Computer Language Shootout
;;   http://shootout.alioth.debian.org/
;;   contributed by Wade Humeniuk
;;   Thanks to James McIlree and Juho Snellman
;;   for the previous Lisp SBCL submisson.
;;   
;;   Thanks to Robert Brown for pointing
;;   out define-hash-table-test.
;;
;;   Use of macros was removed.
;;

(defvar *gene* nil)
(defvar *k* 0)

(defun gene= (gene1 gene2)
  (declare (optimize (speed 3) (safety 0) (debug 0))
	   (type (or simple-base-string fixnum) gene1 gene2))
  (when (stringp gene2) (rotatef gene1 gene2))
  (let ((gene *gene*) (k *k*))
    (declare (type simple-base-string gene)
	     (type fixnum k))
    (when (stringp gene2) (rotatef gene1 gene2))
    (cond
      ((and (typep gene1 'fixnum) (typep gene2 'fixnum))
       (loop for i1 from gene1 below (the fixnum (+ gene1 k))
	     for i2 from gene2 below (the fixnum (+ gene2 k))
	     always (char= (schar gene i1) (schar gene i2))))
      ((typep gene2 'fixnum)
       (loop for c of-type base-char across gene1
	     for i from gene2 below (the fixnum (+ gene2 k))
	     always (char= c (schar gene i))))
      (t
       (error "Invalid Gene Comparison")))))

(defun sxhash-gene (gene)
  (declare (optimize (speed 3) (safety 0) (debug 0))
	   (type (or simple-base-string fixnum) gene)
	   (type simple-base-string *gene*)
	   (type fixnum *k*))
  (macrolet ((set-result (form)
               `(setf result (ldb (byte 32 0) ,form))))
    (let ((result 0))
      (declare (type (unsigned-byte 32) result))
      (if (stringp gene)
	  (loop for c of-type base-char across gene do
		(set-result (+ result (char-code c)))
		(set-result (+ result (ash result 10)))
		(set-result (logxor result (ash result -6))))
	  (loop for i from gene below (the fixnum (+ gene *k*)) do
		(set-result (+ result (char-code (aref *gene* i))))
		(set-result (+ result (ash result 10)))
		(set-result (logxor result (ash result -6)))))
      (set-result (+ result (ash result 3)))
      (set-result (logxor result (ash result -11)))
      (set-result (logxor result (ash result 15)))
      (logand result most-positive-fixnum))))

(sb-int:define-hash-table-test 'gene #'gene= #'sxhash-gene)

(defun slice-and-dice (gene k)
  (declare (optimize (speed 3) (safety 0) (debug 0))
	   (type simple-base-string gene)
	   (type fixnum k))
  (let ((*gene* gene)
	(*k* k)
	(hash-table (if (= k 1)
			(make-hash-table :test 'eql)
			(make-hash-table :test 'gene))))
    (if (= k 1)
	(loop for i from 0 to (the fixnum (- (length gene) k)) do
	      (incf (the fixnum (gethash (schar gene i) hash-table 0))))
	(loop for i from 0 to (the fixnum (- (length gene) k)) do
	      (incf (the fixnum (gethash i hash-table 0)))))
    hash-table))

(defun discard-data-header (stream)
  (loop for line = (read-line stream nil nil)
	while (and line (string/= ">THREE" line :end2 6))))

(defun read-data (stream)
  (declare (optimize (speed 3) (safety 0) (debug 0)))
  (let ((data (make-array 0 :element-type 'base-char :adjustable t :fill-pointer 0)))
    (do ((line (read-line stream nil 'eof) (read-line stream nil 'eof)))
        ((or (eq line 'eof) (char= (schar line 0) #\>)))
      (if (not (char= (schar line 0) #\;))
          (dotimes (char-index (length line))
            (vector-push-extend (char-upcase (the base-char (schar line char-index))) data))))
    (coerce data 'simple-base-string)))

(defun print-precentages (gene k)
  (declare (type simple-base-string gene)
	   (type fixnum k))
  (let* ((ht (slice-and-dice gene k))
	 (sorted-frequencies)
	 (sum 0))
    (maphash (lambda (key v)
	       (incf sum v)
	       (push (cons (if (= k 1) key
			       (subseq gene key (+ key k)))
			   v)
		     sorted-frequencies))
	     ht)
    (setf sorted-frequencies
	  (sort sorted-frequencies 
		(lambda (v1 v2)
		  (cond ((> (cdr v1) (cdr v2)) t)
			((< (cdr v1) (cdr v2)) nil)
			(t (string< (car v1) (car v2)))))))
    (dolist (entry sorted-frequencies)
      (format t "~A ~,3F~%" 
	      (car entry)
	      (* (/ (cdr entry) (float sum)) 100.0)))
    (terpri)))

(defun print-occurence (slice gene)
  (let ((ht (slice-and-dice gene (length slice))))
    (format t "~A~C~A~%" (gethash slice ht 0) #\Tab slice)))

(defun slice (string) (coerce string 'simple-base-string))

(defun main ()
  (declare (optimize (speed 0) (safety 1)))
  (discard-data-header *standard-input*)
  (let ((gene (read-data *standard-input*)))
    (print-precentages gene 1)
    (print-precentages gene 2)
    (print-occurence (slice "GGT") gene)
    (print-occurence (slice "GGTA") gene)
    (print-occurence (slice "GGTATT") gene)
    (print-occurence (slice "GGTATTTTAATT") gene)
    (print-occurence (slice "GGTATTTTAATTTATAGT") gene)))


(defun test ()
  (with-open-file (*standard-input* "/home/wade/lisp/knucleotide/knucleotide-input.txt"
				    :direction :input)
    (with-open-file (*standard-output* "/home/wade/lisp/knucleotide/output.txt"
				       :direction :output 
				       :if-does-not-exist :create
				       :if-exists :supersede)
      (main))))
