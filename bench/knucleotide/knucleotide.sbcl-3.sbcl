;;   The Computer Language Shootout
;;   http://shootout.alioth.debian.org/
;;   contributed by Wade Humeniuk
;;
;;   Thanks to James McIlree and Juho Snellman
;;   for the previous Lisp SBCL submisson.
;;   
;;   This verson makes use of macros to create
;;   a slice-and-dice domain language to 
;;   analyze the FASTA input.
;;

(declaim (inline make-gene))
(defun make-gene (n)
  (coerce (make-array n :element-type 'base-char) 'simple-base-string))

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun slice-name (n) (intern (format nil "~A%~A" 'slice n)))
  (defun freq-name (n) (intern (format nil "~A%~A" 'freq n)))
  (defun i-name (n) (intern (format nil "~A%~A" 'i n)))

  (defun %single-slicer ()
    `(incf (the fixnum (gethash fasta%nucleotide ,(freq-name 1) 0))))

  (defun %slicer (n)
    (if (= n 1)
	(%single-slicer)
	(let ((slice (slice-name n))
	      (freq (freq-name n))
	      (i (i-name n)))
	  `(progn
	    (setf (schar ,slice ,i) fasta%nucleotide)
	    (incf ,i)
	    (when (= ,i ,n)
	      (when (= (the fixnum (incf (the fixnum (gethash ,slice ,freq 0)))) 1)
		(setf ,slice (copy-seq ,slice)))
	      (dotimes (j ,(1- n))
		(setf (schar ,slice j) (schar ,slice (1+ j))))
	      (decf ,i))))))
)


(defun discard-data-header (stream)
  (loop for line = (read-line stream nil nil)
	while (and line (string/= ">THREE" line :end2 6))))

(declaim (inline read-data-line))

(defun read-data-line (stream)
  (declare (optimize (safety 1)))
  (let ((line (read-line stream nil nil)))
    (when (and line (char/= #\> (schar line 0)))
      line)))

(defmacro slice-and-dice ((stream sizes) &body body)
  (let ((slices (loop for s in sizes collect `(,(slice-name s) (make-gene ,s))))
	(freqs (loop for s in sizes collect `(,(freq-name s) (make-hash-table :test #'equal))))
	(is (loop for s in sizes collect `(,(i-name s) 0)))
	(slicers (loop for s in sizes collect (%slicer s)))
	(line (gensym "LINE")))
    `(let (,@slices ,@freqs ,@is)
      (declare (optimize (speed 3) (safety 0) (debug 0))
               (type simple-base-string ,@(mapcar 'first slices))
               (type hash-table ,@(mapcar 'first freqs))
               (type fixnum ,@(mapcar 'first is))
               (ignorable i%1 slice%1))
      (loop for ,line = (read-data-line ,stream)
            while ,line do
            (loop for fasta%nucleotide of-type base-char across ,line do
	          (setf fasta%nucleotide (char-upcase fasta%nucleotide))
	          ,@slicers))
      ,@body)))

(defun print-precentages (freq)
  (declare (optimize (safety 1)))
  (let ((sorted-frequencies)
        (sum 0))
    (maphash #'(lambda (k v)
		 (incf sum v)
		 (push (cons k v) sorted-frequencies))
	     freq)
    (setf sorted-frequencies
	  (sort sorted-frequencies 
		#'(lambda (v1 v2)
		    (cond ((> (cdr v1) (cdr v2)) t)
			  ((< (cdr v1) (cdr v2)) nil)
			  (t (string< (car v1) (car v2)))))))
    (dolist (entry sorted-frequencies)
      (format t "~A ~,3F~%" 
	      (car entry)
	      (* (/ (cdr entry) (float sum)) 100.0)))
    (terpri)))

(defmacro print-occurence (gene)
  `(format t "~A~C~A~%" (gethash ,gene ,(freq-name (length gene)) 0) #\Tab ,gene))

(defmacro print-occurences (&rest genes)
  `(progn
    ,@(mapcar (lambda (gene) `(print-occurence ,gene)) genes)))

(defun main ()
  (declare (optimize (speed 0) (safety 1)))
  (discard-data-header *standard-input*)
  (slice-and-dice (*standard-input* (1 2 3 4 6 12 18))
    (print-precentages freq%1)
    (print-precentages freq%2)
    (print-occurences "GGT" "GGTA" "GGTATT" "GGTATTTTAATT" "GGTATTTTAATTTATAGT")))

(defun test ()
  (with-open-file (*standard-input* "/home/wade/lisp/knucleotide/knucleotide-input.txt"
				    :direction :input)
    (with-open-file (*standard-output* "/home/wade/lisp/knucleotide/output.txt"
				       :direction :output 
				       :if-does-not-exist :create
				       :if-exists :supersede)
      (main))))
