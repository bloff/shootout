/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   Algorithm (written in C#) contributed by Isaac Gouy

   Converted to and optimized for D by Dave Fladebo
   compile: dmd -O -inline -release knucleotide.d
*/

import std.outbuffer, std.cstream, std.string;

int main()
{
    char[]          bufr = new char[4096];
    bool            flag = false;
    OutBuffer       ob = new OutBuffer();
    BufferedStream  bsi = new BufferedStream(din,bufr.length);

    // extract nucleotide sequence
    foreach(char[] line; bsi)
    {
        if(line.length)
        {
            if(!flag)
            {
                flag = !icmp(line[0..6],">THREE");
                continue;
            }
            else
            {
                char c = line[0];
                if(c == '>') break;
                else if(c != ';') ob.write(toupper(line));
            }
        }
    }

    // calculate nucleotide frequencies
    KNucleotide kn = new KNucleotide(ob.toString());
    kn.WriteFrequencies(1);
    kn.WriteFrequencies(2);

    kn.WriteCount("GGT");
    kn.WriteCount("GGTA");
    kn.WriteCount("GGTATT");
    kn.WriteCount("GGTATTTTAATT");
    kn.WriteCount("GGTATTTTAATTTATAGT");

    return 0;
}

class KNucleotide {
private:
    char[]  sequence;

public:
    this(char[] s)
    {
        sequence = s;
    }

    void WriteFrequencies(int nucleotideLength)
    {
        int[char[]] frequencies;
        GenerateFrequencies(nucleotideLength,frequencies);

        int sum = 0;
        foreach(char[] key, int val; frequencies)
        {
            if(key.length == nucleotideLength) sum += val;
        }

        int last = 0;
        foreach(int vsr; frequencies.values.sort.reverse)
        {
            if(vsr != last)
            {
                foreach(char[] key, int val; frequencies)
                {
                    if(key.length == nucleotideLength)
                    {
                        double ratio = sum ? val / cast(double)sum : 0;
                        if(val == vsr) std.stdio.writefln(key," %2.3f",ratio * 100.0);
                    }
                }
                last = vsr;
            }
        }
        std.stdio.writefln("");
    }

    void WriteCount(char[] nucleotideFragment)
    {
        int[char[]] frequencies;
        GenerateFrequencies(nucleotideFragment.length,frequencies);
        int* p = (nucleotideFragment in frequencies);
        int count = p ? *p : 0;
        std.stdio.writefln(count,"\t",nucleotideFragment);
    }

private:
    void GenerateFrequencies(int length, inout int[char[]] frequencies)
    {
        for(int frame = 0; frame < length; frame++) KFrequency(length,frame,frequencies);
    }

    void KFrequency(int k, int readingFrame, inout int[char[]] frequencies)
    {
        int n = sequence.length - k + 1;
        for(int i = readingFrame; i < n; i += k)
        {
            frequencies[sequence[i..i+k]]++;
        }
    }
}
