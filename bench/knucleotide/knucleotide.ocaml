(* k-nucleotide.ml
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Troestler Christophe
 *)

open Printf

let count = Hashtbl.create 100000
let counts k dna =
  Hashtbl.clear count;
  for i = 0 to String.length dna - k do
    let key = String.sub dna i k in
    try let c = Hashtbl.find count key in Hashtbl.replace count key 
(c+1)
    with Not_found -> Hashtbl.add count key 1
  done;
  count

let compare_freq ((k:string),(f:float)) (k', f') =
  if f > f' then -1 else if f < f' then 1 else compare k k'

let write_frequencies k dna =
  let cnt = counts k dna in
  let tot = float(Hashtbl.fold (fun _ n t -> n + t) cnt 0) in
  let frq = Hashtbl.fold
    (fun k n l -> (k, (100. *.(float n)/. tot)) :: l) cnt [] in
  let frq = List.sort compare_freq frq in
  List.iter (fun (k,f) -> printf "%s %.2f\n" k f) frq;
  print_string "\n"

let write_count seq dna =
  let cnt = counts (String.length seq) dna in
  printf "%d\t%s\n" (try Hashtbl.find cnt seq with Not_found -> 0) seq


let dna_three =
  let is_three s = try String.sub s 0 6 = ">THREE" with _ -> false in
  while not(is_three(input_line stdin)) do () done;
  let buf = Buffer.create 1000 in
  (* Skip possible comment and read the protein/DNA sequence *)
  (try while true do
       let line = input_line stdin in
       if line.[0] = '>' then raise End_of_file;
       if line.[0] <> ';' then Buffer.add_string buf (String.uppercase 
line)
   done with End_of_file -> ());
  Buffer.contents buf

let () =
  write_frequencies 1 dna_three;
  write_frequencies 2 dna_three;
  List.iter (fun k -> write_count k dna_three)
    ["GGT"; "GGTA"; "GGTATT"; "GGTATTTTAATT"; "GGTATTTTAATTTATAGT"]
    