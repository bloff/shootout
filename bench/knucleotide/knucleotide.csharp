/* The Great Computer Language Shootout 
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy 
*/

using System;
using System.Collections;
using System.Text;

class KNucleotide {
   private String sequence;

   internal KNucleotide(String s) {
      sequence = s;
   }

   static void Main(string[] args){

      StringBuilder builder = new StringBuilder();
      String line, sequence;
      char c;

      while ( (line = Console.ReadLine()) != null ) {
         c = line[0];
         if ((c == '>') && (line.Substring(1,5)=="THREE")) break;
      }

      while ( (line = Console.ReadLine()) != null ) {
         c = line[0];
         if (c == '>') 
            break;
         else if (c != ';') 
            builder.Append(line.ToUpper());
      }

      KNucleotide n = new KNucleotide( builder.ToString() );
      n.WriteFrequencyK(1); 
      n.WriteFrequencyK(2); 

      n.WriteCount("GGT"); 
      n.WriteCount("GGTA");
      n.WriteCount("GGTATT");
      n.WriteCount("GGTATTTTAATT");
      n.WriteCount("GGTATTTTAATTTATAGT"); 
   }


   private void KFrequency(String s, Hashtable freq, int k, int frame) {
      int n = s.Length - k + 1;

      object item;
      for(int i=frame; i<n; i+=k) {
         String knucleo = s.Substring(i,k);                 
         if ( (item = freq[knucleo]) != null) 
            ((KeyValue)item).v++;
         else 
            freq[knucleo] = new KeyValue(knucleo,1);
      }
   }

   private void WriteFrequencyK(int k) {
      Hashtable freq = new Hashtable();
      for(int i=0; i<k; i++) KFrequency(sequence,freq,k,i);

      KeyValue[] items = new KeyValue[freq.Count];
      freq.Values.CopyTo(items, 0);

      Array.Sort(items, new SortByValue() );

      int sum = 0;
      foreach (KeyValue each in items) sum += (int)each.v;

      foreach (KeyValue each in items) {
         double percent = (double)((int)each.v)/(double)sum * 100.0;
         Console.WriteLine("{0} {1:f2}", (string)each.k, percent );
      } 
      Console.WriteLine("");
   }

   private void WriteCount(String fragment) {
      Hashtable freq = new Hashtable();
      int k = fragment.Length;
      for(int i=0; i<k; i++) KFrequency(sequence,freq,k,i);

      int count = 0;
      object item;
      if ((item = freq[fragment]) != null) count = ((KeyValue)item).v;
      Console.WriteLine("{0}\t{1}", count, fragment );
   }


   private class KeyValue {
      internal String k;
      internal int v;

      internal KeyValue(String k, int v) {
         this.k = k;
         this.v = v;
      }
   }

   private class SortByValue : IComparer {
      internal SortByValue() {}

      int IComparer.Compare(object o1, object o2) {
         return ((int)((KeyValue)o2).v).CompareTo((int)((KeyValue)o1).v);
      }
   }
}




