/* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy 
*/

using System;
using System.IO;
using System.Collections.Generic; 
using System.Text;

class KNucleotide {
   private String sequence;
   private Dictionary<string,Cell> frequencies;
   private int k;

   KNucleotide(String s) {
      sequence = s;
      frequencies = new Dictionary<string,Cell>();
      k = 0;
   }

   static void Main(string[] args){
      // extract nucleotide sequence
      StringBuilder builder = new StringBuilder();
      String line;
      char c;

      using (StreamReader s = new StreamReader(Console.OpenStandardInput())){
         while ( (line = s.ReadLine()) != null ) {
            c = line[0];
            if ((c == '>') && (line.Substring(1,5)=="THREE")) break;
         }

         while ( (line = s.ReadLine()) != null ) {
            c = line[0];
            if (c == '>') 
               break;
            else if (c != ';') 
               builder.Append(line.ToUpper());
         }
      }

      // calculate nucleotide frequencies
      KNucleotide kn = new KNucleotide( builder.ToString() );
      kn.WriteFrequencies(1); 
      kn.WriteFrequencies(2); 

      kn.WriteCount("GGT"); 
      kn.WriteCount("GGTA");
      kn.WriteCount("GGTATT");
      kn.WriteCount("GGTATTTTAATT");
      kn.WriteCount("GGTATTTTAATTTATAGT"); 
   }


   void WriteFrequencies(int nucleotideLength) {
      double sum = (double)(sequence.Length - nucleotideLength + 1);

      GenerateFrequencies(nucleotideLength);

      List<KeyValuePair<string,Cell>> sfrequencies = 
         new List<KeyValuePair<string,Cell>>(frequencies);

      sfrequencies.Sort(DescendingFrequencyThenCode);
     
      foreach (KeyValuePair<string,Cell> each in sfrequencies) {
         double percent = (double)each.Value.value/sum * 100.0;
         Console.WriteLine("{0} {1:f3}", (string)each.Key, percent );
      } 
      Console.WriteLine("");
   }

   void WriteCount(String nucleotideFragment) {
      GenerateFrequencies(nucleotideFragment.Length);
      Cell c = null;
      int count = 0;
      if (frequencies.TryGetValue(nucleotideFragment, out c)) count = c.value;
      Console.WriteLine("{0}\t{1}", count, nucleotideFragment );
   }


   private void GenerateFrequencies(int length) {
      k = length;
      frequencies.Clear();
      for(int frame=0; frame<k; frame++) KFrequency(frame);
   }

   private void KFrequency(int readingFrame) {
      int n = sequence.Length - k + 1;
      for(int i=readingFrame; i<n; i+=k) {
         String knucleo = sequence.Substring(i,k);
         Cell c = null;                 
         if (frequencies.TryGetValue(knucleo, out c)) c.value++;
         else frequencies.Add(knucleo,new Cell());
      }
   }

   private class Cell { internal int value = 1; }

   private static int DescendingFrequencyThenCode(
         KeyValuePair<string,Cell> a, KeyValuePair<string,Cell> b){

      int comparison = b.Value.value .CompareTo(a.Value.value);
      if (comparison == 0) return a.Key .CompareTo(b.Key);
      else return comparison;
   }
}




