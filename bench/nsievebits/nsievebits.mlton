(* nsieve-bits.sml
 *
 *   Good old Sieve of Eratosthenes (using bit array).
 *
 * Copyright (c) 2004 by The Fellowship of SML/NJ
 *
 * Author: Matthias Blume (blume@tti-c.org)
 * Modified by sweeks@sweeks.com to run with MLton.
 *)
structure Test:sig val main:string*string list->OS.Process.status end = struct

    fun hi i = Word.toIntX(Word.>>(Word.fromInt i,0w3))
    fun lob i = Word8.<<(0w1,Word.andb(Word.fromInt i,0w7))
    infix 8 $ fun a$i = Word8.andb(Unsafe.Word8Array.sub(a,hi i),lob i)=0w0
    infix 3 <~ fun a<~i = let val h = hi i
			  in Unsafe.Word8Array.update
				 (a,h,Word8.andb(Unsafe.Word8Array.sub(a,h),
						 Word8.notb(lob i)))
			  end

    infix 4 << fun i << j = Word.toIntX(Word.<<(Word.fromInt i,Word.fromInt j))

    fun sieve n =
	let val a = Word8Array.array (Int.quot(n+7,8), 0wxff)
	    fun s (i,c) = let fun k j = if j<=n then (a<~j;k(j+i)) else ()
			  in if i>n then c else if a$i then s(i+1,c)
					   else (k(i+i); s(i+1,c+1))
			  end
	    fun i x =
	       let
		  val s = Int.toString x
	       in
		  concat [CharVector.tabulate (8 - String.size s, fn _ => #" "),
			  s]
	       end
	in print (concat ["Primes up to ", i n, " ", i (s (2, 0)), "\n"])
	end

    fun main' n = (sieve ((1<<n) * 10000);
		   if n>=1 then sieve ((1<<(n-1)) * 10000) else ();
		   if n>=2 then sieve ((1<<(n-2)) * 10000) else ();
		   OS.Process.success)

    fun main (_, []) = main' 1
      | main (_, arg :: _) = main' (getOpt (Int.fromString arg, 1))
end

val _ = Test.main (CommandLine.name (), CommandLine.arguments ())
