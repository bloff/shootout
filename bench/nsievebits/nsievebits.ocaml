(* nsieve-bits benchmark for The Computer Language Shootout
 * Written by Dima Dorfman, 2004
 * Compile: ocamlopt -o nsieve_bits_ocaml bigarray.cmxa nsieve_bits.ml *)

open Bigarray

let nsieve m =
  let a =  Array1.create int8_unsigned c_layout ((m lsr 3) + 1) in
  Array1.fill a 0xFF;
  let rec clear i j =
    if j < m then (
      let ic = j lsr 3 in
      a.{ic} <- a.{ic} land lnot(1 lsl (j land 0x7));
      clear i (j + i)
    ) in
  let count = ref 0 in
  for i = 2 to m - 1 do
    if a.{i lsr 3} land (1 lsl (i land 0x7)) > 0 then
      (clear i (i+i); incr count)
  done;
  !count


let test n =
  let m = (1 lsl n) * 10000 in
  Printf.printf "Primes up to %8i%8i\n" m (nsieve m)

let () =
  let n =
    try int_of_string Sys.argv.(1)
    with _ -> (Printf.printf "usage: %s N" Sys.argv.(0); exit 2) in
  test n;
  if n >= 1 then test(n-1);
  if n >= 2 then test(n-2)

