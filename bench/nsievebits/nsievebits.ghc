--
-- The Great Computer Language Shootout
-- http://shootout.alioth.debian.org/
--
-- Haskell Shootout entries - http://haskell.org/hawiki/ShootoutEntry
-- Contributed by (c) Simon Marlow 2005
-- Modified by Don Stewart
--

import Data.Bits; import Data.Array.IO; import Data.Array.Base
import System; import IO; import Text.Printf

main = (\n -> mapM_ (sieve . shiftL 10000 . (-) n) [0..2]) . read . head =<< getArgs

sieve m = do r <- newArray (0,m) False >>= \(a::IOUArray Int Bool) -> for a m 2 0
             printf "Primes up to %8d %8d\n" (m::Int) (r::Int)

for arr m i c | arr `seq` m `seq` i `seq` c `seq` False = undefined -- strict
for arr m i c = if i > m then return c else do
    x <- unsafeRead arr i
    if x then for arr m (i+1) c
         else let for' j | j > m     = for arr m (i+1) (c+1)
                         | otherwise = unsafeWrite arr j True >> for' (j+i)
              in for' (i*2)
