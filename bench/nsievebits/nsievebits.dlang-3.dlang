/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Mike Pall
   converted to D by Dave Fladebo
   Compile with: dmd -O -inline -release nsievebits.d
*/

import std.stdio, std.string;

void main(char[][] args)
{
    size_t m, sz = 10000 << (args.length > 1 ? atoi(args[1]) : 1);
    bits* primes = new bits[BSIZE(sz)];
    for (m = 0; m <= 2; m++)
    {
        size_t i, j, count = 0, n = sz >> m;
        primes[0..BSIZE(n)] = size_t.max;
        for (i = 2; i < n; i++)
            if (BTEST(primes, i))
            {
	        count++;
	        for (j = i * 2; j < n; j += i)
	            if (BTEST(primes, j)) BFLIP(primes, j);
            }
        writefln("Primes up to %8d %8d", n, count);
    }
}

typedef size_t bits;
size_t BBITS() { return bits.sizeof * 8; }
size_t BSIZE(size_t x) { return x / 8 + bits.sizeof; }
size_t BMASK(size_t x) { return 1 << (x % BBITS); }
size_t BTEST(bits* p, size_t x) { return p[x/BBITS] & BMASK(x); }
size_t BFLIP(bits* p, size_t x) { return p[x/BBITS] ^= BMASK(x); }
