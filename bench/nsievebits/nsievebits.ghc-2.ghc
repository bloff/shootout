-- The Great Computer Language Shootout
-- http://shootout.alioth.debian.org/
-- Contributed by (c) Simon Marlow 2005
-- Modified by Don Stewart

import Data.Bits; import Data.Array.IO; import System; import IO; import Text.Printf

main = (\n -> mapM_ (sieve.(10000 *).shiftL 1) [n,n-1,n-2]) . read . head =<< getArgs

sieve m = do
  arr <- newArray (0,m) False :: IO (IOUArray Int Bool)
  let for i c
        | c `seq` False = undefined -- strictness hack
        | otherwise = if i > m then return c else do
                x <- readArray arr i
                if x then for (i+1) c
                     else let for' j | j > m = for (i+1) (c+1)
                                     | otherwise = writeArray arr j True >> for' (j+i)
                          in for' (i*2)
  r <- for 2 0
  printf "Primes up to %8d %8d\n" (m::Int) (r::Int) :: IO ()

