# The Computer Language Shootout
# http://shootout.alioth.debian.org/
# Icon  regex-dna
# regex-dna.icn
# contributed by Charles Evans 2005/12/24

link regexp

procedure main()
seq:=""
while seq||:=reads(,500000) 
ilen := *seq

map(seq) ? {seq:=""
		 while seq ||:= (tab(upto('>\n')))
		   do ="\n" | tab(find("\n")+1) 
# \n is more frequent, so check for it alone for speed.
	}
clen := *seq

variants := [
      "agggtaaa|tttaccct",
      "[cgt]gggtaaa|tttaccc[acg]",
      "a[act]ggtaaa|tttacc[agt]t",
      "ag[act]gtaaa|tttac[agt]ct",
      "agg[act]taaa|ttta[agt]cct",
      "aggg[acg]aaa|ttt[cgt]ccct",
      "agggt[cgt]aa|tt[acg]accct",
      "agggta[cgt]a|t[acg]taccct",
      "agggtaa[cgt]|[acg]ttaccct"]
Re_Ordered := 1 # we don't want duplicate matches from regexp
every f:=!variants do {
	c:=0
	seq ? every (ReFind(f)) do c+:=1
	write(f, " ", c)
}
subst :=[
      "B" , "(c|g|t)", "D" , "(a|g|t)",   "H" , "(a|c|t)", "K" , "(g|t)",
      "M" , "(a|c)",   "N" , "(a|c|g|t)", "R" , "(a|g)",   "S" , "(c|g)",
      "V" , "(a|c|g)", "W" , "(a|t)",     "Y" , "(c|t)"]
#write(&errout,&time)
seq:=lmap(subst,seq)

every write(""|ilen|clen|*seq)
#write(&errout,&time) # 500k=183s
end # main



procedure lmap(pairlist,str)
local lt,ss,cs,c,st
lt:=list(*&ascii); ss:=""

while c:=map(pop(pairlist)) do {
  *c=1 | stop("lmap got a search string not of length 1")
  ss||:=c
  lt[ord(c)]:=pop(pairlist)
}
cs:=cset(ss); st:=""
str ? while st||:=tab(upto(cs)) | tab(0) 
	do st||:= lt[ord(move(1))] | return st
end # lmap
