;;; The Computer Language Benchmarks Game
;;; http://shootout.alioth.debian.org/
;;;
;;; contributed by Anthony Borla

(require-extension format)

(declare (uses regex posix))

(define-constant VARIANTS
  (list 
    "agggtaaa|tttaccct" "[cgt]gggtaaa|tttaccc[acg]" "a[act]ggtaaa|tttacc[agt]t"
    "ag[act]gtaaa|tttac[agt]ct" "agg[act]taaa|ttta[agt]cct" "aggg[acg]aaa|ttt[cgt]ccct" 
    "agggt[cgt]aa|tt[acg]accct" "agggta[cgt]a|t[acg]taccct" "agggtaa[cgt]|[acg]ttaccct"))

(define-constant IUBS
  (list
    (cons "B" "(c|g|t)") (cons "D" "(a|g|t)") (cons "H" "(a|c|t)")
    (cons "K" "(g|t)") (cons "M" "(a|c)") (cons "N" "(a|c|g|t)")
    (cons "R" "(a|g)") (cons "S" "(c|g)") (cons "V" "(a|c|g)")
    (cons "W" "(a|t)") (cons "Y" "(c|t)")))

(define (load-sequence fileno)
  (let* ((size (file-size fileno))
         (buffer (make-string size)))
    (file-read fileno size buffer)
    (cons size buffer)))

(define (match-count rx buffer)
  (let match ((spos (string-search-positions rx buffer 0)) (count 0))
    (if (boolean? spos)
      count
      (match (string-search-positions rx buffer (cadr (car spos))) (+ 1 count)))))

(define (main)

  ; Load sequence and record its length
  (let* ((buffer (load-sequence fileno/stdin)) (sequence (cdr buffer))
         (initial-length (car buffer)) (code-length 0))

    ; Remove newline and segment divider line occurrences; record new length
    (set! sequence (string-substitute (regexp "(>.*?\n)|(\n)" #t) "" sequence #t))
    (set! code-length (string-length sequence))

    ; Perform regexp counts
    (for-each
      (lambda (i)
        (format #t "~A ~A~%" i (match-count i sequence)))
        VARIANTS)

    ; Perform regexp replacements, and record sequence length
    (for-each
      (lambda (i)
        (set! sequence (string-substitute (regexp (car i) #t) (cdr i) sequence #t)))
        IUBS)

    ; Print statistics
    (format #t "~%~A~%~A~%~A~%" initial-length code-length (string-length sequence))))

(main)

