#!/usr/bin/mzscheme -r

(require (lib "defmacro.ss"))
	
(define (sequence start stop)
  (if (> start stop)
      '()
      (cons start (sequence (+ start 1) stop))))

(define-macro (nest n expr)
  (if (> n 0)
      `(for-each (lambda (i) (nest ,(- n 1) ,expr)) seq)
      expr))
		       

(define (main)
  (let* ([n (string->number (vector-ref argv 0))]
	 [x 0]
	 [seq (sequence 1 n)])
    (nest 6 (set! x (+ x 1)))
    (printf "~s~n" x)))

(main)

