%%% -*- mode: erlang -*-
%%% $Id: sieve.erlang,v 1.2 2004-06-25 07:57:50 bfulgham Exp $
%%% http://www.bagley.org/~doug/shootout/
%%% Based on code by Maurice Castro (see bottom of file).
%%% Originally tweaked by Doug Bagley.
%%% Further tweaked and shrunk by James Hague.

-module(sieve).
-export([main/0, main/1, test/2]).

% The sieve loop is spawned into its own process with a heap size of
% 50,000 words.  With all of the list creation done by this benchmark,
% much time is spent resizing the initially tiny heap.  Starting with
% a larger heap improves execution time by ~20%.

main() -> main(['1']).
main([Arg]) ->
    Num = list_to_integer(atom_to_list(Arg)),
    spawn_opt(sieve, test, [self(), Num], [{min_heap_size, 50000}]),
    receive Num_primes -> io:fwrite("Count: ~w\n", [Num_primes]) end.
    halt().

test(From, N) -> test(From, N, math:sqrt(8192), lists:seq(2, 8192)).

test(From, N, Max, Seq) ->
    Num_primes = length(era(Max, Seq)),
    if
        N > 1 -> test(From, N-1, Max, Seq);
        true  -> From ! Num_primes
    end.

era(Max, [H|T]) when H =< Max ->
    [H | era(Max, [X || X <- T, X rem H =/= 0])];
era(Max, L) ->  L.


%%% Eratosthenes algorithm from Maurice Castro, with permission, 
%%% from his book, _Erlang in Real Time_, ISBN: 0864447434
%%% http://www.serc.rmit.edu.au/~maurice/erlbk/eg/choice/erasto.erl
%
%era(Max, L) when hd(L) =< Max ->
%    Prime = hd(L),
%    [Prime | era(Max, sieve(Prime, L))];
%era(Max, L) -> 
%    L.
%
%sieve(N, []) ->
%    [];
%sieve(N, [H|T]) when H rem N == 0 ->
%    sieve(N, T);
%sieve(N, [H|T]) ->
%    [H | sieve(N, T)].

