/*
 * $Id: sieve.clean,v 1.1 2004-06-10 05:57:01 bfulgham Exp $
 * http://shootout.alioth.debian.org/
 * 
 * Patterned after "Functional Programming in Clean" by
 * Paul de Maast, Jeroen Fokker, Pieter Koopman, Sjaak Smetsers,
 * Marko van Eekelen, and Rinus Plasmeijer.
 *
 * And apologies to Jeroen for any references to "Meet the Parents".
 */

module sieve

import StdEnv, ArgEnv

Start
	= "Count: " +++ toString( length (loop n [0]) ) +++ "\n"
where
	n = toInt (select getCommandLine 1)

loop :: !Int [Int] -> [Int]
loop 0 s = s
loop n s = loop (n - 1) (sieve [2 .. 8192])
	
sieve :: [Int] -> [Int]
sieve [] = []
sieve [prime:rest] = [prime : sieve [i \\ i <- rest | i rem prime <> 0]]
