/* The Great Computer Language Shootout 
   contributed by Isaac Gouy (Clean novice)

   http://shootout.alioth.debian.org

To compile:	
   cleanIDE.exe --batch-force-build "e:\shoot\contrib\clean\sieve.prj"

To run:
   sieve.exe -con 900
*/


module sieve
import StdEnv, LanguageShootout

Start = "Count: " +++ toString (iter argi primes 0) +++ "\n"

// To do this in the "same way" we'll use an array of boolean flags

lBound :== 2
uBound :== 8192

primes count
   #! count = count - count // force recalculation
   = sieve flags lBound count 
   where flags = {True \\ i <- [0..uBound]}


sieve :: !*{#.Bool} !Int !Int -> Int
sieve number i count
   | i>uBound = count
   | notPrime (number.[i]) = sieve number (i+1) count
   = sieve {number & [j] = False \\ j <- [i,i+i..uBound]}(i+1)(count+1)

notPrime :== not 
     
