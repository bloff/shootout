/* The Great Computer Language Shootout 
   contributed by Isaac Gouy

To compile:	
   nicec --sourcepath=.. -d=. -a except.jar except

To run:
   java -ea -jar except.jar 20000
*/

int toSinglePositiveInt(String[] s) 
   ensures result > 0; // postcondition

toSinglePositiveInt(s){
   try { 
      int i =  Integer.parseInt(s[0]);
      if (i>0) return i; else return 1;
    }
   catch (Exception e){ return 1; }
}

void main(String[] args){
   let n = toSinglePositiveInt(args);

   for(var i=0; i<n; i++) some_function(i);

   print("Exceptions: HI="); print(Hi); 
   print(" / LO="); println(Lo);
}

class Lo_Exception extends Exception {}
class Hi_Exception extends Exception {}

var int Lo = 0;
var int Hi = 0;
var Lo_Exception loEx = new Lo_Exception("Lo_Exception");
var Hi_Exception hiEx = new Hi_Exception("Hi_Exception");

void blowup(int n) {
   if ((n % 2) == 0) throw loEx; else throw hiEx;
}

void lo_function(int n) {
   try { blowup(n); } 
   catch (Lo_Exception e) { Lo++; }
}

void hi_function(int n) {
   try { lo_function(n); } 
   catch (Hi_Exception e) { Hi++; }
}


void some_function(int n) {
   try { hi_function(n); } 
   catch (Exception e) 
      { println("We shouldn't get here: " + e.toString()); }
}
