-- $Id: hash.ghc2.ghc,v 1.1 2004-05-19 18:09:55 bfulgham Exp $
-- http://www.bagley.org/~doug/shootout/
-- from Bryn Keller
-- build with ghc -O2 -package data hash.ghc


import System (getArgs)
import FiniteMap
import Array

countKeys tbl 0 = 0
countKeys tbl n = case (lookupWithDefaultFM tbl False (show n)) of
                    True -> 1 + countKeys tbl (n - 1)
                    _    -> countKeys tbl (n - 1)

buildTable tbl max num | num <= max = buildTable (addToFM tbl (showHex num "") True) max (num + 1)
                       | otherwise = tbl

hexDigits = array (0, 15) [(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'),
                           (8, '8'), (9, '9'), (10, 'a'), (11, 'b'), (12, 'c'), (13, 'd'), (14, 'e'), (15, 'f')]

showHex n r = case (quotRem n 16) of {(n',d) -> case hexDigits!d : r of { r' 
->
                  if n' == 0 then r' else showHex n' r' }}

main = do  ~[number] <- getArgs
           let num = read number
               tbl = buildTable emptyFM num 1
	       in do putStrLn $ show (countKeys tbl num)
