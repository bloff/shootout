%%% -*- mode: erlang -*-
%%% $Id: hash.hipe,v 1.1 2004-06-11 15:18:08 bfulgham Exp $
%%% http://www.bagley.org/~doug/shootout/

%% Use ETS tables (Erlang's associative store).

-module(hash).
-export([main/0, main/1]).

main() -> main(['1']).
main([Arg]) ->
    N = list_to_integer(atom_to_list(Arg)),
    H = ets:new(i_am_a_carrot, [set]),
    doinserts(0, N, H),
    Count = dolookups(N, 0, H),
    io:format("~w~n", [Count]),
    halt(0).


format_hex(X) ->
    format_hex(X, []).

format_hex(0, []) -> list_to_atom("0");
format_hex(0, Hex) -> list_to_atom(Hex);
format_hex(X, Hex) ->
    N = X band 16#f,
    if
	N < 10 -> format_hex(X bsr 4, [N+$0 | Hex]);
	true ->   format_hex(X bsr 4, [(N-10)+$a | Hex])
    end.

doinserts(N, N, H) -> ok;
doinserts(I, N, H) ->
    Hx = format_hex(I),
    ets:insert(H, { Hx, I }),
    doinserts(I+1, N, H).


dolookups(0, C, H) -> C;
dolookups(I, C, H) ->
    Nx = list_to_atom(integer_to_list(I)),
    case ets:lookup(H, Nx) of
	[] ->    dolookups(I-1, C, H);
	Found -> dolookups(I-1, C+1, H)
    end.

