/* The Computer Language Shootout
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy (Clean novice) */

module partialsums
import StdEnv, LanguageShootout

Start = 
   toString (twoThirds 0.0 n 0.0)        "(2/3)^k" +++
   toString (k05 1.0 n 0.0)              "k^-0.5" +++
   toString (kk1 1.0 n 0.0)              "1/k(k+1)" +++   
   toString (flintHills 1.0 n 0.0)       "Flint Hills" +++
   toString (cooksonHills 1.0 n 0.0)     "Cookson Hills" +++
   toString (harmonic 1.0 n 0.0)         "Harmonic" +++
   toString (riemannZeta 1.0 n 0.0)      "Riemann Zeta" +++
   toString (altHarmonic 1.0 n 1.0 0.0)  "Alternating Harmonic" +++
   toString (gregory 1.0 n 1.0 0.0)      "Gregory"     
   where 
      n = toReal argi
      toString a s = toStringWith 9 a +++ "\t" +++ s +++ "\n"

twoThirds k n sum
   | k < n    = twoThirds(k+1.0) n (sum + ((2.0/3.0)^k))
              = sum

k05 k n sum
   | k <= n   = k05(k+1.0) n (sum + (k^ ~0.5))
              = sum

kk1 k n sum
   | k <= n   = kk1(k+1.0) n (sum + 1.0/(k*(k+1.0)))
              = sum        
  
flintHills k n sum
   | k <= n   = flintHills(k+1.0) n (sum + 1.0/((k^3.0)*((sin k)^2.0)))
              = sum
  
cooksonHills k n sum
   | k <= n   = cooksonHills(k+1.0) n (sum + 1.0/((k^3.0)*((cos k)^2.0)))
              = sum     
      
harmonic k n sum
   | k <= n   = harmonic(k+1.0) n (sum + 1.0/k)
              = sum

riemannZeta k n sum
   | k <= n   = riemannZeta(k+1.0) n (sum + 1.0/(k^2.0))
              = sum 
   
altHarmonic :: !Real !Real !Real !Real -> Real   
altHarmonic k n a sum
   | k <= n   = altHarmonic(k+1.0) n (~a)(sum + a/k)
              = sum
   
gregory :: !Real !Real !Real !Real -> Real   
gregory k n a sum
   | k <= n   = gregory(k+1.0) n (~a)(sum + a/(2.0*k - 1.0))
              = sum


