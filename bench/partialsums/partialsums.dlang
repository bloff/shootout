/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Isaac Gouy

   converted to D by Dave Fladebo
   compile: dmd -O -inline -release partialsums.d
*/

import std.math, std.stdio, std.string;

int main(char[][] args)
{
    int n = args.length > 1 ? atoi(args[1]) : 1;
    double alt = -1.0, d, d2, d3, kc, ks;
    double[9] sum;

    sum[] = 0.0;
    for(int k = 1; k <= n; k++)
    {
        d = k, d2 = d * d, d3 = d2 * d;
        ks = sin(d), kc = cos(d), alt = -alt;

        sum[0] += pow(2 / 3.0L,k - 1);
        sum[1] += 1 / sqrt(d);
        sum[2] += 1 / (d * (d + 1));

        //  Flint Hills
        sum[3] += 1/ (d3 * ks * ks);
        //  Cookson Hills
        sum[4] += 1 / (d3 * kc * kc);
        //  Harmonic
        sum[5] += 1 / d;
        //  Riemann Zeta
        sum[6] += 1 / (d2);

        //  Alternating Harmonic
        sum[7] += alt / k;
        //  Gregory
        sum[8] += alt / (2 * k - 1);
    }

    writefln("%0.9f\t(2/3)^k", sum[0]);
    writefln("%0.9f\tk^-0.5", sum[1]);
    writefln("%0.9f\t1/k(k+1)", sum[2]);
    writefln("%0.9f\tFlint Hills", sum[3]);
    writefln("%0.9f\tCookson Hills", sum[4]);
    writefln("%0.9f\tHarmonic", sum[5]);
    writefln("%0.9f\tRiemann Zeta", sum[6]);
    writefln("%0.9f\tAlternating Harmonic", sum[7]);
    writefln("%0.9f\tGregory", sum[8]);

    return 0;
}
