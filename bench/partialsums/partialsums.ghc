--
-- The Great Computer Language Shootout
-- http://shootout.alioth.debian.org/
--
-- Contributed by Chris Kuklewicz and Don Stewart
--

import System; import Numeric

main = do n <- getArgs >>= readIO . head
          let run :: (String, Int -> Double -> Double) -> IO ()
              run (s,f) = putStrLn $ (showFFloat (Just 9) (f n 0) []) ++ "\t" ++ s
          mapM_ run [("(2/3)^k",      twth), ("k^-0.5" ,             k05)
                    ,("1/k(k+1)",     kk1),  ("Flint Hills",         flhl)
                    ,("Cookson Hills",cook), ("Harmonic",            harm)
                    ,("Riemann Zeta", rmzt), ("Alternating Harmonic",alth)
                    ,("Gregory",      greg)]

twth k s = if k == -1 then s else twth (k-1) (s+((2/3)**fromIntegral k))

k05 k s  = if k == 0  then s else k05 (k-1) (s+(fromIntegral k**(-0.5)))

kk1 k s  = if k == 0  then s else let j = fromIntegral k in kk1 (k-1) (s+1/(j*(j+1)))

harm k s = if k == 0  then s else harm (k-1) (s+1/fromIntegral k)

rmzt k s = if k == 0  then s else rmzt (k-1) (s+1/(fromIntegral k**2))

flhl k s = if k == 0  then s else let j = fromIntegral k in flhl (k-1) (s+1/((j**3)*(sin j**2)))

cook n s = loop 1 s
    where loop k s = if k == n then s 
                     else let j = fromIntegral k in loop (k+1) (s+1/((j**3)*((cos j)**2)))

alth k s = loop k (-1) s 
    where loop k a s = if k == 0 then s else loop (k-1) (-a) (s+a/fromIntegral k)

greg k s = loop k (-1) s 
    where loop k a s = if k == 0 then s else loop (k-1) (-a) (s+a/(2*fromIntegral k-1))

