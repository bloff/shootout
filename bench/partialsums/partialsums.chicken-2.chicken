;; ---------------------------------------------------------------------
;; The Great Computer Language Shootout
;; http://shootout.alioth.debian.org/
;;
;; Contributed by Anthony Borla
;; ---------------------------------------------------------------------

(require-extension format)

(declare (disable-interrupts) (unsafe) (block) (lambda-lift))

; -------------------------------

(define (main args)
  (let* ((n (if (null? args)
              1
              (string->number (car args))))

    (two-thirds (/ 2 3))

    (s (let loop ((d 1) (alt 1) (s0 0) (s1 0) (s2 0) (s3 0) (s4 0) (s5 0) (s6 0) (s7 0) (s8 0))
         (cond
           ((= n d)
             (list
               (cons "~,9F\t(2/3)^k~%" s0)
               (cons "~,9F\tk^-0.5~%" s1)
               (cons "~,9F\t1/k(k+1)~%" s2)
               (cons "~,9F\tFlint Hills~%" s3)
               (cons "~,9F\tCookson Hills~%" s4)
               (cons "~,9F\tHarmonic~%" s5)
               (cons "~,9F\tRiemann Zeta~%" s6)
               (cons "~,9F\tAlternating Harmonic~%" s7)
               (cons "~,9F\tGregory~%" s8)))
           (else
             (let* ((d2 (* d d)) (d3 (* d2 d)) (ds (sin d)) (dc (cos d)))
               (loop
                 (+ d 1)
                 (- alt)
                 (+ s0 (expt two-thirds (- d 1)))
                 (+ s1 (/ 1 (sqrt d)))
                 (+ s2 (/ 1 (* d (+ d 1))))
                 (+ s3 (/ 1 (* d3 (* ds ds))))
                 (+ s4 (/ 1 (* d3 (* dc dc))))
                 (+ s5 (/ 1 d))
                 (+ s6 (/ 1 d2))
                 (+ s7 (/ alt d))
                 (+ s8 (/ alt (- (* 2 d) 1))) ))))) ))

    (for-each 
      (lambda (value) (format #t (car value) (cdr value)))
      s)))

; -------------------------------

(main (command-line-arguments))

