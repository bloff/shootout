/** 
 * The Computer Language Benchmarks Game 
 * Based on the CAL Open Quark version
 * Contributed by Magnus Byne.
 */
module Partialsums;

import Cal.Core.Prelude using
    typeConstructor = Double, Int, String;
    function = fromInt, seq, eager, add, stringToInt;
    ;

import Cal.Core.Debug using
    function = show;
    ;

import Cal.Collections.List using
    function = map, head;
    ;

import Cal.Utilities.MessageFormat using
    function = formatWithPattern;
    ;

import Cal.Utilities.Locale using
    function = invariantLocale;
    ;

import Cal.Utilities.Math using
    function = power, sin, cos, sqrt;
    ;


data foreign unsafe import jvm "java.io.PrintStream" private JPrintStream;

foreign unsafe import jvm "static field java.lang.System.out"
    private stdout :: JPrintStream;

foreign unsafe import jvm "method print"
    private print :: JPrintStream -> String -> ();

main :: [String] -> ();
public main !args =
    let
        n = eager $ stringToInt (head args);
    in
        computeSums n 1 1 0 0 0 0 0 0 0 0 0
    ;

computeSums ::
    Int -> Int -> Double -> Double -> Double -> Double
    -> Double -> Double -> Double -> Double -> Double -> Double -> ();
computeSums !maxIterations !iteration !alt !a1 !a2 !a3 !a4 !a5 !a6 !a7 !a8 !a9=
    if iteration <= maxIterations then
        let
            k = eager $ fromInt iteration :: Double;
            k3 = eager $ k * k * k :: Double;
            dk = eager $ 1 / k :: Double;
            sk = eager $ sin k;
            ck = eager $ cos k;
        in
            computeSums
                maxIterations
                (iteration + 1)
                (-alt)
                (a1 + power (2 / 3) (k - 1))
                (a2 + sqrt dk)
                (a3 + 1 / (k * (k + 1)))
                (a4 + 1 / (k3 * sk * sk))
                (a5 + 1 / (k3 * ck * ck))
                (a6 + dk)
                (a7 + dk * dk)
                (a8 + alt * dk)
                (a9 + alt / (2 * k - 1))
    else
        print
            stdout
            (List.foldLeftStrict
                (
                    \acc elem ->
                        acc
                        ++ formatWithPattern
                            "{0,number,0.000000000}\t{1}\n"
                            invariantLocale
                            elem
                )
                ""
                [
                    (a1, "(2/3)^k"),
                    (a2, "k^-0.5"),
                    (a3, "1/k(k+1)"),
                    (a4, "Flint Hills"),
                    (a5, "Cookson Hills"),
                    (a6, "Harmonic"),
                    (a7, "Riemann Zeta"),
                    (a8, "Alternating Harmonic"),
                    (a9, "Gregory")
                ]
            )
    ;

