//   The Computer Language Shootout 
//   http://shootout.alioth.debian.org/
//   contributed by Isaac Gouy

using System;

class recursive
{
   static void Main(string[] args){
      int n = Int32.Parse(args[0]);

      int k = 0; double sum = 0.0;
      while (k < n) sum += Math.Pow(2.0/3.0,k++);
      Console.WriteLine("{0:f9}\t(2/3)^k", sum);

      k = 0; sum = 0.0;
      while (k++ < n) sum += Math.Pow(k,-0.5);
      Console.WriteLine("{0:f9}\tk^-0.5", sum);

      k = 0; sum = 0.0;
      while (k++ < n) sum += 1.0/(k*(k+1));
      Console.WriteLine("{0:f9}\t1/k(k+1)", sum);

      //  Flint Hills
      k = 0; sum = 0.0;
      while (k++ < n) sum += 1.0/(Math.Pow(k,3) * Math.Pow(Math.Sin(k),2));
      Console.WriteLine("{0:f9}\tFlint Hills", sum);

      //  Cookson Hills
      k = 0; sum = 0.0;
      while (k++ < n) sum += 1.0/(Math.Pow(k,3) * Math.Pow(Math.Cos(k),2));
      Console.WriteLine("{0:f9}\tCookson Hills", sum);

      //  Harmonic
      k = 0; sum = 0.0;
      while (k++ < n) sum += 1.0/k;
      Console.WriteLine("{0:f9}\tHarmonic", sum);

      //  Riemann Zeta
      k = 0; sum = 0.0;
      while (k++ < n) sum += 1.0/Math.Pow(k,2);
      Console.WriteLine("{0:f9}\tRiemann Zeta", sum);

      double a = -1.0; 

      //  Alternating Harmonic
      k = 0; sum = 0.0;
      while (k++ < n) sum += (a= -a)/k;
      Console.WriteLine("{0:f9}\tAlternating Harmonic", sum);

      //  Gregory
      k = 0; sum = 0.0; a = -1.0;
      while (k++ < n) sum += (a= -a)/(2*k -1);
      Console.WriteLine("{0:f9}\tGregory", sum);
   }
}
