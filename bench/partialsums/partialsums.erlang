%%% The Computer Language Shootout
%%% http://shootout.alioth.debian.org/
%%% Contributed by Isaac Gouy (Erlang novice)

-module(partialsums).
-export([main/1]).
-import(math,[pow/2,sin/1,cos/1]).

main([Arg]) ->
   N = list_to_integer(Arg),
   io:fwrite("~.9f\t(2/3)^k~n", [twothirds(0,N,0.0)]),
   io:fwrite("~.9f\tk^-0.5~n", [k05(1,N,0.0)]),
   io:fwrite("~.9f\t1/k(k+1)~n", [kk1(1,N,0.0)]),
   io:fwrite("~.9f\tFlint Hills~n", [flintHills(1,N,0.0)]),
   io:fwrite("~.9f\tCookson Hills~n", [cooksonHills(1,N,0.0)]),
   io:fwrite("~.9f\tHarmonic~n", [harmonic(1,N,0.0)]),
   io:fwrite("~.9f\tRiemann Zeta~n", [riemannZeta(1,N,0.0)]),
   io:fwrite("~.9f\tAlternating Harmonic~n", [altHarmonic(1,N,1.0,0.0)]),
   io:fwrite("~.9f\tGregory~n", [gregory(1,N,1.0,0.0)]),
   erlang:halt().

twothirds(K,N,Sum) when K < N -> twothirds(K+1,N,Sum+(pow(2.0/3.0,K)));
twothirds(K,N,Sum) -> Sum.

k05(K,N,Sum) when K =< N -> k05(K+1,N,Sum+pow(K,-0.5));
k05(K,N,Sum) -> Sum.

kk1(K,N,Sum) when K =< N -> kk1(K+1,N,Sum+(1.0/(K*(K+1))));
kk1(K,N,Sum) -> Sum.

flintHills(K,N,Sum) when K =< N -> 
   flintHills(K+1,N,Sum+(1.0/(pow(K,3)*pow(sin(K),2))));
flintHills(K,N,Sum) -> Sum.

cooksonHills(K,N,Sum) when K =< N -> 
   cooksonHills(K+1,N,Sum+(1.0/(pow(K,3)*pow(cos(K),2))));
cooksonHills(K,N,Sum) -> Sum.

harmonic(K,N,Sum) when K =< N -> harmonic(K+1,N,Sum+(1.0/K));
harmonic(K,N,Sum) -> Sum.

riemannZeta(K,N,Sum) when K =< N -> riemannZeta(K+1,N,Sum+(1.0/pow(K,2)));
riemannZeta(K,N,Sum) -> Sum.

altHarmonic(K,N,A,Sum) when K =< N -> altHarmonic(K+1,N,-A,Sum+(A/K));
altHarmonic(K,N,A,Sum) -> Sum.

gregory(K,N,A,Sum) when K =< N -> gregory(K+1,N,-A,Sum+(A/(2*K-1)));
gregory(K,N,A,Sum) -> Sum.
