%%% The Computer Language Shootout
%%% http://shootout.alioth.debian.org/
%%% Contributed by Isaac Gouy (Erlang novice)

-module(partialsums).
-export([main/1]).
-import(math,[pow/2,sin/1,cos/1]).

main([Arg]) ->
   N = list_to_integer(Arg),
   io:fwrite("~.9f\t(2/3)^k~n", [twothirds(N-1,0.0)]),
   io:fwrite("~.9f\tk^-0.5~n", [k05(N,0.0)]),
   io:fwrite("~.9f\t1/k(k+1)~n", [kk1(N,0.0)]),
   io:fwrite("~.9f\tFlint Hills~n", [flintHills(N,0.0)]),
   io:fwrite("~.9f\tCookson Hills~n", [cooksonHills(N,0.0)]),
   io:fwrite("~.9f\tHarmonic~n", [harmonic(N,0.0)]),
   io:fwrite("~.9f\tRiemann Zeta~n", [riemannZeta(N,0.0)]),
   io:fwrite("~.9f\tAlternating Harmonic~n", [altHarmonic(N,-1.0,0.0)]),
   io:fwrite("~.9f\tGregory~n", [gregory(N,-1.0,0.0)]),
   erlang:halt().

twothirds(-1,Sum) -> Sum;
twothirds(K,Sum) -> twothirds(K-1,Sum+(pow(2.0/3.0,K))).

k05(0,Sum) -> Sum;
k05(K,Sum) -> k05(K-1,Sum+pow(K,-0.5)).

kk1(0,Sum) -> Sum;
kk1(K,Sum) -> kk1(K-1,Sum+(1.0/(K*(K+1)))).

flintHills(0,Sum) -> Sum;
flintHills(K,Sum) -> flintHills(K-1,Sum+(1.0/(pow(K,3)*pow(sin(K),2)))).

cooksonHills(0,Sum) -> Sum;
cooksonHills(K,Sum) -> cooksonHills(K-1,Sum+(1.0/(pow(K,3)*pow(cos(K),2)))).

harmonic(0,Sum) -> Sum;
harmonic(K,Sum) -> harmonic(K-1,Sum+(1.0/K)).

riemannZeta(0,Sum) -> Sum;
riemannZeta(K,Sum) -> riemannZeta(K-1,Sum+(1.0/pow(K,2))).

altHarmonic(0,A,Sum) -> Sum;
altHarmonic(K,A,Sum) -> altHarmonic(K-1,-A,Sum+(A/K)).

gregory(0,A,Sum) -> Sum;
gregory(K,A,Sum) -> gregory(K-1,-A,Sum+(A/(2*K-1))).

 
