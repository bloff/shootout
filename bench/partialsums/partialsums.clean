/* The Computer Language Shootout
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy (Clean novice) */

module partialsums
import StdEnv, LanguageShootout

Start = foldl line "" (zip2 sums names)
   where 
   n = toReal argi
   sums = loop 1.0 n 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
   names = ["(2/3)^k", "k^-0.5", "1/k(k+1)", "Flint Hills", "Cookson Hills",
            "Harmonic", "Riemann Zeta", "Alternating Harmonic", "Gregory"]
   line s (sum,name) = s +++ toStringWith 9 sum +++ "\t" +++ name +++ "\n"

loop :: !Real !.Real !Real !Real !Real !Real !Real !Real !Real !Real !Real !Real -> .[Real]
loop k n alt a1 a2 a3 a4 a5 a6 a7 a8 a9
   | k <= n   
      = loop (k+1.0) n (~alt)
         ( a1 + (2.0/3.0)^(k-1.0) )
         ( a2 + k^ ~0.5 )
         ( a3 + 1.0/(k*(k+1.0)) )
         ( a4 + 1.0/((k*k)*k*((sin k)*(sin k))) )
         ( a5 + 1.0/((k*k)*k*((cos k)*(cos k))) )   
         ( a6 + 1.0/k )  
         ( a7 + 1.0/(k*k) )  
         ( a8 + alt/k )     
         ( a9 + alt/(2.0*k - 1.0) )           
         
   | otherwise = [a1, a2, a3, a4, a5, a6, a7, a8, a9] 
