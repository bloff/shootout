/* The Computer Language Shootout
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy (Clean novice) 

   transliteratation of Sebastian Sylvan's Haskell program   
*/

module fannkuch
import StdEnv

Start = (foldl (+++) "" (map line (take 30 xs))) +++
           "Pfannkuchen(" +++ (toString n) +++ ") = " 
              +++ (toString flips) +++ "\n"
   where
   n = 7
   xs = perms [1..n]
   flips = fannkuch xs
   line a = (foldl (+++) "" (map toString a)) +++ "\n"

		
rotate i [x:xs] = a ++ [x:b]
   where (a,b) = splitAt (i-1) xs	
   
rev [x:xs] = reverse a ++ [x:b]	
   where (a,b) = splitAt (x-1) xs	
   
perms a = foldr perm` [a] [2..length a]
   where perm` i b = flatten [take i (iterate (rotate i) x) \\ x <- b]
   
fannkuch a = foldl max 0 (map flop a)
   where
   flop [1:_] = 0
   flop a     = 1 + flop (rev a)