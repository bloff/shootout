#!/bin/env groovy
/*
	$Id: fannkuch.groovy,v 1.1 2005-09-18 05:01:24 igouy-guest Exp $

	The Great Computer Language Shootout
	http://shootout.alioth.debian.org/

	contributed by Jochen Hinrichsen
	modified by 

	Each program should

	    * "Take a permutation of {1,...,n}, for example: {4,2,1,5,3}.
	    * Take the first element, here 4, and reverse the order of the first 4 elements: {5,1,2,4,3}.
	    * Repeat this until the first element is a 1, so flipping won't change anything more: {3,4,2,1,5}, {2,4,3,1,5}, {4,2,3,1,5}, {1,3,2,4,5}.
	    * Count the number of flips, here 5.
	    * Do this for all n! permutations, and record the maximum number of flips needed for any permutation.
	
	The conjecture is that this maximum count is approximated by n*log(n) when n goes to infinity.
	
	FANNKUCH is an abbreviation for the German word Pfannkuchen, or pancakes, in analogy to flipping pancakes."
	
	Each program should generate the same sequence of n! permutations - the sequence generated by the incremental change algorithm implemented in
	the C# and Oberon-2 programs. For N=4 the sequence of permutations is:
	
	   {1,2,3,4}
	   {2,1,3,4}
	   {2,3,1,4}
	   {3,2,1,4}
	   {3,1,2,4}
	   {1,3,2,4}
	   {2,3,4,1}
	   {3,2,4,1}
	   {3,4,2,1}
	   {4,3,2,1}
	   {4,2,3,1}
	   {2,4,3,1}
	   {3,4,1,2}
	   {4,3,1,2}
	   {4,1,3,2}
	   {1,4,3,2}
	   {1,3,4,2}
	   {3,1,4,2}
	   {4,1,2,3}
	   {1,4,2,3}
	   {1,2,4,3}
	   {2,1,4,3}
	   {2,4,1,3}
	   {4,2,1,3}
	
	
	Correct output N = 7 is:
	
	Pfannkuchen(7) = 16
	
	
	Correct output N = 8 is:
	
	Pfannkuchen(8) = 22
	
	
	The fannkuch benchmark is defined in Performing Lisp Analysis of the FANNKUCH Benchmark, Kenneth R. Anderson and Duane Rettig (26KB postscript)
*/

// This algorithm taken from the ruby sample does not produce the exact order as defined above
def permute(head, tail, permute) {
	for (i in 0..<tail.size()) {
		head.add(tail.remove(i))
		tail.isEmpty() ? permute(head.clone()) : permute(head, tail, permute)
		tail.add(i, head.pop())
	}
}

def permute(size, closure) {
	permute([], (1..size).step(1), closure)
}

def N = (args.length == 0) ? 7 : args[0].toInteger()
def maxflips = 0

permute(N) { |list|
	def flips = 0
	while ((count = list[0]) != 1) {
		// Inconsistent groovy syntax, lvalue list[0..<count] does not work
		// Option #1
		// list[0, count-1] = list[0..<count].reverse()

		// Option #2: more Java like alternative, little bit faster
		Collections.copy(list, list[0..<count].reverse())

		flips++
	}
	maxflips = [maxflips, flips].max()
}

println "Pfannkuchen(${N}) = ${maxflips}"

// EOF

