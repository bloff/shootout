(* fannkuch.ml
 *
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Troestler Christophe
 * Translated to SML by sweeks@sweeks.com.
 *)

val sub = Array.sub
val update = Array.update

fun for (start, stop, f) =
   let
      fun loop i = if i = stop then () else (f i; loop (i + 1))
   in
      loop start
   end

fun countFlips perm =
   let
      fun loop c =
	 let
	    val k = sub (perm, 0)
	 in
	    if k = 0
	       then c
	    else
	       let
		  val () = 
		     for (0, k div 2 + 1, fn i =>
			  let
			     val k_i = k - i
			     val perm_i = sub (perm, i)
			  in
			     update (perm, i, sub (perm, k_i))
			     ; update (perm, k_i, perm_i)
			  end)
	       in
		  loop (c + 1)
	       end
	 end
   in
      loop 0
   end

fun pfannkuchen n =
  let
     val perm = Array.tabulate (n, fn i => i)
     val perm' = Array.array (n, 0)
     val count = Array.tabulate (n, fn i => i + 1)
     val m = n - 1
     fun loop (maxflips, r) =
	if r = n
	   then maxflips
	else
	   let
	      (* Rotate perm.(0 .. r-1) *)
	      val perm0 = sub (perm, 0) 
	      val () =
		 for (0, r, fn i => update (perm, i, sub (perm, i + 1)))
	      val () = update (perm, r, perm0)
	      val () = update (count, r, sub (count, r) - 1)
	   in
	      if sub (count, r) > 0
		 then 
		    let
		       val () = for (1, r, fn i => update (count, i, i + 1))
		    in
		       if sub (perm, 0) <> 0 andalso sub (perm, m) <> m
			  then
			     (for (0, m + 1, fn i =>
				   update (perm', i, sub (perm, i)))
			      ; loop (Int.max (countFlips perm', maxflips),
				      1))
		       else loop (maxflips, 1)
		    end
	      else loop (maxflips, r + 1)
	   end
  in
     loop (0, 1)
  end

val n = valOf (Int.fromString (hd (CommandLine.arguments ()))) handle _ => 1

val () = print (concat ["Pfannkuchen(", Int.toString n, ") = ",
			Int.toString (pfannkuchen n), "\n"])
