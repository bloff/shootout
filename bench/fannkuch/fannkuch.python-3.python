# The Computer Language Benchmarks Game# http://shootout.alioth.debian.org/# # contributed by Daniel Nanz 2009-02import sysimport itertoolsimport multiprocessing as mpdef permutations(n):    p = range(n)    c = range(1, n + 1)    p_insert = p.insert    r = n        yield p[:]    while True:        while r > 1:            c[r-1] = r            r -= 1        while r < n:            p0 = p[0]            del p[0]            p_insert(r, p0)            c[r] -= 1            if c[r] > 0:                yield p[:]                break            r += 1        else:            raise StopIteration    def get_flips(p, c=0):        k = p[0]    while k > 0:        p[:k+1] = p[k::-1]        c += 1        k = p[0]    return cif __name__ == '__main__':    n = int(sys.argv[1])    for i, p in enumerate(permutations(n)):        if i < 30:            print "".join(str(i + 1) for i in p)        else:            break    ps = (p for p in permutations(n))    max_flips = 0    cc = mp.cpu_count()    if (cc > 1) and (n > 7):        pool = mp.Pool(processes=cc)        chunksize = cc * 128        im = pool.imap(get_flips, ps, chunksize)    else:        im = itertools.imap(get_flips, ps)    print "Pfannkuchen(%d) = %d\n" % (n, max(im)),