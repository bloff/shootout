(*
   fannkuch.ml
   
   Contributed by William Douglas Neumann.
   Some ham-handed changes by Brent to fit into the test framework.
   
 *)

(*
let count_flips arr =
  let rec cfh fl =
    let swap x y = 
      let t = Array.unsafe_get arr x in
        Array.unsafe_set arr x (Array.unsafe_get arr y); 
        Array.unsafe_set arr y t in
    let f = Array.unsafe_get arr 0 in
    if f = 1 then fl else
      begin
        for i = 1 to (f lsr 1) do
          swap (pred i) (f - i)
        done;
      cfh (succ fl) 
    end in
  cfh 0;;
*)

let count_flips arr =
  let rec cfh fl =
    let swap x y = 
      let t = arr.(x) in
        arr.(x) <- arr.(y); 
        arr.(y) <- t in
    let f = arr.(0) in
    if f = 1 then fl else
      begin
        for i = 1 to (f lsr 1) do
          swap (pred i) (f - i)
        done;
      cfh (succ fl) 
    end in
  cfh 0;;
    
let fannkuch n = 
  let pn = pred n in
  let rec fact n acc = if n < 2 then acc else fact (pred n) (n*acc) in
  let p = Array.init n succ in
  let ctl = Array.make n 0 in
  let gen3 () =
  let rec ud_ctl i =
    if i > 0 then
      if ctl.(i) <> i then i
      else (ctl.(i) <- 0; ud_ctl (pred i)) 
    else 0 in
    let i = ud_ctl (pred n) in
    if i <> 0 then
    begin
      ctl.(i) <- ctl.(i) + 1;
      p.(0) <- 1;
      for i = 0 to pred n do
        p.(i) <- p.(i - ctl.(i));
        p.(i - ctl.(i)) <- i+1;
      done;
    end in
  let rec fkh mx = function
      (- 1) -> mx
    | i -> 
        fkh 
          (gen3 ();
           if p.(0) = 1 || p.(pn) = n then mx
           else max mx (count_flips p))
          (pred i) in
  fkh min_int (pred (fact n 1));;
  
let n = if Array.length Sys.argv > 1 then int_of_string Sys.argv.(1) else 1 in Printf.printf "Pfannkuchen(%d) = %d\n" n (fannkuch n)
