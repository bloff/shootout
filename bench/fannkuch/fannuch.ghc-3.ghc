import System
import Data.List(foldl')
import GHC.Base

{-  The Computer Language Shootout
    http://shootout.alioth.debian.org/
    contributed by Sebastian Sylvan
-}

{-# INLINE rotate #-}
rotate n (x:xs) = let (a,b) = splitAt (n-1) xs in a ++ x : b

{-# INLINE perms #-}
perms l = foldr perm' [l] [2..length l] 
    where perm' n ls = concat [take n (iterate (rotate n) l) | l <- ls]

{-# INLINE flop #-}
flop (1:_) = 0
flop xs = 1 + flop (rev xs)

{-# INLINE rev #-}
rev (x:xs) = reverse a ++ x : b
      where (a,b) = splitAt (x-1) xs

fannuch xs = foldl' max 0 $ map flop xs

main = do [n] <- getArgs
          let xs = perms [1..read n]
          putStr $ unlines $ map (concatMap show) $ take 30 xs
          putStr $ "Pfannkuchen(" ++ n ++ ") = " ++ show (fannuch xs)
