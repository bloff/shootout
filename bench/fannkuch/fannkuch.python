#!/usr/bin/python
# $Id: fannkuch.python,v 1.1 2004-12-13 04:27:15 bfulgham Exp $
# http://shootout.alioth.debian.org/
#
# Contributed by Antoine Pitrou

import sys
from array import array

#
# This implementation does the search for solutions in reverse order.
# Instead of starting from each permutation and calculating the number
# of transformations needed to reach the end, it starts from trivial 
# permutations (those that have a 1 in the first place) and traverse the
# tree of all permutations from them, recording the maximum tree depth.
# This ensures that we only process each permutation once, speeding up
# the calculation.
def build_perms(n, N):
    # This helper routine is used to build permutations.
    # It tries hard to avoid temporary allocations
    if n == 1:
        l = array('b', [1]) * N
        return [l]
    prev = build_perms(n - 1, N)
    size = n * len(prev)
    l = [None] * size
    c = 0
    r = xrange(n-1, 0, -1)
    # From the permutations of { 1 ... n - 1 }, we build
    # the permutations of { 1 ... n } by inserting n at
    # all possible places.
    for p in prev:
        p[n-1] = n
        l[c] = p[:]
        for i in r:
            p[i], p[i-1] = p[i-1], n
            l[c+i] = p[:]
        c += n
    return l

def permutations(n):
    # This routine build all permutations of { 1, ... n }
    return build_perms(n, n)


def search(n, seeds, depth):
    # This function explores the search tree breadth-first
    r = range(1, n)
    children = [s[k::-1] + s[k+1:] for s in seeds for k in r if s[k] == k]
    if len(children) == 0:
        return depth
    else:
        return search(n, children, depth + 1)


def main():
    n = int(sys.argv[1])

    # 1. Generate all permutations in { 1, ..., n-1 }
    perms = permutations(n-1)

    # 2. The search domain is structured as a tree
    # Here we calculate the roots of the tree ("seeds")
    seeds = []
    one = array('b', [0])
    seeds = [p[:p[0]] + one + p[p[0]:] for p in perms]

    # 3. Traverse the search tree to calculate maximum depth
    m = search(n, seeds, 1)
    
    print "Pfannkuchen(%d) = %d" % (n, m)


main()
