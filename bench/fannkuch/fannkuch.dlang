/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   converted to D by Dave Fladebo
   compile: dmd -O -inline -release fannkuch.d
*/

import std.stdio, std.string;

void main(char[][] args)
{
    int n = args.length > 1 ? atoi(args[1]) : 1;
    writefln("Pfannkuchen(",n,") = ",fannkuch(n));
}

int fannkuch(int n)
in
{
    assert(n > 1);
}
out(result)
{
    assert(result >= 0);
}
body
{
    int[] perm = new int[n], perm1 = new int[n], count = new int[n];
    int   i, j, k, temp, flips, m = n - 1, r = n, maxFlipsCount = 0;

    foreach(int i, inout int p; perm1) p = i;
    for(;;)
    {
        while(r != 1) { count[r-1] = r; r--; }
        if(!(perm1[0] == 0 || perm1[m] == m))
        {
            foreach(int i, int p; perm1) perm[i] = p;

            i = perm[0];
            flips = 0;
            while(i)
            {
                temp = perm[i];
                perm[i] = i;
                i = temp;
                for(j = 1, k = i - 1; j < k; j++, k--)
                {
                    temp = perm[j];
                    perm[j] = perm[k];
                    perm[k] = temp;
                }
                flips++;
            }

            if(flips > maxFlipsCount) maxFlipsCount = flips;
        }
        for(;;)
        {
            if(r == n) return(maxFlipsCount);
            temp = perm1[0];
            for(i = 0; i < r;)
            {
                j = i + 1;
                perm1[i] = perm1[j];
                i = j;
            }
            perm1[r] = temp;

            count[r]--;
            if(count[r] > 0) break;
            r++;
        }
    }
}
