"*  The Computer Language Shootout
   http://shootout.alioth.debian.org/
   contributed by Paolo Bonzini *"!

Object subclass: #PermGenerator	instanceVariableNames: 'timesRotated perm atEnd'	classVariableNames: ''	poolDictionaries: ''	category: 'Shootout'!!PermGenerator methodsFor: 'initialize-release' stamp: '  11/29/2006 23:06'!initialize: size    perm := (1 to: size) asArray.    timesRotated := Array new: size withAll: 0.    atEnd := false! !!PermGenerator methodsFor: 'initialize-release' stamp: '  11/29/2006 23:07'!makeNext    | temp remainder |    "Generate the next permutation."    2 to: perm size do: [ :r |	"Rotate the first r items to the left."        temp := perm at: 1.        1 to: r - 1 do: [ :i | perm at: i put: (perm at: i + 1) ].        perm at: r put: temp.        remainder := timesRotated at: r put: ((timesRotated at: r) + 1) \\ r.        remainder = 0 ifFalse: [ ^self ].	"After r rotations, the first r items are in their original positions.	 Go on rotating the first r+1 items."    ].    "We are past the final permutation."    atEnd := true! !!PermGenerator methodsFor: 'accessing' stamp: '  11/29/2006 23:07'!atEnd    ^atEnd! !!PermGenerator methodsFor: 'accessing' stamp: '  11/29/2006 23:07'!next    | result |    result := perm copy.    self makeNext.    ^result! !
PermGenerator class	instanceVariableNames: ''!!PermGenerator class methodsFor: 'instance creation' stamp: '  11/29/2006 23:06'!new: size    ^self new	initialize: size;	yourself! !


!Array methodsFor: 'benchmarking' stamp: '  11/29/2006 23:11'!pfannkuchen    | first complement a b k |    k := 0.    [ (first := self at: 1) == 1 ] whileFalse: [	k := k + 1.	complement := first + 1.	1 to: first // 2 do: [ :i |	    a := self at: i.	    b := self at: complement - i.	    self at: i put: b.	    self at: complement - i put: a.	]    ].    ^k! !


!SmallInteger methodsFor: 'benchmarking' stamp: '  11/29/2006 23:10'!maxPfannkuchen: aStream
    | max gen perm check |
    max := 0.
    check := 0.
    gen := PermGenerator new: self.

    [ gen atEnd ] whileFalse: [
	perm := gen next.
        check < 30 ifTrue: [
	    perm do: [ :each | aStream nextPutAll: each printString ]. 
	    aStream nextPut: Character lf.
	    check := check + 1 ].
	max := max max: perm pfannkuchen
    ].
    ^max! !


!Tests class methodsFor: 'benchmarking' stamp: '  11/29/2006 23:15'!fannkuch
   | n stdout |
   n := (SmalltalkImage current getSystemAttribute: 3) asInteger.
   stdout := UnixProcess stdOut.
   stdout
      nextPutAll: 'Pfannkuchen(', n printString, ') = ', 
         (n maxPfannkuchen: stdout) printString;
      nextPut: Character lf ! !
