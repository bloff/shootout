(* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Matías Giovannini
*)

let length = 100

let perm     = Array.make length 0
and perm1    = Array.make length 0
and number   = Array.make length 0
and perm_max = Array.make length 0

let rec flip inversions =
   let k = perm.(0) in
   if k == 0 then inversions else begin
      let m = (k + 1) lsr 1 in
      for i = 0 to m - 1 do
         let temp = perm.(i) in
         perm.(i) <- perm.(k - i);
         perm.(k - i) <- temp
      done;
      flip (inversions + 1)
   end

let fannkuch n =
   let last = n - 1 in
   let maxsofar = ref (-1) in

   let rec inner r t =
      if r != n then begin
         let k = perm1.(0) in
         for i = 0 to r - 1 do perm1.(i) <- perm1.(i+1) done;
         perm1.(r) <- k;
         let i = number.(r) - 1 in
         number.(r) <- i;
         if i == 0 then inner (r+1) t else outer r (t+1)
      end

   and outer r t =
      if t < 30 then begin
         for i = 0 to last do print_int (perm1.(i) + 1) done;
         print_newline ()
      end;
      for i = r downto 2 do number.(i-1) <- i done;
      if perm1.(0) != 0 && perm1.(last) != last then begin
         for i = 0 to last do perm.(i) <- perm1.(i) done;
         let inversions = flip 0 in
         if !maxsofar < inversions then begin
            maxsofar := inversions;
            for i = 0 to last do perm_max.(i) <- perm1.(i) done
         end
      end;
      inner 1 t
   in

   for i = 0 to last do perm1.(i) <- i done;
   outer n 0;
   !maxsofar

let () =
   let n = try int_of_string (Array.get Sys.argv 1) with _ -> 7 in
   Printf.printf "Pfannkuchen(%d) = %d\n" n (fannkuch n);
   exit 0
