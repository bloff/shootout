-- The Great Computer Language Shootout
--   http://shootout.alioth.debian.org
--
--   contributed by josé
--
--   To run:   fannkuch 9

class FANNKUCH

insert
	ARGUMENTS

creation {ANY}
	make
	
feature {ANY}

   n: INTEGER

   make is
         do
         check argument_count = 1 end
         check argument(1).is_integer end
         n := argument(1).to_integer
         check n > 1 end
         std_output.put_string("Pfannkuchen(")
         std_output.put_integer(n)
         std_output.put_string(") = ")
         std_output.put_integer(fannkuch(n))
         std_output.put_new_line
      end

   fannkuch(x: like n): like n is
      require
         x > 1
      local
         perm, perm1, count, maxperm: FAST_ARRAY[like n]
         rot_rank, i, j, k, upper, cnt, flip_count, tmp, p0: like n
      do
         create perm.make(x)
         create perm1.make(x+1)
         create count.make(x)
         create maxperm.make(x)
         from i:=0 until i=x loop perm1.put(i,i) i:=i+1 end
         upper := x-1
         count.put(1,upper)
         from rot_rank:=upper-1 cnt:=x until rot_rank=upper loop
            --
            -- update rotation counters
            --
			count.put(cnt-1,rot_rank)
			from until rot_rank=0 loop count.put(rot_rank,rot_rank-1) rot_rank:=rot_rank-1 end
            --
            -- count the needed flips
            --
            p0:=perm1.item(0)
            if p0/=0 and then perm1.item(upper)/=upper then
               from i:=0 until i=x loop perm.put(perm1.item(i),i) i:=i+1 end
               flip_count := 0
               from k:=p0 until k=0 loop
                  tmp := perm.item(k)
                  perm.put(k,k)
                  j := k-1
                  k := tmp
                  from i:=1 until i>=j loop
                     tmp := perm.item(i)
                     perm.put(perm.item(j),i)
                     perm.put(tmp,j)
                     i := i+1
                     j := j-1
                  end
                  flip_count := flip_count + 1
               end
               if flip_count>Result then
                  Result := flip_count
                  from i:=0 until i=x loop maxperm.put(perm1.item(i),i) i:=i+1 end
               end
            end
            --
            -- next permutation
            --
            perm1.put(perm1.item(1),0) perm1.put(p0,1)
			cnt := count.item(0)
			from i:=1 until cnt/=0 loop
				rot_rank := i
				tmp := perm1.item(0)
				from i:=0 until i>rot_rank loop
					j:=i+1 perm1.put(perm1.item(j),i) i:=j
				end
				perm1.put(tmp,i)
				cnt := count.item(rot_rank)
			end
         end
      ensure
         Result >= 0
      end

end


