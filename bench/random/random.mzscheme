#!/usr/bin/mzscheme -r

;;; http://shootout.alioth.debian.org/
;;; Random implementation, by Jens Axel Sogaard

(module random mzscheme
   (provide main)
   ; (define-constant name val) "replaces" all occurences
   ; of name with val.
   (define-syntax (define-constant stx)
     (syntax-case stx ()
       ((define-constant id val)
        (syntax (define-syntax id (syntax-id-rules () (_ val)))))))

   (define-constant IM 139968)
   (define-constant IA   3877)
   (define-constant IC  29573)

   (define gen_random
     (let ((LAST 42))
       (lambda (max)
         (set! LAST (modulo (+ (* LAST IA) IC) IM))
         (/ (* max LAST) IM))))

   (define (main args)
     (let ((n (if (= (vector-length args) 0)
                  1
                  (string->number (vector-ref args 0)))))
       (let loop ((iter n))
         (if (> iter 1)
             (begin
               (gen_random 100.0)
               (loop (- iter 1)))))
       (display (gen_random 100.0))
       (newline))))

(require random)
(main (current-command-line-arguments))

