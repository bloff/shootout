;;; http://shootout.alioth.debian.org/
;;; Random implementation, by Jens Axel Sogaard
;;;
;;; Modified for proper string output by Brent Fulgham
(module random mzscheme
   (provide main)

  (require (lib "string.ss" "srfi" "13"))  
   ; (define-constant name val) "replaces" all occurences
   ; of name with val.
   (define-syntax (define-constant stx)
     (syntax-case stx ()
       ((define-constant id val)
        (syntax (define-syntax id (syntax-id-rules () (_ val)))))))

   (define-constant IM 139968)
   (define-constant IA   3877)
   (define-constant IC  29573)

   (define gen_random
     (let ((LAST 42))
       (lambda (max)
         (set! LAST (modulo (+ (* LAST IA) IC) IM))
         (/ (* max LAST) IM))))

  ;;; Round a floating point value
  (define (roundto digits num)
    (let* ((numstr (number->string num))
           (digidx (string-index numstr #\.))
           (outstr (substring numstr 0 (+ digidx digits)))
           (lastchar
            (char->integer (string-ref numstr (+ digidx digits 1))))
           (nxtlstchr
            (char->integer (string-ref numstr (+ digidx digits)))))
      (string->number
       (string-append
        outstr
        (string
         (integer->char
          (if (> lastchar 52);; 52 == ASCII '4'
              (add1 nxtlstchr)
              nxtlstchr)))))))
  
   (define (main args)
     (let ((n (if (= (vector-length args) 0)
                  1
                  (string->number (vector-ref args 0)))))
       (let loop ((iter n))
         (if (> iter 1)
             (begin
               (gen_random 100.0)
               (loop (- iter 1)))))
       (printf "~a~%"
        (string-pad-right
         (number->string
          (roundto 9 (gen_random 100.0)))
         12 #\0)))))

(require random)
(main (current-command-line-arguments))

