/* The Great Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Dave Fladebo 

   compile: dmd -O -inline -release message.d
*/

import std.stdio, std.string, std.thread, std.c.linux.linux;

void main(char[][] args)
{
    const int threads = 500;
    int n = args.length > 1 ? atoi(args[1]) : 2;

    Link chain = null;
    Link.total = threads * n;
    for(int i = 0; i < threads; i++)
    {
        Link next = new Link(chain);
        chain = next;
    }

    Link first = chain;
    while(chain)
    {
        chain.start;
        chain = chain.next;
    }

    chain = first;
    while(n--) chain.put(0);

    while(chain)
    {
        chain.wait;
        chain = chain.next;
    }

    writefln(Link.sum);
}

class Link : Thread
{
private:
    int message = -1;
    sem_t semr;
    static sem_t semw;
    static threads = 0;

    static this()
    {
	sem_init(&semw,0,0);
    }

    private int take()
    {
        int msg = 0;
        if(message > -1)
        {
            msg = message + 1;
            message = -1;
        }
        return msg;
    }

public:
    Link next;
    static int sum = 0, total = 0;

    this(Link next)
    {
        super(1024 * 16);
        this.next = next;
	sem_init(&semr,0,0);
        threads++;
    }

    int run()
    {
        if(next)
        {
            while(sum < (total - threads))
            {
                sem_wait(&semr);
                next.message = take();
                sem_post(&next.semr);
            }
        }
        else
        {
            while(sum < total)
            {
                sem_wait(&semr);
                sum += take();
                sem_post(&semw);
            }
        }
        return 0;
    }

    void put(int msg)
    {
        message = msg;
        sem_post(&semr);
        sem_wait(&semw);
    }
}
