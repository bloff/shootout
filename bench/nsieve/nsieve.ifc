
! nsieve implementation
! Simon Geard, 16/12/04
!
! Building info.
! ==============
!
! Linux  - using the Intel Fortran90 compiler:
!
!          ifort nsieve.f90 -O3 -static-libcxa -o nsieve
!
!        - using g95:
!
!          g95 nsieve.f90 -O3 -o nsieve

program nsieve

  implicit none
  integer num, m
  character(len=8) argv
  logical, dimension(:), allocatable :: flags

  call getarg(1,argv)
  read(argv,*) num

  m = (2**num)*10000
  allocate(flags(m))
  write(*,'(A,I8,A,I8)')  'Primes up to ',m,' ',nsi(m,flags)

  m = (2**(num-1))*10000
  write(*,'(A,I8,A,I8)')  'Primes up to ',m,' ',nsi(m,flags)

  m = (2**(num-2))*10000
  write(*,'(A,I8,A,I8)')  'Primes up to ',m,' ',nsi(m,flags)


  deallocate(flags)

contains

  integer function nsi(m, flags)
    integer, intent(in) :: m
    logical, dimension(:) :: flags
    integer i, count, k

    do i=2,m
       flags(i) = .true.
    end do
    count = 0
    do i=2,m
       if (flags(i)) then
          do k=i+i, m, i
             flags(k) = .false.
          end do
          count = count + 1
       end if
    end do

    nsi = count
  end function nsi

end program nsieve



