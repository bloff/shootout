-- $Id: nsieve.ghc-3.ghc,v 1.1 2006-01-14 04:13:56 ekarttun-guest Exp $
-- Written by Einar Karttunen, shortened by Don Stewart

import Data.Array.IO; import Data.Array.Base; import Data.Bits; import System; import Text.Printf

loop arr m n c = if n == m then return c else do
    el <- unsafeRead arr n
    if el then do mapM_ (flip (unsafeWrite arr) False) (tail [n,n+n..m])
                  loop arr m (n+1) $! c + 1
          else loop (arr :: IOUArray Int Bool) m (n+1) c

sieve m = do c <- newArray (2,m) True >>= \a -> loop a m 2 0
             printf "Primes up to %8d %8d\n" (m::Int) (c::Int) :: IO ()

main = (\n -> mapM_ (sieve.(10000 *).shiftL 1) [n,n-1,n-2]) . read . head =<< getArgs

