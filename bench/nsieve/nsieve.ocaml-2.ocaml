(*
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * contributed by Christophe TROESTLER
 *)


module Bit =
struct
  let get a i =
    Char.code(a.[i lsr 3]) land (1 lsl (i land 7)) > 0

  let set_false a i =
    let ic = i lsr 3 in
    a.[ic] <- Char.chr(Char.code(a.[ic]) land lnot(1 lsl (i land 7)))

  let nsieve m =
    let a = String.make ((m lsr 3)+1) '\255' (* Fill with 1-bits *) in
    let count = ref 0 in
    for i = 2 to m - 1 do
      if get a i then (
	let j = ref(2*i) in
	while !j < m do set_false a !j;  j := !j + i done;
	incr count
      )
    done;
    !count
end


let test n =
  let m = (1 lsl n) * 10000 in
  Printf.printf "Primes up to %8i %8i\n" m (Bit.nsieve m)

let () =
  let n = int_of_string Sys.argv.(1) in
  test n;
  if n >= 1 then test(n-1);
  if n >= 2 then test(n-2)