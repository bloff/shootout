(* Written by sweeks@sweeks.com.
 * Based on nsieve.ocaml.
 *)

fun lsl (i, j) = Word.toInt (Word.<< (Word.fromInt i, Word.fromInt j))

fun i2s (i: int): string =
   let
      val s = Int.toString i
   in
      concat [CharVector.tabulate (8 - size s, fn _ => #" "), s]
   end
   
fun nsieve m =
   let
      val s = Array.array (m + 1, true)
      fun step (i, cnt) =
	 let
	    fun whack j =
	       if j <= m then (Array.update (s, j, false); whack (j + i))
	       else ()
	 in
	    if i <= m
	       then step (i + 1,
			  if Array.sub (s, i)
			     then (whack (lsl (i, 1)); cnt + 1)
			  else cnt)
	    else cnt
	 end
   in
      print (concat ["Primes up to ", i2s m, " ", i2s (step (2, 0)), "\n"])
   end
 
val n = valOf (Int.fromString (hd (CommandLine.arguments ())))

val () = nsieve (lsl (1, n) * 10000)
val () = nsieve (lsl (1, n - 1) * 10000)
val () = nsieve (lsl (1, n - 2) * 10000)
 
