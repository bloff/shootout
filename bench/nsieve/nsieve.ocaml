(*
  Requires the Bigarray module for larger values of n 
  (>= 9 on 32 bit systems), so compile with something like: 
    ocamlopt -noassert -unsafe -o nseive bigarray.cmxa nseive.ml
  i.e. include the bigarray.cmxa library... *)

open Bigarray;;

let big_nseive m =
  let s = Array1.create Bigarray.char c_layout (succ m) in
  Array1.fill s 't';
  let rec step i cnt =
    let rec whack j = if j <= m then (Array1.set s j 'f'; whack (j + i)) in
    if i <= m then
      (if Array1.get s i = 't' then 
        (whack (i lsl 1); step (succ i) (succ cnt))
      else step (succ i) cnt)
    else cnt in
  Printf.printf "Primes up to %8d %8d\n" m (step 2 0);;
                
let _ = 
  let n = (int_of_string Sys.argv.(1)) in
  big_nseive ((1 lsl n) * 10000);
  big_nseive ((1 lsl (n-1)) * 10000);
  big_nseive ((1 lsl (n-2)) * 10000);;
  
    
