/*
-- The Great Computer Language Shootout
-- http://shootout.alioth.debian.org/
--
-- contributed by Daniel Skiles
*/

#include <cstdlib>
#include <iostream>

using namespace std;

int nsieve(int, bool[]);

int main(int argc, char *argv[])
{
    int n = (argc == 2) ? atoi(argv[1]) : 2;
    int m;
    bool* flags;
    
    m = (1<<n)*10000;
    flags = new bool[m];
    cout << "Primes up to " << m << " " << nsieve(m, flags) << endl;
    delete[] flags;
    flags = NULL;
    
    m = (1<<n-1)*10000;
    flags = new bool[m];
    cout << "Primes up to " << m << " " << nsieve(m, flags) << endl;
    delete[] flags;
    flags = NULL;
    
    m = (1<<n-2)*10000;
    flags = new bool[m];
    cout << "Primes up to " << m << " " << nsieve(m, flags) << endl;
    delete[] flags;
    flags = NULL;
    
    return EXIT_SUCCESS;
}

int nsieve(int m, bool *isPrime)
{
    int count = 0;
    
    for (int i=2; i<=m; i++)
        isPrime[i] = true;
        
    for(int i=2; i<=m; i++){
        if(isPrime[i]){
            for(int k=i*2; k<=m; k+=i){
                isPrime[k] = false;
            }
            count++;
        }
    }
    return count;
}


