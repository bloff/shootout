/*
 * nsieve benchmark for The Computer Language Shootout
 * Written by Dima Dorfman, 2004
 * Compile: gcc -std=c99 -O2 -o nsieve_gcc nsieve.c
 */

#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

typedef uint_fast8_t bits;
#define	NBITS	(CHAR_BIT * sizeof(bits))

static uintmax_t
nsieve_bitmap(uintmax_t m)
{
	uintmax_t count, i, j;
	bits a[m / NBITS];

	memset(a, (1 << CHAR_BIT) - 1, sizeof(a));
	count = 0;
	for (i = 2; i < m; ++i)
		if (a[i / NBITS] & (1 << i % NBITS)) {
			for (j = i + i; j < m; j += i)
				a[j / NBITS] &= ~(1 << j % NBITS);
			++count;
		}
	return (count);
}

static uintmax_t
nsieve_boolarray(uintmax_t m)
{
	uintmax_t count, i, j;
	char a[m];

	memset(a, 1, sizeof(a));
	count = 0;
	for (i = 2; i < m; ++i)
		if (a[i]) {
			for (j = i + i; j < m; j += i)
				a[j] = 0;
			++count;
		}
	return (count);
}

static void
test(uintmax_t (*nsieve)(uintmax_t), unsigned long n)
{
	uintmax_t count, m;

	m = (1 << n) * 10000;
	count = nsieve(m);
	printf("Primes up to %8ju %8ju\n", m, count);
}

int
main(int ac, char **av)
{
	uintmax_t (*nsieve)(uintmax_t);
	unsigned long n;
	char *cp;

	if (ac < 2) {
usage:		fprintf(stderr, "usage: nsieve [-f] N\n");
		exit(2);
	}
	++av;
	if (strcmp(*av, "-f") == 0) {
		nsieve = nsieve_boolarray;
		++av;
	} else
		nsieve = nsieve_bitmap;
	if (*av == NULL)
		goto usage;
	n = strtoul(*av, &cp, 10);
	if (**av == '\0' || *cp != '\0' || n == ULONG_MAX)
		goto usage;
	test(nsieve, n);
	if (n >= 1)
		test(nsieve, n - 1);
	if (n >= 2)
		test(nsieve, n - 2);
	exit(0);
}
