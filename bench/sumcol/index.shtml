<!--#set var="TITLE" value="Sum a Column of Integers" -->
<!--#set var="KEYWORDS" value="performance, benchmark, 
computer, language, compare, cpu, memory,
sum a column" --> 
<!--#include virtual="../../html/header.shtml" -->
<!--#include virtual="../../html/nav.shtml" -->

<table width="70%"><tr>
<td>
  <!--#if expr="$QUERY_STRING = mem" -->
    <!--#include virtual="data/all_mem.html" -->
  <!--#elif expr="$QUERY_STRING = loc" -->
    <!--#include virtual="data/all_loc.html" -->
  <!--#elif expr="$QUERY_STRING = cpu-s" -->
    <!--#include virtual="data/all_cpu-s.html" -->
  <!--#else -->
    <!--#include virtual="data/all.html" -->
  <!--#endif -->
</td>
<td>
  <img src="data/max.png">
  <!--#include virtual="../../html/graph_note.shtml" -->
  <p><small>[Results last updated: <!--#include virtual=".up_date" --> CDT]</small>
</td>
</tr></table>
<p>

<hr noshade size="5">

<h4>About this test</h4>
<p>
  For this test, each program should be implemented in the <a
  href="../../method.shtml#sameway"><i>same way</i></a>.
<p>
  This test sums a column of integers from an input file.  It mostly
  measures speed of line-oriented I/O and conversion of string to
  integer.  Each test should read integers line by line from stdin,
  one integer per line, sum the integers and print the sum.  For
  this test, I would like to see programs use a language's built-in
  line-oriented I/O functions used, as opposed to rolling your own.
  As each line should be read one at a time, the programs should run
  in constant space.
<p>
  For this test, each program can assume that no line will exceed 128
  characters (including newline).
<p>
  <a href="/data/shootout/sumcol/Input">Input</a> file (it
  is repeated N times).
<p>
  The correct output (for N = 100, i.e. 100 copies of the input)
  looks like this:
<pre>
  <!--#include virtual="Output" -->
</pre>


<h4><a href="alt/">Alternates</a></h4>
<p>
  <i>This section is for displaying alternate solutions that are either
  slower than ones above or perhaps don't quite meet my criteria for
  the competition, but are otherwise worthy of comment.</i>
<ul>
<li>
  Quentin Crain submitted a nice short <a
  href="alt/sumcol.python2.python">Python</a> solution using
  map/reduce, however this solution reads all input at once, instead
  of line by line.
<li>
  Paul Foley contributed a couple alternates for CMUCL <a
  href="alt/sumcol.cmucl3.cmucl">[1]</a>, <a
  href="alt/sumcol.cmucl4.cmucl">[2]</a>.
</ul>

<h4>Acknowledgements</h4>
<p>
  Henrik Grubbström contributed a <a href="sumcol.pike2.pike">Pike</a>
  program that avoids the overhead of line-oriented I/O, and is almost
  10 times faster than the <a href="sumcol.pike">original</a> that
  reads input line by line.


<!--#include virtual="../../html/nav.shtml" -->
<!--#include virtual="../../html/footer.shtml" -->
