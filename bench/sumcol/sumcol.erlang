%%% -*- mode: erlang -*-
%%% $Id: sumcol.erlang,v 1.1 2004-05-19 18:13:43 bfulgham Exp $
%%% http://www.bagley.org/~doug/shootout/

-module(sumcol).
-export([main/0, main/1]).
-export([init/0]).

%% get the program argument, which is how many test iterations to run
%% for this test, we ignore this parameter
main() -> main(['1']).
main(Args) ->
    spawn(?MODULE,init,[]),
    init:stop().

init() ->
    Port = open_port({fd, 0, 1}, [eof, {line, 32}]),
    io:format("~w~n",[sumcol(Port)]).

sumcol(Port) ->
    sumcol(Port, 0).
sumcol(Port, Sum) ->
    receive
	{Port, {_, {_, Line}}} ->
	    sumcol(Port, Sum + list_to_integer(Line));
	{Port, eof} ->
	    Sum
    end.

%% the following uses io:get_line, but that routine uses space
%% in proportion to the input size (not tail recursive???)
%sumcol(Sum, eof) ->
%    Sum;
%sumcol(Sum, Line) ->
%    NewSum = Sum + list_to_integer(lists:sublist(Line, length(Line) - 1)),
%    sumcol(NewSum, io:get_line('')).
