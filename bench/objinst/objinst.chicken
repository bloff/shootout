;;; $Id: objinst.chicken,v 1.1 2004-09-17 13:48:03 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/
;;; from: Benedikt Rosenau

(declare (fixnum) (disable-interrupts) (uses tinyclos))

(define-generic print-bool)
(define-generic activate!)

(define-method (print-bool (b <boolean>))
   (display (if b "true\n" "false\n")))

(define-class <toggle> () (state))

(define value? (cut slot-ref <> 'state))

(define-class <nth-toggle> (<toggle>) (count-max counter))

(define-method (initialize (nt <nth-toggle>) initargs)
  (initialize-slots nt initargs) )

(define-method (activate! (t <toggle>))
  (slot-set! t 'state (not (slot-ref t 'state)))
   t)

(define-method (activate! (n-t <nth-toggle>))
  (let ((counter (+ 1 (slot-ref n-t 'counter))))
    (slot-set! n-t 'counter counter)
    (if (>= counter (slot-ref n-t 'count-max))
      (begin (slot-set! n-t 'state (not (slot-ref n-t 'state)))
             (slot-set! n-t 'counter 0)))
     n-t))

(define (main #!optional (n "1"))
  (let ((n (string->number n)))
    (let ((tog (make <toggle> 'state #t)))
      (do ((i 0 (+ i 1))) ((= i 5))
	(print-bool (value? (activate! tog)))))
    (do ((i 0 (+ i 1))) ((= i n))
      (make <toggle> 'state #t))
    (newline)
    (let ((ntog (make <nth-toggle> 'state #t 'count-max 3 'counter 0)))
      (do ((i 0 (+ i 1))) ((= i 8))
	(print-bool (value? (activate! ntog)))))
    (do ((i 0 (+ i 1))) ((= i n))
      (make <nth-toggle> 'state #t 'count-max 3 'counter 0))))
            
(apply main (command-line-arguments))
