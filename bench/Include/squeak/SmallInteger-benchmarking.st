'From Squeak3.8.1 of ''28 Aug 2006'' [latest update: #6747] on 30 November 2006 at 9:21:47 pm'!!SmallInteger methodsFor: 'benchmarking' stamp: '  11/29/2006 21:30'!ack: aSmallInteger   ^self == 0      ifTrue: [aSmallInteger + 1]      ifFalse: [         aSmallInteger == 0            ifTrue: [self - 1 ack:  1]            ifFalse: [self - 1 ack: (self ack: aSmallInteger - 1)] ]! !!SmallInteger methodsFor: 'benchmarking' stamp: '  11/29/2006 21:31'!fib   ^self < 2 ifTrue: [1] ifFalse: [(self - 2) fib + (self - 1) fib]! !!SmallInteger methodsFor: 'benchmarking' stamp: '  11/29/2006 22:48'!matrixA: anInteger"fixup one-based indexing to zero-based indexing - cleanup later"   | i j |   i := self - 1.    j := anInteger - 1.   ^1.0d0 / (i + j * (i + j + 1) /2  + i + 1) asFloat! !!SmallInteger methodsFor: 'benchmarking' stamp: '  11/30/2006 20:49'!maxPfannkuchen    | max gen perm check stdout |    max := 0.    check := 0.    gen := PermGenerator new: self.    stdout := FileStream fileNamed: '/dev/stdout'.    [ gen atEnd ] whileFalse: [	perm := gen next.        check < 30 ifTrue: [	    perm do: [ :each | stdout nextPutAll: each printString ]. 	    stdout nextPut: Character lf.	    check := check + 1 ].	max := max max: perm pfannkuchen    ].    ^max! !!SmallInteger methodsFor: 'benchmarking' stamp: '  11/30/2006 21:10'!maxPfannkuchen: aStream    | max gen perm check |    max := 0.    check := 0.    gen := PermGenerator new: self.    [ gen atEnd ] whileFalse: [	perm := gen next.        check < 30 ifTrue: [	    perm do: [ :each | aStream nextPutAll: each printString ]. 	    aStream nextPut: Character lf.	    check := check + 1 ].	max := max max: perm pfannkuchen    ].    ^max! !!SmallInteger methodsFor: 'benchmarking' stamp: '  11/29/2006 22:34'!nsieve    | count isPrime |   count := 0.   isPrime := Array new: self withAll: true.   2 to: self do: [:i|      (isPrime at: i) ifTrue: [         i+i to: self by: i do: [:k| isPrime at: k put: false].         count := count + 1.         ].      ].   ^count! !!SmallInteger methodsFor: 'benchmarking' stamp: '  11/30/2006 20:53'!primes   | m |   m := (2 raisedTo: self) * 10000.   (FileStream fileNamed: '/dev/stdout')      nextPutAll: 'Primes up to '; nextPutAll: (m printStringLength: 8 padded: false);      nextPutAll: (m nsieve printStringLength: 9 padded: false);       nextPut: Character lf;      flush! !!SmallInteger methodsFor: 'benchmarking' stamp: '  11/30/2006 21:21'!primes: aStream   | m |   m := (2 raisedTo: self) * 10000.   aStream      nextPutAll: 'Primes up to '; nextPutAll: (m printStringLength: 8 padded: false);      nextPutAll: (m nsieve printStringLength: 9 padded: false);       nextPut: Character lf! !!SmallInteger methodsFor: 'benchmarking' stamp: '  11/29/2006 21:31'!tak: y z: z   ^y < self       ifTrue: [((self - 1) tak: y z: z) tak: ((y - 1) tak: z z: self) z: ((z - 1) tak: self z: y)]      ifFalse: [z]! !